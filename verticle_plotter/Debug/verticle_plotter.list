
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000141e0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  080143b8  080143b8  000153b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014a18  08014a18  00016394  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014a18  08014a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014a20  08014a20  00016394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014a20  08014a20  00015a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014a24  08014a24  00015a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000394  20000000  08014a28  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021f8  20000394  08014dbc  00016394  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000258c  08014dbc  0001658c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016394  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c61b  00000000  00000000  000163c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055d3  00000000  00000000  000429df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d10  00000000  00000000  00047fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016a9  00000000  00000000  00049cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db96  00000000  00000000  0004b371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bd28  00000000  00000000  00078f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a1b3  00000000  00000000  000a4c2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bede2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084b4  00000000  00000000  001bee28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c72dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000394 	.word	0x20000394
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080143a0 	.word	0x080143a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000398 	.word	0x20000398
 8000214:	080143a0 	.word	0x080143a0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00a fd1e 	bl	800ba20 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f009 fe07 	bl	800ac04 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe95 	bl	8001e6a <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PID_CONTROLLER_Reset>:

void PID_CONTROLLER_Reset(PID_CONTROLLER *controller) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    controller->ek_1 = 0.0f;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
    controller->ek_2 = 0.0f;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
    controller->u = 0.0f;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
    controller->prev_Kp = controller->Kp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
    controller->prev_Ki = controller->Ki;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
    controller->prev_Kd = controller->Kd;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3328      	adds	r3, #40	@ 0x28
 80013a0:	88fa      	ldrh	r2, [r7, #6]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 faf3 	bl	8003990 <PWM_init>
	mdxx->GPIOx = GPIOx;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8b3a      	ldrh	r2, [r7, #24]
 80013b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013d4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d15f      	bne.n	80014a2 <MDXX_set_range+0xda>
		if (duty == 0) {
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d115      	bne.n	800141c <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3310      	adds	r3, #16
 80013f4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001574 <MDXX_set_range+0x1ac>
 80013f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 fbef 	bl	8003be0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3328      	adds	r3, #40	@ 0x28
 8001406:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001574 <MDXX_set_range+0x1ac>
 800140a:	ed97 0a02 	vldr	s0, [r7, #8]
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fbe6 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = 0;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800141a:	e0a6      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 800141c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd1a      	ble.n	8001460 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3310      	adds	r3, #16
 800142e:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001574 <MDXX_set_range+0x1ac>
 8001432:	ed97 0a02 	vldr	s0, [r7, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f002 fbd2 	bl	8003be0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3328      	adds	r3, #40	@ 0x28
 8001440:	edd7 0a01 	vldr	s1, [r7, #4]
 8001444:	ed97 0a02 	vldr	s0, [r7, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f002 fbc9 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = duty;
 800144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001456:	ee17 2a90 	vmov	r2, s15
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145e:	e084      	b.n	800156a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3310      	adds	r3, #16
 8001464:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001578 <MDXX_set_range+0x1b0>
 8001468:	ed97 0a02 	vldr	s0, [r7, #8]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fbb7 	bl	8003be0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3328      	adds	r3, #40	@ 0x28
 8001476:	edd7 7a01 	vldr	s15, [r7, #4]
 800147a:	eef0 7ae7 	vabs.f32	s15, s15
 800147e:	eef0 0a67 	vmov.f32	s1, s15
 8001482:	ed97 0a02 	vldr	s0, [r7, #8]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 fbaa 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001490:	eef0 7ae7 	vabs.f32	s15, s15
 8001494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001498:	ee17 2a90 	vmov	r2, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e063      	b.n	800156a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d15e      	bne.n	800156a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80014ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d115      	bne.n	80014e6 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	f00b f9f0 	bl	800c8ac <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3328      	adds	r3, #40	@ 0x28
 80014d0:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001574 <MDXX_set_range+0x1ac>
 80014d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 fb81 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = 0;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e041      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd1a      	ble.n	800152a <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	f00b f9d3 	bl	800c8ac <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3328      	adds	r3, #40	@ 0x28
 800150a:	edd7 0a01 	vldr	s1, [r7, #4]
 800150e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fb64 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = duty;
 8001518:	edd7 7a01 	vldr	s15, [r7, #4]
 800151c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001520:	ee17 2a90 	vmov	r2, s15
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001528:	e01f      	b.n	800156a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f00b f9b8 	bl	800c8ac <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3328      	adds	r3, #40	@ 0x28
 8001540:	edd7 7a01 	vldr	s15, [r7, #4]
 8001544:	eef0 7ae7 	vabs.f32	s15, s15
 8001548:	eef0 0a67 	vmov.f32	s1, s15
 800154c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f002 fb45 	bl	8003be0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001556:	edd7 7a01 	vldr	s15, [r7, #4]
 800155a:	eef0 7ae7 	vabs.f32	s15, s15
 800155e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001562:	ee17 2a90 	vmov	r2, s15
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	00000000 	.word	0x00000000
 8001578:	42c80000 	.word	0x42c80000

0800157c <REVOLUTE_MOTOR_FFD_Init>:
	.offset = 30.07e-3,
    .c = 24.13e-3,
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	ed2d 8b02 	vpush	{d8}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015b8:	f7fe ffea 	bl	8000590 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	461d      	mov	r5, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015d4:	f7fe ffdc 	bl	8000590 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe fe20 	bl	8000224 <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015f4:	f7ff f8f6 	bl	80007e4 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff faa8 	bl	8000b54 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 8001608:	ed97 7a00 	vldr	s14, [r7]
 800160c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa96 	bl	8000b54 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eeb1 8a67 	vneg.f32	s16, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa89 	bl	8000b54 <__aeabi_d2f>
 8001642:	4604      	mov	r4, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fa80 	bl	8000b54 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef1 8a67 	vneg.f32	s17, s15
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa73 	bl	8000b54 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	ee02 3a10 	vmov	s4, r3
 8001674:	eef0 1a68 	vmov.f32	s3, s17
 8001678:	ee01 4a10 	vmov	s2, r4
 800167c:	eef0 0a48 	vmov.f32	s1, s16
 8001680:	ed97 0a02 	vldr	s0, [r7, #8]
 8001684:	f000 fbf1 	bl	8001e6a <mapf>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
}
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	ecbd 8b02 	vpop	{d8}
 8001698:	bdb0      	pop	{r4, r5, r7, pc}

0800169a <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	605a      	str	r2, [r3, #4]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float s){
 80016be:	b5b0      	push	{r4, r5, r7, lr}
 80016c0:	ed2d 8b02 	vpush	{d8}
 80016c4:	b088      	sub	sp, #32
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	ed87 0a02 	vstr	s0, [r7, #8]
 80016ce:	edc7 0a01 	vstr	s1, [r7, #4]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s + motor->En->offset);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e6:	ee17 0a90 	vmov	r0, s15
 80016ea:	f7fe fef9 	bl	80004e0 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	68b8      	ldr	r0, [r7, #8]
 80016f4:	f7fe fef4 	bl	80004e0 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	ec43 2b10 	vmov	d0, r2, r3
 8001700:	f010 ff9a 	bl	8012638 <sin>
 8001704:	ec53 2b10 	vmov	r2, r3, d0
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe ff40 	bl	8000590 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001728:	ee17 0a90 	vmov	r0, s15
 800172c:	f7fe fed8 	bl	80004e0 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe ff2a 	bl	8000590 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa06 	bl	8000b54 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->slide_rail_mass * motor->En->g * sin(q) * (motor->En->c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	ed93 7a02 	vldr	s14, [r3, #8]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe febc 	bl	80004e0 <__aeabi_f2d>
 8001768:	4604      	mov	r4, r0
 800176a:	460d      	mov	r5, r1
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f7fe feb7 	bl	80004e0 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ec43 2b10 	vmov	d0, r2, r3
 800177a:	f010 ff5d 	bl	8012638 <sin>
 800177e:	ec53 2b10 	vmov	r2, r3, d0
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe ff03 	bl	8000590 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4614      	mov	r4, r2
 8001790:	461d      	mov	r5, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fea1 	bl	80004e0 <__aeabi_f2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7fe fef3 	bl	8000590 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f9cf 	bl	8000b54 <__aeabi_d2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017ca:	f7ff f80b 	bl	80007e4 <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f9bd 	bl	8000b54 <__aeabi_d2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter - gravity_compensate_rail) * transfer_function;
 80017de:	ed97 7a07 	vldr	s14, [r7, #28]
 80017e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80017ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f2:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f9a7 	bl	8000b54 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb1 8a67 	vneg.f32	s16, s15
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f99a 	bl	8000b54 <__aeabi_d2f>
 8001820:	4604      	mov	r4, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f991 	bl	8000b54 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef1 8a67 	vneg.f32	s17, s15
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f984 	bl	8000b54 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	ee02 3a10 	vmov	s4, r3
 8001852:	eef0 1a68 	vmov.f32	s3, s17
 8001856:	ee01 4a10 	vmov	s2, r4
 800185a:	eef0 0a48 	vmov.f32	s1, s16
 800185e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001862:	f000 fb02 	bl	8001e6a <mapf>
 8001866:	eef0 7a40 	vmov.f32	s15, s0
}
 800186a:	eeb0 0a67 	vmov.f32	s0, s15
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	ecbd 8b02 	vpop	{d8}
 8001876:	bdb0      	pop	{r4, r5, r7, pc}

08001878 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	0000      	movs	r0, r0
	...

08001898 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	ed2d 8b02 	vpush	{d8}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018b8:	f7fe fe6a 	bl	8000590 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018d4:	f7fe fe5c 	bl	8000590 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fca0 	bl	8000224 <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018f4:	f7fe ff76 	bl	80007e4 <__aeabi_ddiv>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff f928 	bl	8000b54 <__aeabi_d2f>
 8001904:	4603      	mov	r3, r0
 8001906:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 8001908:	ed97 7a00 	vldr	s14, [r7]
 800190c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001918:	68b8      	ldr	r0, [r7, #8]
 800191a:	f7fe fde1 	bl	80004e0 <__aeabi_f2d>
 800191e:	a326      	add	r3, pc, #152	@ (adr r3, 80019b8 <PRISMATIC_MOTOR_FFD_Compute+0x120>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe fe34 	bl	8000590 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	f7ff f910 	bl	8000b54 <__aeabi_d2f>
 8001934:	4604      	mov	r4, r0
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f7ff f907 	bl	8000b54 <__aeabi_d2f>
 8001946:	4603      	mov	r3, r0
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eeb1 8a67 	vneg.f32	s16, s15
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f8fa 	bl	8000b54 <__aeabi_d2f>
 8001960:	4605      	mov	r5, r0
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f8f1 	bl	8000b54 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eef1 8a67 	vneg.f32	s17, s15
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff f8e4 	bl	8000b54 <__aeabi_d2f>
 800198c:	4603      	mov	r3, r0
 800198e:	ee02 3a10 	vmov	s4, r3
 8001992:	eef0 1a68 	vmov.f32	s3, s17
 8001996:	ee01 5a10 	vmov	s2, r5
 800199a:	eef0 0a48 	vmov.f32	s1, s16
 800199e:	ee00 4a10 	vmov	s0, r4
 80019a2:	f000 fa62 	bl	8001e6a <mapf>
 80019a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80019aa:	eeb0 0a67 	vmov.f32	s0, s15
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	ecbd 8b02 	vpop	{d8}
 80019b6:	bdb0      	pop	{r4, r5, r7, pc}
 80019b8:	9999999a 	.word	0x9999999a
 80019bc:	3fb99999 	.word	0x3fb99999

080019c0 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	0000      	movs	r0, r0
	...

080019e8 <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	ed2d 8b02 	vpush	{d8}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80019f8:	edc7 0a01 	vstr	s1, [r7, #4]
 80019fc:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a14:	ee17 0a90 	vmov	r0, s15
 8001a18:	f7fe fd62 	bl	80004e0 <__aeabi_f2d>
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	460d      	mov	r5, r1
 8001a20:	68b8      	ldr	r0, [r7, #8]
 8001a22:	f7fe fd5d 	bl	80004e0 <__aeabi_f2d>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	ec43 2b10 	vmov	d0, r2, r3
 8001a2e:	f010 fdaf 	bl	8012590 <cos>
 8001a32:	ec53 2b10 	vmov	r2, r3, d0
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f7fe fda9 	bl	8000590 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff f885 	bl	8000b54 <__aeabi_d2f>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a66:	ed97 7a00 	vldr	s14, [r7]
 8001a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6e:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd2d 	bl	80004e0 <__aeabi_f2d>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	f7fe fd7f 	bl	8000590 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001aa2:	f7fe fe9f 	bl	80007e4 <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f851 	bl	8000b54 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001ab6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aba:	edd7 7a06 	vldr	s15, [r7, #24]
 8001abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aca:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001ace:	6938      	ldr	r0, [r7, #16]
 8001ad0:	f7fe fd06 	bl	80004e0 <__aeabi_f2d>
 8001ad4:	a326      	add	r3, pc, #152	@ (adr r3, 8001b70 <PRISMATIC_MOTOR_DFD_Compute+0x188>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fd59 	bl	8000590 <__aeabi_dmul>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f835 	bl	8000b54 <__aeabi_d2f>
 8001aea:	4604      	mov	r4, r0
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f7ff f82c 	bl	8000b54 <__aeabi_d2f>
 8001afc:	4603      	mov	r3, r0
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb1 8a67 	vneg.f32	s16, s15
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7ff f81f 	bl	8000b54 <__aeabi_d2f>
 8001b16:	4605      	mov	r5, r0
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7ff f816 	bl	8000b54 <__aeabi_d2f>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef1 8a67 	vneg.f32	s17, s15
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f809 	bl	8000b54 <__aeabi_d2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	ee02 3a10 	vmov	s4, r3
 8001b48:	eef0 1a68 	vmov.f32	s3, s17
 8001b4c:	ee01 5a10 	vmov	s2, r5
 8001b50:	eef0 0a48 	vmov.f32	s1, s16
 8001b54:	ee00 4a10 	vmov	s0, r4
 8001b58:	f000 f987 	bl	8001e6a <mapf>
 8001b5c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b60:	eeb0 0a67 	vmov.f32	s0, s15
 8001b64:	3720      	adds	r7, #32
 8001b66:	46bd      	mov	sp, r7
 8001b68:	ecbd 8b02 	vpop	{d8}
 8001b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	9999999a 	.word	0x9999999a
 8001b74:	3fb99999 	.word	0x3fb99999

08001b78 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	ed2d 8b02 	vpush	{d8}
 8001b7e:	b08a      	sub	sp, #40	@ 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	460b      	mov	r3, r1
 8001b86:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b8a:	edc7 0a00 	vstr	s1, [r7]
 8001b8e:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b90:	897b      	ldrh	r3, [r7, #10]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <FIR_init+0x2a>
        numTaps += 1;
 8001b9c:	897b      	ldrh	r3, [r7, #10]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	897a      	ldrh	r2, [r7, #10]
 8001ba6:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001bae:	897b      	ldrh	r3, [r7, #10]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f010 fbe2 	bl	801237c <malloc>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001bc0:	897b      	ldrh	r3, [r7, #10]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f010 fbd9 	bl	801237c <malloc>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80e0 	beq.w	8001d9c <FIR_init+0x224>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80db 	beq.w	8001d9c <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001be6:	2300      	movs	r3, #0
 8001be8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bea:	e00a      	b.n	8001c02 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001bfc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bfe:	3301      	adds	r3, #1
 8001c00:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001c02:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001c04:	897b      	ldrh	r3, [r7, #10]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d3f0      	bcc.n	8001bec <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001c0a:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c0e:	ed97 7a00 	vldr	s14, [r7]
 8001c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c16:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001c1a:	897b      	ldrh	r3, [r7, #10]
 8001c1c:	085b      	lsrs	r3, r3, #1
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001c22:	2300      	movs	r3, #0
 8001c24:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001c26:	e077      	b.n	8001d18 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001c28:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001c2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d10c      	bne.n	8001c4e <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c44:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c48:	edc3 7a00 	vstr	s15, [r3]
 8001c4c:	e02c      	b.n	8001ca8 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001c4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c50:	8afb      	ldrh	r3, [r7, #22]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001c58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c5c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001da8 <FIR_init+0x230>
 8001c60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c74:	eeb0 0a67 	vmov.f32	s0, s15
 8001c78:	f010 fdb4 	bl	80127e4 <sinf>
 8001c7c:	eef0 6a40 	vmov.f32	s13, s0
 8001c80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001dac <FIR_init+0x234>
 8001c90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca4:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	ed93 8a00 	vldr	s16, [r3]
 8001cb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001da8 <FIR_init+0x230>
 8001cc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ccc:	897b      	ldrh	r3, [r7, #10]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cdc:	eeb0 0a66 	vmov.f32	s0, s13
 8001ce0:	f010 fd3c 	bl	801275c <cosf>
 8001ce4:	eef0 7a40 	vmov.f32	s15, s0
 8001ce8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001db0 <FIR_init+0x238>
 8001cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001db4 <FIR_init+0x23c>
 8001cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d08:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001d0c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001d18:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001d1c:	897b      	ldrh	r3, [r7, #10]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	db82      	blt.n	8001c28 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001d28:	2300      	movs	r3, #0
 8001d2a:	83fb      	strh	r3, [r7, #30]
 8001d2c:	e00f      	b.n	8001d4e <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	8bfb      	ldrh	r3, [r7, #30]
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001d48:	8bfb      	ldrh	r3, [r7, #30]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	83fb      	strh	r3, [r7, #30]
 8001d4e:	8bfa      	ldrh	r2, [r7, #30]
 8001d50:	897b      	ldrh	r3, [r7, #10]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d3eb      	bcc.n	8001d2e <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001d56:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	d01b      	beq.n	8001d9c <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d64:	2300      	movs	r3, #0
 8001d66:	83bb      	strh	r3, [r7, #28]
 8001d68:	e014      	b.n	8001d94 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	8bbb      	ldrh	r3, [r7, #28]
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	edd3 6a00 	vldr	s13, [r3]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	8bbb      	ldrh	r3, [r7, #28]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d8a:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d8e:	8bbb      	ldrh	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	83bb      	strh	r3, [r7, #28]
 8001d94:	8bba      	ldrh	r2, [r7, #28]
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d3e6      	bcc.n	8001d6a <FIR_init+0x1f2>
            }
        }
    }
}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	@ 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	ecbd 8b02 	vpop	{d8}
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40c90fdb 	.word	0x40c90fdb
 8001dac:	40490fdb 	.word	0x40490fdb
 8001db0:	3eeb851f 	.word	0x3eeb851f
 8001db4:	3f0a3d71 	.word	0x3f0a3d71

08001db8 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	895b      	ldrh	r3, [r3, #10]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	895b      	ldrh	r3, [r3, #10]
 8001dde:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001de0:	2300      	movs	r3, #0
 8001de2:	813b      	strh	r3, [r7, #8]
 8001de4:	e023      	b.n	8001e2e <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	897b      	ldrh	r3, [r7, #10]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	ed93 7a00 	vldr	s14, [r3]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	893b      	ldrh	r3, [r7, #8]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e06:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0e:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 8001e12:	897b      	ldrh	r3, [r7, #10]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d104      	bne.n	8001e22 <FIR_process+0x6a>
            index = fir->numTaps - 1;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	891b      	ldrh	r3, [r3, #8]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	817b      	strh	r3, [r7, #10]
 8001e20:	e002      	b.n	8001e28 <FIR_process+0x70>
        } else {
            index--;
 8001e22:	897b      	ldrh	r3, [r7, #10]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001e28:	893b      	ldrh	r3, [r7, #8]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	813b      	strh	r3, [r7, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	891b      	ldrh	r3, [r3, #8]
 8001e32:	893a      	ldrh	r2, [r7, #8]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d3d6      	bcc.n	8001de6 <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	895b      	ldrh	r3, [r3, #10]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	895a      	ldrh	r2, [r3, #10]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	891b      	ldrh	r3, [r3, #8]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d302      	bcc.n	8001e56 <FIR_process+0x9e>
        fir->bufferIndex = 0;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	815a      	strh	r2, [r3, #10]
    }

    return output;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	ee07 3a90 	vmov	s15, r3
}
 8001e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001e6a:	b480      	push	{r7}
 8001e6c:	b089      	sub	sp, #36	@ 0x24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e74:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e78:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e7c:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e80:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001e84:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e8c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e90:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e94:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea0:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001ea4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ea8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec0:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	ee07 3a90 	vmov	s15, r3
}
 8001eca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ece:	3724      	adds	r7, #36	@ 0x24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001edc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2200      	movs	r2, #0
 8001eee:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001ef0:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	200003b0 	.word	0x200003b0

08001f18 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001f20:	4b04      	ldr	r3, [pc, #16]	@ (8001f34 <modbus_3t5_Timeout+0x1c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	755a      	strb	r2, [r3, #21]

}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	200003b0 	.word	0x200003b0

08001f38 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f00e fc01 	bl	8010748 <HAL_UART_GetError>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d101      	bne.n	8001f50 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001f4c:	f7ff ffc4 	bl	8001ed8 <modbus_1t5_Timeout>

	}
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001f66:	4a2d      	ldr	r2, [pc, #180]	@ (800201c <Modbus_init+0xc4>)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800201c <Modbus_init+0xc4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001f74:	4b29      	ldr	r3, [pc, #164]	@ (800201c <Modbus_init+0xc4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001f7c:	4b27      	ldr	r3, [pc, #156]	@ (800201c <Modbus_init+0xc4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001f84:	4b25      	ldr	r3, [pc, #148]	@ (800201c <Modbus_init+0xc4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	7e3a      	ldrb	r2, [r7, #24]
 8001f8a:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001f8c:	4b23      	ldr	r3, [pc, #140]	@ (800201c <Modbus_init+0xc4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	4a21      	ldr	r2, [pc, #132]	@ (8002020 <Modbus_init+0xc8>)
 8001f9a:	210e      	movs	r1, #14
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f00c fdf7 	bl	800eb90 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2110      	movs	r1, #16
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00e fb77 	bl	801069c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f00e fb8e 	bl	80106d4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4a19      	ldr	r2, [pc, #100]	@ (8002024 <Modbus_init+0xcc>)
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f00d fe35 	bl	800fc30 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <Modbus_init+0xc4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001fcc:	4b13      	ldr	r3, [pc, #76]	@ (800201c <Modbus_init+0xc4>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b12      	ldr	r3, [pc, #72]	@ (800201c <Modbus_init+0xc4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001fd8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001fdc:	4413      	add	r3, r2
 8001fde:	3302      	adds	r3, #2
 8001fe0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f00d ff5d 	bl	800fea4 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001fea:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <Modbus_init+0xc4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10c      	bne.n	8002014 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001ffa:	4b08      	ldr	r3, [pc, #32]	@ (800201c <Modbus_init+0xc4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	4618      	mov	r0, r3
 8002002:	f00b fda1 	bl	800db48 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8002006:	4b05      	ldr	r3, [pc, #20]	@ (800201c <Modbus_init+0xc4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f00b fff0 	bl	800dff4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200003b0 	.word	0x200003b0
 8002020:	08001f19 	.word	0x08001f19
 8002024:	08001f39 	.word	0x08001f39

08002028 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8002034:	23ff      	movs	r3, #255	@ 0xff
 8002036:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8002038:	23ff      	movs	r3, #255	@ 0xff
 800203a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800203c:	e013      	b.n	8002066 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	7bbb      	ldrb	r3, [r7, #14]
 8002048:	4053      	eors	r3, r2
 800204a:	b2db      	uxtb	r3, r3
 800204c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800204e:	4a10      	ldr	r2, [pc, #64]	@ (8002090 <CRC16+0x68>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4413      	add	r3, r2
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	7bfb      	ldrb	r3, [r7, #15]
 8002058:	4053      	eors	r3, r2
 800205a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800205c:	4a0d      	ldr	r2, [pc, #52]	@ (8002094 <CRC16+0x6c>)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	4413      	add	r3, r2
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8002066:	883b      	ldrh	r3, [r7, #0]
 8002068:	1e5a      	subs	r2, r3, #1
 800206a:	803a      	strh	r2, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1e6      	bne.n	800203e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
 8002072:	b21b      	sxth	r3, r3
 8002074:	021b      	lsls	r3, r3, #8
 8002076:	b21a      	sxth	r2, r3
 8002078:	7bbb      	ldrb	r3, [r7, #14]
 800207a:	b21b      	sxth	r3, r3
 800207c:	4313      	orrs	r3, r2
 800207e:	b21b      	sxth	r3, r3
 8002080:	b29b      	uxth	r3, r3
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20000218 	.word	0x20000218
 8002094:	20000118 	.word	0x20000118

08002098 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 800209e:	4b7e      	ldr	r3, [pc, #504]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	7ddb      	ldrb	r3, [r3, #23]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d80a      	bhi.n	80020c0 <Modbus_Protocal_Worker+0x28>
 80020aa:	a201      	add	r2, pc, #4	@ (adr r2, 80020b0 <Modbus_Protocal_Worker+0x18>)
 80020ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b0:	080020cb 	.word	0x080020cb
 80020b4:	0800225f 	.word	0x0800225f
 80020b8:	08002157 	.word	0x08002157
 80020bc:	0800219b 	.word	0x0800219b
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80020c0:	4b75      	ldr	r3, [pc, #468]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2201      	movs	r2, #1
 80020c6:	75da      	strb	r2, [r3, #23]
		break;
 80020c8:	e0e1      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80020ca:	4b73      	ldr	r3, [pc, #460]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80020d6:	4b70      	ldr	r3, [pc, #448]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2202      	movs	r2, #2
 80020dc:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80020de:	f000 f9cd 	bl	800247c <Modbus_Emission>
 80020e2:	e018      	b.n	8002116 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80020e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80020ee:	4b6a      	ldr	r3, [pc, #424]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d00b      	beq.n	8002116 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80020fe:	4b66      	ldr	r3, [pc, #408]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2200      	movs	r2, #0
 8002104:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8002106:	4b64      	ldr	r3, [pc, #400]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2200      	movs	r2, #0
 800210c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800210e:	4b62      	ldr	r3, [pc, #392]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2203      	movs	r2, #3
 8002114:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8002116:	4b60      	ldr	r3, [pc, #384]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002120:	2b20      	cmp	r3, #32
 8002122:	f040 80ad 	bne.w	8002280 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8002126:	4b5c      	ldr	r3, [pc, #368]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8002130:	4b59      	ldr	r3, [pc, #356]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8002136:	4b58      	ldr	r3, [pc, #352]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	4b57      	ldr	r3, [pc, #348]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8002142:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8002146:	4413      	add	r3, r2
 8002148:	3302      	adds	r3, #2
 800214a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800214e:	4619      	mov	r1, r3
 8002150:	f00d fea8 	bl	800fea4 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8002154:	e094      	b.n	8002280 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8002156:	4b50      	ldr	r3, [pc, #320]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	7d1b      	ldrb	r3, [r3, #20]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 8091 	beq.w	8002284 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8002162:	4b4d      	ldr	r3, [pc, #308]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	22fe      	movs	r2, #254	@ 0xfe
 8002168:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800216a:	4b4b      	ldr	r3, [pc, #300]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8002174:	4b48      	ldr	r3, [pc, #288]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8002184:	4b44      	ldr	r3, [pc, #272]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002186:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8002188:	1a8a      	subs	r2, r1, r2
 800218a:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 800218c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8002190:	4b41      	ldr	r3, [pc, #260]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2204      	movs	r2, #4
 8002196:	75da      	strb	r2, [r3, #23]
		}
		break;
 8002198:	e074      	b.n	8002284 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800219a:	4b3f      	ldr	r3, [pc, #252]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80021a2:	f113 0f02 	cmn.w	r3, #2
 80021a6:	d150      	bne.n	800224a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80021a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2200      	movs	r2, #0
 80021ae:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80021b0:	4b39      	ldr	r3, [pc, #228]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80021b8:	4b37      	ldr	r3, [pc, #220]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021c0:	3b02      	subs	r3, #2
 80021c2:	4619      	mov	r1, r3
 80021c4:	4610      	mov	r0, r2
 80021c6:	f7ff ff2f 	bl	8002028 <CRC16>
 80021ca:	4603      	mov	r3, r0
 80021cc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80021ce:	793a      	ldrb	r2, [r7, #4]
 80021d0:	4b31      	ldr	r3, [pc, #196]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	4b30      	ldr	r3, [pc, #192]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021dc:	3b02      	subs	r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d10c      	bne.n	8002202 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80021e8:	797a      	ldrb	r2, [r7, #5]
 80021ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021f6:	3b01      	subs	r3, #1
 80021f8:	440b      	add	r3, r1
 80021fa:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d004      	beq.n	800220c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8002202:	4b25      	ldr	r3, [pc, #148]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	22ff      	movs	r2, #255	@ 0xff
 8002208:	759a      	strb	r2, [r3, #22]
				break;
 800220a:	e040      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 800220c:	4b22      	ldr	r3, [pc, #136]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8002214:	4b20      	ldr	r3, [pc, #128]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d113      	bne.n	8002246 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800221e:	4b1e      	ldr	r3, [pc, #120]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8002226:	4b1c      	ldr	r3, [pc, #112]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 800222e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8002230:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002238:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800223a:	461a      	mov	r2, r3
 800223c:	f010 f998 	bl	8012570 <memcpy>

			//execute command
			Modbus_frame_response();
 8002240:	f000 f904 	bl	800244c <Modbus_frame_response>
 8002244:	e001      	b.n	800224a <Modbus_Protocal_Worker+0x1b2>
				break;
 8002246:	bf00      	nop
					}
		break;


	}
}
 8002248:	e021      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800224a:	4b13      	ldr	r3, [pc, #76]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	7d5b      	ldrb	r3, [r3, #21]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d019      	beq.n	8002288 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8002254:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2201      	movs	r2, #1
 800225a:	75da      	strb	r2, [r3, #23]
		break;
 800225c:	e014      	b.n	8002288 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800225e:	4b0e      	ldr	r3, [pc, #56]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002268:	2b20      	cmp	r3, #32
 800226a:	d10f      	bne.n	800228c <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 800226c:	4b0a      	ldr	r3, [pc, #40]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8002276:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <Modbus_Protocal_Worker+0x200>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2201      	movs	r2, #1
 800227c:	75da      	strb	r2, [r3, #23]
		break;
 800227e:	e005      	b.n	800228c <Modbus_Protocal_Worker+0x1f4>
		break;
 8002280:	bf00      	nop
 8002282:	e004      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
		break;
 8002284:	bf00      	nop
 8002286:	e002      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
		break;
 8002288:	bf00      	nop
 800228a:	e000      	b.n	800228e <Modbus_Protocal_Worker+0x1f6>
		break;
 800228c:	bf00      	nop
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	200003b0 	.word	0x200003b0

0800229c <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80022a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	7e5b      	ldrb	r3, [r3, #25]
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	4a1a      	ldr	r2, [pc, #104]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022ae:	6812      	ldr	r2, [r2, #0]
 80022b0:	7e92      	ldrb	r2, [r2, #26]
 80022b2:	4413      	add	r3, r2
 80022b4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80022b6:	88fa      	ldrh	r2, [r7, #6]
 80022b8:	4b17      	ldr	r3, [pc, #92]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d903      	bls.n	80022ca <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80022c2:	2002      	movs	r0, #2
 80022c4:	f000 f8a0 	bl	8002408 <ModbusErrorReply>
			 return;
 80022c8:	e023      	b.n	8002312 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80022ca:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6859      	ldr	r1, [r3, #4]
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	440b      	add	r3, r1
 80022da:	7ed2      	ldrb	r2, [r2, #27]
 80022dc:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80022de:	4b0e      	ldr	r3, [pc, #56]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	440b      	add	r3, r1
 80022ee:	7f12      	ldrb	r2, [r2, #28]
 80022f0:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80022f2:	4b09      	ldr	r3, [pc, #36]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80022fa:	4b07      	ldr	r3, [pc, #28]	@ (8002318 <modbusWrite1Register+0x7c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8002300:	2208      	movs	r2, #8
 8002302:	4619      	mov	r1, r3
 8002304:	f010 f934 	bl	8012570 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8002308:	4b03      	ldr	r3, [pc, #12]	@ (8002318 <modbusWrite1Register+0x7c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2205      	movs	r2, #5
 800230e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	200003b0 	.word	0x200003b0

0800231c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 800231c:	b590      	push	{r4, r7, lr}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8002322:	4b38      	ldr	r3, [pc, #224]	@ (8002404 <modbusRead1Register+0xe8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	7edb      	ldrb	r3, [r3, #27]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	b29b      	uxth	r3, r3
 800232c:	4a35      	ldr	r2, [pc, #212]	@ (8002404 <modbusRead1Register+0xe8>)
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	7f12      	ldrb	r2, [r2, #28]
 8002332:	4413      	add	r3, r2
 8002334:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8002336:	4b33      	ldr	r3, [pc, #204]	@ (8002404 <modbusRead1Register+0xe8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	7e5b      	ldrb	r3, [r3, #25]
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	b29b      	uxth	r3, r3
 8002340:	4a30      	ldr	r2, [pc, #192]	@ (8002404 <modbusRead1Register+0xe8>)
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	7e92      	ldrb	r2, [r2, #26]
 8002346:	4413      	add	r3, r2
 8002348:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <modbusRead1Register+0x3a>
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	2b7d      	cmp	r3, #125	@ 0x7d
 8002354:	d903      	bls.n	800235e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8002356:	2003      	movs	r0, #3
 8002358:	f000 f856 	bl	8002408 <ModbusErrorReply>
		 return;
 800235c:	e04e      	b.n	80023fc <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800235e:	88ba      	ldrh	r2, [r7, #4]
 8002360:	4b28      	ldr	r3, [pc, #160]	@ (8002404 <modbusRead1Register+0xe8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	429a      	cmp	r2, r3
 8002368:	d808      	bhi.n	800237c <modbusRead1Register+0x60>
 800236a:	88ba      	ldrh	r2, [r7, #4]
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	4413      	add	r3, r2
 8002370:	461a      	mov	r2, r3
 8002372:	4b24      	ldr	r3, [pc, #144]	@ (8002404 <modbusRead1Register+0xe8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	429a      	cmp	r2, r3
 800237a:	d903      	bls.n	8002384 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800237c:	2002      	movs	r0, #2
 800237e:	f000 f843 	bl	8002408 <ModbusErrorReply>
		 return;
 8002382:	e03b      	b.n	80023fc <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8002384:	4b1f      	ldr	r3, [pc, #124]	@ (8002404 <modbusRead1Register+0xe8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2203      	movs	r2, #3
 800238a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4b1c      	ldr	r3, [pc, #112]	@ (8002404 <modbusRead1Register+0xe8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	0052      	lsls	r2, r2, #1
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800239e:	2400      	movs	r4, #0
 80023a0:	e020      	b.n	80023e4 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80023a2:	4b18      	ldr	r3, [pc, #96]	@ (8002404 <modbusRead1Register+0xe8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	88bb      	ldrh	r3, [r7, #4]
 80023aa:	4423      	add	r3, r4
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	18d1      	adds	r1, r2, r3
 80023b0:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <modbusRead1Register+0xe8>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	1c63      	adds	r3, r4, #1
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	7849      	ldrb	r1, [r1, #1]
 80023ba:	4413      	add	r3, r2
 80023bc:	460a      	mov	r2, r1
 80023be:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80023c2:	4b10      	ldr	r3, [pc, #64]	@ (8002404 <modbusRead1Register+0xe8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	88bb      	ldrh	r3, [r7, #4]
 80023ca:	4423      	add	r3, r4
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	18d1      	adds	r1, r2, r3
 80023d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002404 <modbusRead1Register+0xe8>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	0063      	lsls	r3, r4, #1
 80023d6:	3303      	adds	r3, #3
 80023d8:	7809      	ldrb	r1, [r1, #0]
 80023da:	4413      	add	r3, r2
 80023dc:	460a      	mov	r2, r1
 80023de:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80023e2:	3401      	adds	r4, #1
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	429c      	cmp	r4, r3
 80023e8:	dbdb      	blt.n	80023a2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80023ea:	88fb      	ldrh	r3, [r7, #6]
 80023ec:	3301      	adds	r3, #1
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b04      	ldr	r3, [pc, #16]	@ (8002404 <modbusRead1Register+0xe8>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0052      	lsls	r2, r2, #1
 80023f6:	b2d2      	uxtb	r2, r2
 80023f8:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd90      	pop	{r4, r7, pc}
 8002402:	bf00      	nop
 8002404:	200003b0 	.word	0x200003b0

08002408 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8002412:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <ModbusErrorReply+0x40>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	7e1a      	ldrb	r2, [r3, #24]
 8002418:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <ModbusErrorReply+0x40>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8002426:	4b08      	ldr	r3, [pc, #32]	@ (8002448 <ModbusErrorReply+0x40>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	79fa      	ldrb	r2, [r7, #7]
 800242c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8002430:	4b05      	ldr	r3, [pc, #20]	@ (8002448 <ModbusErrorReply+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2202      	movs	r2, #2
 8002436:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	200003b0 	.word	0x200003b0

0800244c <Modbus_frame_response>:

void Modbus_frame_response()
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002450:	4b09      	ldr	r3, [pc, #36]	@ (8002478 <Modbus_frame_response+0x2c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	7e1b      	ldrb	r3, [r3, #24]
 8002456:	2b03      	cmp	r3, #3
 8002458:	d004      	beq.n	8002464 <Modbus_frame_response+0x18>
 800245a:	2b06      	cmp	r3, #6
 800245c:	d105      	bne.n	800246a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 800245e:	f7ff ff1d 	bl	800229c <modbusWrite1Register>
		break;
 8002462:	e006      	b.n	8002472 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8002464:	f7ff ff5a 	bl	800231c <modbusRead1Register>
		break;
 8002468:	e003      	b.n	8002472 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800246a:	2001      	movs	r0, #1
 800246c:	f7ff ffcc 	bl	8002408 <ModbusErrorReply>
		break;
 8002470:	bf00      	nop

	}
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200003b0 	.word	0x200003b0

0800247c <Modbus_Emission>:

void Modbus_Emission()
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002482:	4b38      	ldr	r3, [pc, #224]	@ (8002564 <Modbus_Emission+0xe8>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248c:	2b20      	cmp	r3, #32
 800248e:	d15d      	bne.n	800254c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002490:	4b34      	ldr	r3, [pc, #208]	@ (8002564 <Modbus_Emission+0xe8>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b33      	ldr	r3, [pc, #204]	@ (8002564 <Modbus_Emission+0xe8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 800249e:	4b31      	ldr	r3, [pc, #196]	@ (8002564 <Modbus_Emission+0xe8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 80024a6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80024a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002564 <Modbus_Emission+0xe8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 80024b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002564 <Modbus_Emission+0xe8>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 80024b8:	461a      	mov	r2, r3
 80024ba:	f010 f859 	bl	8012570 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80024be:	4b29      	ldr	r3, [pc, #164]	@ (8002564 <Modbus_Emission+0xe8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b26      	ldr	r3, [pc, #152]	@ (8002564 <Modbus_Emission+0xe8>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3203      	adds	r2, #3
 80024ce:	b292      	uxth	r2, r2
 80024d0:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80024d4:	4b23      	ldr	r3, [pc, #140]	@ (8002564 <Modbus_Emission+0xe8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80024dc:	4b21      	ldr	r3, [pc, #132]	@ (8002564 <Modbus_Emission+0xe8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80024e4:	3b02      	subs	r3, #2
 80024e6:	4619      	mov	r1, r3
 80024e8:	4610      	mov	r0, r2
 80024ea:	f7ff fd9d 	bl	8002028 <CRC16>
 80024ee:	4603      	mov	r3, r0
 80024f0:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80024f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002564 <Modbus_Emission+0xe8>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002564 <Modbus_Emission+0xe8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80024fe:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8002500:	7939      	ldrb	r1, [r7, #4]
 8002502:	4413      	add	r3, r2
 8002504:	460a      	mov	r2, r1
 8002506:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 800250a:	4b16      	ldr	r3, [pc, #88]	@ (8002564 <Modbus_Emission+0xe8>)
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	4b15      	ldr	r3, [pc, #84]	@ (8002564 <Modbus_Emission+0xe8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002516:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8002518:	7979      	ldrb	r1, [r7, #5]
 800251a:	4413      	add	r3, r2
 800251c:	460a      	mov	r2, r1
 800251e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002522:	4b10      	ldr	r3, [pc, #64]	@ (8002564 <Modbus_Emission+0xe8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252c:	2b20      	cmp	r3, #32
 800252e:	d10d      	bne.n	800254c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8002530:	4b0c      	ldr	r3, [pc, #48]	@ (8002564 <Modbus_Emission+0xe8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8002536:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <Modbus_Emission+0xe8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800253e:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <Modbus_Emission+0xe8>)
 8002540:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8002542:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8002546:	461a      	mov	r2, r3
 8002548:	f00d fc2c 	bl	800fda4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 800254c:	4b05      	ldr	r3, [pc, #20]	@ (8002564 <Modbus_Emission+0xe8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2200      	movs	r2, #0
 8002552:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8002554:	4b03      	ldr	r3, [pc, #12]	@ (8002564 <Modbus_Emission+0xe8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2200      	movs	r2, #0
 800255a:	755a      	strb	r2, [r3, #21]

}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	200003b0 	.word	0x200003b0

08002568 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	@ 0x30
 800256c:	af00      	add	r7, sp, #0
 800256e:	6278      	str	r0, [r7, #36]	@ 0x24
 8002570:	ed87 0a08 	vstr	s0, [r7, #32]
 8002574:	edc7 0a07 	vstr	s1, [r7, #28]
 8002578:	ed87 1a06 	vstr	s2, [r7, #24]
 800257c:	edc7 1a05 	vstr	s3, [r7, #20]
 8002580:	ed87 2a04 	vstr	s4, [r7, #16]
 8002584:	edc7 2a03 	vstr	s5, [r7, #12]
 8002588:	ed87 3a02 	vstr	s6, [r7, #8]
 800258c:	edc7 3a01 	vstr	s7, [r7, #4]
 8002590:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	6a3a      	ldr	r2, [r7, #32]
 8002598:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 800259c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259e:	69fa      	ldr	r2, [r7, #28]
 80025a0:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	68ba      	ldr	r2, [r7, #8]
 80025c8:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	2210      	movs	r2, #16
 80025d0:	2100      	movs	r1, #0
 80025d2:	4618      	mov	r0, r3
 80025d4:	f00f ff88 	bl	80124e8 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	3310      	adds	r3, #16
 80025dc:	2240      	movs	r2, #64	@ 0x40
 80025de:	2100      	movs	r1, #0
 80025e0:	4618      	mov	r0, r3
 80025e2:	f00f ff81 	bl	80124e8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025e6:	2300      	movs	r3, #0
 80025e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025ea:	e00c      	b.n	8002606 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 80025ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025f6:	3304      	adds	r3, #4
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	4a79      	ldr	r2, [pc, #484]	@ (80027e4 <MotorKalman_Init+0x27c>)
 80025fe:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002602:	3301      	adds	r3, #1
 8002604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002608:	2b03      	cmp	r3, #3
 800260a:	ddef      	ble.n	80025ec <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002612:	2240      	movs	r2, #64	@ 0x40
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f00f ff66 	bl	80124e8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800261c:	2300      	movs	r3, #0
 800261e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002620:	e00d      	b.n	800263e <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8002622:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800262c:	33be      	adds	r3, #190	@ 0xbe
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002636:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263a:	3301      	adds	r3, #1
 800263c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800263e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002640:	2b03      	cmp	r3, #3
 8002642:	ddee      	ble.n	8002622 <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8002644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002646:	33f0      	adds	r3, #240	@ 0xf0
 8002648:	2210      	movs	r2, #16
 800264a:	2100      	movs	r1, #0
 800264c:	4618      	mov	r0, r3
 800264e:	f00f ff4b 	bl	80124e8 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002658:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002662:	2210      	movs	r2, #16
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f00f ff3e 	bl	80124e8 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002672:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8002676:	ed97 0a01 	vldr	s0, [r7, #4]
 800267a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800267c:	f000 f922 	bl	80028c4 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8002680:	ed97 0a00 	vldr	s0, [r7]
 8002684:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002686:	f000 f94d 	bl	8002924 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 800268a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268c:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	2201      	movs	r2, #1
 8002694:	2104      	movs	r1, #4
 8002696:	f00f f9b6 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	3310      	adds	r3, #16
 80026a4:	2204      	movs	r2, #4
 80026a6:	2104      	movs	r1, #4
 80026a8:	f00f f9ad 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 80026b8:	2204      	movs	r2, #4
 80026ba:	2104      	movs	r1, #4
 80026bc:	f00f f9a3 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80026cc:	2201      	movs	r2, #1
 80026ce:	2101      	movs	r1, #1
 80026d0:	f00f f999 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 80026d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d6:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80026e0:	2201      	movs	r2, #1
 80026e2:	2101      	movs	r1, #1
 80026e4:	f00f f98f 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 80026e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ea:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 80026ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f0:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80026f4:	2201      	movs	r2, #1
 80026f6:	2101      	movs	r1, #1
 80026f8:	f00f f985 	bl	8011a06 <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 80026fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fe:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8002708:	2204      	movs	r2, #4
 800270a:	2104      	movs	r1, #4
 800270c:	f00f f97b 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 8002710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002712:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 800271c:	2201      	movs	r2, #1
 800271e:	2104      	movs	r1, #4
 8002720:	f00f f971 	bl	8011a06 <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 8002724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002726:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002730:	2201      	movs	r2, #1
 8002732:	2104      	movs	r1, #4
 8002734:	f00f f967 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8002744:	2204      	movs	r2, #4
 8002746:	2104      	movs	r1, #4
 8002748:	f00f f95d 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8002752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002754:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8002758:	2204      	movs	r2, #4
 800275a:	2101      	movs	r1, #1
 800275c:	f00f f953 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800276c:	2201      	movs	r2, #1
 800276e:	2101      	movs	r1, #1
 8002770:	f00f f949 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 8002774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002776:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8002780:	2201      	movs	r2, #1
 8002782:	2104      	movs	r1, #4
 8002784:	f00f f93f 	bl	8011a06 <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002788:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800278a:	f000 f82d 	bl	80027e8 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8002794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002796:	3390      	adds	r3, #144	@ 0x90
 8002798:	2204      	movs	r2, #4
 800279a:	2104      	movs	r1, #4
 800279c:	f00f f933 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	33e0      	adds	r3, #224	@ 0xe0
 80027aa:	2201      	movs	r2, #1
 80027ac:	2104      	movs	r1, #4
 80027ae:	f00f f92a 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 80027b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027be:	2204      	movs	r2, #4
 80027c0:	2104      	movs	r1, #4
 80027c2:	f00f f920 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 80027d2:	2201      	movs	r2, #1
 80027d4:	2104      	movs	r1, #4
 80027d6:	f00f f916 	bl	8011a06 <arm_mat_init_f32>
}
 80027da:	bf00      	nop
 80027dc:	3730      	adds	r7, #48	@ 0x30
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	42c80000 	.word	0x42c80000

080027e8 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	eeb0 3a64 	vmov.f32	s6, s9
 800282c:	eef0 2a45 	vmov.f32	s5, s10
 8002830:	eeb0 2a65 	vmov.f32	s4, s11
 8002834:	eef0 1a46 	vmov.f32	s3, s12
 8002838:	eeb0 1a66 	vmov.f32	s2, s13
 800283c:	eef0 0a47 	vmov.f32	s1, s14
 8002840:	eeb0 0a67 	vmov.f32	s0, s15
 8002844:	f001 f83c 	bl	80038c0 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800284e:	2240      	movs	r2, #64	@ 0x40
 8002850:	2100      	movs	r1, #0
 8002852:	4618      	mov	r0, r3
 8002854:	f00f fe48 	bl	80124e8 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800285e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80028bc <MotorKalman_DiscretizeModel+0xd4>
 8002862:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800286c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002892:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80028c0 <MotorKalman_DiscretizeModel+0xd8>
 8002896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80028a6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80028bc <MotorKalman_DiscretizeModel+0xd4>
 80028aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	3c23d70a 	.word	0x3c23d70a
 80028c0:	3dcccccd 	.word	0x3dcccccd

080028c4 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80028d6:	2240      	movs	r2, #64	@ 0x40
 80028d8:	2100      	movs	r1, #0
 80028da:	4618      	mov	r0, r3
 80028dc:	f00f fe04 	bl	80124e8 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 80028e0:	edd7 7a00 	vldr	s15, [r7]
 80028e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80028fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002904:	d107      	bne.n	8002916 <MotorKalman_SetProcessNoise+0x52>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 800290c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002914:	d002      	beq.n	800291c <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ff66 	bl	80027e8 <MotorKalman_DiscretizeModel>
    }
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
 800292c:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 8002930:	ed97 0a00 	vldr	s0, [r7]
 8002934:	f00f fef4 	bl	8012720 <sqrtf>
 8002938:	eef0 7a40 	vmov.f32	s15, s0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 8002952:	b580      	push	{r7, lr}
 8002954:	b0b2      	sub	sp, #200	@ 0xc8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 8002966:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	605a      	str	r2, [r3, #4]
 8002970:	609a      	str	r2, [r3, #8]
 8002972:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002974:	2300      	movs	r3, #0
 8002976:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800297a:	e041      	b.n	8002a00 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 800297c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	33c8      	adds	r3, #200	@ 0xc8
 8002984:	443b      	add	r3, r7
 8002986:	3b3c      	subs	r3, #60	@ 0x3c
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002994:	e02b      	b.n	80029ee <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 8002996:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	33c8      	adds	r3, #200	@ 0xc8
 800299e:	443b      	add	r3, r7
 80029a0:	3b3c      	subs	r3, #60	@ 0x3c
 80029a2:	ed93 7a00 	vldr	s14, [r3]
 80029a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029aa:	009a      	lsls	r2, r3, #2
 80029ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029b0:	4413      	add	r3, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	3324      	adds	r3, #36	@ 0x24
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	edd3 6a00 	vldr	s13, [r3]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	edd3 7a00 	vldr	s15, [r3]
 80029cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	33c8      	adds	r3, #200	@ 0xc8
 80029dc:	443b      	add	r3, r7
 80029de:	3b3c      	subs	r3, #60	@ 0x3c
 80029e0:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80029e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029e8:	3301      	adds	r3, #1
 80029ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	ddcf      	ble.n	8002996 <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029fa:	3301      	adds	r3, #1
 80029fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002a00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	ddb9      	ble.n	800297c <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002a0e:	e021      	b.n	8002a54 <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 8002a10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	33c8      	adds	r3, #200	@ 0xc8
 8002a18:	443b      	add	r3, r7
 8002a1a:	3b3c      	subs	r3, #60	@ 0x3c
 8002a1c:	ed93 7a00 	vldr	s14, [r3]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a26:	3338      	adds	r3, #56	@ 0x38
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4413      	add	r3, r2
 8002a2c:	edd3 6a00 	vldr	s13, [r3]
 8002a30:	edd7 7a00 	vldr	s15, [r7]
 8002a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002a54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	ddd9      	ble.n	8002a10 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a5c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a60:	2240      	movs	r2, #64	@ 0x40
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f00f fd3f 	bl	80124e8 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a6a:	f107 030c 	add.w	r3, r7, #12
 8002a6e:	2240      	movs	r2, #64	@ 0x40
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f00f fd38 	bl	80124e8 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a7e:	e05f      	b.n	8002b40 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a86:	e052      	b.n	8002b2e <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002a88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a8c:	009a      	lsls	r2, r3, #2
 8002a8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	33c8      	adds	r3, #200	@ 0xc8
 8002a98:	443b      	add	r3, r7
 8002a9a:	3b7c      	subs	r3, #124	@ 0x7c
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002aa8:	e038      	b.n	8002b1c <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002aaa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002aae:	009a      	lsls	r2, r3, #2
 8002ab0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	33c8      	adds	r3, #200	@ 0xc8
 8002aba:	443b      	add	r3, r7
 8002abc:	3b7c      	subs	r3, #124	@ 0x7c
 8002abe:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 8002ac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ac6:	009a      	lsls	r2, r3, #2
 8002ac8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002acc:	4413      	add	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	3324      	adds	r3, #36	@ 0x24
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	edd3 6a00 	vldr	s13, [r3]
 8002ada:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ade:	009a      	lsls	r2, r3, #2
 8002ae0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ae4:	4413      	add	r3, r2
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	edd3 7a00 	vldr	s15, [r3]
 8002af2:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002af6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002afa:	009a      	lsls	r2, r3, #2
 8002afc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b00:	4413      	add	r3, r2
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	33c8      	adds	r3, #200	@ 0xc8
 8002b0a:	443b      	add	r3, r7
 8002b0c:	3b7c      	subs	r3, #124	@ 0x7c
 8002b0e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b16:	3301      	adds	r3, #1
 8002b18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	ddc2      	ble.n	8002aaa <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b28:	3301      	adds	r3, #1
 8002b2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	dda8      	ble.n	8002a88 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	dd9b      	ble.n	8002a80 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b4e:	e05f      	b.n	8002c10 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b56:	e052      	b.n	8002bfe <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b5c:	009a      	lsls	r2, r3, #2
 8002b5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	33c8      	adds	r3, #200	@ 0xc8
 8002b68:	443b      	add	r3, r7
 8002b6a:	3bbc      	subs	r3, #188	@ 0xbc
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b72:	2300      	movs	r3, #0
 8002b74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002b78:	e038      	b.n	8002bec <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b7e:	009a      	lsls	r2, r3, #2
 8002b80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b84:	4413      	add	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	33c8      	adds	r3, #200	@ 0xc8
 8002b8a:	443b      	add	r3, r7
 8002b8c:	3bbc      	subs	r3, #188	@ 0xbc
 8002b8e:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 8002b92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b96:	009a      	lsls	r2, r3, #2
 8002b98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b9c:	4413      	add	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	33c8      	adds	r3, #200	@ 0xc8
 8002ba2:	443b      	add	r3, r7
 8002ba4:	3b7c      	subs	r3, #124	@ 0x7c
 8002ba6:	edd3 6a00 	vldr	s13, [r3]
 8002baa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bae:	009a      	lsls	r2, r3, #2
 8002bb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bb4:	4413      	add	r3, r2
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	3324      	adds	r3, #36	@ 0x24
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4413      	add	r3, r2
 8002bbe:	edd3 7a00 	vldr	s15, [r3]
 8002bc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002bc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bca:	009a      	lsls	r2, r3, #2
 8002bcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bd0:	4413      	add	r3, r2
 8002bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	33c8      	adds	r3, #200	@ 0xc8
 8002bda:	443b      	add	r3, r7
 8002bdc:	3bbc      	subs	r3, #188	@ 0xbc
 8002bde:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002be2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002be6:	3301      	adds	r3, #1
 8002be8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002bec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	ddc2      	ble.n	8002b7a <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bf4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	dda8      	ble.n	8002b58 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	dd9b      	ble.n	8002b50 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c1e:	e037      	b.n	8002c90 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c20:	2300      	movs	r3, #0
 8002c22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c26:	e02a      	b.n	8002c7e <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002c28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c2c:	009a      	lsls	r2, r3, #2
 8002c2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	33c8      	adds	r3, #200	@ 0xc8
 8002c38:	443b      	add	r3, r7
 8002c3a:	3bbc      	subs	r3, #188	@ 0xbc
 8002c3c:	ed93 7a00 	vldr	s14, [r3]
 8002c40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c44:	009a      	lsls	r2, r3, #2
 8002c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c4a:	4413      	add	r3, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	3354      	adds	r3, #84	@ 0x54
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002c58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c5c:	009a      	lsls	r2, r3, #2
 8002c5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c62:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002c64:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	ddd0      	ble.n	8002c28 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	ddc3      	ble.n	8002c20 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	2104      	movs	r1, #4
 8002ccc:	f00e fe9b 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3310      	adds	r3, #16
 8002cda:	2204      	movs	r2, #4
 8002cdc:	2104      	movs	r1, #4
 8002cde:	f00e fe92 	bl	8011a06 <arm_mat_init_f32>
}
 8002ce2:	bf00      	nop
 8002ce4:	37c8      	adds	r7, #200	@ 0xc8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b0d0      	sub	sp, #320	@ 0x140
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cf6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cfa:	6018      	str	r0, [r3, #0]
 8002cfc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d00:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d04:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002d08:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d0c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002d16:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002d20:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d24:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 8002d2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d32:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	edd3 7a00 	vldr	s15, [r3]
 8002d3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d44:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 8002d4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d52:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d60:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002d64:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d68:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 8002d72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d76:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d80:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002d84:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002d88:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d8c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002d96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d9a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002da4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dac:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8002db0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002db4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002db8:	ed93 7a00 	vldr	s14, [r3]
 8002dbc:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc4:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002dc8:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002ddc:	e04d      	b.n	8002e7a <MotorKalman_Update+0x18e>
        CP[i] = 0;
 8002dde:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002de8:	443b      	add	r3, r7
 8002dea:	3b58      	subs	r3, #88	@ 0x58
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002df2:	2300      	movs	r3, #0
 8002df4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002df8:	e036      	b.n	8002e68 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002dfa:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e04:	443b      	add	r3, r7
 8002e06:	3b58      	subs	r3, #88	@ 0x58
 8002e08:	ed93 7a00 	vldr	s14, [r3]
 8002e0c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e10:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e1a:	333c      	adds	r3, #60	@ 0x3c
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	edd3 6a00 	vldr	s13, [r3]
 8002e24:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e28:	009a      	lsls	r2, r3, #2
 8002e2a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e2e:	4413      	add	r3, r2
 8002e30:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002e34:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	edd3 7a00 	vldr	s15, [r3]
 8002e44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e56:	443b      	add	r3, r7
 8002e58:	3b58      	subs	r3, #88	@ 0x58
 8002e5a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002e5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e62:	3301      	adds	r3, #1
 8002e64:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002e68:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	ddc4      	ble.n	8002dfa <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e70:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e74:	3301      	adds	r3, #1
 8002e76:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002e7a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e7e:	2b03      	cmp	r3, #3
 8002e80:	ddad      	ble.n	8002dde <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 8002e82:	f04f 0300 	mov.w	r3, #0
 8002e86:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002e90:	e021      	b.n	8002ed6 <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 8002e92:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e9c:	443b      	add	r3, r7
 8002e9e:	3b58      	subs	r3, #88	@ 0x58
 8002ea0:	ed93 7a00 	vldr	s14, [r3]
 8002ea4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ea8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002eb2:	333c      	adds	r3, #60	@ 0x3c
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	edd3 7a00 	vldr	s15, [r3]
 8002ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec0:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec8:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ecc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002ed6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	ddd9      	ble.n	8002e92 <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 8002ede:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ee2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002eec:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef4:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002ef8:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f06:	2300      	movs	r3, #0
 8002f08:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002f0c:	e04d      	b.n	8002faa <MotorKalman_Update+0x2be>
        PC[i] = 0;
 8002f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f18:	443b      	add	r3, r7
 8002f1a:	3b68      	subs	r3, #104	@ 0x68
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002f22:	2300      	movs	r3, #0
 8002f24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002f28:	e036      	b.n	8002f98 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 8002f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f34:	443b      	add	r3, r7
 8002f36:	3b68      	subs	r3, #104	@ 0x68
 8002f38:	ed93 7a00 	vldr	s14, [r3]
 8002f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f40:	009a      	lsls	r2, r3, #2
 8002f42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f46:	4413      	add	r3, r2
 8002f48:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002f4c:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	3304      	adds	r3, #4
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	edd3 6a00 	vldr	s13, [r3]
 8002f5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f6a:	333c      	adds	r3, #60	@ 0x3c
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	edd3 7a00 	vldr	s15, [r3]
 8002f74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f86:	443b      	add	r3, r7
 8002f88:	3b68      	subs	r3, #104	@ 0x68
 8002f8a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002f8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f92:	3301      	adds	r3, #1
 8002f94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002f98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	ddc4      	ble.n	8002f2a <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002fa0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	ddad      	ble.n	8002f0e <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 8002fb2:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	609a      	str	r2, [r3, #8]
 8002fbe:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002fc6:	e01a      	b.n	8002ffe <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002fc8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002fd2:	443b      	add	r3, r7
 8002fd4:	3b68      	subs	r3, #104	@ 0x68
 8002fd6:	edd3 6a00 	vldr	s13, [r3]
 8002fda:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002fec:	443b      	add	r3, r7
 8002fee:	3b78      	subs	r3, #120	@ 0x78
 8002ff0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ff4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002ffe:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003002:	2b03      	cmp	r3, #3
 8003004:	dde0      	ble.n	8002fc8 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003006:	2300      	movs	r3, #0
 8003008:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800300c:	e029      	b.n	8003062 <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 800300e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003012:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	ed93 7a00 	vldr	s14, [r3]
 8003024:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800302e:	443b      	add	r3, r7
 8003030:	3b78      	subs	r3, #120	@ 0x78
 8003032:	edd3 6a00 	vldr	s13, [r3]
 8003036:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 800303a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800303e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003042:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003046:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003058:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800305c:	3301      	adds	r3, #1
 800305e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003062:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003066:	2b03      	cmp	r3, #3
 8003068:	ddd1      	ble.n	800300e <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 800306a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800306e:	2240      	movs	r2, #64	@ 0x40
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f00f fa38 	bl	80124e8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003078:	2300      	movs	r3, #0
 800307a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800307e:	e035      	b.n	80030ec <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003080:	2300      	movs	r3, #0
 8003082:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003086:	e028      	b.n	80030da <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8003088:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003092:	443b      	add	r3, r7
 8003094:	3b78      	subs	r3, #120	@ 0x78
 8003096:	ed93 7a00 	vldr	s14, [r3]
 800309a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800309e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80030a8:	333c      	adds	r3, #60	@ 0x3c
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	edd3 7a00 	vldr	s15, [r3]
 80030b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030b6:	009a      	lsls	r2, r3, #2
 80030b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80030bc:	4413      	add	r3, r2
 80030be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80030c8:	443b      	add	r3, r7
 80030ca:	3bb8      	subs	r3, #184	@ 0xb8
 80030cc:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80030d0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80030d4:	3301      	adds	r3, #1
 80030d6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80030da:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80030de:	2b03      	cmp	r3, #3
 80030e0:	ddd2      	ble.n	8003088 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80030e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030e6:	3301      	adds	r3, #1
 80030e8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80030ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030f0:	2b03      	cmp	r3, #3
 80030f2:	ddc5      	ble.n	8003080 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80030f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80030f8:	2240      	movs	r2, #64	@ 0x40
 80030fa:	2100      	movs	r1, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f00f f9f3 	bl	80124e8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003102:	2300      	movs	r3, #0
 8003104:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003108:	e038      	b.n	800317c <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800310a:	2300      	movs	r3, #0
 800310c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003110:	e02b      	b.n	800316a <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8003112:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003116:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800311a:	429a      	cmp	r2, r3
 800311c:	d102      	bne.n	8003124 <MotorKalman_Update+0x438>
 800311e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003122:	e001      	b.n	8003128 <MotorKalman_Update+0x43c>
 8003124:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8003340 <MotorKalman_Update+0x654>
 8003128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312c:	009a      	lsls	r2, r3, #2
 800312e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800313a:	443b      	add	r3, r7
 800313c:	3bb8      	subs	r3, #184	@ 0xb8
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003146:	009a      	lsls	r2, r3, #2
 8003148:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800314c:	4413      	add	r3, r2
 800314e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003158:	443b      	add	r3, r7
 800315a:	3bf8      	subs	r3, #248	@ 0xf8
 800315c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003160:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003164:	3301      	adds	r3, #1
 8003166:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800316a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800316e:	2b03      	cmp	r3, #3
 8003170:	ddcf      	ble.n	8003112 <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003176:	3301      	adds	r3, #1
 8003178:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800317c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003180:	2b03      	cmp	r3, #3
 8003182:	ddc2      	ble.n	800310a <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8003184:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003188:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f103 0110 	add.w	r1, r3, #16
 8003192:	f107 0308 	add.w	r3, r7, #8
 8003196:	2240      	movs	r2, #64	@ 0x40
 8003198:	4618      	mov	r0, r3
 800319a:	f00f f9e9 	bl	8012570 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800319e:	2300      	movs	r3, #0
 80031a0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80031a4:	e06e      	b.n	8003284 <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80031a6:	2300      	movs	r3, #0
 80031a8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80031ac:	e061      	b.n	8003272 <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80031ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031b2:	009a      	lsls	r2, r3, #2
 80031b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031b8:	4413      	add	r3, r2
 80031ba:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031be:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	3304      	adds	r3, #4
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80031d0:	2300      	movs	r3, #0
 80031d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80031d6:	e043      	b.n	8003260 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80031d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031dc:	009a      	lsls	r2, r3, #2
 80031de:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031e2:	4413      	add	r3, r2
 80031e4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031e8:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80031ec:	6812      	ldr	r2, [r2, #0]
 80031ee:	3304      	adds	r3, #4
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 80031f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031fc:	009a      	lsls	r2, r3, #2
 80031fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800320a:	443b      	add	r3, r7
 800320c:	3bf8      	subs	r3, #248	@ 0xf8
 800320e:	edd3 6a00 	vldr	s13, [r3]
 8003212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003216:	009a      	lsls	r2, r3, #2
 8003218:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800321c:	4413      	add	r3, r2
 800321e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8003222:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	4413      	add	r3, r2
 800322a:	edd3 7a00 	vldr	s15, [r3]
 800322e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8003232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003236:	009a      	lsls	r2, r3, #2
 8003238:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800323c:	4413      	add	r3, r2
 800323e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003242:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8003246:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	3304      	adds	r3, #4
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8003256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800325a:	3301      	adds	r3, #1
 800325c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003264:	2b03      	cmp	r3, #3
 8003266:	ddb7      	ble.n	80031d8 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003268:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800326c:	3301      	adds	r3, #1
 800326e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003272:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003276:	2b03      	cmp	r3, #3
 8003278:	dd99      	ble.n	80031ae <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800327a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800327e:	3301      	adds	r3, #1
 8003280:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003288:	2b03      	cmp	r3, #3
 800328a:	dd8c      	ble.n	80031a6 <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 800328c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003290:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800329c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 80032a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032aa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032b6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 80032c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 80032da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032de:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032ea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80032f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032f8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8003302:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003306:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2201      	movs	r2, #1
 800330e:	2104      	movs	r1, #4
 8003310:	f00e fb79 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8003314:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003318:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8003322:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003326:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3310      	adds	r3, #16
 800332e:	2204      	movs	r2, #4
 8003330:	2104      	movs	r1, #4
 8003332:	f00e fb68 	bl	8011a06 <arm_mat_init_f32>
}
 8003336:	bf00      	nop
 8003338:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	00000000 	.word	0x00000000

08003344 <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003350:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8003354:	ed97 0a02 	vldr	s0, [r7, #8]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f7ff fafa 	bl	8002952 <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 800335e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f7ff fcc2 	bl	8002cec <MotorKalman_Update>

    return filter->velocity;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 800336e:	ee07 3a90 	vmov	s15, r3
}
 8003372:	eeb0 0a67 	vmov.f32	s0, s15
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	e00c      	b.n	80033a8 <matrix_copy+0x2c>
        dst[i] = src[i];
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	441a      	add	r2, r3
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	440b      	add	r3, r1
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	3301      	adds	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	dbee      	blt.n	800338e <matrix_copy+0x12>
    }
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 80033cc:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 80033d0:	6020      	str	r0, [r4, #0]
 80033d2:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 80033d6:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 80033da:	6001      	str	r1, [r0, #0]
 80033dc:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80033e0:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 80033e4:	ed81 0a00 	vstr	s0, [r1]
 80033e8:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80033ec:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 80033f0:	600a      	str	r2, [r1, #0]
 80033f2:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 80033f6:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 80033fa:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 80033fc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003400:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8003404:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2204      	movs	r2, #4
 800340c:	2104      	movs	r1, #4
 800340e:	f00e fafa 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8003412:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003416:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 800341a:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2204      	movs	r2, #4
 8003422:	2104      	movs	r1, #4
 8003424:	f00e faef 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8003428:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800342c:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8003430:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2201      	movs	r2, #1
 8003438:	2104      	movs	r1, #4
 800343a:	f00e fae4 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 800343e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003442:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8003446:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2201      	movs	r2, #1
 800344e:	2104      	movs	r1, #4
 8003450:	f00e fad9 	bl	8011a06 <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8003454:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8003458:	2240      	movs	r2, #64	@ 0x40
 800345a:	2100      	movs	r1, #0
 800345c:	4618      	mov	r0, r3
 800345e:	f00f f843 	bl	80124e8 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8003462:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8003466:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 800346a:	2204      	movs	r2, #4
 800346c:	2104      	movs	r1, #4
 800346e:	f00e faca 	bl	8011a06 <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8003472:	2300      	movs	r3, #0
 8003474:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8003478:	e011      	b.n	800349e <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 800347a:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 800348a:	443b      	add	r3, r7
 800348c:	3b6c      	subs	r3, #108	@ 0x6c
 800348e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003492:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8003494:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8003498:	3301      	adds	r3, #1
 800349a:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800349e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	dde9      	ble.n	800347a <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 80034a6:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80034aa:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 80034ae:	2204      	movs	r2, #4
 80034b0:	2104      	movs	r1, #4
 80034b2:	f00e faa8 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 80034b6:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80034ba:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80034be:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80034c2:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 80034c6:	ed93 0a00 	vldr	s0, [r3]
 80034ca:	4610      	mov	r0, r2
 80034cc:	f00e fea4 	bl	8012218 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 80034d0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80034d4:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80034d8:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 80034dc:	2210      	movs	r2, #16
 80034de:	6819      	ldr	r1, [r3, #0]
 80034e0:	f7ff ff4c 	bl	800337c <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 80034e4:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 80034e8:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 80034ec:	2204      	movs	r2, #4
 80034ee:	2104      	movs	r1, #4
 80034f0:	f00e fa89 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 80034f4:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80034f8:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 80034fc:	2204      	movs	r2, #4
 80034fe:	2104      	movs	r1, #4
 8003500:	f00e fa81 	bl	8011a06 <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8003504:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8003508:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 800350c:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8003510:	4618      	mov	r0, r3
 8003512:	f00e fa3d 	bl	8011990 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8003516:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 800351a:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 800351e:	2210      	movs	r2, #16
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff ff2b 	bl	800337c <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8003526:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800352a:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 800352e:	2302      	movs	r3, #2
 8003530:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8003534:	e03a      	b.n	80035ac <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8003536:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003542:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8003546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354a:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 800354e:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8003552:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8003556:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800355a:	4618      	mov	r0, r3
 800355c:	f00e fde2 	bl	8012124 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8003560:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8003564:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8003568:	2210      	movs	r2, #16
 800356a:	4618      	mov	r0, r3
 800356c:	f7ff ff06 	bl	800337c <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8003570:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003574:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8003578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800357c:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8003580:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8003584:	4611      	mov	r1, r2
 8003586:	eeb0 0a47 	vmov.f32	s0, s14
 800358a:	4618      	mov	r0, r3
 800358c:	f00e fe44 	bl	8012218 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8003590:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8003594:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8003598:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 800359c:	4618      	mov	r0, r3
 800359e:	f00e f9f7 	bl	8011990 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 80035a2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80035a6:	3301      	adds	r3, #1
 80035a8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80035ac:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80035b0:	2b0a      	cmp	r3, #10
 80035b2:	ddc0      	ble.n	8003536 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 80035b4:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 80035b8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80035bc:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80035c0:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 80035c4:	ed93 0a00 	vldr	s0, [r3]
 80035c8:	4610      	mov	r0, r2
 80035ca:	f00e fe25 	bl	8012218 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 80035ce:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80035d2:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80035d6:	461a      	mov	r2, r3
 80035d8:	2300      	movs	r3, #0
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	6053      	str	r3, [r2, #4]
 80035de:	6093      	str	r3, [r2, #8]
 80035e0:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 80035e2:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80035e6:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 80035ea:	2201      	movs	r2, #1
 80035ec:	2104      	movs	r1, #4
 80035ee:	f00e fa0a 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 80035f2:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 80035f6:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80035fa:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80035fe:	4618      	mov	r0, r3
 8003600:	f00e fd90 	bl	8012124 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8003604:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8003608:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 800360c:	2201      	movs	r2, #1
 800360e:	2104      	movs	r1, #4
 8003610:	f00e f9f9 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8003614:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003618:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800361c:	edd3 7a00 	vldr	s15, [r3]
 8003620:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003624:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003628:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800362c:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003630:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8003634:	4611      	mov	r1, r2
 8003636:	eeb0 0a47 	vmov.f32	s0, s14
 800363a:	4618      	mov	r0, r3
 800363c:	f00e fdec 	bl	8012218 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003640:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003644:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003648:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800364c:	4618      	mov	r0, r3
 800364e:	f00e f99f 	bl	8011990 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8003652:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003656:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800365a:	4618      	mov	r0, r3
 800365c:	2340      	movs	r3, #64	@ 0x40
 800365e:	461a      	mov	r2, r3
 8003660:	2100      	movs	r1, #0
 8003662:	f00e ff41 	bl	80124e8 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8003666:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800366a:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 800366e:	2204      	movs	r2, #4
 8003670:	2104      	movs	r1, #4
 8003672:	f00e f9c8 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8003676:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 800367a:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800367e:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8003682:	4618      	mov	r0, r3
 8003684:	f00e fd4e 	bl	8012124 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003688:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800368c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003690:	461a      	mov	r2, r3
 8003692:	2300      	movs	r3, #0
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	6053      	str	r3, [r2, #4]
 8003698:	6093      	str	r3, [r2, #8]
 800369a:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 800369c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80036a0:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 80036a4:	2201      	movs	r2, #1
 80036a6:	2104      	movs	r1, #4
 80036a8:	f00e f9ad 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 80036ac:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 80036b0:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80036b4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80036b8:	4618      	mov	r0, r3
 80036ba:	f00e fd33 	bl	8012124 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 80036be:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036c2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80036c6:	edd3 7a00 	vldr	s15, [r3]
 80036ca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80036ce:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036d2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80036d6:	edd3 7a00 	vldr	s15, [r3]
 80036da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036de:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80036e2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036e6:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80036ea:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80036ee:	4611      	mov	r1, r2
 80036f0:	eeb0 0a47 	vmov.f32	s0, s14
 80036f4:	4618      	mov	r0, r3
 80036f6:	f00e fd8f 	bl	8012218 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80036fa:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80036fe:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003702:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003706:	4618      	mov	r0, r3
 8003708:	f00e f942 	bl	8011990 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 800370c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003710:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003714:	4618      	mov	r0, r3
 8003716:	2340      	movs	r3, #64	@ 0x40
 8003718:	461a      	mov	r2, r3
 800371a:	2100      	movs	r1, #0
 800371c:	f00e fee4 	bl	80124e8 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 8003720:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003724:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8003728:	2204      	movs	r2, #4
 800372a:	2104      	movs	r1, #4
 800372c:	f00e f96b 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 8003730:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8003734:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8003738:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800373c:	4618      	mov	r0, r3
 800373e:	f00e fcf1 	bl	8012124 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 8003742:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003746:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800374a:	461a      	mov	r2, r3
 800374c:	2300      	movs	r3, #0
 800374e:	6013      	str	r3, [r2, #0]
 8003750:	6053      	str	r3, [r2, #4]
 8003752:	6093      	str	r3, [r2, #8]
 8003754:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 8003756:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800375a:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800375e:	2201      	movs	r2, #1
 8003760:	2104      	movs	r1, #4
 8003762:	f00e f950 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 8003766:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800376a:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800376e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003772:	4618      	mov	r0, r3
 8003774:	f00e fcd6 	bl	8012124 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8003778:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800377c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003780:	edd3 7a00 	vldr	s15, [r3]
 8003784:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003788:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800378c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003790:	edd3 7a00 	vldr	s15, [r3]
 8003794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003798:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800379c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80037a0:	edd3 7a00 	vldr	s15, [r3]
 80037a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a8:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80037ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037b0:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80037b4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80037b8:	4611      	mov	r1, r2
 80037ba:	eeb0 0a47 	vmov.f32	s0, s14
 80037be:	4618      	mov	r0, r3
 80037c0:	f00e fd2a 	bl	8012218 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80037c4:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80037c8:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80037cc:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80037d0:	4618      	mov	r0, r3
 80037d2:	f00e f8dd 	bl	8011990 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 80037d6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037da:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80037de:	4618      	mov	r0, r3
 80037e0:	2340      	movs	r3, #64	@ 0x40
 80037e2:	461a      	mov	r2, r3
 80037e4:	2100      	movs	r1, #0
 80037e6:	f00e fe7f 	bl	80124e8 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 80037ea:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80037ee:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80037f2:	2204      	movs	r2, #4
 80037f4:	2104      	movs	r1, #4
 80037f6:	f00e f906 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 80037fa:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80037fe:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8003802:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003806:	4618      	mov	r0, r3
 8003808:	f00e fc8c 	bl	8012124 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 800380c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003810:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003814:	461a      	mov	r2, r3
 8003816:	2300      	movs	r3, #0
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	6053      	str	r3, [r2, #4]
 800381c:	6093      	str	r3, [r2, #8]
 800381e:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 8003820:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003824:	f107 001c 	add.w	r0, r7, #28
 8003828:	2201      	movs	r2, #1
 800382a:	2104      	movs	r1, #4
 800382c:	f00e f8eb 	bl	8011a06 <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 8003830:	f107 021c 	add.w	r2, r7, #28
 8003834:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003838:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800383c:	4618      	mov	r0, r3
 800383e:	f00e fc71 	bl	8012124 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 8003842:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003846:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800384a:	edd3 7a00 	vldr	s15, [r3]
 800384e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003852:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003856:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800385a:	edd3 7a00 	vldr	s15, [r3]
 800385e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003862:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003866:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800386a:	edd3 7a00 	vldr	s15, [r3]
 800386e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003872:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003876:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800387a:	edd3 7a00 	vldr	s15, [r3]
 800387e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003882:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80038bc <discretize_system_with_arm+0x4fc>
 8003886:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800388a:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800388e:	f107 031c 	add.w	r3, r7, #28
 8003892:	4611      	mov	r1, r2
 8003894:	eeb0 0a47 	vmov.f32	s0, s14
 8003898:	4618      	mov	r0, r3
 800389a:	f00e fcbd 	bl	8012218 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800389e:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80038a2:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80038a6:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80038aa:	4618      	mov	r0, r3
 80038ac:	f00e f870 	bl	8011990 <arm_mat_add_f32>
}
 80038b0:	bf00      	nop
 80038b2:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd90      	pop	{r4, r7, pc}
 80038ba:	bf00      	nop
 80038bc:	42f00000 	.word	0x42f00000

080038c0 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b09e      	sub	sp, #120	@ 0x78
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 80038ca:	edc7 0a08 	vstr	s1, [r7, #32]
 80038ce:	ed87 1a07 	vstr	s2, [r7, #28]
 80038d2:	edc7 1a06 	vstr	s3, [r7, #24]
 80038d6:	ed87 2a05 	vstr	s4, [r7, #20]
 80038da:	edc7 2a04 	vstr	s5, [r7, #16]
 80038de:	ed87 3a03 	vstr	s6, [r7, #12]
 80038e2:	60b8      	str	r0, [r7, #8]
 80038e4:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 80038e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038ea:	2240      	movs	r2, #64	@ 0x40
 80038ec:	2100      	movs	r1, #0
 80038ee:	4618      	mov	r0, r3
 80038f0:	f00e fdfa 	bl	80124e8 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 80038f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 8003902:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003906:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8003908:	edd7 7a06 	vldr	s15, [r7, #24]
 800390c:	eef1 6a67 	vneg.f32	s13, s15
 8003910:	ed97 7a07 	vldr	s14, [r7, #28]
 8003914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003918:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 800391c:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8003920:	ed97 7a07 	vldr	s14, [r7, #28]
 8003924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003928:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 800392c:	edd7 6a04 	vldr	s13, [r7, #16]
 8003930:	ed97 7a07 	vldr	s14, [r7, #28]
 8003934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003938:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 800393c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003940:	eef1 6a67 	vneg.f32	s13, s15
 8003944:	ed97 7a08 	vldr	s14, [r7, #32]
 8003948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800394c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8003950:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003954:	eef1 6a67 	vneg.f32	s13, s15
 8003958:	ed97 7a08 	vldr	s14, [r7, #32]
 800395c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003960:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8003964:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003968:	ed97 7a08 	vldr	s14, [r7, #32]
 800396c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003970:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8003974:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003978:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	ed97 0a03 	vldr	s0, [r7, #12]
 8003984:	f7ff fd1c 	bl	80033c0 <discretize_system_with_arm>
}
 8003988:	bf00      	nop
 800398a:	3778      	adds	r7, #120	@ 0x78
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	4613      	mov	r3, r2
 800399c:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4a0b      	ldr	r2, [pc, #44]	@ (80039d0 <PWM_init+0x40>)
 80039a2:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	88fa      	ldrh	r2, [r7, #6]
 80039ae:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 80039b6:	68b8      	ldr	r0, [r7, #8]
 80039b8:	f00a f856 	bl	800da68 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 80039bc:	88fb      	ldrh	r3, [r7, #6]
 80039be:	4619      	mov	r1, r3
 80039c0:	68b8      	ldr	r0, [r7, #8]
 80039c2:	f00a f99d 	bl	800dd00 <HAL_TIM_PWM_Start>
}
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	0a21fe80 	.word	0x0a21fe80

080039d4 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 80039d4:	b5b0      	push	{r4, r5, r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80039e0:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80039e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80039e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f0:	d137      	bne.n	8003a62 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	889b      	ldrh	r3, [r3, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d105      	bne.n	8003a06 <PWM_write_duty+0x32>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2200      	movs	r2, #0
 8003a02:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003a04:	e0e1      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	889b      	ldrh	r3, [r3, #4]
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d105      	bne.n	8003a1a <PWM_write_duty+0x46>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2300      	movs	r3, #0
 8003a16:	6393      	str	r3, [r2, #56]	@ 0x38
 8003a18:	e0d7      	b.n	8003bca <PWM_write_duty+0x1f6>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	889b      	ldrh	r3, [r3, #4]
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d105      	bne.n	8003a2e <PWM_write_duty+0x5a>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003a2c:	e0cd      	b.n	8003bca <PWM_write_duty+0x1f6>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	889b      	ldrh	r3, [r3, #4]
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d105      	bne.n	8003a42 <PWM_write_duty+0x6e>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a40:	e0c3      	b.n	8003bca <PWM_write_duty+0x1f6>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	889b      	ldrh	r3, [r3, #4]
 8003a46:	2b10      	cmp	r3, #16
 8003a48:	d105      	bne.n	8003a56 <PWM_write_duty+0x82>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	2300      	movs	r3, #0
 8003a52:	6493      	str	r3, [r2, #72]	@ 0x48
 8003a54:	e0b9      	b.n	8003bca <PWM_write_duty+0x1f6>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003a60:	e0b3      	b.n	8003bca <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a6e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a7a:	ee17 2a90 	vmov	r2, s15
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003a8a:	33fe      	adds	r3, #254	@ 0xfe
 8003a8c:	4a51      	ldr	r2, [pc, #324]	@ (8003bd4 <PWM_write_duty+0x200>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	0bdb      	lsrs	r3, r3, #15
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	ee07 3a90 	vmov	s15, r3
 8003aa6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	899b      	ldrh	r3, [r3, #12]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	ee07 3a90 	vmov	s15, r3
 8003ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003abc:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ac4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ac8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad0:	ee17 3a90 	vmov	r3, s15
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	89db      	ldrh	r3, [r3, #14]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fc fcec 	bl	80004bc <__aeabi_i2d>
 8003ae4:	4604      	mov	r4, r0
 8003ae6:	460d      	mov	r5, r1
 8003ae8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aec:	eef0 7ae7 	vabs.f32	s15, s15
 8003af0:	ee17 0a90 	vmov	r0, s15
 8003af4:	f7fc fcf4 	bl	80004e0 <__aeabi_f2d>
 8003af8:	4602      	mov	r2, r0
 8003afa:	460b      	mov	r3, r1
 8003afc:	4620      	mov	r0, r4
 8003afe:	4629      	mov	r1, r5
 8003b00:	f7fc fd46 	bl	8000590 <__aeabi_dmul>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	4b31      	ldr	r3, [pc, #196]	@ (8003bd8 <PWM_write_duty+0x204>)
 8003b12:	f7fc fe67 	bl	80007e4 <__aeabi_ddiv>
 8003b16:	4602      	mov	r2, r0
 8003b18:	460b      	mov	r3, r1
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f7fc fff9 	bl	8000b14 <__aeabi_d2uiz>
 8003b22:	4603      	mov	r3, r0
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	461a      	mov	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	899a      	ldrh	r2, [r3, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	89da      	ldrh	r2, [r3, #14]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	89da      	ldrh	r2, [r3, #14]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	889b      	ldrh	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <PWM_write_duty+0x190>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	6952      	ldr	r2, [r2, #20]
 8003b60:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003b62:	e032      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	889b      	ldrh	r3, [r3, #4]
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	d106      	bne.n	8003b7a <PWM_write_duty+0x1a6>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003b78:	e027      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	889b      	ldrh	r3, [r3, #4]
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d106      	bne.n	8003b90 <PWM_write_duty+0x1bc>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003b8e:	e01c      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	889b      	ldrh	r3, [r3, #4]
 8003b94:	2b0c      	cmp	r3, #12
 8003b96:	d106      	bne.n	8003ba6 <PWM_write_duty+0x1d2>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003ba4:	e011      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	889b      	ldrh	r3, [r3, #4]
 8003baa:	2b10      	cmp	r3, #16
 8003bac:	d106      	bne.n	8003bbc <PWM_write_duty+0x1e8>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003bba:	e006      	b.n	8003bca <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003bc8:	e7ff      	b.n	8003bca <PWM_write_duty+0x1f6>
 8003bca:	bf00      	nop
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	80008001 	.word	0x80008001
 8003bd8:	40590000 	.word	0x40590000
 8003bdc:	00000000 	.word	0x00000000

08003be0 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003be0:	b5b0      	push	{r4, r5, r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bec:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003bf0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bf4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfc:	d137      	bne.n	8003c6e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	889b      	ldrh	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d105      	bne.n	8003c12 <PWM_write_range+0x32>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003c10:	e0e1      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	889b      	ldrh	r3, [r3, #4]
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d105      	bne.n	8003c26 <PWM_write_range+0x46>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2300      	movs	r3, #0
 8003c22:	6393      	str	r3, [r2, #56]	@ 0x38
 8003c24:	e0d7      	b.n	8003dd6 <PWM_write_range+0x1f6>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	889b      	ldrh	r3, [r3, #4]
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d105      	bne.n	8003c3a <PWM_write_range+0x5a>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	2300      	movs	r3, #0
 8003c36:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003c38:	e0cd      	b.n	8003dd6 <PWM_write_range+0x1f6>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	889b      	ldrh	r3, [r3, #4]
 8003c3e:	2b0c      	cmp	r3, #12
 8003c40:	d105      	bne.n	8003c4e <PWM_write_range+0x6e>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	2300      	movs	r3, #0
 8003c4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c4c:	e0c3      	b.n	8003dd6 <PWM_write_range+0x1f6>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	889b      	ldrh	r3, [r3, #4]
 8003c52:	2b10      	cmp	r3, #16
 8003c54:	d105      	bne.n	8003c62 <PWM_write_range+0x82>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c60:	e0b9      	b.n	8003dd6 <PWM_write_range+0x1f6>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003c6c:	e0b3      	b.n	8003dd6 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c86:	ee17 2a90 	vmov	r2, s15
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003c96:	33fe      	adds	r3, #254	@ 0xfe
 8003c98:	4a53      	ldr	r2, [pc, #332]	@ (8003de8 <PWM_write_range+0x208>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	0bdb      	lsrs	r3, r3, #15
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	b29a      	uxth	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	ee07 3a90 	vmov	s15, r3
 8003cb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	899b      	ldrh	r3, [r3, #12]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	ee07 3a90 	vmov	s15, r3
 8003cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cc4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003cc8:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ccc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cdc:	ee17 3a90 	vmov	r3, s15
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	89db      	ldrh	r3, [r3, #14]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fc fbe6 	bl	80004bc <__aeabi_i2d>
 8003cf0:	4604      	mov	r4, r0
 8003cf2:	460d      	mov	r5, r1
 8003cf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cf8:	eef0 7ae7 	vabs.f32	s15, s15
 8003cfc:	ee17 0a90 	vmov	r0, s15
 8003d00:	f7fc fbee 	bl	80004e0 <__aeabi_f2d>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4620      	mov	r0, r4
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	f7fc fc40 	bl	8000590 <__aeabi_dmul>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4610      	mov	r0, r2
 8003d16:	4619      	mov	r1, r3
 8003d18:	a331      	add	r3, pc, #196	@ (adr r3, 8003de0 <PWM_write_range+0x200>)
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	f7fc fd61 	bl	80007e4 <__aeabi_ddiv>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4610      	mov	r0, r2
 8003d28:	4619      	mov	r1, r3
 8003d2a:	f7fc fef3 	bl	8000b14 <__aeabi_d2uiz>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	899a      	ldrh	r2, [r3, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	89da      	ldrh	r2, [r3, #14]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	89da      	ldrh	r2, [r3, #14]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	889b      	ldrh	r3, [r3, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d106      	bne.n	8003d70 <PWM_write_range+0x190>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	6952      	ldr	r2, [r2, #20]
 8003d6c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003d6e:	e032      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	889b      	ldrh	r3, [r3, #4]
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d106      	bne.n	8003d86 <PWM_write_range+0x1a6>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003d84:	e027      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	889b      	ldrh	r3, [r3, #4]
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d106      	bne.n	8003d9c <PWM_write_range+0x1bc>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	695b      	ldr	r3, [r3, #20]
 8003d98:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003d9a:	e01c      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	889b      	ldrh	r3, [r3, #4]
 8003da0:	2b0c      	cmp	r3, #12
 8003da2:	d106      	bne.n	8003db2 <PWM_write_range+0x1d2>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003db0:	e011      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	889b      	ldrh	r3, [r3, #4]
 8003db6:	2b10      	cmp	r3, #16
 8003db8:	d106      	bne.n	8003dc8 <PWM_write_range+0x1e8>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003dc6:	e006      	b.n	8003dd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003dd4:	e7ff      	b.n	8003dd6 <PWM_write_range+0x1f6>
 8003dd6:	bf00      	nop
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dde:	bf00      	nop
 8003de0:	00000000 	.word	0x00000000
 8003de4:	40efffe0 	.word	0x40efffe0
 8003de8:	80008001 	.word	0x80008001

08003dec <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6178      	str	r0, [r7, #20]
 8003df4:	6139      	str	r1, [r7, #16]
 8003df6:	60fa      	str	r2, [r7, #12]
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	ed87 0a01 	vstr	s0, [r7, #4]
 8003dfe:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8003e4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	fb93 f2f2 	sdiv	r2, r3, r2
 8003e56:	68f9      	ldr	r1, [r7, #12]
 8003e58:	fb01 f202 	mul.w	r2, r1, r2
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003eba:	213c      	movs	r1, #60	@ 0x3c
 8003ebc:	6938      	ldr	r0, [r7, #16]
 8003ebe:	f00a f9db 	bl	800e278 <HAL_TIM_Encoder_Start>
}
 8003ec2:	bf00      	nop
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	0000      	movs	r0, r0
 8003ecc:	0000      	movs	r0, r0
	...

08003ed0 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003ed0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	0fda      	lsrs	r2, r3, #31
 8003ef8:	4413      	add	r3, r2
 8003efa:	105b      	asrs	r3, r3, #1
 8003efc:	461a      	mov	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	4293      	cmp	r3, r2
 8003f02:	dd05      	ble.n	8003f10 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	e00e      	b.n	8003f2e <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	0fda      	lsrs	r2, r3, #31
 8003f16:	4413      	add	r3, r2
 8003f18:	105b      	asrs	r3, r3, #1
 8003f1a:	425b      	negs	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	4293      	cmp	r3, r2
 8003f22:	da04      	bge.n	8003f2e <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3c:	441a      	add	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	ee07 3a90 	vmov	s15, r3
 8003f50:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	ee07 3a90 	vmov	s15, r3
 8003f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f60:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc faaf 	bl	80004e0 <__aeabi_f2d>
 8003f82:	4604      	mov	r4, r0
 8003f84:	460d      	mov	r5, r1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	ee07 3a90 	vmov	s15, r3
 8003f9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003fa6:	ee17 0a90 	vmov	r0, s15
 8003faa:	f7fc fa99 	bl	80004e0 <__aeabi_f2d>
 8003fae:	a33c      	add	r3, pc, #240	@ (adr r3, 80040a0 <QEI_get_diff_count+0x1d0>)
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f7fc faec 	bl	8000590 <__aeabi_dmul>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4690      	mov	r8, r2
 8003fbe:	4699      	mov	r9, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fc fa8b 	bl	80004e0 <__aeabi_f2d>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4640      	mov	r0, r8
 8003fd0:	4649      	mov	r1, r9
 8003fd2:	f7fc fadd 	bl	8000590 <__aeabi_dmul>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	460b      	mov	r3, r1
 8003fda:	4620      	mov	r0, r4
 8003fdc:	4629      	mov	r1, r5
 8003fde:	f7fc f921 	bl	8000224 <__adddf3>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4610      	mov	r0, r2
 8003fe8:	4619      	mov	r1, r3
 8003fea:	f7fc fdb3 	bl	8000b54 <__aeabi_d2f>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fc fa71 	bl	80004e0 <__aeabi_f2d>
 8003ffe:	4604      	mov	r4, r0
 8004000:	460d      	mov	r5, r1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	ee07 3a90 	vmov	s15, r3
 800400a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800401a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800401e:	ee16 0a90 	vmov	r0, s13
 8004022:	f7fc fa5d 	bl	80004e0 <__aeabi_f2d>
 8004026:	a31e      	add	r3, pc, #120	@ (adr r3, 80040a0 <QEI_get_diff_count+0x1d0>)
 8004028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402c:	f7fc fab0 	bl	8000590 <__aeabi_dmul>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4690      	mov	r8, r2
 8004036:	4699      	mov	r9, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403c:	4618      	mov	r0, r3
 800403e:	f7fc fa4f 	bl	80004e0 <__aeabi_f2d>
 8004042:	4602      	mov	r2, r0
 8004044:	460b      	mov	r3, r1
 8004046:	4640      	mov	r0, r8
 8004048:	4649      	mov	r1, r9
 800404a:	f7fc faa1 	bl	8000590 <__aeabi_dmul>
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4690      	mov	r8, r2
 8004054:	4699      	mov	r9, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405a:	4618      	mov	r0, r3
 800405c:	f7fc fa40 	bl	80004e0 <__aeabi_f2d>
 8004060:	4602      	mov	r2, r0
 8004062:	460b      	mov	r3, r1
 8004064:	4640      	mov	r0, r8
 8004066:	4649      	mov	r1, r9
 8004068:	f7fc fa92 	bl	8000590 <__aeabi_dmul>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4620      	mov	r0, r4
 8004072:	4629      	mov	r1, r5
 8004074:	f7fc f8d6 	bl	8000224 <__adddf3>
 8004078:	4602      	mov	r2, r0
 800407a:	460b      	mov	r3, r1
 800407c:	4610      	mov	r0, r2
 800407e:	4619      	mov	r1, r3
 8004080:	f7fc fd68 	bl	8000b54 <__aeabi_d2f>
 8004084:	4602      	mov	r2, r0
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	605a      	str	r2, [r3, #4]
}
 8004092:	bf00      	nop
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800409c:	f3af 8000 	nop.w
 80040a0:	54442d18 	.word	0x54442d18
 80040a4:	400921fb 	.word	0x400921fb

080040a8 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 80040a8:	b5b0      	push	{r4, r5, r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80040b8:	fb02 f303 	mul.w	r3, r2, r3
 80040bc:	ee07 3a90 	vmov	s15, r3
 80040c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fc fa06 	bl	80004e0 <__aeabi_f2d>
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	4b83      	ldr	r3, [pc, #524]	@ (80042e8 <QEI_compute_data+0x240>)
 80040da:	f7fc fa59 	bl	8000590 <__aeabi_dmul>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4614      	mov	r4, r2
 80040e4:	461d      	mov	r5, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	ee07 3a90 	vmov	s15, r3
 80040ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040f2:	ee17 0a90 	vmov	r0, s15
 80040f6:	f7fc f9f3 	bl	80004e0 <__aeabi_f2d>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4620      	mov	r0, r4
 8004100:	4629      	mov	r1, r5
 8004102:	f7fc fb6f 	bl	80007e4 <__aeabi_ddiv>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4614      	mov	r4, r2
 800410c:	461d      	mov	r5, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004112:	4618      	mov	r0, r3
 8004114:	f7fc f9e4 	bl	80004e0 <__aeabi_f2d>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	4620      	mov	r0, r4
 800411e:	4629      	mov	r1, r5
 8004120:	f7fc fa36 	bl	8000590 <__aeabi_dmul>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4610      	mov	r0, r2
 800412a:	4619      	mov	r1, r3
 800412c:	f7fc fd12 	bl	8000b54 <__aeabi_d2f>
 8004130:	4602      	mov	r2, r0
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800413c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004140:	ee17 0a90 	vmov	r0, s15
 8004144:	f7fc f9cc 	bl	80004e0 <__aeabi_f2d>
 8004148:	a365      	add	r3, pc, #404	@ (adr r3, 80042e0 <QEI_compute_data+0x238>)
 800414a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414e:	f7fc fa1f 	bl	8000590 <__aeabi_dmul>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4614      	mov	r4, r2
 8004158:	461d      	mov	r5, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004166:	ee17 0a90 	vmov	r0, s15
 800416a:	f7fc f9b9 	bl	80004e0 <__aeabi_f2d>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4620      	mov	r0, r4
 8004174:	4629      	mov	r1, r5
 8004176:	f7fc fb35 	bl	80007e4 <__aeabi_ddiv>
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4614      	mov	r4, r2
 8004180:	461d      	mov	r5, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004186:	4618      	mov	r0, r3
 8004188:	f7fc f9aa 	bl	80004e0 <__aeabi_f2d>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4620      	mov	r0, r4
 8004192:	4629      	mov	r1, r5
 8004194:	f7fc f9fc 	bl	8000590 <__aeabi_dmul>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4610      	mov	r0, r2
 800419e:	4619      	mov	r1, r3
 80041a0:	f7fc fcd8 	bl	8000b54 <__aeabi_d2f>
 80041a4:	4602      	mov	r2, r0
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fc f996 	bl	80004e0 <__aeabi_f2d>
 80041b4:	a34a      	add	r3, pc, #296	@ (adr r3, 80042e0 <QEI_compute_data+0x238>)
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f7fc f9e9 	bl	8000590 <__aeabi_dmul>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	4614      	mov	r4, r2
 80041c4:	461d      	mov	r5, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fc f988 	bl	80004e0 <__aeabi_f2d>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	4620      	mov	r0, r4
 80041d6:	4629      	mov	r1, r5
 80041d8:	f7fc f9da 	bl	8000590 <__aeabi_dmul>
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4614      	mov	r4, r2
 80041e2:	461d      	mov	r5, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	ee07 3a90 	vmov	s15, r3
 80041ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041f0:	ee17 0a90 	vmov	r0, s15
 80041f4:	f7fc f974 	bl	80004e0 <__aeabi_f2d>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4620      	mov	r0, r4
 80041fe:	4629      	mov	r1, r5
 8004200:	f7fc faf0 	bl	80007e4 <__aeabi_ddiv>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4614      	mov	r4, r2
 800420a:	461d      	mov	r5, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004210:	4618      	mov	r0, r3
 8004212:	f7fc f965 	bl	80004e0 <__aeabi_f2d>
 8004216:	4602      	mov	r2, r0
 8004218:	460b      	mov	r3, r1
 800421a:	4620      	mov	r0, r4
 800421c:	4629      	mov	r1, r5
 800421e:	f7fc f9b7 	bl	8000590 <__aeabi_dmul>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4610      	mov	r0, r2
 8004228:	4619      	mov	r1, r3
 800422a:	f7fc fc93 	bl	8000b54 <__aeabi_d2f>
 800422e:	4602      	mov	r2, r0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	ed93 7a02 	vldr	s14, [r3, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	edd3 7a03 	vldr	s15, [r3, #12]
 8004250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004254:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8004258:	edd7 7a03 	vldr	s15, [r7, #12]
 800425c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004264:	d00a      	beq.n	800427c <QEI_compute_data+0x1d4>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004272:	edd7 7a03 	vldr	s15, [r7, #12]
 8004276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800427a:	e001      	b.n	8004280 <QEI_compute_data+0x1d8>
 800427c:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80042ec <QEI_compute_data+0x244>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	ed93 7a04 	vldr	s14, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004292:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004296:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 800429a:	edd7 7a02 	vldr	s15, [r7, #8]
 800429e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80042a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a6:	d00a      	beq.n	80042be <QEI_compute_data+0x216>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ac:	ee07 3a90 	vmov	s15, r3
 80042b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80042b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042bc:	e001      	b.n	80042c2 <QEI_compute_data+0x21a>
 80042be:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80042ec <QEI_compute_data+0x244>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	615a      	str	r2, [r3, #20]
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bdb0      	pop	{r4, r5, r7, pc}
 80042e0:	54442d18 	.word	0x54442d18
 80042e4:	400921fb 	.word	0x400921fb
 80042e8:	404e0000 	.word	0x404e0000
 80042ec:	00000000 	.word	0x00000000

080042f0 <QEI_reset>:

void QEI_reset(QEI *qei) {
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
    // Reset counter history
    qei->c[NOW] = 0;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->pulses = 0;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f04f 0200 	mov.w	r2, #0
 800432e:	649a      	str	r2, [r3, #72]	@ 0x48

    // Reset velocity history
    qei->r[NOW] = 0;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f04f 0200 	mov.w	r2, #0
 800433e:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f04f 0200 	mov.w	r2, #0
 800434e:	615a      	str	r2, [r3, #20]
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 800435c:	b580      	push	{r7, lr}
 800435e:	b08e      	sub	sp, #56	@ 0x38
 8004360:	af00      	add	r7, sp, #0
 8004362:	6178      	str	r0, [r7, #20]
 8004364:	ed87 0a04 	vstr	s0, [r7, #16]
 8004368:	edc7 0a03 	vstr	s1, [r7, #12]
 800436c:	ed87 1a02 	vstr	s2, [r7, #8]
 8004370:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2200      	movs	r2, #0
 8004378:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 800439a:	ed97 7a03 	vldr	s14, [r7, #12]
 800439e:	edd7 7a04 	vldr	s15, [r7, #16]
 80043a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043a6:	eef0 7ae7 	vabs.f32	s15, s15
 80043aa:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 80043ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80043b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80043b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c2:	d503      	bpl.n	80043cc <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	22ff      	movs	r2, #255	@ 0xff
 80043c8:	741a      	strb	r2, [r3, #16]
 80043ca:	e002      	b.n	80043d2 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2201      	movs	r2, #1
 80043d0:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 80043d2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80043d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043de:	d006      	beq.n	80043ee <Trapezoidal_Generator+0x92>
 80043e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80043e4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ec:	d104      	bne.n	80043f8 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	60da      	str	r2, [r3, #12]
        return;
 80043f6:	e06f      	b.n	80044d8 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 80043f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80043fc:	ed97 7a01 	vldr	s14, [r7, #4]
 8004400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004404:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8004408:	edd7 7a01 	vldr	s15, [r7, #4]
 800440c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004410:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004414:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004424:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8004428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442a:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 800442c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004430:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004438:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 800443c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004440:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004444:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444c:	db27      	blt.n	800449e <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 800444e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8004452:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800445a:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 800445e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004462:	ed97 7a02 	vldr	s14, [r7, #8]
 8004466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800446a:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004472:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8004474:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004478:	edd7 7a06 	vldr	s15, [r7, #24]
 800447c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8004486:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800448a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800448e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	edc3 7a02 	vstr	s15, [r3, #8]
 800449c:	e018      	b.n	80044d0 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 800449e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80044a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80044a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80044aa:	eeb0 0a66 	vmov.f32	s0, s13
 80044ae:	f00e f937 	bl	8012720 <sqrtf>
 80044b2:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	6a3a      	ldr	r2, [r7, #32]
 80044ba:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	6a3a      	ldr	r2, [r7, #32]
 80044c0:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 80044c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80044c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	60da      	str	r2, [r3, #12]
}
 80044d8:	3738      	adds	r7, #56	@ 0x38
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 80044e0:	b480      	push	{r7}
 80044e2:	b08d      	sub	sp, #52	@ 0x34
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6178      	str	r0, [r7, #20]
 80044e8:	6139      	str	r1, [r7, #16]
 80044ea:	ed87 0a03 	vstr	s0, [r7, #12]
 80044ee:	edc7 0a02 	vstr	s1, [r7, #8]
 80044f2:	ed87 1a01 	vstr	s2, [r7, #4]
 80044f6:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	edd3 7a03 	vldr	s15, [r3, #12]
 8004500:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8004784 <Trapezoidal_Evaluated+0x2a4>
 8004504:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	ed93 7a03 	vldr	s14, [r3, #12]
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	edd3 7a03 	vldr	s15, [r3, #12]
 800451a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800451e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004522:	f200 811b 	bhi.w	800475c <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2200      	movs	r2, #0
 800452a:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	7c1b      	ldrb	r3, [r3, #16]
 8004530:	b25b      	sxtb	r3, r3
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800453a:	ed97 7a00 	vldr	s14, [r7]
 800453e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004542:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	ed93 7a00 	vldr	s14, [r3]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004552:	eeb4 7a67 	vcmp.f32	s14, s15
 8004556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455a:	d109      	bne.n	8004570 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	edd3 7a00 	vldr	s15, [r3]
 8004562:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800456e:	e00c      	b.n	800458a <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	7c1b      	ldrb	r3, [r3, #16]
 8004574:	b25b      	sxtb	r3, r3
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800457e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004586:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	edd3 7a00 	vldr	s15, [r3]
 8004596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800459a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459e:	d824      	bhi.n	80045ea <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 80045a0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80045a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80045a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80045b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	edd3 7a03 	vldr	s15, [r3, #12]
 80045bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80045c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80045d4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80045d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e6:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 80045e8:	e0c6      	b.n	8004778 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	ed93 7a03 	vldr	s14, [r3, #12]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80045f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045fe:	d830      	bhi.n	8004662 <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8004600:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004604:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004608:	ee27 7a87 	vmul.f32	s14, s15, s14
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	edd3 7a00 	vldr	s15, [r3]
 8004612:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	edd3 7a00 	vldr	s15, [r3]
 800461c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004620:	ed97 7a03 	vldr	s14, [r7, #12]
 8004624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004628:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	edd3 7a00 	vldr	s15, [r3]
 8004638:	ee37 7a67 	vsub.f32	s14, s14, s15
 800463c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004640:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004644:	edd7 7a06 	vldr	s15, [r7, #24]
 8004648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004656:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f04f 0200 	mov.w	r2, #0
 800465e:	609a      	str	r2, [r3, #8]
}
 8004660:	e08a      	b.n	8004778 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	ed93 7a03 	vldr	s14, [r3, #12]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	edd3 7a02 	vldr	s15, [r3, #8]
 800466e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004676:	d900      	bls.n	800467a <Trapezoidal_Evaluated+0x19a>
}
 8004678:	e07e      	b.n	8004778 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 800467a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800467e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004682:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	edd3 7a00 	vldr	s15, [r3]
 800468c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	edd3 7a00 	vldr	s15, [r3]
 8004696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800469a:	ed97 7a03 	vldr	s14, [r7, #12]
 800469e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a2:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	edd3 7a00 	vldr	s15, [r3]
 80046b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046be:	dd11      	ble.n	80046e4 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	edd3 7a00 	vldr	s15, [r3]
 80046cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046d0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80046d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80046dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046e0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80046f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046f4:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 80046f8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80046fc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004704:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004708:	ee37 7a27 	vadd.f32	s14, s14, s15
 800470c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004710:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004714:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004718:	edd7 7a07 	vldr	s15, [r7, #28]
 800471c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004720:	edd7 7a07 	vldr	s15, [r7, #28]
 8004724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 8004732:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004736:	edd7 7a07 	vldr	s15, [r7, #28]
 800473a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 800474c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004750:	eef1 7a67 	vneg.f32	s15, s15
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800475a:	e00d      	b.n	8004778 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2201      	movs	r2, #1
 8004760:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	f04f 0200 	mov.w	r2, #0
 800476e:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	609a      	str	r2, [r3, #8]
}
 8004778:	bf00      	nop
 800477a:	3734      	adds	r7, #52	@ 0x34
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	3a83126f 	.word	0x3a83126f

08004788 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004792:	4603      	mov	r3, r0
 8004794:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 8004796:	78fb      	ldrb	r3, [r7, #3]
 8004798:	2b1a      	cmp	r3, #26
 800479a:	d018      	beq.n	80047ce <temperature_to_base+0x46>
 800479c:	2b1a      	cmp	r3, #26
 800479e:	dc1d      	bgt.n	80047dc <temperature_to_base+0x54>
 80047a0:	2b18      	cmp	r3, #24
 80047a2:	d002      	beq.n	80047aa <temperature_to_base+0x22>
 80047a4:	2b19      	cmp	r3, #25
 80047a6:	d003      	beq.n	80047b0 <temperature_to_base+0x28>
 80047a8:	e018      	b.n	80047dc <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80047aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80047ae:	e017      	b.n	80047e0 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 80047b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80047b4:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80047f0 <temperature_to_base+0x68>
 80047b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047bc:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80047c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80047c4:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 80047c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047cc:	e008      	b.n	80047e0 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 80047ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80047d2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80047f4 <temperature_to_base+0x6c>
 80047d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047da:	e001      	b.n	80047e0 <temperature_to_base+0x58>
        default:
            return value;
 80047dc:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80047e0:	eeb0 0a67 	vmov.f32	s0, s15
 80047e4:	370c      	adds	r7, #12
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	42000000 	.word	0x42000000
 80047f4:	43889333 	.word	0x43889333

080047f8 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8004802:	4603      	mov	r3, r0
 8004804:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 8004806:	78fb      	ldrb	r3, [r7, #3]
 8004808:	2b1a      	cmp	r3, #26
 800480a:	d018      	beq.n	800483e <temperature_from_base+0x46>
 800480c:	2b1a      	cmp	r3, #26
 800480e:	dc1d      	bgt.n	800484c <temperature_from_base+0x54>
 8004810:	2b18      	cmp	r3, #24
 8004812:	d002      	beq.n	800481a <temperature_from_base+0x22>
 8004814:	2b19      	cmp	r3, #25
 8004816:	d003      	beq.n	8004820 <temperature_from_base+0x28>
 8004818:	e018      	b.n	800484c <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 800481a:	edd7 7a01 	vldr	s15, [r7, #4]
 800481e:	e017      	b.n	8004850 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 8004820:	edd7 7a01 	vldr	s15, [r7, #4]
 8004824:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8004828:	ee27 7a87 	vmul.f32	s14, s15, s14
 800482c:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8004830:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004834:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004860 <temperature_from_base+0x68>
 8004838:	ee77 7a87 	vadd.f32	s15, s15, s14
 800483c:	e008      	b.n	8004850 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 800483e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004842:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004864 <temperature_from_base+0x6c>
 8004846:	ee77 7a87 	vadd.f32	s15, s15, s14
 800484a:	e001      	b.n	8004850 <temperature_from_base+0x58>
        default:
            return value;
 800484c:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004850:	eeb0 0a67 	vmov.f32	s0, s15
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	42000000 	.word	0x42000000
 8004864:	43889333 	.word	0x43889333

08004868 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2202      	movs	r2, #2
 800487a:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	e00a      	b.n	8004898 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	3304      	adds	r3, #4
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3301      	adds	r3, #1
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b1a      	cmp	r3, #26
 800489c:	ddf1      	ble.n	8004882 <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a11      	ldr	r2, [pc, #68]	@ (80048e8 <init_length_converter+0x80>)
 80048a2:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a11      	ldr	r2, [pc, #68]	@ (80048ec <init_length_converter+0x84>)
 80048a8:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80048b0:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a0e      	ldr	r2, [pc, #56]	@ (80048f0 <init_length_converter+0x88>)
 80048b6:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a0e      	ldr	r2, [pc, #56]	@ (80048f4 <init_length_converter+0x8c>)
 80048bc:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a0d      	ldr	r2, [pc, #52]	@ (80048f8 <init_length_converter+0x90>)
 80048c2:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a0d      	ldr	r2, [pc, #52]	@ (80048fc <init_length_converter+0x94>)
 80048c8:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004900 <init_length_converter+0x98>)
 80048ce:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	3a83126f 	.word	0x3a83126f
 80048ec:	3c23d70a 	.word	0x3c23d70a
 80048f0:	447a0000 	.word	0x447a0000
 80048f4:	3cd013a9 	.word	0x3cd013a9
 80048f8:	3e9c0ebf 	.word	0x3e9c0ebf
 80048fc:	3f6a161e 	.word	0x3f6a161e
 8004900:	44c92b02 	.word	0x44c92b02

08004904 <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	220a      	movs	r2, #10
 8004916:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e00a      	b.n	8004934 <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	3304      	adds	r3, #4
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3301      	adds	r3, #1
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b1a      	cmp	r3, #26
 8004938:	ddf1      	ble.n	800491e <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a0e      	ldr	r2, [pc, #56]	@ (8004978 <init_mass_converter+0x74>)
 800493e:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a0e      	ldr	r2, [pc, #56]	@ (800497c <init_mass_converter+0x78>)
 8004944:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800494c:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a0b      	ldr	r2, [pc, #44]	@ (8004980 <init_mass_converter+0x7c>)
 8004952:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a0b      	ldr	r2, [pc, #44]	@ (8004984 <init_mass_converter+0x80>)
 8004958:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a0a      	ldr	r2, [pc, #40]	@ (8004988 <init_mass_converter+0x84>)
 800495e:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800496c:	bf00      	nop
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	358637bd 	.word	0x358637bd
 800497c:	3a83126f 	.word	0x3a83126f
 8004980:	447a0000 	.word	0x447a0000
 8004984:	3ce83d36 	.word	0x3ce83d36
 8004988:	3ee83d36 	.word	0x3ee83d36

0800498c <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	220f      	movs	r2, #15
 800499e:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	e00a      	b.n	80049bc <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4413      	add	r3, r2
 80049ae:	3304      	adds	r3, #4
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3301      	adds	r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b1a      	cmp	r3, #26
 80049c0:	ddf1      	ble.n	80049a6 <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a0a      	ldr	r2, [pc, #40]	@ (80049f0 <init_angle_converter+0x64>)
 80049c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80049ce:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a08      	ldr	r2, [pc, #32]	@ (80049f4 <init_angle_converter+0x68>)
 80049d4:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	3c8efa35 	.word	0x3c8efa35
 80049f4:	3c80adfd 	.word	0x3c80adfd

080049f8 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2203      	movs	r2, #3
 8004a04:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2214      	movs	r2, #20
 8004a0a:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
 8004a10:	e00a      	b.n	8004a28 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	3301      	adds	r3, #1
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b1a      	cmp	r3, #26
 8004a2c:	ddf1      	ble.n	8004a12 <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a10      	ldr	r2, [pc, #64]	@ (8004a74 <init_time_converter+0x7c>)
 8004a32:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a10      	ldr	r2, [pc, #64]	@ (8004a78 <init_time_converter+0x80>)
 8004a38:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a0f      	ldr	r2, [pc, #60]	@ (8004a7c <init_time_converter+0x84>)
 8004a3e:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004a46:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a0d      	ldr	r2, [pc, #52]	@ (8004a80 <init_time_converter+0x88>)
 8004a4c:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a0c      	ldr	r2, [pc, #48]	@ (8004a84 <init_time_converter+0x8c>)
 8004a52:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a0c      	ldr	r2, [pc, #48]	@ (8004a88 <init_time_converter+0x90>)
 8004a58:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a66:	bf00      	nop
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	3089705f 	.word	0x3089705f
 8004a78:	358637bd 	.word	0x358637bd
 8004a7c:	3a83126f 	.word	0x3a83126f
 8004a80:	42700000 	.word	0x42700000
 8004a84:	45610000 	.word	0x45610000
 8004a88:	47a8c000 	.word	0x47a8c000

08004a8c <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2204      	movs	r2, #4
 8004a98:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2218      	movs	r2, #24
 8004a9e:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	60fb      	str	r3, [r7, #12]
 8004aa4:	e00a      	b.n	8004abc <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	3304      	adds	r3, #4
 8004ab0:	f04f 0200 	mov.w	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b1a      	cmp	r3, #26
 8004ac0:	ddf1      	ble.n	8004aa6 <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a05      	ldr	r2, [pc, #20]	@ (8004adc <init_temperature_converter+0x50>)
 8004ac6:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a05      	ldr	r2, [pc, #20]	@ (8004ae0 <init_temperature_converter+0x54>)
 8004acc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004ace:	bf00      	nop
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	08004789 	.word	0x08004789
 8004ae0:	080047f9 	.word	0x080047f9

08004ae4 <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff feba 	bl	8004868 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3378      	adds	r3, #120	@ 0x78
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff ff03 	bl	8004904 <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	33f0      	adds	r3, #240	@ 0xf0
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff ff42 	bl	800498c <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff ff72 	bl	80049f8 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff ffb6 	bl	8004a8c <init_temperature_converter>
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	4603      	mov	r3, r0
 8004b30:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	2b1a      	cmp	r3, #26
 8004b36:	d803      	bhi.n	8004b40 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	4a05      	ldr	r2, [pc, #20]	@ (8004b50 <UnitConverter_get_unit_type+0x28>)
 8004b3c:	5cd3      	ldrb	r3, [r2, r3]
 8004b3e:	e000      	b.n	8004b42 <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	20000318 	.word	0x20000318

08004b54 <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b60:	460b      	mov	r3, r1
 8004b62:	71fb      	strb	r3, [r7, #7]
 8004b64:	4613      	mov	r3, r2
 8004b66:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff ffdc 	bl	8004b28 <UnitConverter_get_unit_type>
 8004b70:	4603      	mov	r3, r0
 8004b72:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 8004b74:	79bb      	ldrb	r3, [r7, #6]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7ff ffd6 	bl	8004b28 <UnitConverter_get_unit_type>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 8004b80:	7efa      	ldrb	r2, [r7, #27]
 8004b82:	7ebb      	ldrb	r3, [r7, #26]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d002      	beq.n	8004b8e <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004b88:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b8c:	e03b      	b.n	8004c06 <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 8004b8e:	7efa      	ldrb	r2, [r7, #27]
 8004b90:	4613      	mov	r3, r2
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d009      	beq.n	8004bba <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004baa:	79fa      	ldrb	r2, [r7, #7]
 8004bac:	4610      	mov	r0, r2
 8004bae:	ed97 0a02 	vldr	s0, [r7, #8]
 8004bb2:	4798      	blx	r3
 8004bb4:	ed87 0a07 	vstr	s0, [r7, #28]
 8004bb8:	e00c      	b.n	8004bd4 <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 8004bba:	79fb      	ldrb	r3, [r7, #7]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	edd3 7a00 	vldr	s15, [r3]
 8004bc8:	ed97 7a02 	vldr	s14, [r7, #8]
 8004bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd0:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d009      	beq.n	8004bf0 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be0:	79ba      	ldrb	r2, [r7, #6]
 8004be2:	4610      	mov	r0, r2
 8004be4:	ed97 0a07 	vldr	s0, [r7, #28]
 8004be8:	4798      	blx	r3
 8004bea:	eef0 7a40 	vmov.f32	s15, s0
 8004bee:	e00a      	b.n	8004c06 <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 8004bf0:	79bb      	ldrb	r3, [r7, #6]
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	ed93 7a00 	vldr	s14, [r3]
 8004bfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 8004c06:	eeb0 0a67 	vmov.f32	s0, s15
 8004c0a:	3720      	adds	r7, #32
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	71fb      	strb	r3, [r7, #7]
 8004c20:	4613      	mov	r3, r2
 8004c22:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004c24:	79fb      	ldrb	r3, [r7, #7]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff ff7e 	bl	8004b28 <UnitConverter_get_unit_type>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d111      	bne.n	8004c56 <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 8004c32:	79bb      	ldrb	r3, [r7, #6]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7ff ff77 	bl	8004b28 <UnitConverter_get_unit_type>
 8004c3a:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d10a      	bne.n	8004c56 <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 8004c40:	79ba      	ldrb	r2, [r7, #6]
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	4619      	mov	r1, r3
 8004c46:	ed97 0a02 	vldr	s0, [r7, #8]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f7ff ff82 	bl	8004b54 <UnitConverter_convert>
 8004c50:	eef0 7a40 	vmov.f32	s15, s0
 8004c54:	e001      	b.n	8004c5a <UnitConverter_angle+0x4a>
    }
    return value;
 8004c56:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8004c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08c      	sub	sp, #48	@ 0x30
 8004c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004c76:	1d3b      	adds	r3, r7, #4
 8004c78:	2220      	movs	r2, #32
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f00d fc33 	bl	80124e8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004c82:	4b39      	ldr	r3, [pc, #228]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004c84:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004c88:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004c8a:	4b37      	ldr	r3, [pc, #220]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004c8c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004c90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004c92:	4b35      	ldr	r3, [pc, #212]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c98:	4b33      	ldr	r3, [pc, #204]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004c9e:	4b32      	ldr	r3, [pc, #200]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004ca4:	4b30      	ldr	r3, [pc, #192]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004caa:	4b2f      	ldr	r3, [pc, #188]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cac:	2204      	movs	r2, #4
 8004cae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004cb6:	4b2c      	ldr	r3, [pc, #176]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004cc2:	4b29      	ldr	r3, [pc, #164]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004cca:	4b27      	ldr	r3, [pc, #156]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004cd0:	4b25      	ldr	r3, [pc, #148]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004cd6:	4b24      	ldr	r3, [pc, #144]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004cde:	4b22      	ldr	r3, [pc, #136]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004ce4:	4b20      	ldr	r3, [pc, #128]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004cec:	481e      	ldr	r0, [pc, #120]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004cee:	f005 fdcd 	bl	800a88c <HAL_ADC_Init>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004cf8:	f003 fe06 	bl	8008908 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004d00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d04:	4619      	mov	r1, r3
 8004d06:	4818      	ldr	r0, [pc, #96]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004d08:	f006 feec 	bl	800bae4 <HAL_ADCEx_MultiModeConfigChannel>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004d12:	f003 fdf9 	bl	8008908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004d16:	4b15      	ldr	r3, [pc, #84]	@ (8004d6c <MX_ADC1_Init+0x108>)
 8004d18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004d1a:	2306      	movs	r3, #6
 8004d1c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004d1e:	2307      	movs	r3, #7
 8004d20:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004d22:	237f      	movs	r3, #127	@ 0x7f
 8004d24:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004d26:	2304      	movs	r3, #4
 8004d28:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d2e:	1d3b      	adds	r3, r7, #4
 8004d30:	4619      	mov	r1, r3
 8004d32:	480d      	ldr	r0, [pc, #52]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004d34:	f006 f858 	bl	800ade8 <HAL_ADC_ConfigChannel>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8004d3e:	f003 fde3 	bl	8008908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004d42:	4b0b      	ldr	r3, [pc, #44]	@ (8004d70 <MX_ADC1_Init+0x10c>)
 8004d44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004d46:	230c      	movs	r3, #12
 8004d48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d4a:	1d3b      	adds	r3, r7, #4
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4806      	ldr	r0, [pc, #24]	@ (8004d68 <MX_ADC1_Init+0x104>)
 8004d50:	f006 f84a 	bl	800ade8 <HAL_ADC_ConfigChannel>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004d5a:	f003 fdd5 	bl	8008908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004d5e:	bf00      	nop
 8004d60:	3730      	adds	r7, #48	@ 0x30
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	200003b4 	.word	0x200003b4
 8004d6c:	19200040 	.word	0x19200040
 8004d70:	1d500080 	.word	0x1d500080

08004d74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b09e      	sub	sp, #120	@ 0x78
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d7c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004d80:	2200      	movs	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	605a      	str	r2, [r3, #4]
 8004d86:	609a      	str	r2, [r3, #8]
 8004d88:	60da      	str	r2, [r3, #12]
 8004d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	2254      	movs	r2, #84	@ 0x54
 8004d92:	2100      	movs	r1, #0
 8004d94:	4618      	mov	r0, r3
 8004d96:	f00d fba7 	bl	80124e8 <memset>
  if(adcHandle->Instance==ADC1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004da2:	d15e      	bne.n	8004e62 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004da4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004da8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004daa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004dae:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004db0:	f107 0310 	add.w	r3, r7, #16
 8004db4:	4618      	mov	r0, r3
 8004db6:	f008 fba5 	bl	800d504 <HAL_RCCEx_PeriphCLKConfig>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004dc0:	f003 fda2 	bl	8008908 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004dc4:	4b29      	ldr	r3, [pc, #164]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dc8:	4a28      	ldr	r2, [pc, #160]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004dca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004dce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dd0:	4b26      	ldr	r3, [pc, #152]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ddc:	4b23      	ldr	r3, [pc, #140]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004de0:	4a22      	ldr	r2, [pc, #136]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004de2:	f043 0304 	orr.w	r3, r3, #4
 8004de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004de8:	4b20      	ldr	r3, [pc, #128]	@ (8004e6c <HAL_ADC_MspInit+0xf8>)
 8004dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004df4:	2303      	movs	r3, #3
 8004df6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004e04:	4619      	mov	r1, r3
 8004e06:	481a      	ldr	r0, [pc, #104]	@ (8004e70 <HAL_ADC_MspInit+0xfc>)
 8004e08:	f007 fbb6 	bl	800c578 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004e0c:	4b19      	ldr	r3, [pc, #100]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004e78 <HAL_ADC_MspInit+0x104>)
 8004e10:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004e12:	4b18      	ldr	r3, [pc, #96]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e14:	2205      	movs	r2, #5
 8004e16:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e18:	4b16      	ldr	r3, [pc, #88]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e1e:	4b15      	ldr	r3, [pc, #84]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004e24:	4b13      	ldr	r3, [pc, #76]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e26:	2280      	movs	r2, #128	@ 0x80
 8004e28:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e2a:	4b12      	ldr	r3, [pc, #72]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e30:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e32:	4b10      	ldr	r3, [pc, #64]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e38:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004e40:	4b0c      	ldr	r3, [pc, #48]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004e46:	480b      	ldr	r0, [pc, #44]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e48:	f007 f864 	bl	800bf14 <HAL_DMA_Init>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8004e52:	f003 fd59 	bl	8008908 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a06      	ldr	r2, [pc, #24]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e5a:	655a      	str	r2, [r3, #84]	@ 0x54
 8004e5c:	4a05      	ldr	r2, [pc, #20]	@ (8004e74 <HAL_ADC_MspInit+0x100>)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004e62:	bf00      	nop
 8004e64:	3778      	adds	r7, #120	@ 0x78
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	48000800 	.word	0x48000800
 8004e74:	20000420 	.word	0x20000420
 8004e78:	40020008 	.word	0x40020008

08004e7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004e82:	4b22      	ldr	r3, [pc, #136]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004e84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e86:	4a21      	ldr	r2, [pc, #132]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004e88:	f043 0304 	orr.w	r3, r3, #4
 8004e8c:	6493      	str	r3, [r2, #72]	@ 0x48
 8004e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e92:	f003 0304 	and.w	r3, r3, #4
 8004e96:	607b      	str	r3, [r7, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004e9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	6493      	str	r3, [r2, #72]	@ 0x48
 8004ea6:	4b19      	ldr	r3, [pc, #100]	@ (8004f0c <MX_DMA_Init+0x90>)
 8004ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	200b      	movs	r0, #11
 8004eb8:	f006 fff7 	bl	800beaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004ebc:	200b      	movs	r0, #11
 8004ebe:	f007 f80e 	bl	800bede <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	200c      	movs	r0, #12
 8004ec8:	f006 ffef 	bl	800beaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004ecc:	200c      	movs	r0, #12
 8004ece:	f007 f806 	bl	800bede <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	200d      	movs	r0, #13
 8004ed8:	f006 ffe7 	bl	800beaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004edc:	200d      	movs	r0, #13
 8004ede:	f006 fffe 	bl	800bede <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	200e      	movs	r0, #14
 8004ee8:	f006 ffdf 	bl	800beaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004eec:	200e      	movs	r0, #14
 8004eee:	f006 fff6 	bl	800bede <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	200f      	movs	r0, #15
 8004ef8:	f006 ffd7 	bl	800beaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004efc:	200f      	movs	r0, #15
 8004efe:	f006 ffee 	bl	800bede <HAL_NVIC_EnableIRQ>

}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40021000 	.word	0x40021000

08004f10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b08a      	sub	sp, #40	@ 0x28
 8004f14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f16:	f107 0314 	add.w	r3, r7, #20
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	605a      	str	r2, [r3, #4]
 8004f20:	609a      	str	r2, [r3, #8]
 8004f22:	60da      	str	r2, [r3, #12]
 8004f24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f26:	4b75      	ldr	r3, [pc, #468]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f2a:	4a74      	ldr	r2, [pc, #464]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f2c:	f043 0304 	orr.w	r3, r3, #4
 8004f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f32:	4b72      	ldr	r3, [pc, #456]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f36:	f003 0304 	and.w	r3, r3, #4
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f3e:	4b6f      	ldr	r3, [pc, #444]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f42:	4a6e      	ldr	r2, [pc, #440]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f44:	f043 0320 	orr.w	r3, r3, #32
 8004f48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f4a:	4b6c      	ldr	r3, [pc, #432]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f56:	4b69      	ldr	r3, [pc, #420]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f5a:	4a68      	ldr	r2, [pc, #416]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f62:	4b66      	ldr	r3, [pc, #408]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	60bb      	str	r3, [r7, #8]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f6e:	4b63      	ldr	r3, [pc, #396]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f72:	4a62      	ldr	r2, [pc, #392]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f74:	f043 0302 	orr.w	r3, r3, #2
 8004f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f7a:	4b60      	ldr	r3, [pc, #384]	@ (80050fc <MX_GPIO_Init+0x1ec>)
 8004f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	607b      	str	r3, [r7, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8004f86:	2200      	movs	r2, #0
 8004f88:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004f8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f90:	f007 fc8c 	bl	800c8ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8004f94:	2200      	movs	r2, #0
 8004f96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f9a:	4859      	ldr	r0, [pc, #356]	@ (8005100 <MX_GPIO_Init+0x1f0>)
 8004f9c:	f007 fc86 	bl	800c8ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004fa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fa6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004fb0:	f107 0314 	add.w	r3, r7, #20
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4852      	ldr	r0, [pc, #328]	@ (8005100 <MX_GPIO_Init+0x1f0>)
 8004fb8:	f007 fade 	bl	800c578 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004fbc:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fce:	f107 0314 	add.w	r3, r7, #20
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004fd8:	f007 face 	bl	800c578 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 8004fdc:	f241 0301 	movw	r3, #4097	@ 0x1001
 8004fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fe2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fec:	f107 0314 	add.w	r3, r7, #20
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4844      	ldr	r0, [pc, #272]	@ (8005104 <MX_GPIO_Init+0x1f4>)
 8004ff4:	f007 fac0 	bl	800c578 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004ff8:	2306      	movs	r3, #6
 8004ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005000:	2302      	movs	r3, #2
 8005002:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005004:	f107 0314 	add.w	r3, r7, #20
 8005008:	4619      	mov	r1, r3
 800500a:	483e      	ldr	r0, [pc, #248]	@ (8005104 <MX_GPIO_Init+0x1f4>)
 800500c:	f007 fab4 	bl	800c578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005010:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005016:	2301      	movs	r3, #1
 8005018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800501e:	2300      	movs	r3, #0
 8005020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005022:	f107 0314 	add.w	r3, r7, #20
 8005026:	4619      	mov	r1, r3
 8005028:	4835      	ldr	r0, [pc, #212]	@ (8005100 <MX_GPIO_Init+0x1f0>)
 800502a:	f007 faa5 	bl	800c578 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 800502e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005034:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800503a:	2302      	movs	r3, #2
 800503c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800503e:	f107 0314 	add.w	r3, r7, #20
 8005042:	4619      	mov	r1, r3
 8005044:	482e      	ldr	r0, [pc, #184]	@ (8005100 <MX_GPIO_Init+0x1f0>)
 8005046:	f007 fa97 	bl	800c578 <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 800504a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800504e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005050:	2300      	movs	r3, #0
 8005052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005054:	2302      	movs	r3, #2
 8005056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8005058:	f107 0314 	add.w	r3, r7, #20
 800505c:	4619      	mov	r1, r3
 800505e:	4828      	ldr	r0, [pc, #160]	@ (8005100 <MX_GPIO_Init+0x1f0>)
 8005060:	f007 fa8a 	bl	800c578 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 8005064:	2310      	movs	r3, #16
 8005066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005068:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800506c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506e:	2300      	movs	r3, #0
 8005070:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8005072:	f107 0314 	add.w	r3, r7, #20
 8005076:	4619      	mov	r1, r3
 8005078:	4822      	ldr	r0, [pc, #136]	@ (8005104 <MX_GPIO_Init+0x1f4>)
 800507a:	f007 fa7d 	bl	800c578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 800507e:	2340      	movs	r3, #64	@ 0x40
 8005080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005082:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005088:	2301      	movs	r3, #1
 800508a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 800508c:	f107 0314 	add.w	r3, r7, #20
 8005090:	4619      	mov	r1, r3
 8005092:	481c      	ldr	r0, [pc, #112]	@ (8005104 <MX_GPIO_Init+0x1f4>)
 8005094:	f007 fa70 	bl	800c578 <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 8005098:	2380      	movs	r3, #128	@ 0x80
 800509a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800509c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80050a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80050a2:	2302      	movs	r3, #2
 80050a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 80050a6:	f107 0314 	add.w	r3, r7, #20
 80050aa:	4619      	mov	r1, r3
 80050ac:	4815      	ldr	r0, [pc, #84]	@ (8005104 <MX_GPIO_Init+0x1f4>)
 80050ae:	f007 fa63 	bl	800c578 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80050b2:	2200      	movs	r2, #0
 80050b4:	2100      	movs	r1, #0
 80050b6:	2006      	movs	r0, #6
 80050b8:	f006 fef7 	bl	800beaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80050bc:	2006      	movs	r0, #6
 80050be:	f006 ff0e 	bl	800bede <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80050c2:	2200      	movs	r2, #0
 80050c4:	2100      	movs	r1, #0
 80050c6:	200a      	movs	r0, #10
 80050c8:	f006 feef 	bl	800beaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80050cc:	200a      	movs	r0, #10
 80050ce:	f006 ff06 	bl	800bede <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80050d2:	2200      	movs	r2, #0
 80050d4:	2100      	movs	r1, #0
 80050d6:	2017      	movs	r0, #23
 80050d8:	f006 fee7 	bl	800beaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80050dc:	2017      	movs	r0, #23
 80050de:	f006 fefe 	bl	800bede <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80050e2:	2200      	movs	r2, #0
 80050e4:	2100      	movs	r1, #0
 80050e6:	2028      	movs	r0, #40	@ 0x28
 80050e8:	f006 fedf 	bl	800beaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80050ec:	2028      	movs	r0, #40	@ 0x28
 80050ee:	f006 fef6 	bl	800bede <HAL_NVIC_EnableIRQ>

}
 80050f2:	bf00      	nop
 80050f4:	3728      	adds	r7, #40	@ 0x28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	40021000 	.word	0x40021000
 8005100:	48000800 	.word	0x48000800
 8005104:	48000400 	.word	0x48000400

08005108 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8005108:	b580      	push	{r7, lr}
 800510a:	b096      	sub	sp, #88	@ 0x58
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	ed87 0a02 	vstr	s0, [r7, #8]
 8005114:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 800511e:	1d3b      	adds	r3, r7, #4
 8005120:	2201      	movs	r2, #1
 8005122:	2101      	movs	r1, #1
 8005124:	f00c fc6f 	bl	8011a06 <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8005134:	4619      	mov	r1, r3
 8005136:	4610      	mov	r0, r2
 8005138:	f00d f8df 	bl	80122fa <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f00d f8d5 	bl	80122fa <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f00d f8cb 	bl	80122fa <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8005170:	4619      	mov	r1, r3
 8005172:	ed97 0a02 	vldr	s0, [r7, #8]
 8005176:	4610      	mov	r0, r2
 8005178:	f00d f84e 	bl	8012218 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 800518e:	461a      	mov	r2, r3
 8005190:	f00c ffc8 	bl	8012124 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80051a6:	461a      	mov	r2, r3
 80051a8:	f00c fbf2 	bl	8011990 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80051be:	461a      	mov	r2, r3
 80051c0:	f00c ffb0 	bl	8012124 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80051d6:	461a      	mov	r2, r3
 80051d8:	f00c ffa4 	bl	8012124 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80051ee:	461a      	mov	r2, r3
 80051f0:	f00c ff98 	bl	8012124 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8005206:	4619      	mov	r1, r3
 8005208:	eeb0 0a67 	vmov.f32	s0, s15
 800520c:	4610      	mov	r0, r2
 800520e:	f00d f803 	bl	8012218 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8005224:	461a      	mov	r2, r3
 8005226:	f00c fbb3 	bl	8011990 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 800523c:	461a      	mov	r2, r3
 800523e:	f00c ff71 	bl	8012124 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8005254:	461a      	mov	r2, r3
 8005256:	f00c ff65 	bl	8012124 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 800526c:	461a      	mov	r2, r3
 800526e:	f00c fb8f 	bl	8011990 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 800527e:	4619      	mov	r1, r3
 8005280:	4610      	mov	r0, r2
 8005282:	f00c fbd8 	bl	8011a36 <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8005298:	461a      	mov	r2, r3
 800529a:	f00c ff43 	bl	8012124 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 80052b0:	461a      	mov	r2, r3
 80052b2:	f00c ff37 	bl	8012124 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 80052c8:	461a      	mov	r2, r3
 80052ca:	f00c ff2b 	bl	8012124 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 80052e0:	461a      	mov	r2, r3
 80052e2:	f00c ffcf 	bl	8012284 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 80052f8:	461a      	mov	r2, r3
 80052fa:	f00c ff13 	bl	8012124 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8005310:	461a      	mov	r2, r3
 8005312:	f00c fb3d 	bl	8011990 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8005328:	461a      	mov	r2, r3
 800532a:	f00c fefb 	bl	8012124 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 800532e:	f107 0310 	add.w	r3, r7, #16
 8005332:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8005336:	2204      	movs	r2, #4
 8005338:	2104      	movs	r1, #4
 800533a:	f00c fb64 	bl	8011a06 <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 800534a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800534e:	4619      	mov	r1, r3
 8005350:	f00c fee8 	bl	8012124 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800535a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800535e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8005362:	4618      	mov	r0, r3
 8005364:	f00c ff8e 	bl	8012284 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8005374:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005378:	4618      	mov	r0, r3
 800537a:	f00c fed3 	bl	8012124 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800538e:	ee07 3a90 	vmov	s15, r3
}
 8005392:	eeb0 0a67 	vmov.f32	s0, s15
 8005396:	3758      	adds	r7, #88	@ 0x58
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 800539c:	b5b0      	push	{r4, r5, r7, lr}
 800539e:	b0a4      	sub	sp, #144	@ 0x90
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6178      	str	r0, [r7, #20]
 80053a4:	6139      	str	r1, [r7, #16]
 80053a6:	60fa      	str	r2, [r7, #12]
 80053a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80053ac:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 80053c0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80053c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053ce:	f04f 0300 	mov.w	r3, #0
 80053d2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 80053de:	f04f 0300 	mov.w	r3, #0
 80053e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053e4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80053e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80053ea:	f04f 0300 	mov.w	r3, #0
 80053ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 80053f6:	4bc6      	ldr	r3, [pc, #792]	@ (8005710 <Kalman_Start+0x374>)
 80053f8:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80053fc:	461d      	mov	r5, r3
 80053fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800540a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800540e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8005412:	f107 031c 	add.w	r3, r7, #28
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	605a      	str	r2, [r3, #4]
 800541c:	609a      	str	r2, [r3, #8]
 800541e:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 800542a:	2300      	movs	r3, #0
 800542c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005430:	e028      	b.n	8005484 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8005432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	4413      	add	r3, r2
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	6979      	ldr	r1, [r7, #20]
 8005440:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005444:	3314      	adds	r3, #20
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 800544c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	3390      	adds	r3, #144	@ 0x90
 8005454:	443b      	add	r3, r7
 8005456:	3b64      	subs	r3, #100	@ 0x64
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	6979      	ldr	r1, [r7, #20]
 800545c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005460:	3398      	adds	r3, #152	@ 0x98
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800546e:	3304      	adds	r3, #4
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 800547a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800547e:	3301      	adds	r3, #1
 8005480:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005484:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005488:	2b0f      	cmp	r3, #15
 800548a:	ddd2      	ble.n	8005432 <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 800548c:	2300      	movs	r3, #0
 800548e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005492:	e03a      	b.n	800550a <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8005494:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	3390      	adds	r3, #144	@ 0x90
 800549c:	443b      	add	r3, r7
 800549e:	3b74      	subs	r3, #116	@ 0x74
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	6979      	ldr	r1, [r7, #20]
 80054a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 80054ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4413      	add	r3, r2
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	6979      	ldr	r1, [r7, #20]
 80054bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054c0:	3324      	adds	r3, #36	@ 0x24
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	440b      	add	r3, r1
 80054c6:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 80054c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	3390      	adds	r3, #144	@ 0x90
 80054d0:	443b      	add	r3, r7
 80054d2:	3b14      	subs	r3, #20
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	6979      	ldr	r1, [r7, #20]
 80054d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054dc:	3328      	adds	r3, #40	@ 0x28
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 80054e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	3390      	adds	r3, #144	@ 0x90
 80054ec:	443b      	add	r3, r7
 80054ee:	3b24      	subs	r3, #36	@ 0x24
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	6979      	ldr	r1, [r7, #20]
 80054f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054f8:	332c      	adds	r3, #44	@ 0x2c
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	440b      	add	r3, r1
 80054fe:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8005500:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005504:	3301      	adds	r3, #1
 8005506:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800550a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800550e:	2b03      	cmp	r3, #3
 8005510:	ddc0      	ble.n	8005494 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	2201      	movs	r2, #1
 800551c:	2104      	movs	r1, #4
 800551e:	f00c fa72 	bl	8011a06 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	3310      	adds	r3, #16
 800552c:	2204      	movs	r2, #4
 800552e:	2104      	movs	r1, #4
 8005530:	f00c fa69 	bl	8011a06 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	3350      	adds	r3, #80	@ 0x50
 800553e:	2204      	movs	r2, #4
 8005540:	2104      	movs	r1, #4
 8005542:	f00c fa60 	bl	8011a06 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	3390      	adds	r3, #144	@ 0x90
 8005550:	2201      	movs	r2, #1
 8005552:	2104      	movs	r1, #4
 8005554:	f00c fa57 	bl	8011a06 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	33a0      	adds	r3, #160	@ 0xa0
 8005562:	2204      	movs	r2, #4
 8005564:	2101      	movs	r1, #1
 8005566:	f00c fa4e 	bl	8011a06 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	33b0      	adds	r3, #176	@ 0xb0
 8005574:	2201      	movs	r2, #1
 8005576:	2104      	movs	r1, #4
 8005578:	f00c fa45 	bl	8011a06 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	33c8      	adds	r3, #200	@ 0xc8
 8005586:	2204      	movs	r2, #4
 8005588:	2104      	movs	r1, #4
 800558a:	f00c fa3c 	bl	8011a06 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800559a:	2201      	movs	r2, #1
 800559c:	2104      	movs	r1, #4
 800559e:	f00c fa32 	bl	8011a06 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80055ae:	2204      	movs	r2, #4
 80055b0:	2101      	movs	r1, #1
 80055b2:	f00c fa28 	bl	8011a06 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80055c2:	2204      	movs	r2, #4
 80055c4:	2104      	movs	r1, #4
 80055c6:	f00c fa1e 	bl	8011a06 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80055d6:	2204      	movs	r2, #4
 80055d8:	2104      	movs	r1, #4
 80055da:	f00c fa14 	bl	8011a06 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80055ea:	2201      	movs	r2, #1
 80055ec:	2104      	movs	r1, #4
 80055ee:	f00c fa0a 	bl	8011a06 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80055fe:	2201      	movs	r2, #1
 8005600:	2104      	movs	r1, #4
 8005602:	f00c fa00 	bl	8011a06 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8005612:	2204      	movs	r2, #4
 8005614:	2101      	movs	r1, #1
 8005616:	f00c f9f6 	bl	8011a06 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8005626:	2201      	movs	r2, #1
 8005628:	2101      	movs	r1, #1
 800562a:	f00c f9ec 	bl	8011a06 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800563a:	2201      	movs	r2, #1
 800563c:	2101      	movs	r1, #1
 800563e:	f00c f9e2 	bl	8011a06 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800564e:	2201      	movs	r2, #1
 8005650:	2104      	movs	r1, #4
 8005652:	f00c f9d8 	bl	8011a06 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005662:	2201      	movs	r2, #1
 8005664:	2104      	movs	r1, #4
 8005666:	f00c f9ce 	bl	8011a06 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8005676:	2201      	movs	r2, #1
 8005678:	2101      	movs	r1, #1
 800567a:	f00c f9c4 	bl	8011a06 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800568a:	2201      	movs	r2, #1
 800568c:	2101      	movs	r1, #1
 800568e:	f00c f9ba 	bl	8011a06 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800569e:	2201      	movs	r2, #1
 80056a0:	2101      	movs	r1, #1
 80056a2:	f00c f9b0 	bl	8011a06 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80056b2:	2201      	movs	r2, #1
 80056b4:	2104      	movs	r1, #4
 80056b6:	f00c f9a6 	bl	8011a06 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80056c6:	2201      	movs	r2, #1
 80056c8:	2101      	movs	r1, #1
 80056ca:	f00c f99c 	bl	8011a06 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80056da:	2204      	movs	r2, #4
 80056dc:	2104      	movs	r1, #4
 80056de:	f00c f992 	bl	8011a06 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	33c4      	adds	r3, #196	@ 0xc4
 80056ec:	2201      	movs	r2, #1
 80056ee:	2101      	movs	r1, #1
 80056f0:	f00c f989 	bl	8011a06 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8005700:	2201      	movs	r2, #1
 8005702:	2101      	movs	r1, #1
 8005704:	f00c f97f 	bl	8011a06 <arm_mat_init_f32>
}
 8005708:	bf00      	nop
 800570a:	3790      	adds	r7, #144	@ 0x90
 800570c:	46bd      	mov	sp, r7
 800570e:	bdb0      	pop	{r4, r5, r7, pc}
 8005710:	080143b8 	.word	0x080143b8

08005714 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005718:	f3bf 8f4f 	dsb	sy
}
 800571c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800571e:	4b06      	ldr	r3, [pc, #24]	@ (8005738 <__NVIC_SystemReset+0x24>)
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005726:	4904      	ldr	r1, [pc, #16]	@ (8005738 <__NVIC_SystemReset+0x24>)
 8005728:	4b04      	ldr	r3, [pc, #16]	@ (800573c <__NVIC_SystemReset+0x28>)
 800572a:	4313      	orrs	r3, r2
 800572c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800572e:	f3bf 8f4f 	dsb	sy
}
 8005732:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005734:	bf00      	nop
 8005736:	e7fd      	b.n	8005734 <__NVIC_SystemReset+0x20>
 8005738:	e000ed00 	.word	0xe000ed00
 800573c:	05fa0004 	.word	0x05fa0004

08005740 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005746:	f004 fdec 	bl	800a322 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800574a:	f000 f88d 	bl	8005868 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800574e:	f7ff fbdf 	bl	8004f10 <MX_GPIO_Init>
	MX_DMA_Init();
 8005752:	f7ff fb93 	bl	8004e7c <MX_DMA_Init>
	MX_ADC1_Init();
 8005756:	f7ff fa85 	bl	8004c64 <MX_ADC1_Init>
	MX_TIM2_Init();
 800575a:	f003 fff7 	bl	800974c <MX_TIM2_Init>
	MX_TIM3_Init();
 800575e:	f004 f843 	bl	80097e8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8005762:	f004 f897 	bl	8009894 <MX_TIM4_Init>
	MX_TIM5_Init();
 8005766:	f004 f8eb 	bl	8009940 <MX_TIM5_Init>
	MX_TIM8_Init();
 800576a:	f004 f93f 	bl	80099ec <MX_TIM8_Init>
	MX_USART2_UART_Init();
 800576e:	f004 fc01 	bl	8009f74 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8005772:	f004 f9f9 	bl	8009b68 <MX_TIM16_Init>
	MX_TIM1_Init();
 8005776:	f003 ff55 	bl	8009624 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 800577a:	f004 fbb1 	bl	8009ee0 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 800577e:	f003 f8cb 	bl	8008918 <plotter_begin>

	prismatic_axis.position = prismatic_encoder.mm;
 8005782:	4b28      	ldr	r3, [pc, #160]	@ (8005824 <main+0xe4>)
 8005784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005786:	4a28      	ldr	r2, [pc, #160]	@ (8005828 <main+0xe8>)
 8005788:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 800578a:	4b28      	ldr	r3, [pc, #160]	@ (800582c <main+0xec>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578e:	4a28      	ldr	r2, [pc, #160]	@ (8005830 <main+0xf0>)
 8005790:	6013      	str	r3, [r2, #0]

	safety_state = SAFETY_NORMAL;
 8005792:	4b28      	ldr	r3, [pc, #160]	@ (8005834 <main+0xf4>)
 8005794:	2200      	movs	r2, #0
 8005796:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8005798:	4b27      	ldr	r3, [pc, #156]	@ (8005838 <main+0xf8>)
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
	pilot_light_state = false;
 800579e:	4b27      	ldr	r3, [pc, #156]	@ (800583c <main+0xfc>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 80057a4:	4b26      	ldr	r3, [pc, #152]	@ (8005840 <main+0x100>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]
	position_control_tick = 0;
 80057aa:	4b26      	ldr	r3, [pc, #152]	@ (8005844 <main+0x104>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	601a      	str	r2, [r3, #0]

	if (first_startup) {
 80057b0:	4b25      	ldr	r3, [pc, #148]	@ (8005848 <main+0x108>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d032      	beq.n	800581e <main+0xde>
		// Check if already at home position
		bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 80057b8:	2101      	movs	r1, #1
 80057ba:	4824      	ldr	r0, [pc, #144]	@ (800584c <main+0x10c>)
 80057bc:	f007 f85e 	bl	800c87c <HAL_GPIO_ReadPin>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	bf14      	ite	ne
 80057c6:	2301      	movne	r3, #1
 80057c8:	2300      	moveq	r3, #0
 80057ca:	71fb      	strb	r3, [r7, #7]
		UPPER_PHOTO_Pin);
		bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 80057cc:	2140      	movs	r1, #64	@ 0x40
 80057ce:	481f      	ldr	r0, [pc, #124]	@ (800584c <main+0x10c>)
 80057d0:	f007 f854 	bl	800c87c <HAL_GPIO_ReadPin>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	bf14      	ite	ne
 80057da:	2301      	movne	r3, #1
 80057dc:	2300      	moveq	r3, #0
 80057de:	71bb      	strb	r3, [r7, #6]

		if (up_photo_detected && prox_detected) {
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d018      	beq.n	8005818 <main+0xd8>
 80057e6:	79bb      	ldrb	r3, [r7, #6]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d015      	beq.n	8005818 <main+0xd8>
			// Already at home position - no need to home
			first_startup = false;
 80057ec:	4b16      	ldr	r3, [pc, #88]	@ (8005848 <main+0x108>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
			homing_active = false;
 80057f2:	4b17      	ldr	r3, [pc, #92]	@ (8005850 <main+0x110>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80057f8:	4b16      	ldr	r3, [pc, #88]	@ (8005854 <main+0x114>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	701a      	strb	r2, [r3, #0]

			// Clear any sensor flags
			up_photo = false;
 80057fe:	4b16      	ldr	r3, [pc, #88]	@ (8005858 <main+0x118>)
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005804:	4b15      	ldr	r3, [pc, #84]	@ (800585c <main+0x11c>)
 8005806:	2200      	movs	r2, #0
 8005808:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 800580a:	4b15      	ldr	r3, [pc, #84]	@ (8005860 <main+0x120>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 8005810:	4b14      	ldr	r3, [pc, #80]	@ (8005864 <main+0x124>)
 8005812:	2200      	movs	r2, #0
 8005814:	701a      	strb	r2, [r3, #0]
 8005816:	e002      	b.n	800581e <main+0xde>

		} else {
			start_homing_sequence(true);
 8005818:	2001      	movs	r0, #1
 800581a:	f000 f871 	bl	8005900 <start_homing_sequence>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		handle_b2_button_polling();
 800581e:	f002 fceb 	bl	80081f8 <handle_b2_button_polling>
 8005822:	e7fc      	b.n	800581e <main+0xde>
 8005824:	200006a0 	.word	0x200006a0
 8005828:	20000480 	.word	0x20000480
 800582c:	200006fc 	.word	0x200006fc
 8005830:	200004c4 	.word	0x200004c4
 8005834:	2000056c 	.word	0x2000056c
 8005838:	20000575 	.word	0x20000575
 800583c:	20000574 	.word	0x20000574
 8005840:	20000570 	.word	0x20000570
 8005844:	20000578 	.word	0x20000578
 8005848:	20000333 	.word	0x20000333
 800584c:	48000400 	.word	0x48000400
 8005850:	2000056b 	.word	0x2000056b
 8005854:	2000056a 	.word	0x2000056a
 8005858:	20000568 	.word	0x20000568
 800585c:	20000569 	.word	0x20000569
 8005860:	20000564 	.word	0x20000564
 8005864:	20000508 	.word	0x20000508

08005868 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b094      	sub	sp, #80	@ 0x50
 800586c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800586e:	f107 0318 	add.w	r3, r7, #24
 8005872:	2238      	movs	r2, #56	@ 0x38
 8005874:	2100      	movs	r1, #0
 8005876:	4618      	mov	r0, r3
 8005878:	f00c fe36 	bl	80124e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800587c:	1d3b      	adds	r3, r7, #4
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	605a      	str	r2, [r3, #4]
 8005884:	609a      	str	r2, [r3, #8]
 8005886:	60da      	str	r2, [r3, #12]
 8005888:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800588a:	2000      	movs	r0, #0
 800588c:	f007 f858 	bl	800c940 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005890:	2302      	movs	r3, #2
 8005892:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005894:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005898:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800589a:	2340      	movs	r3, #64	@ 0x40
 800589c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800589e:	2302      	movs	r3, #2
 80058a0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80058a2:	2302      	movs	r3, #2
 80058a4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80058a6:	2304      	movs	r3, #4
 80058a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80058aa:	2355      	movs	r3, #85	@ 0x55
 80058ac:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80058ae:	2302      	movs	r3, #2
 80058b0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80058b2:	2302      	movs	r3, #2
 80058b4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80058b6:	2302      	movs	r3, #2
 80058b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80058ba:	f107 0318 	add.w	r3, r7, #24
 80058be:	4618      	mov	r0, r3
 80058c0:	f007 f8f2 	bl	800caa8 <HAL_RCC_OscConfig>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <SystemClock_Config+0x66>
		Error_Handler();
 80058ca:	f003 f81d 	bl	8008908 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80058ce:	230f      	movs	r3, #15
 80058d0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058d2:	2303      	movs	r3, #3
 80058d4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058d6:	2300      	movs	r3, #0
 80058d8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80058da:	2300      	movs	r3, #0
 80058dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80058e2:	1d3b      	adds	r3, r7, #4
 80058e4:	2104      	movs	r1, #4
 80058e6:	4618      	mov	r0, r3
 80058e8:	f007 fbf0 	bl	800d0cc <HAL_RCC_ClockConfig>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <SystemClock_Config+0x8e>
		Error_Handler();
 80058f2:	f003 f809 	bl	8008908 <Error_Handler>
	}
}
 80058f6:	bf00      	nop
 80058f8:	3750      	adds	r7, #80	@ 0x50
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	4603      	mov	r3, r0
 8005908:	71fb      	strb	r3, [r7, #7]
	//modbus set home state
	registerFrame[R_Theta_Status].U16 = 1;
 800590a:	4b52      	ldr	r3, [pc, #328]	@ (8005a54 <start_homing_sequence+0x154>)
 800590c:	2201      	movs	r2, #1
 800590e:	841a      	strh	r2, [r3, #32]
	if (homing_active)
 8005910:	4b51      	ldr	r3, [pc, #324]	@ (8005a58 <start_homing_sequence+0x158>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	f040 8098 	bne.w	8005a4a <start_homing_sequence+0x14a>
		return;

	// Check current sensor states
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 800591a:	2101      	movs	r1, #1
 800591c:	484f      	ldr	r0, [pc, #316]	@ (8005a5c <start_homing_sequence+0x15c>)
 800591e:	f006 ffad 	bl	800c87c <HAL_GPIO_ReadPin>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	bf14      	ite	ne
 8005928:	2301      	movne	r3, #1
 800592a:	2300      	moveq	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
	UPPER_PHOTO_Pin);
	bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 800592e:	2140      	movs	r1, #64	@ 0x40
 8005930:	484a      	ldr	r0, [pc, #296]	@ (8005a5c <start_homing_sequence+0x15c>)
 8005932:	f006 ffa3 	bl	800c87c <HAL_GPIO_ReadPin>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	bf14      	ite	ne
 800593c:	2301      	movne	r3, #1
 800593e:	2300      	moveq	r3, #0
 8005940:	73bb      	strb	r3, [r7, #14]

	// Different logic for startup vs manual homing
	if (is_startup || first_startup) {
 8005942:	79fb      	ldrb	r3, [r7, #7]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <start_homing_sequence+0x50>
 8005948:	4b45      	ldr	r3, [pc, #276]	@ (8005a60 <start_homing_sequence+0x160>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d02e      	beq.n	80059ae <start_homing_sequence+0xae>
		// STARTUP LOGIC: Skip homing if already at home position
		if (up_photo_detected && prox_detected) {
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d018      	beq.n	8005988 <start_homing_sequence+0x88>
 8005956:	7bbb      	ldrb	r3, [r7, #14]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d015      	beq.n	8005988 <start_homing_sequence+0x88>
			// Already at home position - no need to home
			homing_active = false;
 800595c:	4b3e      	ldr	r3, [pc, #248]	@ (8005a58 <start_homing_sequence+0x158>)
 800595e:	2200      	movs	r2, #0
 8005960:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 8005962:	4b40      	ldr	r3, [pc, #256]	@ (8005a64 <start_homing_sequence+0x164>)
 8005964:	2200      	movs	r2, #0
 8005966:	701a      	strb	r2, [r3, #0]
			first_startup = false;
 8005968:	4b3d      	ldr	r3, [pc, #244]	@ (8005a60 <start_homing_sequence+0x160>)
 800596a:	2200      	movs	r2, #0
 800596c:	701a      	strb	r2, [r3, #0]

			// Clear sensor flags
			up_photo = false;
 800596e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a68 <start_homing_sequence+0x168>)
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005974:	4b3d      	ldr	r3, [pc, #244]	@ (8005a6c <start_homing_sequence+0x16c>)
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 800597a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a70 <start_homing_sequence+0x170>)
 800597c:	2200      	movs	r2, #0
 800597e:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 8005980:	4b3c      	ldr	r3, [pc, #240]	@ (8005a74 <start_homing_sequence+0x174>)
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]
			return;
 8005986:	e061      	b.n	8005a4c <start_homing_sequence+0x14c>
		}

		// Not at home - start startup homing sequence (skip zero degrees)
		homing_active = true;
 8005988:	4b33      	ldr	r3, [pc, #204]	@ (8005a58 <start_homing_sequence+0x158>)
 800598a:	2201      	movs	r2, #1
 800598c:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 800598e:	4b39      	ldr	r3, [pc, #228]	@ (8005a74 <start_homing_sequence+0x174>)
 8005990:	2200      	movs	r2, #0
 8005992:	701a      	strb	r2, [r3, #0]
		prox_count = 0;
 8005994:	4b36      	ldr	r3, [pc, #216]	@ (8005a70 <start_homing_sequence+0x170>)
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
		up_photo = false;
 800599a:	4b33      	ldr	r3, [pc, #204]	@ (8005a68 <start_homing_sequence+0x168>)
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]
		low_photo = false;
 80059a0:	4b32      	ldr	r3, [pc, #200]	@ (8005a6c <start_homing_sequence+0x16c>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	701a      	strb	r2, [r3, #0]
		homing_state = HOMING_PEN_UP;
 80059a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005a64 <start_homing_sequence+0x164>)
 80059a8:	2201      	movs	r2, #1
 80059aa:	701a      	strb	r2, [r3, #0]
 80059ac:	e04e      	b.n	8005a4c <start_homing_sequence+0x14c>

	} else {
		// MANUAL HOMING LOGIC: More sophisticated behavior
		if (up_photo_detected && prox_detected) {
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d018      	beq.n	80059e6 <start_homing_sequence+0xe6>
 80059b4:	7bbb      	ldrb	r3, [r7, #14]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d015      	beq.n	80059e6 <start_homing_sequence+0xe6>
			// Already perfectly homed - skip homing completely
			homing_active = false;
 80059ba:	4b27      	ldr	r3, [pc, #156]	@ (8005a58 <start_homing_sequence+0x158>)
 80059bc:	2200      	movs	r2, #0
 80059be:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80059c0:	4b28      	ldr	r3, [pc, #160]	@ (8005a64 <start_homing_sequence+0x164>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	701a      	strb	r2, [r3, #0]
			first_startup = false;  // ← ADDED THIS LINE
 80059c6:	4b26      	ldr	r3, [pc, #152]	@ (8005a60 <start_homing_sequence+0x160>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	701a      	strb	r2, [r3, #0]
			up_photo = false;
 80059cc:	4b26      	ldr	r3, [pc, #152]	@ (8005a68 <start_homing_sequence+0x168>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80059d2:	4b26      	ldr	r3, [pc, #152]	@ (8005a6c <start_homing_sequence+0x16c>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80059d8:	4b25      	ldr	r3, [pc, #148]	@ (8005a70 <start_homing_sequence+0x170>)
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80059de:	4b25      	ldr	r3, [pc, #148]	@ (8005a74 <start_homing_sequence+0x174>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
			return;
 80059e4:	e032      	b.n	8005a4c <start_homing_sequence+0x14c>
			 up_photo = false;
			 low_photo = false;
			 homing_state = HOMING_REV_TO_ZERO_DEG;
			 rev_to_zero_trajectory_started = false;
			 */
		} else if (up_photo_detected && !prox_detected) {
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01b      	beq.n	8005a24 <start_homing_sequence+0x124>
 80059ec:	7bbb      	ldrb	r3, [r7, #14]
 80059ee:	f083 0301 	eor.w	r3, r3, #1
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d015      	beq.n	8005a24 <start_homing_sequence+0x124>
			// At up photo but not at prox - go to zero degrees first
			homing_active = true;
 80059f8:	4b17      	ldr	r3, [pc, #92]	@ (8005a58 <start_homing_sequence+0x158>)
 80059fa:	2201      	movs	r2, #1
 80059fc:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80059fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005a74 <start_homing_sequence+0x174>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005a04:	4b1a      	ldr	r3, [pc, #104]	@ (8005a70 <start_homing_sequence+0x170>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	601a      	str	r2, [r3, #0]
			up_photo = false;
 8005a0a:	4b17      	ldr	r3, [pc, #92]	@ (8005a68 <start_homing_sequence+0x168>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005a10:	4b16      	ldr	r3, [pc, #88]	@ (8005a6c <start_homing_sequence+0x16c>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_REV_TO_ZERO_DEG;
 8005a16:	4b13      	ldr	r3, [pc, #76]	@ (8005a64 <start_homing_sequence+0x164>)
 8005a18:	2207      	movs	r2, #7
 8005a1a:	701a      	strb	r2, [r3, #0]
			rev_to_zero_trajectory_started = false;
 8005a1c:	4b16      	ldr	r3, [pc, #88]	@ (8005a78 <start_homing_sequence+0x178>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	e013      	b.n	8005a4c <start_homing_sequence+0x14c>
		} else {
			// Not at up photo - start full homing sequence
			homing_active = true;
 8005a24:	4b0c      	ldr	r3, [pc, #48]	@ (8005a58 <start_homing_sequence+0x158>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 8005a2a:	4b12      	ldr	r3, [pc, #72]	@ (8005a74 <start_homing_sequence+0x174>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005a30:	4b0f      	ldr	r3, [pc, #60]	@ (8005a70 <start_homing_sequence+0x170>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	601a      	str	r2, [r3, #0]
			up_photo = false;
 8005a36:	4b0c      	ldr	r3, [pc, #48]	@ (8005a68 <start_homing_sequence+0x168>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a6c <start_homing_sequence+0x16c>)
 8005a3e:	2200      	movs	r2, #0
 8005a40:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_PEN_UP;
 8005a42:	4b08      	ldr	r3, [pc, #32]	@ (8005a64 <start_homing_sequence+0x164>)
 8005a44:	2201      	movs	r2, #1
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	e000      	b.n	8005a4c <start_homing_sequence+0x14c>
		return;
 8005a4a:	bf00      	nop
		}
	}
}
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	200012a4 	.word	0x200012a4
 8005a58:	2000056b 	.word	0x2000056b
 8005a5c:	48000400 	.word	0x48000400
 8005a60:	20000333 	.word	0x20000333
 8005a64:	2000056a 	.word	0x2000056a
 8005a68:	20000568 	.word	0x20000568
 8005a6c:	20000569 	.word	0x20000569
 8005a70:	20000564 	.word	0x20000564
 8005a74:	20000508 	.word	0x20000508
 8005a78:	20000576 	.word	0x20000576

08005a7c <update_homing_sequence>:

void update_homing_sequence(void) {
 8005a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a80:	ed2d 8b02 	vpush	{d8}
 8005a84:	b08b      	sub	sp, #44	@ 0x2c
 8005a86:	af00      	add	r7, sp, #0
	if (!homing_active)
 8005a88:	4b95      	ldr	r3, [pc, #596]	@ (8005ce0 <update_homing_sequence+0x264>)
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	f083 0301 	eor.w	r3, r3, #1
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f040 8335 	bne.w	8006102 <update_homing_sequence+0x686>
		return;

	switch (homing_state) {
 8005a98:	4b92      	ldr	r3, [pc, #584]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	2b0a      	cmp	r3, #10
 8005aa0:	f200 8331 	bhi.w	8006106 <update_homing_sequence+0x68a>
 8005aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8005aac <update_homing_sequence+0x30>)
 8005aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aaa:	bf00      	nop
 8005aac:	08005ad9 	.word	0x08005ad9
 8005ab0:	08005afb 	.word	0x08005afb
 8005ab4:	08005b67 	.word	0x08005b67
 8005ab8:	08005cb3 	.word	0x08005cb3
 8005abc:	08005d25 	.word	0x08005d25
 8005ac0:	08005e69 	.word	0x08005e69
 8005ac4:	08005ee1 	.word	0x08005ee1
 8005ac8:	08005f2b 	.word	0x08005f2b
 8005acc:	08005fcd 	.word	0x08005fcd
 8005ad0:	080060d3 	.word	0x080060d3
 8005ad4:	080060ff 	.word	0x080060ff
	case HOMING_PEN_UP:
		// Ensure pen is up
		plotter_pen_up();
 8005ad8:	f003 fb90 	bl	80091fc <plotter_pen_up>
		prismatic_axis.command_pos = 0.0f;
 8005adc:	4b82      	ldr	r3, [pc, #520]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005ade:	f04f 0200 	mov.w	r2, #0
 8005ae2:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005ae4:	4b81      	ldr	r3, [pc, #516]	@ (8005cec <update_homing_sequence+0x270>)
 8005ae6:	f04f 0200 	mov.w	r2, #0
 8005aea:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer = 0;
 8005aec:	4b80      	ldr	r3, [pc, #512]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	601a      	str	r2, [r3, #0]
		homing_state = HOMING_DELAY_AFTER_PEN_UP;
 8005af2:	4b7c      	ldr	r3, [pc, #496]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005af4:	2202      	movs	r2, #2
 8005af6:	701a      	strb	r2, [r3, #0]
		break;
 8005af8:	e318      	b.n	800612c <update_homing_sequence+0x6b0>

	case HOMING_DELAY_AFTER_PEN_UP:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005afa:	4b7b      	ldr	r3, [pc, #492]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005b02:	4b7a      	ldr	r3, [pc, #488]	@ (8005cec <update_homing_sequence+0x270>)
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005b0a:	4b79      	ldr	r3, [pc, #484]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	4a77      	ldr	r2, [pc, #476]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005b12:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005b14:	4b76      	ldr	r3, [pc, #472]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005b1c:	f0c0 82f5 	bcc.w	800610a <update_homing_sequence+0x68e>
			// Check if already at low photo sensor
			low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8005b20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005b24:	4873      	ldr	r0, [pc, #460]	@ (8005cf4 <update_homing_sequence+0x278>)
 8005b26:	f006 fea9 	bl	800c87c <HAL_GPIO_ReadPin>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	bf14      	ite	ne
 8005b30:	2301      	movne	r3, #1
 8005b32:	2300      	moveq	r3, #0
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	4b70      	ldr	r3, [pc, #448]	@ (8005cf8 <update_homing_sequence+0x27c>)
 8005b38:	701a      	strb	r2, [r3, #0]
			LOWER_PHOTO_Pin);

			if (low_photo) {
 8005b3a:	4b6f      	ldr	r3, [pc, #444]	@ (8005cf8 <update_homing_sequence+0x27c>)
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00c      	beq.n	8005b5e <update_homing_sequence+0xe2>
				// Already at low photo, skip moving down and go directly to delay
				motion_delay_timer = 0;
 8005b44:	4b6a      	ldr	r3, [pc, #424]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005b4a:	4b66      	ldr	r3, [pc, #408]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	701a      	strb	r2, [r3, #0]
				low_photo = false; // Reset flag
 8005b50:	4b69      	ldr	r3, [pc, #420]	@ (8005cf8 <update_homing_sequence+0x27c>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
				up_photo = false;  // Reset for next detection
 8005b56:	4b69      	ldr	r3, [pc, #420]	@ (8005cfc <update_homing_sequence+0x280>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	701a      	strb	r2, [r3, #0]
			} else {
				// Not at low photo, need to move down
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
			}
		}
		break;
 8005b5c:	e2d5      	b.n	800610a <update_homing_sequence+0x68e>
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 8005b5e:	4b61      	ldr	r3, [pc, #388]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005b60:	2203      	movs	r2, #3
 8005b62:	701a      	strb	r2, [r3, #0]
		break;
 8005b64:	e2d1      	b.n	800610a <update_homing_sequence+0x68e>

	case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
		// Move prismatic down at constant velocity
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005b66:	4b60      	ldr	r3, [pc, #384]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005b68:	edd3 7a07 	vldr	s15, [r3, #28]
 8005b6c:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8005d00 <update_homing_sequence+0x284>
 8005b70:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
 8005b74:	4b5c      	ldr	r3, [pc, #368]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005b76:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005b7a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005b7c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b80:	eeb0 0a67 	vmov.f32	s0, s15
 8005b84:	485f      	ldr	r0, [pc, #380]	@ (8005d04 <update_homing_sequence+0x288>)
 8005b86:	f7fb fb47 	bl	8001218 <PID_CONTROLLER_Compute>
 8005b8a:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005b8e:	4b5e      	ldr	r3, [pc, #376]	@ (8005d08 <update_homing_sequence+0x28c>)
 8005b90:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005b94:	4610      	mov	r0, r2
 8005b96:	4619      	mov	r1, r3
 8005b98:	f7fa ff94 	bl	8000ac4 <__aeabi_d2iz>
 8005b9c:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005b9e:	4b5a      	ldr	r3, [pc, #360]	@ (8005d08 <update_homing_sequence+0x28c>)
 8005ba0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005ba4:	613a      	str	r2, [r7, #16]
 8005ba6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005baa:	617b      	str	r3, [r7, #20]
		prismatic_axis.command_pos = PWM_Satuation(
 8005bac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005bb0:	f7fa ff88 	bl	8000ac4 <__aeabi_d2iz>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4620      	mov	r0, r4
 8005bba:	eeb0 0a48 	vmov.f32	s0, s16
 8005bbe:	f7fb fac9 	bl	8001154 <PWM_Satuation>
 8005bc2:	ee07 0a90 	vmov	s15, r0
 8005bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bca:	4b47      	ldr	r3, [pc, #284]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005bcc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005bd0:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005bd4:	484d      	ldr	r0, [pc, #308]	@ (8005d0c <update_homing_sequence+0x290>)
 8005bd6:	f7fb fe5f 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 8005bda:	eef0 7a40 	vmov.f32	s15, s0
 8005bde:	4b42      	ldr	r3, [pc, #264]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005be0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005be4:	4b4a      	ldr	r3, [pc, #296]	@ (8005d10 <update_homing_sequence+0x294>)
 8005be6:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005bea:	4b4a      	ldr	r3, [pc, #296]	@ (8005d14 <update_homing_sequence+0x298>)
 8005bec:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005bf0:	ed9f 6a49 	vldr	s12, [pc, #292]	@ 8005d18 <update_homing_sequence+0x29c>
 8005bf4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005bf8:	eeb0 1a66 	vmov.f32	s2, s13
 8005bfc:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8005d1c <update_homing_sequence+0x2a0>
 8005c00:	eeb0 0a47 	vmov.f32	s0, s14
 8005c04:	4846      	ldr	r0, [pc, #280]	@ (8005d20 <update_homing_sequence+0x2a4>)
 8005c06:	f7fb feef 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 8005c0a:	eef0 7a40 	vmov.f32	s15, s0
 8005c0e:	4b36      	ldr	r3, [pc, #216]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c10:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005c14:	4b34      	ldr	r3, [pc, #208]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c16:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005c1a:	4b33      	ldr	r3, [pc, #204]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c1c:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005c20:	4b31      	ldr	r3, [pc, #196]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c22:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c30:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c34:	4b2c      	ldr	r3, [pc, #176]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c36:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005c3a:	4b33      	ldr	r3, [pc, #204]	@ (8005d08 <update_homing_sequence+0x28c>)
 8005c3c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c40:	4610      	mov	r0, r2
 8005c42:	4619      	mov	r1, r3
 8005c44:	f7fa ff3e 	bl	8000ac4 <__aeabi_d2iz>
 8005c48:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005d08 <update_homing_sequence+0x28c>)
 8005c4c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005c50:	60ba      	str	r2, [r7, #8]
 8005c52:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005c56:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c5c:	f7fa ff32 	bl	8000ac4 <__aeabi_d2iz>
 8005c60:	4603      	mov	r3, r0
 8005c62:	4619      	mov	r1, r3
 8005c64:	4620      	mov	r0, r4
 8005c66:	eeb0 0a48 	vmov.f32	s0, s16
 8005c6a:	f7fb fa73 	bl	8001154 <PWM_Satuation>
 8005c6e:	ee07 0a90 	vmov	s15, r0
 8005c72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c76:	4b1c      	ldr	r3, [pc, #112]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c78:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (low_photo) {
 8005c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8005cf8 <update_homing_sequence+0x27c>)
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 8243 	beq.w	800610e <update_homing_sequence+0x692>
			// Found low photo, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005c88:	4b17      	ldr	r3, [pc, #92]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005c8a:	f04f 0200 	mov.w	r2, #0
 8005c8e:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005c90:	4b16      	ldr	r3, [pc, #88]	@ (8005cec <update_homing_sequence+0x270>)
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005c98:	4b15      	ldr	r3, [pc, #84]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005c9e:	4b11      	ldr	r3, [pc, #68]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005ca0:	2204      	movs	r2, #4
 8005ca2:	701a      	strb	r2, [r3, #0]
			low_photo = false; // Reset flag after use
 8005ca4:	4b14      	ldr	r3, [pc, #80]	@ (8005cf8 <update_homing_sequence+0x27c>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
			up_photo = false;  // Reset for next detection
 8005caa:	4b14      	ldr	r3, [pc, #80]	@ (8005cfc <update_homing_sequence+0x280>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005cb0:	e22d      	b.n	800610e <update_homing_sequence+0x692>

	case HOMING_DELAY_AFTER_LOW_PHOTO:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce8 <update_homing_sequence+0x26c>)
 8005cb4:	f04f 0200 	mov.w	r2, #0
 8005cb8:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005cba:	4b0c      	ldr	r3, [pc, #48]	@ (8005cec <update_homing_sequence+0x270>)
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	4a09      	ldr	r2, [pc, #36]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005cca:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005ccc:	4b08      	ldr	r3, [pc, #32]	@ (8005cf0 <update_homing_sequence+0x274>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005cd4:	f0c0 821d 	bcc.w	8006112 <update_homing_sequence+0x696>
			homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 8005cd8:	4b02      	ldr	r3, [pc, #8]	@ (8005ce4 <update_homing_sequence+0x268>)
 8005cda:	2205      	movs	r2, #5
 8005cdc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005cde:	e218      	b.n	8006112 <update_homing_sequence+0x696>
 8005ce0:	2000056b 	.word	0x2000056b
 8005ce4:	2000056a 	.word	0x2000056a
 8005ce8:	20000480 	.word	0x20000480
 8005cec:	200004c4 	.word	0x200004c4
 8005cf0:	20000560 	.word	0x20000560
 8005cf4:	48000400 	.word	0x48000400
 8005cf8:	20000569 	.word	0x20000569
 8005cfc:	20000568 	.word	0x20000568
 8005d00:	437a0000 	.word	0x437a0000
 8005d04:	20000780 	.word	0x20000780
 8005d08:	20000080 	.word	0x20000080
 8005d0c:	20000820 	.word	0x20000820
 8005d10:	200006fc 	.word	0x200006fc
 8005d14:	200006a0 	.word	0x200006a0
 8005d18:	447a0000 	.word	0x447a0000
 8005d1c:	00000000 	.word	0x00000000
 8005d20:	20000824 	.word	0x20000824

	case HOMING_PRIS_UP_TO_UP_PHOTO:
		// Move prismatic up at constant velocity
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005d24:	4b96      	ldr	r3, [pc, #600]	@ (8005f80 <update_homing_sequence+0x504>)
 8005d26:	edd3 7a07 	vldr	s15, [r3, #28]
 8005d2a:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8005f84 <update_homing_sequence+0x508>
 8005d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
 8005d32:	4b93      	ldr	r3, [pc, #588]	@ (8005f80 <update_homing_sequence+0x504>)
 8005d34:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005d38:	4b91      	ldr	r3, [pc, #580]	@ (8005f80 <update_homing_sequence+0x504>)
 8005d3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8005d42:	4891      	ldr	r0, [pc, #580]	@ (8005f88 <update_homing_sequence+0x50c>)
 8005d44:	f7fb fa68 	bl	8001218 <PID_CONTROLLER_Compute>
 8005d48:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005d4c:	4b8f      	ldr	r3, [pc, #572]	@ (8005f8c <update_homing_sequence+0x510>)
 8005d4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005d52:	4610      	mov	r0, r2
 8005d54:	4619      	mov	r1, r3
 8005d56:	f7fa feb5 	bl	8000ac4 <__aeabi_d2iz>
 8005d5a:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005d5c:	4b8b      	ldr	r3, [pc, #556]	@ (8005f8c <update_homing_sequence+0x510>)
 8005d5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005d62:	603a      	str	r2, [r7, #0]
 8005d64:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005d68:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_pos = PWM_Satuation(
 8005d6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d6e:	f7fa fea9 	bl	8000ac4 <__aeabi_d2iz>
 8005d72:	4603      	mov	r3, r0
 8005d74:	4619      	mov	r1, r3
 8005d76:	4620      	mov	r0, r4
 8005d78:	eeb0 0a48 	vmov.f32	s0, s16
 8005d7c:	f7fb f9ea 	bl	8001154 <PWM_Satuation>
 8005d80:	ee07 0a90 	vmov	s15, r0
 8005d84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d88:	4b7d      	ldr	r3, [pc, #500]	@ (8005f80 <update_homing_sequence+0x504>)
 8005d8a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005d8e:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 8005d92:	487f      	ldr	r0, [pc, #508]	@ (8005f90 <update_homing_sequence+0x514>)
 8005d94:	f7fb fd80 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 8005d98:	eef0 7a40 	vmov.f32	s15, s0
 8005d9c:	4b78      	ldr	r3, [pc, #480]	@ (8005f80 <update_homing_sequence+0x504>)
 8005d9e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005da2:	4b7c      	ldr	r3, [pc, #496]	@ (8005f94 <update_homing_sequence+0x518>)
 8005da4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005da8:	4b7b      	ldr	r3, [pc, #492]	@ (8005f98 <update_homing_sequence+0x51c>)
 8005daa:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005dae:	ed9f 6a7b 	vldr	s12, [pc, #492]	@ 8005f9c <update_homing_sequence+0x520>
 8005db2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005db6:	eeb0 1a66 	vmov.f32	s2, s13
 8005dba:	eddf 0a79 	vldr	s1, [pc, #484]	@ 8005fa0 <update_homing_sequence+0x524>
 8005dbe:	eeb0 0a47 	vmov.f32	s0, s14
 8005dc2:	4878      	ldr	r0, [pc, #480]	@ (8005fa4 <update_homing_sequence+0x528>)
 8005dc4:	f7fb fe10 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 8005dc8:	eef0 7a40 	vmov.f32	s15, s0
 8005dcc:	4b6c      	ldr	r3, [pc, #432]	@ (8005f80 <update_homing_sequence+0x504>)
 8005dce:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005dd2:	4b6b      	ldr	r3, [pc, #428]	@ (8005f80 <update_homing_sequence+0x504>)
 8005dd4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005dd8:	4b69      	ldr	r3, [pc, #420]	@ (8005f80 <update_homing_sequence+0x504>)
 8005dda:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005dde:	4b68      	ldr	r3, [pc, #416]	@ (8005f80 <update_homing_sequence+0x504>)
 8005de0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005de4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dec:	4b64      	ldr	r3, [pc, #400]	@ (8005f80 <update_homing_sequence+0x504>)
 8005dee:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005df2:	4b63      	ldr	r3, [pc, #396]	@ (8005f80 <update_homing_sequence+0x504>)
 8005df4:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005df8:	4b64      	ldr	r3, [pc, #400]	@ (8005f8c <update_homing_sequence+0x510>)
 8005dfa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005dfe:	4610      	mov	r0, r2
 8005e00:	4619      	mov	r1, r3
 8005e02:	f7fa fe5f 	bl	8000ac4 <__aeabi_d2iz>
 8005e06:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005e08:	4b60      	ldr	r3, [pc, #384]	@ (8005f8c <update_homing_sequence+0x510>)
 8005e0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005e0e:	4692      	mov	sl, r2
 8005e10:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005e14:	4650      	mov	r0, sl
 8005e16:	4659      	mov	r1, fp
 8005e18:	f7fa fe54 	bl	8000ac4 <__aeabi_d2iz>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	4619      	mov	r1, r3
 8005e20:	4620      	mov	r0, r4
 8005e22:	eeb0 0a48 	vmov.f32	s0, s16
 8005e26:	f7fb f995 	bl	8001154 <PWM_Satuation>
 8005e2a:	ee07 0a90 	vmov	s15, r0
 8005e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e32:	4b53      	ldr	r3, [pc, #332]	@ (8005f80 <update_homing_sequence+0x504>)
 8005e34:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (up_photo) {
 8005e38:	4b5b      	ldr	r3, [pc, #364]	@ (8005fa8 <update_homing_sequence+0x52c>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 8169 	beq.w	8006116 <update_homing_sequence+0x69a>
			// Found up photo, stop and start delay before backup
			prismatic_axis.command_pos = 0.0f;
 8005e44:	4b4e      	ldr	r3, [pc, #312]	@ (8005f80 <update_homing_sequence+0x504>)
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005e4c:	4b57      	ldr	r3, [pc, #348]	@ (8005fac <update_homing_sequence+0x530>)
 8005e4e:	f04f 0200 	mov.w	r2, #0
 8005e52:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005e54:	4b56      	ldr	r3, [pc, #344]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 8005e5a:	4b56      	ldr	r3, [pc, #344]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005e5c:	2206      	movs	r2, #6
 8005e5e:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag after use
 8005e60:	4b51      	ldr	r3, [pc, #324]	@ (8005fa8 <update_homing_sequence+0x52c>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005e66:	e156      	b.n	8006116 <update_homing_sequence+0x69a>

	case HOMING_DELAY_AFTER_UP_PHOTO:
		// Stop motors and wait before starting backup procedure
		prismatic_axis.command_pos = 0.0f;
 8005e68:	4b45      	ldr	r3, [pc, #276]	@ (8005f80 <update_homing_sequence+0x504>)
 8005e6a:	f04f 0200 	mov.w	r2, #0
 8005e6e:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005e70:	4b4e      	ldr	r3, [pc, #312]	@ (8005fac <update_homing_sequence+0x530>)
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005e78:	4b4d      	ldr	r3, [pc, #308]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	4a4c      	ldr	r2, [pc, #304]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005e80:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005e82:	4b4b      	ldr	r3, [pc, #300]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005e8a:	f0c0 8146 	bcc.w	800611a <update_homing_sequence+0x69e>
			if (first_startup) {
 8005e8e:	4b4a      	ldr	r3, [pc, #296]	@ (8005fb8 <update_homing_sequence+0x53c>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01d      	beq.n	8005ed2 <update_homing_sequence+0x456>
				// STARTUP: Check if prox is already detected before searching
				bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005e96:	2140      	movs	r1, #64	@ 0x40
 8005e98:	4848      	ldr	r0, [pc, #288]	@ (8005fbc <update_homing_sequence+0x540>)
 8005e9a:	f006 fcef 	bl	800c87c <HAL_GPIO_ReadPin>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	bf14      	ite	ne
 8005ea4:	2301      	movne	r3, #1
 8005ea6:	2300      	moveq	r3, #0
 8005ea8:	77fb      	strb	r3, [r7, #31]

				if (prox_detected) {
 8005eaa:	7ffb      	ldrb	r3, [r7, #31]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d009      	beq.n	8005ec4 <update_homing_sequence+0x448>
					// Already at prox - skip search and go to completion
					motion_delay_timer = 0;
 8005eb0:	4b3f      	ldr	r3, [pc, #252]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
					homing_state = HOMING_DELAY_AFTER_PROX;
 8005eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005eb8:	220a      	movs	r2, #10
 8005eba:	701a      	strb	r2, [r3, #0]
					prox_count = 1; // Set count to indicate prox found
 8005ebc:	4b40      	ldr	r3, [pc, #256]	@ (8005fc0 <update_homing_sequence+0x544>)
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_REV_TO_ZERO_DEG;
				// Initialize trajectory variables for zero degree movement
				rev_to_zero_trajectory_started = false;
			}
		}
		break;
 8005ec2:	e12a      	b.n	800611a <update_homing_sequence+0x69e>
					homing_state = HOMING_REV_CW_TO_PROX1;
 8005ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005ec6:	2209      	movs	r2, #9
 8005ec8:	701a      	strb	r2, [r3, #0]
					prox_count = 0; // Reset prox counter
 8005eca:	4b3d      	ldr	r3, [pc, #244]	@ (8005fc0 <update_homing_sequence+0x544>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]
		break;
 8005ed0:	e123      	b.n	800611a <update_homing_sequence+0x69e>
				homing_state = HOMING_REV_TO_ZERO_DEG;
 8005ed2:	4b38      	ldr	r3, [pc, #224]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005ed4:	2207      	movs	r2, #7
 8005ed6:	701a      	strb	r2, [r3, #0]
				rev_to_zero_trajectory_started = false;
 8005ed8:	4b3a      	ldr	r3, [pc, #232]	@ (8005fc4 <update_homing_sequence+0x548>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	701a      	strb	r2, [r3, #0]
		break;
 8005ede:	e11c      	b.n	800611a <update_homing_sequence+0x69e>

	case HOMING_REV_TO_ZERO_DEG:
		if (!rev_to_zero_trajectory_started) {
 8005ee0:	4b38      	ldr	r3, [pc, #224]	@ (8005fc4 <update_homing_sequence+0x548>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	f083 0301 	eor.w	r3, r3, #1
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00b      	beq.n	8005f06 <update_homing_sequence+0x48a>
			// Get current prismatic position (keep it where it is)
			float current_pris_pos = prismatic_encoder.mm;
 8005eee:	4b2a      	ldr	r3, [pc, #168]	@ (8005f98 <update_homing_sequence+0x51c>)
 8005ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ef2:	623b      	str	r3, [r7, #32]

			// Start combined trajectory to move revolute to 0° while keeping prismatic position
			start_combined_trajectory(current_pris_pos, 0.0f);
 8005ef4:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8005fa0 <update_homing_sequence+0x524>
 8005ef8:	ed97 0a08 	vldr	s0, [r7, #32]
 8005efc:	f000 fa16 	bl	800632c <start_combined_trajectory>

			rev_to_zero_trajectory_started = true;
 8005f00:	4b30      	ldr	r3, [pc, #192]	@ (8005fc4 <update_homing_sequence+0x548>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	701a      	strb	r2, [r3, #0]
		}

		// Wait for trajectory to complete
		if (motion_sequence_state == MOTION_IDLE) {
 8005f06:	4b30      	ldr	r3, [pc, #192]	@ (8005fc8 <update_homing_sequence+0x54c>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f040 8107 	bne.w	800611e <update_homing_sequence+0x6a2>
			// Trajectory completed, move to next homing state
			motion_delay_timer = 0;
 8005f10:	4b27      	ldr	r3, [pc, #156]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 8005f16:	4b27      	ldr	r3, [pc, #156]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005f18:	2208      	movs	r2, #8
 8005f1a:	701a      	strb	r2, [r3, #0]
			prox_count = 0; // Reset prox counter for next stage
 8005f1c:	4b28      	ldr	r3, [pc, #160]	@ (8005fc0 <update_homing_sequence+0x544>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
			rev_to_zero_trajectory_started = false; // Reset for next time
 8005f22:	4b28      	ldr	r3, [pc, #160]	@ (8005fc4 <update_homing_sequence+0x548>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005f28:	e0f9      	b.n	800611e <update_homing_sequence+0x6a2>

	case HOMING_DELAY_AFTER_ZERO_DEG:
		// Stop motors and wait - let normal control handle this
		motion_delay_timer++;
 8005f2a:	4b21      	ldr	r3, [pc, #132]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	4a1f      	ldr	r2, [pc, #124]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005f32:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005f34:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005f3c:	f0c0 80f1 	bcc.w	8006122 <update_homing_sequence+0x6a6>
			// CHECK IF PROX IS ALREADY DETECTED BEFORE STARTING SEARCH
			bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005f40:	2140      	movs	r1, #64	@ 0x40
 8005f42:	481e      	ldr	r0, [pc, #120]	@ (8005fbc <update_homing_sequence+0x540>)
 8005f44:	f006 fc9a 	bl	800c87c <HAL_GPIO_ReadPin>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bf14      	ite	ne
 8005f4e:	2301      	movne	r3, #1
 8005f50:	2300      	moveq	r3, #0
 8005f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			if (prox_detected) {
 8005f56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d009      	beq.n	8005f72 <update_homing_sequence+0x4f6>
				// Already at proximity sensor - skip search and go directly to completion
				motion_delay_timer = 0;
 8005f5e:	4b14      	ldr	r3, [pc, #80]	@ (8005fb0 <update_homing_sequence+0x534>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_PROX;
 8005f64:	4b13      	ldr	r3, [pc, #76]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005f66:	220a      	movs	r2, #10
 8005f68:	701a      	strb	r2, [r3, #0]
				prox_count = 1; // Set count to indicate prox found
 8005f6a:	4b15      	ldr	r3, [pc, #84]	@ (8005fc0 <update_homing_sequence+0x544>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
				// Not at prox - need to search for it
				homing_state = HOMING_REV_CW_TO_PROX1;
				prox_count = 0; // Reset counter for search
			}
		}
		break;
 8005f70:	e0d7      	b.n	8006122 <update_homing_sequence+0x6a6>
				homing_state = HOMING_REV_CW_TO_PROX1;
 8005f72:	4b10      	ldr	r3, [pc, #64]	@ (8005fb4 <update_homing_sequence+0x538>)
 8005f74:	2209      	movs	r2, #9
 8005f76:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset counter for search
 8005f78:	4b11      	ldr	r3, [pc, #68]	@ (8005fc0 <update_homing_sequence+0x544>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
		break;
 8005f7e:	e0d0      	b.n	8006122 <update_homing_sequence+0x6a6>
 8005f80:	20000480 	.word	0x20000480
 8005f84:	c37a0000 	.word	0xc37a0000
 8005f88:	20000780 	.word	0x20000780
 8005f8c:	20000080 	.word	0x20000080
 8005f90:	20000820 	.word	0x20000820
 8005f94:	200006fc 	.word	0x200006fc
 8005f98:	200006a0 	.word	0x200006a0
 8005f9c:	447a0000 	.word	0x447a0000
 8005fa0:	00000000 	.word	0x00000000
 8005fa4:	20000824 	.word	0x20000824
 8005fa8:	20000568 	.word	0x20000568
 8005fac:	200004c4 	.word	0x200004c4
 8005fb0:	20000560 	.word	0x20000560
 8005fb4:	2000056a 	.word	0x2000056a
 8005fb8:	20000333 	.word	0x20000333
 8005fbc:	48000400 	.word	0x48000400
 8005fc0:	20000564 	.word	0x20000564
 8005fc4:	20000576 	.word	0x20000576
 8005fc8:	20000508 	.word	0x20000508

	case HOMING_REV_CW_TO_PROX1:
		// Move revolute clockwise with velocity control until prox count = 1
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
				- revolute_axis.kalman_velocity;
 8005fcc:	4b5a      	ldr	r3, [pc, #360]	@ (8006138 <update_homing_sequence+0x6bc>)
 8005fce:	edd3 7a07 	vldr	s15, [r3, #28]
 8005fd2:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8005fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
 8005fda:	4b57      	ldr	r3, [pc, #348]	@ (8006138 <update_homing_sequence+0x6bc>)
 8005fdc:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8005fe0:	4b55      	ldr	r3, [pc, #340]	@ (8006138 <update_homing_sequence+0x6bc>)
 8005fe2:	edd3 7a06 	vldr	s15, [r3, #24]
 8005fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8005fea:	4854      	ldr	r0, [pc, #336]	@ (800613c <update_homing_sequence+0x6c0>)
 8005fec:	f7fb f914 	bl	8001218 <PID_CONTROLLER_Compute>
 8005ff0:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8005ff4:	4b52      	ldr	r3, [pc, #328]	@ (8006140 <update_homing_sequence+0x6c4>)
 8005ff6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	f7fa fd61 	bl	8000ac4 <__aeabi_d2iz>
 8006002:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8006004:	4b4e      	ldr	r3, [pc, #312]	@ (8006140 <update_homing_sequence+0x6c4>)
 8006006:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800600a:	4690      	mov	r8, r2
 800600c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(
 8006010:	4640      	mov	r0, r8
 8006012:	4649      	mov	r1, r9
 8006014:	f7fa fd56 	bl	8000ac4 <__aeabi_d2iz>
 8006018:	4603      	mov	r3, r0
 800601a:	4619      	mov	r1, r3
 800601c:	4630      	mov	r0, r6
 800601e:	eeb0 0a48 	vmov.f32	s0, s16
 8006022:	f7fb f897 	bl	8001154 <PWM_Satuation>
 8006026:	ee07 0a90 	vmov	s15, r0
 800602a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800602e:	4b42      	ldr	r3, [pc, #264]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006030:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8006034:	eeb8 0a00 	vmov.f32	s0, #128	@ 0xc0000000 -2.0
 8006038:	4842      	ldr	r0, [pc, #264]	@ (8006144 <update_homing_sequence+0x6c8>)
 800603a:	f7fb faad 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 800603e:	eef0 7a40 	vmov.f32	s15, s0
 8006042:	4b3d      	ldr	r3, [pc, #244]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006044:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_REV_VELOCITY);
		revolute_axis.dfd = 0.0;
 8006048:	4b3b      	ldr	r3, [pc, #236]	@ (8006138 <update_homing_sequence+0x6bc>)
 800604a:	f04f 0200 	mov.w	r2, #0
 800604e:	62da      	str	r2, [r3, #44]	@ 0x2c

		revolute_axis.command_pos += revolute_axis.ffd;
 8006050:	4b39      	ldr	r3, [pc, #228]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006052:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006056:	4b38      	ldr	r3, [pc, #224]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006058:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800605c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006060:	4b35      	ldr	r3, [pc, #212]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006062:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006066:	4b34      	ldr	r3, [pc, #208]	@ (8006138 <update_homing_sequence+0x6bc>)
 8006068:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_150RPM_Constant.U_max,
 800606c:	4b34      	ldr	r3, [pc, #208]	@ (8006140 <update_homing_sequence+0x6c4>)
 800606e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006072:	4610      	mov	r0, r2
 8006074:	4619      	mov	r1, r3
 8006076:	f7fa fd25 	bl	8000ac4 <__aeabi_d2iz>
 800607a:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 800607c:	4b30      	ldr	r3, [pc, #192]	@ (8006140 <update_homing_sequence+0x6c4>)
 800607e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006082:	4614      	mov	r4, r2
 8006084:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006088:	4620      	mov	r0, r4
 800608a:	4629      	mov	r1, r5
 800608c:	f7fa fd1a 	bl	8000ac4 <__aeabi_d2iz>
 8006090:	4603      	mov	r3, r0
 8006092:	4619      	mov	r1, r3
 8006094:	4630      	mov	r0, r6
 8006096:	eeb0 0a48 	vmov.f32	s0, s16
 800609a:	f7fb f85b 	bl	8001154 <PWM_Satuation>
 800609e:	ee07 0a90 	vmov	s15, r0
 80060a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060a6:	4b24      	ldr	r3, [pc, #144]	@ (8006138 <update_homing_sequence+0x6bc>)
 80060a8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (prox_count >= 1) {
 80060ac:	4b26      	ldr	r3, [pc, #152]	@ (8006148 <update_homing_sequence+0x6cc>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d038      	beq.n	8006126 <update_homing_sequence+0x6aa>
			// Found prox sensor, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 80060b4:	4b25      	ldr	r3, [pc, #148]	@ (800614c <update_homing_sequence+0x6d0>)
 80060b6:	f04f 0200 	mov.w	r2, #0
 80060ba:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 80060bc:	4b1e      	ldr	r3, [pc, #120]	@ (8006138 <update_homing_sequence+0x6bc>)
 80060be:	f04f 0200 	mov.w	r2, #0
 80060c2:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 80060c4:	4b22      	ldr	r3, [pc, #136]	@ (8006150 <update_homing_sequence+0x6d4>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_PROX;
 80060ca:	4b22      	ldr	r3, [pc, #136]	@ (8006154 <update_homing_sequence+0x6d8>)
 80060cc:	220a      	movs	r2, #10
 80060ce:	701a      	strb	r2, [r3, #0]
		}
		break;
 80060d0:	e029      	b.n	8006126 <update_homing_sequence+0x6aa>

	case HOMING_DELAY_AFTER_PROX:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 80060d2:	4b1e      	ldr	r3, [pc, #120]	@ (800614c <update_homing_sequence+0x6d0>)
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 80060da:	4b17      	ldr	r3, [pc, #92]	@ (8006138 <update_homing_sequence+0x6bc>)
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 80060e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006150 <update_homing_sequence+0x6d4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3301      	adds	r3, #1
 80060e8:	4a19      	ldr	r2, [pc, #100]	@ (8006150 <update_homing_sequence+0x6d4>)
 80060ea:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 80060ec:	4b18      	ldr	r3, [pc, #96]	@ (8006150 <update_homing_sequence+0x6d4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80060f4:	d319      	bcc.n	800612a <update_homing_sequence+0x6ae>
			homing_state = HOMING_COMPLETE;
 80060f6:	4b17      	ldr	r3, [pc, #92]	@ (8006154 <update_homing_sequence+0x6d8>)
 80060f8:	220b      	movs	r2, #11
 80060fa:	701a      	strb	r2, [r3, #0]
		}
		break;
 80060fc:	e015      	b.n	800612a <update_homing_sequence+0x6ae>

	case HOMING_COMPLETE:
		NVIC_SystemReset();
 80060fe:	f7ff fb09 	bl	8005714 <__NVIC_SystemReset>
		return;
 8006102:	bf00      	nop
 8006104:	e012      	b.n	800612c <update_homing_sequence+0x6b0>
		break;

	case HOMING_IDLE:
	default:
		break;
 8006106:	bf00      	nop
 8006108:	e010      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 800610a:	bf00      	nop
 800610c:	e00e      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 800610e:	bf00      	nop
 8006110:	e00c      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 8006112:	bf00      	nop
 8006114:	e00a      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 8006116:	bf00      	nop
 8006118:	e008      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 800611a:	bf00      	nop
 800611c:	e006      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 800611e:	bf00      	nop
 8006120:	e004      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 8006122:	bf00      	nop
 8006124:	e002      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 8006126:	bf00      	nop
 8006128:	e000      	b.n	800612c <update_homing_sequence+0x6b0>
		break;
 800612a:	bf00      	nop
	}
}
 800612c:	372c      	adds	r7, #44	@ 0x2c
 800612e:	46bd      	mov	sp, r7
 8006130:	ecbd 8b02 	vpop	{d8}
 8006134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006138:	200004c4 	.word	0x200004c4
 800613c:	200007d0 	.word	0x200007d0
 8006140:	20000000 	.word	0x20000000
 8006144:	2000082c 	.word	0x2000082c
 8006148:	20000564 	.word	0x20000564
 800614c:	20000480 	.word	0x20000480
 8006150:	20000560 	.word	0x20000560
 8006154:	2000056a 	.word	0x2000056a

08006158 <normalize_angle>:

float normalize_angle(float angle_rad) {
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8006162:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80061a0 <normalize_angle+0x48>
 8006166:	ed97 0a01 	vldr	s0, [r7, #4]
 800616a:	f00c fab9 	bl	80126e0 <fmodf>
 800616e:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 8006172:	edd7 7a03 	vldr	s15, [r7, #12]
 8006176:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800617a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617e:	d507      	bpl.n	8006190 <normalize_angle+0x38>
		result += 2.0f * PI;
 8006180:	edd7 7a03 	vldr	s15, [r7, #12]
 8006184:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80061a0 <normalize_angle+0x48>
 8006188:	ee77 7a87 	vadd.f32	s15, s15, s14
 800618c:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	ee07 3a90 	vmov	s15, r3
}
 8006196:	eeb0 0a67 	vmov.f32	s0, s15
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40c90fdb 	.word	0x40c90fdb

080061a4 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80061ae:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 80061b2:	f04f 0300 	mov.w	r3, #0
 80061b6:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 80061b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80061bc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8006320 <calculate_movement_deg+0x17c>
 80061c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061c8:	d508      	bpl.n	80061dc <calculate_movement_deg+0x38>
 80061ca:	edd7 7a00 	vldr	s15, [r7]
 80061ce:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8006320 <calculate_movement_deg+0x17c>
 80061d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061da:	d411      	bmi.n	8006200 <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 80061dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80061e0:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8006320 <calculate_movement_deg+0x17c>
 80061e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ec:	db33      	blt.n	8006256 <calculate_movement_deg+0xb2>
 80061ee:	edd7 7a00 	vldr	s15, [r7]
 80061f2:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8006320 <calculate_movement_deg+0x17c>
 80061f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061fe:	db2a      	blt.n	8006256 <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 8006200:	ed97 7a00 	vldr	s14, [r7]
 8006204:	edd7 7a01 	vldr	s15, [r7, #4]
 8006208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800620c:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 8006210:	edd7 7a03 	vldr	s15, [r7, #12]
 8006214:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006320 <calculate_movement_deg+0x17c>
 8006218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800621c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006220:	dd07      	ble.n	8006232 <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 8006222:	edd7 7a03 	vldr	s15, [r7, #12]
 8006226:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006324 <calculate_movement_deg+0x180>
 800622a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800622e:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006232:	edd7 7a03 	vldr	s15, [r7, #12]
 8006236:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8006328 <calculate_movement_deg+0x184>
 800623a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800623e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006242:	d562      	bpl.n	800630a <calculate_movement_deg+0x166>
			movement += 360.0f;
 8006244:	edd7 7a03 	vldr	s15, [r7, #12]
 8006248:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8006324 <calculate_movement_deg+0x180>
 800624c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006250:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006254:	e059      	b.n	800630a <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 8006256:	edd7 7a01 	vldr	s15, [r7, #4]
 800625a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006320 <calculate_movement_deg+0x17c>
 800625e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006266:	d52a      	bpl.n	80062be <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8006268:	edd7 7a00 	vldr	s15, [r7]
 800626c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8006320 <calculate_movement_deg+0x17c>
 8006270:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006274:	ed97 7a01 	vldr	s14, [r7, #4]
 8006278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800627c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006280:	d50e      	bpl.n	80062a0 <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 8006282:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006324 <calculate_movement_deg+0x180>
 8006286:	edd7 7a00 	vldr	s15, [r7]
 800628a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800628e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006296:	eef1 7a67 	vneg.f32	s15, s15
 800629a:	edc7 7a03 	vstr	s15, [r7, #12]
 800629e:	e034      	b.n	800630a <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 80062a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80062a4:	edd7 7a00 	vldr	s15, [r7]
 80062a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062ac:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006324 <calculate_movement_deg+0x180>
 80062b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062b4:	eef1 7a67 	vneg.f32	s15, s15
 80062b8:	edc7 7a03 	vstr	s15, [r7, #12]
 80062bc:	e025      	b.n	800630a <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 80062be:	edd7 7a01 	vldr	s15, [r7, #4]
 80062c2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8006320 <calculate_movement_deg+0x17c>
 80062c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80062ca:	ed97 7a00 	vldr	s14, [r7]
 80062ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d6:	d50c      	bpl.n	80062f2 <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 80062d8:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8006324 <calculate_movement_deg+0x180>
 80062dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80062e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062e4:	ed97 7a00 	vldr	s14, [r7]
 80062e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062ec:	edc7 7a03 	vstr	s15, [r7, #12]
 80062f0:	e00b      	b.n	800630a <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 80062f2:	ed97 7a00 	vldr	s14, [r7]
 80062f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80062fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062fe:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8006324 <calculate_movement_deg+0x180>
 8006302:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006306:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	ee07 3a90 	vmov	s15, r3
}
 8006310:	eeb0 0a67 	vmov.f32	s0, s15
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	43340000 	.word	0x43340000
 8006324:	43b40000 	.word	0x43b40000
 8006328:	c3340000 	.word	0xc3340000

0800632c <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 800632c:	b590      	push	{r4, r7, lr}
 800632e:	ed2d 8b02 	vpush	{d8}
 8006332:	b08b      	sub	sp, #44	@ 0x2c
 8006334:	af00      	add	r7, sp, #0
 8006336:	ed87 0a01 	vstr	s0, [r7, #4]
 800633a:	edc7 0a00 	vstr	s1, [r7]
	bool allow_during_homing = (homing_active
 800633e:	4b88      	ldr	r3, [pc, #544]	@ (8006560 <start_combined_trajectory+0x234>)
 8006340:	781b      	ldrb	r3, [r3, #0]
			&& homing_state == HOMING_REV_TO_ZERO_DEG);
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <start_combined_trajectory+0x26>
 8006346:	4b87      	ldr	r3, [pc, #540]	@ (8006564 <start_combined_trajectory+0x238>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b07      	cmp	r3, #7
 800634c:	d101      	bne.n	8006352 <start_combined_trajectory+0x26>
 800634e:	2301      	movs	r3, #1
 8006350:	e000      	b.n	8006354 <start_combined_trajectory+0x28>
 8006352:	2300      	movs	r3, #0
	bool allow_during_homing = (homing_active
 8006354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (is_emergency_active() || (homing_active && !allow_during_homing)) {
 8006364:	f000 ffac 	bl	80072c0 <is_emergency_active>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	f040 80f1 	bne.w	8006552 <start_combined_trajectory+0x226>
 8006370:	4b7b      	ldr	r3, [pc, #492]	@ (8006560 <start_combined_trajectory+0x234>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d007      	beq.n	8006388 <start_combined_trajectory+0x5c>
 8006378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800637c:	f083 0301 	eor.w	r3, r3, #1
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	f040 80e5 	bne.w	8006552 <start_combined_trajectory+0x226>
		return;
	}

	float pris_current = prismatic_encoder.mm;
 8006388:	4b77      	ldr	r3, [pc, #476]	@ (8006568 <start_combined_trajectory+0x23c>)
 800638a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800638c:	623b      	str	r3, [r7, #32]
	float rev_current = revolute_encoder.rads;
 800638e:	4b77      	ldr	r3, [pc, #476]	@ (800656c <start_combined_trajectory+0x240>)
 8006390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006392:	61fb      	str	r3, [r7, #28]

	prisEva.t = 0.0f;
 8006394:	4b76      	ldr	r3, [pc, #472]	@ (8006570 <start_combined_trajectory+0x244>)
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 800639c:	4b74      	ldr	r3, [pc, #464]	@ (8006570 <start_combined_trajectory+0x244>)
 800639e:	2200      	movs	r2, #0
 80063a0:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 80063a2:	4b74      	ldr	r3, [pc, #464]	@ (8006574 <start_combined_trajectory+0x248>)
 80063a4:	f04f 0200 	mov.w	r2, #0
 80063a8:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 80063aa:	4b72      	ldr	r3, [pc, #456]	@ (8006574 <start_combined_trajectory+0x248>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	741a      	strb	r2, [r3, #16]

	prismatic_axis.initial_pos = pris_current;
 80063b0:	4a71      	ldr	r2, [pc, #452]	@ (8006578 <start_combined_trajectory+0x24c>)
 80063b2:	6a3b      	ldr	r3, [r7, #32]
 80063b4:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 80063b6:	4a71      	ldr	r2, [pc, #452]	@ (800657c <start_combined_trajectory+0x250>)
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	60d3      	str	r3, [r2, #12]

	prismatic_axis.target_pos = fminf(
 80063bc:	eddf 0a70 	vldr	s1, [pc, #448]	@ 8006580 <start_combined_trajectory+0x254>
 80063c0:	ed97 0a01 	vldr	s0, [r7, #4]
 80063c4:	f00c fa54 	bl	8012870 <fmaxf>
 80063c8:	eef0 7a40 	vmov.f32	s15, s0
 80063cc:	eddf 0a6d 	vldr	s1, [pc, #436]	@ 8006584 <start_combined_trajectory+0x258>
 80063d0:	eeb0 0a67 	vmov.f32	s0, s15
 80063d4:	f00c fa69 	bl	80128aa <fminf>
 80063d8:	eef0 7a40 	vmov.f32	s15, s0
 80063dc:	4b66      	ldr	r3, [pc, #408]	@ (8006578 <start_combined_trajectory+0x24c>)
 80063de:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS), PRISMATIC_MAX_POS);

	float normalized_current = normalize_angle(rev_current);
 80063e2:	ed97 0a07 	vldr	s0, [r7, #28]
 80063e6:	f7ff feb7 	bl	8006158 <normalize_angle>
 80063ea:	ed87 0a06 	vstr	s0, [r7, #24]
	float current_deg = normalized_current * 180.0f / PI;
 80063ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80063f2:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8006588 <start_combined_trajectory+0x25c>
 80063f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80063fa:	eddf 6a64 	vldr	s13, [pc, #400]	@ 800658c <start_combined_trajectory+0x260>
 80063fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006402:	edc7 7a05 	vstr	s15, [r7, #20]
	movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 8006406:	edd7 0a00 	vldr	s1, [r7]
 800640a:	ed97 0a05 	vldr	s0, [r7, #20]
 800640e:	f7ff fec9 	bl	80061a4 <calculate_movement_deg>
 8006412:	eef0 7a40 	vmov.f32	s15, s0
 8006416:	4b5e      	ldr	r3, [pc, #376]	@ (8006590 <start_combined_trajectory+0x264>)
 8006418:	edc3 7a00 	vstr	s15, [r3]
	float movement_rad = movement_deg * PI / 180.0f;
 800641c:	4b5c      	ldr	r3, [pc, #368]	@ (8006590 <start_combined_trajectory+0x264>)
 800641e:	edd3 7a00 	vldr	s15, [r3]
 8006422:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800658c <start_combined_trajectory+0x260>
 8006426:	ee27 7a87 	vmul.f32	s14, s15, s14
 800642a:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8006588 <start_combined_trajectory+0x25c>
 800642e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006432:	edc7 7a04 	vstr	s15, [r7, #16]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 8006436:	4b51      	ldr	r3, [pc, #324]	@ (800657c <start_combined_trajectory+0x250>)
 8006438:	ed93 7a03 	vldr	s14, [r3, #12]
 800643c:	edd7 7a04 	vldr	s15, [r7, #16]
 8006440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006444:	4b4d      	ldr	r3, [pc, #308]	@ (800657c <start_combined_trajectory+0x250>)
 8006446:	edc3 7a04 	vstr	s15, [r3, #16]

	// Check if we're in HOMING_REV_TO_ZERO_DEG mode
	bool is_homing_zero_deg = (homing_active
 800644a:	4b45      	ldr	r3, [pc, #276]	@ (8006560 <start_combined_trajectory+0x234>)
 800644c:	781b      	ldrb	r3, [r3, #0]
			&& homing_state == HOMING_REV_TO_ZERO_DEG);
 800644e:	2b00      	cmp	r3, #0
 8006450:	d005      	beq.n	800645e <start_combined_trajectory+0x132>
 8006452:	4b44      	ldr	r3, [pc, #272]	@ (8006564 <start_combined_trajectory+0x238>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	2b07      	cmp	r3, #7
 8006458:	d101      	bne.n	800645e <start_combined_trajectory+0x132>
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <start_combined_trajectory+0x134>
 800645e:	2300      	movs	r3, #0
	bool is_homing_zero_deg = (homing_active
 8006460:	73fb      	strb	r3, [r7, #15]
 8006462:	7bfb      	ldrb	r3, [r7, #15]
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	73fb      	strb	r3, [r7, #15]

	if (is_homing_zero_deg) {
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d038      	beq.n	80064e2 <start_combined_trajectory+0x1b6>
		// HOMING_REV_TO_ZERO_DEG: Only generate revolute trajectory, skip prismatic

		// Don't generate prismatic trajectory at all
		prismatic_axis.trajectory_active = false;
 8006470:	4b41      	ldr	r3, [pc, #260]	@ (8006578 <start_combined_trajectory+0x24c>)
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		prismatic_axis.position = pris_current;  // Hold current position
 8006478:	4a3f      	ldr	r2, [pc, #252]	@ (8006578 <start_combined_trajectory+0x24c>)
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	6013      	str	r3, [r2, #0]
		prismatic_axis.velocity = 0.0f;
 800647e:	4b3e      	ldr	r3, [pc, #248]	@ (8006578 <start_combined_trajectory+0x24c>)
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	605a      	str	r2, [r3, #4]

		// Only generate revolute trajectory
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006486:	4b3d      	ldr	r3, [pc, #244]	@ (800657c <start_combined_trajectory+0x250>)
 8006488:	ed93 8a03 	vldr	s16, [r3, #12]
 800648c:	4b3b      	ldr	r3, [pc, #236]	@ (800657c <start_combined_trajectory+0x250>)
 800648e:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos,
				ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006492:	4b40      	ldr	r3, [pc, #256]	@ (8006594 <start_combined_trajectory+0x268>)
 8006494:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006498:	4610      	mov	r0, r2
 800649a:	4619      	mov	r1, r3
 800649c:	f7fa fb5a 	bl	8000b54 <__aeabi_d2f>
 80064a0:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80064a2:	4b3c      	ldr	r3, [pc, #240]	@ (8006594 <start_combined_trajectory+0x268>)
 80064a4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80064a8:	4610      	mov	r0, r2
 80064aa:	4619      	mov	r1, r3
 80064ac:	f7fa fb52 	bl	8000b54 <__aeabi_d2f>
 80064b0:	4603      	mov	r3, r0
 80064b2:	ee01 3a90 	vmov	s3, r3
 80064b6:	ee01 4a10 	vmov	s2, r4
 80064ba:	eef0 0a68 	vmov.f32	s1, s17
 80064be:	eeb0 0a48 	vmov.f32	s0, s16
 80064c2:	4835      	ldr	r0, [pc, #212]	@ (8006598 <start_combined_trajectory+0x26c>)
 80064c4:	f7fd ff4a 	bl	800435c <Trapezoidal_Generator>

		revolute_axis.trajectory_active = false;  // Will be activated later
 80064c8:	4b2c      	ldr	r3, [pc, #176]	@ (800657c <start_combined_trajectory+0x250>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		// Set motion sequence to skip prismatic phase
		plotter_pen_up();
 80064d0:	f002 fe94 	bl	80091fc <plotter_pen_up>
		motion_delay_timer = 0;
 80064d4:	4b31      	ldr	r3, [pc, #196]	@ (800659c <start_combined_trajectory+0x270>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	601a      	str	r2, [r3, #0]
		motion_sequence_state = MOTION_PEN_UP_DELAY; // Will skip to revolute directly
 80064da:	4b31      	ldr	r3, [pc, #196]	@ (80065a0 <start_combined_trajectory+0x274>)
 80064dc:	2201      	movs	r2, #1
 80064de:	701a      	strb	r2, [r3, #0]
 80064e0:	e038      	b.n	8006554 <start_combined_trajectory+0x228>

	} else {
		// NORMAL TRAJECTORY: Generate both prismatic and revolute trajectories

		// Generate prismatic trajectory
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80064e2:	4b25      	ldr	r3, [pc, #148]	@ (8006578 <start_combined_trajectory+0x24c>)
 80064e4:	ed93 8a03 	vldr	s16, [r3, #12]
 80064e8:	4b23      	ldr	r3, [pc, #140]	@ (8006578 <start_combined_trajectory+0x24c>)
 80064ea:	edd3 8a04 	vldr	s17, [r3, #16]
				prismatic_axis.target_pos,
				ZGX45RGG_400RPM_Constant.traject_sd_max,
 80064ee:	4b2d      	ldr	r3, [pc, #180]	@ (80065a4 <start_combined_trajectory+0x278>)
 80064f0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 80064f4:	4610      	mov	r0, r2
 80064f6:	4619      	mov	r1, r3
 80064f8:	f7fa fb2c 	bl	8000b54 <__aeabi_d2f>
 80064fc:	4604      	mov	r4, r0
				ZGX45RGG_400RPM_Constant.traject_sdd_max);
 80064fe:	4b29      	ldr	r3, [pc, #164]	@ (80065a4 <start_combined_trajectory+0x278>)
 8006500:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006504:	4610      	mov	r0, r2
 8006506:	4619      	mov	r1, r3
 8006508:	f7fa fb24 	bl	8000b54 <__aeabi_d2f>
 800650c:	4603      	mov	r3, r0
 800650e:	ee01 3a90 	vmov	s3, r3
 8006512:	ee01 4a10 	vmov	s2, r4
 8006516:	eef0 0a68 	vmov.f32	s1, s17
 800651a:	eeb0 0a48 	vmov.f32	s0, s16
 800651e:	4822      	ldr	r0, [pc, #136]	@ (80065a8 <start_combined_trajectory+0x27c>)
 8006520:	f7fd ff1c 	bl	800435c <Trapezoidal_Generator>

		prismatic_axis.trajectory_active = false;
 8006524:	4b14      	ldr	r3, [pc, #80]	@ (8006578 <start_combined_trajectory+0x24c>)
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 800652c:	4b13      	ldr	r3, [pc, #76]	@ (800657c <start_combined_trajectory+0x250>)
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		plotter_pen_up();
 8006534:	f002 fe62 	bl	80091fc <plotter_pen_up>
		motion_delay_timer = 0;
 8006538:	4b18      	ldr	r3, [pc, #96]	@ (800659c <start_combined_trajectory+0x270>)
 800653a:	2200      	movs	r2, #0
 800653c:	601a      	str	r2, [r3, #0]
		motion_sequence_state = MOTION_PEN_UP_DELAY;
 800653e:	4b18      	ldr	r3, [pc, #96]	@ (80065a0 <start_combined_trajectory+0x274>)
 8006540:	2201      	movs	r2, #1
 8006542:	701a      	strb	r2, [r3, #0]

		//modbus reset state
		registerFrame[BaseSystem_Status].U16 = 0;
 8006544:	4b19      	ldr	r3, [pc, #100]	@ (80065ac <start_combined_trajectory+0x280>)
 8006546:	2200      	movs	r2, #0
 8006548:	805a      	strh	r2, [r3, #2]
		registerFrame[R_Theta_Status].U16 = 0;
 800654a:	4b18      	ldr	r3, [pc, #96]	@ (80065ac <start_combined_trajectory+0x280>)
 800654c:	2200      	movs	r2, #0
 800654e:	841a      	strh	r2, [r3, #32]
 8006550:	e000      	b.n	8006554 <start_combined_trajectory+0x228>
		return;
 8006552:	bf00      	nop
	}
}
 8006554:	372c      	adds	r7, #44	@ 0x2c
 8006556:	46bd      	mov	sp, r7
 8006558:	ecbd 8b02 	vpop	{d8}
 800655c:	bd90      	pop	{r4, r7, pc}
 800655e:	bf00      	nop
 8006560:	2000056b 	.word	0x2000056b
 8006564:	2000056a 	.word	0x2000056a
 8006568:	200006a0 	.word	0x200006a0
 800656c:	200006fc 	.word	0x200006fc
 8006570:	20000534 	.word	0x20000534
 8006574:	20000548 	.word	0x20000548
 8006578:	20000480 	.word	0x20000480
 800657c:	200004c4 	.word	0x200004c4
 8006580:	00000000 	.word	0x00000000
 8006584:	43960000 	.word	0x43960000
 8006588:	43340000 	.word	0x43340000
 800658c:	40490fdb 	.word	0x40490fdb
 8006590:	20000580 	.word	0x20000580
 8006594:	20000000 	.word	0x20000000
 8006598:	20000520 	.word	0x20000520
 800659c:	20000560 	.word	0x20000560
 80065a0:	20000508 	.word	0x20000508
 80065a4:	20000080 	.word	0x20000080
 80065a8:	2000050c 	.word	0x2000050c
 80065ac:	200012a4 	.word	0x200012a4

080065b0 <update_position_control>:

void update_position_control(void) {
 80065b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80065b4:	ed2d 8b02 	vpush	{d8}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 80065bc:	4b50      	ldr	r3, [pc, #320]	@ (8006700 <update_position_control+0x150>)
 80065be:	ed93 7a00 	vldr	s14, [r3]
 80065c2:	4b50      	ldr	r3, [pc, #320]	@ (8006704 <update_position_control+0x154>)
 80065c4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80065c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065cc:	4b4c      	ldr	r3, [pc, #304]	@ (8006700 <update_position_control+0x150>)
 80065ce:	edc3 7a05 	vstr	s15, [r3, #20]
	prismatic_axis.command_vel = PWM_Satuation(
 80065d2:	4b4b      	ldr	r3, [pc, #300]	@ (8006700 <update_position_control+0x150>)
 80065d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80065d8:	eeb0 0a67 	vmov.f32	s0, s15
 80065dc:	484a      	ldr	r0, [pc, #296]	@ (8006708 <update_position_control+0x158>)
 80065de:	f7fa fe1b 	bl	8001218 <PID_CONTROLLER_Compute>
 80065e2:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 80065e6:	4b49      	ldr	r3, [pc, #292]	@ (800670c <update_position_control+0x15c>)
 80065e8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 80065ec:	4610      	mov	r0, r2
 80065ee:	4619      	mov	r1, r3
 80065f0:	f7fa fa68 	bl	8000ac4 <__aeabi_d2iz>
 80065f4:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 80065f6:	4b45      	ldr	r3, [pc, #276]	@ (800670c <update_position_control+0x15c>)
 80065f8:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80065fc:	4690      	mov	r8, r2
 80065fe:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 8006602:	4640      	mov	r0, r8
 8006604:	4649      	mov	r1, r9
 8006606:	f7fa fa5d 	bl	8000ac4 <__aeabi_d2iz>
 800660a:	4603      	mov	r3, r0
 800660c:	4619      	mov	r1, r3
 800660e:	4630      	mov	r0, r6
 8006610:	eeb0 0a48 	vmov.f32	s0, s16
 8006614:	f7fa fd9e 	bl	8001154 <PWM_Satuation>
 8006618:	ee07 0a90 	vmov	s15, r0
 800661c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006620:	4b37      	ldr	r3, [pc, #220]	@ (8006700 <update_position_control+0x150>)
 8006622:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	float normalized_position = normalize_angle(revolute_encoder.rads);
 8006626:	4b3a      	ldr	r3, [pc, #232]	@ (8006710 <update_position_control+0x160>)
 8006628:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800662c:	eeb0 0a67 	vmov.f32	s0, s15
 8006630:	f7ff fd92 	bl	8006158 <normalize_angle>
 8006634:	ed87 0a01 	vstr	s0, [r7, #4]
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 8006638:	4b36      	ldr	r3, [pc, #216]	@ (8006714 <update_position_control+0x164>)
 800663a:	ed93 7a00 	vldr	s14, [r3]
 800663e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006646:	4b33      	ldr	r3, [pc, #204]	@ (8006714 <update_position_control+0x164>)
 8006648:	edc3 7a05 	vstr	s15, [r3, #20]

	if (revolute_axis.pos_error > PI)
 800664c:	4b31      	ldr	r3, [pc, #196]	@ (8006714 <update_position_control+0x164>)
 800664e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006652:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006718 <update_position_control+0x168>
 8006656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800665a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800665e:	dd09      	ble.n	8006674 <update_position_control+0xc4>
		revolute_axis.pos_error -= 2.0f * PI;
 8006660:	4b2c      	ldr	r3, [pc, #176]	@ (8006714 <update_position_control+0x164>)
 8006662:	edd3 7a05 	vldr	s15, [r3, #20]
 8006666:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800671c <update_position_control+0x16c>
 800666a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800666e:	4b29      	ldr	r3, [pc, #164]	@ (8006714 <update_position_control+0x164>)
 8006670:	edc3 7a05 	vstr	s15, [r3, #20]
	if (revolute_axis.pos_error < -PI)
 8006674:	4b27      	ldr	r3, [pc, #156]	@ (8006714 <update_position_control+0x164>)
 8006676:	edd3 7a05 	vldr	s15, [r3, #20]
 800667a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8006720 <update_position_control+0x170>
 800667e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006686:	d509      	bpl.n	800669c <update_position_control+0xec>
		revolute_axis.pos_error += 2.0f * PI;
 8006688:	4b22      	ldr	r3, [pc, #136]	@ (8006714 <update_position_control+0x164>)
 800668a:	edd3 7a05 	vldr	s15, [r3, #20]
 800668e:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800671c <update_position_control+0x16c>
 8006692:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006696:	4b1f      	ldr	r3, [pc, #124]	@ (8006714 <update_position_control+0x164>)
 8006698:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 800669c:	4b1d      	ldr	r3, [pc, #116]	@ (8006714 <update_position_control+0x164>)
 800669e:	edd3 7a05 	vldr	s15, [r3, #20]
 80066a2:	eeb0 0a67 	vmov.f32	s0, s15
 80066a6:	481f      	ldr	r0, [pc, #124]	@ (8006724 <update_position_control+0x174>)
 80066a8:	f7fa fdb6 	bl	8001218 <PID_CONTROLLER_Compute>
 80066ac:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 80066b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006728 <update_position_control+0x178>)
 80066b2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 80066b6:	4610      	mov	r0, r2
 80066b8:	4619      	mov	r1, r3
 80066ba:	f7fa fa03 	bl	8000ac4 <__aeabi_d2iz>
 80066be:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 80066c0:	4b19      	ldr	r3, [pc, #100]	@ (8006728 <update_position_control+0x178>)
 80066c2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80066c6:	4614      	mov	r4, r2
 80066c8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 80066cc:	4620      	mov	r0, r4
 80066ce:	4629      	mov	r1, r5
 80066d0:	f7fa f9f8 	bl	8000ac4 <__aeabi_d2iz>
 80066d4:	4603      	mov	r3, r0
 80066d6:	4619      	mov	r1, r3
 80066d8:	4630      	mov	r0, r6
 80066da:	eeb0 0a48 	vmov.f32	s0, s16
 80066de:	f7fa fd39 	bl	8001154 <PWM_Satuation>
 80066e2:	ee07 0a90 	vmov	s15, r0
 80066e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006714 <update_position_control+0x164>)
 80066ec:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	ecbd 8b02 	vpop	{d8}
 80066fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066fe:	bf00      	nop
 8006700:	20000480 	.word	0x20000480
 8006704:	200006a0 	.word	0x200006a0
 8006708:	20000758 	.word	0x20000758
 800670c:	20000080 	.word	0x20000080
 8006710:	200006fc 	.word	0x200006fc
 8006714:	200004c4 	.word	0x200004c4
 8006718:	40490fdb 	.word	0x40490fdb
 800671c:	40c90fdb 	.word	0x40c90fdb
 8006720:	c0490fdb 	.word	0xc0490fdb
 8006724:	200007a8 	.word	0x200007a8
 8006728:	20000000 	.word	0x20000000
 800672c:	00000000 	.word	0x00000000

08006730 <update_velocity_control>:

void update_velocity_control(void) {
 8006730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006734:	ed2d 8b02 	vpush	{d8}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
	if (prismatic_axis.trajectory_active) {
 800673c:	4b96      	ldr	r3, [pc, #600]	@ (8006998 <update_velocity_control+0x268>)
 800673e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006742:	2b00      	cmp	r3, #0
 8006744:	d010      	beq.n	8006768 <update_velocity_control+0x38>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006746:	4b94      	ldr	r3, [pc, #592]	@ (8006998 <update_velocity_control+0x268>)
 8006748:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 800674c:	4b92      	ldr	r3, [pc, #584]	@ (8006998 <update_velocity_control+0x268>)
 800674e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006752:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006756:	4b90      	ldr	r3, [pc, #576]	@ (8006998 <update_velocity_control+0x268>)
 8006758:	edd3 7a07 	vldr	s15, [r3, #28]
 800675c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006760:	4b8d      	ldr	r3, [pc, #564]	@ (8006998 <update_velocity_control+0x268>)
 8006762:	edc3 7a06 	vstr	s15, [r3, #24]
 8006766:	e00a      	b.n	800677e <update_velocity_control+0x4e>
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006768:	4b8b      	ldr	r3, [pc, #556]	@ (8006998 <update_velocity_control+0x268>)
 800676a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 800676e:	4b8a      	ldr	r3, [pc, #552]	@ (8006998 <update_velocity_control+0x268>)
 8006770:	edd3 7a07 	vldr	s15, [r3, #28]
 8006774:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006778:	4b87      	ldr	r3, [pc, #540]	@ (8006998 <update_velocity_control+0x268>)
 800677a:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 800677e:	4b86      	ldr	r3, [pc, #536]	@ (8006998 <update_velocity_control+0x268>)
 8006780:	edd3 7a06 	vldr	s15, [r3, #24]
 8006784:	eeb0 0a67 	vmov.f32	s0, s15
 8006788:	4884      	ldr	r0, [pc, #528]	@ (800699c <update_velocity_control+0x26c>)
 800678a:	f7fa fd45 	bl	8001218 <PID_CONTROLLER_Compute>
 800678e:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 8006792:	4b83      	ldr	r3, [pc, #524]	@ (80069a0 <update_velocity_control+0x270>)
 8006794:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 8006798:	4610      	mov	r0, r2
 800679a:	4619      	mov	r1, r3
 800679c:	f7fa f992 	bl	8000ac4 <__aeabi_d2iz>
 80067a0:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 80067a2:	4b7f      	ldr	r3, [pc, #508]	@ (80069a0 <update_velocity_control+0x270>)
 80067a4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80067a8:	603a      	str	r2, [r7, #0]
 80067aa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80067ae:	607b      	str	r3, [r7, #4]
	prismatic_axis.command_pos = PWM_Satuation(
 80067b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80067b4:	f7fa f986 	bl	8000ac4 <__aeabi_d2iz>
 80067b8:	4603      	mov	r3, r0
 80067ba:	4619      	mov	r1, r3
 80067bc:	4630      	mov	r0, r6
 80067be:	eeb0 0a48 	vmov.f32	s0, s16
 80067c2:	f7fa fcc7 	bl	8001154 <PWM_Satuation>
 80067c6:	ee07 0a90 	vmov	s15, r0
 80067ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067ce:	4b72      	ldr	r3, [pc, #456]	@ (8006998 <update_velocity_control+0x268>)
 80067d0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (prismatic_axis.trajectory_active) {
 80067d4:	4b70      	ldr	r3, [pc, #448]	@ (8006998 <update_velocity_control+0x268>)
 80067d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d02c      	beq.n	8006838 <update_velocity_control+0x108>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 80067de:	4b6e      	ldr	r3, [pc, #440]	@ (8006998 <update_velocity_control+0x268>)
 80067e0:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 80067e4:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80069a4 <update_velocity_control+0x274>
 80067e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80067ec:	eeb0 0a47 	vmov.f32	s0, s14
 80067f0:	486d      	ldr	r0, [pc, #436]	@ (80069a8 <update_velocity_control+0x278>)
 80067f2:	f7fb f851 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 80067f6:	eef0 7a40 	vmov.f32	s15, s0
 80067fa:	4b67      	ldr	r3, [pc, #412]	@ (8006998 <update_velocity_control+0x268>)
 80067fc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006800:	4b6a      	ldr	r3, [pc, #424]	@ (80069ac <update_velocity_control+0x27c>)
 8006802:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8006806:	4b6a      	ldr	r3, [pc, #424]	@ (80069b0 <update_velocity_control+0x280>)
 8006808:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 800680c:	4b69      	ldr	r3, [pc, #420]	@ (80069b4 <update_velocity_control+0x284>)
 800680e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006812:	eddf 5a64 	vldr	s11, [pc, #400]	@ 80069a4 <update_velocity_control+0x274>
 8006816:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800681a:	eeb0 1a46 	vmov.f32	s2, s12
 800681e:	eef0 0a66 	vmov.f32	s1, s13
 8006822:	eeb0 0a47 	vmov.f32	s0, s14
 8006826:	4864      	ldr	r0, [pc, #400]	@ (80069b8 <update_velocity_control+0x288>)
 8006828:	f7fb f8de 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 800682c:	eef0 7a40 	vmov.f32	s15, s0
 8006830:	4b59      	ldr	r3, [pc, #356]	@ (8006998 <update_velocity_control+0x268>)
 8006832:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006836:	e007      	b.n	8006848 <update_velocity_control+0x118>
	} else {
		prismatic_axis.ffd = 0.0f;
 8006838:	4b57      	ldr	r3, [pc, #348]	@ (8006998 <update_velocity_control+0x268>)
 800683a:	f04f 0200 	mov.w	r2, #0
 800683e:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8006840:	4b55      	ldr	r3, [pc, #340]	@ (8006998 <update_velocity_control+0x268>)
 8006842:	f04f 0200 	mov.w	r2, #0
 8006846:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8006848:	4b53      	ldr	r3, [pc, #332]	@ (8006998 <update_velocity_control+0x268>)
 800684a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800684e:	4b52      	ldr	r3, [pc, #328]	@ (8006998 <update_velocity_control+0x268>)
 8006850:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8006854:	4b50      	ldr	r3, [pc, #320]	@ (8006998 <update_velocity_control+0x268>)
 8006856:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800685a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800685e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006862:	4b4d      	ldr	r3, [pc, #308]	@ (8006998 <update_velocity_control+0x268>)
 8006864:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006868:	4b4b      	ldr	r3, [pc, #300]	@ (8006998 <update_velocity_control+0x268>)
 800686a:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 800686e:	4b4c      	ldr	r3, [pc, #304]	@ (80069a0 <update_velocity_control+0x270>)
 8006870:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006874:	4610      	mov	r0, r2
 8006876:	4619      	mov	r1, r3
 8006878:	f7fa f924 	bl	8000ac4 <__aeabi_d2iz>
 800687c:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 800687e:	4b48      	ldr	r3, [pc, #288]	@ (80069a0 <update_velocity_control+0x270>)
 8006880:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006884:	4692      	mov	sl, r2
 8006886:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800688a:	4650      	mov	r0, sl
 800688c:	4659      	mov	r1, fp
 800688e:	f7fa f919 	bl	8000ac4 <__aeabi_d2iz>
 8006892:	4603      	mov	r3, r0
 8006894:	4619      	mov	r1, r3
 8006896:	4630      	mov	r0, r6
 8006898:	eeb0 0a48 	vmov.f32	s0, s16
 800689c:	f7fa fc5a 	bl	8001154 <PWM_Satuation>
 80068a0:	ee07 0a90 	vmov	s15, r0
 80068a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006998 <update_velocity_control+0x268>)
 80068aa:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 80068ae:	4b40      	ldr	r3, [pc, #256]	@ (80069b0 <update_velocity_control+0x280>)
 80068b0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d010      	beq.n	80068da <update_velocity_control+0x1aa>
		revolute_axis.vel_error = revolute_axis.command_vel
 80068b8:	4b3d      	ldr	r3, [pc, #244]	@ (80069b0 <update_velocity_control+0x280>)
 80068ba:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 80068be:	4b3c      	ldr	r3, [pc, #240]	@ (80069b0 <update_velocity_control+0x280>)
 80068c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80068c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068c8:	4b39      	ldr	r3, [pc, #228]	@ (80069b0 <update_velocity_control+0x280>)
 80068ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80068ce:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 80068d2:	4b37      	ldr	r3, [pc, #220]	@ (80069b0 <update_velocity_control+0x280>)
 80068d4:	edc3 7a06 	vstr	s15, [r3, #24]
 80068d8:	e00a      	b.n	80068f0 <update_velocity_control+0x1c0>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 80068da:	4b35      	ldr	r3, [pc, #212]	@ (80069b0 <update_velocity_control+0x280>)
 80068dc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 80068e0:	4b33      	ldr	r3, [pc, #204]	@ (80069b0 <update_velocity_control+0x280>)
 80068e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80068e6:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 80068ea:	4b31      	ldr	r3, [pc, #196]	@ (80069b0 <update_velocity_control+0x280>)
 80068ec:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 80068f0:	4b2f      	ldr	r3, [pc, #188]	@ (80069b0 <update_velocity_control+0x280>)
 80068f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80068f6:	eeb0 0a67 	vmov.f32	s0, s15
 80068fa:	4830      	ldr	r0, [pc, #192]	@ (80069bc <update_velocity_control+0x28c>)
 80068fc:	f7fa fc8c 	bl	8001218 <PID_CONTROLLER_Compute>
 8006900:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 8006904:	4b2e      	ldr	r3, [pc, #184]	@ (80069c0 <update_velocity_control+0x290>)
 8006906:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 800690a:	4610      	mov	r0, r2
 800690c:	4619      	mov	r1, r3
 800690e:	f7fa f8d9 	bl	8000ac4 <__aeabi_d2iz>
 8006912:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 8006914:	4b2a      	ldr	r3, [pc, #168]	@ (80069c0 <update_velocity_control+0x290>)
 8006916:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800691a:	4690      	mov	r8, r2
 800691c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 8006920:	4640      	mov	r0, r8
 8006922:	4649      	mov	r1, r9
 8006924:	f7fa f8ce 	bl	8000ac4 <__aeabi_d2iz>
 8006928:	4603      	mov	r3, r0
 800692a:	4619      	mov	r1, r3
 800692c:	4630      	mov	r0, r6
 800692e:	eeb0 0a48 	vmov.f32	s0, s16
 8006932:	f7fa fc0f 	bl	8001154 <PWM_Satuation>
 8006936:	ee07 0a90 	vmov	s15, r0
 800693a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800693e:	4b1c      	ldr	r3, [pc, #112]	@ (80069b0 <update_velocity_control+0x280>)
 8006940:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006944:	4b1a      	ldr	r3, [pc, #104]	@ (80069b0 <update_velocity_control+0x280>)
 8006946:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800694a:	2b00      	cmp	r3, #0
 800694c:	d03e      	beq.n	80069cc <update_velocity_control+0x29c>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 800694e:	4b18      	ldr	r3, [pc, #96]	@ (80069b0 <update_velocity_control+0x280>)
 8006950:	edd3 7a01 	vldr	s15, [r3, #4]
 8006954:	eeb0 0a67 	vmov.f32	s0, s15
 8006958:	481a      	ldr	r0, [pc, #104]	@ (80069c4 <update_velocity_control+0x294>)
 800695a:	f7fa fe1d 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 800695e:	eef0 7a40 	vmov.f32	s15, s0
 8006962:	4b13      	ldr	r3, [pc, #76]	@ (80069b0 <update_velocity_control+0x280>)
 8006964:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006968:	4b10      	ldr	r3, [pc, #64]	@ (80069ac <update_velocity_control+0x27c>)
 800696a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 800696e:	4b11      	ldr	r3, [pc, #68]	@ (80069b4 <update_velocity_control+0x284>)
 8006970:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006974:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 80069a4 <update_velocity_control+0x274>
 8006978:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800697c:	eef0 0a66 	vmov.f32	s1, s13
 8006980:	eeb0 0a47 	vmov.f32	s0, s14
 8006984:	4810      	ldr	r0, [pc, #64]	@ (80069c8 <update_velocity_control+0x298>)
 8006986:	f7fa fe9a 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 800698a:	eef0 7a40 	vmov.f32	s15, s0
 800698e:	4b08      	ldr	r3, [pc, #32]	@ (80069b0 <update_velocity_control+0x280>)
 8006990:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006994:	e034      	b.n	8006a00 <update_velocity_control+0x2d0>
 8006996:	bf00      	nop
 8006998:	20000480 	.word	0x20000480
 800699c:	20000780 	.word	0x20000780
 80069a0:	20000080 	.word	0x20000080
 80069a4:	447a0000 	.word	0x447a0000
 80069a8:	20000820 	.word	0x20000820
 80069ac:	200006fc 	.word	0x200006fc
 80069b0:	200004c4 	.word	0x200004c4
 80069b4:	200006a0 	.word	0x200006a0
 80069b8:	20000824 	.word	0x20000824
 80069bc:	200007d0 	.word	0x200007d0
 80069c0:	20000000 	.word	0x20000000
 80069c4:	2000082c 	.word	0x2000082c
 80069c8:	20000830 	.word	0x20000830
	} else {
		revolute_axis.ffd = 0.0f;
 80069cc:	4b54      	ldr	r3, [pc, #336]	@ (8006b20 <update_velocity_control+0x3f0>)
 80069ce:	f04f 0200 	mov.w	r2, #0
 80069d2:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80069d4:	4b53      	ldr	r3, [pc, #332]	@ (8006b24 <update_velocity_control+0x3f4>)
 80069d6:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80069da:	4b53      	ldr	r3, [pc, #332]	@ (8006b28 <update_velocity_control+0x3f8>)
 80069dc:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80069e0:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8006b2c <update_velocity_control+0x3fc>
 80069e4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80069e8:	eef0 0a66 	vmov.f32	s1, s13
 80069ec:	eeb0 0a47 	vmov.f32	s0, s14
 80069f0:	484f      	ldr	r0, [pc, #316]	@ (8006b30 <update_velocity_control+0x400>)
 80069f2:	f7fa fe64 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 80069f6:	eef0 7a40 	vmov.f32	s15, s0
 80069fa:	4b49      	ldr	r3, [pc, #292]	@ (8006b20 <update_velocity_control+0x3f0>)
 80069fc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8006a00:	4b4c      	ldr	r3, [pc, #304]	@ (8006b34 <update_velocity_control+0x404>)
 8006a02:	edd3 7a00 	vldr	s15, [r3]
 8006a06:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006b38 <update_velocity_control+0x408>
 8006a0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006a0e:	4b44      	ldr	r3, [pc, #272]	@ (8006b20 <update_velocity_control+0x3f0>)
 8006a10:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006a14:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8006b3c <update_velocity_control+0x40c>
 8006a18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a20:	4b44      	ldr	r3, [pc, #272]	@ (8006b34 <update_velocity_control+0x404>)
 8006a22:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 8006a26:	4b46      	ldr	r3, [pc, #280]	@ (8006b40 <update_velocity_control+0x410>)
 8006a28:	edd3 7a00 	vldr	s15, [r3]
 8006a2c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006b38 <update_velocity_control+0x408>
 8006a30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006a34:	4b3a      	ldr	r3, [pc, #232]	@ (8006b20 <update_velocity_control+0x3f0>)
 8006a36:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006a3a:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8006b3c <update_velocity_control+0x40c>
 8006a3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a46:	4b3e      	ldr	r3, [pc, #248]	@ (8006b40 <update_velocity_control+0x410>)
 8006a48:	edc3 7a00 	vstr	s15, [r3]

	revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
 8006a4c:	4b34      	ldr	r3, [pc, #208]	@ (8006b20 <update_velocity_control+0x3f0>)
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7f9 fd45 	bl	80004e0 <__aeabi_f2d>
 8006a56:	4680      	mov	r8, r0
 8006a58:	4689      	mov	r9, r1
 8006a5a:	4b39      	ldr	r3, [pc, #228]	@ (8006b40 <update_velocity_control+0x410>)
 8006a5c:	ed93 7a00 	vldr	s14, [r3]
 8006a60:	4b34      	ldr	r3, [pc, #208]	@ (8006b34 <update_velocity_control+0x404>)
 8006a62:	edd3 7a00 	vldr	s15, [r3]
 8006a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a6a:	ee17 0a90 	vmov	r0, s15
 8006a6e:	f7f9 fd37 	bl	80004e0 <__aeabi_f2d>
 8006a72:	a329      	add	r3, pc, #164	@ (adr r3, 8006b18 <update_velocity_control+0x3e8>)
 8006a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a78:	f7f9 fd8a 	bl	8000590 <__aeabi_dmul>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4640      	mov	r0, r8
 8006a82:	4649      	mov	r1, r9
 8006a84:	f7f9 fbce 	bl	8000224 <__adddf3>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	4619      	mov	r1, r3
 8006a90:	f7fa f860 	bl	8000b54 <__aeabi_d2f>
 8006a94:	4603      	mov	r3, r0
 8006a96:	4a22      	ldr	r2, [pc, #136]	@ (8006b20 <update_velocity_control+0x3f0>)
 8006a98:	6253      	str	r3, [r2, #36]	@ 0x24

	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006a9a:	4b21      	ldr	r3, [pc, #132]	@ (8006b20 <update_velocity_control+0x3f0>)
 8006a9c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006aa0:	4b28      	ldr	r3, [pc, #160]	@ (8006b44 <update_velocity_control+0x414>)
 8006aa2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	f7fa f80b 	bl	8000ac4 <__aeabi_d2iz>
 8006aae:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006ab0:	4b24      	ldr	r3, [pc, #144]	@ (8006b44 <update_velocity_control+0x414>)
 8006ab2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006ab6:	4614      	mov	r4, r2
 8006ab8:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006abc:	4620      	mov	r0, r4
 8006abe:	4629      	mov	r1, r5
 8006ac0:	f7fa f800 	bl	8000ac4 <__aeabi_d2iz>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4630      	mov	r0, r6
 8006aca:	eeb0 0a48 	vmov.f32	s0, s16
 8006ace:	f7fa fb41 	bl	8001154 <PWM_Satuation>
 8006ad2:	ee07 0a90 	vmov	s15, r0
 8006ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ada:	4b11      	ldr	r3, [pc, #68]	@ (8006b20 <update_velocity_control+0x3f0>)
 8006adc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006ae0:	4b19      	ldr	r3, [pc, #100]	@ (8006b48 <update_velocity_control+0x418>)
 8006ae2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006ae6:	eef0 0a67 	vmov.f32	s1, s15
 8006aea:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8006b4c <update_velocity_control+0x41c>
 8006aee:	4818      	ldr	r0, [pc, #96]	@ (8006b50 <update_velocity_control+0x420>)
 8006af0:	f7fa fc6a 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006af4:	4b0a      	ldr	r3, [pc, #40]	@ (8006b20 <update_velocity_control+0x3f0>)
 8006af6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006afa:	eef0 0a67 	vmov.f32	s1, s15
 8006afe:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8006b4c <update_velocity_control+0x41c>
 8006b02:	4814      	ldr	r0, [pc, #80]	@ (8006b54 <update_velocity_control+0x424>)
 8006b04:	f7fa fc60 	bl	80013c8 <MDXX_set_range>
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	ecbd 8b02 	vpop	{d8}
 8006b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b16:	bf00      	nop
 8006b18:	47ae147b 	.word	0x47ae147b
 8006b1c:	3f847ae1 	.word	0x3f847ae1
 8006b20:	200004c4 	.word	0x200004c4
 8006b24:	200006fc 	.word	0x200006fc
 8006b28:	200006a0 	.word	0x200006a0
 8006b2c:	447a0000 	.word	0x447a0000
 8006b30:	20000830 	.word	0x20000830
 8006b34:	200005f4 	.word	0x200005f4
 8006b38:	3f4ccccd 	.word	0x3f4ccccd
 8006b3c:	3e4ccccd 	.word	0x3e4ccccd
 8006b40:	200005f8 	.word	0x200005f8
 8006b44:	20000000 	.word	0x20000000
 8006b48:	20000480 	.word	0x20000480
 8006b4c:	44fa0000 	.word	0x44fa0000
 8006b50:	20000608 	.word	0x20000608
 8006b54:	20000654 	.word	0x20000654

08006b58 <update_control_loops>:

void update_control_loops(void) {
 8006b58:	b598      	push	{r3, r4, r7, lr}
 8006b5a:	ed2d 8b02 	vpush	{d8}
 8006b5e:	af00      	add	r7, sp, #0
	normalized_position = normalize_angle(revolute_encoder.rads);
 8006b60:	4b96      	ldr	r3, [pc, #600]	@ (8006dbc <update_control_loops+0x264>)
 8006b62:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006b66:	eeb0 0a67 	vmov.f32	s0, s15
 8006b6a:	f7ff faf5 	bl	8006158 <normalize_angle>
 8006b6e:	eef0 7a40 	vmov.f32	s15, s0
 8006b72:	4b93      	ldr	r3, [pc, #588]	@ (8006dc0 <update_control_loops+0x268>)
 8006b74:	edc3 7a00 	vstr	s15, [r3]

	if (is_emergency_active()) {
 8006b78:	f000 fba2 	bl	80072c0 <is_emergency_active>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d015      	beq.n	8006bae <update_control_loops+0x56>
		emergency_stop_all_motors();
 8006b82:	f000 fad5 	bl	8007130 <emergency_stop_all_motors>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006b86:	4b8f      	ldr	r3, [pc, #572]	@ (8006dc4 <update_control_loops+0x26c>)
 8006b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b8a:	4a8f      	ldr	r2, [pc, #572]	@ (8006dc8 <update_control_loops+0x270>)
 8006b8c:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006b8e:	4b8c      	ldr	r3, [pc, #560]	@ (8006dc0 <update_control_loops+0x268>)
 8006b90:	edd3 7a00 	vldr	s15, [r3]
 8006b94:	220e      	movs	r2, #14
 8006b96:	210f      	movs	r1, #15
 8006b98:	eeb0 0a67 	vmov.f32	s0, s15
 8006b9c:	488b      	ldr	r0, [pc, #556]	@ (8006dcc <update_control_loops+0x274>)
 8006b9e:	f7fe f837 	bl	8004c10 <UnitConverter_angle>
 8006ba2:	eef0 7a40 	vmov.f32	s15, s0
 8006ba6:	4b8a      	ldr	r3, [pc, #552]	@ (8006dd0 <update_control_loops+0x278>)
 8006ba8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006bac:	e1ac      	b.n	8006f08 <update_control_loops+0x3b0>
	}

	// Handle all homing states except HOMING_REV_TO_ZERO_DEG with direct motor control
	if (homing_active && homing_state != HOMING_REV_TO_ZERO_DEG) {
 8006bae:	4b89      	ldr	r3, [pc, #548]	@ (8006dd4 <update_control_loops+0x27c>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d02d      	beq.n	8006c12 <update_control_loops+0xba>
 8006bb6:	4b88      	ldr	r3, [pc, #544]	@ (8006dd8 <update_control_loops+0x280>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b07      	cmp	r3, #7
 8006bbc:	d029      	beq.n	8006c12 <update_control_loops+0xba>
		update_homing_sequence();
 8006bbe:	f7fe ff5d 	bl	8005a7c <update_homing_sequence>
		MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006bc2:	4b81      	ldr	r3, [pc, #516]	@ (8006dc8 <update_control_loops+0x270>)
 8006bc4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006bc8:	eef0 0a67 	vmov.f32	s1, s15
 8006bcc:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 8006ddc <update_control_loops+0x284>
 8006bd0:	4883      	ldr	r0, [pc, #524]	@ (8006de0 <update_control_loops+0x288>)
 8006bd2:	f7fa fbf9 	bl	80013c8 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006bd6:	4b7e      	ldr	r3, [pc, #504]	@ (8006dd0 <update_control_loops+0x278>)
 8006bd8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006bdc:	eef0 0a67 	vmov.f32	s1, s15
 8006be0:	ed9f 0a7e 	vldr	s0, [pc, #504]	@ 8006ddc <update_control_loops+0x284>
 8006be4:	487f      	ldr	r0, [pc, #508]	@ (8006de4 <update_control_loops+0x28c>)
 8006be6:	f7fa fbef 	bl	80013c8 <MDXX_set_range>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006bea:	4b76      	ldr	r3, [pc, #472]	@ (8006dc4 <update_control_loops+0x26c>)
 8006bec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bee:	4a76      	ldr	r2, [pc, #472]	@ (8006dc8 <update_control_loops+0x270>)
 8006bf0:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006bf2:	4b73      	ldr	r3, [pc, #460]	@ (8006dc0 <update_control_loops+0x268>)
 8006bf4:	edd3 7a00 	vldr	s15, [r3]
 8006bf8:	220e      	movs	r2, #14
 8006bfa:	210f      	movs	r1, #15
 8006bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8006c00:	4872      	ldr	r0, [pc, #456]	@ (8006dcc <update_control_loops+0x274>)
 8006c02:	f7fe f805 	bl	8004c10 <UnitConverter_angle>
 8006c06:	eef0 7a40 	vmov.f32	s15, s0
 8006c0a:	4b71      	ldr	r3, [pc, #452]	@ (8006dd0 <update_control_loops+0x278>)
 8006c0c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006c10:	e17a      	b.n	8006f08 <update_control_loops+0x3b0>
	}

	// Handle HOMING_REV_TO_ZERO_DEG: use trajectory system + check completion
	if (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006c12:	4b70      	ldr	r3, [pc, #448]	@ (8006dd4 <update_control_loops+0x27c>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d01d      	beq.n	8006c56 <update_control_loops+0xfe>
 8006c1a:	4b6f      	ldr	r3, [pc, #444]	@ (8006dd8 <update_control_loops+0x280>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b07      	cmp	r3, #7
 8006c20:	d119      	bne.n	8006c56 <update_control_loops+0xfe>
		// First, update the homing sequence to handle trajectory start/completion
		update_homing_sequence();
 8006c22:	f7fe ff2b 	bl	8005a7c <update_homing_sequence>

		// If still in HOMING_REV_TO_ZERO_DEG after update, continue with trajectory control
		if (homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006c26:	4b6c      	ldr	r3, [pc, #432]	@ (8006dd8 <update_control_loops+0x280>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	2b07      	cmp	r3, #7
 8006c2c:	d013      	beq.n	8006c56 <update_control_loops+0xfe>
			// Let the trajectory system handle the motion
			// Fall through to the switch statement below
		} else {
			// Homing sequence advanced to next state, return
			prismatic_axis.mm = prismatic_encoder.mm;
 8006c2e:	4b65      	ldr	r3, [pc, #404]	@ (8006dc4 <update_control_loops+0x26c>)
 8006c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c32:	4a65      	ldr	r2, [pc, #404]	@ (8006dc8 <update_control_loops+0x270>)
 8006c34:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006c36:	4b62      	ldr	r3, [pc, #392]	@ (8006dc0 <update_control_loops+0x268>)
 8006c38:	edd3 7a00 	vldr	s15, [r3]
 8006c3c:	220e      	movs	r2, #14
 8006c3e:	210f      	movs	r1, #15
 8006c40:	eeb0 0a67 	vmov.f32	s0, s15
 8006c44:	4861      	ldr	r0, [pc, #388]	@ (8006dcc <update_control_loops+0x274>)
 8006c46:	f7fd ffe3 	bl	8004c10 <UnitConverter_angle>
 8006c4a:	eef0 7a40 	vmov.f32	s15, s0
 8006c4e:	4b60      	ldr	r3, [pc, #384]	@ (8006dd0 <update_control_loops+0x278>)
 8006c50:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
			return;
 8006c54:	e158      	b.n	8006f08 <update_control_loops+0x3b0>
		}
	}

	// Motion sequence handling
	switch (motion_sequence_state) {
 8006c56:	4b64      	ldr	r3, [pc, #400]	@ (8006de8 <update_control_loops+0x290>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	f200 8137 	bhi.w	8006ed0 <update_control_loops+0x378>
 8006c62:	a201      	add	r2, pc, #4	@ (adr r2, 8006c68 <update_control_loops+0x110>)
 8006c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c68:	08006c7d 	.word	0x08006c7d
 8006c6c:	08006cd9 	.word	0x08006cd9
 8006c70:	08006e05 	.word	0x08006e05
 8006c74:	08006eab 	.word	0x08006eab
 8006c78:	08006ec9 	.word	0x08006ec9
	case MOTION_PEN_UP_DELAY:
		if (++motion_delay_timer >= 1500) {
 8006c7c:	4b5b      	ldr	r3, [pc, #364]	@ (8006dec <update_control_loops+0x294>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3301      	adds	r3, #1
 8006c82:	4a5a      	ldr	r2, [pc, #360]	@ (8006dec <update_control_loops+0x294>)
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	f240 8122 	bls.w	8006ed4 <update_control_loops+0x37c>
			// Check if we're in HOMING_REV_TO_ZERO_DEG mode
			if (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006c90:	4b50      	ldr	r3, [pc, #320]	@ (8006dd4 <update_control_loops+0x27c>)
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d017      	beq.n	8006cc8 <update_control_loops+0x170>
 8006c98:	4b4f      	ldr	r3, [pc, #316]	@ (8006dd8 <update_control_loops+0x280>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	2b07      	cmp	r3, #7
 8006c9e:	d113      	bne.n	8006cc8 <update_control_loops+0x170>
				// Skip prismatic phase entirely - go directly to revolute motion
				revolute_axis.trajectory_active = true;
 8006ca0:	4b4b      	ldr	r3, [pc, #300]	@ (8006dd0 <update_control_loops+0x278>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8006ca8:	4b4f      	ldr	r3, [pc, #316]	@ (8006de8 <update_control_loops+0x290>)
 8006caa:	2203      	movs	r2, #3
 8006cac:	701a      	strb	r2, [r3, #0]

				// Ensure prismatic stays stationary
				prismatic_axis.trajectory_active = false;
 8006cae:	4b46      	ldr	r3, [pc, #280]	@ (8006dc8 <update_control_loops+0x270>)
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				prismatic_axis.position = prismatic_encoder.mm;
 8006cb6:	4b43      	ldr	r3, [pc, #268]	@ (8006dc4 <update_control_loops+0x26c>)
 8006cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cba:	4a43      	ldr	r2, [pc, #268]	@ (8006dc8 <update_control_loops+0x270>)
 8006cbc:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = 0.0f;
 8006cbe:	4b42      	ldr	r3, [pc, #264]	@ (8006dc8 <update_control_loops+0x270>)
 8006cc0:	f04f 0200 	mov.w	r2, #0
 8006cc4:	605a      	str	r2, [r3, #4]
				// Normal trajectory - activate prismatic first
				prismatic_axis.trajectory_active = true;
				motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
			}
		}
		break;
 8006cc6:	e105      	b.n	8006ed4 <update_control_loops+0x37c>
				prismatic_axis.trajectory_active = true;
 8006cc8:	4b3f      	ldr	r3, [pc, #252]	@ (8006dc8 <update_control_loops+0x270>)
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 8006cd0:	4b45      	ldr	r3, [pc, #276]	@ (8006de8 <update_control_loops+0x290>)
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	701a      	strb	r2, [r3, #0]
		break;
 8006cd6:	e0fd      	b.n	8006ed4 <update_control_loops+0x37c>

	case MOTION_PRISMATIC_ACTIVE:
		if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8006cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8006dc8 <update_control_loops+0x270>)
 8006cda:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 80fa 	beq.w	8006ed8 <update_control_loops+0x380>
 8006ce4:	4b42      	ldr	r3, [pc, #264]	@ (8006df0 <update_control_loops+0x298>)
 8006ce6:	7c1b      	ldrb	r3, [r3, #16]
 8006ce8:	f083 0301 	eor.w	r3, r3, #1
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 80f2 	beq.w	8006ed8 <update_control_loops+0x380>
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006cf4:	4b34      	ldr	r3, [pc, #208]	@ (8006dc8 <update_control_loops+0x270>)
 8006cf6:	ed93 8a03 	vldr	s16, [r3, #12]
 8006cfa:	4b33      	ldr	r3, [pc, #204]	@ (8006dc8 <update_control_loops+0x270>)
 8006cfc:	edd3 8a04 	vldr	s17, [r3, #16]
					prismatic_axis.initial_pos, prismatic_axis.target_pos,
					ZGX45RGG_400RPM_Constant.traject_sd_max,
 8006d00:	4b3c      	ldr	r3, [pc, #240]	@ (8006df4 <update_control_loops+0x29c>)
 8006d02:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006d06:	4610      	mov	r0, r2
 8006d08:	4619      	mov	r1, r3
 8006d0a:	f7f9 ff23 	bl	8000b54 <__aeabi_d2f>
 8006d0e:	4604      	mov	r4, r0
					ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8006d10:	4b38      	ldr	r3, [pc, #224]	@ (8006df4 <update_control_loops+0x29c>)
 8006d12:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
			Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006d16:	4610      	mov	r0, r2
 8006d18:	4619      	mov	r1, r3
 8006d1a:	f7f9 ff1b 	bl	8000b54 <__aeabi_d2f>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	ee01 3a90 	vmov	s3, r3
 8006d24:	ee01 4a10 	vmov	s2, r4
 8006d28:	eef0 0a68 	vmov.f32	s1, s17
 8006d2c:	eeb0 0a48 	vmov.f32	s0, s16
 8006d30:	492f      	ldr	r1, [pc, #188]	@ (8006df0 <update_control_loops+0x298>)
 8006d32:	4831      	ldr	r0, [pc, #196]	@ (8006df8 <update_control_loops+0x2a0>)
 8006d34:	f7fd fbd4 	bl	80044e0 <Trapezoidal_Evaluated>

			prismatic_axis.position = prisEva.setposition;
 8006d38:	4b2d      	ldr	r3, [pc, #180]	@ (8006df0 <update_control_loops+0x298>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a22      	ldr	r2, [pc, #136]	@ (8006dc8 <update_control_loops+0x270>)
 8006d3e:	6013      	str	r3, [r2, #0]
			prismatic_axis.velocity = prisEva.setvelocity;
 8006d40:	4b2b      	ldr	r3, [pc, #172]	@ (8006df0 <update_control_loops+0x298>)
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	4a20      	ldr	r2, [pc, #128]	@ (8006dc8 <update_control_loops+0x270>)
 8006d46:	6053      	str	r3, [r2, #4]

			if (prisEva.isFinised) {
 8006d48:	4b29      	ldr	r3, [pc, #164]	@ (8006df0 <update_control_loops+0x298>)
 8006d4a:	7c1b      	ldrb	r3, [r3, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 80c3 	beq.w	8006ed8 <update_control_loops+0x380>
				prismatic_axis.trajectory_active = false;
 8006d52:	4b1d      	ldr	r3, [pc, #116]	@ (8006dc8 <update_control_loops+0x270>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				prismatic_axis.position = prisEva.setposition;
 8006d5a:	4b25      	ldr	r3, [pc, #148]	@ (8006df0 <update_control_loops+0x298>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a1a      	ldr	r2, [pc, #104]	@ (8006dc8 <update_control_loops+0x270>)
 8006d60:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = 0.0f;
 8006d62:	4b19      	ldr	r3, [pc, #100]	@ (8006dc8 <update_control_loops+0x270>)
 8006d64:	f04f 0200 	mov.w	r2, #0
 8006d68:	605a      	str	r2, [r3, #4]

				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006d6a:	4b19      	ldr	r3, [pc, #100]	@ (8006dd0 <update_control_loops+0x278>)
 8006d6c:	ed93 8a03 	vldr	s16, [r3, #12]
 8006d70:	4b17      	ldr	r3, [pc, #92]	@ (8006dd0 <update_control_loops+0x278>)
 8006d72:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006d76:	4b21      	ldr	r3, [pc, #132]	@ (8006dfc <update_control_loops+0x2a4>)
 8006d78:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	4619      	mov	r1, r3
 8006d80:	f7f9 fee8 	bl	8000b54 <__aeabi_d2f>
 8006d84:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006d86:	4b1d      	ldr	r3, [pc, #116]	@ (8006dfc <update_control_loops+0x2a4>)
 8006d88:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	4619      	mov	r1, r3
 8006d90:	f7f9 fee0 	bl	8000b54 <__aeabi_d2f>
 8006d94:	4603      	mov	r3, r0
 8006d96:	ee01 3a90 	vmov	s3, r3
 8006d9a:	ee01 4a10 	vmov	s2, r4
 8006d9e:	eef0 0a68 	vmov.f32	s1, s17
 8006da2:	eeb0 0a48 	vmov.f32	s0, s16
 8006da6:	4816      	ldr	r0, [pc, #88]	@ (8006e00 <update_control_loops+0x2a8>)
 8006da8:	f7fd fad8 	bl	800435c <Trapezoidal_Generator>

				revolute_axis.trajectory_active = true;
 8006dac:	4b08      	ldr	r3, [pc, #32]	@ (8006dd0 <update_control_loops+0x278>)
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8006db4:	4b0c      	ldr	r3, [pc, #48]	@ (8006de8 <update_control_loops+0x290>)
 8006db6:	2203      	movs	r2, #3
 8006db8:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8006dba:	e08d      	b.n	8006ed8 <update_control_loops+0x380>
 8006dbc:	200006fc 	.word	0x200006fc
 8006dc0:	2000057c 	.word	0x2000057c
 8006dc4:	200006a0 	.word	0x200006a0
 8006dc8:	20000480 	.word	0x20000480
 8006dcc:	20000a94 	.word	0x20000a94
 8006dd0:	200004c4 	.word	0x200004c4
 8006dd4:	2000056b 	.word	0x2000056b
 8006dd8:	2000056a 	.word	0x2000056a
 8006ddc:	44fa0000 	.word	0x44fa0000
 8006de0:	20000608 	.word	0x20000608
 8006de4:	20000654 	.word	0x20000654
 8006de8:	20000508 	.word	0x20000508
 8006dec:	20000560 	.word	0x20000560
 8006df0:	20000534 	.word	0x20000534
 8006df4:	20000080 	.word	0x20000080
 8006df8:	2000050c 	.word	0x2000050c
 8006dfc:	20000000 	.word	0x20000000
 8006e00:	20000520 	.word	0x20000520

	case MOTION_REVOLUTE_ACTIVE:
		if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8006e04:	4b42      	ldr	r3, [pc, #264]	@ (8006f10 <update_control_loops+0x3b8>)
 8006e06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d066      	beq.n	8006edc <update_control_loops+0x384>
 8006e0e:	4b41      	ldr	r3, [pc, #260]	@ (8006f14 <update_control_loops+0x3bc>)
 8006e10:	7c1b      	ldrb	r3, [r3, #16]
 8006e12:	f083 0301 	eor.w	r3, r3, #1
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d05f      	beq.n	8006edc <update_control_loops+0x384>
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006e1c:	4b3c      	ldr	r3, [pc, #240]	@ (8006f10 <update_control_loops+0x3b8>)
 8006e1e:	ed93 8a03 	vldr	s16, [r3, #12]
 8006e22:	4b3b      	ldr	r3, [pc, #236]	@ (8006f10 <update_control_loops+0x3b8>)
 8006e24:	edd3 8a04 	vldr	s17, [r3, #16]
					revolute_axis.target_pos,
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006e28:	4b3b      	ldr	r3, [pc, #236]	@ (8006f18 <update_control_loops+0x3c0>)
 8006e2a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006e2e:	4610      	mov	r0, r2
 8006e30:	4619      	mov	r1, r3
 8006e32:	f7f9 fe8f 	bl	8000b54 <__aeabi_d2f>
 8006e36:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006e38:	4b37      	ldr	r3, [pc, #220]	@ (8006f18 <update_control_loops+0x3c0>)
 8006e3a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006e3e:	4610      	mov	r0, r2
 8006e40:	4619      	mov	r1, r3
 8006e42:	f7f9 fe87 	bl	8000b54 <__aeabi_d2f>
 8006e46:	4603      	mov	r3, r0
 8006e48:	ee01 3a90 	vmov	s3, r3
 8006e4c:	ee01 4a10 	vmov	s2, r4
 8006e50:	eef0 0a68 	vmov.f32	s1, s17
 8006e54:	eeb0 0a48 	vmov.f32	s0, s16
 8006e58:	492e      	ldr	r1, [pc, #184]	@ (8006f14 <update_control_loops+0x3bc>)
 8006e5a:	4830      	ldr	r0, [pc, #192]	@ (8006f1c <update_control_loops+0x3c4>)
 8006e5c:	f7fd fb40 	bl	80044e0 <Trapezoidal_Evaluated>

			revolute_axis.position = revEva.setposition;
 8006e60:	4b2c      	ldr	r3, [pc, #176]	@ (8006f14 <update_control_loops+0x3bc>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a2a      	ldr	r2, [pc, #168]	@ (8006f10 <update_control_loops+0x3b8>)
 8006e66:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = revEva.setvelocity;
 8006e68:	4b2a      	ldr	r3, [pc, #168]	@ (8006f14 <update_control_loops+0x3bc>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	4a28      	ldr	r2, [pc, #160]	@ (8006f10 <update_control_loops+0x3b8>)
 8006e6e:	6053      	str	r3, [r2, #4]

			if (revEva.isFinised) {
 8006e70:	4b28      	ldr	r3, [pc, #160]	@ (8006f14 <update_control_loops+0x3bc>)
 8006e72:	7c1b      	ldrb	r3, [r3, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d031      	beq.n	8006edc <update_control_loops+0x384>
				revolute_axis.trajectory_active = false;
 8006e78:	4b25      	ldr	r3, [pc, #148]	@ (8006f10 <update_control_loops+0x3b8>)
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				revolute_axis.position = revEva.setposition;
 8006e80:	4b24      	ldr	r3, [pc, #144]	@ (8006f14 <update_control_loops+0x3bc>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a22      	ldr	r2, [pc, #136]	@ (8006f10 <update_control_loops+0x3b8>)
 8006e86:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = 0.0f;
 8006e88:	4b21      	ldr	r3, [pc, #132]	@ (8006f10 <update_control_loops+0x3b8>)
 8006e8a:	f04f 0200 	mov.w	r2, #0
 8006e8e:	605a      	str	r2, [r3, #4]

				PID_CONTROLLER_Reset(&revolute_position_pid);
 8006e90:	4823      	ldr	r0, [pc, #140]	@ (8006f20 <update_control_loops+0x3c8>)
 8006e92:	f7fa fa53 	bl	800133c <PID_CONTROLLER_Reset>
				PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006e96:	4823      	ldr	r0, [pc, #140]	@ (8006f24 <update_control_loops+0x3cc>)
 8006e98:	f7fa fa50 	bl	800133c <PID_CONTROLLER_Reset>

				motion_delay_timer = 0;
 8006e9c:	4b22      	ldr	r3, [pc, #136]	@ (8006f28 <update_control_loops+0x3d0>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8006ea2:	4b22      	ldr	r3, [pc, #136]	@ (8006f2c <update_control_loops+0x3d4>)
 8006ea4:	2204      	movs	r2, #4
 8006ea6:	701a      	strb	r2, [r3, #0]
			}
		}
		break;
 8006ea8:	e018      	b.n	8006edc <update_control_loops+0x384>

	case MOTION_PEN_DOWN_DELAY:
		if (++motion_delay_timer >= 1500) {
 8006eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8006f28 <update_control_loops+0x3d0>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3301      	adds	r3, #1
 8006eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8006f28 <update_control_loops+0x3d0>)
 8006eb2:	6013      	str	r3, [r2, #0]
 8006eb4:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d911      	bls.n	8006ee0 <update_control_loops+0x388>
			plotter_pen_down();
 8006ebc:	f002 f9ae 	bl	800921c <plotter_pen_down>
			motion_sequence_state = MOTION_COMPLETE;
 8006ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8006f2c <update_control_loops+0x3d4>)
 8006ec2:	2205      	movs	r2, #5
 8006ec4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006ec6:	e00b      	b.n	8006ee0 <update_control_loops+0x388>

	case MOTION_COMPLETE:
		motion_sequence_state = MOTION_IDLE;
 8006ec8:	4b18      	ldr	r3, [pc, #96]	@ (8006f2c <update_control_loops+0x3d4>)
 8006eca:	2200      	movs	r2, #0
 8006ecc:	701a      	strb	r2, [r3, #0]
		break;
 8006ece:	e008      	b.n	8006ee2 <update_control_loops+0x38a>

	default:
		break;
 8006ed0:	bf00      	nop
 8006ed2:	e006      	b.n	8006ee2 <update_control_loops+0x38a>
		break;
 8006ed4:	bf00      	nop
 8006ed6:	e004      	b.n	8006ee2 <update_control_loops+0x38a>
		break;
 8006ed8:	bf00      	nop
 8006eda:	e002      	b.n	8006ee2 <update_control_loops+0x38a>
		break;
 8006edc:	bf00      	nop
 8006ede:	e000      	b.n	8006ee2 <update_control_loops+0x38a>
		break;
 8006ee0:	bf00      	nop
	}

	prismatic_axis.mm = prismatic_encoder.mm;
 8006ee2:	4b13      	ldr	r3, [pc, #76]	@ (8006f30 <update_control_loops+0x3d8>)
 8006ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ee6:	4a13      	ldr	r2, [pc, #76]	@ (8006f34 <update_control_loops+0x3dc>)
 8006ee8:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006eea:	4b13      	ldr	r3, [pc, #76]	@ (8006f38 <update_control_loops+0x3e0>)
 8006eec:	edd3 7a00 	vldr	s15, [r3]
 8006ef0:	220e      	movs	r2, #14
 8006ef2:	210f      	movs	r1, #15
 8006ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8006ef8:	4810      	ldr	r0, [pc, #64]	@ (8006f3c <update_control_loops+0x3e4>)
 8006efa:	f7fd fe89 	bl	8004c10 <UnitConverter_angle>
 8006efe:	eef0 7a40 	vmov.f32	s15, s0
 8006f02:	4b03      	ldr	r3, [pc, #12]	@ (8006f10 <update_control_loops+0x3b8>)
 8006f04:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	ecbd 8b02 	vpop	{d8}
 8006f0e:	bd98      	pop	{r3, r4, r7, pc}
 8006f10:	200004c4 	.word	0x200004c4
 8006f14:	20000548 	.word	0x20000548
 8006f18:	20000000 	.word	0x20000000
 8006f1c:	20000520 	.word	0x20000520
 8006f20:	200007a8 	.word	0x200007a8
 8006f24:	200007d0 	.word	0x200007d0
 8006f28:	20000560 	.word	0x20000560
 8006f2c:	20000508 	.word	0x20000508
 8006f30:	200006a0 	.word	0x200006a0
 8006f34:	20000480 	.word	0x20000480
 8006f38:	2000057c 	.word	0x2000057c
 8006f3c:	20000a94 	.word	0x20000a94

08006f40 <check_emergency_button>:

void check_emergency_button(void) {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
	// Read current state of emergency button
	bool emer_pressed = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8006f46:	2110      	movs	r1, #16
 8006f48:	480c      	ldr	r0, [pc, #48]	@ (8006f7c <check_emergency_button+0x3c>)
 8006f4a:	f005 fc97 	bl	800c87c <HAL_GPIO_ReadPin>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	bf14      	ite	ne
 8006f54:	2301      	movne	r3, #1
 8006f56:	2300      	moveq	r3, #0
 8006f58:	71fb      	strb	r3, [r7, #7]
	// If emergency button is pressed (assuming active high)
	// Adjust the logic based on your hardware:
	// - If button is active HIGH when pressed: use == GPIO_PIN_SET
	// - If button is active LOW when pressed: use == GPIO_PIN_RESET

	if (emer_pressed == GPIO_PIN_RESET) {  // Assuming active high
 8006f5a:	79fb      	ldrb	r3, [r7, #7]
 8006f5c:	f083 0301 	eor.w	r3, r3, #1
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d005      	beq.n	8006f72 <check_emergency_button+0x32>
		// Emergency button is pressed - trigger hardware emergency
		if (safety_state != SAFETY_HARDWARE_EMERGENCY) {
 8006f66:	4b06      	ldr	r3, [pc, #24]	@ (8006f80 <check_emergency_button+0x40>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d001      	beq.n	8006f72 <check_emergency_button+0x32>
			trigger_hardware_emergency();
 8006f6e:	f000 f877 	bl	8007060 <trigger_hardware_emergency>
	 // Auto-clear emergency when button released (NOT RECOMMENDED)
	 // clear_emergency_state();
	 }
	 }
	 */
}
 8006f72:	bf00      	nop
 8006f74:	3708      	adds	r7, #8
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	48000400 	.word	0x48000400
 8006f80:	2000056c 	.word	0x2000056c

08006f84 <check_safety_conditions>:

void check_safety_conditions(void) {
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
	if (tuning_mode || safety_state != SAFETY_NORMAL || homing_active)
 8006f88:	4b16      	ldr	r3, [pc, #88]	@ (8006fe4 <check_safety_conditions+0x60>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d127      	bne.n	8006fe0 <check_safety_conditions+0x5c>
 8006f90:	4b15      	ldr	r3, [pc, #84]	@ (8006fe8 <check_safety_conditions+0x64>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d123      	bne.n	8006fe0 <check_safety_conditions+0x5c>
 8006f98:	4b14      	ldr	r3, [pc, #80]	@ (8006fec <check_safety_conditions+0x68>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d11f      	bne.n	8006fe0 <check_safety_conditions+0x5c>
		return;

	if (up_photo && prismatic_axis.command_pos < 0.0f) {
 8006fa0:	4b13      	ldr	r3, [pc, #76]	@ (8006ff0 <check_safety_conditions+0x6c>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <check_safety_conditions+0x3c>
 8006faa:	4b12      	ldr	r3, [pc, #72]	@ (8006ff4 <check_safety_conditions+0x70>)
 8006fac:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006fb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb8:	d502      	bpl.n	8006fc0 <check_safety_conditions+0x3c>
		trigger_software_emergency();
 8006fba:	f000 f81f 	bl	8006ffc <trigger_software_emergency>
		return;
 8006fbe:	e010      	b.n	8006fe2 <check_safety_conditions+0x5e>
	}

	if (low_photo && prismatic_axis.command_pos > 0.0f) {
 8006fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff8 <check_safety_conditions+0x74>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00b      	beq.n	8006fe2 <check_safety_conditions+0x5e>
 8006fca:	4b0a      	ldr	r3, [pc, #40]	@ (8006ff4 <check_safety_conditions+0x70>)
 8006fcc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006fd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd8:	dd03      	ble.n	8006fe2 <check_safety_conditions+0x5e>
		trigger_software_emergency();
 8006fda:	f000 f80f 	bl	8006ffc <trigger_software_emergency>
		return;
 8006fde:	e000      	b.n	8006fe2 <check_safety_conditions+0x5e>
		return;
 8006fe0:	bf00      	nop
	}
}
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	20000334 	.word	0x20000334
 8006fe8:	2000056c 	.word	0x2000056c
 8006fec:	2000056b 	.word	0x2000056b
 8006ff0:	20000568 	.word	0x20000568
 8006ff4:	20000480 	.word	0x20000480
 8006ff8:	20000569 	.word	0x20000569

08006ffc <trigger_software_emergency>:

void trigger_software_emergency(void) {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	af00      	add	r7, sp, #0
	if (safety_state == SAFETY_NORMAL) {
 8007000:	4b10      	ldr	r3, [pc, #64]	@ (8007044 <trigger_software_emergency+0x48>)
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d11b      	bne.n	8007040 <trigger_software_emergency+0x44>
		safety_state = SAFETY_SOFTWARE_EMERGENCY;
 8007008:	4b0e      	ldr	r3, [pc, #56]	@ (8007044 <trigger_software_emergency+0x48>)
 800700a:	2201      	movs	r2, #1
 800700c:	701a      	strb	r2, [r3, #0]
		emergency_stop_all_motors();
 800700e:	f000 f88f 	bl	8007130 <emergency_stop_all_motors>
		safety_toggle_timer = 0;
 8007012:	4b0d      	ldr	r3, [pc, #52]	@ (8007048 <trigger_software_emergency+0x4c>)
 8007014:	2200      	movs	r2, #0
 8007016:	601a      	str	r2, [r3, #0]
		pilot_light_state = false;
 8007018:	4b0c      	ldr	r3, [pc, #48]	@ (800704c <trigger_software_emergency+0x50>)
 800701a:	2200      	movs	r2, #0
 800701c:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 800701e:	4b0c      	ldr	r3, [pc, #48]	@ (8007050 <trigger_software_emergency+0x54>)
 8007020:	2200      	movs	r2, #0
 8007022:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 8007024:	4b0b      	ldr	r3, [pc, #44]	@ (8007054 <trigger_software_emergency+0x58>)
 8007026:	2200      	movs	r2, #0
 8007028:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 800702c:	4b0a      	ldr	r3, [pc, #40]	@ (8007058 <trigger_software_emergency+0x5c>)
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		// Exit joy mode if active
		if (joy_mode_active) {
 8007034:	4b09      	ldr	r3, [pc, #36]	@ (800705c <trigger_software_emergency+0x60>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <trigger_software_emergency+0x44>
			exit_joy_mode();
 800703c:	f000 f9c2 	bl	80073c4 <exit_joy_mode>
		}
	}
}
 8007040:	bf00      	nop
 8007042:	bd80      	pop	{r7, pc}
 8007044:	2000056c 	.word	0x2000056c
 8007048:	20000570 	.word	0x20000570
 800704c:	20000574 	.word	0x20000574
 8007050:	20000508 	.word	0x20000508
 8007054:	20000480 	.word	0x20000480
 8007058:	200004c4 	.word	0x200004c4
 800705c:	20000585 	.word	0x20000585

08007060 <trigger_hardware_emergency>:

void trigger_hardware_emergency(void) {
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
	safety_state = SAFETY_HARDWARE_EMERGENCY;
 8007064:	4b13      	ldr	r3, [pc, #76]	@ (80070b4 <trigger_hardware_emergency+0x54>)
 8007066:	2202      	movs	r2, #2
 8007068:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = true;
 800706a:	4b13      	ldr	r3, [pc, #76]	@ (80070b8 <trigger_hardware_emergency+0x58>)
 800706c:	2201      	movs	r2, #1
 800706e:	701a      	strb	r2, [r3, #0]
	emergency_stop_all_motors();
 8007070:	f000 f85e 	bl	8007130 <emergency_stop_all_motors>
	safety_toggle_timer = 0;
 8007074:	4b11      	ldr	r3, [pc, #68]	@ (80070bc <trigger_hardware_emergency+0x5c>)
 8007076:	2200      	movs	r2, #0
 8007078:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 800707a:	4b11      	ldr	r3, [pc, #68]	@ (80070c0 <trigger_hardware_emergency+0x60>)
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]
	homing_active = false;
 8007080:	4b10      	ldr	r3, [pc, #64]	@ (80070c4 <trigger_hardware_emergency+0x64>)
 8007082:	2200      	movs	r2, #0
 8007084:	701a      	strb	r2, [r3, #0]
	homing_state = HOMING_IDLE;
 8007086:	4b10      	ldr	r3, [pc, #64]	@ (80070c8 <trigger_hardware_emergency+0x68>)
 8007088:	2200      	movs	r2, #0
 800708a:	701a      	strb	r2, [r3, #0]
	motion_sequence_state = MOTION_IDLE;
 800708c:	4b0f      	ldr	r3, [pc, #60]	@ (80070cc <trigger_hardware_emergency+0x6c>)
 800708e:	2200      	movs	r2, #0
 8007090:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8007092:	4b0f      	ldr	r3, [pc, #60]	@ (80070d0 <trigger_hardware_emergency+0x70>)
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 800709a:	4b0e      	ldr	r3, [pc, #56]	@ (80070d4 <trigger_hardware_emergency+0x74>)
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Exit joy mode if active
	if (joy_mode_active) {
 80070a2:	4b0d      	ldr	r3, [pc, #52]	@ (80070d8 <trigger_hardware_emergency+0x78>)
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <trigger_hardware_emergency+0x4e>
		exit_joy_mode();
 80070aa:	f000 f98b 	bl	80073c4 <exit_joy_mode>
	}
}
 80070ae:	bf00      	nop
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	2000056c 	.word	0x2000056c
 80070b8:	20000575 	.word	0x20000575
 80070bc:	20000570 	.word	0x20000570
 80070c0:	20000574 	.word	0x20000574
 80070c4:	2000056b 	.word	0x2000056b
 80070c8:	2000056a 	.word	0x2000056a
 80070cc:	20000508 	.word	0x20000508
 80070d0:	20000480 	.word	0x20000480
 80070d4:	200004c4 	.word	0x200004c4
 80070d8:	20000585 	.word	0x20000585

080070dc <clear_emergency_state>:

void clear_emergency_state(void) {
 80070dc:	b580      	push	{r7, lr}
 80070de:	af00      	add	r7, sp, #0
	safety_state = SAFETY_NORMAL;
 80070e0:	4b0d      	ldr	r3, [pc, #52]	@ (8007118 <clear_emergency_state+0x3c>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 80070e6:	4b0d      	ldr	r3, [pc, #52]	@ (800711c <clear_emergency_state+0x40>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 80070ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007120 <clear_emergency_state+0x44>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 80070f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007124 <clear_emergency_state+0x48>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 80070f8:	2200      	movs	r2, #0
 80070fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80070fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007102:	f005 fbd3 	bl	800c8ac <HAL_GPIO_WritePin>
	up_photo = false;
 8007106:	4b08      	ldr	r3, [pc, #32]	@ (8007128 <clear_emergency_state+0x4c>)
 8007108:	2200      	movs	r2, #0
 800710a:	701a      	strb	r2, [r3, #0]
	low_photo = false;
 800710c:	4b07      	ldr	r3, [pc, #28]	@ (800712c <clear_emergency_state+0x50>)
 800710e:	2200      	movs	r2, #0
 8007110:	701a      	strb	r2, [r3, #0]
}
 8007112:	bf00      	nop
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	2000056c 	.word	0x2000056c
 800711c:	20000575 	.word	0x20000575
 8007120:	20000570 	.word	0x20000570
 8007124:	20000574 	.word	0x20000574
 8007128:	20000568 	.word	0x20000568
 800712c:	20000569 	.word	0x20000569

08007130 <emergency_stop_all_motors>:

void emergency_stop_all_motors(void) {
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
	MDXX_set_range(&prismatic_motor, 2000, 0);
 8007134:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8007194 <emergency_stop_all_motors+0x64>
 8007138:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8007198 <emergency_stop_all_motors+0x68>
 800713c:	4817      	ldr	r0, [pc, #92]	@ (800719c <emergency_stop_all_motors+0x6c>)
 800713e:	f7fa f943 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8007142:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8007194 <emergency_stop_all_motors+0x64>
 8007146:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8007198 <emergency_stop_all_motors+0x68>
 800714a:	4815      	ldr	r0, [pc, #84]	@ (80071a0 <emergency_stop_all_motors+0x70>)
 800714c:	f7fa f93c 	bl	80013c8 <MDXX_set_range>

	prismatic_axis.command_pos = 0.0f;
 8007150:	4b14      	ldr	r3, [pc, #80]	@ (80071a4 <emergency_stop_all_motors+0x74>)
 8007152:	f04f 0200 	mov.w	r2, #0
 8007156:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8007158:	4b13      	ldr	r3, [pc, #76]	@ (80071a8 <emergency_stop_all_motors+0x78>)
 800715a:	f04f 0200 	mov.w	r2, #0
 800715e:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8007160:	4b10      	ldr	r3, [pc, #64]	@ (80071a4 <emergency_stop_all_motors+0x74>)
 8007162:	f04f 0200 	mov.w	r2, #0
 8007166:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007168:	4b0f      	ldr	r3, [pc, #60]	@ (80071a8 <emergency_stop_all_motors+0x78>)
 800716a:	f04f 0200 	mov.w	r2, #0
 800716e:	629a      	str	r2, [r3, #40]	@ 0x28

	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8007170:	480e      	ldr	r0, [pc, #56]	@ (80071ac <emergency_stop_all_motors+0x7c>)
 8007172:	f7fa f8e3 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8007176:	480e      	ldr	r0, [pc, #56]	@ (80071b0 <emergency_stop_all_motors+0x80>)
 8007178:	f7fa f8e0 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 800717c:	480d      	ldr	r0, [pc, #52]	@ (80071b4 <emergency_stop_all_motors+0x84>)
 800717e:	f7fa f8dd 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007182:	480d      	ldr	r0, [pc, #52]	@ (80071b8 <emergency_stop_all_motors+0x88>)
 8007184:	f7fa f8da 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007188:	480b      	ldr	r0, [pc, #44]	@ (80071b8 <emergency_stop_all_motors+0x88>)
 800718a:	f7fa f8d7 	bl	800133c <PID_CONTROLLER_Reset>
}
 800718e:	bf00      	nop
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	00000000 	.word	0x00000000
 8007198:	44fa0000 	.word	0x44fa0000
 800719c:	20000608 	.word	0x20000608
 80071a0:	20000654 	.word	0x20000654
 80071a4:	20000480 	.word	0x20000480
 80071a8:	200004c4 	.word	0x200004c4
 80071ac:	20000758 	.word	0x20000758
 80071b0:	20000780 	.word	0x20000780
 80071b4:	200007a8 	.word	0x200007a8
 80071b8:	200007d0 	.word	0x200007d0

080071bc <update_safety_system>:

void update_safety_system(void) {
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0
	// Don't control pilot light if joy mode is active
	if (joy_mode_active) {
 80071c0:	4b3a      	ldr	r3, [pc, #232]	@ (80072ac <update_safety_system+0xf0>)
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d16e      	bne.n	80072a6 <update_safety_system+0xea>
		return; // Let joy mode handle pilot light
	}

	if (safety_state == SAFETY_SOFTWARE_EMERGENCY) {
 80071c8:	4b39      	ldr	r3, [pc, #228]	@ (80072b0 <update_safety_system+0xf4>)
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d11f      	bne.n	8007210 <update_safety_system+0x54>
		if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 80071d0:	4b38      	ldr	r3, [pc, #224]	@ (80072b4 <update_safety_system+0xf8>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3301      	adds	r3, #1
 80071d6:	4a37      	ldr	r2, [pc, #220]	@ (80072b4 <update_safety_system+0xf8>)
 80071d8:	6013      	str	r3, [r2, #0]
 80071da:	2bf9      	cmp	r3, #249	@ 0xf9
 80071dc:	d918      	bls.n	8007210 <update_safety_system+0x54>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 80071de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80071e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80071e6:	f005 fb79 	bl	800c8dc <HAL_GPIO_TogglePin>
			pilot_light_state = !pilot_light_state;
 80071ea:	4b33      	ldr	r3, [pc, #204]	@ (80072b8 <update_safety_system+0xfc>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	bf14      	ite	ne
 80071f4:	2301      	movne	r3, #1
 80071f6:	2300      	moveq	r3, #0
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	f083 0301 	eor.w	r3, r3, #1
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	b2da      	uxtb	r2, r3
 8007206:	4b2c      	ldr	r3, [pc, #176]	@ (80072b8 <update_safety_system+0xfc>)
 8007208:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 800720a:	4b2a      	ldr	r3, [pc, #168]	@ (80072b4 <update_safety_system+0xf8>)
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_HARDWARE_EMERGENCY) {
 8007210:	4b27      	ldr	r3, [pc, #156]	@ (80072b0 <update_safety_system+0xf4>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b02      	cmp	r3, #2
 8007216:	d134      	bne.n	8007282 <update_safety_system+0xc6>
		if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_SET) {
 8007218:	2110      	movs	r1, #16
 800721a:	4828      	ldr	r0, [pc, #160]	@ (80072bc <update_safety_system+0x100>)
 800721c:	f005 fb2e 	bl	800c87c <HAL_GPIO_ReadPin>
 8007220:	4603      	mov	r3, r0
 8007222:	2b01      	cmp	r3, #1
 8007224:	d120      	bne.n	8007268 <update_safety_system+0xac>
			if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8007226:	4b23      	ldr	r3, [pc, #140]	@ (80072b4 <update_safety_system+0xf8>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3301      	adds	r3, #1
 800722c:	4a21      	ldr	r2, [pc, #132]	@ (80072b4 <update_safety_system+0xf8>)
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	2bf9      	cmp	r3, #249	@ 0xf9
 8007232:	d926      	bls.n	8007282 <update_safety_system+0xc6>
				HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8007234:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007238:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800723c:	f005 fb4e 	bl	800c8dc <HAL_GPIO_TogglePin>
				pilot_light_state = !pilot_light_state;
 8007240:	4b1d      	ldr	r3, [pc, #116]	@ (80072b8 <update_safety_system+0xfc>)
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b00      	cmp	r3, #0
 8007248:	bf14      	ite	ne
 800724a:	2301      	movne	r3, #1
 800724c:	2300      	moveq	r3, #0
 800724e:	b2db      	uxtb	r3, r3
 8007250:	f083 0301 	eor.w	r3, r3, #1
 8007254:	b2db      	uxtb	r3, r3
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	b2da      	uxtb	r2, r3
 800725c:	4b16      	ldr	r3, [pc, #88]	@ (80072b8 <update_safety_system+0xfc>)
 800725e:	701a      	strb	r2, [r3, #0]
				safety_toggle_timer = 0;
 8007260:	4b14      	ldr	r3, [pc, #80]	@ (80072b4 <update_safety_system+0xf8>)
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	e00c      	b.n	8007282 <update_safety_system+0xc6>
			}
		} else {
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007268:	2200      	movs	r2, #0
 800726a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800726e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007272:	f005 fb1b 	bl	800c8ac <HAL_GPIO_WritePin>
			pilot_light_state = false;
 8007276:	4b10      	ldr	r3, [pc, #64]	@ (80072b8 <update_safety_system+0xfc>)
 8007278:	2200      	movs	r2, #0
 800727a:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 800727c:	4b0d      	ldr	r3, [pc, #52]	@ (80072b4 <update_safety_system+0xf8>)
 800727e:	2200      	movs	r2, #0
 8007280:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_NORMAL) {
 8007282:	4b0b      	ldr	r3, [pc, #44]	@ (80072b0 <update_safety_system+0xf4>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10e      	bne.n	80072a8 <update_safety_system+0xec>
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 800728a:	2200      	movs	r2, #0
 800728c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007290:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007294:	f005 fb0a 	bl	800c8ac <HAL_GPIO_WritePin>
		pilot_light_state = false;
 8007298:	4b07      	ldr	r3, [pc, #28]	@ (80072b8 <update_safety_system+0xfc>)
 800729a:	2200      	movs	r2, #0
 800729c:	701a      	strb	r2, [r3, #0]
		safety_toggle_timer = 0;
 800729e:	4b05      	ldr	r3, [pc, #20]	@ (80072b4 <update_safety_system+0xf8>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	e000      	b.n	80072a8 <update_safety_system+0xec>
		return; // Let joy mode handle pilot light
 80072a6:	bf00      	nop
	}
}
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	20000585 	.word	0x20000585
 80072b0:	2000056c 	.word	0x2000056c
 80072b4:	20000570 	.word	0x20000570
 80072b8:	20000574 	.word	0x20000574
 80072bc:	48000400 	.word	0x48000400

080072c0 <is_emergency_active>:

bool is_emergency_active(void) {
 80072c0:	b480      	push	{r7}
 80072c2:	af00      	add	r7, sp, #0
	return (safety_state != SAFETY_NORMAL);
 80072c4:	4b05      	ldr	r3, [pc, #20]	@ (80072dc <is_emergency_active+0x1c>)
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	bf14      	ite	ne
 80072cc:	2301      	movne	r3, #1
 80072ce:	2300      	moveq	r3, #0
 80072d0:	b2db      	uxtb	r3, r3
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	2000056c 	.word	0x2000056c

080072e0 <enter_joy_mode>:

void enter_joy_mode(void) {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 80072e4:	f7ff ffec 	bl	80072c0 <is_emergency_active>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d14c      	bne.n	8007388 <enter_joy_mode+0xa8>
 80072ee:	4b27      	ldr	r3, [pc, #156]	@ (800738c <enter_joy_mode+0xac>)
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d148      	bne.n	8007388 <enter_joy_mode+0xa8>
 80072f6:	4b26      	ldr	r3, [pc, #152]	@ (8007390 <enter_joy_mode+0xb0>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d144      	bne.n	8007388 <enter_joy_mode+0xa8>
		return;
	}

	joy_mode_active = true;
 80072fe:	4b24      	ldr	r3, [pc, #144]	@ (8007390 <enter_joy_mode+0xb0>)
 8007300:	2201      	movs	r2, #1
 8007302:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_INITIAL_CONTROL; // Start in initial control state
 8007304:	4b23      	ldr	r3, [pc, #140]	@ (8007394 <enter_joy_mode+0xb4>)
 8007306:	2201      	movs	r2, #1
 8007308:	701a      	strb	r2, [r3, #0]

	// Reset all joy mode data
	reset_joy_mode_data();
 800730a:	f000 f9e5 	bl	80076d8 <reset_joy_mode_data>

	// Turn on pilot light to indicate joy mode
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 800730e:	2201      	movs	r2, #1
 8007310:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007314:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007318:	f005 fac8 	bl	800c8ac <HAL_GPIO_WritePin>
	joy_mode_pilot_state = true;
 800731c:	4b1e      	ldr	r3, [pc, #120]	@ (8007398 <enter_joy_mode+0xb8>)
 800731e:	2201      	movs	r2, #1
 8007320:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 8007322:	4b1e      	ldr	r3, [pc, #120]	@ (800739c <enter_joy_mode+0xbc>)
 8007324:	2200      	movs	r2, #0
 8007326:	601a      	str	r2, [r3, #0]

	// Stop any current motion
	motion_sequence_state = MOTION_IDLE;
 8007328:	4b1d      	ldr	r3, [pc, #116]	@ (80073a0 <enter_joy_mode+0xc0>)
 800732a:	2200      	movs	r2, #0
 800732c:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 800732e:	4b1d      	ldr	r3, [pc, #116]	@ (80073a4 <enter_joy_mode+0xc4>)
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8007336:	4b1c      	ldr	r3, [pc, #112]	@ (80073a8 <enter_joy_mode+0xc8>)
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Initialize position holding at current positions
	prismatic_axis.position = prismatic_encoder.mm;
 800733e:	4b1b      	ldr	r3, [pc, #108]	@ (80073ac <enter_joy_mode+0xcc>)
 8007340:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007342:	4a18      	ldr	r2, [pc, #96]	@ (80073a4 <enter_joy_mode+0xc4>)
 8007344:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8007346:	4b1a      	ldr	r3, [pc, #104]	@ (80073b0 <enter_joy_mode+0xd0>)
 8007348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800734a:	4a17      	ldr	r2, [pc, #92]	@ (80073a8 <enter_joy_mode+0xc8>)
 800734c:	6013      	str	r3, [r2, #0]

	// Reset motor commands
	prismatic_axis.command_pos = 0.0f;
 800734e:	4b15      	ldr	r3, [pc, #84]	@ (80073a4 <enter_joy_mode+0xc4>)
 8007350:	f04f 0200 	mov.w	r2, #0
 8007354:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8007356:	4b14      	ldr	r3, [pc, #80]	@ (80073a8 <enter_joy_mode+0xc8>)
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 800735e:	4b11      	ldr	r3, [pc, #68]	@ (80073a4 <enter_joy_mode+0xc4>)
 8007360:	f04f 0200 	mov.w	r2, #0
 8007364:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007366:	4b10      	ldr	r3, [pc, #64]	@ (80073a8 <enter_joy_mode+0xc8>)
 8007368:	f04f 0200 	mov.w	r2, #0
 800736c:	629a      	str	r2, [r3, #40]	@ 0x28

	// Reset PID controllers
	PID_CONTROLLER_Reset(&prismatic_position_pid);
 800736e:	4811      	ldr	r0, [pc, #68]	@ (80073b4 <enter_joy_mode+0xd4>)
 8007370:	f7f9 ffe4 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8007374:	4810      	ldr	r0, [pc, #64]	@ (80073b8 <enter_joy_mode+0xd8>)
 8007376:	f7f9 ffe1 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 800737a:	4810      	ldr	r0, [pc, #64]	@ (80073bc <enter_joy_mode+0xdc>)
 800737c:	f7f9 ffde 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007380:	480f      	ldr	r0, [pc, #60]	@ (80073c0 <enter_joy_mode+0xe0>)
 8007382:	f7f9 ffdb 	bl	800133c <PID_CONTROLLER_Reset>
 8007386:	e000      	b.n	800738a <enter_joy_mode+0xaa>
		return;
 8007388:	bf00      	nop
}
 800738a:	bd80      	pop	{r7, pc}
 800738c:	2000056b 	.word	0x2000056b
 8007390:	20000585 	.word	0x20000585
 8007394:	20000584 	.word	0x20000584
 8007398:	200005e0 	.word	0x200005e0
 800739c:	200005dc 	.word	0x200005dc
 80073a0:	20000508 	.word	0x20000508
 80073a4:	20000480 	.word	0x20000480
 80073a8:	200004c4 	.word	0x200004c4
 80073ac:	200006a0 	.word	0x200006a0
 80073b0:	200006fc 	.word	0x200006fc
 80073b4:	20000758 	.word	0x20000758
 80073b8:	20000780 	.word	0x20000780
 80073bc:	200007a8 	.word	0x200007a8
 80073c0:	200007d0 	.word	0x200007d0

080073c4 <exit_joy_mode>:

/* Updated exit joy mode to handle cleanup properly */
void exit_joy_mode(void) {
 80073c4:	b580      	push	{r7, lr}
 80073c6:	af00      	add	r7, sp, #0
	joy_mode_active = false;
 80073c8:	4b34      	ldr	r3, [pc, #208]	@ (800749c <exit_joy_mode+0xd8>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_IDLE;
 80073ce:	4b34      	ldr	r3, [pc, #208]	@ (80074a0 <exit_joy_mode+0xdc>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	701a      	strb	r2, [r3, #0]

	// Reset all data
	reset_joy_mode_data();
 80073d4:	f000 f980 	bl	80076d8 <reset_joy_mode_data>

	// Turn off pilot light
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 80073d8:	2200      	movs	r2, #0
 80073da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80073de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80073e2:	f005 fa63 	bl	800c8ac <HAL_GPIO_WritePin>
	joy_mode_pilot_state = false;
 80073e6:	4b2f      	ldr	r3, [pc, #188]	@ (80074a4 <exit_joy_mode+0xe0>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 80073ec:	4b2e      	ldr	r3, [pc, #184]	@ (80074a8 <exit_joy_mode+0xe4>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]

	// DON'T stop motors - hold current position
	// Set current positions as target positions for holding
	prismatic_axis.position = prismatic_encoder.mm;
 80073f2:	4b2e      	ldr	r3, [pc, #184]	@ (80074ac <exit_joy_mode+0xe8>)
 80073f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073f6:	4a2e      	ldr	r2, [pc, #184]	@ (80074b0 <exit_joy_mode+0xec>)
 80073f8:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 80073fa:	4b2e      	ldr	r3, [pc, #184]	@ (80074b4 <exit_joy_mode+0xf0>)
 80073fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073fe:	4a2e      	ldr	r2, [pc, #184]	@ (80074b8 <exit_joy_mode+0xf4>)
 8007400:	6013      	str	r3, [r2, #0]

	// Reset velocities and feedforward terms
	prismatic_axis.command_vel = 0.0f;
 8007402:	4b2b      	ldr	r3, [pc, #172]	@ (80074b0 <exit_joy_mode+0xec>)
 8007404:	f04f 0200 	mov.w	r2, #0
 8007408:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 800740a:	4b2b      	ldr	r3, [pc, #172]	@ (80074b8 <exit_joy_mode+0xf4>)
 800740c:	f04f 0200 	mov.w	r2, #0
 8007410:	629a      	str	r2, [r3, #40]	@ 0x28
	prismatic_axis.ffd = 0.0f;
 8007412:	4b27      	ldr	r3, [pc, #156]	@ (80074b0 <exit_joy_mode+0xec>)
 8007414:	f04f 0200 	mov.w	r2, #0
 8007418:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_axis.dfd = 0.0f;
 800741a:	4b25      	ldr	r3, [pc, #148]	@ (80074b0 <exit_joy_mode+0xec>)
 800741c:	f04f 0200 	mov.w	r2, #0
 8007420:	62da      	str	r2, [r3, #44]	@ 0x2c
	revolute_axis.ffd = 0.0f;
 8007422:	4b25      	ldr	r3, [pc, #148]	@ (80074b8 <exit_joy_mode+0xf4>)
 8007424:	f04f 0200 	mov.w	r2, #0
 8007428:	631a      	str	r2, [r3, #48]	@ 0x30

	// Keep DFD for revolute axis (gravity compensation)
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 800742a:	4b22      	ldr	r3, [pc, #136]	@ (80074b4 <exit_joy_mode+0xf0>)
 800742c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8007430:	4b1e      	ldr	r3, [pc, #120]	@ (80074ac <exit_joy_mode+0xe8>)
 8007432:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007436:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 80074bc <exit_joy_mode+0xf8>
 800743a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800743e:	eef0 0a66 	vmov.f32	s1, s13
 8007442:	eeb0 0a47 	vmov.f32	s0, s14
 8007446:	481e      	ldr	r0, [pc, #120]	@ (80074c0 <exit_joy_mode+0xfc>)
 8007448:	f7fa f939 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 800744c:	eef0 7a40 	vmov.f32	s15, s0
 8007450:	4b19      	ldr	r3, [pc, #100]	@ (80074b8 <exit_joy_mode+0xf4>)
 8007452:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Reset PID controllers
	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8007456:	481b      	ldr	r0, [pc, #108]	@ (80074c4 <exit_joy_mode+0x100>)
 8007458:	f7f9 ff70 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 800745c:	481a      	ldr	r0, [pc, #104]	@ (80074c8 <exit_joy_mode+0x104>)
 800745e:	f7f9 ff6d 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8007462:	481a      	ldr	r0, [pc, #104]	@ (80074cc <exit_joy_mode+0x108>)
 8007464:	f7f9 ff6a 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007468:	4819      	ldr	r0, [pc, #100]	@ (80074d0 <exit_joy_mode+0x10c>)
 800746a:	f7f9 ff67 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 800746e:	4818      	ldr	r0, [pc, #96]	@ (80074d0 <exit_joy_mode+0x10c>)
 8007470:	f7f9 ff64 	bl	800133c <PID_CONTROLLER_Reset>

	// Reset motion state
	motion_sequence_state = MOTION_IDLE;
 8007474:	4b17      	ldr	r3, [pc, #92]	@ (80074d4 <exit_joy_mode+0x110>)
 8007476:	2200      	movs	r2, #0
 8007478:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 800747a:	4b0d      	ldr	r3, [pc, #52]	@ (80074b0 <exit_joy_mode+0xec>)
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8007482:	4b0d      	ldr	r3, [pc, #52]	@ (80074b8 <exit_joy_mode+0xf4>)
 8007484:	2200      	movs	r2, #0
 8007486:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	//modbus reset state
	registerFrame[BaseSystem_Status].U16 = 0;
 800748a:	4b13      	ldr	r3, [pc, #76]	@ (80074d8 <exit_joy_mode+0x114>)
 800748c:	2200      	movs	r2, #0
 800748e:	805a      	strh	r2, [r3, #2]
	registerFrame[R_Theta_Status].U16 = 0;
 8007490:	4b11      	ldr	r3, [pc, #68]	@ (80074d8 <exit_joy_mode+0x114>)
 8007492:	2200      	movs	r2, #0
 8007494:	841a      	strh	r2, [r3, #32]
}
 8007496:	bf00      	nop
 8007498:	bd80      	pop	{r7, pc}
 800749a:	bf00      	nop
 800749c:	20000585 	.word	0x20000585
 80074a0:	20000584 	.word	0x20000584
 80074a4:	200005e0 	.word	0x200005e0
 80074a8:	200005dc 	.word	0x200005dc
 80074ac:	200006a0 	.word	0x200006a0
 80074b0:	20000480 	.word	0x20000480
 80074b4:	200006fc 	.word	0x200006fc
 80074b8:	200004c4 	.word	0x200004c4
 80074bc:	447a0000 	.word	0x447a0000
 80074c0:	20000830 	.word	0x20000830
 80074c4:	20000758 	.word	0x20000758
 80074c8:	20000780 	.word	0x20000780
 80074cc:	200007a8 	.word	0x200007a8
 80074d0:	200007d0 	.word	0x200007d0
 80074d4:	20000508 	.word	0x20000508
 80074d8:	200012a4 	.word	0x200012a4

080074dc <save_current_position>:

void save_current_position(void) {
 80074dc:	b580      	push	{r7, lr}
 80074de:	b088      	sub	sp, #32
 80074e0:	af00      	add	r7, sp, #0
	if (saved_position_count < JOY_MODE_MAX_POSITIONS) {
 80074e2:	4b50      	ldr	r3, [pc, #320]	@ (8007624 <save_current_position+0x148>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	2b09      	cmp	r3, #9
 80074e8:	f200 8098 	bhi.w	800761c <save_current_position+0x140>
		float current_pris = prismatic_encoder.mm;
 80074ec:	4b4e      	ldr	r3, [pc, #312]	@ (8007628 <save_current_position+0x14c>)
 80074ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074f0:	61fb      	str	r3, [r7, #28]
		float current_rev = revolute_encoder.rads;
 80074f2:	4b4e      	ldr	r3, [pc, #312]	@ (800762c <save_current_position+0x150>)
 80074f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f6:	61bb      	str	r3, [r7, #24]

		bool too_similar = false;
 80074f8:	2300      	movs	r3, #0
 80074fa:	75fb      	strb	r3, [r7, #23]
		if (saved_position_count > 0) {
 80074fc:	4b49      	ldr	r3, [pc, #292]	@ (8007624 <save_current_position+0x148>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d031      	beq.n	8007568 <save_current_position+0x8c>
			float last_pris =
					saved_positions[saved_position_count - 1].prismatic_pos;
 8007504:	4b47      	ldr	r3, [pc, #284]	@ (8007624 <save_current_position+0x148>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	3b01      	subs	r3, #1
			float last_pris =
 800750a:	4a49      	ldr	r2, [pc, #292]	@ (8007630 <save_current_position+0x154>)
 800750c:	00db      	lsls	r3, r3, #3
 800750e:	4413      	add	r3, r2
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	613b      	str	r3, [r7, #16]
			float last_rev =
					saved_positions[saved_position_count - 1].revolute_pos;
 8007514:	4b43      	ldr	r3, [pc, #268]	@ (8007624 <save_current_position+0x148>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	3b01      	subs	r3, #1
			float last_rev =
 800751a:	4a45      	ldr	r2, [pc, #276]	@ (8007630 <save_current_position+0x154>)
 800751c:	00db      	lsls	r3, r3, #3
 800751e:	4413      	add	r3, r2
 8007520:	3304      	adds	r3, #4
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	60fb      	str	r3, [r7, #12]

			if (fabsf(current_pris - last_pris) < 5.0f
 8007526:	ed97 7a07 	vldr	s14, [r7, #28]
 800752a:	edd7 7a04 	vldr	s15, [r7, #16]
 800752e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007532:	eef0 7ae7 	vabs.f32	s15, s15
 8007536:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800753a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800753e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007542:	d511      	bpl.n	8007568 <save_current_position+0x8c>
					&& fabsf(current_rev - last_rev) < 0.1f) {
 8007544:	ed97 7a06 	vldr	s14, [r7, #24]
 8007548:	edd7 7a03 	vldr	s15, [r7, #12]
 800754c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007550:	eef0 7ae7 	vabs.f32	s15, s15
 8007554:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8007634 <save_current_position+0x158>
 8007558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800755c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007560:	d502      	bpl.n	8007568 <save_current_position+0x8c>
				too_similar = true;
 8007562:	2301      	movs	r3, #1
 8007564:	75fb      	strb	r3, [r7, #23]
				// DEBUG: Position too similar, not saving
				return;// Exit early if too similar
 8007566:	e059      	b.n	800761c <save_current_position+0x140>
			}
		}

		// Only reach here if position should be saved
		saved_positions[saved_position_count].prismatic_pos = current_pris;
 8007568:	4b2e      	ldr	r3, [pc, #184]	@ (8007624 <save_current_position+0x148>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	4a30      	ldr	r2, [pc, #192]	@ (8007630 <save_current_position+0x154>)
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	4413      	add	r3, r2
 8007572:	69fa      	ldr	r2, [r7, #28]
 8007574:	601a      	str	r2, [r3, #0]
		saved_positions[saved_position_count].revolute_pos = current_rev;
 8007576:	4b2b      	ldr	r3, [pc, #172]	@ (8007624 <save_current_position+0x148>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	4a2d      	ldr	r2, [pc, #180]	@ (8007630 <save_current_position+0x154>)
 800757c:	00db      	lsls	r3, r3, #3
 800757e:	4413      	add	r3, r2
 8007580:	3304      	adds	r3, #4
 8007582:	69ba      	ldr	r2, [r7, #24]
 8007584:	601a      	str	r2, [r3, #0]

		uint8_t r_addr = 0x20 + saved_position_count * 2;
 8007586:	4b27      	ldr	r3, [pc, #156]	@ (8007624 <save_current_position+0x148>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	3310      	adds	r3, #16
 800758c:	b2db      	uxtb	r3, r3
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	72fb      	strb	r3, [r7, #11]
		uint8_t t_addr = r_addr + 1;
 8007592:	7afb      	ldrb	r3, [r7, #11]
 8007594:	3301      	adds	r3, #1
 8007596:	72bb      	strb	r3, [r7, #10]

		if (r_addr <= 0x38 && t_addr <= 0x39) {
 8007598:	7afb      	ldrb	r3, [r7, #11]
 800759a:	2b38      	cmp	r3, #56	@ 0x38
 800759c:	d82e      	bhi.n	80075fc <save_current_position+0x120>
 800759e:	7abb      	ldrb	r3, [r7, #10]
 80075a0:	2b39      	cmp	r3, #57	@ 0x39
 80075a2:	d82b      	bhi.n	80075fc <save_current_position+0x120>
			int16_t r_mm_fixed = (int16_t) (current_pris * 10.0);
 80075a4:	69f8      	ldr	r0, [r7, #28]
 80075a6:	f7f8 ff9b 	bl	80004e0 <__aeabi_f2d>
 80075aa:	f04f 0200 	mov.w	r2, #0
 80075ae:	4b22      	ldr	r3, [pc, #136]	@ (8007638 <save_current_position+0x15c>)
 80075b0:	f7f8 ffee 	bl	8000590 <__aeabi_dmul>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4610      	mov	r0, r2
 80075ba:	4619      	mov	r1, r3
 80075bc:	f7f9 fa82 	bl	8000ac4 <__aeabi_d2iz>
 80075c0:	4603      	mov	r3, r0
 80075c2:	813b      	strh	r3, [r7, #8]
			int16_t t_deg_fixed = (int16_t) (revolute_axis.deg * 10.0);
 80075c4:	4b1d      	ldr	r3, [pc, #116]	@ (800763c <save_current_position+0x160>)
 80075c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7f8 ff89 	bl	80004e0 <__aeabi_f2d>
 80075ce:	f04f 0200 	mov.w	r2, #0
 80075d2:	4b19      	ldr	r3, [pc, #100]	@ (8007638 <save_current_position+0x15c>)
 80075d4:	f7f8 ffdc 	bl	8000590 <__aeabi_dmul>
 80075d8:	4602      	mov	r2, r0
 80075da:	460b      	mov	r3, r1
 80075dc:	4610      	mov	r0, r2
 80075de:	4619      	mov	r1, r3
 80075e0:	f7f9 fa70 	bl	8000ac4 <__aeabi_d2iz>
 80075e4:	4603      	mov	r3, r0
 80075e6:	80fb      	strh	r3, [r7, #6]

			registerFrame[r_addr].U16 = r_mm_fixed;
 80075e8:	7afb      	ldrb	r3, [r7, #11]
 80075ea:	8939      	ldrh	r1, [r7, #8]
 80075ec:	4a14      	ldr	r2, [pc, #80]	@ (8007640 <save_current_position+0x164>)
 80075ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			registerFrame[t_addr].U16 = t_deg_fixed;
 80075f2:	7abb      	ldrb	r3, [r7, #10]
 80075f4:	88f9      	ldrh	r1, [r7, #6]
 80075f6:	4a12      	ldr	r2, [pc, #72]	@ (8007640 <save_current_position+0x164>)
 80075f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		saved_position_count++;
 80075fc:	4b09      	ldr	r3, [pc, #36]	@ (8007624 <save_current_position+0x148>)
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	3301      	adds	r3, #1
 8007602:	b2da      	uxtb	r2, r3
 8007604:	4b07      	ldr	r3, [pc, #28]	@ (8007624 <save_current_position+0x148>)
 8007606:	701a      	strb	r2, [r3, #0]

		if (saved_position_count >= JOY_MODE_MAX_POSITIONS) {
 8007608:	4b06      	ldr	r3, [pc, #24]	@ (8007624 <save_current_position+0x148>)
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2b09      	cmp	r3, #9
 800760e:	d905      	bls.n	800761c <save_current_position+0x140>
			joy_mode_state = JOY_MODE_POSITION_SAVED;
 8007610:	4b0c      	ldr	r3, [pc, #48]	@ (8007644 <save_current_position+0x168>)
 8007612:	2203      	movs	r2, #3
 8007614:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 8007616:	4b0c      	ldr	r3, [pc, #48]	@ (8007648 <save_current_position+0x16c>)
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800761c:	3720      	adds	r7, #32
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	200005d8 	.word	0x200005d8
 8007628:	200006a0 	.word	0x200006a0
 800762c:	200006fc 	.word	0x200006fc
 8007630:	20000588 	.word	0x20000588
 8007634:	3dcccccd 	.word	0x3dcccccd
 8007638:	40240000 	.word	0x40240000
 800763c:	200004c4 	.word	0x200004c4
 8007640:	200012a4 	.word	0x200012a4
 8007644:	20000584 	.word	0x20000584
 8007648:	200005dc 	.word	0x200005dc

0800764c <start_position_playback>:

void start_position_playback(void) {
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0

	if (saved_position_count > 0) {
 8007652:	4b19      	ldr	r3, [pc, #100]	@ (80076b8 <start_position_playback+0x6c>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d02a      	beq.n	80076b0 <start_position_playback+0x64>
		joy_mode_state = JOY_MODE_PLAYBACK;
 800765a:	4b18      	ldr	r3, [pc, #96]	@ (80076bc <start_position_playback+0x70>)
 800765c:	2204      	movs	r2, #4
 800765e:	701a      	strb	r2, [r3, #0]
		playback_position_index = 0;
 8007660:	4b17      	ldr	r3, [pc, #92]	@ (80076c0 <start_position_playback+0x74>)
 8007662:	2200      	movs	r2, #0
 8007664:	701a      	strb	r2, [r3, #0]
		joy_mode_playback_timer = 0;
 8007666:	4b17      	ldr	r3, [pc, #92]	@ (80076c4 <start_position_playback+0x78>)
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]

		// Keep pilot light ON during playback (don't turn it off)
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 800766c:	2201      	movs	r2, #1
 800766e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007676:	f005 f919 	bl	800c8ac <HAL_GPIO_WritePin>
		joy_mode_pilot_state = true;
 800767a:	4b13      	ldr	r3, [pc, #76]	@ (80076c8 <start_position_playback+0x7c>)
 800767c:	2201      	movs	r2, #1
 800767e:	701a      	strb	r2, [r3, #0]

		// Start first trajectory
		float target_pris = saved_positions[0].prismatic_pos;
 8007680:	4b12      	ldr	r3, [pc, #72]	@ (80076cc <start_position_playback+0x80>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	60fb      	str	r3, [r7, #12]
		float target_rev_rad = saved_positions[0].revolute_pos;
 8007686:	4b11      	ldr	r3, [pc, #68]	@ (80076cc <start_position_playback+0x80>)
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	60bb      	str	r3, [r7, #8]
		float target_rev_deg = target_rev_rad * 180.0f / PI;
 800768c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007690:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80076d0 <start_position_playback+0x84>
 8007694:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007698:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80076d4 <start_position_playback+0x88>
 800769c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076a0:	edc7 7a01 	vstr	s15, [r7, #4]

		start_combined_trajectory(target_pris, target_rev_deg);
 80076a4:	edd7 0a01 	vldr	s1, [r7, #4]
 80076a8:	ed97 0a03 	vldr	s0, [r7, #12]
 80076ac:	f7fe fe3e 	bl	800632c <start_combined_trajectory>

	}
}
 80076b0:	bf00      	nop
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	200005d8 	.word	0x200005d8
 80076bc:	20000584 	.word	0x20000584
 80076c0:	200005d9 	.word	0x200005d9
 80076c4:	200005e4 	.word	0x200005e4
 80076c8:	200005e0 	.word	0x200005e0
 80076cc:	20000588 	.word	0x20000588
 80076d0:	43340000 	.word	0x43340000
 80076d4:	40490fdb 	.word	0x40490fdb

080076d8 <reset_joy_mode_data>:

void reset_joy_mode_data(void) {
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
	// Reset saved position count
	saved_position_count = 0;
 80076de:	4b19      	ldr	r3, [pc, #100]	@ (8007744 <reset_joy_mode_data+0x6c>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	701a      	strb	r2, [r3, #0]

	// Reset playback index
	playback_position_index = 0;
 80076e4:	4b18      	ldr	r3, [pc, #96]	@ (8007748 <reset_joy_mode_data+0x70>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	701a      	strb	r2, [r3, #0]

	// Clear all saved positions
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 80076ea:	2300      	movs	r3, #0
 80076ec:	607b      	str	r3, [r7, #4]
 80076ee:	e011      	b.n	8007714 <reset_joy_mode_data+0x3c>
		saved_positions[i].prismatic_pos = 0.0f;
 80076f0:	4a16      	ldr	r2, [pc, #88]	@ (800774c <reset_joy_mode_data+0x74>)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	00db      	lsls	r3, r3, #3
 80076f6:	4413      	add	r3, r2
 80076f8:	f04f 0200 	mov.w	r2, #0
 80076fc:	601a      	str	r2, [r3, #0]
		saved_positions[i].revolute_pos = 0.0f;
 80076fe:	4a13      	ldr	r2, [pc, #76]	@ (800774c <reset_joy_mode_data+0x74>)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	4413      	add	r3, r2
 8007706:	3304      	adds	r3, #4
 8007708:	f04f 0200 	mov.w	r2, #0
 800770c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	3301      	adds	r3, #1
 8007712:	607b      	str	r3, [r7, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b09      	cmp	r3, #9
 8007718:	ddea      	ble.n	80076f0 <reset_joy_mode_data+0x18>
	}

	// Reset pilot light timers
	joy_mode_pilot_timer = 0;
 800771a:	4b0d      	ldr	r3, [pc, #52]	@ (8007750 <reset_joy_mode_data+0x78>)
 800771c:	2200      	movs	r2, #0
 800771e:	601a      	str	r2, [r3, #0]
	joy_mode_pilot_state = false;
 8007720:	4b0c      	ldr	r3, [pc, #48]	@ (8007754 <reset_joy_mode_data+0x7c>)
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]

	// Reset playback timer
	joy_mode_playback_timer = 0;
 8007726:	4b0c      	ldr	r3, [pc, #48]	@ (8007758 <reset_joy_mode_data+0x80>)
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]

	// Reset button states
	joy_mode_b2_pressed = false;
 800772c:	4b0b      	ldr	r3, [pc, #44]	@ (800775c <reset_joy_mode_data+0x84>)
 800772e:	2200      	movs	r2, #0
 8007730:	701a      	strb	r2, [r3, #0]
	joy_mode_b2_last_state = false;
 8007732:	4b0b      	ldr	r3, [pc, #44]	@ (8007760 <reset_joy_mode_data+0x88>)
 8007734:	2200      	movs	r2, #0
 8007736:	701a      	strb	r2, [r3, #0]
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	200005d8 	.word	0x200005d8
 8007748:	200005d9 	.word	0x200005d9
 800774c:	20000588 	.word	0x20000588
 8007750:	200005dc 	.word	0x200005dc
 8007754:	200005e0 	.word	0x200005e0
 8007758:	200005e4 	.word	0x200005e4
 800775c:	200005e8 	.word	0x200005e8
 8007760:	200005e9 	.word	0x200005e9
 8007764:	00000000 	.word	0x00000000

08007768 <update_joy_mode_velocity_control>:

void update_joy_mode_velocity_control(void) {
 8007768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776c:	ed2d 8b02 	vpush	{d8}
 8007770:	b08d      	sub	sp, #52	@ 0x34
 8007772:	af00      	add	r7, sp, #0
	// Read current photo sensor states directly
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 8007774:	2101      	movs	r1, #1
 8007776:	48a7      	ldr	r0, [pc, #668]	@ (8007a14 <update_joy_mode_velocity_control+0x2ac>)
 8007778:	f005 f880 	bl	800c87c <HAL_GPIO_ReadPin>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	bf14      	ite	ne
 8007782:	2301      	movne	r3, #1
 8007784:	2300      	moveq	r3, #0
 8007786:	76fb      	strb	r3, [r7, #27]
	UPPER_PHOTO_Pin);
	bool low_photo_detected = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8007788:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800778c:	48a1      	ldr	r0, [pc, #644]	@ (8007a14 <update_joy_mode_velocity_control+0x2ac>)
 800778e:	f005 f875 	bl	800c87c <HAL_GPIO_ReadPin>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	bf14      	ite	ne
 8007798:	2301      	movne	r3, #1
 800779a:	2300      	moveq	r3, #0
 800779c:	76bb      	strb	r3, [r7, #26]
	LOWER_PHOTO_Pin);

	// Prismatic axis control based on joystick_x
	float pris_command_vel = 0.0f;
 800779e:	f04f 0300 	mov.w	r3, #0
 80077a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	bool pris_moving = false;
 80077a4:	2300      	movs	r3, #0
 80077a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	static bool pris_was_moving = false; // Track previous moving state

	// Process prismatic axis joystick control (FIXED LOGIC)
	if (up_photo_detected && joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 80077aa:	7efb      	ldrb	r3, [r7, #27]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00d      	beq.n	80077cc <update_joy_mode_velocity_control+0x64>
 80077b0:	4b99      	ldr	r3, [pc, #612]	@ (8007a18 <update_joy_mode_velocity_control+0x2b0>)
 80077b2:	edd3 7a00 	vldr	s15, [r3]
 80077b6:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8007a1c <update_joy_mode_velocity_control+0x2b4>
 80077ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c2:	dd03      	ble.n	80077cc <update_joy_mode_velocity_control+0x64>
		// At up photo and trying to go up (negative direction) - block movement
		pris_command_vel = 0.0f;
 80077c4:	f04f 0300 	mov.w	r3, #0
 80077c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077ca:	e048      	b.n	800785e <update_joy_mode_velocity_control+0xf6>
	} else if (low_photo_detected && joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 80077cc:	7ebb      	ldrb	r3, [r7, #26]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00d      	beq.n	80077ee <update_joy_mode_velocity_control+0x86>
 80077d2:	4b91      	ldr	r3, [pc, #580]	@ (8007a18 <update_joy_mode_velocity_control+0x2b0>)
 80077d4:	edd3 7a00 	vldr	s15, [r3]
 80077d8:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8007a20 <update_joy_mode_velocity_control+0x2b8>
 80077dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e4:	d503      	bpl.n	80077ee <update_joy_mode_velocity_control+0x86>
		// At low photo and trying to go down (positive direction) - block movement
		pris_command_vel = 0.0f;
 80077e6:	f04f 0300 	mov.w	r3, #0
 80077ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077ec:	e037      	b.n	800785e <update_joy_mode_velocity_control+0xf6>
	} else if (joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 80077ee:	4b8a      	ldr	r3, [pc, #552]	@ (8007a18 <update_joy_mode_velocity_control+0x2b0>)
 80077f0:	edd3 7a00 	vldr	s15, [r3]
 80077f4:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8007a20 <update_joy_mode_velocity_control+0x2b8>
 80077f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007800:	d50e      	bpl.n	8007820 <update_joy_mode_velocity_control+0xb8>
		// Moving down (positive direction)
		pris_command_vel = JOY_MODE_CONSTANT_VELOCITY_PRIS;
 8007802:	4b88      	ldr	r3, [pc, #544]	@ (8007a24 <update_joy_mode_velocity_control+0x2bc>)
 8007804:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 8007806:	2301      	movs	r3, #1
 8007808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!low_photo_detected) {
 800780c:	7ebb      	ldrb	r3, [r7, #26]
 800780e:	f083 0301 	eor.w	r3, r3, #1
 8007812:	b2db      	uxtb	r3, r3
 8007814:	2b00      	cmp	r3, #0
 8007816:	d022      	beq.n	800785e <update_joy_mode_velocity_control+0xf6>
			up_photo = false;
 8007818:	4b83      	ldr	r3, [pc, #524]	@ (8007a28 <update_joy_mode_velocity_control+0x2c0>)
 800781a:	2200      	movs	r2, #0
 800781c:	701a      	strb	r2, [r3, #0]
 800781e:	e01e      	b.n	800785e <update_joy_mode_velocity_control+0xf6>
		}
	} else if (joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 8007820:	4b7d      	ldr	r3, [pc, #500]	@ (8007a18 <update_joy_mode_velocity_control+0x2b0>)
 8007822:	edd3 7a00 	vldr	s15, [r3]
 8007826:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8007a1c <update_joy_mode_velocity_control+0x2b4>
 800782a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800782e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007832:	dd0e      	ble.n	8007852 <update_joy_mode_velocity_control+0xea>
		// Moving up (negative direction)
		pris_command_vel = -JOY_MODE_CONSTANT_VELOCITY_PRIS;
 8007834:	4b7d      	ldr	r3, [pc, #500]	@ (8007a2c <update_joy_mode_velocity_control+0x2c4>)
 8007836:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 8007838:	2301      	movs	r3, #1
 800783a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!up_photo_detected) {
 800783e:	7efb      	ldrb	r3, [r7, #27]
 8007840:	f083 0301 	eor.w	r3, r3, #1
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d009      	beq.n	800785e <update_joy_mode_velocity_control+0xf6>
			low_photo = false;
 800784a:	4b79      	ldr	r3, [pc, #484]	@ (8007a30 <update_joy_mode_velocity_control+0x2c8>)
 800784c:	2200      	movs	r2, #0
 800784e:	701a      	strb	r2, [r3, #0]
 8007850:	e005      	b.n	800785e <update_joy_mode_velocity_control+0xf6>
		}
	} else {
		// Joystick in deadband - hold position
		pris_command_vel = 0.0f;
 8007852:	f04f 0300 	mov.w	r3, #0
 8007856:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = false;
 8007858:	2300      	movs	r3, #0
 800785a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	}

	// Revolute axis control based on joystick_y
	float rev_command_vel = 0.0f;
 800785e:	f04f 0300 	mov.w	r3, #0
 8007862:	627b      	str	r3, [r7, #36]	@ 0x24
	bool rev_moving = false;
 8007864:	2300      	movs	r3, #0
 8007866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	// Get current revolute position in degrees for limit checking
	float revolute_deg = UnitConverter_angle(&converter_system,
 800786a:	4b72      	ldr	r3, [pc, #456]	@ (8007a34 <update_joy_mode_velocity_control+0x2cc>)
 800786c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007870:	220e      	movs	r2, #14
 8007872:	210f      	movs	r1, #15
 8007874:	eeb0 0a67 	vmov.f32	s0, s15
 8007878:	486f      	ldr	r0, [pc, #444]	@ (8007a38 <update_joy_mode_velocity_control+0x2d0>)
 800787a:	f7fd f9c9 	bl	8004c10 <UnitConverter_angle>
 800787e:	ed87 0a05 	vstr	s0, [r7, #20]
			revolute_encoder.rads, UNIT_RADIAN, UNIT_DEGREE);

	// Process revolute axis joystick control with limits
	if ((revolute_deg > 175.0f && joystick_y > JOY_MODE_VELOCITY_THRESHOLD)
 8007882:	edd7 7a05 	vldr	s15, [r7, #20]
 8007886:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8007a3c <update_joy_mode_velocity_control+0x2d4>
 800788a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800788e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007892:	dd09      	ble.n	80078a8 <update_joy_mode_velocity_control+0x140>
 8007894:	4b6a      	ldr	r3, [pc, #424]	@ (8007a40 <update_joy_mode_velocity_control+0x2d8>)
 8007896:	edd3 7a00 	vldr	s15, [r3]
 800789a:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8007a1c <update_joy_mode_velocity_control+0x2b4>
 800789e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078a6:	dc12      	bgt.n	80078ce <update_joy_mode_velocity_control+0x166>
			|| (revolute_deg < -175.0f
 80078a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80078ac:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8007a44 <update_joy_mode_velocity_control+0x2dc>
 80078b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b8:	d510      	bpl.n	80078dc <update_joy_mode_velocity_control+0x174>
					&& joystick_y < -JOY_MODE_VELOCITY_THRESHOLD)) {
 80078ba:	4b61      	ldr	r3, [pc, #388]	@ (8007a40 <update_joy_mode_velocity_control+0x2d8>)
 80078bc:	edd3 7a00 	vldr	s15, [r3]
 80078c0:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8007a20 <update_joy_mode_velocity_control+0x2b8>
 80078c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078cc:	d506      	bpl.n	80078dc <update_joy_mode_velocity_control+0x174>
		// At revolute limits - block movement
		rev_command_vel = 0.0f;
 80078ce:	f04f 0300 	mov.w	r3, #0
 80078d2:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 80078d4:	2300      	movs	r3, #0
 80078d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078da:	e025      	b.n	8007928 <update_joy_mode_velocity_control+0x1c0>
	} else if (joystick_y > JOY_MODE_VELOCITY_THRESHOLD) {
 80078dc:	4b58      	ldr	r3, [pc, #352]	@ (8007a40 <update_joy_mode_velocity_control+0x2d8>)
 80078de:	edd3 7a00 	vldr	s15, [r3]
 80078e2:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8007a1c <update_joy_mode_velocity_control+0x2b4>
 80078e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078ee:	dd05      	ble.n	80078fc <update_joy_mode_velocity_control+0x194>
		rev_command_vel = JOY_MODE_CONSTANT_VELOCITY_REV;
 80078f0:	4b55      	ldr	r3, [pc, #340]	@ (8007a48 <update_joy_mode_velocity_control+0x2e0>)
 80078f2:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 80078f4:	2301      	movs	r3, #1
 80078f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078fa:	e015      	b.n	8007928 <update_joy_mode_velocity_control+0x1c0>
	} else if (joystick_y < -JOY_MODE_VELOCITY_THRESHOLD) {
 80078fc:	4b50      	ldr	r3, [pc, #320]	@ (8007a40 <update_joy_mode_velocity_control+0x2d8>)
 80078fe:	edd3 7a00 	vldr	s15, [r3]
 8007902:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8007a20 <update_joy_mode_velocity_control+0x2b8>
 8007906:	eef4 7ac7 	vcmpe.f32	s15, s14
 800790a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800790e:	d505      	bpl.n	800791c <update_joy_mode_velocity_control+0x1b4>
		rev_command_vel = -JOY_MODE_CONSTANT_VELOCITY_REV;
 8007910:	4b4e      	ldr	r3, [pc, #312]	@ (8007a4c <update_joy_mode_velocity_control+0x2e4>)
 8007912:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 8007914:	2301      	movs	r3, #1
 8007916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800791a:	e005      	b.n	8007928 <update_joy_mode_velocity_control+0x1c0>
	} else {
		// Joystick in deadband - hold position
		rev_command_vel = 0.0f;
 800791c:	f04f 0300 	mov.w	r3, #0
 8007920:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 8007922:	2300      	movs	r3, #0
 8007924:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	}

	/* PRISMATIC AXIS CONTROL - Keep existing PID-based control */
	// Detect transition from moving to stopped
	if (pris_was_moving && !pris_moving) {
 8007928:	4b49      	ldr	r3, [pc, #292]	@ (8007a50 <update_joy_mode_velocity_control+0x2e8>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00a      	beq.n	8007946 <update_joy_mode_velocity_control+0x1de>
 8007930:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007934:	f083 0301 	eor.w	r3, r3, #1
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <update_joy_mode_velocity_control+0x1de>
		// Just stopped moving - capture current position as target
		prismatic_axis.position = prismatic_encoder.mm;
 800793e:	4b45      	ldr	r3, [pc, #276]	@ (8007a54 <update_joy_mode_velocity_control+0x2ec>)
 8007940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007942:	4a45      	ldr	r2, [pc, #276]	@ (8007a58 <update_joy_mode_velocity_control+0x2f0>)
 8007944:	6013      	str	r3, [r2, #0]
	}

	if (pris_moving) {
 8007946:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 8092 	beq.w	8007a74 <update_joy_mode_velocity_control+0x30c>
		// Moving - use velocity control
		prismatic_axis.vel_error = pris_command_vel
				- prismatic_axis.kalman_velocity;
 8007950:	4b41      	ldr	r3, [pc, #260]	@ (8007a58 <update_joy_mode_velocity_control+0x2f0>)
 8007952:	edd3 7a07 	vldr	s15, [r3, #28]
 8007956:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800795a:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = pris_command_vel
 800795e:	4b3e      	ldr	r3, [pc, #248]	@ (8007a58 <update_joy_mode_velocity_control+0x2f0>)
 8007960:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8007964:	4b3c      	ldr	r3, [pc, #240]	@ (8007a58 <update_joy_mode_velocity_control+0x2f0>)
 8007966:	edd3 7a06 	vldr	s15, [r3, #24]
 800796a:	eeb0 0a67 	vmov.f32	s0, s15
 800796e:	483b      	ldr	r0, [pc, #236]	@ (8007a5c <update_joy_mode_velocity_control+0x2f4>)
 8007970:	f7f9 fc52 	bl	8001218 <PID_CONTROLLER_Compute>
 8007974:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8007978:	4b39      	ldr	r3, [pc, #228]	@ (8007a60 <update_joy_mode_velocity_control+0x2f8>)
 800797a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 800797e:	4610      	mov	r0, r2
 8007980:	4619      	mov	r1, r3
 8007982:	f7f9 f89f 	bl	8000ac4 <__aeabi_d2iz>
 8007986:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8007988:	4b35      	ldr	r3, [pc, #212]	@ (8007a60 <update_joy_mode_velocity_control+0x2f8>)
 800798a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800798e:	60ba      	str	r2, [r7, #8]
 8007990:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007994:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(
 8007996:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800799a:	f7f9 f893 	bl	8000ac4 <__aeabi_d2iz>
 800799e:	4603      	mov	r3, r0
 80079a0:	4619      	mov	r1, r3
 80079a2:	4620      	mov	r0, r4
 80079a4:	eeb0 0a48 	vmov.f32	s0, s16
 80079a8:	f7f9 fbd4 	bl	8001154 <PWM_Satuation>
 80079ac:	ee07 0a90 	vmov	s15, r0
 80079b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80079b4:	4b28      	ldr	r3, [pc, #160]	@ (8007a58 <update_joy_mode_velocity_control+0x2f0>)
 80079b6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward for moving
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 80079ba:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80079be:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8007a64 <update_joy_mode_velocity_control+0x2fc>
 80079c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80079c6:	eeb0 0a47 	vmov.f32	s0, s14
 80079ca:	4827      	ldr	r0, [pc, #156]	@ (8007a68 <update_joy_mode_velocity_control+0x300>)
 80079cc:	f7f9 ff64 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 80079d0:	eef0 7a40 	vmov.f32	s15, s0
 80079d4:	4b20      	ldr	r3, [pc, #128]	@ (8007a58 <update_joy_mode_velocity_control+0x2f0>)
 80079d6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				pris_command_vel / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80079da:	4b16      	ldr	r3, [pc, #88]	@ (8007a34 <update_joy_mode_velocity_control+0x2cc>)
 80079dc:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 80079e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007a54 <update_joy_mode_velocity_control+0x2ec>)
 80079e2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80079e6:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8007a64 <update_joy_mode_velocity_control+0x2fc>
 80079ea:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80079ee:	eeb0 1a66 	vmov.f32	s2, s13
 80079f2:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8007a6c <update_joy_mode_velocity_control+0x304>
 80079f6:	eeb0 0a47 	vmov.f32	s0, s14
 80079fa:	481d      	ldr	r0, [pc, #116]	@ (8007a70 <update_joy_mode_velocity_control+0x308>)
 80079fc:	f7f9 fff4 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 8007a00:	eef0 7a40 	vmov.f32	s15, s0
 8007a04:	4b14      	ldr	r3, [pc, #80]	@ (8007a58 <update_joy_mode_velocity_control+0x2f0>)
 8007a06:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		// Continuously update target position while moving
		prismatic_axis.position = prismatic_encoder.mm;
 8007a0a:	4b12      	ldr	r3, [pc, #72]	@ (8007a54 <update_joy_mode_velocity_control+0x2ec>)
 8007a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a0e:	4a12      	ldr	r2, [pc, #72]	@ (8007a58 <update_joy_mode_velocity_control+0x2f0>)
 8007a10:	6013      	str	r3, [r2, #0]
 8007a12:	e0a2      	b.n	8007b5a <update_joy_mode_velocity_control+0x3f2>
 8007a14:	48000400 	.word	0x48000400
 8007a18:	20001b70 	.word	0x20001b70
 8007a1c:	42200000 	.word	0x42200000
 8007a20:	c2200000 	.word	0xc2200000
 8007a24:	43480000 	.word	0x43480000
 8007a28:	20000568 	.word	0x20000568
 8007a2c:	c3480000 	.word	0xc3480000
 8007a30:	20000569 	.word	0x20000569
 8007a34:	200006fc 	.word	0x200006fc
 8007a38:	20000a94 	.word	0x20000a94
 8007a3c:	432f0000 	.word	0x432f0000
 8007a40:	20001b74 	.word	0x20001b74
 8007a44:	c32f0000 	.word	0xc32f0000
 8007a48:	40a00000 	.word	0x40a00000
 8007a4c:	c0a00000 	.word	0xc0a00000
 8007a50:	200005fc 	.word	0x200005fc
 8007a54:	200006a0 	.word	0x200006a0
 8007a58:	20000480 	.word	0x20000480
 8007a5c:	20000780 	.word	0x20000780
 8007a60:	20000080 	.word	0x20000080
 8007a64:	447a0000 	.word	0x447a0000
 8007a68:	20000820 	.word	0x20000820
 8007a6c:	00000000 	.word	0x00000000
 8007a70:	20000824 	.word	0x20000824
	} else {
		// Not moving - hold target position with position control
		prismatic_axis.pos_error = prismatic_axis.position
 8007a74:	4bbc      	ldr	r3, [pc, #752]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007a76:	ed93 7a00 	vldr	s14, [r3]
				- prismatic_encoder.mm;
 8007a7a:	4bbc      	ldr	r3, [pc, #752]	@ (8007d6c <update_joy_mode_velocity_control+0x604>)
 8007a7c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8007a80:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.pos_error = prismatic_axis.position
 8007a84:	4bb8      	ldr	r3, [pc, #736]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007a86:	edc3 7a05 	vstr	s15, [r3, #20]
		prismatic_axis.command_vel = PWM_Satuation(
 8007a8a:	4bb7      	ldr	r3, [pc, #732]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007a8c:	edd3 7a05 	vldr	s15, [r3, #20]
 8007a90:	eeb0 0a67 	vmov.f32	s0, s15
 8007a94:	48b6      	ldr	r0, [pc, #728]	@ (8007d70 <update_joy_mode_velocity_control+0x608>)
 8007a96:	f7f9 fbbf 	bl	8001218 <PID_CONTROLLER_Compute>
 8007a9a:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_position_pid,
						prismatic_axis.pos_error),
				ZGX45RGG_400RPM_Constant.sd_max,
 8007a9e:	4bb5      	ldr	r3, [pc, #724]	@ (8007d74 <update_joy_mode_velocity_control+0x60c>)
 8007aa0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		prismatic_axis.command_vel = PWM_Satuation(
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	f7f9 f80c 	bl	8000ac4 <__aeabi_d2iz>
 8007aac:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.sd_max);
 8007aae:	4bb1      	ldr	r3, [pc, #708]	@ (8007d74 <update_joy_mode_velocity_control+0x60c>)
 8007ab0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007ab4:	603a      	str	r2, [r7, #0]
 8007ab6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007aba:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_vel = PWM_Satuation(
 8007abc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ac0:	f7f9 f800 	bl	8000ac4 <__aeabi_d2iz>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4620      	mov	r0, r4
 8007aca:	eeb0 0a48 	vmov.f32	s0, s16
 8007ace:	f7f9 fb41 	bl	8001154 <PWM_Satuation>
 8007ad2:	ee07 0a90 	vmov	s15, r0
 8007ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ada:	4ba3      	ldr	r3, [pc, #652]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007adc:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

		prismatic_axis.vel_error = prismatic_axis.command_vel
 8007ae0:	4ba1      	ldr	r3, [pc, #644]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007ae2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8007ae6:	4ba0      	ldr	r3, [pc, #640]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007ae8:	edd3 7a07 	vldr	s15, [r3, #28]
 8007aec:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8007af0:	4b9d      	ldr	r3, [pc, #628]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007af2:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8007af6:	4b9c      	ldr	r3, [pc, #624]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007af8:	edd3 7a06 	vldr	s15, [r3, #24]
 8007afc:	eeb0 0a67 	vmov.f32	s0, s15
 8007b00:	489d      	ldr	r0, [pc, #628]	@ (8007d78 <update_joy_mode_velocity_control+0x610>)
 8007b02:	f7f9 fb89 	bl	8001218 <PID_CONTROLLER_Compute>
 8007b06:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8007b0a:	4b9a      	ldr	r3, [pc, #616]	@ (8007d74 <update_joy_mode_velocity_control+0x60c>)
 8007b0c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8007b10:	4610      	mov	r0, r2
 8007b12:	4619      	mov	r1, r3
 8007b14:	f7f8 ffd6 	bl	8000ac4 <__aeabi_d2iz>
 8007b18:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8007b1a:	4b96      	ldr	r3, [pc, #600]	@ (8007d74 <update_joy_mode_velocity_control+0x60c>)
 8007b1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007b20:	4615      	mov	r5, r2
 8007b22:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(
 8007b26:	4628      	mov	r0, r5
 8007b28:	4631      	mov	r1, r6
 8007b2a:	f7f8 ffcb 	bl	8000ac4 <__aeabi_d2iz>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	4619      	mov	r1, r3
 8007b32:	4620      	mov	r0, r4
 8007b34:	eeb0 0a48 	vmov.f32	s0, s16
 8007b38:	f7f9 fb0c 	bl	8001154 <PWM_Satuation>
 8007b3c:	ee07 0a90 	vmov	s15, r0
 8007b40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b44:	4b88      	ldr	r3, [pc, #544]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007b46:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// No feedforward when holding position
		prismatic_axis.ffd = 0.0f;
 8007b4a:	4b87      	ldr	r3, [pc, #540]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007b4c:	f04f 0200 	mov.w	r2, #0
 8007b50:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8007b52:	4b85      	ldr	r3, [pc, #532]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007b54:	f04f 0200 	mov.w	r2, #0
 8007b58:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	// Update previous state for next iteration
	pris_was_moving = pris_moving;
 8007b5a:	4a88      	ldr	r2, [pc, #544]	@ (8007d7c <update_joy_mode_velocity_control+0x614>)
 8007b5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b60:	7013      	strb	r3, [r2, #0]

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8007b62:	4b81      	ldr	r3, [pc, #516]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007b64:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8007b68:	4b7f      	ldr	r3, [pc, #508]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007b6a:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8007b6e:	4b7e      	ldr	r3, [pc, #504]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007b70:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007b74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b7c:	4b7a      	ldr	r3, [pc, #488]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007b7e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007b82:	4b79      	ldr	r3, [pc, #484]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007b84:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007b88:	4b7a      	ldr	r3, [pc, #488]	@ (8007d74 <update_joy_mode_velocity_control+0x60c>)
 8007b8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007b8e:	4610      	mov	r0, r2
 8007b90:	4619      	mov	r1, r3
 8007b92:	f7f8 ff97 	bl	8000ac4 <__aeabi_d2iz>
 8007b96:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007b98:	4b76      	ldr	r3, [pc, #472]	@ (8007d74 <update_joy_mode_velocity_control+0x60c>)
 8007b9a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007b9e:	4692      	mov	sl, r2
 8007ba0:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007ba4:	4650      	mov	r0, sl
 8007ba6:	4659      	mov	r1, fp
 8007ba8:	f7f8 ff8c 	bl	8000ac4 <__aeabi_d2iz>
 8007bac:	4603      	mov	r3, r0
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	eeb0 0a48 	vmov.f32	s0, s16
 8007bb6:	f7f9 facd 	bl	8001154 <PWM_Satuation>
 8007bba:	ee07 0a90 	vmov	s15, r0
 8007bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bc2:	4b69      	ldr	r3, [pc, #420]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007bc4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	/* REVOLUTE AXIS CONTROL - SIMPLIFIED PURE PWM WITH FFD + DFD */
	float base_pwm = 0.0f;
 8007bc8:	f04f 0300 	mov.w	r3, #0
 8007bcc:	61fb      	str	r3, [r7, #28]

	if (rev_moving) {
 8007bce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d02e      	beq.n	8007c34 <update_joy_mode_velocity_control+0x4cc>
		// Calculate base PWM proportional to joystick input
		// Scale joystick input (-50 to +50) to PWM range
		float joystick_normalized = joystick_y / 50.0f; // -1.0 to +1.0
 8007bd6:	4b6a      	ldr	r3, [pc, #424]	@ (8007d80 <update_joy_mode_velocity_control+0x618>)
 8007bd8:	ed93 7a00 	vldr	s14, [r3]
 8007bdc:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8007d84 <update_joy_mode_velocity_control+0x61c>
 8007be0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007be4:	edc7 7a04 	vstr	s15, [r7, #16]
		base_pwm = joystick_normalized
				* (ZGX45RGG_150RPM_Constant.U_max * 0.3f); // Limit to 30% max PWM for safety
 8007be8:	6938      	ldr	r0, [r7, #16]
 8007bea:	f7f8 fc79 	bl	80004e0 <__aeabi_f2d>
 8007bee:	4604      	mov	r4, r0
 8007bf0:	460d      	mov	r5, r1
 8007bf2:	4b65      	ldr	r3, [pc, #404]	@ (8007d88 <update_joy_mode_velocity_control+0x620>)
 8007bf4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007bf8:	a359      	add	r3, pc, #356	@ (adr r3, 8007d60 <update_joy_mode_velocity_control+0x5f8>)
 8007bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfe:	f7f8 fcc7 	bl	8000590 <__aeabi_dmul>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4620      	mov	r0, r4
 8007c08:	4629      	mov	r1, r5
 8007c0a:	f7f8 fcc1 	bl	8000590 <__aeabi_dmul>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
		base_pwm = joystick_normalized
 8007c12:	4610      	mov	r0, r2
 8007c14:	4619      	mov	r1, r3
 8007c16:	f7f8 ff9d 	bl	8000b54 <__aeabi_d2f>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	61fb      	str	r3, [r7, #28]

		// Add velocity feedforward
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8007c1e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8007c22:	485a      	ldr	r0, [pc, #360]	@ (8007d8c <update_joy_mode_velocity_control+0x624>)
 8007c24:	f7f9 fcb8 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8007c28:	eef0 7a40 	vmov.f32	s15, s0
 8007c2c:	4b58      	ldr	r3, [pc, #352]	@ (8007d90 <update_joy_mode_velocity_control+0x628>)
 8007c2e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 8007c32:	e006      	b.n	8007c42 <update_joy_mode_velocity_control+0x4da>
				rev_command_vel);
	} else {
		// Joystick released - no base PWM, only compensation
		base_pwm = 0.0f;
 8007c34:	f04f 0300 	mov.w	r3, #0
 8007c38:	61fb      	str	r3, [r7, #28]
		revolute_axis.ffd = 0.0f;
 8007c3a:	4b55      	ldr	r3, [pc, #340]	@ (8007d90 <update_joy_mode_velocity_control+0x628>)
 8007c3c:	f04f 0200 	mov.w	r2, #0
 8007c40:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	// Always add gravity/disturbance compensation
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007c42:	4b54      	ldr	r3, [pc, #336]	@ (8007d94 <update_joy_mode_velocity_control+0x62c>)
 8007c44:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8007c48:	4b48      	ldr	r3, [pc, #288]	@ (8007d6c <update_joy_mode_velocity_control+0x604>)
 8007c4a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007c4e:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8007d98 <update_joy_mode_velocity_control+0x630>
 8007c52:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007c56:	eef0 0a66 	vmov.f32	s1, s13
 8007c5a:	eeb0 0a47 	vmov.f32	s0, s14
 8007c5e:	484f      	ldr	r0, [pc, #316]	@ (8007d9c <update_joy_mode_velocity_control+0x634>)
 8007c60:	f7f9 fd2d 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8007c64:	eef0 7a40 	vmov.f32	s15, s0
 8007c68:	4b49      	ldr	r3, [pc, #292]	@ (8007d90 <update_joy_mode_velocity_control+0x628>)
 8007c6a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Apply filtering to feedforward terms for stability
	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8007c6e:	4b4c      	ldr	r3, [pc, #304]	@ (8007da0 <update_joy_mode_velocity_control+0x638>)
 8007c70:	edd3 7a00 	vldr	s15, [r3]
 8007c74:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8007da4 <update_joy_mode_velocity_control+0x63c>
 8007c78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007c7c:	4b44      	ldr	r3, [pc, #272]	@ (8007d90 <update_joy_mode_velocity_control+0x628>)
 8007c7e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8007c82:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8007da8 <update_joy_mode_velocity_control+0x640>
 8007c86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c8e:	4b44      	ldr	r3, [pc, #272]	@ (8007da0 <update_joy_mode_velocity_control+0x638>)
 8007c90:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 8007c94:	4b45      	ldr	r3, [pc, #276]	@ (8007dac <update_joy_mode_velocity_control+0x644>)
 8007c96:	edd3 7a00 	vldr	s15, [r3]
 8007c9a:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8007da4 <update_joy_mode_velocity_control+0x63c>
 8007c9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8007d90 <update_joy_mode_velocity_control+0x628>)
 8007ca4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007ca8:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8007da8 <update_joy_mode_velocity_control+0x640>
 8007cac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cb4:	4b3d      	ldr	r3, [pc, #244]	@ (8007dac <update_joy_mode_velocity_control+0x644>)
 8007cb6:	edc3 7a00 	vstr	s15, [r3]

	// Combine base PWM with feedforward compensation
	revolute_axis.command_pos = base_pwm
			+ 0.01f * (ffd_filtered + dfd_filtered);
 8007cba:	4b39      	ldr	r3, [pc, #228]	@ (8007da0 <update_joy_mode_velocity_control+0x638>)
 8007cbc:	ed93 7a00 	vldr	s14, [r3]
 8007cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8007dac <update_joy_mode_velocity_control+0x644>)
 8007cc2:	edd3 7a00 	vldr	s15, [r3]
 8007cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cca:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8007db0 <update_joy_mode_velocity_control+0x648>
 8007cce:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007cd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8007cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
	revolute_axis.command_pos = base_pwm
 8007cda:	4b2d      	ldr	r3, [pc, #180]	@ (8007d90 <update_joy_mode_velocity_control+0x628>)
 8007cdc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Saturate final command
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007ce0:	4b2b      	ldr	r3, [pc, #172]	@ (8007d90 <update_joy_mode_velocity_control+0x628>)
 8007ce2:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007ce6:	4b28      	ldr	r3, [pc, #160]	@ (8007d88 <update_joy_mode_velocity_control+0x620>)
 8007ce8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007cec:	4610      	mov	r0, r2
 8007cee:	4619      	mov	r1, r3
 8007cf0:	f7f8 fee8 	bl	8000ac4 <__aeabi_d2iz>
 8007cf4:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007cf6:	4b24      	ldr	r3, [pc, #144]	@ (8007d88 <update_joy_mode_velocity_control+0x620>)
 8007cf8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007cfc:	4690      	mov	r8, r2
 8007cfe:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007d02:	4640      	mov	r0, r8
 8007d04:	4649      	mov	r1, r9
 8007d06:	f7f8 fedd 	bl	8000ac4 <__aeabi_d2iz>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	4620      	mov	r0, r4
 8007d10:	eeb0 0a48 	vmov.f32	s0, s16
 8007d14:	f7f9 fa1e 	bl	8001154 <PWM_Satuation>
 8007d18:	ee07 0a90 	vmov	s15, r0
 8007d1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d20:	4b1b      	ldr	r3, [pc, #108]	@ (8007d90 <update_joy_mode_velocity_control+0x628>)
 8007d22:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply motor commands
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8007d26:	4b10      	ldr	r3, [pc, #64]	@ (8007d68 <update_joy_mode_velocity_control+0x600>)
 8007d28:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007d2c:	eef0 0a67 	vmov.f32	s1, s15
 8007d30:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8007db4 <update_joy_mode_velocity_control+0x64c>
 8007d34:	4820      	ldr	r0, [pc, #128]	@ (8007db8 <update_joy_mode_velocity_control+0x650>)
 8007d36:	f7f9 fb47 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8007d3a:	4b15      	ldr	r3, [pc, #84]	@ (8007d90 <update_joy_mode_velocity_control+0x628>)
 8007d3c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007d40:	eef0 0a67 	vmov.f32	s1, s15
 8007d44:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8007db4 <update_joy_mode_velocity_control+0x64c>
 8007d48:	481c      	ldr	r0, [pc, #112]	@ (8007dbc <update_joy_mode_velocity_control+0x654>)
 8007d4a:	f7f9 fb3d 	bl	80013c8 <MDXX_set_range>
}
 8007d4e:	bf00      	nop
 8007d50:	3734      	adds	r7, #52	@ 0x34
 8007d52:	46bd      	mov	sp, r7
 8007d54:	ecbd 8b02 	vpop	{d8}
 8007d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5c:	f3af 8000 	nop.w
 8007d60:	40000000 	.word	0x40000000
 8007d64:	3fd33333 	.word	0x3fd33333
 8007d68:	20000480 	.word	0x20000480
 8007d6c:	200006a0 	.word	0x200006a0
 8007d70:	20000758 	.word	0x20000758
 8007d74:	20000080 	.word	0x20000080
 8007d78:	20000780 	.word	0x20000780
 8007d7c:	200005fc 	.word	0x200005fc
 8007d80:	20001b74 	.word	0x20001b74
 8007d84:	42480000 	.word	0x42480000
 8007d88:	20000000 	.word	0x20000000
 8007d8c:	2000082c 	.word	0x2000082c
 8007d90:	200004c4 	.word	0x200004c4
 8007d94:	200006fc 	.word	0x200006fc
 8007d98:	447a0000 	.word	0x447a0000
 8007d9c:	20000830 	.word	0x20000830
 8007da0:	20000600 	.word	0x20000600
 8007da4:	3f4ccccd 	.word	0x3f4ccccd
 8007da8:	3e4ccccd 	.word	0x3e4ccccd
 8007dac:	20000604 	.word	0x20000604
 8007db0:	3c23d70a 	.word	0x3c23d70a
 8007db4:	44fa0000 	.word	0x44fa0000
 8007db8:	20000608 	.word	0x20000608
 8007dbc:	20000654 	.word	0x20000654

08007dc0 <update_joy_mode_pilot_light>:

void update_joy_mode_pilot_light(void) {
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	af00      	add	r7, sp, #0
	if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8007dc4:	4b14      	ldr	r3, [pc, #80]	@ (8007e18 <update_joy_mode_pilot_light+0x58>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	2b03      	cmp	r3, #3
 8007dca:	d122      	bne.n	8007e12 <update_joy_mode_pilot_light+0x52>
		// Toggle pilot light every 1 second when 10 positions are saved
		joy_mode_pilot_timer++;
 8007dcc:	4b13      	ldr	r3, [pc, #76]	@ (8007e1c <update_joy_mode_pilot_light+0x5c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	4a12      	ldr	r2, [pc, #72]	@ (8007e1c <update_joy_mode_pilot_light+0x5c>)
 8007dd4:	6013      	str	r3, [r2, #0]
		if (joy_mode_pilot_timer >= JOY_MODE_PILOT_TOGGLE_PERIOD) {
 8007dd6:	4b11      	ldr	r3, [pc, #68]	@ (8007e1c <update_joy_mode_pilot_light+0x5c>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007dde:	d318      	bcc.n	8007e12 <update_joy_mode_pilot_light+0x52>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8007de0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007de4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007de8:	f004 fd78 	bl	800c8dc <HAL_GPIO_TogglePin>
			joy_mode_pilot_state = !joy_mode_pilot_state;
 8007dec:	4b0c      	ldr	r3, [pc, #48]	@ (8007e20 <update_joy_mode_pilot_light+0x60>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	bf14      	ite	ne
 8007df6:	2301      	movne	r3, #1
 8007df8:	2300      	moveq	r3, #0
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	f083 0301 	eor.w	r3, r3, #1
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	f003 0301 	and.w	r3, r3, #1
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	4b05      	ldr	r3, [pc, #20]	@ (8007e20 <update_joy_mode_pilot_light+0x60>)
 8007e0a:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 8007e0c:	4b03      	ldr	r3, [pc, #12]	@ (8007e1c <update_joy_mode_pilot_light+0x5c>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]
		}
	}
}
 8007e12:	bf00      	nop
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20000584 	.word	0x20000584
 8007e1c:	200005dc 	.word	0x200005dc
 8007e20:	200005e0 	.word	0x200005e0

08007e24 <update_joy_mode>:

void update_joy_mode(void) {
 8007e24:	b590      	push	{r4, r7, lr}
 8007e26:	ed2d 8b02 	vpush	{d8}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
	if (!joy_mode_active) {
 8007e2e:	4b8e      	ldr	r3, [pc, #568]	@ (8008068 <update_joy_mode+0x244>)
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	f083 0301 	eor.w	r3, r3, #1
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f040 81c0 	bne.w	80081be <update_joy_mode+0x39a>
		return;
	}

	// ALWAYS update position display values when in joy mode
	normalized_position = normalize_angle(revolute_encoder.rads);
 8007e3e:	4b8b      	ldr	r3, [pc, #556]	@ (800806c <update_joy_mode+0x248>)
 8007e40:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007e44:	eeb0 0a67 	vmov.f32	s0, s15
 8007e48:	f7fe f986 	bl	8006158 <normalize_angle>
 8007e4c:	eef0 7a40 	vmov.f32	s15, s0
 8007e50:	4b87      	ldr	r3, [pc, #540]	@ (8008070 <update_joy_mode+0x24c>)
 8007e52:	edc3 7a00 	vstr	s15, [r3]
	prismatic_axis.mm = prismatic_encoder.mm;
 8007e56:	4b87      	ldr	r3, [pc, #540]	@ (8008074 <update_joy_mode+0x250>)
 8007e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e5a:	4a87      	ldr	r2, [pc, #540]	@ (8008078 <update_joy_mode+0x254>)
 8007e5c:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 8007e5e:	4b84      	ldr	r3, [pc, #528]	@ (8008070 <update_joy_mode+0x24c>)
 8007e60:	edd3 7a00 	vldr	s15, [r3]
 8007e64:	220e      	movs	r2, #14
 8007e66:	210f      	movs	r1, #15
 8007e68:	eeb0 0a67 	vmov.f32	s0, s15
 8007e6c:	4883      	ldr	r0, [pc, #524]	@ (800807c <update_joy_mode+0x258>)
 8007e6e:	f7fc fecf 	bl	8004c10 <UnitConverter_angle>
 8007e72:	eef0 7a40 	vmov.f32	s15, s0
 8007e76:	4b82      	ldr	r3, [pc, #520]	@ (8008080 <update_joy_mode+0x25c>)
 8007e78:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);

	switch (joy_mode_state) {
 8007e7c:	4b81      	ldr	r3, [pc, #516]	@ (8008084 <update_joy_mode+0x260>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	f200 819d 	bhi.w	80081c2 <update_joy_mode+0x39e>
 8007e88:	a201      	add	r2, pc, #4	@ (adr r2, 8007e90 <update_joy_mode+0x6c>)
 8007e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8e:	bf00      	nop
 8007e90:	08007ea5 	.word	0x08007ea5
 8007e94:	08007eab 	.word	0x08007eab
 8007e98:	08007eb1 	.word	0x08007eb1
 8007e9c:	08007eb7 	.word	0x08007eb7
 8007ea0:	080081b9 	.word	0x080081b9
	case JOY_MODE_INITIAL_CONTROL:
		// Initial manual joystick control - no position saving yet
		update_joy_mode_velocity_control();
 8007ea4:	f7ff fc60 	bl	8007768 <update_joy_mode_velocity_control>
		break;
 8007ea8:	e18e      	b.n	80081c8 <update_joy_mode+0x3a4>

	case JOY_MODE_MANUAL_CONTROL:
		// Manual joystick control with position saving enabled
		update_joy_mode_velocity_control();
 8007eaa:	f7ff fc5d 	bl	8007768 <update_joy_mode_velocity_control>
		break;
 8007eae:	e18b      	b.n	80081c8 <update_joy_mode+0x3a4>

	case JOY_MODE_POSITION_SAVED:
		// 10 positions saved, pilot light toggling, waiting for B2 to start playback
		update_joy_mode_pilot_light();
 8007eb0:	f7ff ff86 	bl	8007dc0 <update_joy_mode_pilot_light>
		break;
 8007eb4:	e188      	b.n	80081c8 <update_joy_mode+0x3a4>

	case JOY_MODE_PLAYBACK:
		// Playing back saved positions - PILOT LIGHT STAYS ON
		// Handle trajectory sequence states for joy mode playback
		switch (motion_sequence_state) {
 8007eb6:	4b74      	ldr	r3, [pc, #464]	@ (8008088 <update_joy_mode+0x264>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	2b05      	cmp	r3, #5
 8007ebc:	f200 8164 	bhi.w	8008188 <update_joy_mode+0x364>
 8007ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec8 <update_joy_mode+0xa4>)
 8007ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec6:	bf00      	nop
 8007ec8:	08007ee1 	.word	0x08007ee1
 8007ecc:	08007f5f 	.word	0x08007f5f
 8007ed0:	08007f83 	.word	0x08007f83
 8007ed4:	080080bd 	.word	0x080080bd
 8007ed8:	08008163 	.word	0x08008163
 8007edc:	08008181 	.word	0x08008181
		case MOTION_IDLE:
			// Current trajectory finished, wait before starting next
			joy_mode_playback_timer++;
 8007ee0:	4b6a      	ldr	r3, [pc, #424]	@ (800808c <update_joy_mode+0x268>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	4a69      	ldr	r2, [pc, #420]	@ (800808c <update_joy_mode+0x268>)
 8007ee8:	6013      	str	r3, [r2, #0]
			if (joy_mode_playback_timer >= JOY_MODE_PLAYBACK_DELAY) {
 8007eea:	4b68      	ldr	r3, [pc, #416]	@ (800808c <update_joy_mode+0x268>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007ef2:	f0c0 814b 	bcc.w	800818c <update_joy_mode+0x368>
				playback_position_index++;
 8007ef6:	4b66      	ldr	r3, [pc, #408]	@ (8008090 <update_joy_mode+0x26c>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	3301      	adds	r3, #1
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	4b64      	ldr	r3, [pc, #400]	@ (8008090 <update_joy_mode+0x26c>)
 8007f00:	701a      	strb	r2, [r3, #0]

				if (playback_position_index < saved_position_count) {
 8007f02:	4b63      	ldr	r3, [pc, #396]	@ (8008090 <update_joy_mode+0x26c>)
 8007f04:	781a      	ldrb	r2, [r3, #0]
 8007f06:	4b63      	ldr	r3, [pc, #396]	@ (8008094 <update_joy_mode+0x270>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d224      	bcs.n	8007f58 <update_joy_mode+0x134>
					// Start next trajectory
					float target_pris =
							saved_positions[playback_position_index].prismatic_pos;
 8007f0e:	4b60      	ldr	r3, [pc, #384]	@ (8008090 <update_joy_mode+0x26c>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
					float target_pris =
 8007f12:	4a61      	ldr	r2, [pc, #388]	@ (8008098 <update_joy_mode+0x274>)
 8007f14:	00db      	lsls	r3, r3, #3
 8007f16:	4413      	add	r3, r2
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	60fb      	str	r3, [r7, #12]
					float target_rev_rad =
							saved_positions[playback_position_index].revolute_pos;
 8007f1c:	4b5c      	ldr	r3, [pc, #368]	@ (8008090 <update_joy_mode+0x26c>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
					float target_rev_rad =
 8007f20:	4a5d      	ldr	r2, [pc, #372]	@ (8008098 <update_joy_mode+0x274>)
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	4413      	add	r3, r2
 8007f26:	3304      	adds	r3, #4
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	60bb      	str	r3, [r7, #8]
					float target_rev_deg = target_rev_rad * 180.0f / PI;
 8007f2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007f30:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 800809c <update_joy_mode+0x278>
 8007f34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007f38:	eddf 6a59 	vldr	s13, [pc, #356]	@ 80080a0 <update_joy_mode+0x27c>
 8007f3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007f40:	edc7 7a01 	vstr	s15, [r7, #4]

					start_combined_trajectory(target_pris, target_rev_deg);
 8007f44:	edd7 0a01 	vldr	s1, [r7, #4]
 8007f48:	ed97 0a03 	vldr	s0, [r7, #12]
 8007f4c:	f7fe f9ee 	bl	800632c <start_combined_trajectory>
					joy_mode_playback_timer = 0;
 8007f50:	4b4e      	ldr	r3, [pc, #312]	@ (800808c <update_joy_mode+0x268>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	601a      	str	r2, [r3, #0]

					// Optional: Add some indication that playback is complete
					// You could flash the pilot light or set a status flag here
				}
			}
			break;
 8007f56:	e119      	b.n	800818c <update_joy_mode+0x368>
					exit_joy_mode();
 8007f58:	f7ff fa34 	bl	80073c4 <exit_joy_mode>
			break;
 8007f5c:	e116      	b.n	800818c <update_joy_mode+0x368>

		case MOTION_PEN_UP_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 8007f5e:	4b51      	ldr	r3, [pc, #324]	@ (80080a4 <update_joy_mode+0x280>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	3301      	adds	r3, #1
 8007f64:	4a4f      	ldr	r2, [pc, #316]	@ (80080a4 <update_joy_mode+0x280>)
 8007f66:	6013      	str	r3, [r2, #0]
 8007f68:	f240 52db 	movw	r2, #1499	@ 0x5db
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	f240 810f 	bls.w	8008190 <update_joy_mode+0x36c>
				prismatic_axis.trajectory_active = true;
 8007f72:	4b41      	ldr	r3, [pc, #260]	@ (8008078 <update_joy_mode+0x254>)
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 8007f7a:	4b43      	ldr	r3, [pc, #268]	@ (8008088 <update_joy_mode+0x264>)
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8007f80:	e106      	b.n	8008190 <update_joy_mode+0x36c>

		case MOTION_PRISMATIC_ACTIVE:
			if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8007f82:	4b3d      	ldr	r3, [pc, #244]	@ (8008078 <update_joy_mode+0x254>)
 8007f84:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f000 8103 	beq.w	8008194 <update_joy_mode+0x370>
 8007f8e:	4b46      	ldr	r3, [pc, #280]	@ (80080a8 <update_joy_mode+0x284>)
 8007f90:	7c1b      	ldrb	r3, [r3, #16]
 8007f92:	f083 0301 	eor.w	r3, r3, #1
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	f000 80fb 	beq.w	8008194 <update_joy_mode+0x370>
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007f9e:	4b36      	ldr	r3, [pc, #216]	@ (8008078 <update_joy_mode+0x254>)
 8007fa0:	ed93 8a03 	vldr	s16, [r3, #12]
 8007fa4:	4b34      	ldr	r3, [pc, #208]	@ (8008078 <update_joy_mode+0x254>)
 8007fa6:	edd3 8a04 	vldr	s17, [r3, #16]
						prismatic_axis.initial_pos, prismatic_axis.target_pos,
						ZGX45RGG_400RPM_Constant.traject_sd_max,
 8007faa:	4b40      	ldr	r3, [pc, #256]	@ (80080ac <update_joy_mode+0x288>)
 8007fac:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	f7f8 fdce 	bl	8000b54 <__aeabi_d2f>
 8007fb8:	4604      	mov	r4, r0
						ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8007fba:	4b3c      	ldr	r3, [pc, #240]	@ (80080ac <update_joy_mode+0x288>)
 8007fbc:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	f7f8 fdc6 	bl	8000b54 <__aeabi_d2f>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	ee01 3a90 	vmov	s3, r3
 8007fce:	ee01 4a10 	vmov	s2, r4
 8007fd2:	eef0 0a68 	vmov.f32	s1, s17
 8007fd6:	eeb0 0a48 	vmov.f32	s0, s16
 8007fda:	4933      	ldr	r1, [pc, #204]	@ (80080a8 <update_joy_mode+0x284>)
 8007fdc:	4834      	ldr	r0, [pc, #208]	@ (80080b0 <update_joy_mode+0x28c>)
 8007fde:	f7fc fa7f 	bl	80044e0 <Trapezoidal_Evaluated>

				prismatic_axis.position = prisEva.setposition;
 8007fe2:	4b31      	ldr	r3, [pc, #196]	@ (80080a8 <update_joy_mode+0x284>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a24      	ldr	r2, [pc, #144]	@ (8008078 <update_joy_mode+0x254>)
 8007fe8:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = prisEva.setvelocity;
 8007fea:	4b2f      	ldr	r3, [pc, #188]	@ (80080a8 <update_joy_mode+0x284>)
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	4a22      	ldr	r2, [pc, #136]	@ (8008078 <update_joy_mode+0x254>)
 8007ff0:	6053      	str	r3, [r2, #4]

				if (prisEva.isFinised) {
 8007ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80080a8 <update_joy_mode+0x284>)
 8007ff4:	7c1b      	ldrb	r3, [r3, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f000 80cc 	beq.w	8008194 <update_joy_mode+0x370>
					prismatic_axis.trajectory_active = false;
 8007ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8008078 <update_joy_mode+0x254>)
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					prismatic_axis.position = prisEva.setposition;
 8008004:	4b28      	ldr	r3, [pc, #160]	@ (80080a8 <update_joy_mode+0x284>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a1b      	ldr	r2, [pc, #108]	@ (8008078 <update_joy_mode+0x254>)
 800800a:	6013      	str	r3, [r2, #0]
					prismatic_axis.velocity = 0.0f;
 800800c:	4b1a      	ldr	r3, [pc, #104]	@ (8008078 <update_joy_mode+0x254>)
 800800e:	f04f 0200 	mov.w	r2, #0
 8008012:	605a      	str	r2, [r3, #4]

					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8008014:	4b1a      	ldr	r3, [pc, #104]	@ (8008080 <update_joy_mode+0x25c>)
 8008016:	ed93 8a03 	vldr	s16, [r3, #12]
 800801a:	4b19      	ldr	r3, [pc, #100]	@ (8008080 <update_joy_mode+0x25c>)
 800801c:	edd3 8a04 	vldr	s17, [r3, #16]
							revolute_axis.target_pos,
							ZGX45RGG_150RPM_Constant.traject_qd_max,
 8008020:	4b24      	ldr	r3, [pc, #144]	@ (80080b4 <update_joy_mode+0x290>)
 8008022:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8008026:	4610      	mov	r0, r2
 8008028:	4619      	mov	r1, r3
 800802a:	f7f8 fd93 	bl	8000b54 <__aeabi_d2f>
 800802e:	4604      	mov	r4, r0
							ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8008030:	4b20      	ldr	r3, [pc, #128]	@ (80080b4 <update_joy_mode+0x290>)
 8008032:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8008036:	4610      	mov	r0, r2
 8008038:	4619      	mov	r1, r3
 800803a:	f7f8 fd8b 	bl	8000b54 <__aeabi_d2f>
 800803e:	4603      	mov	r3, r0
 8008040:	ee01 3a90 	vmov	s3, r3
 8008044:	ee01 4a10 	vmov	s2, r4
 8008048:	eef0 0a68 	vmov.f32	s1, s17
 800804c:	eeb0 0a48 	vmov.f32	s0, s16
 8008050:	4819      	ldr	r0, [pc, #100]	@ (80080b8 <update_joy_mode+0x294>)
 8008052:	f7fc f983 	bl	800435c <Trapezoidal_Generator>

					revolute_axis.trajectory_active = true;
 8008056:	4b0a      	ldr	r3, [pc, #40]	@ (8008080 <update_joy_mode+0x25c>)
 8008058:	2201      	movs	r2, #1
 800805a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 800805e:	4b0a      	ldr	r3, [pc, #40]	@ (8008088 <update_joy_mode+0x264>)
 8008060:	2203      	movs	r2, #3
 8008062:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8008064:	e096      	b.n	8008194 <update_joy_mode+0x370>
 8008066:	bf00      	nop
 8008068:	20000585 	.word	0x20000585
 800806c:	200006fc 	.word	0x200006fc
 8008070:	2000057c 	.word	0x2000057c
 8008074:	200006a0 	.word	0x200006a0
 8008078:	20000480 	.word	0x20000480
 800807c:	20000a94 	.word	0x20000a94
 8008080:	200004c4 	.word	0x200004c4
 8008084:	20000584 	.word	0x20000584
 8008088:	20000508 	.word	0x20000508
 800808c:	200005e4 	.word	0x200005e4
 8008090:	200005d9 	.word	0x200005d9
 8008094:	200005d8 	.word	0x200005d8
 8008098:	20000588 	.word	0x20000588
 800809c:	43340000 	.word	0x43340000
 80080a0:	40490fdb 	.word	0x40490fdb
 80080a4:	20000560 	.word	0x20000560
 80080a8:	20000534 	.word	0x20000534
 80080ac:	20000080 	.word	0x20000080
 80080b0:	2000050c 	.word	0x2000050c
 80080b4:	20000000 	.word	0x20000000
 80080b8:	20000520 	.word	0x20000520

		case MOTION_REVOLUTE_ACTIVE:
			if (revolute_axis.trajectory_active && !revEva.isFinised) {
 80080bc:	4b45      	ldr	r3, [pc, #276]	@ (80081d4 <update_joy_mode+0x3b0>)
 80080be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d068      	beq.n	8008198 <update_joy_mode+0x374>
 80080c6:	4b44      	ldr	r3, [pc, #272]	@ (80081d8 <update_joy_mode+0x3b4>)
 80080c8:	7c1b      	ldrb	r3, [r3, #16]
 80080ca:	f083 0301 	eor.w	r3, r3, #1
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d061      	beq.n	8008198 <update_joy_mode+0x374>
				Trapezoidal_Evaluated(&revGen, &revEva,
 80080d4:	4b3f      	ldr	r3, [pc, #252]	@ (80081d4 <update_joy_mode+0x3b0>)
 80080d6:	ed93 8a03 	vldr	s16, [r3, #12]
 80080da:	4b3e      	ldr	r3, [pc, #248]	@ (80081d4 <update_joy_mode+0x3b0>)
 80080dc:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.initial_pos, revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 80080e0:	4b3e      	ldr	r3, [pc, #248]	@ (80081dc <update_joy_mode+0x3b8>)
 80080e2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Evaluated(&revGen, &revEva,
 80080e6:	4610      	mov	r0, r2
 80080e8:	4619      	mov	r1, r3
 80080ea:	f7f8 fd33 	bl	8000b54 <__aeabi_d2f>
 80080ee:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80080f0:	4b3a      	ldr	r3, [pc, #232]	@ (80081dc <update_joy_mode+0x3b8>)
 80080f2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Evaluated(&revGen, &revEva,
 80080f6:	4610      	mov	r0, r2
 80080f8:	4619      	mov	r1, r3
 80080fa:	f7f8 fd2b 	bl	8000b54 <__aeabi_d2f>
 80080fe:	4603      	mov	r3, r0
 8008100:	ee01 3a90 	vmov	s3, r3
 8008104:	ee01 4a10 	vmov	s2, r4
 8008108:	eef0 0a68 	vmov.f32	s1, s17
 800810c:	eeb0 0a48 	vmov.f32	s0, s16
 8008110:	4931      	ldr	r1, [pc, #196]	@ (80081d8 <update_joy_mode+0x3b4>)
 8008112:	4833      	ldr	r0, [pc, #204]	@ (80081e0 <update_joy_mode+0x3bc>)
 8008114:	f7fc f9e4 	bl	80044e0 <Trapezoidal_Evaluated>

				revolute_axis.position = revEva.setposition;
 8008118:	4b2f      	ldr	r3, [pc, #188]	@ (80081d8 <update_joy_mode+0x3b4>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a2d      	ldr	r2, [pc, #180]	@ (80081d4 <update_joy_mode+0x3b0>)
 800811e:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = revEva.setvelocity;
 8008120:	4b2d      	ldr	r3, [pc, #180]	@ (80081d8 <update_joy_mode+0x3b4>)
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	4a2b      	ldr	r2, [pc, #172]	@ (80081d4 <update_joy_mode+0x3b0>)
 8008126:	6053      	str	r3, [r2, #4]

				if (revEva.isFinised) {
 8008128:	4b2b      	ldr	r3, [pc, #172]	@ (80081d8 <update_joy_mode+0x3b4>)
 800812a:	7c1b      	ldrb	r3, [r3, #16]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d033      	beq.n	8008198 <update_joy_mode+0x374>
					revolute_axis.trajectory_active = false;
 8008130:	4b28      	ldr	r3, [pc, #160]	@ (80081d4 <update_joy_mode+0x3b0>)
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					revolute_axis.position = revEva.setposition;
 8008138:	4b27      	ldr	r3, [pc, #156]	@ (80081d8 <update_joy_mode+0x3b4>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a25      	ldr	r2, [pc, #148]	@ (80081d4 <update_joy_mode+0x3b0>)
 800813e:	6013      	str	r3, [r2, #0]
					revolute_axis.velocity = 0.0f;
 8008140:	4b24      	ldr	r3, [pc, #144]	@ (80081d4 <update_joy_mode+0x3b0>)
 8008142:	f04f 0200 	mov.w	r2, #0
 8008146:	605a      	str	r2, [r3, #4]

					PID_CONTROLLER_Reset(&revolute_position_pid);
 8008148:	4826      	ldr	r0, [pc, #152]	@ (80081e4 <update_joy_mode+0x3c0>)
 800814a:	f7f9 f8f7 	bl	800133c <PID_CONTROLLER_Reset>
					PID_CONTROLLER_Reset(&revolute_velocity_pid);
 800814e:	4826      	ldr	r0, [pc, #152]	@ (80081e8 <update_joy_mode+0x3c4>)
 8008150:	f7f9 f8f4 	bl	800133c <PID_CONTROLLER_Reset>

					motion_delay_timer = 0;
 8008154:	4b25      	ldr	r3, [pc, #148]	@ (80081ec <update_joy_mode+0x3c8>)
 8008156:	2200      	movs	r2, #0
 8008158:	601a      	str	r2, [r3, #0]
					motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 800815a:	4b25      	ldr	r3, [pc, #148]	@ (80081f0 <update_joy_mode+0x3cc>)
 800815c:	2204      	movs	r2, #4
 800815e:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8008160:	e01a      	b.n	8008198 <update_joy_mode+0x374>

		case MOTION_PEN_DOWN_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 8008162:	4b22      	ldr	r3, [pc, #136]	@ (80081ec <update_joy_mode+0x3c8>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3301      	adds	r3, #1
 8008168:	4a20      	ldr	r2, [pc, #128]	@ (80081ec <update_joy_mode+0x3c8>)
 800816a:	6013      	str	r3, [r2, #0]
 800816c:	f240 52db 	movw	r2, #1499	@ 0x5db
 8008170:	4293      	cmp	r3, r2
 8008172:	d913      	bls.n	800819c <update_joy_mode+0x378>
				plotter_pen_down();
 8008174:	f001 f852 	bl	800921c <plotter_pen_down>
				motion_sequence_state = MOTION_COMPLETE;
 8008178:	4b1d      	ldr	r3, [pc, #116]	@ (80081f0 <update_joy_mode+0x3cc>)
 800817a:	2205      	movs	r2, #5
 800817c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800817e:	e00d      	b.n	800819c <update_joy_mode+0x378>

		case MOTION_COMPLETE:
			motion_sequence_state = MOTION_IDLE;
 8008180:	4b1b      	ldr	r3, [pc, #108]	@ (80081f0 <update_joy_mode+0x3cc>)
 8008182:	2200      	movs	r2, #0
 8008184:	701a      	strb	r2, [r3, #0]
			break;
 8008186:	e00a      	b.n	800819e <update_joy_mode+0x37a>

		default:
			break;
 8008188:	bf00      	nop
 800818a:	e008      	b.n	800819e <update_joy_mode+0x37a>
			break;
 800818c:	bf00      	nop
 800818e:	e006      	b.n	800819e <update_joy_mode+0x37a>
			break;
 8008190:	bf00      	nop
 8008192:	e004      	b.n	800819e <update_joy_mode+0x37a>
			break;
 8008194:	bf00      	nop
 8008196:	e002      	b.n	800819e <update_joy_mode+0x37a>
			break;
 8008198:	bf00      	nop
 800819a:	e000      	b.n	800819e <update_joy_mode+0x37a>
			break;
 800819c:	bf00      	nop
		}

		// Update position/velocity control for trajectory playback
		if (motion_sequence_state != MOTION_IDLE) {
 800819e:	4b14      	ldr	r3, [pc, #80]	@ (80081f0 <update_joy_mode+0x3cc>)
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00f      	beq.n	80081c6 <update_joy_mode+0x3a2>
			// Run position control if not in manual control
			if (position_control_tick >= POSITION_CONTROL_DIVIDER) {
 80081a6:	4b13      	ldr	r3, [pc, #76]	@ (80081f4 <update_joy_mode+0x3d0>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2b09      	cmp	r3, #9
 80081ac:	d901      	bls.n	80081b2 <update_joy_mode+0x38e>
				update_position_control();
 80081ae:	f7fe f9ff 	bl	80065b0 <update_position_control>
			}
			// Always run velocity control during trajectory
			update_velocity_control();
 80081b2:	f7fe fabd 	bl	8006730 <update_velocity_control>
		}
		break;
 80081b6:	e006      	b.n	80081c6 <update_joy_mode+0x3a2>

	case JOY_MODE_COMPLETE:
		exit_joy_mode();
 80081b8:	f7ff f904 	bl	80073c4 <exit_joy_mode>
		break;
 80081bc:	e004      	b.n	80081c8 <update_joy_mode+0x3a4>
		return;
 80081be:	bf00      	nop
 80081c0:	e002      	b.n	80081c8 <update_joy_mode+0x3a4>

	default:
		break;
 80081c2:	bf00      	nop
 80081c4:	e000      	b.n	80081c8 <update_joy_mode+0x3a4>
		break;
 80081c6:	bf00      	nop
	}
}
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	ecbd 8b02 	vpop	{d8}
 80081d0:	bd90      	pop	{r4, r7, pc}
 80081d2:	bf00      	nop
 80081d4:	200004c4 	.word	0x200004c4
 80081d8:	20000548 	.word	0x20000548
 80081dc:	20000000 	.word	0x20000000
 80081e0:	20000520 	.word	0x20000520
 80081e4:	200007a8 	.word	0x200007a8
 80081e8:	200007d0 	.word	0x200007d0
 80081ec:	20000560 	.word	0x20000560
 80081f0:	20000508 	.word	0x20000508
 80081f4:	20000578 	.word	0x20000578

080081f8 <handle_b2_button_polling>:

void handle_b2_button_polling(void) {
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
	// Read current B2 button state (assuming active low like other buttons)
//	bool b2_current_state = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);


	b2S[0] = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 80081fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008200:	4829      	ldr	r0, [pc, #164]	@ (80082a8 <handle_b2_button_polling+0xb0>)
 8008202:	f004 fb3b 	bl	800c87c <HAL_GPIO_ReadPin>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	bf0c      	ite	eq
 800820c:	2301      	moveq	r3, #1
 800820e:	2300      	movne	r3, #0
 8008210:	b2db      	uxtb	r3, r3
 8008212:	461a      	mov	r2, r3
 8008214:	4b25      	ldr	r3, [pc, #148]	@ (80082ac <handle_b2_button_polling+0xb4>)
 8008216:	801a      	strh	r2, [r3, #0]
	// Button just pressed - check if enough time has passed since last press
//		if ((press_counter - last_press_time) >= DEBOUNCE_TIME) {
//			// Button press is valid - trigger action
//			joy_mode_b2_pressed = true;
//			last_press_time = press_counter;
	if (b2S[0] != b2S[1] && b2S[0] == 1) {
 8008218:	4b24      	ldr	r3, [pc, #144]	@ (80082ac <handle_b2_button_polling+0xb4>)
 800821a:	881a      	ldrh	r2, [r3, #0]
 800821c:	4b23      	ldr	r3, [pc, #140]	@ (80082ac <handle_b2_button_polling+0xb4>)
 800821e:	885b      	ldrh	r3, [r3, #2]
 8008220:	429a      	cmp	r2, r3
 8008222:	d03a      	beq.n	800829a <handle_b2_button_polling+0xa2>
 8008224:	4b21      	ldr	r3, [pc, #132]	@ (80082ac <handle_b2_button_polling+0xb4>)
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d136      	bne.n	800829a <handle_b2_button_polling+0xa2>
		// Handle B2 button press logic
		if (!is_emergency_active() && !homing_active
 800822c:	f7ff f848 	bl	80072c0 <is_emergency_active>
 8008230:	4603      	mov	r3, r0
 8008232:	f083 0301 	eor.w	r3, r3, #1
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	d02e      	beq.n	800829a <handle_b2_button_polling+0xa2>
 800823c:	4b1c      	ldr	r3, [pc, #112]	@ (80082b0 <handle_b2_button_polling+0xb8>)
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	f083 0301 	eor.w	r3, r3, #1
 8008244:	b2db      	uxtb	r3, r3
 8008246:	2b00      	cmp	r3, #0
 8008248:	d027      	beq.n	800829a <handle_b2_button_polling+0xa2>
				&& motion_sequence_state == MOTION_IDLE) {
 800824a:	4b1a      	ldr	r3, [pc, #104]	@ (80082b4 <handle_b2_button_polling+0xbc>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d123      	bne.n	800829a <handle_b2_button_polling+0xa2>
			if (!joy_mode_active) {
 8008252:	4b19      	ldr	r3, [pc, #100]	@ (80082b8 <handle_b2_button_polling+0xc0>)
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	f083 0301 	eor.w	r3, r3, #1
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b00      	cmp	r3, #0
 800825e:	d002      	beq.n	8008266 <handle_b2_button_polling+0x6e>
				// Enter joy mode (starts in JOY_MODE_INITIAL_CONTROL)
				enter_joy_mode();
 8008260:	f7ff f83e 	bl	80072e0 <enter_joy_mode>
 8008264:	e019      	b.n	800829a <handle_b2_button_polling+0xa2>
			} else {
				// Joy mode is active, handle button press based on current state
				if (joy_mode_state == JOY_MODE_INITIAL_CONTROL) {
 8008266:	4b15      	ldr	r3, [pc, #84]	@ (80082bc <handle_b2_button_polling+0xc4>)
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d103      	bne.n	8008276 <handle_b2_button_polling+0x7e>
					// First B2 press in joy mode - start position saving mode
					joy_mode_state = JOY_MODE_MANUAL_CONTROL;
 800826e:	4b13      	ldr	r3, [pc, #76]	@ (80082bc <handle_b2_button_polling+0xc4>)
 8008270:	2202      	movs	r2, #2
 8008272:	701a      	strb	r2, [r3, #0]
 8008274:	e011      	b.n	800829a <handle_b2_button_polling+0xa2>
				} else if (joy_mode_state == JOY_MODE_MANUAL_CONTROL) {
 8008276:	4b11      	ldr	r3, [pc, #68]	@ (80082bc <handle_b2_button_polling+0xc4>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b02      	cmp	r3, #2
 800827c:	d107      	bne.n	800828e <handle_b2_button_polling+0x96>
					check++;
 800827e:	4b10      	ldr	r3, [pc, #64]	@ (80082c0 <handle_b2_button_polling+0xc8>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3301      	adds	r3, #1
 8008284:	4a0e      	ldr	r2, [pc, #56]	@ (80082c0 <handle_b2_button_polling+0xc8>)
 8008286:	6013      	str	r3, [r2, #0]
					save_current_position();
 8008288:	f7ff f928 	bl	80074dc <save_current_position>
 800828c:	e005      	b.n	800829a <handle_b2_button_polling+0xa2>

					// Save current position
				} else if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 800828e:	4b0b      	ldr	r3, [pc, #44]	@ (80082bc <handle_b2_button_polling+0xc4>)
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	2b03      	cmp	r3, #3
 8008294:	d101      	bne.n	800829a <handle_b2_button_polling+0xa2>
					start_position_playback();
 8008296:	f7ff f9d9 	bl	800764c <start_position_playback>
				// Note: During JOY_MODE_PLAYBACK, B2 does nothing (ignore button press)
				// This prevents accidental interruption of playback
			}
		}
	}
	b2S[1] = b2S[0];
 800829a:	4b04      	ldr	r3, [pc, #16]	@ (80082ac <handle_b2_button_polling+0xb4>)
 800829c:	881a      	ldrh	r2, [r3, #0]
 800829e:	4b03      	ldr	r3, [pc, #12]	@ (80082ac <handle_b2_button_polling+0xb4>)
 80082a0:	805a      	strh	r2, [r3, #2]


	// If not enough time has passed, ignore this button press
}
 80082a2:	bf00      	nop
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	48000800 	.word	0x48000800
 80082ac:	200005f0 	.word	0x200005f0
 80082b0:	2000056b 	.word	0x2000056b
 80082b4:	20000508 	.word	0x20000508
 80082b8:	20000585 	.word	0x20000585
 80082bc:	20000584 	.word	0x20000584
 80082c0:	200005ec 	.word	0x200005ec

080082c4 <HAL_GPIO_EXTI_Callback>:
//if (!b2_current_state) {
//	joy_mode_b2_pressed = false;
//}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	4603      	mov	r3, r0
 80082cc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PROX_Pin) {
 80082ce:	88fb      	ldrh	r3, [r7, #6]
 80082d0:	2b40      	cmp	r3, #64	@ 0x40
 80082d2:	d105      	bne.n	80082e0 <HAL_GPIO_EXTI_Callback+0x1c>
		prox_count++;
 80082d4:	4b4e      	ldr	r3, [pc, #312]	@ (8008410 <HAL_GPIO_EXTI_Callback+0x14c>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	3301      	adds	r3, #1
 80082da:	4a4d      	ldr	r2, [pc, #308]	@ (8008410 <HAL_GPIO_EXTI_Callback+0x14c>)
 80082dc:	6013      	str	r3, [r2, #0]
		return;
 80082de:	e093      	b.n	8008408 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == UPPER_PHOTO_Pin) {
 80082e0:	88fb      	ldrh	r3, [r7, #6]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d103      	bne.n	80082ee <HAL_GPIO_EXTI_Callback+0x2a>
		up_photo = true;
 80082e6:	4b4b      	ldr	r3, [pc, #300]	@ (8008414 <HAL_GPIO_EXTI_Callback+0x150>)
 80082e8:	2201      	movs	r2, #1
 80082ea:	701a      	strb	r2, [r3, #0]
		return;
 80082ec:	e08c      	b.n	8008408 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 80082ee:	88fb      	ldrh	r3, [r7, #6]
 80082f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082f4:	d103      	bne.n	80082fe <HAL_GPIO_EXTI_Callback+0x3a>
		low_photo = true;
 80082f6:	4b48      	ldr	r3, [pc, #288]	@ (8008418 <HAL_GPIO_EXTI_Callback+0x154>)
 80082f8:	2201      	movs	r2, #1
 80082fa:	701a      	strb	r2, [r3, #0]
		return;
 80082fc:	e084      	b.n	8008408 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == EMER_Pin) {
 80082fe:	88fb      	ldrh	r3, [r7, #6]
 8008300:	2b10      	cmp	r3, #16
 8008302:	d102      	bne.n	800830a <HAL_GPIO_EXTI_Callback+0x46>
		trigger_hardware_emergency();
 8008304:	f7fe feac 	bl	8007060 <trigger_hardware_emergency>
		return;
 8008308:	e07e      	b.n	8008408 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == J1_Pin) {
 800830a:	88fb      	ldrh	r3, [r7, #6]
 800830c:	2b80      	cmp	r3, #128	@ 0x80
 800830e:	d145      	bne.n	800839c <HAL_GPIO_EXTI_Callback+0xd8>
		if (!is_emergency_active() && !homing_active && !joy_mode_active
 8008310:	f7fe ffd6 	bl	80072c0 <is_emergency_active>
 8008314:	4603      	mov	r3, r0
 8008316:	f083 0301 	eor.w	r3, r3, #1
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b00      	cmp	r3, #0
 800831e:	d06e      	beq.n	80083fe <HAL_GPIO_EXTI_Callback+0x13a>
 8008320:	4b3e      	ldr	r3, [pc, #248]	@ (800841c <HAL_GPIO_EXTI_Callback+0x158>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	f083 0301 	eor.w	r3, r3, #1
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d067      	beq.n	80083fe <HAL_GPIO_EXTI_Callback+0x13a>
 800832e:	4b3c      	ldr	r3, [pc, #240]	@ (8008420 <HAL_GPIO_EXTI_Callback+0x15c>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	f083 0301 	eor.w	r3, r3, #1
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b00      	cmp	r3, #0
 800833a:	d060      	beq.n	80083fe <HAL_GPIO_EXTI_Callback+0x13a>
				&& motion_sequence_state == MOTION_IDLE && !first_startup) {
 800833c:	4b39      	ldr	r3, [pc, #228]	@ (8008424 <HAL_GPIO_EXTI_Callback+0x160>)
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d15c      	bne.n	80083fe <HAL_GPIO_EXTI_Callback+0x13a>
 8008344:	4b38      	ldr	r3, [pc, #224]	@ (8008428 <HAL_GPIO_EXTI_Callback+0x164>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	f083 0301 	eor.w	r3, r3, #1
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d055      	beq.n	80083fe <HAL_GPIO_EXTI_Callback+0x13a>
			start_combined_trajectory(
 8008352:	4b36      	ldr	r3, [pc, #216]	@ (800842c <HAL_GPIO_EXTI_Callback+0x168>)
 8008354:	781b      	ldrb	r3, [r3, #0]
					sequence_pris_points[trajectory_sequence_index],
 8008356:	4a36      	ldr	r2, [pc, #216]	@ (8008430 <HAL_GPIO_EXTI_Callback+0x16c>)
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	edd3 7a00 	vldr	s15, [r3]
			start_combined_trajectory(
 8008360:	4b32      	ldr	r3, [pc, #200]	@ (800842c <HAL_GPIO_EXTI_Callback+0x168>)
 8008362:	781b      	ldrb	r3, [r3, #0]
					sequence_rev_points[trajectory_sequence_index]);
 8008364:	4a33      	ldr	r2, [pc, #204]	@ (8008434 <HAL_GPIO_EXTI_Callback+0x170>)
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	ed93 7a00 	vldr	s14, [r3]
			start_combined_trajectory(
 800836e:	eef0 0a47 	vmov.f32	s1, s14
 8008372:	eeb0 0a67 	vmov.f32	s0, s15
 8008376:	f7fd ffd9 	bl	800632c <start_combined_trajectory>
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 800837a:	4b2c      	ldr	r3, [pc, #176]	@ (800842c <HAL_GPIO_EXTI_Callback+0x168>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	1c5a      	adds	r2, r3, #1
					% SEQUENCE_MAX_POINTS;
 8008380:	4b2d      	ldr	r3, [pc, #180]	@ (8008438 <HAL_GPIO_EXTI_Callback+0x174>)
 8008382:	fb83 3102 	smull	r3, r1, r3, r2
 8008386:	17d3      	asrs	r3, r2, #31
 8008388:	1ac9      	subs	r1, r1, r3
 800838a:	460b      	mov	r3, r1
 800838c:	005b      	lsls	r3, r3, #1
 800838e:	440b      	add	r3, r1
 8008390:	005b      	lsls	r3, r3, #1
 8008392:	1ad1      	subs	r1, r2, r3
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8008394:	b2ca      	uxtb	r2, r1
 8008396:	4b25      	ldr	r3, [pc, #148]	@ (800842c <HAL_GPIO_EXTI_Callback+0x168>)
 8008398:	701a      	strb	r2, [r3, #0]
		}
		return;
 800839a:	e030      	b.n	80083fe <HAL_GPIO_EXTI_Callback+0x13a>
	}

// J2 is NOT handled here anymore - it's polled in the main loop

	if (GPIO_Pin == J3_Pin) {
 800839c:	88fb      	ldrh	r3, [r7, #6]
 800839e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083a2:	d116      	bne.n	80083d2 <HAL_GPIO_EXTI_Callback+0x10e>
		if (!is_emergency_active() && !joy_mode_active
 80083a4:	f7fe ff8c 	bl	80072c0 <is_emergency_active>
 80083a8:	4603      	mov	r3, r0
 80083aa:	f083 0301 	eor.w	r3, r3, #1
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d026      	beq.n	8008402 <HAL_GPIO_EXTI_Callback+0x13e>
 80083b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008420 <HAL_GPIO_EXTI_Callback+0x15c>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	f083 0301 	eor.w	r3, r3, #1
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d01f      	beq.n	8008402 <HAL_GPIO_EXTI_Callback+0x13e>
				&& motion_sequence_state == MOTION_IDLE) {
 80083c2:	4b18      	ldr	r3, [pc, #96]	@ (8008424 <HAL_GPIO_EXTI_Callback+0x160>)
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d11b      	bne.n	8008402 <HAL_GPIO_EXTI_Callback+0x13e>
			start_homing_sequence(false);
 80083ca:	2000      	movs	r0, #0
 80083cc:	f7fd fa98 	bl	8005900 <start_homing_sequence>
		}
		return;
 80083d0:	e017      	b.n	8008402 <HAL_GPIO_EXTI_Callback+0x13e>
	}

// Modified J4 button handler for joy mode exit
	if (GPIO_Pin == J4_Pin) {
 80083d2:	88fb      	ldrh	r3, [r7, #6]
 80083d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083d8:	d116      	bne.n	8008408 <HAL_GPIO_EXTI_Callback+0x144>
		if (joy_mode_active) {
 80083da:	4b11      	ldr	r3, [pc, #68]	@ (8008420 <HAL_GPIO_EXTI_Callback+0x15c>)
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <HAL_GPIO_EXTI_Callback+0x124>
			// Exit joy mode and hold current position (don't move)
			exit_joy_mode();
 80083e2:	f7fe ffef 	bl	80073c4 <exit_joy_mode>
		} else if (is_emergency_active()) {
			clear_emergency_state();
			start_homing_sequence(true);
		}
		return;
 80083e6:	e00e      	b.n	8008406 <HAL_GPIO_EXTI_Callback+0x142>
		} else if (is_emergency_active()) {
 80083e8:	f7fe ff6a 	bl	80072c0 <is_emergency_active>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d009      	beq.n	8008406 <HAL_GPIO_EXTI_Callback+0x142>
			clear_emergency_state();
 80083f2:	f7fe fe73 	bl	80070dc <clear_emergency_state>
			start_homing_sequence(true);
 80083f6:	2001      	movs	r0, #1
 80083f8:	f7fd fa82 	bl	8005900 <start_homing_sequence>
		return;
 80083fc:	e003      	b.n	8008406 <HAL_GPIO_EXTI_Callback+0x142>
		return;
 80083fe:	bf00      	nop
 8008400:	e002      	b.n	8008408 <HAL_GPIO_EXTI_Callback+0x144>
		return;
 8008402:	bf00      	nop
 8008404:	e000      	b.n	8008408 <HAL_GPIO_EXTI_Callback+0x144>
		return;
 8008406:	bf00      	nop
	}
}
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20000564 	.word	0x20000564
 8008414:	20000568 	.word	0x20000568
 8008418:	20000569 	.word	0x20000569
 800841c:	2000056b 	.word	0x2000056b
 8008420:	20000585 	.word	0x20000585
 8008424:	20000508 	.word	0x20000508
 8008428:	20000333 	.word	0x20000333
 800842c:	2000055c 	.word	0x2000055c
 8008430:	080143f8 	.word	0x080143f8
 8008434:	08014410 	.word	0x08014410
 8008438:	2aaaaaab 	.word	0x2aaaaaab

0800843c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	4a9f      	ldr	r2, [pc, #636]	@ (80086c4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8008448:	4293      	cmp	r3, r2
 800844a:	f040 8137 	bne.w	80086bc <HAL_TIM_PeriodElapsedCallback+0x280>
		Modbus_Protocal_Worker();
 800844e:	f7f9 fe23 	bl	8002098 <Modbus_Protocal_Worker>
		modbus_working();
 8008452:	f000 f961 	bl	8008718 <modbus_working>

		plotter_update_sensors();
 8008456:	f000 fe3f 	bl	80090d8 <plotter_update_sensors>
		check_emergency_button();
 800845a:	f7fe fd71 	bl	8006f40 <check_emergency_button>

		QEI_get_diff_count(&prismatic_encoder);
 800845e:	489a      	ldr	r0, [pc, #616]	@ (80086c8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008460:	f7fb fd36 	bl	8003ed0 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8008464:	4898      	ldr	r0, [pc, #608]	@ (80086c8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008466:	f7fb fe1f 	bl	80040a8 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 800846a:	4898      	ldr	r0, [pc, #608]	@ (80086cc <HAL_TIM_PeriodElapsedCallback+0x290>)
 800846c:	f7fb fd30 	bl	8003ed0 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8008470:	4896      	ldr	r0, [pc, #600]	@ (80086cc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008472:	f7fb fe19 	bl	80040a8 <QEI_compute_data>

		revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 8008476:	4b96      	ldr	r3, [pc, #600]	@ (80086d0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8008478:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800847c:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8008480:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8008484:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 80086d4 <HAL_TIM_PeriodElapsedCallback+0x298>
 8008488:	eddf 0a93 	vldr	s1, [pc, #588]	@ 80086d8 <HAL_TIM_PeriodElapsedCallback+0x29c>
 800848c:	eeb0 0a67 	vmov.f32	s0, s15
 8008490:	f7f9 fceb 	bl	8001e6a <mapf>
 8008494:	eef0 7a40 	vmov.f32	s15, s0
 8008498:	4b8d      	ldr	r3, [pc, #564]	@ (80086d0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800849a:	edc3 7a08 	vstr	s15, [r3, #32]
				65535.0f, -12.0f, 12.0f);
		revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 800849e:	4b8c      	ldr	r3, [pc, #560]	@ (80086d0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80084a0:	edd3 7a08 	vldr	s15, [r3, #32]
 80084a4:	4b89      	ldr	r3, [pc, #548]	@ (80086cc <HAL_TIM_PeriodElapsedCallback+0x290>)
 80084a6:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80084aa:	eef0 0a47 	vmov.f32	s1, s14
 80084ae:	eeb0 0a67 	vmov.f32	s0, s15
 80084b2:	488a      	ldr	r0, [pc, #552]	@ (80086dc <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80084b4:	f7fc fe28 	bl	8005108 <SteadyStateKalmanFilter>
 80084b8:	eef0 7a40 	vmov.f32	s15, s0
 80084bc:	4b84      	ldr	r3, [pc, #528]	@ (80086d0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80084be:	edc3 7a07 	vstr	s15, [r3, #28]
				&revolute_kalman, revolute_axis.input_voltage,
				revolute_encoder.rads);

		if (isnan(revolute_axis.kalman_velocity)) {
 80084c2:	4b83      	ldr	r3, [pc, #524]	@ (80086d0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80084c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80084c8:	eef4 7a67 	vcmp.f32	s15, s15
 80084cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084d0:	d703      	bvc.n	80084da <HAL_TIM_PeriodElapsedCallback+0x9e>
			revolute_axis.kalman_velocity = 0.0f;
 80084d2:	4b7f      	ldr	r3, [pc, #508]	@ (80086d0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80084d4:	f04f 0200 	mov.w	r2, #0
 80084d8:	61da      	str	r2, [r3, #28]
		}

		prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 80084da:	4b81      	ldr	r3, [pc, #516]	@ (80086e0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80084dc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80084e0:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 80084e4:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 80084e8:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 80086d4 <HAL_TIM_PeriodElapsedCallback+0x298>
 80084ec:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 80086d8 <HAL_TIM_PeriodElapsedCallback+0x29c>
 80084f0:	eeb0 0a67 	vmov.f32	s0, s15
 80084f4:	f7f9 fcb9 	bl	8001e6a <mapf>
 80084f8:	eef0 7a40 	vmov.f32	s15, s0
 80084fc:	4b78      	ldr	r3, [pc, #480]	@ (80086e0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80084fe:	edc3 7a08 	vstr	s15, [r3, #32]
				-65535.0f, 65535.0f, -12.0f, 12.0f);
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008502:	4b77      	ldr	r3, [pc, #476]	@ (80086e0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008504:	edd3 7a08 	vldr	s15, [r3, #32]
 8008508:	4b6f      	ldr	r3, [pc, #444]	@ (80086c8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800850a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800850e:	eef0 0a47 	vmov.f32	s1, s14
 8008512:	eeb0 0a67 	vmov.f32	s0, s15
 8008516:	4873      	ldr	r0, [pc, #460]	@ (80086e4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8008518:	f7fa ff14 	bl	8003344 <MotorKalman_Estimate>
 800851c:	eeb0 7a40 	vmov.f32	s14, s0
				prismatic_axis.input_voltage, prismatic_encoder.rads)
				* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8008520:	4b71      	ldr	r3, [pc, #452]	@ (80086e8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8008522:	edd3 7a04 	vldr	s15, [r3, #16]
 8008526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800852a:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 80086ec <HAL_TIM_PeriodElapsedCallback+0x2b0>
 800852e:	ee67 7a87 	vmul.f32	s15, s15, s14
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008532:	4b6b      	ldr	r3, [pc, #428]	@ (80086e0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008534:	edc3 7a07 	vstr	s15, [r3, #28]

		if (isnan(prismatic_axis.kalman_velocity)) {
 8008538:	4b69      	ldr	r3, [pc, #420]	@ (80086e0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800853a:	edd3 7a07 	vldr	s15, [r3, #28]
 800853e:	eef4 7a67 	vcmp.f32	s15, s15
 8008542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008546:	d703      	bvc.n	8008550 <HAL_TIM_PeriodElapsedCallback+0x114>
			prismatic_axis.kalman_velocity = 0.0f;
 8008548:	4b65      	ldr	r3, [pc, #404]	@ (80086e0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800854a:	f04f 0200 	mov.w	r2, #0
 800854e:	61da      	str	r2, [r3, #28]
		}

		// Position control update - Allow during HOMING_REV_TO_ZERO_DEG
		if (++position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8008550:	4b67      	ldr	r3, [pc, #412]	@ (80086f0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	3301      	adds	r3, #1
 8008556:	4a66      	ldr	r2, [pc, #408]	@ (80086f0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	2b09      	cmp	r3, #9
 800855c:	d92a      	bls.n	80085b4 <HAL_TIM_PeriodElapsedCallback+0x178>
			position_control_tick = 0;
 800855e:	4b64      	ldr	r3, [pc, #400]	@ (80086f0 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]

			if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG) // ← FIXED
 8008564:	4b63      	ldr	r3, [pc, #396]	@ (80086f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	f083 0301 	eor.w	r3, r3, #1
 800856c:	b2db      	uxtb	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d103      	bne.n	800857a <HAL_TIM_PeriodElapsedCallback+0x13e>
 8008572:	4b61      	ldr	r3, [pc, #388]	@ (80086f8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	2b07      	cmp	r3, #7
 8008578:	d11c      	bne.n	80085b4 <HAL_TIM_PeriodElapsedCallback+0x178>
					&& (!joy_mode_active
 800857a:	4b60      	ldr	r3, [pc, #384]	@ (80086fc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	f083 0301 	eor.w	r3, r3, #1
 8008582:	b2db      	uxtb	r3, r3
 8008584:	2b00      	cmp	r3, #0
 8008586:	d107      	bne.n	8008598 <HAL_TIM_PeriodElapsedCallback+0x15c>
							|| (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 8008588:	4b5d      	ldr	r3, [pc, #372]	@ (8008700 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	2b02      	cmp	r3, #2
 800858e:	d011      	beq.n	80085b4 <HAL_TIM_PeriodElapsedCallback+0x178>
									&& joy_mode_state
											!= JOY_MODE_INITIAL_CONTROL))
 8008590:	4b5b      	ldr	r3, [pc, #364]	@ (8008700 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008592:	781b      	ldrb	r3, [r3, #0]
									&& joy_mode_state
 8008594:	2b01      	cmp	r3, #1
 8008596:	d00d      	beq.n	80085b4 <HAL_TIM_PeriodElapsedCallback+0x178>
					&& (!is_emergency_active() || tuning_mode)) {
 8008598:	f7fe fe92 	bl	80072c0 <is_emergency_active>
 800859c:	4603      	mov	r3, r0
 800859e:	f083 0301 	eor.w	r3, r3, #1
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d103      	bne.n	80085b0 <HAL_TIM_PeriodElapsedCallback+0x174>
 80085a8:	4b56      	ldr	r3, [pc, #344]	@ (8008704 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <HAL_TIM_PeriodElapsedCallback+0x178>
				update_position_control();
 80085b0:	f7fd fffe 	bl	80065b0 <update_position_control>
			}
		}

		// Velocity control update - Allow during HOMING_REV_TO_ZERO_DEG
		if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG) // ← FIXED
 80085b4:	4b4f      	ldr	r3, [pc, #316]	@ (80086f4 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	f083 0301 	eor.w	r3, r3, #1
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d103      	bne.n	80085ca <HAL_TIM_PeriodElapsedCallback+0x18e>
 80085c2:	4b4d      	ldr	r3, [pc, #308]	@ (80086f8 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b07      	cmp	r3, #7
 80085c8:	d11c      	bne.n	8008604 <HAL_TIM_PeriodElapsedCallback+0x1c8>
				&& (!joy_mode_active
 80085ca:	4b4c      	ldr	r3, [pc, #304]	@ (80086fc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	f083 0301 	eor.w	r3, r3, #1
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d107      	bne.n	80085e8 <HAL_TIM_PeriodElapsedCallback+0x1ac>
						|| (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 80085d8:	4b49      	ldr	r3, [pc, #292]	@ (8008700 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d011      	beq.n	8008604 <HAL_TIM_PeriodElapsedCallback+0x1c8>
								&& joy_mode_state != JOY_MODE_INITIAL_CONTROL))
 80085e0:	4b47      	ldr	r3, [pc, #284]	@ (8008700 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d00d      	beq.n	8008604 <HAL_TIM_PeriodElapsedCallback+0x1c8>
				&& (!is_emergency_active() || tuning_mode)) {
 80085e8:	f7fe fe6a 	bl	80072c0 <is_emergency_active>
 80085ec:	4603      	mov	r3, r0
 80085ee:	f083 0301 	eor.w	r3, r3, #1
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d103      	bne.n	8008600 <HAL_TIM_PeriodElapsedCallback+0x1c4>
 80085f8:	4b42      	ldr	r3, [pc, #264]	@ (8008704 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <HAL_TIM_PeriodElapsedCallback+0x1c8>
			update_velocity_control();
 8008600:	f7fe f896 	bl	8006730 <update_velocity_control>
		}

		update_safety_system();
 8008604:	f7fe fdda 	bl	80071bc <update_safety_system>

		if (!is_emergency_active() || tuning_mode) {
 8008608:	f7fe fe5a 	bl	80072c0 <is_emergency_active>
 800860c:	4603      	mov	r3, r0
 800860e:	f083 0301 	eor.w	r3, r3, #1
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b00      	cmp	r3, #0
 8008616:	d103      	bne.n	8008620 <HAL_TIM_PeriodElapsedCallback+0x1e4>
 8008618:	4b3a      	ldr	r3, [pc, #232]	@ (8008704 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <HAL_TIM_PeriodElapsedCallback+0x1e8>
			check_safety_conditions();
 8008620:	f7fe fcb0 	bl	8006f84 <check_safety_conditions>
		}

		// Control loops - joy mode handles its own control
		if (!joy_mode_active) {
 8008624:	4b35      	ldr	r3, [pc, #212]	@ (80086fc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	f083 0301 	eor.w	r3, r3, #1
 800862c:	b2db      	uxtb	r3, r3
 800862e:	2b00      	cmp	r3, #0
 8008630:	d002      	beq.n	8008638 <HAL_TIM_PeriodElapsedCallback+0x1fc>
			update_control_loops();
 8008632:	f7fe fa91 	bl	8006b58 <update_control_loops>
 8008636:	e001      	b.n	800863c <HAL_TIM_PeriodElapsedCallback+0x200>
		} else {
			update_joy_mode();
 8008638:	f7ff fbf4 	bl	8007e24 <update_joy_mode>
		}

		// ALWAYS update display values
		if (!joy_mode_active) {
 800863c:	4b2f      	ldr	r3, [pc, #188]	@ (80086fc <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800863e:	781b      	ldrb	r3, [r3, #0]
 8008640:	f083 0301 	eor.w	r3, r3, #1
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d01e      	beq.n	8008688 <HAL_TIM_PeriodElapsedCallback+0x24c>
			// Update display values for normal operation
			normalized_position = normalize_angle(revolute_encoder.rads);
 800864a:	4b20      	ldr	r3, [pc, #128]	@ (80086cc <HAL_TIM_PeriodElapsedCallback+0x290>)
 800864c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8008650:	eeb0 0a67 	vmov.f32	s0, s15
 8008654:	f7fd fd80 	bl	8006158 <normalize_angle>
 8008658:	eef0 7a40 	vmov.f32	s15, s0
 800865c:	4b2a      	ldr	r3, [pc, #168]	@ (8008708 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800865e:	edc3 7a00 	vstr	s15, [r3]
			prismatic_axis.mm = prismatic_encoder.mm;
 8008662:	4b19      	ldr	r3, [pc, #100]	@ (80086c8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008666:	4a1e      	ldr	r2, [pc, #120]	@ (80086e0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008668:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 800866a:	4b27      	ldr	r3, [pc, #156]	@ (8008708 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800866c:	edd3 7a00 	vldr	s15, [r3]
 8008670:	220e      	movs	r2, #14
 8008672:	210f      	movs	r1, #15
 8008674:	eeb0 0a67 	vmov.f32	s0, s15
 8008678:	4824      	ldr	r0, [pc, #144]	@ (800870c <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800867a:	f7fc fac9 	bl	8004c10 <UnitConverter_angle>
 800867e:	eef0 7a40 	vmov.f32	s15, s0
 8008682:	4b13      	ldr	r3, [pc, #76]	@ (80086d0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8008684:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		}
		// Note: joy mode updates its own display values in update_joy_mode()

		prismatic_axis.accel_show = FIR_process(&prismatic_lp_accel,
 8008688:	4b0f      	ldr	r3, [pc, #60]	@ (80086c8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800868a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800868e:	eeb0 0a67 	vmov.f32	s0, s15
 8008692:	481f      	ldr	r0, [pc, #124]	@ (8008710 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8008694:	f7f9 fb90 	bl	8001db8 <FIR_process>
 8008698:	eef0 7a40 	vmov.f32	s15, s0
 800869c:	4b10      	ldr	r3, [pc, #64]	@ (80086e0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800869e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				prismatic_encoder.mmpss);
		revolute_axis.accel_show = FIR_process(&revolute_lp_accel,
 80086a2:	4b0a      	ldr	r3, [pc, #40]	@ (80086cc <HAL_TIM_PeriodElapsedCallback+0x290>)
 80086a4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80086a8:	eeb0 0a67 	vmov.f32	s0, s15
 80086ac:	4819      	ldr	r0, [pc, #100]	@ (8008714 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80086ae:	f7f9 fb83 	bl	8001db8 <FIR_process>
 80086b2:	eef0 7a40 	vmov.f32	s15, s0
 80086b6:	4b06      	ldr	r3, [pc, #24]	@ (80086d0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 80086b8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				revolute_encoder.radpss);
	}
}
 80086bc:	bf00      	nop
 80086be:	3708      	adds	r7, #8
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	20001c60 	.word	0x20001c60
 80086c8:	200006a0 	.word	0x200006a0
 80086cc:	200006fc 	.word	0x200006fc
 80086d0:	200004c4 	.word	0x200004c4
 80086d4:	477fff00 	.word	0x477fff00
 80086d8:	c77fff00 	.word	0xc77fff00
 80086dc:	200017a0 	.word	0x200017a0
 80086e0:	20000480 	.word	0x20000480
 80086e4:	20001434 	.word	0x20001434
 80086e8:	20000100 	.word	0x20000100
 80086ec:	447a0000 	.word	0x447a0000
 80086f0:	20000578 	.word	0x20000578
 80086f4:	2000056b 	.word	0x2000056b
 80086f8:	2000056a 	.word	0x2000056a
 80086fc:	20000585 	.word	0x20000585
 8008700:	20000584 	.word	0x20000584
 8008704:	20000334 	.word	0x20000334
 8008708:	2000057c 	.word	0x2000057c
 800870c:	20000a94 	.word	0x20000a94
 8008710:	20000cec 	.word	0x20000cec
 8008714:	20000cf8 	.word	0x20000cf8

08008718 <modbus_working>:

//modbus
void modbus_working(void) {
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0

	uint16_t limit_switch_status = 0;
 800871e:	2300      	movs	r3, #0
 8008720:	82fb      	strh	r3, [r7, #22]
//heartbeat
	registerFrame[Heartbeat_Protocol].U16 = 22881;
 8008722:	4b70      	ldr	r3, [pc, #448]	@ (80088e4 <modbus_working+0x1cc>)
 8008724:	f645 1261 	movw	r2, #22881	@ 0x5961
 8008728:	801a      	strh	r2, [r3, #0]
//servo write
	if (registerFrame[Servo_UP].U16 == 1) {
 800872a:	4b6e      	ldr	r3, [pc, #440]	@ (80088e4 <modbus_working+0x1cc>)
 800872c:	891b      	ldrh	r3, [r3, #8]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d102      	bne.n	8008738 <modbus_working+0x20>
		plotter_pen_up();
 8008732:	f000 fd63 	bl	80091fc <plotter_pen_up>
 8008736:	e005      	b.n	8008744 <modbus_working+0x2c>
	} else if (registerFrame[Servo_Down].U16 == 1) {
 8008738:	4b6a      	ldr	r3, [pc, #424]	@ (80088e4 <modbus_working+0x1cc>)
 800873a:	895b      	ldrh	r3, [r3, #10]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d101      	bne.n	8008744 <modbus_working+0x2c>
		plotter_pen_down();
 8008740:	f000 fd6c 	bl	800921c <plotter_pen_down>
	}

//limitSW
	if (up_lim == 1) {
 8008744:	4b68      	ldr	r3, [pc, #416]	@ (80088e8 <modbus_working+0x1d0>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d103      	bne.n	8008754 <modbus_working+0x3c>
		limit_switch_status |= 0x02;  // Bit 1 = Limit UP
 800874c:	8afb      	ldrh	r3, [r7, #22]
 800874e:	f043 0302 	orr.w	r3, r3, #2
 8008752:	82fb      	strh	r3, [r7, #22]
	}
	if (low_lim == 1) {
 8008754:	4b65      	ldr	r3, [pc, #404]	@ (80088ec <modbus_working+0x1d4>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b01      	cmp	r3, #1
 800875a:	d103      	bne.n	8008764 <modbus_working+0x4c>
		limit_switch_status |= 0x01;  // Bit 0 = Limit DOWN
 800875c:	8afb      	ldrh	r3, [r7, #22]
 800875e:	f043 0301 	orr.w	r3, r3, #1
 8008762:	82fb      	strh	r3, [r7, #22]
	}
	registerFrame[LimitSwitch_Status].U16 = limit_switch_status;
 8008764:	4a5f      	ldr	r2, [pc, #380]	@ (80088e4 <modbus_working+0x1cc>)
 8008766:	8afb      	ldrh	r3, [r7, #22]
 8008768:	80d3      	strh	r3, [r2, #6]

	if (registerFrame[BaseSystem_Status].U16 == 1) {
 800876a:	4b5e      	ldr	r3, [pc, #376]	@ (80088e4 <modbus_working+0x1cc>)
 800876c:	885b      	ldrh	r3, [r3, #2]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d105      	bne.n	800877e <modbus_working+0x66>
		exit_joy_mode();
 8008772:	f7fe fe27 	bl	80073c4 <exit_joy_mode>
		start_homing_sequence(true);
 8008776:	2001      	movs	r0, #1
 8008778:	f7fd f8c2 	bl	8005900 <start_homing_sequence>
 800877c:	e03b      	b.n	80087f6 <modbus_working+0xde>
	} else if (registerFrame[BaseSystem_Status].U16 == 2) {
 800877e:	4b59      	ldr	r3, [pc, #356]	@ (80088e4 <modbus_working+0x1cc>)
 8008780:	885b      	ldrh	r3, [r3, #2]
 8008782:	2b02      	cmp	r3, #2
 8008784:	d105      	bne.n	8008792 <modbus_working+0x7a>
		registerFrame[R_Theta_Status].U16 = 2;
 8008786:	4b57      	ldr	r3, [pc, #348]	@ (80088e4 <modbus_working+0x1cc>)
 8008788:	2202      	movs	r2, #2
 800878a:	841a      	strh	r2, [r3, #32]
		enter_joy_mode();
 800878c:	f7fe fda8 	bl	80072e0 <enter_joy_mode>
 8008790:	e031      	b.n	80087f6 <modbus_working+0xde>
	} else if (registerFrame[BaseSystem_Status].U16 == 4) {
 8008792:	4b54      	ldr	r3, [pc, #336]	@ (80088e4 <modbus_working+0x1cc>)
 8008794:	885b      	ldrh	r3, [r3, #2]
 8008796:	2b04      	cmp	r3, #4
 8008798:	d102      	bne.n	80087a0 <modbus_working+0x88>
		exit_joy_mode();
 800879a:	f7fe fe13 	bl	80073c4 <exit_joy_mode>
 800879e:	e02a      	b.n	80087f6 <modbus_working+0xde>
	} else if (registerFrame[BaseSystem_Status].U16 == 8) {
 80087a0:	4b50      	ldr	r3, [pc, #320]	@ (80088e4 <modbus_working+0x1cc>)
 80087a2:	885b      	ldrh	r3, [r3, #2]
 80087a4:	2b08      	cmp	r3, #8
 80087a6:	d126      	bne.n	80087f6 <modbus_working+0xde>
		registerFrame[R_Theta_Status].U16 = 8;
 80087a8:	4b4e      	ldr	r3, [pc, #312]	@ (80088e4 <modbus_working+0x1cc>)
 80087aa:	2208      	movs	r2, #8
 80087ac:	841a      	strh	r2, [r3, #32]
		exit_joy_mode();
 80087ae:	f7fe fe09 	bl	80073c4 <exit_joy_mode>
		float goal_r_mm = (float) (int16_t) registerFrame[Goal_R].U16 / 10.0;
 80087b2:	4b4c      	ldr	r3, [pc, #304]	@ (80088e4 <modbus_working+0x1cc>)
 80087b4:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80087b8:	b21b      	sxth	r3, r3
 80087ba:	ee07 3a90 	vmov	s15, r3
 80087be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80087c2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80087c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80087ca:	edc7 7a04 	vstr	s15, [r7, #16]
		float goal_theta_deg = (float) (int16_t) registerFrame[Goal_Theta].U16
 80087ce:	4b45      	ldr	r3, [pc, #276]	@ (80088e4 <modbus_working+0x1cc>)
 80087d0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 80087d4:	b21b      	sxth	r3, r3
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80087de:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80087e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80087e6:	edc7 7a03 	vstr	s15, [r7, #12]
				/ 10.0;

		start_combined_trajectory(goal_r_mm, goal_theta_deg);
 80087ea:	edd7 0a03 	vldr	s1, [r7, #12]
 80087ee:	ed97 0a04 	vldr	s0, [r7, #16]
 80087f2:	f7fd fd9b 	bl	800632c <start_combined_trajectory>
	}

	registerFrame[R_Axis_Actual_Position].U16 = prismatic_encoder.mm * 10.0f;
 80087f6:	4b3e      	ldr	r3, [pc, #248]	@ (80088f0 <modbus_working+0x1d8>)
 80087f8:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80087fc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008804:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008808:	ee17 3a90 	vmov	r3, s15
 800880c:	b29a      	uxth	r2, r3
 800880e:	4b35      	ldr	r3, [pc, #212]	@ (80088e4 <modbus_working+0x1cc>)
 8008810:	845a      	strh	r2, [r3, #34]	@ 0x22
	registerFrame[R_Axis_Actual_Speed].U16 = prismatic_axis.kalman_velocity
 8008812:	4b38      	ldr	r3, [pc, #224]	@ (80088f4 <modbus_working+0x1dc>)
 8008814:	edd3 7a07 	vldr	s15, [r3, #28]
			* 10.0f;
 8008818:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800881c:	ee67 7a87 	vmul.f32	s15, s15, s14
	registerFrame[R_Axis_Actual_Speed].U16 = prismatic_axis.kalman_velocity
 8008820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008824:	ee17 3a90 	vmov	r3, s15
 8008828:	b29a      	uxth	r2, r3
 800882a:	4b2e      	ldr	r3, [pc, #184]	@ (80088e4 <modbus_working+0x1cc>)
 800882c:	84da      	strh	r2, [r3, #38]	@ 0x26

	float pris_accel = FIR_process(&prismatic_lp_accel,
 800882e:	4b30      	ldr	r3, [pc, #192]	@ (80088f0 <modbus_working+0x1d8>)
 8008830:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008834:	eeb0 0a67 	vmov.f32	s0, s15
 8008838:	482f      	ldr	r0, [pc, #188]	@ (80088f8 <modbus_working+0x1e0>)
 800883a:	f7f9 fabd 	bl	8001db8 <FIR_process>
 800883e:	ed87 0a02 	vstr	s0, [r7, #8]
			prismatic_encoder.mmpss);
	registerFrame[R_Axis_Acceleration].U16 = pris_accel * 10.0f;
 8008842:	edd7 7a02 	vldr	s15, [r7, #8]
 8008846:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800884a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800884e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008852:	ee17 3a90 	vmov	r3, s15
 8008856:	b29a      	uxth	r2, r3
 8008858:	4b22      	ldr	r3, [pc, #136]	@ (80088e4 <modbus_working+0x1cc>)
 800885a:	855a      	strh	r2, [r3, #42]	@ 0x2a

	registerFrame[Theta_Axis_Actual_Position].U16 = revolute_axis.deg * 10.0f;
 800885c:	4b27      	ldr	r3, [pc, #156]	@ (80088fc <modbus_working+0x1e4>)
 800885e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8008862:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008866:	ee67 7a87 	vmul.f32	s15, s15, s14
 800886a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800886e:	ee17 3a90 	vmov	r3, s15
 8008872:	b29a      	uxth	r2, r3
 8008874:	4b1b      	ldr	r3, [pc, #108]	@ (80088e4 <modbus_working+0x1cc>)
 8008876:	849a      	strh	r2, [r3, #36]	@ 0x24

	float rev_theta_vel = UnitConverter_angle(&converter_system,
 8008878:	4b20      	ldr	r3, [pc, #128]	@ (80088fc <modbus_working+0x1e4>)
 800887a:	edd3 7a07 	vldr	s15, [r3, #28]
 800887e:	220e      	movs	r2, #14
 8008880:	210f      	movs	r1, #15
 8008882:	eeb0 0a67 	vmov.f32	s0, s15
 8008886:	481e      	ldr	r0, [pc, #120]	@ (8008900 <modbus_working+0x1e8>)
 8008888:	f7fc f9c2 	bl	8004c10 <UnitConverter_angle>
 800888c:	ed87 0a01 	vstr	s0, [r7, #4]
			revolute_axis.kalman_velocity, UNIT_RADIAN, UNIT_DEGREE);
	registerFrame[Theta_Axis_Actual_Speed].U16 = rev_theta_vel * 10.0f;
 8008890:	edd7 7a01 	vldr	s15, [r7, #4]
 8008894:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800889c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088a0:	ee17 3a90 	vmov	r3, s15
 80088a4:	b29a      	uxth	r2, r3
 80088a6:	4b0f      	ldr	r3, [pc, #60]	@ (80088e4 <modbus_working+0x1cc>)
 80088a8:	851a      	strh	r2, [r3, #40]	@ 0x28

	float rev_theta_accel = UnitConverter_angle(&converter_system,
 80088aa:	4b16      	ldr	r3, [pc, #88]	@ (8008904 <modbus_working+0x1ec>)
 80088ac:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80088b0:	220e      	movs	r2, #14
 80088b2:	210f      	movs	r1, #15
 80088b4:	eeb0 0a67 	vmov.f32	s0, s15
 80088b8:	4811      	ldr	r0, [pc, #68]	@ (8008900 <modbus_working+0x1e8>)
 80088ba:	f7fc f9a9 	bl	8004c10 <UnitConverter_angle>
 80088be:	ed87 0a00 	vstr	s0, [r7]
			revolute_encoder.radpss, UNIT_RADIAN, UNIT_DEGREE);
	registerFrame[Theta_Axis_Acceleration].U16 = rev_theta_accel * 10.0f;
 80088c2:	edd7 7a00 	vldr	s15, [r7]
 80088c6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80088ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088d2:	ee17 3a90 	vmov	r3, s15
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	4b02      	ldr	r3, [pc, #8]	@ (80088e4 <modbus_working+0x1cc>)
 80088da:	859a      	strh	r2, [r3, #44]	@ 0x2c

}
 80088dc:	bf00      	nop
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	200012a4 	.word	0x200012a4
 80088e8:	20001b78 	.word	0x20001b78
 80088ec:	20001b7c 	.word	0x20001b7c
 80088f0:	200006a0 	.word	0x200006a0
 80088f4:	20000480 	.word	0x20000480
 80088f8:	20000cec 	.word	0x20000cec
 80088fc:	200004c4 	.word	0x200004c4
 8008900:	20000a94 	.word	0x20000a94
 8008904:	200006fc 	.word	0x200006fc

08008908 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8008908:	b480      	push	{r7}
 800890a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800890c:	b672      	cpsid	i
}
 800890e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8008910:	bf00      	nop
 8008912:	e7fd      	b.n	8008910 <Error_Handler+0x8>
 8008914:	0000      	movs	r0, r0
	...

08008918 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8008918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800891c:	ed2d 8b02 	vpush	{d8}
 8008920:	b083      	sub	sp, #12
 8008922:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8008924:	4bc6      	ldr	r3, [pc, #792]	@ (8008c40 <plotter_begin+0x328>)
 8008926:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 800892a:	4bc6      	ldr	r3, [pc, #792]	@ (8008c44 <plotter_begin+0x32c>)
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	4618      	mov	r0, r3
 8008930:	f7f7 fdd6 	bl	80004e0 <__aeabi_f2d>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4620      	mov	r0, r4
 800893a:	4629      	mov	r1, r5
 800893c:	f7f7 fe28 	bl	8000590 <__aeabi_dmul>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4610      	mov	r0, r2
 8008946:	4619      	mov	r1, r3
 8008948:	f04f 0200 	mov.w	r2, #0
 800894c:	4bbe      	ldr	r3, [pc, #760]	@ (8008c48 <plotter_begin+0x330>)
 800894e:	f7f7 fe1f 	bl	8000590 <__aeabi_dmul>
 8008952:	4602      	mov	r2, r0
 8008954:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8008956:	49ba      	ldr	r1, [pc, #744]	@ (8008c40 <plotter_begin+0x328>)
 8008958:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 800895c:	4bb8      	ldr	r3, [pc, #736]	@ (8008c40 <plotter_begin+0x328>)
 800895e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8008962:	4602      	mov	r2, r0
 8008964:	460b      	mov	r3, r1
 8008966:	f7f7 fc5d 	bl	8000224 <__adddf3>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	49b4      	ldr	r1, [pc, #720]	@ (8008c40 <plotter_begin+0x328>)
 8008970:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500.0;
 8008974:	49b2      	ldr	r1, [pc, #712]	@ (8008c40 <plotter_begin+0x328>)
 8008976:	f04f 0200 	mov.w	r2, #0
 800897a:	4bb4      	ldr	r3, [pc, #720]	@ (8008c4c <plotter_begin+0x334>)
 800897c:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = 1000.0;
 8008980:	49af      	ldr	r1, [pc, #700]	@ (8008c40 <plotter_begin+0x328>)
 8008982:	f04f 0200 	mov.w	r2, #0
 8008986:	4bb0      	ldr	r3, [pc, #704]	@ (8008c48 <plotter_begin+0x330>)
 8008988:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 800898c:	4bb0      	ldr	r3, [pc, #704]	@ (8008c50 <plotter_begin+0x338>)
 800898e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 8008992:	a3a9      	add	r3, pc, #676	@ (adr r3, 8008c38 <plotter_begin+0x320>)
 8008994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008998:	f7f7 fdfa 	bl	8000590 <__aeabi_dmul>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 80089a0:	49ab      	ldr	r1, [pc, #684]	@ (8008c50 <plotter_begin+0x338>)
 80089a2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	ZGX45RGG_150RPM_Constant.traject_qd_max = 5.0;
 80089a6:	49aa      	ldr	r1, [pc, #680]	@ (8008c50 <plotter_begin+0x338>)
 80089a8:	f04f 0200 	mov.w	r2, #0
 80089ac:	4ba9      	ldr	r3, [pc, #676]	@ (8008c54 <plotter_begin+0x33c>)
 80089ae:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = 2.0;
 80089b2:	49a7      	ldr	r1, [pc, #668]	@ (8008c50 <plotter_begin+0x338>)
 80089b4:	f04f 0200 	mov.w	r2, #0
 80089b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80089bc:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 80089c0:	2100      	movs	r1, #0
 80089c2:	48a5      	ldr	r0, [pc, #660]	@ (8008c58 <plotter_begin+0x340>)
 80089c4:	f000 fc3a 	bl	800923c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 80089c8:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 8008c5c <plotter_begin+0x344>
 80089cc:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 8008c60 <plotter_begin+0x348>
 80089d0:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 8008c98 <plotter_begin+0x380>
 80089d4:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 8008c98 <plotter_begin+0x380>
 80089d8:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 8008c64 <plotter_begin+0x34c>
 80089dc:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8008c5c <plotter_begin+0x344>
 80089e0:	489d      	ldr	r0, [pc, #628]	@ (8008c58 <plotter_begin+0x340>)
 80089e2:	f000 fc89 	bl	80092f8 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 80089e6:	2102      	movs	r1, #2
 80089e8:	489f      	ldr	r0, [pc, #636]	@ (8008c68 <plotter_begin+0x350>)
 80089ea:	f000 fc27 	bl	800923c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 80089ee:	ed9f 3a9b 	vldr	s6, [pc, #620]	@ 8008c5c <plotter_begin+0x344>
 80089f2:	eddf 2a9b 	vldr	s5, [pc, #620]	@ 8008c60 <plotter_begin+0x348>
 80089f6:	ed9f 2aa8 	vldr	s4, [pc, #672]	@ 8008c98 <plotter_begin+0x380>
 80089fa:	eddf 1aa7 	vldr	s3, [pc, #668]	@ 8008c98 <plotter_begin+0x380>
 80089fe:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008a02:	eddf 0a98 	vldr	s1, [pc, #608]	@ 8008c64 <plotter_begin+0x34c>
 8008a06:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8008c5c <plotter_begin+0x344>
 8008a0a:	4897      	ldr	r0, [pc, #604]	@ (8008c68 <plotter_begin+0x350>)
 8008a0c:	f000 fc9f 	bl	800934e <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8008a10:	2100      	movs	r1, #0
 8008a12:	4896      	ldr	r0, [pc, #600]	@ (8008c6c <plotter_begin+0x354>)
 8008a14:	f000 fc12 	bl	800923c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8008a18:	eddf 2a95 	vldr	s5, [pc, #596]	@ 8008c70 <plotter_begin+0x358>
 8008a1c:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 8008c74 <plotter_begin+0x35c>
 8008a20:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 8008c98 <plotter_begin+0x380>
 8008a24:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 8008c98 <plotter_begin+0x380>
 8008a28:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 8008c64 <plotter_begin+0x34c>
 8008a2c:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8008c70 <plotter_begin+0x358>
 8008a30:	488e      	ldr	r0, [pc, #568]	@ (8008c6c <plotter_begin+0x354>)
 8008a32:	f000 fc61 	bl	80092f8 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8008a36:	2102      	movs	r1, #2
 8008a38:	488f      	ldr	r0, [pc, #572]	@ (8008c78 <plotter_begin+0x360>)
 8008a3a:	f000 fbff 	bl	800923c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8008a3e:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8008a42:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8008a46:	ed9f 2a94 	vldr	s4, [pc, #592]	@ 8008c98 <plotter_begin+0x380>
 8008a4a:	eddf 1a93 	vldr	s3, [pc, #588]	@ 8008c98 <plotter_begin+0x380>
 8008a4e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008a52:	eddf 0a84 	vldr	s1, [pc, #528]	@ 8008c64 <plotter_begin+0x34c>
 8008a56:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8008a5a:	4887      	ldr	r0, [pc, #540]	@ (8008c78 <plotter_begin+0x360>)
 8008a5c:	f000 fc77 	bl	800934e <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8008a60:	2100      	movs	r1, #0
 8008a62:	4886      	ldr	r0, [pc, #536]	@ (8008c7c <plotter_begin+0x364>)
 8008a64:	f000 fbea 	bl	800923c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008a68:	4b75      	ldr	r3, [pc, #468]	@ (8008c40 <plotter_begin+0x328>)
 8008a6a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008a6e:	4610      	mov	r0, r2
 8008a70:	4619      	mov	r1, r3
 8008a72:	f7f8 f86f 	bl	8000b54 <__aeabi_d2f>
 8008a76:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8008a78:	4b71      	ldr	r3, [pc, #452]	@ (8008c40 <plotter_begin+0x328>)
 8008a7a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008a7e:	4610      	mov	r0, r2
 8008a80:	4619      	mov	r1, r3
 8008a82:	f7f8 f867 	bl	8000b54 <__aeabi_d2f>
 8008a86:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008a88:	ee07 3a90 	vmov	s15, r3
 8008a8c:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8008a90:	4b6b      	ldr	r3, [pc, #428]	@ (8008c40 <plotter_begin+0x328>)
 8008a92:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008a96:	4610      	mov	r0, r2
 8008a98:	4619      	mov	r1, r3
 8008a9a:	f7f8 f85b 	bl	8000b54 <__aeabi_d2f>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	ee02 3a90 	vmov	s5, r3
 8008aa4:	eeb0 2a48 	vmov.f32	s4, s16
 8008aa8:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 8008c98 <plotter_begin+0x380>
 8008aac:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 8008c98 <plotter_begin+0x380>
 8008ab0:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 8008c64 <plotter_begin+0x34c>
 8008ab4:	ee00 4a10 	vmov	s0, r4
 8008ab8:	4870      	ldr	r0, [pc, #448]	@ (8008c7c <plotter_begin+0x364>)
 8008aba:	f000 fc1d 	bl	80092f8 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8008abe:	2102      	movs	r1, #2
 8008ac0:	486f      	ldr	r0, [pc, #444]	@ (8008c80 <plotter_begin+0x368>)
 8008ac2:	f000 fbbb 	bl	800923c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008ac6:	4b5e      	ldr	r3, [pc, #376]	@ (8008c40 <plotter_begin+0x328>)
 8008ac8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008acc:	4610      	mov	r0, r2
 8008ace:	4619      	mov	r1, r3
 8008ad0:	f7f8 f840 	bl	8000b54 <__aeabi_d2f>
 8008ad4:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8008ad6:	4b5a      	ldr	r3, [pc, #360]	@ (8008c40 <plotter_begin+0x328>)
 8008ad8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008adc:	4610      	mov	r0, r2
 8008ade:	4619      	mov	r1, r3
 8008ae0:	f7f8 f838 	bl	8000b54 <__aeabi_d2f>
 8008ae4:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008ae6:	ee07 3a90 	vmov	s15, r3
 8008aea:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8008aee:	4b54      	ldr	r3, [pc, #336]	@ (8008c40 <plotter_begin+0x328>)
 8008af0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008af4:	4610      	mov	r0, r2
 8008af6:	4619      	mov	r1, r3
 8008af8:	f7f8 f82c 	bl	8000b54 <__aeabi_d2f>
 8008afc:	4603      	mov	r3, r0
 8008afe:	ee03 3a10 	vmov	s6, r3
 8008b02:	eef0 2a48 	vmov.f32	s5, s16
 8008b06:	ed9f 2a64 	vldr	s4, [pc, #400]	@ 8008c98 <plotter_begin+0x380>
 8008b0a:	eddf 1a63 	vldr	s3, [pc, #396]	@ 8008c98 <plotter_begin+0x380>
 8008b0e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008b12:	eddf 0a54 	vldr	s1, [pc, #336]	@ 8008c64 <plotter_begin+0x34c>
 8008b16:	ee00 4a10 	vmov	s0, r4
 8008b1a:	4859      	ldr	r0, [pc, #356]	@ (8008c80 <plotter_begin+0x368>)
 8008b1c:	f000 fc17 	bl	800934e <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8008b20:	2100      	movs	r1, #0
 8008b22:	4858      	ldr	r0, [pc, #352]	@ (8008c84 <plotter_begin+0x36c>)
 8008b24:	f000 fb8a 	bl	800923c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008b28:	4b49      	ldr	r3, [pc, #292]	@ (8008c50 <plotter_begin+0x338>)
 8008b2a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008b2e:	4610      	mov	r0, r2
 8008b30:	4619      	mov	r1, r3
 8008b32:	f7f8 f80f 	bl	8000b54 <__aeabi_d2f>
 8008b36:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8008b38:	4b45      	ldr	r3, [pc, #276]	@ (8008c50 <plotter_begin+0x338>)
 8008b3a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008b3e:	4610      	mov	r0, r2
 8008b40:	4619      	mov	r1, r3
 8008b42:	f7f8 f807 	bl	8000b54 <__aeabi_d2f>
 8008b46:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008b48:	ee07 3a90 	vmov	s15, r3
 8008b4c:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 8008b50:	4b3f      	ldr	r3, [pc, #252]	@ (8008c50 <plotter_begin+0x338>)
 8008b52:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008b56:	4610      	mov	r0, r2
 8008b58:	4619      	mov	r1, r3
 8008b5a:	f7f7 fffb 	bl	8000b54 <__aeabi_d2f>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	ee02 3a90 	vmov	s5, r3
 8008b64:	eeb0 2a48 	vmov.f32	s4, s16
 8008b68:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 8008c98 <plotter_begin+0x380>
 8008b6c:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 8008c98 <plotter_begin+0x380>
 8008b70:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8008c64 <plotter_begin+0x34c>
 8008b74:	ee00 4a10 	vmov	s0, r4
 8008b78:	4842      	ldr	r0, [pc, #264]	@ (8008c84 <plotter_begin+0x36c>)
 8008b7a:	f000 fbbd 	bl	80092f8 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 8008b7e:	2102      	movs	r1, #2
 8008b80:	4841      	ldr	r0, [pc, #260]	@ (8008c88 <plotter_begin+0x370>)
 8008b82:	f000 fb5b 	bl	800923c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008b86:	4b32      	ldr	r3, [pc, #200]	@ (8008c50 <plotter_begin+0x338>)
 8008b88:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	4619      	mov	r1, r3
 8008b90:	f7f7 ffe0 	bl	8000b54 <__aeabi_d2f>
 8008b94:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8008b96:	4b2e      	ldr	r3, [pc, #184]	@ (8008c50 <plotter_begin+0x338>)
 8008b98:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	f7f7 ffd8 	bl	8000b54 <__aeabi_d2f>
 8008ba4:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008ba6:	ee07 3a90 	vmov	s15, r3
 8008baa:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8008bae:	4b28      	ldr	r3, [pc, #160]	@ (8008c50 <plotter_begin+0x338>)
 8008bb0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	f7f7 ffcc 	bl	8000b54 <__aeabi_d2f>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	ee03 3a10 	vmov	s6, r3
 8008bc2:	eef0 2a48 	vmov.f32	s5, s16
 8008bc6:	ed9f 2a34 	vldr	s4, [pc, #208]	@ 8008c98 <plotter_begin+0x380>
 8008bca:	eddf 1a33 	vldr	s3, [pc, #204]	@ 8008c98 <plotter_begin+0x380>
 8008bce:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008bd2:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8008c64 <plotter_begin+0x34c>
 8008bd6:	ee00 4a10 	vmov	s0, r4
 8008bda:	482b      	ldr	r0, [pc, #172]	@ (8008c88 <plotter_begin+0x370>)
 8008bdc:	f000 fbb7 	bl	800934e <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 8008be0:	482a      	ldr	r0, [pc, #168]	@ (8008c8c <plotter_begin+0x374>)
 8008be2:	f7fb ff7f 	bl	8004ae4 <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 8008be6:	4b17      	ldr	r3, [pc, #92]	@ (8008c44 <plotter_begin+0x32c>)
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7f7 fc78 	bl	80004e0 <__aeabi_f2d>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	460b      	mov	r3, r1
 8008bf4:	f7f7 fb16 	bl	8000224 <__adddf3>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	4619      	mov	r1, r3
 8008c00:	f04f 0200 	mov.w	r2, #0
 8008c04:	4b10      	ldr	r3, [pc, #64]	@ (8008c48 <plotter_begin+0x330>)
 8008c06:	f7f7 fcc3 	bl	8000590 <__aeabi_dmul>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8008c0e:	4610      	mov	r0, r2
 8008c10:	4619      	mov	r1, r3
 8008c12:	f7f7 ff9f 	bl	8000b54 <__aeabi_d2f>
 8008c16:	4603      	mov	r3, r0
 8008c18:	ee00 3a90 	vmov	s1, r3
 8008c1c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008c20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008c24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008c28:	4919      	ldr	r1, [pc, #100]	@ (8008c90 <plotter_begin+0x378>)
 8008c2a:	481a      	ldr	r0, [pc, #104]	@ (8008c94 <plotter_begin+0x37c>)
 8008c2c:	f7fb f8de 	bl	8003dec <QEI_init>
 8008c30:	e034      	b.n	8008c9c <plotter_begin+0x384>
 8008c32:	bf00      	nop
 8008c34:	f3af 8000 	nop.w
 8008c38:	55555555 	.word	0x55555555
 8008c3c:	3fe55555 	.word	0x3fe55555
 8008c40:	20000080 	.word	0x20000080
 8008c44:	20000100 	.word	0x20000100
 8008c48:	408f4000 	.word	0x408f4000
 8008c4c:	407f4000 	.word	0x407f4000
 8008c50:	20000000 	.word	0x20000000
 8008c54:	40140000 	.word	0x40140000
 8008c58:	20000874 	.word	0x20000874
 8008c5c:	477fff00 	.word	0x477fff00
 8008c60:	c77fff00 	.word	0xc77fff00
 8008c64:	3dcccccd 	.word	0x3dcccccd
 8008c68:	200008b8 	.word	0x200008b8
 8008c6c:	200008fc 	.word	0x200008fc
 8008c70:	43480000 	.word	0x43480000
 8008c74:	c3480000 	.word	0xc3480000
 8008c78:	20000940 	.word	0x20000940
 8008c7c:	20000984 	.word	0x20000984
 8008c80:	200009c8 	.word	0x200009c8
 8008c84:	20000a0c 	.word	0x20000a0c
 8008c88:	20000a50 	.word	0x20000a50
 8008c8c:	20000a94 	.word	0x20000a94
 8008c90:	20001ec4 	.word	0x20001ec4
 8008c94:	200006a0 	.word	0x200006a0
 8008c98:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8008c9c:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 8008c98 <plotter_begin+0x380>
 8008ca0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008ca4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008ca8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008cac:	49b8      	ldr	r1, [pc, #736]	@ (8008f90 <plotter_begin+0x678>)
 8008cae:	48b9      	ldr	r0, [pc, #740]	@ (8008f94 <plotter_begin+0x67c>)
 8008cb0:	f7fb f89c 	bl	8003dec <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8008cb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008cbe:	2204      	movs	r2, #4
 8008cc0:	49b5      	ldr	r1, [pc, #724]	@ (8008f98 <plotter_begin+0x680>)
 8008cc2:	48b6      	ldr	r0, [pc, #728]	@ (8008f9c <plotter_begin+0x684>)
 8008cc4:	f7f8 fb5c 	bl	8001380 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8008cc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ccc:	9300      	str	r3, [sp, #0]
 8008cce:	4bb4      	ldr	r3, [pc, #720]	@ (8008fa0 <plotter_begin+0x688>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	49b1      	ldr	r1, [pc, #708]	@ (8008f98 <plotter_begin+0x680>)
 8008cd4:	48b3      	ldr	r0, [pc, #716]	@ (8008fa4 <plotter_begin+0x68c>)
 8008cd6:	f7f8 fb53 	bl	8001380 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8008cda:	220c      	movs	r2, #12
 8008cdc:	49b2      	ldr	r1, [pc, #712]	@ (8008fa8 <plotter_begin+0x690>)
 8008cde:	48b3      	ldr	r0, [pc, #716]	@ (8008fac <plotter_begin+0x694>)
 8008ce0:	f7fa fe56 	bl	8003990 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8008ce4:	eddf 0ab2 	vldr	s1, [pc, #712]	@ 8008fb0 <plotter_begin+0x698>
 8008ce8:	ed9f 0ab2 	vldr	s0, [pc, #712]	@ 8008fb4 <plotter_begin+0x69c>
 8008cec:	48ab      	ldr	r0, [pc, #684]	@ (8008f9c <plotter_begin+0x684>)
 8008cee:	f7f8 fb6b 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8008cf2:	eddf 0aaf 	vldr	s1, [pc, #700]	@ 8008fb0 <plotter_begin+0x698>
 8008cf6:	ed9f 0aaf 	vldr	s0, [pc, #700]	@ 8008fb4 <plotter_begin+0x69c>
 8008cfa:	48aa      	ldr	r0, [pc, #680]	@ (8008fa4 <plotter_begin+0x68c>)
 8008cfc:	f7f8 fb64 	bl	80013c8 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
			ZGX45RGG_400RPM_Constant.sd_max);
 8008d00:	4bad      	ldr	r3, [pc, #692]	@ (8008fb8 <plotter_begin+0x6a0>)
 8008d02:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
 8008d06:	4610      	mov	r0, r2
 8008d08:	4619      	mov	r1, r3
 8008d0a:	f7f7 ff23 	bl	8000b54 <__aeabi_d2f>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	ee01 3a90 	vmov	s3, r3
 8008d14:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 8008fbc <plotter_begin+0x6a4>
 8008d18:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 8008fc0 <plotter_begin+0x6a8>
 8008d1c:	ed9f 0aa9 	vldr	s0, [pc, #676]	@ 8008fc4 <plotter_begin+0x6ac>
 8008d20:	48a9      	ldr	r0, [pc, #676]	@ (8008fc8 <plotter_begin+0x6b0>)
 8008d22:	f7f8 fa46 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8008d26:	4ba4      	ldr	r3, [pc, #656]	@ (8008fb8 <plotter_begin+0x6a0>)
 8008d28:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	4619      	mov	r1, r3
 8008d30:	f7f7 ff10 	bl	8000b54 <__aeabi_d2f>
 8008d34:	4603      	mov	r3, r0
 8008d36:	ee01 3a90 	vmov	s3, r3
 8008d3a:	ed9f 1a9d 	vldr	s2, [pc, #628]	@ 8008fb0 <plotter_begin+0x698>
 8008d3e:	eddf 0aa3 	vldr	s1, [pc, #652]	@ 8008fcc <plotter_begin+0x6b4>
 8008d42:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 8008fd0 <plotter_begin+0x6b8>
 8008d46:	48a3      	ldr	r0, [pc, #652]	@ (8008fd4 <plotter_begin+0x6bc>)
 8008d48:	f7f8 fa33 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 130, 0.1, 450,
			ZGX45RGG_150RPM_Constant.qd_max);
 8008d4c:	4ba2      	ldr	r3, [pc, #648]	@ (8008fd8 <plotter_begin+0x6c0>)
 8008d4e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 130, 0.1, 450,
 8008d52:	4610      	mov	r0, r2
 8008d54:	4619      	mov	r1, r3
 8008d56:	f7f7 fefd 	bl	8000b54 <__aeabi_d2f>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	ee01 3a90 	vmov	s3, r3
 8008d60:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 8008fdc <plotter_begin+0x6c4>
 8008d64:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 8008fe0 <plotter_begin+0x6c8>
 8008d68:	ed9f 0a9e 	vldr	s0, [pc, #632]	@ 8008fe4 <plotter_begin+0x6cc>
 8008d6c:	489e      	ldr	r0, [pc, #632]	@ (8008fe8 <plotter_begin+0x6d0>)
 8008d6e:	f7f8 fa20 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 25, 500,
			ZGX45RGG_150RPM_Constant.U_max);
 8008d72:	4b99      	ldr	r3, [pc, #612]	@ (8008fd8 <plotter_begin+0x6c0>)
 8008d74:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 25, 500,
 8008d78:	4610      	mov	r0, r2
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	f7f7 feea 	bl	8000b54 <__aeabi_d2f>
 8008d80:	4603      	mov	r3, r0
 8008d82:	ee01 3a90 	vmov	s3, r3
 8008d86:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 8008fec <plotter_begin+0x6d4>
 8008d8a:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8008d8e:	ed9f 0a89 	vldr	s0, [pc, #548]	@ 8008fb4 <plotter_begin+0x69c>
 8008d92:	4897      	ldr	r0, [pc, #604]	@ (8008ff0 <plotter_begin+0x6d8>)
 8008d94:	f7f8 fa0d 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
			ZGX45RGG_150RPM_Constant.U_max);
 8008d98:	4b8f      	ldr	r3, [pc, #572]	@ (8008fd8 <plotter_begin+0x6c0>)
 8008d9a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
 8008d9e:	4610      	mov	r0, r2
 8008da0:	4619      	mov	r1, r3
 8008da2:	f7f7 fed7 	bl	8000b54 <__aeabi_d2f>
 8008da6:	4603      	mov	r3, r0
 8008da8:	ee01 3a90 	vmov	s3, r3
 8008dac:	ed9f 1a81 	vldr	s2, [pc, #516]	@ 8008fb4 <plotter_begin+0x69c>
 8008db0:	eddf 0a90 	vldr	s1, [pc, #576]	@ 8008ff4 <plotter_begin+0x6dc>
 8008db4:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8008ff8 <plotter_begin+0x6e0>
 8008db8:	4890      	ldr	r0, [pc, #576]	@ (8008ffc <plotter_begin+0x6e4>)
 8008dba:	f7f8 f9fa 	bl	80011b2 <PID_CONTROLLER_Init>


	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8008dbe:	4986      	ldr	r1, [pc, #536]	@ (8008fd8 <plotter_begin+0x6c0>)
 8008dc0:	488f      	ldr	r0, [pc, #572]	@ (8009000 <plotter_begin+0x6e8>)
 8008dc2:	f7f8 fbdb 	bl	800157c <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8008dc6:	497c      	ldr	r1, [pc, #496]	@ (8008fb8 <plotter_begin+0x6a0>)
 8008dc8:	488e      	ldr	r0, [pc, #568]	@ (8009004 <plotter_begin+0x6ec>)
 8008dca:	f7f8 fd55 	bl	8001878 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8008dce:	4a8e      	ldr	r2, [pc, #568]	@ (8009008 <plotter_begin+0x6f0>)
 8008dd0:	4981      	ldr	r1, [pc, #516]	@ (8008fd8 <plotter_begin+0x6c0>)
 8008dd2:	488e      	ldr	r0, [pc, #568]	@ (800900c <plotter_begin+0x6f4>)
 8008dd4:	f7f8 fc61 	bl	800169a <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8008dd8:	4a8b      	ldr	r2, [pc, #556]	@ (8009008 <plotter_begin+0x6f0>)
 8008dda:	4977      	ldr	r1, [pc, #476]	@ (8008fb8 <plotter_begin+0x6a0>)
 8008ddc:	488c      	ldr	r0, [pc, #560]	@ (8009010 <plotter_begin+0x6f8>)
 8008dde:	f7f8 fdef 	bl	80019c0 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 8008de2:	2302      	movs	r3, #2
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	eddf 0a8b 	vldr	s1, [pc, #556]	@ 8009014 <plotter_begin+0x6fc>
 8008dea:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8009018 <plotter_begin+0x700>
 8008dee:	2364      	movs	r3, #100	@ 0x64
 8008df0:	4a8a      	ldr	r2, [pc, #552]	@ (800901c <plotter_begin+0x704>)
 8008df2:	498b      	ldr	r1, [pc, #556]	@ (8009020 <plotter_begin+0x708>)
 8008df4:	488b      	ldr	r0, [pc, #556]	@ (8009024 <plotter_begin+0x70c>)
 8008df6:	f7f8 f893 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 8008dfa:	2105      	movs	r1, #5
 8008dfc:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 8009028 <plotter_begin+0x710>
 8008e00:	4888      	ldr	r0, [pc, #544]	@ (8009024 <plotter_begin+0x70c>)
 8008e02:	f7f8 f93f 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 8008e06:	4887      	ldr	r0, [pc, #540]	@ (8009024 <plotter_begin+0x70c>)
 8008e08:	f7f8 f8e2 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8008e0c:	eddf 0a87 	vldr	s1, [pc, #540]	@ 800902c <plotter_begin+0x714>
 8008e10:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8008e14:	211f      	movs	r1, #31
 8008e16:	4886      	ldr	r0, [pc, #536]	@ (8009030 <plotter_begin+0x718>)
 8008e18:	f7f8 feae 	bl	8001b78 <FIR_init>
	FIR_init(&revolute_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8008e1c:	eddf 0a83 	vldr	s1, [pc, #524]	@ 800902c <plotter_begin+0x714>
 8008e20:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8008e24:	211f      	movs	r1, #31
 8008e26:	4883      	ldr	r0, [pc, #524]	@ (8009034 <plotter_begin+0x71c>)
 8008e28:	f7f8 fea6 	bl	8001b78 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008e2c:	4b62      	ldr	r3, [pc, #392]	@ (8008fb8 <plotter_begin+0x6a0>)
 8008e2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e32:	4610      	mov	r0, r2
 8008e34:	4619      	mov	r1, r3
 8008e36:	f7f7 fe8d 	bl	8000b54 <__aeabi_d2f>
 8008e3a:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8008e3c:	4b5e      	ldr	r3, [pc, #376]	@ (8008fb8 <plotter_begin+0x6a0>)
 8008e3e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008e42:	4610      	mov	r0, r2
 8008e44:	4619      	mov	r1, r3
 8008e46:	f7f7 fe85 	bl	8000b54 <__aeabi_d2f>
 8008e4a:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8008e4c:	4b5a      	ldr	r3, [pc, #360]	@ (8008fb8 <plotter_begin+0x6a0>)
 8008e4e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008e52:	4610      	mov	r0, r2
 8008e54:	4619      	mov	r1, r3
 8008e56:	f7f7 fe7d 	bl	8000b54 <__aeabi_d2f>
 8008e5a:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8008e5c:	4b56      	ldr	r3, [pc, #344]	@ (8008fb8 <plotter_begin+0x6a0>)
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008e62:	4610      	mov	r0, r2
 8008e64:	4619      	mov	r1, r3
 8008e66:	f7f7 fe75 	bl	8000b54 <__aeabi_d2f>
 8008e6a:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8008e6c:	4b52      	ldr	r3, [pc, #328]	@ (8008fb8 <plotter_begin+0x6a0>)
 8008e6e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008e72:	4610      	mov	r0, r2
 8008e74:	4619      	mov	r1, r3
 8008e76:	f7f7 fe6d 	bl	8000b54 <__aeabi_d2f>
 8008e7a:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 8008e7c:	4b4e      	ldr	r3, [pc, #312]	@ (8008fb8 <plotter_begin+0x6a0>)
 8008e7e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008e82:	4610      	mov	r0, r2
 8008e84:	4619      	mov	r1, r3
 8008e86:	f7f7 fe65 	bl	8000b54 <__aeabi_d2f>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8008e90:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8008e94:	ee03 3a10 	vmov	s6, r3
 8008e98:	ee02 9a90 	vmov	s5, r9
 8008e9c:	ee02 8a10 	vmov	s4, r8
 8008ea0:	ee01 6a90 	vmov	s3, r6
 8008ea4:	ee01 5a10 	vmov	s2, r5
 8008ea8:	ee00 4a90 	vmov	s1, r4
 8008eac:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 8009038 <plotter_begin+0x720>
 8008eb0:	4862      	ldr	r0, [pc, #392]	@ (800903c <plotter_begin+0x724>)
 8008eb2:	f7f9 fb59 	bl	8002568 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008eb6:	4b48      	ldr	r3, [pc, #288]	@ (8008fd8 <plotter_begin+0x6c0>)
 8008eb8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	f7f7 fe48 	bl	8000b54 <__aeabi_d2f>
 8008ec4:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8008ec6:	4b44      	ldr	r3, [pc, #272]	@ (8008fd8 <plotter_begin+0x6c0>)
 8008ec8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008ecc:	4610      	mov	r0, r2
 8008ece:	4619      	mov	r1, r3
 8008ed0:	f7f7 fe40 	bl	8000b54 <__aeabi_d2f>
 8008ed4:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8008ed6:	4b40      	ldr	r3, [pc, #256]	@ (8008fd8 <plotter_begin+0x6c0>)
 8008ed8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008edc:	4610      	mov	r0, r2
 8008ede:	4619      	mov	r1, r3
 8008ee0:	f7f7 fe38 	bl	8000b54 <__aeabi_d2f>
 8008ee4:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8008ee6:	4b3c      	ldr	r3, [pc, #240]	@ (8008fd8 <plotter_begin+0x6c0>)
 8008ee8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008eec:	a326      	add	r3, pc, #152	@ (adr r3, 8008f88 <plotter_begin+0x670>)
 8008eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef2:	f7f7 fb4d 	bl	8000590 <__aeabi_dmul>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008efa:	4610      	mov	r0, r2
 8008efc:	4619      	mov	r1, r3
 8008efe:	f7f7 fe29 	bl	8000b54 <__aeabi_d2f>
 8008f02:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8008f04:	4b34      	ldr	r3, [pc, #208]	@ (8008fd8 <plotter_begin+0x6c0>)
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008f0a:	4610      	mov	r0, r2
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	f7f7 fe21 	bl	8000b54 <__aeabi_d2f>
 8008f12:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt, 0.001, &revolute_A, &revolute_B);
 8008f14:	4b30      	ldr	r3, [pc, #192]	@ (8008fd8 <plotter_begin+0x6c0>)
 8008f16:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	f7f7 fe19 	bl	8000b54 <__aeabi_d2f>
 8008f22:	4603      	mov	r3, r0
 8008f24:	4946      	ldr	r1, [pc, #280]	@ (8009040 <plotter_begin+0x728>)
 8008f26:	4847      	ldr	r0, [pc, #284]	@ (8009044 <plotter_begin+0x72c>)
 8008f28:	ed9f 3a43 	vldr	s6, [pc, #268]	@ 8009038 <plotter_begin+0x720>
 8008f2c:	ee02 3a90 	vmov	s5, r3
 8008f30:	ee02 9a10 	vmov	s4, r9
 8008f34:	ee01 8a90 	vmov	s3, r8
 8008f38:	ee01 6a10 	vmov	s2, r6
 8008f3c:	ee00 5a90 	vmov	s1, r5
 8008f40:	ee00 4a10 	vmov	s0, r4
 8008f44:	f7fa fcbc 	bl	80038c0 <GenerateMotorMatrices>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8008f48:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 8009048 <plotter_begin+0x730>
 8008f4c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008f50:	4a3b      	ldr	r2, [pc, #236]	@ (8009040 <plotter_begin+0x728>)
 8008f52:	493c      	ldr	r1, [pc, #240]	@ (8009044 <plotter_begin+0x72c>)
 8008f54:	483d      	ldr	r0, [pc, #244]	@ (800904c <plotter_begin+0x734>)
 8008f56:	f7fc fa21 	bl	800539c <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8008f5a:	23c8      	movs	r3, #200	@ 0xc8
 8008f5c:	9301      	str	r3, [sp, #4]
 8008f5e:	2315      	movs	r3, #21
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	4b3b      	ldr	r3, [pc, #236]	@ (8009050 <plotter_begin+0x738>)
 8008f64:	4a3b      	ldr	r2, [pc, #236]	@ (8009054 <plotter_begin+0x73c>)
 8008f66:	493c      	ldr	r1, [pc, #240]	@ (8009058 <plotter_begin+0x740>)
 8008f68:	483c      	ldr	r0, [pc, #240]	@ (800905c <plotter_begin+0x744>)
 8008f6a:	f7f8 fff5 	bl	8001f58 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8008f6e:	483c      	ldr	r0, [pc, #240]	@ (8009060 <plotter_begin+0x748>)
 8008f70:	f004 fdea 	bl	800db48 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 8008f74:	f000 f876 	bl	8009064 <plotter_reset>
}
 8008f78:	bf00      	nop
 8008f7a:	3704      	adds	r7, #4
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	ecbd 8b02 	vpop	{d8}
 8008f82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f86:	bf00      	nop
 8008f88:	9999999a 	.word	0x9999999a
 8008f8c:	40019999 	.word	0x40019999
 8008f90:	20001df8 	.word	0x20001df8
 8008f94:	200006fc 	.word	0x200006fc
 8008f98:	20001f90 	.word	0x20001f90
 8008f9c:	20000608 	.word	0x20000608
 8008fa0:	48000800 	.word	0x48000800
 8008fa4:	20000654 	.word	0x20000654
 8008fa8:	20001b94 	.word	0x20001b94
 8008fac:	20000838 	.word	0x20000838
 8008fb0:	00000000 	.word	0x00000000
 8008fb4:	44fa0000 	.word	0x44fa0000
 8008fb8:	20000080 	.word	0x20000080
 8008fbc:	42f00000 	.word	0x42f00000
 8008fc0:	2edbe6ff 	.word	0x2edbe6ff
 8008fc4:	42960000 	.word	0x42960000
 8008fc8:	20000758 	.word	0x20000758
 8008fcc:	3727c5ac 	.word	0x3727c5ac
 8008fd0:	43160000 	.word	0x43160000
 8008fd4:	20000780 	.word	0x20000780
 8008fd8:	20000000 	.word	0x20000000
 8008fdc:	43e10000 	.word	0x43e10000
 8008fe0:	3dcccccd 	.word	0x3dcccccd
 8008fe4:	43020000 	.word	0x43020000
 8008fe8:	200007a8 	.word	0x200007a8
 8008fec:	43fa0000 	.word	0x43fa0000
 8008ff0:	200007d0 	.word	0x200007d0
 8008ff4:	42c80000 	.word	0x42c80000
 8008ff8:	45ea6000 	.word	0x45ea6000
 8008ffc:	200007f8 	.word	0x200007f8
 8009000:	2000082c 	.word	0x2000082c
 8009004:	20000820 	.word	0x20000820
 8009008:	20000100 	.word	0x20000100
 800900c:	20000830 	.word	0x20000830
 8009010:	20000824 	.word	0x20000824
 8009014:	457ff000 	.word	0x457ff000
 8009018:	40533333 	.word	0x40533333
 800901c:	20000d04 	.word	0x20000d04
 8009020:	200003b4 	.word	0x200003b4
 8009024:	20000850 	.word	0x20000850
 8009028:	45000000 	.word	0x45000000
 800902c:	447a0000 	.word	0x447a0000
 8009030:	20000cec 	.word	0x20000cec
 8009034:	20000cf8 	.word	0x20000cf8
 8009038:	3a83126f 	.word	0x3a83126f
 800903c:	20001434 	.word	0x20001434
 8009040:	20001b60 	.word	0x20001b60
 8009044:	20001b20 	.word	0x20001b20
 8009048:	3d4ccccd 	.word	0x3d4ccccd
 800904c:	200017a0 	.word	0x200017a0
 8009050:	200012a4 	.word	0x200012a4
 8009054:	2000205c 	.word	0x2000205c
 8009058:	200021f4 	.word	0x200021f4
 800905c:	20000dcc 	.word	0x20000dcc
 8009060:	20001c60 	.word	0x20001c60

08009064 <plotter_reset>:

void plotter_reset() {
 8009064:	b580      	push	{r7, lr}
 8009066:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 8009068:	4819      	ldr	r0, [pc, #100]	@ (80090d0 <plotter_reset+0x6c>)
 800906a:	f7fb f941 	bl	80042f0 <QEI_reset>
	QEI_reset(&prismatic_encoder);
 800906e:	4818      	ldr	r0, [pc, #96]	@ (80090d0 <plotter_reset+0x6c>)
 8009070:	f7fb f93e 	bl	80042f0 <QEI_reset>

	prismatic_encoder.diff_counts = 0;
 8009074:	4b16      	ldr	r3, [pc, #88]	@ (80090d0 <plotter_reset+0x6c>)
 8009076:	2200      	movs	r2, #0
 8009078:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 800907a:	4b15      	ldr	r3, [pc, #84]	@ (80090d0 <plotter_reset+0x6c>)
 800907c:	f04f 0200 	mov.w	r2, #0
 8009080:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 8009082:	4b13      	ldr	r3, [pc, #76]	@ (80090d0 <plotter_reset+0x6c>)
 8009084:	2200      	movs	r2, #0
 8009086:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 8009088:	4b11      	ldr	r3, [pc, #68]	@ (80090d0 <plotter_reset+0x6c>)
 800908a:	f04f 0200 	mov.w	r2, #0
 800908e:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 8009090:	4b0f      	ldr	r3, [pc, #60]	@ (80090d0 <plotter_reset+0x6c>)
 8009092:	f04f 0200 	mov.w	r2, #0
 8009096:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 8009098:	4b0d      	ldr	r3, [pc, #52]	@ (80090d0 <plotter_reset+0x6c>)
 800909a:	f04f 0200 	mov.w	r2, #0
 800909e:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 80090a0:	4b0c      	ldr	r3, [pc, #48]	@ (80090d4 <plotter_reset+0x70>)
 80090a2:	2200      	movs	r2, #0
 80090a4:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 80090a6:	4b0b      	ldr	r3, [pc, #44]	@ (80090d4 <plotter_reset+0x70>)
 80090a8:	f04f 0200 	mov.w	r2, #0
 80090ac:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 80090ae:	4b09      	ldr	r3, [pc, #36]	@ (80090d4 <plotter_reset+0x70>)
 80090b0:	2200      	movs	r2, #0
 80090b2:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 80090b4:	4b07      	ldr	r3, [pc, #28]	@ (80090d4 <plotter_reset+0x70>)
 80090b6:	f04f 0200 	mov.w	r2, #0
 80090ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 80090bc:	4b05      	ldr	r3, [pc, #20]	@ (80090d4 <plotter_reset+0x70>)
 80090be:	f04f 0200 	mov.w	r2, #0
 80090c2:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 80090c4:	4b03      	ldr	r3, [pc, #12]	@ (80090d4 <plotter_reset+0x70>)
 80090c6:	f04f 0200 	mov.w	r2, #0
 80090ca:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80090cc:	bf00      	nop
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	200006a0 	.word	0x200006a0
 80090d4:	200006fc 	.word	0x200006fc

080090d8 <plotter_update_sensors>:

void plotter_update_sensors() {
 80090d8:	b580      	push	{r7, lr}
 80090da:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 80090dc:	eddf 0a39 	vldr	s1, [pc, #228]	@ 80091c4 <plotter_update_sensors+0xec>
 80090e0:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 80091c8 <plotter_update_sensors+0xf0>
 80090e4:	2106      	movs	r1, #6
 80090e6:	4839      	ldr	r0, [pc, #228]	@ (80091cc <plotter_update_sensors+0xf4>)
 80090e8:	f7f7 fff6 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 80090ec:	eef0 7a40 	vmov.f32	s15, s0
 80090f0:	4b37      	ldr	r3, [pc, #220]	@ (80091d0 <plotter_update_sensors+0xf8>)
 80090f2:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 80090f6:	eddf 0a33 	vldr	s1, [pc, #204]	@ 80091c4 <plotter_update_sensors+0xec>
 80090fa:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 80091c8 <plotter_update_sensors+0xf0>
 80090fe:	2107      	movs	r1, #7
 8009100:	4832      	ldr	r0, [pc, #200]	@ (80091cc <plotter_update_sensors+0xf4>)
 8009102:	f7f7 ffe9 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8009106:	eef0 7a40 	vmov.f32	s15, s0
 800910a:	4b32      	ldr	r3, [pc, #200]	@ (80091d4 <plotter_update_sensors+0xfc>)
 800910c:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8009110:	2180      	movs	r1, #128	@ 0x80
 8009112:	4831      	ldr	r0, [pc, #196]	@ (80091d8 <plotter_update_sensors+0x100>)
 8009114:	f003 fbb2 	bl	800c87c <HAL_GPIO_ReadPin>
 8009118:	4603      	mov	r3, r0
 800911a:	2b00      	cmp	r3, #0
 800911c:	bf0c      	ite	eq
 800911e:	2301      	moveq	r3, #1
 8009120:	2300      	movne	r3, #0
 8009122:	b2db      	uxtb	r3, r3
 8009124:	461a      	mov	r2, r3
 8009126:	4b2d      	ldr	r3, [pc, #180]	@ (80091dc <plotter_update_sensors+0x104>)
 8009128:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 800912a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800912e:	482c      	ldr	r0, [pc, #176]	@ (80091e0 <plotter_update_sensors+0x108>)
 8009130:	f003 fba4 	bl	800c87c <HAL_GPIO_ReadPin>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	bf0c      	ite	eq
 800913a:	2301      	moveq	r3, #1
 800913c:	2300      	movne	r3, #0
 800913e:	b2db      	uxtb	r3, r3
 8009140:	461a      	mov	r2, r3
 8009142:	4b28      	ldr	r3, [pc, #160]	@ (80091e4 <plotter_update_sensors+0x10c>)
 8009144:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8009146:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800914a:	4825      	ldr	r0, [pc, #148]	@ (80091e0 <plotter_update_sensors+0x108>)
 800914c:	f003 fb96 	bl	800c87c <HAL_GPIO_ReadPin>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	bf0c      	ite	eq
 8009156:	2301      	moveq	r3, #1
 8009158:	2300      	movne	r3, #0
 800915a:	b2db      	uxtb	r3, r3
 800915c:	461a      	mov	r2, r3
 800915e:	4b22      	ldr	r3, [pc, #136]	@ (80091e8 <plotter_update_sensors+0x110>)
 8009160:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 8009162:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009166:	481e      	ldr	r0, [pc, #120]	@ (80091e0 <plotter_update_sensors+0x108>)
 8009168:	f003 fb88 	bl	800c87c <HAL_GPIO_ReadPin>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	bf0c      	ite	eq
 8009172:	2301      	moveq	r3, #1
 8009174:	2300      	movne	r3, #0
 8009176:	b2db      	uxtb	r3, r3
 8009178:	461a      	mov	r2, r3
 800917a:	4b1c      	ldr	r3, [pc, #112]	@ (80091ec <plotter_update_sensors+0x114>)
 800917c:	601a      	str	r2, [r3, #0]

//	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
//	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);

	extern bool homing_active;
	if (!homing_active) {
 800917e:	4b1c      	ldr	r3, [pc, #112]	@ (80091f0 <plotter_update_sensors+0x118>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	f083 0301 	eor.w	r3, r3, #1
 8009186:	b2db      	uxtb	r3, r3
 8009188:	2b00      	cmp	r3, #0
 800918a:	d018      	beq.n	80091be <plotter_update_sensors+0xe6>
		extern volatile bool up_photo, low_photo;
		up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 800918c:	2101      	movs	r1, #1
 800918e:	4812      	ldr	r0, [pc, #72]	@ (80091d8 <plotter_update_sensors+0x100>)
 8009190:	f003 fb74 	bl	800c87c <HAL_GPIO_ReadPin>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	bf14      	ite	ne
 800919a:	2301      	movne	r3, #1
 800919c:	2300      	moveq	r3, #0
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	4b14      	ldr	r3, [pc, #80]	@ (80091f4 <plotter_update_sensors+0x11c>)
 80091a2:	701a      	strb	r2, [r3, #0]
		low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 80091a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80091a8:	480b      	ldr	r0, [pc, #44]	@ (80091d8 <plotter_update_sensors+0x100>)
 80091aa:	f003 fb67 	bl	800c87c <HAL_GPIO_ReadPin>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	bf14      	ite	ne
 80091b4:	2301      	movne	r3, #1
 80091b6:	2300      	moveq	r3, #0
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	4b0f      	ldr	r3, [pc, #60]	@ (80091f8 <plotter_update_sensors+0x120>)
 80091bc:	701a      	strb	r2, [r3, #0]
	}
}
 80091be:	bf00      	nop
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	42480000 	.word	0x42480000
 80091c8:	c2480000 	.word	0xc2480000
 80091cc:	20000850 	.word	0x20000850
 80091d0:	20001b70 	.word	0x20001b70
 80091d4:	20001b74 	.word	0x20001b74
 80091d8:	48000400 	.word	0x48000400
 80091dc:	20001b80 	.word	0x20001b80
 80091e0:	48000800 	.word	0x48000800
 80091e4:	20001b84 	.word	0x20001b84
 80091e8:	20001b88 	.word	0x20001b88
 80091ec:	20001b8c 	.word	0x20001b8c
 80091f0:	2000056b 	.word	0x2000056b
 80091f4:	20000568 	.word	0x20000568
 80091f8:	20000569 	.word	0x20000569

080091fc <plotter_pen_up>:

void plotter_pen_up() {
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8009200:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8009204:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009214 <plotter_pen_up+0x18>
 8009208:	4803      	ldr	r0, [pc, #12]	@ (8009218 <plotter_pen_up+0x1c>)
 800920a:	f7fa fbe3 	bl	80039d4 <PWM_write_duty>
}
 800920e:	bf00      	nop
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	42480000 	.word	0x42480000
 8009218:	20000838 	.word	0x20000838

0800921c <plotter_pen_down>:

void plotter_pen_down() {
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 8009220:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8009224:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009234 <plotter_pen_down+0x18>
 8009228:	4803      	ldr	r0, [pc, #12]	@ (8009238 <plotter_pen_down+0x1c>)
 800922a:	f7fa fbd3 	bl	80039d4 <PWM_write_duty>
}
 800922e:	bf00      	nop
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	42480000 	.word	0x42480000
 8009238:	20000838 	.word	0x20000838

0800923c <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	78fa      	ldrb	r2, [r7, #3]
 800924c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009254:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800925c:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f04f 0200 	mov.w	r2, #0
 8009264:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f04f 0200 	mov.w	r2, #0
 800926c:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f04f 0200 	mov.w	r2, #0
 8009274:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f04f 0200 	mov.w	r2, #0
 800927c:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	4a1b      	ldr	r2, [pc, #108]	@ (80092f0 <SIGNAL_init+0xb4>)
 8009282:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800928a:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 800928c:	78fb      	ldrb	r3, [r7, #3]
 800928e:	2b03      	cmp	r3, #3
 8009290:	d828      	bhi.n	80092e4 <SIGNAL_init+0xa8>
 8009292:	a201      	add	r2, pc, #4	@ (adr r2, 8009298 <SIGNAL_init+0x5c>)
 8009294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009298:	080092e3 	.word	0x080092e3
 800929c:	080092a9 	.word	0x080092a9
 80092a0:	080092c7 	.word	0x080092c7
 80092a4:	080092d1 	.word	0x080092d1
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80092b4:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a0e      	ldr	r2, [pc, #56]	@ (80092f4 <SIGNAL_init+0xb8>)
 80092ba:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80092c2:	621a      	str	r2, [r3, #32]
            break;
 80092c4:	e00e      	b.n	80092e4 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80092cc:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 80092ce:	e009      	b.n	80092e4 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f04f 0200 	mov.w	r2, #0
 80092d6:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80092de:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 80092e0:	e000      	b.n	80092e4 <SIGNAL_init+0xa8>
            break;
 80092e2:	bf00      	nop
    }
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	bf800000 	.word	0xbf800000
 80092f4:	41200000 	.word	0x41200000

080092f8 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 80092f8:	b480      	push	{r7}
 80092fa:	b089      	sub	sp, #36	@ 0x24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	61f8      	str	r0, [r7, #28]
 8009300:	ed87 0a06 	vstr	s0, [r7, #24]
 8009304:	edc7 0a05 	vstr	s1, [r7, #20]
 8009308:	ed87 1a04 	vstr	s2, [r7, #16]
 800930c:	edc7 1a03 	vstr	s3, [r7, #12]
 8009310:	ed87 2a02 	vstr	s4, [r7, #8]
 8009314:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	2200      	movs	r2, #0
 800931c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	69ba      	ldr	r2, [r7, #24]
 8009322:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	697a      	ldr	r2, [r7, #20]
 8009328:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	693a      	ldr	r2, [r7, #16]
 800932e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8009330:	69fb      	ldr	r3, [r7, #28]
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8009336:	69fb      	ldr	r3, [r7, #28]
 8009338:	68ba      	ldr	r2, [r7, #8]
 800933a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 800933c:	69fb      	ldr	r3, [r7, #28]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009342:	bf00      	nop
 8009344:	3724      	adds	r7, #36	@ 0x24
 8009346:	46bd      	mov	sp, r7
 8009348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934c:	4770      	bx	lr

0800934e <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 800934e:	b480      	push	{r7}
 8009350:	b089      	sub	sp, #36	@ 0x24
 8009352:	af00      	add	r7, sp, #0
 8009354:	61f8      	str	r0, [r7, #28]
 8009356:	ed87 0a06 	vstr	s0, [r7, #24]
 800935a:	edc7 0a05 	vstr	s1, [r7, #20]
 800935e:	ed87 1a04 	vstr	s2, [r7, #16]
 8009362:	edc7 1a03 	vstr	s3, [r7, #12]
 8009366:	ed87 2a02 	vstr	s4, [r7, #8]
 800936a:	edc7 2a01 	vstr	s5, [r7, #4]
 800936e:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8009372:	69fb      	ldr	r3, [r7, #28]
 8009374:	2202      	movs	r2, #2
 8009376:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	693a      	ldr	r2, [r7, #16]
 8009388:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80093a2:	bf00      	nop
 80093a4:	3724      	adds	r7, #36	@ 0x24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ac:	4770      	bx	lr
	...

080093b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093b6:	4b0f      	ldr	r3, [pc, #60]	@ (80093f4 <HAL_MspInit+0x44>)
 80093b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093ba:	4a0e      	ldr	r2, [pc, #56]	@ (80093f4 <HAL_MspInit+0x44>)
 80093bc:	f043 0301 	orr.w	r3, r3, #1
 80093c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80093c2:	4b0c      	ldr	r3, [pc, #48]	@ (80093f4 <HAL_MspInit+0x44>)
 80093c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	607b      	str	r3, [r7, #4]
 80093cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80093ce:	4b09      	ldr	r3, [pc, #36]	@ (80093f4 <HAL_MspInit+0x44>)
 80093d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093d2:	4a08      	ldr	r2, [pc, #32]	@ (80093f4 <HAL_MspInit+0x44>)
 80093d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80093da:	4b06      	ldr	r3, [pc, #24]	@ (80093f4 <HAL_MspInit+0x44>)
 80093dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093e2:	603b      	str	r3, [r7, #0]
 80093e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80093e6:	f003 fb4f 	bl	800ca88 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80093ea:	bf00      	nop
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	40021000 	.word	0x40021000

080093f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80093f8:	b480      	push	{r7}
 80093fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80093fc:	bf00      	nop
 80093fe:	e7fd      	b.n	80093fc <NMI_Handler+0x4>

08009400 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009400:	b480      	push	{r7}
 8009402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009404:	bf00      	nop
 8009406:	e7fd      	b.n	8009404 <HardFault_Handler+0x4>

08009408 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009408:	b480      	push	{r7}
 800940a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800940c:	bf00      	nop
 800940e:	e7fd      	b.n	800940c <MemManage_Handler+0x4>

08009410 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009410:	b480      	push	{r7}
 8009412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009414:	bf00      	nop
 8009416:	e7fd      	b.n	8009414 <BusFault_Handler+0x4>

08009418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009418:	b480      	push	{r7}
 800941a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800941c:	bf00      	nop
 800941e:	e7fd      	b.n	800941c <UsageFault_Handler+0x4>

08009420 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009420:	b480      	push	{r7}
 8009422:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009424:	bf00      	nop
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr

0800942e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800942e:	b480      	push	{r7}
 8009430:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009432:	bf00      	nop
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800943c:	b480      	push	{r7}
 800943e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009440:	bf00      	nop
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800944e:	f000 ffbb 	bl	800a3c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009452:	bf00      	nop
 8009454:	bd80      	pop	{r7, pc}

08009456 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 800945a:	2001      	movs	r0, #1
 800945c:	f003 fa58 	bl	800c910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8009460:	bf00      	nop
 8009462:	bd80      	pop	{r7, pc}

08009464 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 8009468:	2010      	movs	r0, #16
 800946a:	f003 fa51 	bl	800c910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800946e:	bf00      	nop
 8009470:	bd80      	pop	{r7, pc}
	...

08009474 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009478:	4802      	ldr	r0, [pc, #8]	@ (8009484 <DMA1_Channel1_IRQHandler+0x10>)
 800947a:	f002 ff2e 	bl	800c2da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800947e:	bf00      	nop
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	20000420 	.word	0x20000420

08009488 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800948c:	4802      	ldr	r0, [pc, #8]	@ (8009498 <DMA1_Channel2_IRQHandler+0x10>)
 800948e:	f002 ff24 	bl	800c2da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8009492:	bf00      	nop
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	20002380 	.word	0x20002380

0800949c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80094a0:	4802      	ldr	r0, [pc, #8]	@ (80094ac <DMA1_Channel3_IRQHandler+0x10>)
 80094a2:	f002 ff1a 	bl	800c2da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80094a6:	bf00      	nop
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	200023e0 	.word	0x200023e0

080094b0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80094b4:	4802      	ldr	r0, [pc, #8]	@ (80094c0 <DMA1_Channel4_IRQHandler+0x10>)
 80094b6:	f002 ff10 	bl	800c2da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80094ba:	bf00      	nop
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	200022c0 	.word	0x200022c0

080094c4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80094c8:	4802      	ldr	r0, [pc, #8]	@ (80094d4 <DMA1_Channel5_IRQHandler+0x10>)
 80094ca:	f002 ff06 	bl	800c2da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80094ce:	bf00      	nop
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	20002320 	.word	0x20002320

080094d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 80094dc:	2040      	movs	r0, #64	@ 0x40
 80094de:	f003 fa17 	bl	800c910 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 80094e2:	2080      	movs	r0, #128	@ 0x80
 80094e4:	f003 fa14 	bl	800c910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80094e8:	bf00      	nop
 80094ea:	bd80      	pop	{r7, pc}

080094ec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80094f0:	4803      	ldr	r0, [pc, #12]	@ (8009500 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80094f2:	f004 ff4f 	bl	800e394 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80094f6:	4803      	ldr	r0, [pc, #12]	@ (8009504 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80094f8:	f004 ff4c 	bl	800e394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80094fc:	bf00      	nop
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	20001b94 	.word	0x20001b94
 8009504:	2000205c 	.word	0x2000205c

08009508 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800950c:	4802      	ldr	r0, [pc, #8]	@ (8009518 <TIM2_IRQHandler+0x10>)
 800950e:	f004 ff41 	bl	800e394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8009512:	bf00      	nop
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20001c60 	.word	0x20001c60

0800951c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009520:	4802      	ldr	r0, [pc, #8]	@ (800952c <TIM3_IRQHandler+0x10>)
 8009522:	f004 ff37 	bl	800e394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8009526:	bf00      	nop
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	20001d2c 	.word	0x20001d2c

08009530 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009534:	4802      	ldr	r0, [pc, #8]	@ (8009540 <TIM4_IRQHandler+0x10>)
 8009536:	f004 ff2d 	bl	800e394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800953a:	bf00      	nop
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	20001df8 	.word	0x20001df8

08009544 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009548:	4802      	ldr	r0, [pc, #8]	@ (8009554 <USART2_IRQHandler+0x10>)
 800954a:	f006 fcf7 	bl	800ff3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800954e:	bf00      	nop
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	200021f4 	.word	0x200021f4

08009558 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 800955c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009560:	f003 f9d6 	bl	800c910 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 8009564:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009568:	f003 f9d2 	bl	800c910 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 800956c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009570:	f003 f9ce 	bl	800c910 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8009574:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009578:	f003 f9ca 	bl	800c910 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800957c:	bf00      	nop
 800957e:	bd80      	pop	{r7, pc}

08009580 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8009584:	4802      	ldr	r0, [pc, #8]	@ (8009590 <LPUART1_IRQHandler+0x10>)
 8009586:	f006 fcd9 	bl	800ff3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800958a:	bf00      	nop
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20002128 	.word	0x20002128

08009594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800959c:	4a14      	ldr	r2, [pc, #80]	@ (80095f0 <_sbrk+0x5c>)
 800959e:	4b15      	ldr	r3, [pc, #84]	@ (80095f4 <_sbrk+0x60>)
 80095a0:	1ad3      	subs	r3, r2, r3
 80095a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80095a8:	4b13      	ldr	r3, [pc, #76]	@ (80095f8 <_sbrk+0x64>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d102      	bne.n	80095b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80095b0:	4b11      	ldr	r3, [pc, #68]	@ (80095f8 <_sbrk+0x64>)
 80095b2:	4a12      	ldr	r2, [pc, #72]	@ (80095fc <_sbrk+0x68>)
 80095b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80095b6:	4b10      	ldr	r3, [pc, #64]	@ (80095f8 <_sbrk+0x64>)
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4413      	add	r3, r2
 80095be:	693a      	ldr	r2, [r7, #16]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d207      	bcs.n	80095d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80095c4:	f008 ffa8 	bl	8012518 <__errno>
 80095c8:	4603      	mov	r3, r0
 80095ca:	220c      	movs	r2, #12
 80095cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80095ce:	f04f 33ff 	mov.w	r3, #4294967295
 80095d2:	e009      	b.n	80095e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80095d4:	4b08      	ldr	r3, [pc, #32]	@ (80095f8 <_sbrk+0x64>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80095da:	4b07      	ldr	r3, [pc, #28]	@ (80095f8 <_sbrk+0x64>)
 80095dc:	681a      	ldr	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4413      	add	r3, r2
 80095e2:	4a05      	ldr	r2, [pc, #20]	@ (80095f8 <_sbrk+0x64>)
 80095e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80095e6:	68fb      	ldr	r3, [r7, #12]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3718      	adds	r7, #24
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	20020000 	.word	0x20020000
 80095f4:	00000400 	.word	0x00000400
 80095f8:	20001b90 	.word	0x20001b90
 80095fc:	20002590 	.word	0x20002590

08009600 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009600:	b480      	push	{r7}
 8009602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009604:	4b06      	ldr	r3, [pc, #24]	@ (8009620 <SystemInit+0x20>)
 8009606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800960a:	4a05      	ldr	r2, [pc, #20]	@ (8009620 <SystemInit+0x20>)
 800960c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009610:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009614:	bf00      	nop
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr
 800961e:	bf00      	nop
 8009620:	e000ed00 	.word	0xe000ed00

08009624 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b098      	sub	sp, #96	@ 0x60
 8009628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800962a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800962e:	2200      	movs	r2, #0
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	605a      	str	r2, [r3, #4]
 8009634:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009636:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800963a:	2200      	movs	r2, #0
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	605a      	str	r2, [r3, #4]
 8009640:	609a      	str	r2, [r3, #8]
 8009642:	60da      	str	r2, [r3, #12]
 8009644:	611a      	str	r2, [r3, #16]
 8009646:	615a      	str	r2, [r3, #20]
 8009648:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800964a:	1d3b      	adds	r3, r7, #4
 800964c:	2234      	movs	r2, #52	@ 0x34
 800964e:	2100      	movs	r1, #0
 8009650:	4618      	mov	r0, r3
 8009652:	f008 ff49 	bl	80124e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009656:	4b3b      	ldr	r3, [pc, #236]	@ (8009744 <MX_TIM1_Init+0x120>)
 8009658:	4a3b      	ldr	r2, [pc, #236]	@ (8009748 <MX_TIM1_Init+0x124>)
 800965a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800965c:	4b39      	ldr	r3, [pc, #228]	@ (8009744 <MX_TIM1_Init+0x120>)
 800965e:	2200      	movs	r2, #0
 8009660:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009662:	4b38      	ldr	r3, [pc, #224]	@ (8009744 <MX_TIM1_Init+0x120>)
 8009664:	2200      	movs	r2, #0
 8009666:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8009668:	4b36      	ldr	r3, [pc, #216]	@ (8009744 <MX_TIM1_Init+0x120>)
 800966a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800966e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009670:	4b34      	ldr	r3, [pc, #208]	@ (8009744 <MX_TIM1_Init+0x120>)
 8009672:	2200      	movs	r2, #0
 8009674:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009676:	4b33      	ldr	r3, [pc, #204]	@ (8009744 <MX_TIM1_Init+0x120>)
 8009678:	2200      	movs	r2, #0
 800967a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800967c:	4b31      	ldr	r3, [pc, #196]	@ (8009744 <MX_TIM1_Init+0x120>)
 800967e:	2200      	movs	r2, #0
 8009680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009682:	4830      	ldr	r0, [pc, #192]	@ (8009744 <MX_TIM1_Init+0x120>)
 8009684:	f004 fad8 	bl	800dc38 <HAL_TIM_PWM_Init>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d001      	beq.n	8009692 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800968e:	f7ff f93b 	bl	8008908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009692:	2300      	movs	r3, #0
 8009694:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009696:	2300      	movs	r3, #0
 8009698:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800969a:	2300      	movs	r3, #0
 800969c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800969e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80096a2:	4619      	mov	r1, r3
 80096a4:	4827      	ldr	r0, [pc, #156]	@ (8009744 <MX_TIM1_Init+0x120>)
 80096a6:	f006 f8e9 	bl	800f87c <HAL_TIMEx_MasterConfigSynchronization>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d001      	beq.n	80096b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80096b0:	f7ff f92a 	bl	8008908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80096b4:	2360      	movs	r3, #96	@ 0x60
 80096b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80096b8:	2300      	movs	r3, #0
 80096ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80096bc:	2300      	movs	r3, #0
 80096be:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80096c0:	2300      	movs	r3, #0
 80096c2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80096c4:	2300      	movs	r3, #0
 80096c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80096c8:	2300      	movs	r3, #0
 80096ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80096cc:	2300      	movs	r3, #0
 80096ce:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80096d0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80096d4:	220c      	movs	r2, #12
 80096d6:	4619      	mov	r1, r3
 80096d8:	481a      	ldr	r0, [pc, #104]	@ (8009744 <MX_TIM1_Init+0x120>)
 80096da:	f004 ffd5 	bl	800e688 <HAL_TIM_PWM_ConfigChannel>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80096e4:	f7ff f910 	bl	8008908 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80096e8:	2300      	movs	r3, #0
 80096ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80096ec:	2300      	movs	r3, #0
 80096ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80096f0:	2300      	movs	r3, #0
 80096f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80096f4:	2300      	movs	r3, #0
 80096f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80096f8:	2300      	movs	r3, #0
 80096fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80096fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009700:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8009706:	2300      	movs	r3, #0
 8009708:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800970a:	2300      	movs	r3, #0
 800970c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800970e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009712:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009714:	2300      	movs	r3, #0
 8009716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009718:	2300      	movs	r3, #0
 800971a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800971c:	2300      	movs	r3, #0
 800971e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009720:	1d3b      	adds	r3, r7, #4
 8009722:	4619      	mov	r1, r3
 8009724:	4807      	ldr	r0, [pc, #28]	@ (8009744 <MX_TIM1_Init+0x120>)
 8009726:	f006 f93f 	bl	800f9a8 <HAL_TIMEx_ConfigBreakDeadTime>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8009730:	f7ff f8ea 	bl	8008908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8009734:	4803      	ldr	r0, [pc, #12]	@ (8009744 <MX_TIM1_Init+0x120>)
 8009736:	f000 fb77 	bl	8009e28 <HAL_TIM_MspPostInit>

}
 800973a:	bf00      	nop
 800973c:	3760      	adds	r7, #96	@ 0x60
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	20001b94 	.word	0x20001b94
 8009748:	40012c00 	.word	0x40012c00

0800974c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b088      	sub	sp, #32
 8009750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009752:	f107 0310 	add.w	r3, r7, #16
 8009756:	2200      	movs	r2, #0
 8009758:	601a      	str	r2, [r3, #0]
 800975a:	605a      	str	r2, [r3, #4]
 800975c:	609a      	str	r2, [r3, #8]
 800975e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009760:	1d3b      	adds	r3, r7, #4
 8009762:	2200      	movs	r2, #0
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	605a      	str	r2, [r3, #4]
 8009768:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800976a:	4b1e      	ldr	r3, [pc, #120]	@ (80097e4 <MX_TIM2_Init+0x98>)
 800976c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009770:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8009772:	4b1c      	ldr	r3, [pc, #112]	@ (80097e4 <MX_TIM2_Init+0x98>)
 8009774:	22a9      	movs	r2, #169	@ 0xa9
 8009776:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009778:	4b1a      	ldr	r3, [pc, #104]	@ (80097e4 <MX_TIM2_Init+0x98>)
 800977a:	2200      	movs	r2, #0
 800977c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800977e:	4b19      	ldr	r3, [pc, #100]	@ (80097e4 <MX_TIM2_Init+0x98>)
 8009780:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009784:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009786:	4b17      	ldr	r3, [pc, #92]	@ (80097e4 <MX_TIM2_Init+0x98>)
 8009788:	2200      	movs	r2, #0
 800978a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800978c:	4b15      	ldr	r3, [pc, #84]	@ (80097e4 <MX_TIM2_Init+0x98>)
 800978e:	2200      	movs	r2, #0
 8009790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009792:	4814      	ldr	r0, [pc, #80]	@ (80097e4 <MX_TIM2_Init+0x98>)
 8009794:	f004 f904 	bl	800d9a0 <HAL_TIM_Base_Init>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800979e:	f7ff f8b3 	bl	8008908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80097a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80097a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80097a8:	f107 0310 	add.w	r3, r7, #16
 80097ac:	4619      	mov	r1, r3
 80097ae:	480d      	ldr	r0, [pc, #52]	@ (80097e4 <MX_TIM2_Init+0x98>)
 80097b0:	f005 f87e 	bl	800e8b0 <HAL_TIM_ConfigClockSource>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80097ba:	f7ff f8a5 	bl	8008908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80097be:	2300      	movs	r3, #0
 80097c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80097c6:	1d3b      	adds	r3, r7, #4
 80097c8:	4619      	mov	r1, r3
 80097ca:	4806      	ldr	r0, [pc, #24]	@ (80097e4 <MX_TIM2_Init+0x98>)
 80097cc:	f006 f856 	bl	800f87c <HAL_TIMEx_MasterConfigSynchronization>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d001      	beq.n	80097da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80097d6:	f7ff f897 	bl	8008908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80097da:	bf00      	nop
 80097dc:	3720      	adds	r7, #32
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	20001c60 	.word	0x20001c60

080097e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b08c      	sub	sp, #48	@ 0x30
 80097ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80097ee:	f107 030c 	add.w	r3, r7, #12
 80097f2:	2224      	movs	r2, #36	@ 0x24
 80097f4:	2100      	movs	r1, #0
 80097f6:	4618      	mov	r0, r3
 80097f8:	f008 fe76 	bl	80124e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80097fc:	463b      	mov	r3, r7
 80097fe:	2200      	movs	r2, #0
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	605a      	str	r2, [r3, #4]
 8009804:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009806:	4b21      	ldr	r3, [pc, #132]	@ (800988c <MX_TIM3_Init+0xa4>)
 8009808:	4a21      	ldr	r2, [pc, #132]	@ (8009890 <MX_TIM3_Init+0xa8>)
 800980a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800980c:	4b1f      	ldr	r3, [pc, #124]	@ (800988c <MX_TIM3_Init+0xa4>)
 800980e:	2200      	movs	r2, #0
 8009810:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009812:	4b1e      	ldr	r3, [pc, #120]	@ (800988c <MX_TIM3_Init+0xa4>)
 8009814:	2200      	movs	r2, #0
 8009816:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8009818:	4b1c      	ldr	r3, [pc, #112]	@ (800988c <MX_TIM3_Init+0xa4>)
 800981a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800981e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009820:	4b1a      	ldr	r3, [pc, #104]	@ (800988c <MX_TIM3_Init+0xa4>)
 8009822:	2200      	movs	r2, #0
 8009824:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009826:	4b19      	ldr	r3, [pc, #100]	@ (800988c <MX_TIM3_Init+0xa4>)
 8009828:	2200      	movs	r2, #0
 800982a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800982c:	2303      	movs	r3, #3
 800982e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009830:	2300      	movs	r3, #0
 8009832:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009834:	2301      	movs	r3, #1
 8009836:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009838:	2300      	movs	r3, #0
 800983a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800983c:	2300      	movs	r3, #0
 800983e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009840:	2300      	movs	r3, #0
 8009842:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009844:	2301      	movs	r3, #1
 8009846:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009848:	2300      	movs	r3, #0
 800984a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800984c:	2300      	movs	r3, #0
 800984e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8009850:	f107 030c 	add.w	r3, r7, #12
 8009854:	4619      	mov	r1, r3
 8009856:	480d      	ldr	r0, [pc, #52]	@ (800988c <MX_TIM3_Init+0xa4>)
 8009858:	f004 fc5a 	bl	800e110 <HAL_TIM_Encoder_Init>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8009862:	f7ff f851 	bl	8008908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009866:	2300      	movs	r3, #0
 8009868:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800986a:	2300      	movs	r3, #0
 800986c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800986e:	463b      	mov	r3, r7
 8009870:	4619      	mov	r1, r3
 8009872:	4806      	ldr	r0, [pc, #24]	@ (800988c <MX_TIM3_Init+0xa4>)
 8009874:	f006 f802 	bl	800f87c <HAL_TIMEx_MasterConfigSynchronization>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800987e:	f7ff f843 	bl	8008908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8009882:	bf00      	nop
 8009884:	3730      	adds	r7, #48	@ 0x30
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	20001d2c 	.word	0x20001d2c
 8009890:	40000400 	.word	0x40000400

08009894 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b08c      	sub	sp, #48	@ 0x30
 8009898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800989a:	f107 030c 	add.w	r3, r7, #12
 800989e:	2224      	movs	r2, #36	@ 0x24
 80098a0:	2100      	movs	r1, #0
 80098a2:	4618      	mov	r0, r3
 80098a4:	f008 fe20 	bl	80124e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80098a8:	463b      	mov	r3, r7
 80098aa:	2200      	movs	r2, #0
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	605a      	str	r2, [r3, #4]
 80098b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80098b2:	4b21      	ldr	r3, [pc, #132]	@ (8009938 <MX_TIM4_Init+0xa4>)
 80098b4:	4a21      	ldr	r2, [pc, #132]	@ (800993c <MX_TIM4_Init+0xa8>)
 80098b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80098b8:	4b1f      	ldr	r3, [pc, #124]	@ (8009938 <MX_TIM4_Init+0xa4>)
 80098ba:	2200      	movs	r2, #0
 80098bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80098be:	4b1e      	ldr	r3, [pc, #120]	@ (8009938 <MX_TIM4_Init+0xa4>)
 80098c0:	2200      	movs	r2, #0
 80098c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80098c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009938 <MX_TIM4_Init+0xa4>)
 80098c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80098ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80098cc:	4b1a      	ldr	r3, [pc, #104]	@ (8009938 <MX_TIM4_Init+0xa4>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80098d2:	4b19      	ldr	r3, [pc, #100]	@ (8009938 <MX_TIM4_Init+0xa4>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80098d8:	2303      	movs	r3, #3
 80098da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80098dc:	2300      	movs	r3, #0
 80098de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80098e0:	2301      	movs	r3, #1
 80098e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80098e4:	2300      	movs	r3, #0
 80098e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80098ec:	2300      	movs	r3, #0
 80098ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80098f0:	2301      	movs	r3, #1
 80098f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80098f4:	2300      	movs	r3, #0
 80098f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80098fc:	f107 030c 	add.w	r3, r7, #12
 8009900:	4619      	mov	r1, r3
 8009902:	480d      	ldr	r0, [pc, #52]	@ (8009938 <MX_TIM4_Init+0xa4>)
 8009904:	f004 fc04 	bl	800e110 <HAL_TIM_Encoder_Init>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800990e:	f7fe fffb 	bl	8008908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009912:	2300      	movs	r3, #0
 8009914:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009916:	2300      	movs	r3, #0
 8009918:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800991a:	463b      	mov	r3, r7
 800991c:	4619      	mov	r1, r3
 800991e:	4806      	ldr	r0, [pc, #24]	@ (8009938 <MX_TIM4_Init+0xa4>)
 8009920:	f005 ffac 	bl	800f87c <HAL_TIMEx_MasterConfigSynchronization>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d001      	beq.n	800992e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800992a:	f7fe ffed 	bl	8008908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800992e:	bf00      	nop
 8009930:	3730      	adds	r7, #48	@ 0x30
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	20001df8 	.word	0x20001df8
 800993c:	40000800 	.word	0x40000800

08009940 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08c      	sub	sp, #48	@ 0x30
 8009944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009946:	f107 030c 	add.w	r3, r7, #12
 800994a:	2224      	movs	r2, #36	@ 0x24
 800994c:	2100      	movs	r1, #0
 800994e:	4618      	mov	r0, r3
 8009950:	f008 fdca 	bl	80124e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009954:	463b      	mov	r3, r7
 8009956:	2200      	movs	r2, #0
 8009958:	601a      	str	r2, [r3, #0]
 800995a:	605a      	str	r2, [r3, #4]
 800995c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800995e:	4b21      	ldr	r3, [pc, #132]	@ (80099e4 <MX_TIM5_Init+0xa4>)
 8009960:	4a21      	ldr	r2, [pc, #132]	@ (80099e8 <MX_TIM5_Init+0xa8>)
 8009962:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8009964:	4b1f      	ldr	r3, [pc, #124]	@ (80099e4 <MX_TIM5_Init+0xa4>)
 8009966:	2200      	movs	r2, #0
 8009968:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800996a:	4b1e      	ldr	r3, [pc, #120]	@ (80099e4 <MX_TIM5_Init+0xa4>)
 800996c:	2200      	movs	r2, #0
 800996e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8009970:	4b1c      	ldr	r3, [pc, #112]	@ (80099e4 <MX_TIM5_Init+0xa4>)
 8009972:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009976:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009978:	4b1a      	ldr	r3, [pc, #104]	@ (80099e4 <MX_TIM5_Init+0xa4>)
 800997a:	2200      	movs	r2, #0
 800997c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800997e:	4b19      	ldr	r3, [pc, #100]	@ (80099e4 <MX_TIM5_Init+0xa4>)
 8009980:	2200      	movs	r2, #0
 8009982:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009984:	2303      	movs	r3, #3
 8009986:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009988:	2300      	movs	r3, #0
 800998a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800998c:	2301      	movs	r3, #1
 800998e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009990:	2300      	movs	r3, #0
 8009992:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009994:	2300      	movs	r3, #0
 8009996:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009998:	2300      	movs	r3, #0
 800999a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800999c:	2301      	movs	r3, #1
 800999e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80099a0:	2300      	movs	r3, #0
 80099a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80099a4:	2300      	movs	r3, #0
 80099a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80099a8:	f107 030c 	add.w	r3, r7, #12
 80099ac:	4619      	mov	r1, r3
 80099ae:	480d      	ldr	r0, [pc, #52]	@ (80099e4 <MX_TIM5_Init+0xa4>)
 80099b0:	f004 fbae 	bl	800e110 <HAL_TIM_Encoder_Init>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d001      	beq.n	80099be <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80099ba:	f7fe ffa5 	bl	8008908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80099be:	2300      	movs	r3, #0
 80099c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099c2:	2300      	movs	r3, #0
 80099c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80099c6:	463b      	mov	r3, r7
 80099c8:	4619      	mov	r1, r3
 80099ca:	4806      	ldr	r0, [pc, #24]	@ (80099e4 <MX_TIM5_Init+0xa4>)
 80099cc:	f005 ff56 	bl	800f87c <HAL_TIMEx_MasterConfigSynchronization>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80099d6:	f7fe ff97 	bl	8008908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80099da:	bf00      	nop
 80099dc:	3730      	adds	r7, #48	@ 0x30
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}
 80099e2:	bf00      	nop
 80099e4:	20001ec4 	.word	0x20001ec4
 80099e8:	40000c00 	.word	0x40000c00

080099ec <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b09c      	sub	sp, #112	@ 0x70
 80099f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80099f2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80099f6:	2200      	movs	r2, #0
 80099f8:	601a      	str	r2, [r3, #0]
 80099fa:	605a      	str	r2, [r3, #4]
 80099fc:	609a      	str	r2, [r3, #8]
 80099fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009a04:	2200      	movs	r2, #0
 8009a06:	601a      	str	r2, [r3, #0]
 8009a08:	605a      	str	r2, [r3, #4]
 8009a0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009a0c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]
 8009a14:	605a      	str	r2, [r3, #4]
 8009a16:	609a      	str	r2, [r3, #8]
 8009a18:	60da      	str	r2, [r3, #12]
 8009a1a:	611a      	str	r2, [r3, #16]
 8009a1c:	615a      	str	r2, [r3, #20]
 8009a1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009a20:	1d3b      	adds	r3, r7, #4
 8009a22:	2234      	movs	r2, #52	@ 0x34
 8009a24:	2100      	movs	r1, #0
 8009a26:	4618      	mov	r0, r3
 8009a28:	f008 fd5e 	bl	80124e8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009a2c:	4b4c      	ldr	r3, [pc, #304]	@ (8009b60 <MX_TIM8_Init+0x174>)
 8009a2e:	4a4d      	ldr	r2, [pc, #308]	@ (8009b64 <MX_TIM8_Init+0x178>)
 8009a30:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009a32:	4b4b      	ldr	r3, [pc, #300]	@ (8009b60 <MX_TIM8_Init+0x174>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a38:	4b49      	ldr	r3, [pc, #292]	@ (8009b60 <MX_TIM8_Init+0x174>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8009a3e:	4b48      	ldr	r3, [pc, #288]	@ (8009b60 <MX_TIM8_Init+0x174>)
 8009a40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a44:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8009a46:	4b46      	ldr	r3, [pc, #280]	@ (8009b60 <MX_TIM8_Init+0x174>)
 8009a48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a4c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009a4e:	4b44      	ldr	r3, [pc, #272]	@ (8009b60 <MX_TIM8_Init+0x174>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a54:	4b42      	ldr	r3, [pc, #264]	@ (8009b60 <MX_TIM8_Init+0x174>)
 8009a56:	2200      	movs	r2, #0
 8009a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009a5a:	4841      	ldr	r0, [pc, #260]	@ (8009b60 <MX_TIM8_Init+0x174>)
 8009a5c:	f003 ffa0 	bl	800d9a0 <HAL_TIM_Base_Init>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8009a66:	f7fe ff4f 	bl	8008908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009a6e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009a70:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8009a74:	4619      	mov	r1, r3
 8009a76:	483a      	ldr	r0, [pc, #232]	@ (8009b60 <MX_TIM8_Init+0x174>)
 8009a78:	f004 ff1a 	bl	800e8b0 <HAL_TIM_ConfigClockSource>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d001      	beq.n	8009a86 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009a82:	f7fe ff41 	bl	8008908 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009a86:	4836      	ldr	r0, [pc, #216]	@ (8009b60 <MX_TIM8_Init+0x174>)
 8009a88:	f004 f8d6 	bl	800dc38 <HAL_TIM_PWM_Init>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d001      	beq.n	8009a96 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8009a92:	f7fe ff39 	bl	8008908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a96:	2300      	movs	r3, #0
 8009a98:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009aa2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	482d      	ldr	r0, [pc, #180]	@ (8009b60 <MX_TIM8_Init+0x174>)
 8009aaa:	f005 fee7 	bl	800f87c <HAL_TIMEx_MasterConfigSynchronization>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d001      	beq.n	8009ab8 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8009ab4:	f7fe ff28 	bl	8008908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009ab8:	2360      	movs	r3, #96	@ 0x60
 8009aba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8009abc:	2300      	movs	r3, #0
 8009abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009acc:	2300      	movs	r3, #0
 8009ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009ad4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009ad8:	2200      	movs	r2, #0
 8009ada:	4619      	mov	r1, r3
 8009adc:	4820      	ldr	r0, [pc, #128]	@ (8009b60 <MX_TIM8_Init+0x174>)
 8009ade:	f004 fdd3 	bl	800e688 <HAL_TIM_PWM_ConfigChannel>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d001      	beq.n	8009aec <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8009ae8:	f7fe ff0e 	bl	8008908 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009aec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009af0:	2204      	movs	r2, #4
 8009af2:	4619      	mov	r1, r3
 8009af4:	481a      	ldr	r0, [pc, #104]	@ (8009b60 <MX_TIM8_Init+0x174>)
 8009af6:	f004 fdc7 	bl	800e688 <HAL_TIM_PWM_ConfigChannel>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d001      	beq.n	8009b04 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8009b00:	f7fe ff02 	bl	8008908 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009b04:	2300      	movs	r3, #0
 8009b06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009b10:	2300      	movs	r3, #0
 8009b12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009b14:	2300      	movs	r3, #0
 8009b16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009b18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009b1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8009b22:	2300      	movs	r3, #0
 8009b24:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009b26:	2300      	movs	r3, #0
 8009b28:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009b2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009b30:	2300      	movs	r3, #0
 8009b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009b34:	2300      	movs	r3, #0
 8009b36:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009b3c:	1d3b      	adds	r3, r7, #4
 8009b3e:	4619      	mov	r1, r3
 8009b40:	4807      	ldr	r0, [pc, #28]	@ (8009b60 <MX_TIM8_Init+0x174>)
 8009b42:	f005 ff31 	bl	800f9a8 <HAL_TIMEx_ConfigBreakDeadTime>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8009b4c:	f7fe fedc 	bl	8008908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8009b50:	4803      	ldr	r0, [pc, #12]	@ (8009b60 <MX_TIM8_Init+0x174>)
 8009b52:	f000 f969 	bl	8009e28 <HAL_TIM_MspPostInit>

}
 8009b56:	bf00      	nop
 8009b58:	3770      	adds	r7, #112	@ 0x70
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	20001f90 	.word	0x20001f90
 8009b64:	40013400 	.word	0x40013400

08009b68 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8009b6c:	4b14      	ldr	r3, [pc, #80]	@ (8009bc0 <MX_TIM16_Init+0x58>)
 8009b6e:	4a15      	ldr	r2, [pc, #84]	@ (8009bc4 <MX_TIM16_Init+0x5c>)
 8009b70:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8009b72:	4b13      	ldr	r3, [pc, #76]	@ (8009bc0 <MX_TIM16_Init+0x58>)
 8009b74:	22a9      	movs	r2, #169	@ 0xa9
 8009b76:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b78:	4b11      	ldr	r3, [pc, #68]	@ (8009bc0 <MX_TIM16_Init+0x58>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8009b7e:	4b10      	ldr	r3, [pc, #64]	@ (8009bc0 <MX_TIM16_Init+0x58>)
 8009b80:	f240 4279 	movw	r2, #1145	@ 0x479
 8009b84:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b86:	4b0e      	ldr	r3, [pc, #56]	@ (8009bc0 <MX_TIM16_Init+0x58>)
 8009b88:	2200      	movs	r2, #0
 8009b8a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8009b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8009bc0 <MX_TIM16_Init+0x58>)
 8009b8e:	2200      	movs	r2, #0
 8009b90:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b92:	4b0b      	ldr	r3, [pc, #44]	@ (8009bc0 <MX_TIM16_Init+0x58>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8009b98:	4809      	ldr	r0, [pc, #36]	@ (8009bc0 <MX_TIM16_Init+0x58>)
 8009b9a:	f003 ff01 	bl	800d9a0 <HAL_TIM_Base_Init>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d001      	beq.n	8009ba8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8009ba4:	f7fe feb0 	bl	8008908 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8009ba8:	2108      	movs	r1, #8
 8009baa:	4805      	ldr	r0, [pc, #20]	@ (8009bc0 <MX_TIM16_Init+0x58>)
 8009bac:	f004 f9ba 	bl	800df24 <HAL_TIM_OnePulse_Init>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8009bb6:	f7fe fea7 	bl	8008908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8009bba:	bf00      	nop
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	2000205c 	.word	0x2000205c
 8009bc4:	40014400 	.word	0x40014400

08009bc8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8009c0c <HAL_TIM_PWM_MspInit+0x44>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d113      	bne.n	8009c02 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009bda:	4b0d      	ldr	r3, [pc, #52]	@ (8009c10 <HAL_TIM_PWM_MspInit+0x48>)
 8009bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bde:	4a0c      	ldr	r2, [pc, #48]	@ (8009c10 <HAL_TIM_PWM_MspInit+0x48>)
 8009be0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009be4:	6613      	str	r3, [r2, #96]	@ 0x60
 8009be6:	4b0a      	ldr	r3, [pc, #40]	@ (8009c10 <HAL_TIM_PWM_MspInit+0x48>)
 8009be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bee:	60fb      	str	r3, [r7, #12]
 8009bf0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	2019      	movs	r0, #25
 8009bf8:	f002 f957 	bl	800beaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009bfc:	2019      	movs	r0, #25
 8009bfe:	f002 f96e 	bl	800bede <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8009c02:	bf00      	nop
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	40012c00 	.word	0x40012c00
 8009c10:	40021000 	.word	0x40021000

08009c14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c24:	d114      	bne.n	8009c50 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009c26:	4b22      	ldr	r3, [pc, #136]	@ (8009cb0 <HAL_TIM_Base_MspInit+0x9c>)
 8009c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c2a:	4a21      	ldr	r2, [pc, #132]	@ (8009cb0 <HAL_TIM_Base_MspInit+0x9c>)
 8009c2c:	f043 0301 	orr.w	r3, r3, #1
 8009c30:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c32:	4b1f      	ldr	r3, [pc, #124]	@ (8009cb0 <HAL_TIM_Base_MspInit+0x9c>)
 8009c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c36:	f003 0301 	and.w	r3, r3, #1
 8009c3a:	617b      	str	r3, [r7, #20]
 8009c3c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8009c3e:	2200      	movs	r2, #0
 8009c40:	2100      	movs	r1, #0
 8009c42:	201c      	movs	r0, #28
 8009c44:	f002 f931 	bl	800beaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009c48:	201c      	movs	r0, #28
 8009c4a:	f002 f948 	bl	800bede <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8009c4e:	e02a      	b.n	8009ca6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a17      	ldr	r2, [pc, #92]	@ (8009cb4 <HAL_TIM_Base_MspInit+0xa0>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d10c      	bne.n	8009c74 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009c5a:	4b15      	ldr	r3, [pc, #84]	@ (8009cb0 <HAL_TIM_Base_MspInit+0x9c>)
 8009c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c5e:	4a14      	ldr	r2, [pc, #80]	@ (8009cb0 <HAL_TIM_Base_MspInit+0x9c>)
 8009c60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009c64:	6613      	str	r3, [r2, #96]	@ 0x60
 8009c66:	4b12      	ldr	r3, [pc, #72]	@ (8009cb0 <HAL_TIM_Base_MspInit+0x9c>)
 8009c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c6e:	613b      	str	r3, [r7, #16]
 8009c70:	693b      	ldr	r3, [r7, #16]
}
 8009c72:	e018      	b.n	8009ca6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a0f      	ldr	r2, [pc, #60]	@ (8009cb8 <HAL_TIM_Base_MspInit+0xa4>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d113      	bne.n	8009ca6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8009cb0 <HAL_TIM_Base_MspInit+0x9c>)
 8009c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c82:	4a0b      	ldr	r2, [pc, #44]	@ (8009cb0 <HAL_TIM_Base_MspInit+0x9c>)
 8009c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009c88:	6613      	str	r3, [r2, #96]	@ 0x60
 8009c8a:	4b09      	ldr	r3, [pc, #36]	@ (8009cb0 <HAL_TIM_Base_MspInit+0x9c>)
 8009c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8009c96:	2200      	movs	r2, #0
 8009c98:	2100      	movs	r1, #0
 8009c9a:	2019      	movs	r0, #25
 8009c9c:	f002 f905 	bl	800beaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009ca0:	2019      	movs	r0, #25
 8009ca2:	f002 f91c 	bl	800bede <HAL_NVIC_EnableIRQ>
}
 8009ca6:	bf00      	nop
 8009ca8:	3718      	adds	r7, #24
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	40021000 	.word	0x40021000
 8009cb4:	40013400 	.word	0x40013400
 8009cb8:	40014400 	.word	0x40014400

08009cbc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b08e      	sub	sp, #56	@ 0x38
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009cc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	605a      	str	r2, [r3, #4]
 8009cce:	609a      	str	r2, [r3, #8]
 8009cd0:	60da      	str	r2, [r3, #12]
 8009cd2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a4f      	ldr	r2, [pc, #316]	@ (8009e18 <HAL_TIM_Encoder_MspInit+0x15c>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d131      	bne.n	8009d42 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009cde:	4b4f      	ldr	r3, [pc, #316]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ce2:	4a4e      	ldr	r2, [pc, #312]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009ce4:	f043 0302 	orr.w	r3, r3, #2
 8009ce8:	6593      	str	r3, [r2, #88]	@ 0x58
 8009cea:	4b4c      	ldr	r3, [pc, #304]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cee:	f003 0302 	and.w	r3, r3, #2
 8009cf2:	623b      	str	r3, [r7, #32]
 8009cf4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cf6:	4b49      	ldr	r3, [pc, #292]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cfa:	4a48      	ldr	r2, [pc, #288]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009cfc:	f043 0301 	orr.w	r3, r3, #1
 8009d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009d02:	4b46      	ldr	r3, [pc, #280]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d06:	f003 0301 	and.w	r3, r3, #1
 8009d0a:	61fb      	str	r3, [r7, #28]
 8009d0c:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009d0e:	23c0      	movs	r3, #192	@ 0xc0
 8009d10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d12:	2302      	movs	r3, #2
 8009d14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d16:	2300      	movs	r3, #0
 8009d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009d1e:	2302      	movs	r3, #2
 8009d20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d26:	4619      	mov	r1, r3
 8009d28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009d2c:	f002 fc24 	bl	800c578 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8009d30:	2200      	movs	r2, #0
 8009d32:	2100      	movs	r1, #0
 8009d34:	201d      	movs	r0, #29
 8009d36:	f002 f8b8 	bl	800beaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8009d3a:	201d      	movs	r0, #29
 8009d3c:	f002 f8cf 	bl	800bede <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8009d40:	e065      	b.n	8009e0e <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4a36      	ldr	r2, [pc, #216]	@ (8009e20 <HAL_TIM_Encoder_MspInit+0x164>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d132      	bne.n	8009db2 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009d4c:	4b33      	ldr	r3, [pc, #204]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d50:	4a32      	ldr	r2, [pc, #200]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009d52:	f043 0304 	orr.w	r3, r3, #4
 8009d56:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d58:	4b30      	ldr	r3, [pc, #192]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d5c:	f003 0304 	and.w	r3, r3, #4
 8009d60:	61bb      	str	r3, [r7, #24]
 8009d62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d64:	4b2d      	ldr	r3, [pc, #180]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d68:	4a2c      	ldr	r2, [pc, #176]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009d6a:	f043 0301 	orr.w	r3, r3, #1
 8009d6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009d70:	4b2a      	ldr	r3, [pc, #168]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d74:	f003 0301 	and.w	r3, r3, #1
 8009d78:	617b      	str	r3, [r7, #20]
 8009d7a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009d7c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009d80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d82:	2302      	movs	r3, #2
 8009d84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d86:	2300      	movs	r3, #0
 8009d88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8009d8e:	230a      	movs	r3, #10
 8009d90:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d96:	4619      	mov	r1, r3
 8009d98:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009d9c:	f002 fbec 	bl	800c578 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8009da0:	2200      	movs	r2, #0
 8009da2:	2100      	movs	r1, #0
 8009da4:	201e      	movs	r0, #30
 8009da6:	f002 f880 	bl	800beaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8009daa:	201e      	movs	r0, #30
 8009dac:	f002 f897 	bl	800bede <HAL_NVIC_EnableIRQ>
}
 8009db0:	e02d      	b.n	8009e0e <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a1b      	ldr	r2, [pc, #108]	@ (8009e24 <HAL_TIM_Encoder_MspInit+0x168>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d128      	bne.n	8009e0e <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009dbc:	4b17      	ldr	r3, [pc, #92]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dc0:	4a16      	ldr	r2, [pc, #88]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009dc2:	f043 0308 	orr.w	r3, r3, #8
 8009dc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8009dc8:	4b14      	ldr	r3, [pc, #80]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dcc:	f003 0308 	and.w	r3, r3, #8
 8009dd0:	613b      	str	r3, [r7, #16]
 8009dd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dd4:	4b11      	ldr	r3, [pc, #68]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dd8:	4a10      	ldr	r2, [pc, #64]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009dda:	f043 0301 	orr.w	r3, r3, #1
 8009dde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009de0:	4b0e      	ldr	r3, [pc, #56]	@ (8009e1c <HAL_TIM_Encoder_MspInit+0x160>)
 8009de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009de4:	f003 0301 	and.w	r3, r3, #1
 8009de8:	60fb      	str	r3, [r7, #12]
 8009dea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009dec:	2303      	movs	r3, #3
 8009dee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009df0:	2302      	movs	r3, #2
 8009df2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009df4:	2300      	movs	r3, #0
 8009df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8009dfc:	2302      	movs	r3, #2
 8009dfe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e04:	4619      	mov	r1, r3
 8009e06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009e0a:	f002 fbb5 	bl	800c578 <HAL_GPIO_Init>
}
 8009e0e:	bf00      	nop
 8009e10:	3738      	adds	r7, #56	@ 0x38
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	bf00      	nop
 8009e18:	40000400 	.word	0x40000400
 8009e1c:	40021000 	.word	0x40021000
 8009e20:	40000800 	.word	0x40000800
 8009e24:	40000c00 	.word	0x40000c00

08009e28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b08a      	sub	sp, #40	@ 0x28
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e30:	f107 0314 	add.w	r3, r7, #20
 8009e34:	2200      	movs	r2, #0
 8009e36:	601a      	str	r2, [r3, #0]
 8009e38:	605a      	str	r2, [r3, #4]
 8009e3a:	609a      	str	r2, [r3, #8]
 8009e3c:	60da      	str	r2, [r3, #12]
 8009e3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a22      	ldr	r2, [pc, #136]	@ (8009ed0 <HAL_TIM_MspPostInit+0xa8>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d11c      	bne.n	8009e84 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e4a:	4b22      	ldr	r3, [pc, #136]	@ (8009ed4 <HAL_TIM_MspPostInit+0xac>)
 8009e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e4e:	4a21      	ldr	r2, [pc, #132]	@ (8009ed4 <HAL_TIM_MspPostInit+0xac>)
 8009e50:	f043 0304 	orr.w	r3, r3, #4
 8009e54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009e56:	4b1f      	ldr	r3, [pc, #124]	@ (8009ed4 <HAL_TIM_MspPostInit+0xac>)
 8009e58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e5a:	f003 0304 	and.w	r3, r3, #4
 8009e5e:	613b      	str	r3, [r7, #16]
 8009e60:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009e62:	2308      	movs	r3, #8
 8009e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e66:	2302      	movs	r3, #2
 8009e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8009e72:	2302      	movs	r3, #2
 8009e74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009e76:	f107 0314 	add.w	r3, r7, #20
 8009e7a:	4619      	mov	r1, r3
 8009e7c:	4816      	ldr	r0, [pc, #88]	@ (8009ed8 <HAL_TIM_MspPostInit+0xb0>)
 8009e7e:	f002 fb7b 	bl	800c578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8009e82:	e020      	b.n	8009ec6 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a14      	ldr	r2, [pc, #80]	@ (8009edc <HAL_TIM_MspPostInit+0xb4>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d11b      	bne.n	8009ec6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e8e:	4b11      	ldr	r3, [pc, #68]	@ (8009ed4 <HAL_TIM_MspPostInit+0xac>)
 8009e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e92:	4a10      	ldr	r2, [pc, #64]	@ (8009ed4 <HAL_TIM_MspPostInit+0xac>)
 8009e94:	f043 0304 	orr.w	r3, r3, #4
 8009e98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8009ed4 <HAL_TIM_MspPostInit+0xac>)
 8009e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e9e:	f003 0304 	and.w	r3, r3, #4
 8009ea2:	60fb      	str	r3, [r7, #12]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009ea6:	23c0      	movs	r3, #192	@ 0xc0
 8009ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009eaa:	2302      	movs	r3, #2
 8009eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8009eb6:	2304      	movs	r3, #4
 8009eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009eba:	f107 0314 	add.w	r3, r7, #20
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	4805      	ldr	r0, [pc, #20]	@ (8009ed8 <HAL_TIM_MspPostInit+0xb0>)
 8009ec2:	f002 fb59 	bl	800c578 <HAL_GPIO_Init>
}
 8009ec6:	bf00      	nop
 8009ec8:	3728      	adds	r7, #40	@ 0x28
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	40012c00 	.word	0x40012c00
 8009ed4:	40021000 	.word	0x40021000
 8009ed8:	48000800 	.word	0x48000800
 8009edc:	40013400 	.word	0x40013400

08009ee0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8009ee4:	4b20      	ldr	r3, [pc, #128]	@ (8009f68 <MX_LPUART1_UART_Init+0x88>)
 8009ee6:	4a21      	ldr	r2, [pc, #132]	@ (8009f6c <MX_LPUART1_UART_Init+0x8c>)
 8009ee8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8009eea:	4b1f      	ldr	r3, [pc, #124]	@ (8009f68 <MX_LPUART1_UART_Init+0x88>)
 8009eec:	4a20      	ldr	r2, [pc, #128]	@ (8009f70 <MX_LPUART1_UART_Init+0x90>)
 8009eee:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8009f68 <MX_LPUART1_UART_Init+0x88>)
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8009ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8009f68 <MX_LPUART1_UART_Init+0x88>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8009efc:	4b1a      	ldr	r3, [pc, #104]	@ (8009f68 <MX_LPUART1_UART_Init+0x88>)
 8009efe:	2200      	movs	r2, #0
 8009f00:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8009f02:	4b19      	ldr	r3, [pc, #100]	@ (8009f68 <MX_LPUART1_UART_Init+0x88>)
 8009f04:	220c      	movs	r2, #12
 8009f06:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009f08:	4b17      	ldr	r3, [pc, #92]	@ (8009f68 <MX_LPUART1_UART_Init+0x88>)
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009f0e:	4b16      	ldr	r3, [pc, #88]	@ (8009f68 <MX_LPUART1_UART_Init+0x88>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009f14:	4b14      	ldr	r3, [pc, #80]	@ (8009f68 <MX_LPUART1_UART_Init+0x88>)
 8009f16:	2200      	movs	r2, #0
 8009f18:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009f1a:	4b13      	ldr	r3, [pc, #76]	@ (8009f68 <MX_LPUART1_UART_Init+0x88>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8009f20:	4811      	ldr	r0, [pc, #68]	@ (8009f68 <MX_LPUART1_UART_Init+0x88>)
 8009f22:	f005 fe25 	bl	800fb70 <HAL_UART_Init>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d001      	beq.n	8009f30 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8009f2c:	f7fe fcec 	bl	8008908 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009f30:	2100      	movs	r1, #0
 8009f32:	480d      	ldr	r0, [pc, #52]	@ (8009f68 <MX_LPUART1_UART_Init+0x88>)
 8009f34:	f007 fc61 	bl	80117fa <HAL_UARTEx_SetTxFifoThreshold>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8009f3e:	f7fe fce3 	bl	8008908 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009f42:	2100      	movs	r1, #0
 8009f44:	4808      	ldr	r0, [pc, #32]	@ (8009f68 <MX_LPUART1_UART_Init+0x88>)
 8009f46:	f007 fc96 	bl	8011876 <HAL_UARTEx_SetRxFifoThreshold>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d001      	beq.n	8009f54 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8009f50:	f7fe fcda 	bl	8008908 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8009f54:	4804      	ldr	r0, [pc, #16]	@ (8009f68 <MX_LPUART1_UART_Init+0x88>)
 8009f56:	f007 fc17 	bl	8011788 <HAL_UARTEx_DisableFifoMode>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d001      	beq.n	8009f64 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8009f60:	f7fe fcd2 	bl	8008908 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8009f64:	bf00      	nop
 8009f66:	bd80      	pop	{r7, pc}
 8009f68:	20002128 	.word	0x20002128
 8009f6c:	40008000 	.word	0x40008000
 8009f70:	001e8480 	.word	0x001e8480

08009f74 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009f78:	4b23      	ldr	r3, [pc, #140]	@ (800a008 <MX_USART2_UART_Init+0x94>)
 8009f7a:	4a24      	ldr	r2, [pc, #144]	@ (800a00c <MX_USART2_UART_Init+0x98>)
 8009f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009f7e:	4b22      	ldr	r3, [pc, #136]	@ (800a008 <MX_USART2_UART_Init+0x94>)
 8009f80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8009f86:	4b20      	ldr	r3, [pc, #128]	@ (800a008 <MX_USART2_UART_Init+0x94>)
 8009f88:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009f8c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009f8e:	4b1e      	ldr	r3, [pc, #120]	@ (800a008 <MX_USART2_UART_Init+0x94>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8009f94:	4b1c      	ldr	r3, [pc, #112]	@ (800a008 <MX_USART2_UART_Init+0x94>)
 8009f96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009f9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009f9c:	4b1a      	ldr	r3, [pc, #104]	@ (800a008 <MX_USART2_UART_Init+0x94>)
 8009f9e:	220c      	movs	r2, #12
 8009fa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009fa2:	4b19      	ldr	r3, [pc, #100]	@ (800a008 <MX_USART2_UART_Init+0x94>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009fa8:	4b17      	ldr	r3, [pc, #92]	@ (800a008 <MX_USART2_UART_Init+0x94>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009fae:	4b16      	ldr	r3, [pc, #88]	@ (800a008 <MX_USART2_UART_Init+0x94>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009fb4:	4b14      	ldr	r3, [pc, #80]	@ (800a008 <MX_USART2_UART_Init+0x94>)
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009fba:	4b13      	ldr	r3, [pc, #76]	@ (800a008 <MX_USART2_UART_Init+0x94>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009fc0:	4811      	ldr	r0, [pc, #68]	@ (800a008 <MX_USART2_UART_Init+0x94>)
 8009fc2:	f005 fdd5 	bl	800fb70 <HAL_UART_Init>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8009fcc:	f7fe fc9c 	bl	8008908 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	480d      	ldr	r0, [pc, #52]	@ (800a008 <MX_USART2_UART_Init+0x94>)
 8009fd4:	f007 fc11 	bl	80117fa <HAL_UARTEx_SetTxFifoThreshold>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d001      	beq.n	8009fe2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8009fde:	f7fe fc93 	bl	8008908 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	4808      	ldr	r0, [pc, #32]	@ (800a008 <MX_USART2_UART_Init+0x94>)
 8009fe6:	f007 fc46 	bl	8011876 <HAL_UARTEx_SetRxFifoThreshold>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8009ff0:	f7fe fc8a 	bl	8008908 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8009ff4:	4804      	ldr	r0, [pc, #16]	@ (800a008 <MX_USART2_UART_Init+0x94>)
 8009ff6:	f007 fbc7 	bl	8011788 <HAL_UARTEx_DisableFifoMode>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d001      	beq.n	800a004 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800a000:	f7fe fc82 	bl	8008908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a004:	bf00      	nop
 800a006:	bd80      	pop	{r7, pc}
 800a008:	200021f4 	.word	0x200021f4
 800a00c:	40004400 	.word	0x40004400

0800a010 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b0a0      	sub	sp, #128	@ 0x80
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a018:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a01c:	2200      	movs	r2, #0
 800a01e:	601a      	str	r2, [r3, #0]
 800a020:	605a      	str	r2, [r3, #4]
 800a022:	609a      	str	r2, [r3, #8]
 800a024:	60da      	str	r2, [r3, #12]
 800a026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a028:	f107 0318 	add.w	r3, r7, #24
 800a02c:	2254      	movs	r2, #84	@ 0x54
 800a02e:	2100      	movs	r1, #0
 800a030:	4618      	mov	r0, r3
 800a032:	f008 fa59 	bl	80124e8 <memset>
  if(uartHandle->Instance==LPUART1)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a99      	ldr	r2, [pc, #612]	@ (800a2a0 <HAL_UART_MspInit+0x290>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	f040 8093 	bne.w	800a168 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a042:	2320      	movs	r3, #32
 800a044:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800a046:	2300      	movs	r3, #0
 800a048:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a04a:	f107 0318 	add.w	r3, r7, #24
 800a04e:	4618      	mov	r0, r3
 800a050:	f003 fa58 	bl	800d504 <HAL_RCCEx_PeriphCLKConfig>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d001      	beq.n	800a05e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800a05a:	f7fe fc55 	bl	8008908 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a05e:	4b91      	ldr	r3, [pc, #580]	@ (800a2a4 <HAL_UART_MspInit+0x294>)
 800a060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a062:	4a90      	ldr	r2, [pc, #576]	@ (800a2a4 <HAL_UART_MspInit+0x294>)
 800a064:	f043 0301 	orr.w	r3, r3, #1
 800a068:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800a06a:	4b8e      	ldr	r3, [pc, #568]	@ (800a2a4 <HAL_UART_MspInit+0x294>)
 800a06c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	617b      	str	r3, [r7, #20]
 800a074:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a076:	4b8b      	ldr	r3, [pc, #556]	@ (800a2a4 <HAL_UART_MspInit+0x294>)
 800a078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a07a:	4a8a      	ldr	r2, [pc, #552]	@ (800a2a4 <HAL_UART_MspInit+0x294>)
 800a07c:	f043 0302 	orr.w	r3, r3, #2
 800a080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a082:	4b88      	ldr	r3, [pc, #544]	@ (800a2a4 <HAL_UART_MspInit+0x294>)
 800a084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a086:	f003 0302 	and.w	r3, r3, #2
 800a08a:	613b      	str	r3, [r7, #16]
 800a08c:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a08e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a092:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a094:	2302      	movs	r3, #2
 800a096:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a098:	2300      	movs	r3, #0
 800a09a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a09c:	2300      	movs	r3, #0
 800a09e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800a0a0:	2308      	movs	r3, #8
 800a0a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	487f      	ldr	r0, [pc, #508]	@ (800a2a8 <HAL_UART_MspInit+0x298>)
 800a0ac:	f002 fa64 	bl	800c578 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 800a0b0:	4b7e      	ldr	r3, [pc, #504]	@ (800a2ac <HAL_UART_MspInit+0x29c>)
 800a0b2:	4a7f      	ldr	r2, [pc, #508]	@ (800a2b0 <HAL_UART_MspInit+0x2a0>)
 800a0b4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800a0b6:	4b7d      	ldr	r3, [pc, #500]	@ (800a2ac <HAL_UART_MspInit+0x29c>)
 800a0b8:	2222      	movs	r2, #34	@ 0x22
 800a0ba:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a0bc:	4b7b      	ldr	r3, [pc, #492]	@ (800a2ac <HAL_UART_MspInit+0x29c>)
 800a0be:	2200      	movs	r2, #0
 800a0c0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a0c2:	4b7a      	ldr	r3, [pc, #488]	@ (800a2ac <HAL_UART_MspInit+0x29c>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a0c8:	4b78      	ldr	r3, [pc, #480]	@ (800a2ac <HAL_UART_MspInit+0x29c>)
 800a0ca:	2280      	movs	r2, #128	@ 0x80
 800a0cc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a0ce:	4b77      	ldr	r3, [pc, #476]	@ (800a2ac <HAL_UART_MspInit+0x29c>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a0d4:	4b75      	ldr	r3, [pc, #468]	@ (800a2ac <HAL_UART_MspInit+0x29c>)
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800a0da:	4b74      	ldr	r3, [pc, #464]	@ (800a2ac <HAL_UART_MspInit+0x29c>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a0e0:	4b72      	ldr	r3, [pc, #456]	@ (800a2ac <HAL_UART_MspInit+0x29c>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800a0e6:	4871      	ldr	r0, [pc, #452]	@ (800a2ac <HAL_UART_MspInit+0x29c>)
 800a0e8:	f001 ff14 	bl	800bf14 <HAL_DMA_Init>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d001      	beq.n	800a0f6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800a0f2:	f7fe fc09 	bl	8008908 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	4a6c      	ldr	r2, [pc, #432]	@ (800a2ac <HAL_UART_MspInit+0x29c>)
 800a0fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800a0fe:	4a6b      	ldr	r2, [pc, #428]	@ (800a2ac <HAL_UART_MspInit+0x29c>)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 800a104:	4b6b      	ldr	r3, [pc, #428]	@ (800a2b4 <HAL_UART_MspInit+0x2a4>)
 800a106:	4a6c      	ldr	r2, [pc, #432]	@ (800a2b8 <HAL_UART_MspInit+0x2a8>)
 800a108:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800a10a:	4b6a      	ldr	r3, [pc, #424]	@ (800a2b4 <HAL_UART_MspInit+0x2a4>)
 800a10c:	2223      	movs	r2, #35	@ 0x23
 800a10e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a110:	4b68      	ldr	r3, [pc, #416]	@ (800a2b4 <HAL_UART_MspInit+0x2a4>)
 800a112:	2210      	movs	r2, #16
 800a114:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a116:	4b67      	ldr	r3, [pc, #412]	@ (800a2b4 <HAL_UART_MspInit+0x2a4>)
 800a118:	2200      	movs	r2, #0
 800a11a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a11c:	4b65      	ldr	r3, [pc, #404]	@ (800a2b4 <HAL_UART_MspInit+0x2a4>)
 800a11e:	2280      	movs	r2, #128	@ 0x80
 800a120:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a122:	4b64      	ldr	r3, [pc, #400]	@ (800a2b4 <HAL_UART_MspInit+0x2a4>)
 800a124:	2200      	movs	r2, #0
 800a126:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a128:	4b62      	ldr	r3, [pc, #392]	@ (800a2b4 <HAL_UART_MspInit+0x2a4>)
 800a12a:	2200      	movs	r2, #0
 800a12c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800a12e:	4b61      	ldr	r3, [pc, #388]	@ (800a2b4 <HAL_UART_MspInit+0x2a4>)
 800a130:	2200      	movs	r2, #0
 800a132:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a134:	4b5f      	ldr	r3, [pc, #380]	@ (800a2b4 <HAL_UART_MspInit+0x2a4>)
 800a136:	2200      	movs	r2, #0
 800a138:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800a13a:	485e      	ldr	r0, [pc, #376]	@ (800a2b4 <HAL_UART_MspInit+0x2a4>)
 800a13c:	f001 feea 	bl	800bf14 <HAL_DMA_Init>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800a146:	f7fe fbdf 	bl	8008908 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a59      	ldr	r2, [pc, #356]	@ (800a2b4 <HAL_UART_MspInit+0x2a4>)
 800a14e:	67da      	str	r2, [r3, #124]	@ 0x7c
 800a150:	4a58      	ldr	r2, [pc, #352]	@ (800a2b4 <HAL_UART_MspInit+0x2a4>)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800a156:	2200      	movs	r2, #0
 800a158:	2100      	movs	r1, #0
 800a15a:	205b      	movs	r0, #91	@ 0x5b
 800a15c:	f001 fea5 	bl	800beaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800a160:	205b      	movs	r0, #91	@ 0x5b
 800a162:	f001 febc 	bl	800bede <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a166:	e097      	b.n	800a298 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a53      	ldr	r2, [pc, #332]	@ (800a2bc <HAL_UART_MspInit+0x2ac>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	f040 8092 	bne.w	800a298 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a174:	2302      	movs	r3, #2
 800a176:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a178:	2300      	movs	r3, #0
 800a17a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a17c:	f107 0318 	add.w	r3, r7, #24
 800a180:	4618      	mov	r0, r3
 800a182:	f003 f9bf 	bl	800d504 <HAL_RCCEx_PeriphCLKConfig>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <HAL_UART_MspInit+0x180>
      Error_Handler();
 800a18c:	f7fe fbbc 	bl	8008908 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a190:	4b44      	ldr	r3, [pc, #272]	@ (800a2a4 <HAL_UART_MspInit+0x294>)
 800a192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a194:	4a43      	ldr	r2, [pc, #268]	@ (800a2a4 <HAL_UART_MspInit+0x294>)
 800a196:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a19a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a19c:	4b41      	ldr	r3, [pc, #260]	@ (800a2a4 <HAL_UART_MspInit+0x294>)
 800a19e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1a4:	60fb      	str	r3, [r7, #12]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1a8:	4b3e      	ldr	r3, [pc, #248]	@ (800a2a4 <HAL_UART_MspInit+0x294>)
 800a1aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1ac:	4a3d      	ldr	r2, [pc, #244]	@ (800a2a4 <HAL_UART_MspInit+0x294>)
 800a1ae:	f043 0301 	orr.w	r3, r3, #1
 800a1b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a1b4:	4b3b      	ldr	r3, [pc, #236]	@ (800a2a4 <HAL_UART_MspInit+0x294>)
 800a1b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1b8:	f003 0301 	and.w	r3, r3, #1
 800a1bc:	60bb      	str	r3, [r7, #8]
 800a1be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a1c0:	230c      	movs	r3, #12
 800a1c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a1d0:	2307      	movs	r3, #7
 800a1d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1d4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a1d8:	4619      	mov	r1, r3
 800a1da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a1de:	f002 f9cb 	bl	800c578 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800a1e2:	4b37      	ldr	r3, [pc, #220]	@ (800a2c0 <HAL_UART_MspInit+0x2b0>)
 800a1e4:	4a37      	ldr	r2, [pc, #220]	@ (800a2c4 <HAL_UART_MspInit+0x2b4>)
 800a1e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800a1e8:	4b35      	ldr	r3, [pc, #212]	@ (800a2c0 <HAL_UART_MspInit+0x2b0>)
 800a1ea:	221a      	movs	r2, #26
 800a1ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a1ee:	4b34      	ldr	r3, [pc, #208]	@ (800a2c0 <HAL_UART_MspInit+0x2b0>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a1f4:	4b32      	ldr	r3, [pc, #200]	@ (800a2c0 <HAL_UART_MspInit+0x2b0>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a1fa:	4b31      	ldr	r3, [pc, #196]	@ (800a2c0 <HAL_UART_MspInit+0x2b0>)
 800a1fc:	2280      	movs	r2, #128	@ 0x80
 800a1fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a200:	4b2f      	ldr	r3, [pc, #188]	@ (800a2c0 <HAL_UART_MspInit+0x2b0>)
 800a202:	2200      	movs	r2, #0
 800a204:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a206:	4b2e      	ldr	r3, [pc, #184]	@ (800a2c0 <HAL_UART_MspInit+0x2b0>)
 800a208:	2200      	movs	r2, #0
 800a20a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800a20c:	4b2c      	ldr	r3, [pc, #176]	@ (800a2c0 <HAL_UART_MspInit+0x2b0>)
 800a20e:	2200      	movs	r2, #0
 800a210:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a212:	4b2b      	ldr	r3, [pc, #172]	@ (800a2c0 <HAL_UART_MspInit+0x2b0>)
 800a214:	2200      	movs	r2, #0
 800a216:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800a218:	4829      	ldr	r0, [pc, #164]	@ (800a2c0 <HAL_UART_MspInit+0x2b0>)
 800a21a:	f001 fe7b 	bl	800bf14 <HAL_DMA_Init>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d001      	beq.n	800a228 <HAL_UART_MspInit+0x218>
      Error_Handler();
 800a224:	f7fe fb70 	bl	8008908 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a25      	ldr	r2, [pc, #148]	@ (800a2c0 <HAL_UART_MspInit+0x2b0>)
 800a22c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800a230:	4a23      	ldr	r2, [pc, #140]	@ (800a2c0 <HAL_UART_MspInit+0x2b0>)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800a236:	4b24      	ldr	r3, [pc, #144]	@ (800a2c8 <HAL_UART_MspInit+0x2b8>)
 800a238:	4a24      	ldr	r2, [pc, #144]	@ (800a2cc <HAL_UART_MspInit+0x2bc>)
 800a23a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800a23c:	4b22      	ldr	r3, [pc, #136]	@ (800a2c8 <HAL_UART_MspInit+0x2b8>)
 800a23e:	221b      	movs	r2, #27
 800a240:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a242:	4b21      	ldr	r3, [pc, #132]	@ (800a2c8 <HAL_UART_MspInit+0x2b8>)
 800a244:	2210      	movs	r2, #16
 800a246:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a248:	4b1f      	ldr	r3, [pc, #124]	@ (800a2c8 <HAL_UART_MspInit+0x2b8>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a24e:	4b1e      	ldr	r3, [pc, #120]	@ (800a2c8 <HAL_UART_MspInit+0x2b8>)
 800a250:	2280      	movs	r2, #128	@ 0x80
 800a252:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a254:	4b1c      	ldr	r3, [pc, #112]	@ (800a2c8 <HAL_UART_MspInit+0x2b8>)
 800a256:	2200      	movs	r2, #0
 800a258:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a25a:	4b1b      	ldr	r3, [pc, #108]	@ (800a2c8 <HAL_UART_MspInit+0x2b8>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800a260:	4b19      	ldr	r3, [pc, #100]	@ (800a2c8 <HAL_UART_MspInit+0x2b8>)
 800a262:	2200      	movs	r2, #0
 800a264:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a266:	4b18      	ldr	r3, [pc, #96]	@ (800a2c8 <HAL_UART_MspInit+0x2b8>)
 800a268:	2200      	movs	r2, #0
 800a26a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800a26c:	4816      	ldr	r0, [pc, #88]	@ (800a2c8 <HAL_UART_MspInit+0x2b8>)
 800a26e:	f001 fe51 	bl	800bf14 <HAL_DMA_Init>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d001      	beq.n	800a27c <HAL_UART_MspInit+0x26c>
      Error_Handler();
 800a278:	f7fe fb46 	bl	8008908 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a12      	ldr	r2, [pc, #72]	@ (800a2c8 <HAL_UART_MspInit+0x2b8>)
 800a280:	67da      	str	r2, [r3, #124]	@ 0x7c
 800a282:	4a11      	ldr	r2, [pc, #68]	@ (800a2c8 <HAL_UART_MspInit+0x2b8>)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800a288:	2200      	movs	r2, #0
 800a28a:	2100      	movs	r1, #0
 800a28c:	2026      	movs	r0, #38	@ 0x26
 800a28e:	f001 fe0c 	bl	800beaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a292:	2026      	movs	r0, #38	@ 0x26
 800a294:	f001 fe23 	bl	800bede <HAL_NVIC_EnableIRQ>
}
 800a298:	bf00      	nop
 800a29a:	3780      	adds	r7, #128	@ 0x80
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	40008000 	.word	0x40008000
 800a2a4:	40021000 	.word	0x40021000
 800a2a8:	48000400 	.word	0x48000400
 800a2ac:	200022c0 	.word	0x200022c0
 800a2b0:	40020044 	.word	0x40020044
 800a2b4:	20002320 	.word	0x20002320
 800a2b8:	40020058 	.word	0x40020058
 800a2bc:	40004400 	.word	0x40004400
 800a2c0:	20002380 	.word	0x20002380
 800a2c4:	4002001c 	.word	0x4002001c
 800a2c8:	200023e0 	.word	0x200023e0
 800a2cc:	40020030 	.word	0x40020030

0800a2d0 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 800a2d0:	480d      	ldr	r0, [pc, #52]	@ (800a308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800a2d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/

    bl  SystemInit
 800a2d4:	f7ff f994 	bl	8009600 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a2d8:	480c      	ldr	r0, [pc, #48]	@ (800a30c <LoopForever+0x6>)
  ldr r1, =_edata
 800a2da:	490d      	ldr	r1, [pc, #52]	@ (800a310 <LoopForever+0xa>)
  ldr r2, =_sidata
 800a2dc:	4a0d      	ldr	r2, [pc, #52]	@ (800a314 <LoopForever+0xe>)
  movs r3, #0
 800a2de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800a2e0:	e002      	b.n	800a2e8 <LoopCopyDataInit>

0800a2e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a2e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a2e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a2e6:	3304      	adds	r3, #4

0800a2e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a2e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a2ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a2ec:	d3f9      	bcc.n	800a2e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a2ee:	4a0a      	ldr	r2, [pc, #40]	@ (800a318 <LoopForever+0x12>)
  ldr r4, =_ebss
 800a2f0:	4c0a      	ldr	r4, [pc, #40]	@ (800a31c <LoopForever+0x16>)
  movs r3, #0
 800a2f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a2f4:	e001      	b.n	800a2fa <LoopFillZerobss>

0800a2f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a2f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a2f8:	3204      	adds	r2, #4

0800a2fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a2fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a2fc:	d3fb      	bcc.n	800a2f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a2fe:	f008 f911 	bl	8012524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a302:	f7fb fa1d 	bl	8005740 <main>

0800a306 <LoopForever>:

LoopForever:
    b LoopForever
 800a306:	e7fe      	b.n	800a306 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 800a308:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a30c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a310:	20000394 	.word	0x20000394
  ldr r2, =_sidata
 800a314:	08014a28 	.word	0x08014a28
  ldr r2, =_sbss
 800a318:	20000394 	.word	0x20000394
  ldr r4, =_ebss
 800a31c:	2000258c 	.word	0x2000258c

0800a320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a320:	e7fe      	b.n	800a320 <ADC1_2_IRQHandler>

0800a322 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a322:	b580      	push	{r7, lr}
 800a324:	b082      	sub	sp, #8
 800a326:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a32c:	2003      	movs	r0, #3
 800a32e:	f001 fdb1 	bl	800be94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a332:	2000      	movs	r0, #0
 800a334:	f000 f80e 	bl	800a354 <HAL_InitTick>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d002      	beq.n	800a344 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a33e:	2301      	movs	r3, #1
 800a340:	71fb      	strb	r3, [r7, #7]
 800a342:	e001      	b.n	800a348 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a344:	f7ff f834 	bl	80093b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a348:	79fb      	ldrb	r3, [r7, #7]

}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
	...

0800a354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a35c:	2300      	movs	r3, #0
 800a35e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800a360:	4b16      	ldr	r3, [pc, #88]	@ (800a3bc <HAL_InitTick+0x68>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d022      	beq.n	800a3ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800a368:	4b15      	ldr	r3, [pc, #84]	@ (800a3c0 <HAL_InitTick+0x6c>)
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	4b13      	ldr	r3, [pc, #76]	@ (800a3bc <HAL_InitTick+0x68>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a374:	fbb1 f3f3 	udiv	r3, r1, r3
 800a378:	fbb2 f3f3 	udiv	r3, r2, r3
 800a37c:	4618      	mov	r0, r3
 800a37e:	f001 fdbc 	bl	800befa <HAL_SYSTICK_Config>
 800a382:	4603      	mov	r3, r0
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10f      	bne.n	800a3a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b0f      	cmp	r3, #15
 800a38c:	d809      	bhi.n	800a3a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a38e:	2200      	movs	r2, #0
 800a390:	6879      	ldr	r1, [r7, #4]
 800a392:	f04f 30ff 	mov.w	r0, #4294967295
 800a396:	f001 fd88 	bl	800beaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a39a:	4a0a      	ldr	r2, [pc, #40]	@ (800a3c4 <HAL_InitTick+0x70>)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6013      	str	r3, [r2, #0]
 800a3a0:	e007      	b.n	800a3b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	73fb      	strb	r3, [r7, #15]
 800a3a6:	e004      	b.n	800a3b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	73fb      	strb	r3, [r7, #15]
 800a3ac:	e001      	b.n	800a3b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}
 800a3bc:	20000340 	.word	0x20000340
 800a3c0:	20000338 	.word	0x20000338
 800a3c4:	2000033c 	.word	0x2000033c

0800a3c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a3cc:	4b05      	ldr	r3, [pc, #20]	@ (800a3e4 <HAL_IncTick+0x1c>)
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	4b05      	ldr	r3, [pc, #20]	@ (800a3e8 <HAL_IncTick+0x20>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	4a03      	ldr	r2, [pc, #12]	@ (800a3e4 <HAL_IncTick+0x1c>)
 800a3d8:	6013      	str	r3, [r2, #0]
}
 800a3da:	bf00      	nop
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	20002440 	.word	0x20002440
 800a3e8:	20000340 	.word	0x20000340

0800a3ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	af00      	add	r7, sp, #0
  return uwTick;
 800a3f0:	4b03      	ldr	r3, [pc, #12]	@ (800a400 <HAL_GetTick+0x14>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	20002440 	.word	0x20002440

0800a404 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	431a      	orrs	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	609a      	str	r2, [r3, #8]
}
 800a41e:	bf00      	nop
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr

0800a42a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a42a:	b480      	push	{r7}
 800a42c:	b083      	sub	sp, #12
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
 800a432:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	431a      	orrs	r2, r3
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	609a      	str	r2, [r3, #8]
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800a460:	4618      	mov	r0, r3
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b087      	sub	sp, #28
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
 800a478:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	3360      	adds	r3, #96	@ 0x60
 800a47e:	461a      	mov	r2, r3
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4413      	add	r3, r2
 800a486:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	4b08      	ldr	r3, [pc, #32]	@ (800a4b0 <LL_ADC_SetOffset+0x44>)
 800a48e:	4013      	ands	r3, r2
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	430a      	orrs	r2, r1
 800a49a:	4313      	orrs	r3, r2
 800a49c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800a4a4:	bf00      	nop
 800a4a6:	371c      	adds	r7, #28
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr
 800a4b0:	03fff000 	.word	0x03fff000

0800a4b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	3360      	adds	r3, #96	@ 0x60
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	4413      	add	r3, r2
 800a4ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b087      	sub	sp, #28
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	3360      	adds	r3, #96	@ 0x60
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	4413      	add	r3, r2
 800a4f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	431a      	orrs	r2, r3
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800a50a:	bf00      	nop
 800a50c:	371c      	adds	r7, #28
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800a516:	b480      	push	{r7}
 800a518:	b087      	sub	sp, #28
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	60f8      	str	r0, [r7, #12]
 800a51e:	60b9      	str	r1, [r7, #8]
 800a520:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	3360      	adds	r3, #96	@ 0x60
 800a526:	461a      	mov	r2, r3
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4413      	add	r3, r2
 800a52e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	431a      	orrs	r2, r3
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800a540:	bf00      	nop
 800a542:	371c      	adds	r7, #28
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b087      	sub	sp, #28
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	3360      	adds	r3, #96	@ 0x60
 800a55c:	461a      	mov	r2, r3
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	009b      	lsls	r3, r3, #2
 800a562:	4413      	add	r3, r2
 800a564:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	431a      	orrs	r2, r3
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800a576:	bf00      	nop
 800a578:	371c      	adds	r7, #28
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800a582:	b480      	push	{r7}
 800a584:	b083      	sub	sp, #12
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
 800a58a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	695b      	ldr	r3, [r3, #20]
 800a590:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	431a      	orrs	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	615a      	str	r2, [r3, #20]
}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	68db      	ldr	r3, [r3, #12]
 800a5b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d101      	bne.n	800a5c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e000      	b.n	800a5c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800a5c0:	2300      	movs	r3, #0
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b087      	sub	sp, #28
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	60f8      	str	r0, [r7, #12]
 800a5d6:	60b9      	str	r1, [r7, #8]
 800a5d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	3330      	adds	r3, #48	@ 0x30
 800a5de:	461a      	mov	r2, r3
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	0a1b      	lsrs	r3, r3, #8
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	f003 030c 	and.w	r3, r3, #12
 800a5ea:	4413      	add	r3, r2
 800a5ec:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	f003 031f 	and.w	r3, r3, #31
 800a5f8:	211f      	movs	r1, #31
 800a5fa:	fa01 f303 	lsl.w	r3, r1, r3
 800a5fe:	43db      	mvns	r3, r3
 800a600:	401a      	ands	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	0e9b      	lsrs	r3, r3, #26
 800a606:	f003 011f 	and.w	r1, r3, #31
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	f003 031f 	and.w	r3, r3, #31
 800a610:	fa01 f303 	lsl.w	r3, r1, r3
 800a614:	431a      	orrs	r2, r3
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800a61a:	bf00      	nop
 800a61c:	371c      	adds	r7, #28
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr

0800a626 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a626:	b480      	push	{r7}
 800a628:	b087      	sub	sp, #28
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	60f8      	str	r0, [r7, #12]
 800a62e:	60b9      	str	r1, [r7, #8]
 800a630:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	3314      	adds	r3, #20
 800a636:	461a      	mov	r2, r3
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	0e5b      	lsrs	r3, r3, #25
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	f003 0304 	and.w	r3, r3, #4
 800a642:	4413      	add	r3, r2
 800a644:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	681a      	ldr	r2, [r3, #0]
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	0d1b      	lsrs	r3, r3, #20
 800a64e:	f003 031f 	and.w	r3, r3, #31
 800a652:	2107      	movs	r1, #7
 800a654:	fa01 f303 	lsl.w	r3, r1, r3
 800a658:	43db      	mvns	r3, r3
 800a65a:	401a      	ands	r2, r3
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	0d1b      	lsrs	r3, r3, #20
 800a660:	f003 031f 	and.w	r3, r3, #31
 800a664:	6879      	ldr	r1, [r7, #4]
 800a666:	fa01 f303 	lsl.w	r3, r1, r3
 800a66a:	431a      	orrs	r2, r3
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800a670:	bf00      	nop
 800a672:	371c      	adds	r7, #28
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b085      	sub	sp, #20
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a694:	43db      	mvns	r3, r3
 800a696:	401a      	ands	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f003 0318 	and.w	r3, r3, #24
 800a69e:	4908      	ldr	r1, [pc, #32]	@ (800a6c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 800a6a0:	40d9      	lsrs	r1, r3
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	400b      	ands	r3, r1
 800a6a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800a6b2:	bf00      	nop
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	0007ffff 	.word	0x0007ffff

0800a6c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	f003 031f 	and.w	r3, r3, #31
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800a6f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a6f4:	687a      	ldr	r2, [r7, #4]
 800a6f6:	6093      	str	r3, [r2, #8]
}
 800a6f8:	bf00      	nop
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a714:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a718:	d101      	bne.n	800a71e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a71a:	2301      	movs	r3, #1
 800a71c:	e000      	b.n	800a720 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr

0800a72c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800a73c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a740:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a748:	bf00      	nop
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800a754:	b480      	push	{r7}
 800a756:	b083      	sub	sp, #12
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	689b      	ldr	r3, [r3, #8]
 800a760:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a764:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a768:	d101      	bne.n	800a76e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a76a:	2301      	movs	r3, #1
 800a76c:	e000      	b.n	800a770 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a78c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a790:	f043 0201 	orr.w	r2, r3, #1
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a798:	bf00      	nop
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	689b      	ldr	r3, [r3, #8]
 800a7b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a7b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a7b8:	f043 0202 	orr.w	r2, r3, #2
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	f003 0301 	and.w	r3, r3, #1
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d101      	bne.n	800a7e4 <LL_ADC_IsEnabled+0x18>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e000      	b.n	800a7e6 <LL_ADC_IsEnabled+0x1a>
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr

0800a7f2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800a7f2:	b480      	push	{r7}
 800a7f4:	b083      	sub	sp, #12
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	f003 0302 	and.w	r3, r3, #2
 800a802:	2b02      	cmp	r3, #2
 800a804:	d101      	bne.n	800a80a <LL_ADC_IsDisableOngoing+0x18>
 800a806:	2301      	movs	r3, #1
 800a808:	e000      	b.n	800a80c <LL_ADC_IsDisableOngoing+0x1a>
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a828:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a82c:	f043 0204 	orr.w	r2, r3, #4
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr

0800a840 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	f003 0304 	and.w	r3, r3, #4
 800a850:	2b04      	cmp	r3, #4
 800a852:	d101      	bne.n	800a858 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a854:	2301      	movs	r3, #1
 800a856:	e000      	b.n	800a85a <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	370c      	adds	r7, #12
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr

0800a866 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a866:	b480      	push	{r7}
 800a868:	b083      	sub	sp, #12
 800a86a:	af00      	add	r7, sp, #0
 800a86c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f003 0308 	and.w	r3, r3, #8
 800a876:	2b08      	cmp	r3, #8
 800a878:	d101      	bne.n	800a87e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a87a:	2301      	movs	r3, #1
 800a87c:	e000      	b.n	800a880 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a88c:	b590      	push	{r4, r7, lr}
 800a88e:	b089      	sub	sp, #36	@ 0x24
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a894:	2300      	movs	r3, #0
 800a896:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800a898:	2300      	movs	r3, #0
 800a89a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d101      	bne.n	800a8a6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e1a9      	b.n	800abfa <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	695b      	ldr	r3, [r3, #20]
 800a8aa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d109      	bne.n	800a8c8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7fa fa5d 	bl	8004d74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7ff ff19 	bl	800a704 <LL_ADC_IsDeepPowerDownEnabled>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d004      	beq.n	800a8e2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4618      	mov	r0, r3
 800a8de:	f7ff feff 	bl	800a6e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7ff ff34 	bl	800a754 <LL_ADC_IsInternalRegulatorEnabled>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d115      	bne.n	800a91e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7ff ff18 	bl	800a72c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a8fc:	4b9c      	ldr	r3, [pc, #624]	@ (800ab70 <HAL_ADC_Init+0x2e4>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	099b      	lsrs	r3, r3, #6
 800a902:	4a9c      	ldr	r2, [pc, #624]	@ (800ab74 <HAL_ADC_Init+0x2e8>)
 800a904:	fba2 2303 	umull	r2, r3, r2, r3
 800a908:	099b      	lsrs	r3, r3, #6
 800a90a:	3301      	adds	r3, #1
 800a90c:	005b      	lsls	r3, r3, #1
 800a90e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a910:	e002      	b.n	800a918 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	3b01      	subs	r3, #1
 800a916:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d1f9      	bne.n	800a912 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4618      	mov	r0, r3
 800a924:	f7ff ff16 	bl	800a754 <LL_ADC_IsInternalRegulatorEnabled>
 800a928:	4603      	mov	r3, r0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10d      	bne.n	800a94a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a932:	f043 0210 	orr.w	r2, r3, #16
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a93e:	f043 0201 	orr.w	r2, r3, #1
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff ff76 	bl	800a840 <LL_ADC_REG_IsConversionOngoing>
 800a954:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a95a:	f003 0310 	and.w	r3, r3, #16
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f040 8142 	bne.w	800abe8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	2b00      	cmp	r3, #0
 800a968:	f040 813e 	bne.w	800abe8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a970:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800a974:	f043 0202 	orr.w	r2, r3, #2
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4618      	mov	r0, r3
 800a982:	f7ff ff23 	bl	800a7cc <LL_ADC_IsEnabled>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d141      	bne.n	800aa10 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a994:	d004      	beq.n	800a9a0 <HAL_ADC_Init+0x114>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a77      	ldr	r2, [pc, #476]	@ (800ab78 <HAL_ADC_Init+0x2ec>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	d10f      	bne.n	800a9c0 <HAL_ADC_Init+0x134>
 800a9a0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800a9a4:	f7ff ff12 	bl	800a7cc <LL_ADC_IsEnabled>
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	4873      	ldr	r0, [pc, #460]	@ (800ab78 <HAL_ADC_Init+0x2ec>)
 800a9ac:	f7ff ff0e 	bl	800a7cc <LL_ADC_IsEnabled>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	4323      	orrs	r3, r4
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	bf0c      	ite	eq
 800a9b8:	2301      	moveq	r3, #1
 800a9ba:	2300      	movne	r3, #0
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	e012      	b.n	800a9e6 <HAL_ADC_Init+0x15a>
 800a9c0:	486e      	ldr	r0, [pc, #440]	@ (800ab7c <HAL_ADC_Init+0x2f0>)
 800a9c2:	f7ff ff03 	bl	800a7cc <LL_ADC_IsEnabled>
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	486d      	ldr	r0, [pc, #436]	@ (800ab80 <HAL_ADC_Init+0x2f4>)
 800a9ca:	f7ff feff 	bl	800a7cc <LL_ADC_IsEnabled>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	431c      	orrs	r4, r3
 800a9d2:	486c      	ldr	r0, [pc, #432]	@ (800ab84 <HAL_ADC_Init+0x2f8>)
 800a9d4:	f7ff fefa 	bl	800a7cc <LL_ADC_IsEnabled>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	4323      	orrs	r3, r4
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	bf0c      	ite	eq
 800a9e0:	2301      	moveq	r3, #1
 800a9e2:	2300      	movne	r3, #0
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d012      	beq.n	800aa10 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a9f2:	d004      	beq.n	800a9fe <HAL_ADC_Init+0x172>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a5f      	ldr	r2, [pc, #380]	@ (800ab78 <HAL_ADC_Init+0x2ec>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d101      	bne.n	800aa02 <HAL_ADC_Init+0x176>
 800a9fe:	4a62      	ldr	r2, [pc, #392]	@ (800ab88 <HAL_ADC_Init+0x2fc>)
 800aa00:	e000      	b.n	800aa04 <HAL_ADC_Init+0x178>
 800aa02:	4a62      	ldr	r2, [pc, #392]	@ (800ab8c <HAL_ADC_Init+0x300>)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	685b      	ldr	r3, [r3, #4]
 800aa08:	4619      	mov	r1, r3
 800aa0a:	4610      	mov	r0, r2
 800aa0c:	f7ff fcfa 	bl	800a404 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	7f5b      	ldrb	r3, [r3, #29]
 800aa14:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800aa1a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800aa20:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800aa26:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800aa2e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800aa30:	4313      	orrs	r3, r2
 800aa32:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d106      	bne.n	800aa4c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa42:	3b01      	subs	r3, #1
 800aa44:	045b      	lsls	r3, r3, #17
 800aa46:	69ba      	ldr	r2, [r7, #24]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d009      	beq.n	800aa68 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa58:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa60:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800aa62:	69ba      	ldr	r2, [r7, #24]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	68da      	ldr	r2, [r3, #12]
 800aa6e:	4b48      	ldr	r3, [pc, #288]	@ (800ab90 <HAL_ADC_Init+0x304>)
 800aa70:	4013      	ands	r3, r2
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	6812      	ldr	r2, [r2, #0]
 800aa76:	69b9      	ldr	r1, [r7, #24]
 800aa78:	430b      	orrs	r3, r1
 800aa7a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	691b      	ldr	r3, [r3, #16]
 800aa82:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	430a      	orrs	r2, r1
 800aa90:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7ff fee5 	bl	800a866 <LL_ADC_INJ_IsConversionOngoing>
 800aa9c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d17f      	bne.n	800aba4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d17c      	bne.n	800aba4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800aaae:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800aab6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800aab8:	4313      	orrs	r3, r2
 800aaba:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	68db      	ldr	r3, [r3, #12]
 800aac2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aac6:	f023 0302 	bic.w	r3, r3, #2
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	6812      	ldr	r2, [r2, #0]
 800aace:	69b9      	ldr	r1, [r7, #24]
 800aad0:	430b      	orrs	r3, r1
 800aad2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d017      	beq.n	800ab0c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	691a      	ldr	r2, [r3, #16]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800aaea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aaf4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800aaf8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	6911      	ldr	r1, [r2, #16]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	6812      	ldr	r2, [r2, #0]
 800ab04:	430b      	orrs	r3, r1
 800ab06:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800ab0a:	e013      	b.n	800ab34 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	691a      	ldr	r2, [r3, #16]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ab1a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	6812      	ldr	r2, [r2, #0]
 800ab28:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800ab2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ab30:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d12a      	bne.n	800ab94 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800ab48:	f023 0304 	bic.w	r3, r3, #4
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ab54:	4311      	orrs	r1, r2
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800ab5a:	4311      	orrs	r1, r2
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ab60:	430a      	orrs	r2, r1
 800ab62:	431a      	orrs	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f042 0201 	orr.w	r2, r2, #1
 800ab6c:	611a      	str	r2, [r3, #16]
 800ab6e:	e019      	b.n	800aba4 <HAL_ADC_Init+0x318>
 800ab70:	20000338 	.word	0x20000338
 800ab74:	053e2d63 	.word	0x053e2d63
 800ab78:	50000100 	.word	0x50000100
 800ab7c:	50000400 	.word	0x50000400
 800ab80:	50000500 	.word	0x50000500
 800ab84:	50000600 	.word	0x50000600
 800ab88:	50000300 	.word	0x50000300
 800ab8c:	50000700 	.word	0x50000700
 800ab90:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	691a      	ldr	r2, [r3, #16]
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f022 0201 	bic.w	r2, r2, #1
 800aba2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d10c      	bne.n	800abc6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abb2:	f023 010f 	bic.w	r1, r3, #15
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a1b      	ldr	r3, [r3, #32]
 800abba:	1e5a      	subs	r2, r3, #1
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	430a      	orrs	r2, r1
 800abc2:	631a      	str	r2, [r3, #48]	@ 0x30
 800abc4:	e007      	b.n	800abd6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f022 020f 	bic.w	r2, r2, #15
 800abd4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abda:	f023 0303 	bic.w	r3, r3, #3
 800abde:	f043 0201 	orr.w	r2, r3, #1
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	65da      	str	r2, [r3, #92]	@ 0x5c
 800abe6:	e007      	b.n	800abf8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abec:	f043 0210 	orr.w	r2, r3, #16
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800abf4:	2301      	movs	r3, #1
 800abf6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800abf8:	7ffb      	ldrb	r3, [r7, #31]
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3724      	adds	r7, #36	@ 0x24
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd90      	pop	{r4, r7, pc}
 800ac02:	bf00      	nop

0800ac04 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b086      	sub	sp, #24
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac18:	d004      	beq.n	800ac24 <HAL_ADC_Start_DMA+0x20>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a5a      	ldr	r2, [pc, #360]	@ (800ad88 <HAL_ADC_Start_DMA+0x184>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d101      	bne.n	800ac28 <HAL_ADC_Start_DMA+0x24>
 800ac24:	4b59      	ldr	r3, [pc, #356]	@ (800ad8c <HAL_ADC_Start_DMA+0x188>)
 800ac26:	e000      	b.n	800ac2a <HAL_ADC_Start_DMA+0x26>
 800ac28:	4b59      	ldr	r3, [pc, #356]	@ (800ad90 <HAL_ADC_Start_DMA+0x18c>)
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7ff fd4a 	bl	800a6c4 <LL_ADC_GetMultimode>
 800ac30:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7ff fe02 	bl	800a840 <LL_ADC_REG_IsConversionOngoing>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	f040 809b 	bne.w	800ad7a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d101      	bne.n	800ac52 <HAL_ADC_Start_DMA+0x4e>
 800ac4e:	2302      	movs	r3, #2
 800ac50:	e096      	b.n	800ad80 <HAL_ADC_Start_DMA+0x17c>
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a4d      	ldr	r2, [pc, #308]	@ (800ad94 <HAL_ADC_Start_DMA+0x190>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d008      	beq.n	800ac76 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d005      	beq.n	800ac76 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	2b05      	cmp	r3, #5
 800ac6e:	d002      	beq.n	800ac76 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	2b09      	cmp	r3, #9
 800ac74:	d17a      	bne.n	800ad6c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f000 fcf6 	bl	800b668 <ADC_Enable>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800ac80:	7dfb      	ldrb	r3, [r7, #23]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d16d      	bne.n	800ad62 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac8a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ac8e:	f023 0301 	bic.w	r3, r3, #1
 800ac92:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a3a      	ldr	r2, [pc, #232]	@ (800ad88 <HAL_ADC_Start_DMA+0x184>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d009      	beq.n	800acb8 <HAL_ADC_Start_DMA+0xb4>
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a3b      	ldr	r2, [pc, #236]	@ (800ad98 <HAL_ADC_Start_DMA+0x194>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d002      	beq.n	800acb4 <HAL_ADC_Start_DMA+0xb0>
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	e003      	b.n	800acbc <HAL_ADC_Start_DMA+0xb8>
 800acb4:	4b39      	ldr	r3, [pc, #228]	@ (800ad9c <HAL_ADC_Start_DMA+0x198>)
 800acb6:	e001      	b.n	800acbc <HAL_ADC_Start_DMA+0xb8>
 800acb8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	6812      	ldr	r2, [r2, #0]
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d002      	beq.n	800acca <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800acc4:	693b      	ldr	r3, [r7, #16]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d105      	bne.n	800acd6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acce:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d006      	beq.n	800acf0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ace6:	f023 0206 	bic.w	r2, r3, #6
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	661a      	str	r2, [r3, #96]	@ 0x60
 800acee:	e002      	b.n	800acf6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acfa:	4a29      	ldr	r2, [pc, #164]	@ (800ada0 <HAL_ADC_Start_DMA+0x19c>)
 800acfc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad02:	4a28      	ldr	r2, [pc, #160]	@ (800ada4 <HAL_ADC_Start_DMA+0x1a0>)
 800ad04:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad0a:	4a27      	ldr	r2, [pc, #156]	@ (800ada8 <HAL_ADC_Start_DMA+0x1a4>)
 800ad0c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	221c      	movs	r2, #28
 800ad14:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	685a      	ldr	r2, [r3, #4]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f042 0210 	orr.w	r2, r2, #16
 800ad2c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68da      	ldr	r2, [r3, #12]
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f042 0201 	orr.w	r2, r2, #1
 800ad3c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	3340      	adds	r3, #64	@ 0x40
 800ad48:	4619      	mov	r1, r3
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f001 f989 	bl	800c064 <HAL_DMA_Start_IT>
 800ad52:	4603      	mov	r3, r0
 800ad54:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7ff fd5c 	bl	800a818 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800ad60:	e00d      	b.n	800ad7e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800ad6a:	e008      	b.n	800ad7e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800ad78:	e001      	b.n	800ad7e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800ad7a:	2302      	movs	r3, #2
 800ad7c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800ad7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3718      	adds	r7, #24
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	50000100 	.word	0x50000100
 800ad8c:	50000300 	.word	0x50000300
 800ad90:	50000700 	.word	0x50000700
 800ad94:	50000600 	.word	0x50000600
 800ad98:	50000500 	.word	0x50000500
 800ad9c:	50000400 	.word	0x50000400
 800ada0:	0800b853 	.word	0x0800b853
 800ada4:	0800b92b 	.word	0x0800b92b
 800ada8:	0800b947 	.word	0x0800b947

0800adac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800adb4:	bf00      	nop
 800adb6:	370c      	adds	r7, #12
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800adc8:	bf00      	nop
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800addc:	bf00      	nop
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b0b6      	sub	sp, #216	@ 0xd8
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800adf2:	2300      	movs	r3, #0
 800adf4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800adf8:	2300      	movs	r3, #0
 800adfa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d102      	bne.n	800ae0c <HAL_ADC_ConfigChannel+0x24>
 800ae06:	2302      	movs	r3, #2
 800ae08:	f000 bc13 	b.w	800b632 <HAL_ADC_ConfigChannel+0x84a>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f7ff fd11 	bl	800a840 <LL_ADC_REG_IsConversionOngoing>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	f040 83f3 	bne.w	800b60c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6818      	ldr	r0, [r3, #0]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	6859      	ldr	r1, [r3, #4]
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	f7ff fbcb 	bl	800a5ce <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7ff fcff 	bl	800a840 <LL_ADC_REG_IsConversionOngoing>
 800ae42:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7ff fd0b 	bl	800a866 <LL_ADC_INJ_IsConversionOngoing>
 800ae50:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800ae54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	f040 81d9 	bne.w	800b210 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800ae5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	f040 81d4 	bne.w	800b210 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae70:	d10f      	bne.n	800ae92 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6818      	ldr	r0, [r3, #0]
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	f7ff fbd2 	bl	800a626 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7ff fb79 	bl	800a582 <LL_ADC_SetSamplingTimeCommonConfig>
 800ae90:	e00e      	b.n	800aeb0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6818      	ldr	r0, [r3, #0]
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	6819      	ldr	r1, [r3, #0]
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	f7ff fbc1 	bl	800a626 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2100      	movs	r1, #0
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7ff fb69 	bl	800a582 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	695a      	ldr	r2, [r3, #20]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	08db      	lsrs	r3, r3, #3
 800aebc:	f003 0303 	and.w	r3, r3, #3
 800aec0:	005b      	lsls	r3, r3, #1
 800aec2:	fa02 f303 	lsl.w	r3, r2, r3
 800aec6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	2b04      	cmp	r3, #4
 800aed0:	d022      	beq.n	800af18 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6818      	ldr	r0, [r3, #0]
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	6919      	ldr	r1, [r3, #16]
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	681a      	ldr	r2, [r3, #0]
 800aede:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aee2:	f7ff fac3 	bl	800a46c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	6818      	ldr	r0, [r3, #0]
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	6919      	ldr	r1, [r3, #16]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	461a      	mov	r2, r3
 800aef4:	f7ff fb0f 	bl	800a516 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6818      	ldr	r0, [r3, #0]
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800af04:	2b01      	cmp	r3, #1
 800af06:	d102      	bne.n	800af0e <HAL_ADC_ConfigChannel+0x126>
 800af08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800af0c:	e000      	b.n	800af10 <HAL_ADC_ConfigChannel+0x128>
 800af0e:	2300      	movs	r3, #0
 800af10:	461a      	mov	r2, r3
 800af12:	f7ff fb1b 	bl	800a54c <LL_ADC_SetOffsetSaturation>
 800af16:	e17b      	b.n	800b210 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2100      	movs	r1, #0
 800af1e:	4618      	mov	r0, r3
 800af20:	f7ff fac8 	bl	800a4b4 <LL_ADC_GetOffsetChannel>
 800af24:	4603      	mov	r3, r0
 800af26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d10a      	bne.n	800af44 <HAL_ADC_ConfigChannel+0x15c>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2100      	movs	r1, #0
 800af34:	4618      	mov	r0, r3
 800af36:	f7ff fabd 	bl	800a4b4 <LL_ADC_GetOffsetChannel>
 800af3a:	4603      	mov	r3, r0
 800af3c:	0e9b      	lsrs	r3, r3, #26
 800af3e:	f003 021f 	and.w	r2, r3, #31
 800af42:	e01e      	b.n	800af82 <HAL_ADC_ConfigChannel+0x19a>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2100      	movs	r1, #0
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7ff fab2 	bl	800a4b4 <LL_ADC_GetOffsetChannel>
 800af50:	4603      	mov	r3, r0
 800af52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800af5a:	fa93 f3a3 	rbit	r3, r3
 800af5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800af62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800af66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800af6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800af72:	2320      	movs	r3, #32
 800af74:	e004      	b.n	800af80 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800af76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800af7a:	fab3 f383 	clz	r3, r3
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d105      	bne.n	800af9a <HAL_ADC_ConfigChannel+0x1b2>
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	0e9b      	lsrs	r3, r3, #26
 800af94:	f003 031f 	and.w	r3, r3, #31
 800af98:	e018      	b.n	800afcc <HAL_ADC_ConfigChannel+0x1e4>
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afa2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800afa6:	fa93 f3a3 	rbit	r3, r3
 800afaa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800afae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800afb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800afb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d101      	bne.n	800afc2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800afbe:	2320      	movs	r3, #32
 800afc0:	e004      	b.n	800afcc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800afc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800afc6:	fab3 f383 	clz	r3, r3
 800afca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800afcc:	429a      	cmp	r2, r3
 800afce:	d106      	bne.n	800afde <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2200      	movs	r2, #0
 800afd6:	2100      	movs	r1, #0
 800afd8:	4618      	mov	r0, r3
 800afda:	f7ff fa81 	bl	800a4e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2101      	movs	r1, #1
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7ff fa65 	bl	800a4b4 <LL_ADC_GetOffsetChannel>
 800afea:	4603      	mov	r3, r0
 800afec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10a      	bne.n	800b00a <HAL_ADC_ConfigChannel+0x222>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2101      	movs	r1, #1
 800affa:	4618      	mov	r0, r3
 800affc:	f7ff fa5a 	bl	800a4b4 <LL_ADC_GetOffsetChannel>
 800b000:	4603      	mov	r3, r0
 800b002:	0e9b      	lsrs	r3, r3, #26
 800b004:	f003 021f 	and.w	r2, r3, #31
 800b008:	e01e      	b.n	800b048 <HAL_ADC_ConfigChannel+0x260>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2101      	movs	r1, #1
 800b010:	4618      	mov	r0, r3
 800b012:	f7ff fa4f 	bl	800a4b4 <LL_ADC_GetOffsetChannel>
 800b016:	4603      	mov	r3, r0
 800b018:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b01c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b020:	fa93 f3a3 	rbit	r3, r3
 800b024:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800b028:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b02c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800b030:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800b038:	2320      	movs	r3, #32
 800b03a:	e004      	b.n	800b046 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800b03c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b040:	fab3 f383 	clz	r3, r3
 800b044:	b2db      	uxtb	r3, r3
 800b046:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b050:	2b00      	cmp	r3, #0
 800b052:	d105      	bne.n	800b060 <HAL_ADC_ConfigChannel+0x278>
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	0e9b      	lsrs	r3, r3, #26
 800b05a:	f003 031f 	and.w	r3, r3, #31
 800b05e:	e018      	b.n	800b092 <HAL_ADC_ConfigChannel+0x2aa>
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b068:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b06c:	fa93 f3a3 	rbit	r3, r3
 800b070:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800b074:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b078:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800b07c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b080:	2b00      	cmp	r3, #0
 800b082:	d101      	bne.n	800b088 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800b084:	2320      	movs	r3, #32
 800b086:	e004      	b.n	800b092 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800b088:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b08c:	fab3 f383 	clz	r3, r3
 800b090:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b092:	429a      	cmp	r2, r3
 800b094:	d106      	bne.n	800b0a4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2200      	movs	r2, #0
 800b09c:	2101      	movs	r1, #1
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f7ff fa1e 	bl	800a4e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2102      	movs	r1, #2
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7ff fa02 	bl	800a4b4 <LL_ADC_GetOffsetChannel>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10a      	bne.n	800b0d0 <HAL_ADC_ConfigChannel+0x2e8>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2102      	movs	r1, #2
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7ff f9f7 	bl	800a4b4 <LL_ADC_GetOffsetChannel>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	0e9b      	lsrs	r3, r3, #26
 800b0ca:	f003 021f 	and.w	r2, r3, #31
 800b0ce:	e01e      	b.n	800b10e <HAL_ADC_ConfigChannel+0x326>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2102      	movs	r1, #2
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7ff f9ec 	bl	800a4b4 <LL_ADC_GetOffsetChannel>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b0e6:	fa93 f3a3 	rbit	r3, r3
 800b0ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800b0ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b0f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800b0f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d101      	bne.n	800b102 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800b0fe:	2320      	movs	r3, #32
 800b100:	e004      	b.n	800b10c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800b102:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b106:	fab3 f383 	clz	r3, r3
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b116:	2b00      	cmp	r3, #0
 800b118:	d105      	bne.n	800b126 <HAL_ADC_ConfigChannel+0x33e>
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	0e9b      	lsrs	r3, r3, #26
 800b120:	f003 031f 	and.w	r3, r3, #31
 800b124:	e016      	b.n	800b154 <HAL_ADC_ConfigChannel+0x36c>
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b12e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b132:	fa93 f3a3 	rbit	r3, r3
 800b136:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800b138:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b13a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800b13e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b142:	2b00      	cmp	r3, #0
 800b144:	d101      	bne.n	800b14a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800b146:	2320      	movs	r3, #32
 800b148:	e004      	b.n	800b154 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800b14a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b14e:	fab3 f383 	clz	r3, r3
 800b152:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b154:	429a      	cmp	r2, r3
 800b156:	d106      	bne.n	800b166 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2200      	movs	r2, #0
 800b15e:	2102      	movs	r1, #2
 800b160:	4618      	mov	r0, r3
 800b162:	f7ff f9bd 	bl	800a4e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2103      	movs	r1, #3
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7ff f9a1 	bl	800a4b4 <LL_ADC_GetOffsetChannel>
 800b172:	4603      	mov	r3, r0
 800b174:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d10a      	bne.n	800b192 <HAL_ADC_ConfigChannel+0x3aa>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2103      	movs	r1, #3
 800b182:	4618      	mov	r0, r3
 800b184:	f7ff f996 	bl	800a4b4 <LL_ADC_GetOffsetChannel>
 800b188:	4603      	mov	r3, r0
 800b18a:	0e9b      	lsrs	r3, r3, #26
 800b18c:	f003 021f 	and.w	r2, r3, #31
 800b190:	e017      	b.n	800b1c2 <HAL_ADC_ConfigChannel+0x3da>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2103      	movs	r1, #3
 800b198:	4618      	mov	r0, r3
 800b19a:	f7ff f98b 	bl	800a4b4 <LL_ADC_GetOffsetChannel>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b1a4:	fa93 f3a3 	rbit	r3, r3
 800b1a8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800b1aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b1ac:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800b1ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d101      	bne.n	800b1b8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800b1b4:	2320      	movs	r3, #32
 800b1b6:	e003      	b.n	800b1c0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800b1b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1ba:	fab3 f383 	clz	r3, r3
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d105      	bne.n	800b1da <HAL_ADC_ConfigChannel+0x3f2>
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	0e9b      	lsrs	r3, r3, #26
 800b1d4:	f003 031f 	and.w	r3, r3, #31
 800b1d8:	e011      	b.n	800b1fe <HAL_ADC_ConfigChannel+0x416>
 800b1da:	683b      	ldr	r3, [r7, #0]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b1e2:	fa93 f3a3 	rbit	r3, r3
 800b1e6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800b1e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800b1ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d101      	bne.n	800b1f6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800b1f2:	2320      	movs	r3, #32
 800b1f4:	e003      	b.n	800b1fe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800b1f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1f8:	fab3 f383 	clz	r3, r3
 800b1fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d106      	bne.n	800b210 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2200      	movs	r2, #0
 800b208:	2103      	movs	r1, #3
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7ff f968 	bl	800a4e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4618      	mov	r0, r3
 800b216:	f7ff fad9 	bl	800a7cc <LL_ADC_IsEnabled>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f040 813d 	bne.w	800b49c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6818      	ldr	r0, [r3, #0]
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	6819      	ldr	r1, [r3, #0]
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	461a      	mov	r2, r3
 800b230:	f7ff fa24 	bl	800a67c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	68db      	ldr	r3, [r3, #12]
 800b238:	4aa2      	ldr	r2, [pc, #648]	@ (800b4c4 <HAL_ADC_ConfigChannel+0x6dc>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	f040 812e 	bne.w	800b49c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d10b      	bne.n	800b268 <HAL_ADC_ConfigChannel+0x480>
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	0e9b      	lsrs	r3, r3, #26
 800b256:	3301      	adds	r3, #1
 800b258:	f003 031f 	and.w	r3, r3, #31
 800b25c:	2b09      	cmp	r3, #9
 800b25e:	bf94      	ite	ls
 800b260:	2301      	movls	r3, #1
 800b262:	2300      	movhi	r3, #0
 800b264:	b2db      	uxtb	r3, r3
 800b266:	e019      	b.n	800b29c <HAL_ADC_ConfigChannel+0x4b4>
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b26e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b270:	fa93 f3a3 	rbit	r3, r3
 800b274:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800b276:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b278:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800b27a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d101      	bne.n	800b284 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800b280:	2320      	movs	r3, #32
 800b282:	e003      	b.n	800b28c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800b284:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b286:	fab3 f383 	clz	r3, r3
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	3301      	adds	r3, #1
 800b28e:	f003 031f 	and.w	r3, r3, #31
 800b292:	2b09      	cmp	r3, #9
 800b294:	bf94      	ite	ls
 800b296:	2301      	movls	r3, #1
 800b298:	2300      	movhi	r3, #0
 800b29a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d079      	beq.n	800b394 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d107      	bne.n	800b2bc <HAL_ADC_ConfigChannel+0x4d4>
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	0e9b      	lsrs	r3, r3, #26
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	069b      	lsls	r3, r3, #26
 800b2b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b2ba:	e015      	b.n	800b2e8 <HAL_ADC_ConfigChannel+0x500>
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2c4:	fa93 f3a3 	rbit	r3, r3
 800b2c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800b2ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b2cc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800b2ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d101      	bne.n	800b2d8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800b2d4:	2320      	movs	r3, #32
 800b2d6:	e003      	b.n	800b2e0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800b2d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b2da:	fab3 f383 	clz	r3, r3
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	069b      	lsls	r3, r3, #26
 800b2e4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d109      	bne.n	800b308 <HAL_ADC_ConfigChannel+0x520>
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	0e9b      	lsrs	r3, r3, #26
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	f003 031f 	and.w	r3, r3, #31
 800b300:	2101      	movs	r1, #1
 800b302:	fa01 f303 	lsl.w	r3, r1, r3
 800b306:	e017      	b.n	800b338 <HAL_ADC_ConfigChannel+0x550>
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b30e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b310:	fa93 f3a3 	rbit	r3, r3
 800b314:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800b316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b318:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800b31a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d101      	bne.n	800b324 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800b320:	2320      	movs	r3, #32
 800b322:	e003      	b.n	800b32c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800b324:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b326:	fab3 f383 	clz	r3, r3
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	3301      	adds	r3, #1
 800b32e:	f003 031f 	and.w	r3, r3, #31
 800b332:	2101      	movs	r1, #1
 800b334:	fa01 f303 	lsl.w	r3, r1, r3
 800b338:	ea42 0103 	orr.w	r1, r2, r3
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10a      	bne.n	800b35e <HAL_ADC_ConfigChannel+0x576>
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	0e9b      	lsrs	r3, r3, #26
 800b34e:	3301      	adds	r3, #1
 800b350:	f003 021f 	and.w	r2, r3, #31
 800b354:	4613      	mov	r3, r2
 800b356:	005b      	lsls	r3, r3, #1
 800b358:	4413      	add	r3, r2
 800b35a:	051b      	lsls	r3, r3, #20
 800b35c:	e018      	b.n	800b390 <HAL_ADC_ConfigChannel+0x5a8>
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b366:	fa93 f3a3 	rbit	r3, r3
 800b36a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800b36c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b36e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800b370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b372:	2b00      	cmp	r3, #0
 800b374:	d101      	bne.n	800b37a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800b376:	2320      	movs	r3, #32
 800b378:	e003      	b.n	800b382 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800b37a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b37c:	fab3 f383 	clz	r3, r3
 800b380:	b2db      	uxtb	r3, r3
 800b382:	3301      	adds	r3, #1
 800b384:	f003 021f 	and.w	r2, r3, #31
 800b388:	4613      	mov	r3, r2
 800b38a:	005b      	lsls	r3, r3, #1
 800b38c:	4413      	add	r3, r2
 800b38e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b390:	430b      	orrs	r3, r1
 800b392:	e07e      	b.n	800b492 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d107      	bne.n	800b3b0 <HAL_ADC_ConfigChannel+0x5c8>
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	0e9b      	lsrs	r3, r3, #26
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	069b      	lsls	r3, r3, #26
 800b3aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b3ae:	e015      	b.n	800b3dc <HAL_ADC_ConfigChannel+0x5f4>
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3b8:	fa93 f3a3 	rbit	r3, r3
 800b3bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800b3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d101      	bne.n	800b3cc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800b3c8:	2320      	movs	r3, #32
 800b3ca:	e003      	b.n	800b3d4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ce:	fab3 f383 	clz	r3, r3
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	069b      	lsls	r3, r3, #26
 800b3d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d109      	bne.n	800b3fc <HAL_ADC_ConfigChannel+0x614>
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	0e9b      	lsrs	r3, r3, #26
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	f003 031f 	and.w	r3, r3, #31
 800b3f4:	2101      	movs	r1, #1
 800b3f6:	fa01 f303 	lsl.w	r3, r1, r3
 800b3fa:	e017      	b.n	800b42c <HAL_ADC_ConfigChannel+0x644>
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b402:	6a3b      	ldr	r3, [r7, #32]
 800b404:	fa93 f3a3 	rbit	r3, r3
 800b408:	61fb      	str	r3, [r7, #28]
  return result;
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800b40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b410:	2b00      	cmp	r3, #0
 800b412:	d101      	bne.n	800b418 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800b414:	2320      	movs	r3, #32
 800b416:	e003      	b.n	800b420 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800b418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41a:	fab3 f383 	clz	r3, r3
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	3301      	adds	r3, #1
 800b422:	f003 031f 	and.w	r3, r3, #31
 800b426:	2101      	movs	r1, #1
 800b428:	fa01 f303 	lsl.w	r3, r1, r3
 800b42c:	ea42 0103 	orr.w	r1, r2, r3
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d10d      	bne.n	800b458 <HAL_ADC_ConfigChannel+0x670>
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	0e9b      	lsrs	r3, r3, #26
 800b442:	3301      	adds	r3, #1
 800b444:	f003 021f 	and.w	r2, r3, #31
 800b448:	4613      	mov	r3, r2
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	4413      	add	r3, r2
 800b44e:	3b1e      	subs	r3, #30
 800b450:	051b      	lsls	r3, r3, #20
 800b452:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800b456:	e01b      	b.n	800b490 <HAL_ADC_ConfigChannel+0x6a8>
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	fa93 f3a3 	rbit	r3, r3
 800b464:	613b      	str	r3, [r7, #16]
  return result;
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d101      	bne.n	800b474 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800b470:	2320      	movs	r3, #32
 800b472:	e003      	b.n	800b47c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	fab3 f383 	clz	r3, r3
 800b47a:	b2db      	uxtb	r3, r3
 800b47c:	3301      	adds	r3, #1
 800b47e:	f003 021f 	and.w	r2, r3, #31
 800b482:	4613      	mov	r3, r2
 800b484:	005b      	lsls	r3, r3, #1
 800b486:	4413      	add	r3, r2
 800b488:	3b1e      	subs	r3, #30
 800b48a:	051b      	lsls	r3, r3, #20
 800b48c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b490:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800b492:	683a      	ldr	r2, [r7, #0]
 800b494:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b496:	4619      	mov	r1, r3
 800b498:	f7ff f8c5 	bl	800a626 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	681a      	ldr	r2, [r3, #0]
 800b4a0:	4b09      	ldr	r3, [pc, #36]	@ (800b4c8 <HAL_ADC_ConfigChannel+0x6e0>)
 800b4a2:	4013      	ands	r3, r2
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	f000 80be 	beq.w	800b626 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b4b2:	d004      	beq.n	800b4be <HAL_ADC_ConfigChannel+0x6d6>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a04      	ldr	r2, [pc, #16]	@ (800b4cc <HAL_ADC_ConfigChannel+0x6e4>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d10a      	bne.n	800b4d4 <HAL_ADC_ConfigChannel+0x6ec>
 800b4be:	4b04      	ldr	r3, [pc, #16]	@ (800b4d0 <HAL_ADC_ConfigChannel+0x6e8>)
 800b4c0:	e009      	b.n	800b4d6 <HAL_ADC_ConfigChannel+0x6ee>
 800b4c2:	bf00      	nop
 800b4c4:	407f0000 	.word	0x407f0000
 800b4c8:	80080000 	.word	0x80080000
 800b4cc:	50000100 	.word	0x50000100
 800b4d0:	50000300 	.word	0x50000300
 800b4d4:	4b59      	ldr	r3, [pc, #356]	@ (800b63c <HAL_ADC_ConfigChannel+0x854>)
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7fe ffba 	bl	800a450 <LL_ADC_GetCommonPathInternalCh>
 800b4dc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a56      	ldr	r2, [pc, #344]	@ (800b640 <HAL_ADC_ConfigChannel+0x858>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d004      	beq.n	800b4f4 <HAL_ADC_ConfigChannel+0x70c>
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a55      	ldr	r2, [pc, #340]	@ (800b644 <HAL_ADC_ConfigChannel+0x85c>)
 800b4f0:	4293      	cmp	r3, r2
 800b4f2:	d13a      	bne.n	800b56a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b4f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b4f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d134      	bne.n	800b56a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b508:	d005      	beq.n	800b516 <HAL_ADC_ConfigChannel+0x72e>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4a4e      	ldr	r2, [pc, #312]	@ (800b648 <HAL_ADC_ConfigChannel+0x860>)
 800b510:	4293      	cmp	r3, r2
 800b512:	f040 8085 	bne.w	800b620 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b51e:	d004      	beq.n	800b52a <HAL_ADC_ConfigChannel+0x742>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a49      	ldr	r2, [pc, #292]	@ (800b64c <HAL_ADC_ConfigChannel+0x864>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d101      	bne.n	800b52e <HAL_ADC_ConfigChannel+0x746>
 800b52a:	4a49      	ldr	r2, [pc, #292]	@ (800b650 <HAL_ADC_ConfigChannel+0x868>)
 800b52c:	e000      	b.n	800b530 <HAL_ADC_ConfigChannel+0x748>
 800b52e:	4a43      	ldr	r2, [pc, #268]	@ (800b63c <HAL_ADC_ConfigChannel+0x854>)
 800b530:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b534:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b538:	4619      	mov	r1, r3
 800b53a:	4610      	mov	r0, r2
 800b53c:	f7fe ff75 	bl	800a42a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b540:	4b44      	ldr	r3, [pc, #272]	@ (800b654 <HAL_ADC_ConfigChannel+0x86c>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	099b      	lsrs	r3, r3, #6
 800b546:	4a44      	ldr	r2, [pc, #272]	@ (800b658 <HAL_ADC_ConfigChannel+0x870>)
 800b548:	fba2 2303 	umull	r2, r3, r2, r3
 800b54c:	099b      	lsrs	r3, r3, #6
 800b54e:	1c5a      	adds	r2, r3, #1
 800b550:	4613      	mov	r3, r2
 800b552:	005b      	lsls	r3, r3, #1
 800b554:	4413      	add	r3, r2
 800b556:	009b      	lsls	r3, r3, #2
 800b558:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800b55a:	e002      	b.n	800b562 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	3b01      	subs	r3, #1
 800b560:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d1f9      	bne.n	800b55c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b568:	e05a      	b.n	800b620 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a3b      	ldr	r2, [pc, #236]	@ (800b65c <HAL_ADC_ConfigChannel+0x874>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d125      	bne.n	800b5c0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b574:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b578:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d11f      	bne.n	800b5c0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a31      	ldr	r2, [pc, #196]	@ (800b64c <HAL_ADC_ConfigChannel+0x864>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d104      	bne.n	800b594 <HAL_ADC_ConfigChannel+0x7ac>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a34      	ldr	r2, [pc, #208]	@ (800b660 <HAL_ADC_ConfigChannel+0x878>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d047      	beq.n	800b624 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b59c:	d004      	beq.n	800b5a8 <HAL_ADC_ConfigChannel+0x7c0>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a2a      	ldr	r2, [pc, #168]	@ (800b64c <HAL_ADC_ConfigChannel+0x864>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d101      	bne.n	800b5ac <HAL_ADC_ConfigChannel+0x7c4>
 800b5a8:	4a29      	ldr	r2, [pc, #164]	@ (800b650 <HAL_ADC_ConfigChannel+0x868>)
 800b5aa:	e000      	b.n	800b5ae <HAL_ADC_ConfigChannel+0x7c6>
 800b5ac:	4a23      	ldr	r2, [pc, #140]	@ (800b63c <HAL_ADC_ConfigChannel+0x854>)
 800b5ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b5b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	4610      	mov	r0, r2
 800b5ba:	f7fe ff36 	bl	800a42a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b5be:	e031      	b.n	800b624 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a27      	ldr	r2, [pc, #156]	@ (800b664 <HAL_ADC_ConfigChannel+0x87c>)
 800b5c6:	4293      	cmp	r3, r2
 800b5c8:	d12d      	bne.n	800b626 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b5ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b5ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d127      	bne.n	800b626 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a1c      	ldr	r2, [pc, #112]	@ (800b64c <HAL_ADC_ConfigChannel+0x864>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d022      	beq.n	800b626 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b5e8:	d004      	beq.n	800b5f4 <HAL_ADC_ConfigChannel+0x80c>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a17      	ldr	r2, [pc, #92]	@ (800b64c <HAL_ADC_ConfigChannel+0x864>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d101      	bne.n	800b5f8 <HAL_ADC_ConfigChannel+0x810>
 800b5f4:	4a16      	ldr	r2, [pc, #88]	@ (800b650 <HAL_ADC_ConfigChannel+0x868>)
 800b5f6:	e000      	b.n	800b5fa <HAL_ADC_ConfigChannel+0x812>
 800b5f8:	4a10      	ldr	r2, [pc, #64]	@ (800b63c <HAL_ADC_ConfigChannel+0x854>)
 800b5fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b5fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b602:	4619      	mov	r1, r3
 800b604:	4610      	mov	r0, r2
 800b606:	f7fe ff10 	bl	800a42a <LL_ADC_SetCommonPathInternalCh>
 800b60a:	e00c      	b.n	800b626 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b610:	f043 0220 	orr.w	r2, r3, #32
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800b618:	2301      	movs	r3, #1
 800b61a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800b61e:	e002      	b.n	800b626 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b620:	bf00      	nop
 800b622:	e000      	b.n	800b626 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b624:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2200      	movs	r2, #0
 800b62a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800b62e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800b632:	4618      	mov	r0, r3
 800b634:	37d8      	adds	r7, #216	@ 0xd8
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	50000700 	.word	0x50000700
 800b640:	c3210000 	.word	0xc3210000
 800b644:	90c00010 	.word	0x90c00010
 800b648:	50000600 	.word	0x50000600
 800b64c:	50000100 	.word	0x50000100
 800b650:	50000300 	.word	0x50000300
 800b654:	20000338 	.word	0x20000338
 800b658:	053e2d63 	.word	0x053e2d63
 800b65c:	c7520000 	.word	0xc7520000
 800b660:	50000500 	.word	0x50000500
 800b664:	cb840000 	.word	0xcb840000

0800b668 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800b670:	2300      	movs	r3, #0
 800b672:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4618      	mov	r0, r3
 800b67a:	f7ff f8a7 	bl	800a7cc <LL_ADC_IsEnabled>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d176      	bne.n	800b772 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	689a      	ldr	r2, [r3, #8]
 800b68a:	4b3c      	ldr	r3, [pc, #240]	@ (800b77c <ADC_Enable+0x114>)
 800b68c:	4013      	ands	r3, r2
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00d      	beq.n	800b6ae <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b696:	f043 0210 	orr.w	r2, r3, #16
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b6a2:	f043 0201 	orr.w	r2, r3, #1
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e062      	b.n	800b774 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7ff f862 	bl	800a77c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b6c0:	d004      	beq.n	800b6cc <ADC_Enable+0x64>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a2e      	ldr	r2, [pc, #184]	@ (800b780 <ADC_Enable+0x118>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d101      	bne.n	800b6d0 <ADC_Enable+0x68>
 800b6cc:	4b2d      	ldr	r3, [pc, #180]	@ (800b784 <ADC_Enable+0x11c>)
 800b6ce:	e000      	b.n	800b6d2 <ADC_Enable+0x6a>
 800b6d0:	4b2d      	ldr	r3, [pc, #180]	@ (800b788 <ADC_Enable+0x120>)
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7fe febc 	bl	800a450 <LL_ADC_GetCommonPathInternalCh>
 800b6d8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800b6da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d013      	beq.n	800b70a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b6e2:	4b2a      	ldr	r3, [pc, #168]	@ (800b78c <ADC_Enable+0x124>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	099b      	lsrs	r3, r3, #6
 800b6e8:	4a29      	ldr	r2, [pc, #164]	@ (800b790 <ADC_Enable+0x128>)
 800b6ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ee:	099b      	lsrs	r3, r3, #6
 800b6f0:	1c5a      	adds	r2, r3, #1
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	005b      	lsls	r3, r3, #1
 800b6f6:	4413      	add	r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b6fc:	e002      	b.n	800b704 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	3b01      	subs	r3, #1
 800b702:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1f9      	bne.n	800b6fe <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b70a:	f7fe fe6f 	bl	800a3ec <HAL_GetTick>
 800b70e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b710:	e028      	b.n	800b764 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4618      	mov	r0, r3
 800b718:	f7ff f858 	bl	800a7cc <LL_ADC_IsEnabled>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d104      	bne.n	800b72c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4618      	mov	r0, r3
 800b728:	f7ff f828 	bl	800a77c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b72c:	f7fe fe5e 	bl	800a3ec <HAL_GetTick>
 800b730:	4602      	mov	r2, r0
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	2b02      	cmp	r3, #2
 800b738:	d914      	bls.n	800b764 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f003 0301 	and.w	r3, r3, #1
 800b744:	2b01      	cmp	r3, #1
 800b746:	d00d      	beq.n	800b764 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b74c:	f043 0210 	orr.w	r2, r3, #16
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b758:	f043 0201 	orr.w	r2, r3, #1
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800b760:	2301      	movs	r3, #1
 800b762:	e007      	b.n	800b774 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f003 0301 	and.w	r3, r3, #1
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d1cf      	bne.n	800b712 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3710      	adds	r7, #16
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	8000003f 	.word	0x8000003f
 800b780:	50000100 	.word	0x50000100
 800b784:	50000300 	.word	0x50000300
 800b788:	50000700 	.word	0x50000700
 800b78c:	20000338 	.word	0x20000338
 800b790:	053e2d63 	.word	0x053e2d63

0800b794 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7ff f826 	bl	800a7f2 <LL_ADC_IsDisableOngoing>
 800b7a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7ff f80d 	bl	800a7cc <LL_ADC_IsEnabled>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d047      	beq.n	800b848 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d144      	bne.n	800b848 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	f003 030d 	and.w	r3, r3, #13
 800b7c8:	2b01      	cmp	r3, #1
 800b7ca:	d10c      	bne.n	800b7e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fe ffe7 	bl	800a7a4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2203      	movs	r2, #3
 800b7dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b7de:	f7fe fe05 	bl	800a3ec <HAL_GetTick>
 800b7e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b7e4:	e029      	b.n	800b83a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7ea:	f043 0210 	orr.w	r2, r3, #16
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b7f6:	f043 0201 	orr.w	r2, r3, #1
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800b7fe:	2301      	movs	r3, #1
 800b800:	e023      	b.n	800b84a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b802:	f7fe fdf3 	bl	800a3ec <HAL_GetTick>
 800b806:	4602      	mov	r2, r0
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	1ad3      	subs	r3, r2, r3
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	d914      	bls.n	800b83a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00d      	beq.n	800b83a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b822:	f043 0210 	orr.w	r2, r3, #16
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b82e:	f043 0201 	orr.w	r2, r3, #1
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	e007      	b.n	800b84a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	f003 0301 	and.w	r3, r3, #1
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1dc      	bne.n	800b802 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b084      	sub	sp, #16
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b85e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b864:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d14b      	bne.n	800b904 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b870:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f003 0308 	and.w	r3, r3, #8
 800b882:	2b00      	cmp	r3, #0
 800b884:	d021      	beq.n	800b8ca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fe fe8c 	bl	800a5a8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d032      	beq.n	800b8fc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d12b      	bne.n	800b8fc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d11f      	bne.n	800b8fc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8c0:	f043 0201 	orr.w	r2, r3, #1
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b8c8:	e018      	b.n	800b8fc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	f003 0302 	and.w	r3, r3, #2
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d111      	bne.n	800b8fc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d105      	bne.n	800b8fc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8f4:	f043 0201 	orr.w	r2, r3, #1
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f7ff fa55 	bl	800adac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b902:	e00e      	b.n	800b922 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b908:	f003 0310 	and.w	r3, r3, #16
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d003      	beq.n	800b918 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f7ff fa5f 	bl	800add4 <HAL_ADC_ErrorCallback>
}
 800b916:	e004      	b.n	800b922 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b91c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	4798      	blx	r3
}
 800b922:	bf00      	nop
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b084      	sub	sp, #16
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b936:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f7ff fa41 	bl	800adc0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b93e:	bf00      	nop
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b084      	sub	sp, #16
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b952:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b958:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b964:	f043 0204 	orr.w	r2, r3, #4
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b96c:	68f8      	ldr	r0, [r7, #12]
 800b96e:	f7ff fa31 	bl	800add4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b972:	bf00      	nop
 800b974:	3710      	adds	r7, #16
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}

0800b97a <LL_ADC_IsEnabled>:
{
 800b97a:	b480      	push	{r7}
 800b97c:	b083      	sub	sp, #12
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	f003 0301 	and.w	r3, r3, #1
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d101      	bne.n	800b992 <LL_ADC_IsEnabled+0x18>
 800b98e:	2301      	movs	r3, #1
 800b990:	e000      	b.n	800b994 <LL_ADC_IsEnabled+0x1a>
 800b992:	2300      	movs	r3, #0
}
 800b994:	4618      	mov	r0, r3
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <LL_ADC_StartCalibration>:
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800b9b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	609a      	str	r2, [r3, #8]
}
 800b9c6:	bf00      	nop
 800b9c8:	370c      	adds	r7, #12
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr

0800b9d2 <LL_ADC_IsCalibrationOnGoing>:
{
 800b9d2:	b480      	push	{r7}
 800b9d4:	b083      	sub	sp, #12
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b9e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b9e6:	d101      	bne.n	800b9ec <LL_ADC_IsCalibrationOnGoing+0x1a>
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e000      	b.n	800b9ee <LL_ADC_IsCalibrationOnGoing+0x1c>
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	370c      	adds	r7, #12
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr

0800b9fa <LL_ADC_REG_IsConversionOngoing>:
{
 800b9fa:	b480      	push	{r7}
 800b9fc:	b083      	sub	sp, #12
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	f003 0304 	and.w	r3, r3, #4
 800ba0a:	2b04      	cmp	r3, #4
 800ba0c:	d101      	bne.n	800ba12 <LL_ADC_REG_IsConversionOngoing+0x18>
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e000      	b.n	800ba14 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800ba12:	2300      	movs	r3, #0
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d101      	bne.n	800ba3c <HAL_ADCEx_Calibration_Start+0x1c>
 800ba38:	2302      	movs	r3, #2
 800ba3a:	e04d      	b.n	800bad8 <HAL_ADCEx_Calibration_Start+0xb8>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f7ff fea5 	bl	800b794 <ADC_Disable>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800ba4e:	7bfb      	ldrb	r3, [r7, #15]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d136      	bne.n	800bac2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba58:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800ba5c:	f023 0302 	bic.w	r3, r3, #2
 800ba60:	f043 0202 	orr.w	r2, r3, #2
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	6839      	ldr	r1, [r7, #0]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7ff ff96 	bl	800b9a0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800ba74:	e014      	b.n	800baa0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	3301      	adds	r3, #1
 800ba7a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	4a18      	ldr	r2, [pc, #96]	@ (800bae0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d90d      	bls.n	800baa0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba88:	f023 0312 	bic.w	r3, r3, #18
 800ba8c:	f043 0210 	orr.w	r2, r3, #16
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2200      	movs	r2, #0
 800ba98:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800ba9c:	2301      	movs	r3, #1
 800ba9e:	e01b      	b.n	800bad8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7ff ff94 	bl	800b9d2 <LL_ADC_IsCalibrationOnGoing>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1e2      	bne.n	800ba76 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bab4:	f023 0303 	bic.w	r3, r3, #3
 800bab8:	f043 0201 	orr.w	r2, r3, #1
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bac0:	e005      	b.n	800bace <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bac6:	f043 0210 	orr.w	r2, r3, #16
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800bad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	0004de01 	.word	0x0004de01

0800bae4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800bae4:	b590      	push	{r4, r7, lr}
 800bae6:	b0a1      	sub	sp, #132	@ 0x84
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800bafa:	2b01      	cmp	r3, #1
 800bafc:	d101      	bne.n	800bb02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800bafe:	2302      	movs	r3, #2
 800bb00:	e0e7      	b.n	800bcd2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2201      	movs	r2, #1
 800bb06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800bb0e:	2300      	movs	r3, #0
 800bb10:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb1a:	d102      	bne.n	800bb22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800bb1c:	4b6f      	ldr	r3, [pc, #444]	@ (800bcdc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bb1e:	60bb      	str	r3, [r7, #8]
 800bb20:	e009      	b.n	800bb36 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4a6e      	ldr	r2, [pc, #440]	@ (800bce0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d102      	bne.n	800bb32 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800bb2c:	4b6d      	ldr	r3, [pc, #436]	@ (800bce4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800bb2e:	60bb      	str	r3, [r7, #8]
 800bb30:	e001      	b.n	800bb36 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800bb32:	2300      	movs	r3, #0
 800bb34:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d10b      	bne.n	800bb54 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb40:	f043 0220 	orr.w	r2, r3, #32
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	e0be      	b.n	800bcd2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	4618      	mov	r0, r3
 800bb58:	f7ff ff4f 	bl	800b9fa <LL_ADC_REG_IsConversionOngoing>
 800bb5c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7ff ff49 	bl	800b9fa <LL_ADC_REG_IsConversionOngoing>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f040 80a0 	bne.w	800bcb0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800bb70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f040 809c 	bne.w	800bcb0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb80:	d004      	beq.n	800bb8c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a55      	ldr	r2, [pc, #340]	@ (800bcdc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d101      	bne.n	800bb90 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800bb8c:	4b56      	ldr	r3, [pc, #344]	@ (800bce8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800bb8e:	e000      	b.n	800bb92 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800bb90:	4b56      	ldr	r3, [pc, #344]	@ (800bcec <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800bb92:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d04b      	beq.n	800bc34 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800bb9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	6859      	ldr	r1, [r3, #4]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800bbae:	035b      	lsls	r3, r3, #13
 800bbb0:	430b      	orrs	r3, r1
 800bbb2:	431a      	orrs	r2, r3
 800bbb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bbb6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bbc0:	d004      	beq.n	800bbcc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4a45      	ldr	r2, [pc, #276]	@ (800bcdc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bbc8:	4293      	cmp	r3, r2
 800bbca:	d10f      	bne.n	800bbec <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800bbcc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800bbd0:	f7ff fed3 	bl	800b97a <LL_ADC_IsEnabled>
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	4841      	ldr	r0, [pc, #260]	@ (800bcdc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bbd8:	f7ff fecf 	bl	800b97a <LL_ADC_IsEnabled>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	4323      	orrs	r3, r4
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	bf0c      	ite	eq
 800bbe4:	2301      	moveq	r3, #1
 800bbe6:	2300      	movne	r3, #0
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	e012      	b.n	800bc12 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800bbec:	483c      	ldr	r0, [pc, #240]	@ (800bce0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800bbee:	f7ff fec4 	bl	800b97a <LL_ADC_IsEnabled>
 800bbf2:	4604      	mov	r4, r0
 800bbf4:	483b      	ldr	r0, [pc, #236]	@ (800bce4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800bbf6:	f7ff fec0 	bl	800b97a <LL_ADC_IsEnabled>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	431c      	orrs	r4, r3
 800bbfe:	483c      	ldr	r0, [pc, #240]	@ (800bcf0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800bc00:	f7ff febb 	bl	800b97a <LL_ADC_IsEnabled>
 800bc04:	4603      	mov	r3, r0
 800bc06:	4323      	orrs	r3, r4
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	bf0c      	ite	eq
 800bc0c:	2301      	moveq	r3, #1
 800bc0e:	2300      	movne	r3, #0
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d056      	beq.n	800bcc4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800bc16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc18:	689b      	ldr	r3, [r3, #8]
 800bc1a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800bc1e:	f023 030f 	bic.w	r3, r3, #15
 800bc22:	683a      	ldr	r2, [r7, #0]
 800bc24:	6811      	ldr	r1, [r2, #0]
 800bc26:	683a      	ldr	r2, [r7, #0]
 800bc28:	6892      	ldr	r2, [r2, #8]
 800bc2a:	430a      	orrs	r2, r1
 800bc2c:	431a      	orrs	r2, r3
 800bc2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc30:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800bc32:	e047      	b.n	800bcc4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800bc34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800bc3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bc3e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc48:	d004      	beq.n	800bc54 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a23      	ldr	r2, [pc, #140]	@ (800bcdc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d10f      	bne.n	800bc74 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800bc54:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800bc58:	f7ff fe8f 	bl	800b97a <LL_ADC_IsEnabled>
 800bc5c:	4604      	mov	r4, r0
 800bc5e:	481f      	ldr	r0, [pc, #124]	@ (800bcdc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800bc60:	f7ff fe8b 	bl	800b97a <LL_ADC_IsEnabled>
 800bc64:	4603      	mov	r3, r0
 800bc66:	4323      	orrs	r3, r4
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	bf0c      	ite	eq
 800bc6c:	2301      	moveq	r3, #1
 800bc6e:	2300      	movne	r3, #0
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	e012      	b.n	800bc9a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800bc74:	481a      	ldr	r0, [pc, #104]	@ (800bce0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800bc76:	f7ff fe80 	bl	800b97a <LL_ADC_IsEnabled>
 800bc7a:	4604      	mov	r4, r0
 800bc7c:	4819      	ldr	r0, [pc, #100]	@ (800bce4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800bc7e:	f7ff fe7c 	bl	800b97a <LL_ADC_IsEnabled>
 800bc82:	4603      	mov	r3, r0
 800bc84:	431c      	orrs	r4, r3
 800bc86:	481a      	ldr	r0, [pc, #104]	@ (800bcf0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800bc88:	f7ff fe77 	bl	800b97a <LL_ADC_IsEnabled>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	4323      	orrs	r3, r4
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	bf0c      	ite	eq
 800bc94:	2301      	moveq	r3, #1
 800bc96:	2300      	movne	r3, #0
 800bc98:	b2db      	uxtb	r3, r3
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d012      	beq.n	800bcc4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800bc9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800bca6:	f023 030f 	bic.w	r3, r3, #15
 800bcaa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800bcac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800bcae:	e009      	b.n	800bcc4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcb4:	f043 0220 	orr.w	r2, r3, #32
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800bcc2:	e000      	b.n	800bcc6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800bcc4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800bcce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3784      	adds	r7, #132	@ 0x84
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd90      	pop	{r4, r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	50000100 	.word	0x50000100
 800bce0:	50000400 	.word	0x50000400
 800bce4:	50000500 	.word	0x50000500
 800bce8:	50000300 	.word	0x50000300
 800bcec:	50000700 	.word	0x50000700
 800bcf0:	50000600 	.word	0x50000600

0800bcf4 <__NVIC_SetPriorityGrouping>:
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b085      	sub	sp, #20
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f003 0307 	and.w	r3, r3, #7
 800bd02:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bd04:	4b0c      	ldr	r3, [pc, #48]	@ (800bd38 <__NVIC_SetPriorityGrouping+0x44>)
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800bd10:	4013      	ands	r3, r2
 800bd12:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bd1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800bd20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bd26:	4a04      	ldr	r2, [pc, #16]	@ (800bd38 <__NVIC_SetPriorityGrouping+0x44>)
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	60d3      	str	r3, [r2, #12]
}
 800bd2c:	bf00      	nop
 800bd2e:	3714      	adds	r7, #20
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr
 800bd38:	e000ed00 	.word	0xe000ed00

0800bd3c <__NVIC_GetPriorityGrouping>:
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bd40:	4b04      	ldr	r3, [pc, #16]	@ (800bd54 <__NVIC_GetPriorityGrouping+0x18>)
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	0a1b      	lsrs	r3, r3, #8
 800bd46:	f003 0307 	and.w	r3, r3, #7
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr
 800bd54:	e000ed00 	.word	0xe000ed00

0800bd58 <__NVIC_EnableIRQ>:
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	4603      	mov	r3, r0
 800bd60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bd62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	db0b      	blt.n	800bd82 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bd6a:	79fb      	ldrb	r3, [r7, #7]
 800bd6c:	f003 021f 	and.w	r2, r3, #31
 800bd70:	4907      	ldr	r1, [pc, #28]	@ (800bd90 <__NVIC_EnableIRQ+0x38>)
 800bd72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd76:	095b      	lsrs	r3, r3, #5
 800bd78:	2001      	movs	r0, #1
 800bd7a:	fa00 f202 	lsl.w	r2, r0, r2
 800bd7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800bd82:	bf00      	nop
 800bd84:	370c      	adds	r7, #12
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	e000e100 	.word	0xe000e100

0800bd94 <__NVIC_SetPriority>:
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	6039      	str	r1, [r7, #0]
 800bd9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bda0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	db0a      	blt.n	800bdbe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	b2da      	uxtb	r2, r3
 800bdac:	490c      	ldr	r1, [pc, #48]	@ (800bde0 <__NVIC_SetPriority+0x4c>)
 800bdae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdb2:	0112      	lsls	r2, r2, #4
 800bdb4:	b2d2      	uxtb	r2, r2
 800bdb6:	440b      	add	r3, r1
 800bdb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800bdbc:	e00a      	b.n	800bdd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	b2da      	uxtb	r2, r3
 800bdc2:	4908      	ldr	r1, [pc, #32]	@ (800bde4 <__NVIC_SetPriority+0x50>)
 800bdc4:	79fb      	ldrb	r3, [r7, #7]
 800bdc6:	f003 030f 	and.w	r3, r3, #15
 800bdca:	3b04      	subs	r3, #4
 800bdcc:	0112      	lsls	r2, r2, #4
 800bdce:	b2d2      	uxtb	r2, r2
 800bdd0:	440b      	add	r3, r1
 800bdd2:	761a      	strb	r2, [r3, #24]
}
 800bdd4:	bf00      	nop
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr
 800bde0:	e000e100 	.word	0xe000e100
 800bde4:	e000ed00 	.word	0xe000ed00

0800bde8 <NVIC_EncodePriority>:
{
 800bde8:	b480      	push	{r7}
 800bdea:	b089      	sub	sp, #36	@ 0x24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f003 0307 	and.w	r3, r3, #7
 800bdfa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bdfc:	69fb      	ldr	r3, [r7, #28]
 800bdfe:	f1c3 0307 	rsb	r3, r3, #7
 800be02:	2b04      	cmp	r3, #4
 800be04:	bf28      	it	cs
 800be06:	2304      	movcs	r3, #4
 800be08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	3304      	adds	r3, #4
 800be0e:	2b06      	cmp	r3, #6
 800be10:	d902      	bls.n	800be18 <NVIC_EncodePriority+0x30>
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	3b03      	subs	r3, #3
 800be16:	e000      	b.n	800be1a <NVIC_EncodePriority+0x32>
 800be18:	2300      	movs	r3, #0
 800be1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be1c:	f04f 32ff 	mov.w	r2, #4294967295
 800be20:	69bb      	ldr	r3, [r7, #24]
 800be22:	fa02 f303 	lsl.w	r3, r2, r3
 800be26:	43da      	mvns	r2, r3
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	401a      	ands	r2, r3
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800be30:	f04f 31ff 	mov.w	r1, #4294967295
 800be34:	697b      	ldr	r3, [r7, #20]
 800be36:	fa01 f303 	lsl.w	r3, r1, r3
 800be3a:	43d9      	mvns	r1, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be40:	4313      	orrs	r3, r2
}
 800be42:	4618      	mov	r0, r3
 800be44:	3724      	adds	r7, #36	@ 0x24
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
	...

0800be50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be60:	d301      	bcc.n	800be66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800be62:	2301      	movs	r3, #1
 800be64:	e00f      	b.n	800be86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800be66:	4a0a      	ldr	r2, [pc, #40]	@ (800be90 <SysTick_Config+0x40>)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	3b01      	subs	r3, #1
 800be6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800be6e:	210f      	movs	r1, #15
 800be70:	f04f 30ff 	mov.w	r0, #4294967295
 800be74:	f7ff ff8e 	bl	800bd94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800be78:	4b05      	ldr	r3, [pc, #20]	@ (800be90 <SysTick_Config+0x40>)
 800be7a:	2200      	movs	r2, #0
 800be7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800be7e:	4b04      	ldr	r3, [pc, #16]	@ (800be90 <SysTick_Config+0x40>)
 800be80:	2207      	movs	r2, #7
 800be82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800be84:	2300      	movs	r3, #0
}
 800be86:	4618      	mov	r0, r3
 800be88:	3708      	adds	r7, #8
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	e000e010 	.word	0xe000e010

0800be94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f7ff ff29 	bl	800bcf4 <__NVIC_SetPriorityGrouping>
}
 800bea2:	bf00      	nop
 800bea4:	3708      	adds	r7, #8
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b086      	sub	sp, #24
 800beae:	af00      	add	r7, sp, #0
 800beb0:	4603      	mov	r3, r0
 800beb2:	60b9      	str	r1, [r7, #8]
 800beb4:	607a      	str	r2, [r7, #4]
 800beb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800beb8:	f7ff ff40 	bl	800bd3c <__NVIC_GetPriorityGrouping>
 800bebc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	68b9      	ldr	r1, [r7, #8]
 800bec2:	6978      	ldr	r0, [r7, #20]
 800bec4:	f7ff ff90 	bl	800bde8 <NVIC_EncodePriority>
 800bec8:	4602      	mov	r2, r0
 800beca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bece:	4611      	mov	r1, r2
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7ff ff5f 	bl	800bd94 <__NVIC_SetPriority>
}
 800bed6:	bf00      	nop
 800bed8:	3718      	adds	r7, #24
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b082      	sub	sp, #8
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	4603      	mov	r3, r0
 800bee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800beec:	4618      	mov	r0, r3
 800beee:	f7ff ff33 	bl	800bd58 <__NVIC_EnableIRQ>
}
 800bef2:	bf00      	nop
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b082      	sub	sp, #8
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7ff ffa4 	bl	800be50 <SysTick_Config>
 800bf08:	4603      	mov	r3, r0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
	...

0800bf14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d101      	bne.n	800bf26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	e08d      	b.n	800c042 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	4b47      	ldr	r3, [pc, #284]	@ (800c04c <HAL_DMA_Init+0x138>)
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d80f      	bhi.n	800bf52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	461a      	mov	r2, r3
 800bf38:	4b45      	ldr	r3, [pc, #276]	@ (800c050 <HAL_DMA_Init+0x13c>)
 800bf3a:	4413      	add	r3, r2
 800bf3c:	4a45      	ldr	r2, [pc, #276]	@ (800c054 <HAL_DMA_Init+0x140>)
 800bf3e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf42:	091b      	lsrs	r3, r3, #4
 800bf44:	009a      	lsls	r2, r3, #2
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	4a42      	ldr	r2, [pc, #264]	@ (800c058 <HAL_DMA_Init+0x144>)
 800bf4e:	641a      	str	r2, [r3, #64]	@ 0x40
 800bf50:	e00e      	b.n	800bf70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	461a      	mov	r2, r3
 800bf58:	4b40      	ldr	r3, [pc, #256]	@ (800c05c <HAL_DMA_Init+0x148>)
 800bf5a:	4413      	add	r3, r2
 800bf5c:	4a3d      	ldr	r2, [pc, #244]	@ (800c054 <HAL_DMA_Init+0x140>)
 800bf5e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf62:	091b      	lsrs	r3, r3, #4
 800bf64:	009a      	lsls	r2, r3, #2
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4a3c      	ldr	r2, [pc, #240]	@ (800c060 <HAL_DMA_Init+0x14c>)
 800bf6e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2202      	movs	r2, #2
 800bf74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800bf86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800bf94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	691b      	ldr	r3, [r3, #16]
 800bf9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bfa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	699b      	ldr	r3, [r3, #24]
 800bfa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bfac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6a1b      	ldr	r3, [r3, #32]
 800bfb2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 fa76 	bl	800c4b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bfd0:	d102      	bne.n	800bfd8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	685a      	ldr	r2, [r3, #4]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfe0:	b2d2      	uxtb	r2, r2
 800bfe2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bfec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d010      	beq.n	800c018 <HAL_DMA_Init+0x104>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	2b04      	cmp	r3, #4
 800bffc:	d80c      	bhi.n	800c018 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 fa96 	bl	800c530 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c008:	2200      	movs	r2, #0
 800c00a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c014:	605a      	str	r2, [r3, #4]
 800c016:	e008      	b.n	800c02a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2200      	movs	r2, #0
 800c022:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2200      	movs	r2, #0
 800c02e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2200      	movs	r2, #0
 800c03c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3710      	adds	r7, #16
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	40020407 	.word	0x40020407
 800c050:	bffdfff8 	.word	0xbffdfff8
 800c054:	cccccccd 	.word	0xcccccccd
 800c058:	40020000 	.word	0x40020000
 800c05c:	bffdfbf8 	.word	0xbffdfbf8
 800c060:	40020400 	.word	0x40020400

0800c064 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
 800c070:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c072:	2300      	movs	r3, #0
 800c074:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d101      	bne.n	800c084 <HAL_DMA_Start_IT+0x20>
 800c080:	2302      	movs	r3, #2
 800c082:	e066      	b.n	800c152 <HAL_DMA_Start_IT+0xee>
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2201      	movs	r2, #1
 800c088:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b01      	cmp	r3, #1
 800c096:	d155      	bne.n	800c144 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2202      	movs	r2, #2
 800c09c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f022 0201 	bic.w	r2, r2, #1
 800c0b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	68b9      	ldr	r1, [r7, #8]
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f000 f9bb 	bl	800c438 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d008      	beq.n	800c0dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f042 020e 	orr.w	r2, r2, #14
 800c0d8:	601a      	str	r2, [r3, #0]
 800c0da:	e00f      	b.n	800c0fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f022 0204 	bic.w	r2, r2, #4
 800c0ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	681a      	ldr	r2, [r3, #0]
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f042 020a 	orr.w	r2, r2, #10
 800c0fa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c106:	2b00      	cmp	r3, #0
 800c108:	d007      	beq.n	800c11a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c118:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d007      	beq.n	800c132 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c12c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c130:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f042 0201 	orr.w	r2, r2, #1
 800c140:	601a      	str	r2, [r3, #0]
 800c142:	e005      	b.n	800c150 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2200      	movs	r2, #0
 800c148:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800c14c:	2302      	movs	r3, #2
 800c14e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800c150:	7dfb      	ldrb	r3, [r7, #23]
}
 800c152:	4618      	mov	r0, r3
 800c154:	3718      	adds	r7, #24
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c15a:	b480      	push	{r7}
 800c15c:	b085      	sub	sp, #20
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c162:	2300      	movs	r3, #0
 800c164:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	2b02      	cmp	r3, #2
 800c170:	d005      	beq.n	800c17e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2204      	movs	r2, #4
 800c176:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800c178:	2301      	movs	r3, #1
 800c17a:	73fb      	strb	r3, [r7, #15]
 800c17c:	e037      	b.n	800c1ee <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	681a      	ldr	r2, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f022 020e 	bic.w	r2, r2, #14
 800c18c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c198:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c19c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f022 0201 	bic.w	r2, r2, #1
 800c1ac:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1b2:	f003 021f 	and.w	r2, r3, #31
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1ba:	2101      	movs	r1, #1
 800c1bc:	fa01 f202 	lsl.w	r2, r1, r2
 800c1c0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c1ca:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d00c      	beq.n	800c1ee <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c1e2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c1ec:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800c1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c200:	4618      	mov	r0, r3
 800c202:	3714      	adds	r7, #20
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c214:	2300      	movs	r3, #0
 800c216:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	2b02      	cmp	r3, #2
 800c222:	d00d      	beq.n	800c240 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2204      	movs	r2, #4
 800c228:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2201      	movs	r2, #1
 800c22e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800c23a:	2301      	movs	r3, #1
 800c23c:	73fb      	strb	r3, [r7, #15]
 800c23e:	e047      	b.n	800c2d0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	681a      	ldr	r2, [r3, #0]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f022 020e 	bic.w	r2, r2, #14
 800c24e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	681a      	ldr	r2, [r3, #0]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f022 0201 	bic.w	r2, r2, #1
 800c25e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c26a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c26e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c274:	f003 021f 	and.w	r2, r3, #31
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c27c:	2101      	movs	r1, #1
 800c27e:	fa01 f202 	lsl.w	r2, r1, r2
 800c282:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c28c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c292:	2b00      	cmp	r3, #0
 800c294:	d00c      	beq.n	800c2b0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c2a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c2ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d003      	beq.n	800c2d0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	4798      	blx	r3
    }
  }
  return status;
 800c2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3710      	adds	r7, #16
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b084      	sub	sp, #16
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2f6:	f003 031f 	and.w	r3, r3, #31
 800c2fa:	2204      	movs	r2, #4
 800c2fc:	409a      	lsls	r2, r3
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	4013      	ands	r3, r2
 800c302:	2b00      	cmp	r3, #0
 800c304:	d026      	beq.n	800c354 <HAL_DMA_IRQHandler+0x7a>
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	f003 0304 	and.w	r3, r3, #4
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d021      	beq.n	800c354 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f003 0320 	and.w	r3, r3, #32
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d107      	bne.n	800c32e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f022 0204 	bic.w	r2, r2, #4
 800c32c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c332:	f003 021f 	and.w	r2, r3, #31
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c33a:	2104      	movs	r1, #4
 800c33c:	fa01 f202 	lsl.w	r2, r1, r2
 800c340:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c346:	2b00      	cmp	r3, #0
 800c348:	d071      	beq.n	800c42e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800c352:	e06c      	b.n	800c42e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c358:	f003 031f 	and.w	r3, r3, #31
 800c35c:	2202      	movs	r2, #2
 800c35e:	409a      	lsls	r2, r3
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	4013      	ands	r3, r2
 800c364:	2b00      	cmp	r3, #0
 800c366:	d02e      	beq.n	800c3c6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	f003 0302 	and.w	r3, r3, #2
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d029      	beq.n	800c3c6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f003 0320 	and.w	r3, r3, #32
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10b      	bne.n	800c398 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f022 020a 	bic.w	r2, r2, #10
 800c38e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2201      	movs	r2, #1
 800c394:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c39c:	f003 021f 	and.w	r2, r3, #31
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3a4:	2102      	movs	r1, #2
 800c3a6:	fa01 f202 	lsl.w	r2, r1, r2
 800c3aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d038      	beq.n	800c42e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800c3c4:	e033      	b.n	800c42e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3ca:	f003 031f 	and.w	r3, r3, #31
 800c3ce:	2208      	movs	r2, #8
 800c3d0:	409a      	lsls	r2, r3
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	4013      	ands	r3, r2
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d02a      	beq.n	800c430 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	f003 0308 	and.w	r3, r3, #8
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d025      	beq.n	800c430 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f022 020e 	bic.w	r2, r2, #14
 800c3f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c3f8:	f003 021f 	and.w	r2, r3, #31
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c400:	2101      	movs	r1, #1
 800c402:	fa01 f202 	lsl.w	r2, r1, r2
 800c406:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2201      	movs	r2, #1
 800c412:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c422:	2b00      	cmp	r3, #0
 800c424:	d004      	beq.n	800c430 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c42e:	bf00      	nop
 800c430:	bf00      	nop
}
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c438:	b480      	push	{r7}
 800c43a:	b085      	sub	sp, #20
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	60f8      	str	r0, [r7, #12]
 800c440:	60b9      	str	r1, [r7, #8]
 800c442:	607a      	str	r2, [r7, #4]
 800c444:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c44a:	68fa      	ldr	r2, [r7, #12]
 800c44c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c44e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c454:	2b00      	cmp	r3, #0
 800c456:	d004      	beq.n	800c462 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c460:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c466:	f003 021f 	and.w	r2, r3, #31
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c46e:	2101      	movs	r1, #1
 800c470:	fa01 f202 	lsl.w	r2, r1, r2
 800c474:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	683a      	ldr	r2, [r7, #0]
 800c47c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	2b10      	cmp	r3, #16
 800c484:	d108      	bne.n	800c498 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c496:	e007      	b.n	800c4a8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	68ba      	ldr	r2, [r7, #8]
 800c49e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	60da      	str	r2, [r3, #12]
}
 800c4a8:	bf00      	nop
 800c4aa:	3714      	adds	r7, #20
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b087      	sub	sp, #28
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	461a      	mov	r2, r3
 800c4c2:	4b16      	ldr	r3, [pc, #88]	@ (800c51c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d802      	bhi.n	800c4ce <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800c4c8:	4b15      	ldr	r3, [pc, #84]	@ (800c520 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800c4ca:	617b      	str	r3, [r7, #20]
 800c4cc:	e001      	b.n	800c4d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800c4ce:	4b15      	ldr	r3, [pc, #84]	@ (800c524 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800c4d0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	3b08      	subs	r3, #8
 800c4de:	4a12      	ldr	r2, [pc, #72]	@ (800c528 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800c4e0:	fba2 2303 	umull	r2, r3, r2, r3
 800c4e4:	091b      	lsrs	r3, r3, #4
 800c4e6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4ec:	089b      	lsrs	r3, r3, #2
 800c4ee:	009a      	lsls	r2, r3, #2
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4a0b      	ldr	r2, [pc, #44]	@ (800c52c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800c4fe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f003 031f 	and.w	r3, r3, #31
 800c506:	2201      	movs	r2, #1
 800c508:	409a      	lsls	r2, r3
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800c50e:	bf00      	nop
 800c510:	371c      	adds	r7, #28
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr
 800c51a:	bf00      	nop
 800c51c:	40020407 	.word	0x40020407
 800c520:	40020800 	.word	0x40020800
 800c524:	40020820 	.word	0x40020820
 800c528:	cccccccd 	.word	0xcccccccd
 800c52c:	40020880 	.word	0x40020880

0800c530 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c530:	b480      	push	{r7}
 800c532:	b085      	sub	sp, #20
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	4b0b      	ldr	r3, [pc, #44]	@ (800c570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800c544:	4413      	add	r3, r2
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	461a      	mov	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a08      	ldr	r2, [pc, #32]	@ (800c574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800c552:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	3b01      	subs	r3, #1
 800c558:	f003 031f 	and.w	r3, r3, #31
 800c55c:	2201      	movs	r2, #1
 800c55e:	409a      	lsls	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800c564:	bf00      	nop
 800c566:	3714      	adds	r7, #20
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	1000823f 	.word	0x1000823f
 800c574:	40020940 	.word	0x40020940

0800c578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c578:	b480      	push	{r7}
 800c57a:	b087      	sub	sp, #28
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c582:	2300      	movs	r3, #0
 800c584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c586:	e15a      	b.n	800c83e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	2101      	movs	r1, #1
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	fa01 f303 	lsl.w	r3, r1, r3
 800c594:	4013      	ands	r3, r2
 800c596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	f000 814c 	beq.w	800c838 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	f003 0303 	and.w	r3, r3, #3
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d005      	beq.n	800c5b8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800c5b4:	2b02      	cmp	r3, #2
 800c5b6:	d130      	bne.n	800c61a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	005b      	lsls	r3, r3, #1
 800c5c2:	2203      	movs	r2, #3
 800c5c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c5c8:	43db      	mvns	r3, r3
 800c5ca:	693a      	ldr	r2, [r7, #16]
 800c5cc:	4013      	ands	r3, r2
 800c5ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	68da      	ldr	r2, [r3, #12]
 800c5d4:	697b      	ldr	r3, [r7, #20]
 800c5d6:	005b      	lsls	r3, r3, #1
 800c5d8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5dc:	693a      	ldr	r2, [r7, #16]
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5f6:	43db      	mvns	r3, r3
 800c5f8:	693a      	ldr	r2, [r7, #16]
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	685b      	ldr	r3, [r3, #4]
 800c602:	091b      	lsrs	r3, r3, #4
 800c604:	f003 0201 	and.w	r2, r3, #1
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	fa02 f303 	lsl.w	r3, r2, r3
 800c60e:	693a      	ldr	r2, [r7, #16]
 800c610:	4313      	orrs	r3, r2
 800c612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	693a      	ldr	r2, [r7, #16]
 800c618:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	f003 0303 	and.w	r3, r3, #3
 800c622:	2b03      	cmp	r3, #3
 800c624:	d017      	beq.n	800c656 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	005b      	lsls	r3, r3, #1
 800c630:	2203      	movs	r2, #3
 800c632:	fa02 f303 	lsl.w	r3, r2, r3
 800c636:	43db      	mvns	r3, r3
 800c638:	693a      	ldr	r2, [r7, #16]
 800c63a:	4013      	ands	r3, r2
 800c63c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	689a      	ldr	r2, [r3, #8]
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	005b      	lsls	r3, r3, #1
 800c646:	fa02 f303 	lsl.w	r3, r2, r3
 800c64a:	693a      	ldr	r2, [r7, #16]
 800c64c:	4313      	orrs	r3, r2
 800c64e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	693a      	ldr	r2, [r7, #16]
 800c654:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	f003 0303 	and.w	r3, r3, #3
 800c65e:	2b02      	cmp	r3, #2
 800c660:	d123      	bne.n	800c6aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	08da      	lsrs	r2, r3, #3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	3208      	adds	r2, #8
 800c66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	f003 0307 	and.w	r3, r3, #7
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	220f      	movs	r2, #15
 800c67a:	fa02 f303 	lsl.w	r3, r2, r3
 800c67e:	43db      	mvns	r3, r3
 800c680:	693a      	ldr	r2, [r7, #16]
 800c682:	4013      	ands	r3, r2
 800c684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	691a      	ldr	r2, [r3, #16]
 800c68a:	697b      	ldr	r3, [r7, #20]
 800c68c:	f003 0307 	and.w	r3, r3, #7
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	fa02 f303 	lsl.w	r3, r2, r3
 800c696:	693a      	ldr	r2, [r7, #16]
 800c698:	4313      	orrs	r3, r2
 800c69a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	08da      	lsrs	r2, r3, #3
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	3208      	adds	r2, #8
 800c6a4:	6939      	ldr	r1, [r7, #16]
 800c6a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	2203      	movs	r2, #3
 800c6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c6ba:	43db      	mvns	r3, r3
 800c6bc:	693a      	ldr	r2, [r7, #16]
 800c6be:	4013      	ands	r3, r2
 800c6c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	f003 0203 	and.w	r2, r3, #3
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	005b      	lsls	r3, r3, #1
 800c6ce:	fa02 f303 	lsl.w	r3, r2, r3
 800c6d2:	693a      	ldr	r2, [r7, #16]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	693a      	ldr	r2, [r7, #16]
 800c6dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f000 80a6 	beq.w	800c838 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c6ec:	4b5b      	ldr	r3, [pc, #364]	@ (800c85c <HAL_GPIO_Init+0x2e4>)
 800c6ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6f0:	4a5a      	ldr	r2, [pc, #360]	@ (800c85c <HAL_GPIO_Init+0x2e4>)
 800c6f2:	f043 0301 	orr.w	r3, r3, #1
 800c6f6:	6613      	str	r3, [r2, #96]	@ 0x60
 800c6f8:	4b58      	ldr	r3, [pc, #352]	@ (800c85c <HAL_GPIO_Init+0x2e4>)
 800c6fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6fc:	f003 0301 	and.w	r3, r3, #1
 800c700:	60bb      	str	r3, [r7, #8]
 800c702:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c704:	4a56      	ldr	r2, [pc, #344]	@ (800c860 <HAL_GPIO_Init+0x2e8>)
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	089b      	lsrs	r3, r3, #2
 800c70a:	3302      	adds	r3, #2
 800c70c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c710:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	f003 0303 	and.w	r3, r3, #3
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	220f      	movs	r2, #15
 800c71c:	fa02 f303 	lsl.w	r3, r2, r3
 800c720:	43db      	mvns	r3, r3
 800c722:	693a      	ldr	r2, [r7, #16]
 800c724:	4013      	ands	r3, r2
 800c726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800c72e:	d01f      	beq.n	800c770 <HAL_GPIO_Init+0x1f8>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4a4c      	ldr	r2, [pc, #304]	@ (800c864 <HAL_GPIO_Init+0x2ec>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d019      	beq.n	800c76c <HAL_GPIO_Init+0x1f4>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4a4b      	ldr	r2, [pc, #300]	@ (800c868 <HAL_GPIO_Init+0x2f0>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d013      	beq.n	800c768 <HAL_GPIO_Init+0x1f0>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4a4a      	ldr	r2, [pc, #296]	@ (800c86c <HAL_GPIO_Init+0x2f4>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d00d      	beq.n	800c764 <HAL_GPIO_Init+0x1ec>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4a49      	ldr	r2, [pc, #292]	@ (800c870 <HAL_GPIO_Init+0x2f8>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d007      	beq.n	800c760 <HAL_GPIO_Init+0x1e8>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4a48      	ldr	r2, [pc, #288]	@ (800c874 <HAL_GPIO_Init+0x2fc>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d101      	bne.n	800c75c <HAL_GPIO_Init+0x1e4>
 800c758:	2305      	movs	r3, #5
 800c75a:	e00a      	b.n	800c772 <HAL_GPIO_Init+0x1fa>
 800c75c:	2306      	movs	r3, #6
 800c75e:	e008      	b.n	800c772 <HAL_GPIO_Init+0x1fa>
 800c760:	2304      	movs	r3, #4
 800c762:	e006      	b.n	800c772 <HAL_GPIO_Init+0x1fa>
 800c764:	2303      	movs	r3, #3
 800c766:	e004      	b.n	800c772 <HAL_GPIO_Init+0x1fa>
 800c768:	2302      	movs	r3, #2
 800c76a:	e002      	b.n	800c772 <HAL_GPIO_Init+0x1fa>
 800c76c:	2301      	movs	r3, #1
 800c76e:	e000      	b.n	800c772 <HAL_GPIO_Init+0x1fa>
 800c770:	2300      	movs	r3, #0
 800c772:	697a      	ldr	r2, [r7, #20]
 800c774:	f002 0203 	and.w	r2, r2, #3
 800c778:	0092      	lsls	r2, r2, #2
 800c77a:	4093      	lsls	r3, r2
 800c77c:	693a      	ldr	r2, [r7, #16]
 800c77e:	4313      	orrs	r3, r2
 800c780:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c782:	4937      	ldr	r1, [pc, #220]	@ (800c860 <HAL_GPIO_Init+0x2e8>)
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	089b      	lsrs	r3, r3, #2
 800c788:	3302      	adds	r3, #2
 800c78a:	693a      	ldr	r2, [r7, #16]
 800c78c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c790:	4b39      	ldr	r3, [pc, #228]	@ (800c878 <HAL_GPIO_Init+0x300>)
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	43db      	mvns	r3, r3
 800c79a:	693a      	ldr	r2, [r7, #16]
 800c79c:	4013      	ands	r3, r2
 800c79e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d003      	beq.n	800c7b4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800c7ac:	693a      	ldr	r2, [r7, #16]
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c7b4:	4a30      	ldr	r2, [pc, #192]	@ (800c878 <HAL_GPIO_Init+0x300>)
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c7ba:	4b2f      	ldr	r3, [pc, #188]	@ (800c878 <HAL_GPIO_Init+0x300>)
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	43db      	mvns	r3, r3
 800c7c4:	693a      	ldr	r2, [r7, #16]
 800c7c6:	4013      	ands	r3, r2
 800c7c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d003      	beq.n	800c7de <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800c7d6:	693a      	ldr	r2, [r7, #16]
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c7de:	4a26      	ldr	r2, [pc, #152]	@ (800c878 <HAL_GPIO_Init+0x300>)
 800c7e0:	693b      	ldr	r3, [r7, #16]
 800c7e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800c7e4:	4b24      	ldr	r3, [pc, #144]	@ (800c878 <HAL_GPIO_Init+0x300>)
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	43db      	mvns	r3, r3
 800c7ee:	693a      	ldr	r2, [r7, #16]
 800c7f0:	4013      	ands	r3, r2
 800c7f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d003      	beq.n	800c808 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800c800:	693a      	ldr	r2, [r7, #16]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	4313      	orrs	r3, r2
 800c806:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c808:	4a1b      	ldr	r2, [pc, #108]	@ (800c878 <HAL_GPIO_Init+0x300>)
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c80e:	4b1a      	ldr	r3, [pc, #104]	@ (800c878 <HAL_GPIO_Init+0x300>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	43db      	mvns	r3, r3
 800c818:	693a      	ldr	r2, [r7, #16]
 800c81a:	4013      	ands	r3, r2
 800c81c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c826:	2b00      	cmp	r3, #0
 800c828:	d003      	beq.n	800c832 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800c82a:	693a      	ldr	r2, [r7, #16]
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	4313      	orrs	r3, r2
 800c830:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c832:	4a11      	ldr	r2, [pc, #68]	@ (800c878 <HAL_GPIO_Init+0x300>)
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	3301      	adds	r3, #1
 800c83c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	681a      	ldr	r2, [r3, #0]
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	fa22 f303 	lsr.w	r3, r2, r3
 800c848:	2b00      	cmp	r3, #0
 800c84a:	f47f ae9d 	bne.w	800c588 <HAL_GPIO_Init+0x10>
  }
}
 800c84e:	bf00      	nop
 800c850:	bf00      	nop
 800c852:	371c      	adds	r7, #28
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr
 800c85c:	40021000 	.word	0x40021000
 800c860:	40010000 	.word	0x40010000
 800c864:	48000400 	.word	0x48000400
 800c868:	48000800 	.word	0x48000800
 800c86c:	48000c00 	.word	0x48000c00
 800c870:	48001000 	.word	0x48001000
 800c874:	48001400 	.word	0x48001400
 800c878:	40010400 	.word	0x40010400

0800c87c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	460b      	mov	r3, r1
 800c886:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	691a      	ldr	r2, [r3, #16]
 800c88c:	887b      	ldrh	r3, [r7, #2]
 800c88e:	4013      	ands	r3, r2
 800c890:	2b00      	cmp	r3, #0
 800c892:	d002      	beq.n	800c89a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c894:	2301      	movs	r3, #1
 800c896:	73fb      	strb	r3, [r7, #15]
 800c898:	e001      	b.n	800c89e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c89a:	2300      	movs	r3, #0
 800c89c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c89e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3714      	adds	r7, #20
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr

0800c8ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	460b      	mov	r3, r1
 800c8b6:	807b      	strh	r3, [r7, #2]
 800c8b8:	4613      	mov	r3, r2
 800c8ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c8bc:	787b      	ldrb	r3, [r7, #1]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d003      	beq.n	800c8ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c8c2:	887a      	ldrh	r2, [r7, #2]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c8c8:	e002      	b.n	800c8d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c8ca:	887a      	ldrh	r2, [r7, #2]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c8d0:	bf00      	nop
 800c8d2:	370c      	adds	r7, #12
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr

0800c8dc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	695b      	ldr	r3, [r3, #20]
 800c8ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c8ee:	887a      	ldrh	r2, [r7, #2]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	4013      	ands	r3, r2
 800c8f4:	041a      	lsls	r2, r3, #16
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	43d9      	mvns	r1, r3
 800c8fa:	887b      	ldrh	r3, [r7, #2]
 800c8fc:	400b      	ands	r3, r1
 800c8fe:	431a      	orrs	r2, r3
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	619a      	str	r2, [r3, #24]
}
 800c904:	bf00      	nop
 800c906:	3714      	adds	r7, #20
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	4603      	mov	r3, r0
 800c918:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800c91a:	4b08      	ldr	r3, [pc, #32]	@ (800c93c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c91c:	695a      	ldr	r2, [r3, #20]
 800c91e:	88fb      	ldrh	r3, [r7, #6]
 800c920:	4013      	ands	r3, r2
 800c922:	2b00      	cmp	r3, #0
 800c924:	d006      	beq.n	800c934 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c926:	4a05      	ldr	r2, [pc, #20]	@ (800c93c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c928:	88fb      	ldrh	r3, [r7, #6]
 800c92a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c92c:	88fb      	ldrh	r3, [r7, #6]
 800c92e:	4618      	mov	r0, r3
 800c930:	f7fb fcc8 	bl	80082c4 <HAL_GPIO_EXTI_Callback>
  }
}
 800c934:	bf00      	nop
 800c936:	3708      	adds	r7, #8
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	40010400 	.word	0x40010400

0800c940 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c940:	b480      	push	{r7}
 800c942:	b085      	sub	sp, #20
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d141      	bne.n	800c9d2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c94e:	4b4b      	ldr	r3, [pc, #300]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c95a:	d131      	bne.n	800c9c0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c95c:	4b47      	ldr	r3, [pc, #284]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c95e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c962:	4a46      	ldr	r2, [pc, #280]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c964:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c968:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c96c:	4b43      	ldr	r3, [pc, #268]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c974:	4a41      	ldr	r2, [pc, #260]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c976:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c97a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c97c:	4b40      	ldr	r3, [pc, #256]	@ (800ca80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	2232      	movs	r2, #50	@ 0x32
 800c982:	fb02 f303 	mul.w	r3, r2, r3
 800c986:	4a3f      	ldr	r2, [pc, #252]	@ (800ca84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c988:	fba2 2303 	umull	r2, r3, r2, r3
 800c98c:	0c9b      	lsrs	r3, r3, #18
 800c98e:	3301      	adds	r3, #1
 800c990:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c992:	e002      	b.n	800c99a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	3b01      	subs	r3, #1
 800c998:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c99a:	4b38      	ldr	r3, [pc, #224]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c99c:	695b      	ldr	r3, [r3, #20]
 800c99e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9a6:	d102      	bne.n	800c9ae <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d1f2      	bne.n	800c994 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c9ae:	4b33      	ldr	r3, [pc, #204]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9b0:	695b      	ldr	r3, [r3, #20]
 800c9b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c9b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9ba:	d158      	bne.n	800ca6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c9bc:	2303      	movs	r3, #3
 800c9be:	e057      	b.n	800ca70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c9c0:	4b2e      	ldr	r3, [pc, #184]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9c6:	4a2d      	ldr	r2, [pc, #180]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c9cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800c9d0:	e04d      	b.n	800ca6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9d8:	d141      	bne.n	800ca5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c9da:	4b28      	ldr	r3, [pc, #160]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c9e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c9e6:	d131      	bne.n	800ca4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c9e8:	4b24      	ldr	r3, [pc, #144]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c9ee:	4a23      	ldr	r2, [pc, #140]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c9f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c9f8:	4b20      	ldr	r3, [pc, #128]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800ca00:	4a1e      	ldr	r2, [pc, #120]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ca06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ca08:	4b1d      	ldr	r3, [pc, #116]	@ (800ca80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2232      	movs	r2, #50	@ 0x32
 800ca0e:	fb02 f303 	mul.w	r3, r2, r3
 800ca12:	4a1c      	ldr	r2, [pc, #112]	@ (800ca84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800ca14:	fba2 2303 	umull	r2, r3, r2, r3
 800ca18:	0c9b      	lsrs	r3, r3, #18
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ca1e:	e002      	b.n	800ca26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	3b01      	subs	r3, #1
 800ca24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800ca26:	4b15      	ldr	r3, [pc, #84]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca28:	695b      	ldr	r3, [r3, #20]
 800ca2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca32:	d102      	bne.n	800ca3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1f2      	bne.n	800ca20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800ca3a:	4b10      	ldr	r3, [pc, #64]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca3c:	695b      	ldr	r3, [r3, #20]
 800ca3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ca42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca46:	d112      	bne.n	800ca6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800ca48:	2303      	movs	r3, #3
 800ca4a:	e011      	b.n	800ca70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800ca4c:	4b0b      	ldr	r3, [pc, #44]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca52:	4a0a      	ldr	r2, [pc, #40]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ca58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800ca5c:	e007      	b.n	800ca6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800ca5e:	4b07      	ldr	r3, [pc, #28]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800ca66:	4a05      	ldr	r2, [pc, #20]	@ (800ca7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800ca68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ca6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800ca6e:	2300      	movs	r3, #0
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3714      	adds	r7, #20
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr
 800ca7c:	40007000 	.word	0x40007000
 800ca80:	20000338 	.word	0x20000338
 800ca84:	431bde83 	.word	0x431bde83

0800ca88 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800ca8c:	4b05      	ldr	r3, [pc, #20]	@ (800caa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800ca8e:	689b      	ldr	r3, [r3, #8]
 800ca90:	4a04      	ldr	r2, [pc, #16]	@ (800caa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800ca92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ca96:	6093      	str	r3, [r2, #8]
}
 800ca98:	bf00      	nop
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr
 800caa2:	bf00      	nop
 800caa4:	40007000 	.word	0x40007000

0800caa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b088      	sub	sp, #32
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d101      	bne.n	800caba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cab6:	2301      	movs	r3, #1
 800cab8:	e2fe      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f003 0301 	and.w	r3, r3, #1
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d075      	beq.n	800cbb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cac6:	4b97      	ldr	r3, [pc, #604]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	f003 030c 	and.w	r3, r3, #12
 800cace:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cad0:	4b94      	ldr	r3, [pc, #592]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cad2:	68db      	ldr	r3, [r3, #12]
 800cad4:	f003 0303 	and.w	r3, r3, #3
 800cad8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800cada:	69bb      	ldr	r3, [r7, #24]
 800cadc:	2b0c      	cmp	r3, #12
 800cade:	d102      	bne.n	800cae6 <HAL_RCC_OscConfig+0x3e>
 800cae0:	697b      	ldr	r3, [r7, #20]
 800cae2:	2b03      	cmp	r3, #3
 800cae4:	d002      	beq.n	800caec <HAL_RCC_OscConfig+0x44>
 800cae6:	69bb      	ldr	r3, [r7, #24]
 800cae8:	2b08      	cmp	r3, #8
 800caea:	d10b      	bne.n	800cb04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800caec:	4b8d      	ldr	r3, [pc, #564]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d05b      	beq.n	800cbb0 <HAL_RCC_OscConfig+0x108>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d157      	bne.n	800cbb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cb00:	2301      	movs	r3, #1
 800cb02:	e2d9      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb0c:	d106      	bne.n	800cb1c <HAL_RCC_OscConfig+0x74>
 800cb0e:	4b85      	ldr	r3, [pc, #532]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	4a84      	ldr	r2, [pc, #528]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cb14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cb18:	6013      	str	r3, [r2, #0]
 800cb1a:	e01d      	b.n	800cb58 <HAL_RCC_OscConfig+0xb0>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cb24:	d10c      	bne.n	800cb40 <HAL_RCC_OscConfig+0x98>
 800cb26:	4b7f      	ldr	r3, [pc, #508]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	4a7e      	ldr	r2, [pc, #504]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cb2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cb30:	6013      	str	r3, [r2, #0]
 800cb32:	4b7c      	ldr	r3, [pc, #496]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a7b      	ldr	r2, [pc, #492]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cb38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cb3c:	6013      	str	r3, [r2, #0]
 800cb3e:	e00b      	b.n	800cb58 <HAL_RCC_OscConfig+0xb0>
 800cb40:	4b78      	ldr	r3, [pc, #480]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a77      	ldr	r2, [pc, #476]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cb46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cb4a:	6013      	str	r3, [r2, #0]
 800cb4c:	4b75      	ldr	r3, [pc, #468]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a74      	ldr	r2, [pc, #464]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cb52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cb56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d013      	beq.n	800cb88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb60:	f7fd fc44 	bl	800a3ec <HAL_GetTick>
 800cb64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cb66:	e008      	b.n	800cb7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cb68:	f7fd fc40 	bl	800a3ec <HAL_GetTick>
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	1ad3      	subs	r3, r2, r3
 800cb72:	2b64      	cmp	r3, #100	@ 0x64
 800cb74:	d901      	bls.n	800cb7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cb76:	2303      	movs	r3, #3
 800cb78:	e29e      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cb7a:	4b6a      	ldr	r3, [pc, #424]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d0f0      	beq.n	800cb68 <HAL_RCC_OscConfig+0xc0>
 800cb86:	e014      	b.n	800cbb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb88:	f7fd fc30 	bl	800a3ec <HAL_GetTick>
 800cb8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cb8e:	e008      	b.n	800cba2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cb90:	f7fd fc2c 	bl	800a3ec <HAL_GetTick>
 800cb94:	4602      	mov	r2, r0
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	1ad3      	subs	r3, r2, r3
 800cb9a:	2b64      	cmp	r3, #100	@ 0x64
 800cb9c:	d901      	bls.n	800cba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cb9e:	2303      	movs	r3, #3
 800cba0:	e28a      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800cba2:	4b60      	ldr	r3, [pc, #384]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d1f0      	bne.n	800cb90 <HAL_RCC_OscConfig+0xe8>
 800cbae:	e000      	b.n	800cbb2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	f003 0302 	and.w	r3, r3, #2
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d075      	beq.n	800ccaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cbbe:	4b59      	ldr	r3, [pc, #356]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	f003 030c 	and.w	r3, r3, #12
 800cbc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800cbc8:	4b56      	ldr	r3, [pc, #344]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	f003 0303 	and.w	r3, r3, #3
 800cbd0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	2b0c      	cmp	r3, #12
 800cbd6:	d102      	bne.n	800cbde <HAL_RCC_OscConfig+0x136>
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	2b02      	cmp	r3, #2
 800cbdc:	d002      	beq.n	800cbe4 <HAL_RCC_OscConfig+0x13c>
 800cbde:	69bb      	ldr	r3, [r7, #24]
 800cbe0:	2b04      	cmp	r3, #4
 800cbe2:	d11f      	bne.n	800cc24 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cbe4:	4b4f      	ldr	r3, [pc, #316]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d005      	beq.n	800cbfc <HAL_RCC_OscConfig+0x154>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	68db      	ldr	r3, [r3, #12]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d101      	bne.n	800cbfc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e25d      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbfc:	4b49      	ldr	r3, [pc, #292]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	691b      	ldr	r3, [r3, #16]
 800cc08:	061b      	lsls	r3, r3, #24
 800cc0a:	4946      	ldr	r1, [pc, #280]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800cc10:	4b45      	ldr	r3, [pc, #276]	@ (800cd28 <HAL_RCC_OscConfig+0x280>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f7fd fb9d 	bl	800a354 <HAL_InitTick>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d043      	beq.n	800cca8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800cc20:	2301      	movs	r3, #1
 800cc22:	e249      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d023      	beq.n	800cc74 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cc2c:	4b3d      	ldr	r3, [pc, #244]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a3c      	ldr	r2, [pc, #240]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cc32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cc36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc38:	f7fd fbd8 	bl	800a3ec <HAL_GetTick>
 800cc3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cc3e:	e008      	b.n	800cc52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cc40:	f7fd fbd4 	bl	800a3ec <HAL_GetTick>
 800cc44:	4602      	mov	r2, r0
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	1ad3      	subs	r3, r2, r3
 800cc4a:	2b02      	cmp	r3, #2
 800cc4c:	d901      	bls.n	800cc52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800cc4e:	2303      	movs	r3, #3
 800cc50:	e232      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cc52:	4b34      	ldr	r3, [pc, #208]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d0f0      	beq.n	800cc40 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cc5e:	4b31      	ldr	r3, [pc, #196]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	691b      	ldr	r3, [r3, #16]
 800cc6a:	061b      	lsls	r3, r3, #24
 800cc6c:	492d      	ldr	r1, [pc, #180]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	604b      	str	r3, [r1, #4]
 800cc72:	e01a      	b.n	800ccaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cc74:	4b2b      	ldr	r3, [pc, #172]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4a2a      	ldr	r2, [pc, #168]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cc7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cc7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc80:	f7fd fbb4 	bl	800a3ec <HAL_GetTick>
 800cc84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cc86:	e008      	b.n	800cc9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cc88:	f7fd fbb0 	bl	800a3ec <HAL_GetTick>
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	1ad3      	subs	r3, r2, r3
 800cc92:	2b02      	cmp	r3, #2
 800cc94:	d901      	bls.n	800cc9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800cc96:	2303      	movs	r3, #3
 800cc98:	e20e      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800cc9a:	4b22      	ldr	r3, [pc, #136]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d1f0      	bne.n	800cc88 <HAL_RCC_OscConfig+0x1e0>
 800cca6:	e000      	b.n	800ccaa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cca8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f003 0308 	and.w	r3, r3, #8
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d041      	beq.n	800cd3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	695b      	ldr	r3, [r3, #20]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d01c      	beq.n	800ccf8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ccbe:	4b19      	ldr	r3, [pc, #100]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800ccc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ccc4:	4a17      	ldr	r2, [pc, #92]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800ccc6:	f043 0301 	orr.w	r3, r3, #1
 800ccca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccce:	f7fd fb8d 	bl	800a3ec <HAL_GetTick>
 800ccd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ccd4:	e008      	b.n	800cce8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ccd6:	f7fd fb89 	bl	800a3ec <HAL_GetTick>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	1ad3      	subs	r3, r2, r3
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d901      	bls.n	800cce8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800cce4:	2303      	movs	r3, #3
 800cce6:	e1e7      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cce8:	4b0e      	ldr	r3, [pc, #56]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800ccea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ccee:	f003 0302 	and.w	r3, r3, #2
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d0ef      	beq.n	800ccd6 <HAL_RCC_OscConfig+0x22e>
 800ccf6:	e020      	b.n	800cd3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ccf8:	4b0a      	ldr	r3, [pc, #40]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800ccfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ccfe:	4a09      	ldr	r2, [pc, #36]	@ (800cd24 <HAL_RCC_OscConfig+0x27c>)
 800cd00:	f023 0301 	bic.w	r3, r3, #1
 800cd04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd08:	f7fd fb70 	bl	800a3ec <HAL_GetTick>
 800cd0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cd0e:	e00d      	b.n	800cd2c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cd10:	f7fd fb6c 	bl	800a3ec <HAL_GetTick>
 800cd14:	4602      	mov	r2, r0
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	1ad3      	subs	r3, r2, r3
 800cd1a:	2b02      	cmp	r3, #2
 800cd1c:	d906      	bls.n	800cd2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800cd1e:	2303      	movs	r3, #3
 800cd20:	e1ca      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
 800cd22:	bf00      	nop
 800cd24:	40021000 	.word	0x40021000
 800cd28:	2000033c 	.word	0x2000033c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cd2c:	4b8c      	ldr	r3, [pc, #560]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800cd2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cd32:	f003 0302 	and.w	r3, r3, #2
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d1ea      	bne.n	800cd10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f003 0304 	and.w	r3, r3, #4
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f000 80a6 	beq.w	800ce94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800cd4c:	4b84      	ldr	r3, [pc, #528]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800cd4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d101      	bne.n	800cd5c <HAL_RCC_OscConfig+0x2b4>
 800cd58:	2301      	movs	r3, #1
 800cd5a:	e000      	b.n	800cd5e <HAL_RCC_OscConfig+0x2b6>
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d00d      	beq.n	800cd7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd62:	4b7f      	ldr	r3, [pc, #508]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800cd64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd66:	4a7e      	ldr	r2, [pc, #504]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800cd68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cd6c:	6593      	str	r3, [r2, #88]	@ 0x58
 800cd6e:	4b7c      	ldr	r3, [pc, #496]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800cd70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd76:	60fb      	str	r3, [r7, #12]
 800cd78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cd7e:	4b79      	ldr	r3, [pc, #484]	@ (800cf64 <HAL_RCC_OscConfig+0x4bc>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d118      	bne.n	800cdbc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd8a:	4b76      	ldr	r3, [pc, #472]	@ (800cf64 <HAL_RCC_OscConfig+0x4bc>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	4a75      	ldr	r2, [pc, #468]	@ (800cf64 <HAL_RCC_OscConfig+0x4bc>)
 800cd90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cd96:	f7fd fb29 	bl	800a3ec <HAL_GetTick>
 800cd9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cd9c:	e008      	b.n	800cdb0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd9e:	f7fd fb25 	bl	800a3ec <HAL_GetTick>
 800cda2:	4602      	mov	r2, r0
 800cda4:	693b      	ldr	r3, [r7, #16]
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	2b02      	cmp	r3, #2
 800cdaa:	d901      	bls.n	800cdb0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800cdac:	2303      	movs	r3, #3
 800cdae:	e183      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cdb0:	4b6c      	ldr	r3, [pc, #432]	@ (800cf64 <HAL_RCC_OscConfig+0x4bc>)
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d0f0      	beq.n	800cd9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	689b      	ldr	r3, [r3, #8]
 800cdc0:	2b01      	cmp	r3, #1
 800cdc2:	d108      	bne.n	800cdd6 <HAL_RCC_OscConfig+0x32e>
 800cdc4:	4b66      	ldr	r3, [pc, #408]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800cdc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdca:	4a65      	ldr	r2, [pc, #404]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800cdcc:	f043 0301 	orr.w	r3, r3, #1
 800cdd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cdd4:	e024      	b.n	800ce20 <HAL_RCC_OscConfig+0x378>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	689b      	ldr	r3, [r3, #8]
 800cdda:	2b05      	cmp	r3, #5
 800cddc:	d110      	bne.n	800ce00 <HAL_RCC_OscConfig+0x358>
 800cdde:	4b60      	ldr	r3, [pc, #384]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800cde0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cde4:	4a5e      	ldr	r2, [pc, #376]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800cde6:	f043 0304 	orr.w	r3, r3, #4
 800cdea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cdee:	4b5c      	ldr	r3, [pc, #368]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800cdf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdf4:	4a5a      	ldr	r2, [pc, #360]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800cdf6:	f043 0301 	orr.w	r3, r3, #1
 800cdfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800cdfe:	e00f      	b.n	800ce20 <HAL_RCC_OscConfig+0x378>
 800ce00:	4b57      	ldr	r3, [pc, #348]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800ce02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce06:	4a56      	ldr	r2, [pc, #344]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800ce08:	f023 0301 	bic.w	r3, r3, #1
 800ce0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800ce10:	4b53      	ldr	r3, [pc, #332]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800ce12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce16:	4a52      	ldr	r2, [pc, #328]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800ce18:	f023 0304 	bic.w	r3, r3, #4
 800ce1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d016      	beq.n	800ce56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce28:	f7fd fae0 	bl	800a3ec <HAL_GetTick>
 800ce2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ce2e:	e00a      	b.n	800ce46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce30:	f7fd fadc 	bl	800a3ec <HAL_GetTick>
 800ce34:	4602      	mov	r2, r0
 800ce36:	693b      	ldr	r3, [r7, #16]
 800ce38:	1ad3      	subs	r3, r2, r3
 800ce3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce3e:	4293      	cmp	r3, r2
 800ce40:	d901      	bls.n	800ce46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800ce42:	2303      	movs	r3, #3
 800ce44:	e138      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ce46:	4b46      	ldr	r3, [pc, #280]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800ce48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce4c:	f003 0302 	and.w	r3, r3, #2
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d0ed      	beq.n	800ce30 <HAL_RCC_OscConfig+0x388>
 800ce54:	e015      	b.n	800ce82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce56:	f7fd fac9 	bl	800a3ec <HAL_GetTick>
 800ce5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ce5c:	e00a      	b.n	800ce74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce5e:	f7fd fac5 	bl	800a3ec <HAL_GetTick>
 800ce62:	4602      	mov	r2, r0
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	1ad3      	subs	r3, r2, r3
 800ce68:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce6c:	4293      	cmp	r3, r2
 800ce6e:	d901      	bls.n	800ce74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800ce70:	2303      	movs	r3, #3
 800ce72:	e121      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ce74:	4b3a      	ldr	r3, [pc, #232]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800ce76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce7a:	f003 0302 	and.w	r3, r3, #2
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d1ed      	bne.n	800ce5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ce82:	7ffb      	ldrb	r3, [r7, #31]
 800ce84:	2b01      	cmp	r3, #1
 800ce86:	d105      	bne.n	800ce94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce88:	4b35      	ldr	r3, [pc, #212]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800ce8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce8c:	4a34      	ldr	r2, [pc, #208]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800ce8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ce92:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f003 0320 	and.w	r3, r3, #32
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d03c      	beq.n	800cf1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	699b      	ldr	r3, [r3, #24]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d01c      	beq.n	800cee2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cea8:	4b2d      	ldr	r3, [pc, #180]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800ceaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ceae:	4a2c      	ldr	r2, [pc, #176]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800ceb0:	f043 0301 	orr.w	r3, r3, #1
 800ceb4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ceb8:	f7fd fa98 	bl	800a3ec <HAL_GetTick>
 800cebc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800cebe:	e008      	b.n	800ced2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cec0:	f7fd fa94 	bl	800a3ec <HAL_GetTick>
 800cec4:	4602      	mov	r2, r0
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	2b02      	cmp	r3, #2
 800cecc:	d901      	bls.n	800ced2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800cece:	2303      	movs	r3, #3
 800ced0:	e0f2      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ced2:	4b23      	ldr	r3, [pc, #140]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800ced4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ced8:	f003 0302 	and.w	r3, r3, #2
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d0ef      	beq.n	800cec0 <HAL_RCC_OscConfig+0x418>
 800cee0:	e01b      	b.n	800cf1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cee2:	4b1f      	ldr	r3, [pc, #124]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800cee4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cee8:	4a1d      	ldr	r2, [pc, #116]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800ceea:	f023 0301 	bic.w	r3, r3, #1
 800ceee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cef2:	f7fd fa7b 	bl	800a3ec <HAL_GetTick>
 800cef6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cef8:	e008      	b.n	800cf0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cefa:	f7fd fa77 	bl	800a3ec <HAL_GetTick>
 800cefe:	4602      	mov	r2, r0
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	1ad3      	subs	r3, r2, r3
 800cf04:	2b02      	cmp	r3, #2
 800cf06:	d901      	bls.n	800cf0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800cf08:	2303      	movs	r3, #3
 800cf0a:	e0d5      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800cf0c:	4b14      	ldr	r3, [pc, #80]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800cf0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cf12:	f003 0302 	and.w	r3, r3, #2
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1ef      	bne.n	800cefa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	69db      	ldr	r3, [r3, #28]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	f000 80c9 	beq.w	800d0b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cf24:	4b0e      	ldr	r3, [pc, #56]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	f003 030c 	and.w	r3, r3, #12
 800cf2c:	2b0c      	cmp	r3, #12
 800cf2e:	f000 8083 	beq.w	800d038 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	69db      	ldr	r3, [r3, #28]
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	d15e      	bne.n	800cff8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf3a:	4b09      	ldr	r3, [pc, #36]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4a08      	ldr	r2, [pc, #32]	@ (800cf60 <HAL_RCC_OscConfig+0x4b8>)
 800cf40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cf44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf46:	f7fd fa51 	bl	800a3ec <HAL_GetTick>
 800cf4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf4c:	e00c      	b.n	800cf68 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf4e:	f7fd fa4d 	bl	800a3ec <HAL_GetTick>
 800cf52:	4602      	mov	r2, r0
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	1ad3      	subs	r3, r2, r3
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d905      	bls.n	800cf68 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800cf5c:	2303      	movs	r3, #3
 800cf5e:	e0ab      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
 800cf60:	40021000 	.word	0x40021000
 800cf64:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cf68:	4b55      	ldr	r3, [pc, #340]	@ (800d0c0 <HAL_RCC_OscConfig+0x618>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d1ec      	bne.n	800cf4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cf74:	4b52      	ldr	r3, [pc, #328]	@ (800d0c0 <HAL_RCC_OscConfig+0x618>)
 800cf76:	68da      	ldr	r2, [r3, #12]
 800cf78:	4b52      	ldr	r3, [pc, #328]	@ (800d0c4 <HAL_RCC_OscConfig+0x61c>)
 800cf7a:	4013      	ands	r3, r2
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	6a11      	ldr	r1, [r2, #32]
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800cf84:	3a01      	subs	r2, #1
 800cf86:	0112      	lsls	r2, r2, #4
 800cf88:	4311      	orrs	r1, r2
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800cf8e:	0212      	lsls	r2, r2, #8
 800cf90:	4311      	orrs	r1, r2
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800cf96:	0852      	lsrs	r2, r2, #1
 800cf98:	3a01      	subs	r2, #1
 800cf9a:	0552      	lsls	r2, r2, #21
 800cf9c:	4311      	orrs	r1, r2
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800cfa2:	0852      	lsrs	r2, r2, #1
 800cfa4:	3a01      	subs	r2, #1
 800cfa6:	0652      	lsls	r2, r2, #25
 800cfa8:	4311      	orrs	r1, r2
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cfae:	06d2      	lsls	r2, r2, #27
 800cfb0:	430a      	orrs	r2, r1
 800cfb2:	4943      	ldr	r1, [pc, #268]	@ (800d0c0 <HAL_RCC_OscConfig+0x618>)
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cfb8:	4b41      	ldr	r3, [pc, #260]	@ (800d0c0 <HAL_RCC_OscConfig+0x618>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	4a40      	ldr	r2, [pc, #256]	@ (800d0c0 <HAL_RCC_OscConfig+0x618>)
 800cfbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cfc2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cfc4:	4b3e      	ldr	r3, [pc, #248]	@ (800d0c0 <HAL_RCC_OscConfig+0x618>)
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	4a3d      	ldr	r2, [pc, #244]	@ (800d0c0 <HAL_RCC_OscConfig+0x618>)
 800cfca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cfce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfd0:	f7fd fa0c 	bl	800a3ec <HAL_GetTick>
 800cfd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cfd6:	e008      	b.n	800cfea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cfd8:	f7fd fa08 	bl	800a3ec <HAL_GetTick>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	2b02      	cmp	r3, #2
 800cfe4:	d901      	bls.n	800cfea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800cfe6:	2303      	movs	r3, #3
 800cfe8:	e066      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cfea:	4b35      	ldr	r3, [pc, #212]	@ (800d0c0 <HAL_RCC_OscConfig+0x618>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d0f0      	beq.n	800cfd8 <HAL_RCC_OscConfig+0x530>
 800cff6:	e05e      	b.n	800d0b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cff8:	4b31      	ldr	r3, [pc, #196]	@ (800d0c0 <HAL_RCC_OscConfig+0x618>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	4a30      	ldr	r2, [pc, #192]	@ (800d0c0 <HAL_RCC_OscConfig+0x618>)
 800cffe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d004:	f7fd f9f2 	bl	800a3ec <HAL_GetTick>
 800d008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d00a:	e008      	b.n	800d01e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d00c:	f7fd f9ee 	bl	800a3ec <HAL_GetTick>
 800d010:	4602      	mov	r2, r0
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	1ad3      	subs	r3, r2, r3
 800d016:	2b02      	cmp	r3, #2
 800d018:	d901      	bls.n	800d01e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800d01a:	2303      	movs	r3, #3
 800d01c:	e04c      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d01e:	4b28      	ldr	r3, [pc, #160]	@ (800d0c0 <HAL_RCC_OscConfig+0x618>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1f0      	bne.n	800d00c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800d02a:	4b25      	ldr	r3, [pc, #148]	@ (800d0c0 <HAL_RCC_OscConfig+0x618>)
 800d02c:	68da      	ldr	r2, [r3, #12]
 800d02e:	4924      	ldr	r1, [pc, #144]	@ (800d0c0 <HAL_RCC_OscConfig+0x618>)
 800d030:	4b25      	ldr	r3, [pc, #148]	@ (800d0c8 <HAL_RCC_OscConfig+0x620>)
 800d032:	4013      	ands	r3, r2
 800d034:	60cb      	str	r3, [r1, #12]
 800d036:	e03e      	b.n	800d0b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	69db      	ldr	r3, [r3, #28]
 800d03c:	2b01      	cmp	r3, #1
 800d03e:	d101      	bne.n	800d044 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800d040:	2301      	movs	r3, #1
 800d042:	e039      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800d044:	4b1e      	ldr	r3, [pc, #120]	@ (800d0c0 <HAL_RCC_OscConfig+0x618>)
 800d046:	68db      	ldr	r3, [r3, #12]
 800d048:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	f003 0203 	and.w	r2, r3, #3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6a1b      	ldr	r3, [r3, #32]
 800d054:	429a      	cmp	r2, r3
 800d056:	d12c      	bne.n	800d0b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d062:	3b01      	subs	r3, #1
 800d064:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d066:	429a      	cmp	r2, r3
 800d068:	d123      	bne.n	800d0b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d074:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d076:	429a      	cmp	r2, r3
 800d078:	d11b      	bne.n	800d0b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d084:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d086:	429a      	cmp	r2, r3
 800d088:	d113      	bne.n	800d0b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d094:	085b      	lsrs	r3, r3, #1
 800d096:	3b01      	subs	r3, #1
 800d098:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d109      	bne.n	800d0b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d0a8:	085b      	lsrs	r3, r3, #1
 800d0aa:	3b01      	subs	r3, #1
 800d0ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d001      	beq.n	800d0b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e000      	b.n	800d0b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800d0b6:	2300      	movs	r3, #0
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3720      	adds	r7, #32
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	40021000 	.word	0x40021000
 800d0c4:	019f800c 	.word	0x019f800c
 800d0c8:	feeefffc 	.word	0xfeeefffc

0800d0cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b086      	sub	sp, #24
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d101      	bne.n	800d0e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d0e0:	2301      	movs	r3, #1
 800d0e2:	e11e      	b.n	800d322 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d0e4:	4b91      	ldr	r3, [pc, #580]	@ (800d32c <HAL_RCC_ClockConfig+0x260>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f003 030f 	and.w	r3, r3, #15
 800d0ec:	683a      	ldr	r2, [r7, #0]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d910      	bls.n	800d114 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d0f2:	4b8e      	ldr	r3, [pc, #568]	@ (800d32c <HAL_RCC_ClockConfig+0x260>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f023 020f 	bic.w	r2, r3, #15
 800d0fa:	498c      	ldr	r1, [pc, #560]	@ (800d32c <HAL_RCC_ClockConfig+0x260>)
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d102:	4b8a      	ldr	r3, [pc, #552]	@ (800d32c <HAL_RCC_ClockConfig+0x260>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	f003 030f 	and.w	r3, r3, #15
 800d10a:	683a      	ldr	r2, [r7, #0]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d001      	beq.n	800d114 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d110:	2301      	movs	r3, #1
 800d112:	e106      	b.n	800d322 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f003 0301 	and.w	r3, r3, #1
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d073      	beq.n	800d208 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	2b03      	cmp	r3, #3
 800d126:	d129      	bne.n	800d17c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d128:	4b81      	ldr	r3, [pc, #516]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d130:	2b00      	cmp	r3, #0
 800d132:	d101      	bne.n	800d138 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d134:	2301      	movs	r3, #1
 800d136:	e0f4      	b.n	800d322 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d138:	f000 f99e 	bl	800d478 <RCC_GetSysClockFreqFromPLLSource>
 800d13c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	4a7c      	ldr	r2, [pc, #496]	@ (800d334 <HAL_RCC_ClockConfig+0x268>)
 800d142:	4293      	cmp	r3, r2
 800d144:	d93f      	bls.n	800d1c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d146:	4b7a      	ldr	r3, [pc, #488]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d009      	beq.n	800d166 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d033      	beq.n	800d1c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d162:	2b00      	cmp	r3, #0
 800d164:	d12f      	bne.n	800d1c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d166:	4b72      	ldr	r3, [pc, #456]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d168:	689b      	ldr	r3, [r3, #8]
 800d16a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d16e:	4a70      	ldr	r2, [pc, #448]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d170:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d174:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d176:	2380      	movs	r3, #128	@ 0x80
 800d178:	617b      	str	r3, [r7, #20]
 800d17a:	e024      	b.n	800d1c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	2b02      	cmp	r3, #2
 800d182:	d107      	bne.n	800d194 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d184:	4b6a      	ldr	r3, [pc, #424]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d109      	bne.n	800d1a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d190:	2301      	movs	r3, #1
 800d192:	e0c6      	b.n	800d322 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d194:	4b66      	ldr	r3, [pc, #408]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d101      	bne.n	800d1a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e0be      	b.n	800d322 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d1a4:	f000 f8ce 	bl	800d344 <HAL_RCC_GetSysClockFreq>
 800d1a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	4a61      	ldr	r2, [pc, #388]	@ (800d334 <HAL_RCC_ClockConfig+0x268>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d909      	bls.n	800d1c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d1b2:	4b5f      	ldr	r3, [pc, #380]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d1b4:	689b      	ldr	r3, [r3, #8]
 800d1b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d1ba:	4a5d      	ldr	r2, [pc, #372]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d1bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d1c2:	2380      	movs	r3, #128	@ 0x80
 800d1c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d1c6:	4b5a      	ldr	r3, [pc, #360]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d1c8:	689b      	ldr	r3, [r3, #8]
 800d1ca:	f023 0203 	bic.w	r2, r3, #3
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	4957      	ldr	r1, [pc, #348]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1d8:	f7fd f908 	bl	800a3ec <HAL_GetTick>
 800d1dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d1de:	e00a      	b.n	800d1f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d1e0:	f7fd f904 	bl	800a3ec <HAL_GetTick>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	1ad3      	subs	r3, r2, r3
 800d1ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d901      	bls.n	800d1f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	e095      	b.n	800d322 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d1f6:	4b4e      	ldr	r3, [pc, #312]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d1f8:	689b      	ldr	r3, [r3, #8]
 800d1fa:	f003 020c 	and.w	r2, r3, #12
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	009b      	lsls	r3, r3, #2
 800d204:	429a      	cmp	r2, r3
 800d206:	d1eb      	bne.n	800d1e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f003 0302 	and.w	r3, r3, #2
 800d210:	2b00      	cmp	r3, #0
 800d212:	d023      	beq.n	800d25c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f003 0304 	and.w	r3, r3, #4
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d005      	beq.n	800d22c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d220:	4b43      	ldr	r3, [pc, #268]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	4a42      	ldr	r2, [pc, #264]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d226:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d22a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f003 0308 	and.w	r3, r3, #8
 800d234:	2b00      	cmp	r3, #0
 800d236:	d007      	beq.n	800d248 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d238:	4b3d      	ldr	r3, [pc, #244]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d240:	4a3b      	ldr	r2, [pc, #236]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d242:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d246:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d248:	4b39      	ldr	r3, [pc, #228]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d24a:	689b      	ldr	r3, [r3, #8]
 800d24c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	4936      	ldr	r1, [pc, #216]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d256:	4313      	orrs	r3, r2
 800d258:	608b      	str	r3, [r1, #8]
 800d25a:	e008      	b.n	800d26e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	2b80      	cmp	r3, #128	@ 0x80
 800d260:	d105      	bne.n	800d26e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d262:	4b33      	ldr	r3, [pc, #204]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	4a32      	ldr	r2, [pc, #200]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d268:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d26c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d26e:	4b2f      	ldr	r3, [pc, #188]	@ (800d32c <HAL_RCC_ClockConfig+0x260>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	f003 030f 	and.w	r3, r3, #15
 800d276:	683a      	ldr	r2, [r7, #0]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d21d      	bcs.n	800d2b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d27c:	4b2b      	ldr	r3, [pc, #172]	@ (800d32c <HAL_RCC_ClockConfig+0x260>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f023 020f 	bic.w	r2, r3, #15
 800d284:	4929      	ldr	r1, [pc, #164]	@ (800d32c <HAL_RCC_ClockConfig+0x260>)
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	4313      	orrs	r3, r2
 800d28a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800d28c:	f7fd f8ae 	bl	800a3ec <HAL_GetTick>
 800d290:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d292:	e00a      	b.n	800d2aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d294:	f7fd f8aa 	bl	800a3ec <HAL_GetTick>
 800d298:	4602      	mov	r2, r0
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	1ad3      	subs	r3, r2, r3
 800d29e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d901      	bls.n	800d2aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800d2a6:	2303      	movs	r3, #3
 800d2a8:	e03b      	b.n	800d322 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d2aa:	4b20      	ldr	r3, [pc, #128]	@ (800d32c <HAL_RCC_ClockConfig+0x260>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f003 030f 	and.w	r3, r3, #15
 800d2b2:	683a      	ldr	r2, [r7, #0]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d1ed      	bne.n	800d294 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f003 0304 	and.w	r3, r3, #4
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d008      	beq.n	800d2d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d2c4:	4b1a      	ldr	r3, [pc, #104]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d2c6:	689b      	ldr	r3, [r3, #8]
 800d2c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	68db      	ldr	r3, [r3, #12]
 800d2d0:	4917      	ldr	r1, [pc, #92]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f003 0308 	and.w	r3, r3, #8
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d009      	beq.n	800d2f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d2e2:	4b13      	ldr	r3, [pc, #76]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	00db      	lsls	r3, r3, #3
 800d2f0:	490f      	ldr	r1, [pc, #60]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800d2f6:	f000 f825 	bl	800d344 <HAL_RCC_GetSysClockFreq>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	4b0c      	ldr	r3, [pc, #48]	@ (800d330 <HAL_RCC_ClockConfig+0x264>)
 800d2fe:	689b      	ldr	r3, [r3, #8]
 800d300:	091b      	lsrs	r3, r3, #4
 800d302:	f003 030f 	and.w	r3, r3, #15
 800d306:	490c      	ldr	r1, [pc, #48]	@ (800d338 <HAL_RCC_ClockConfig+0x26c>)
 800d308:	5ccb      	ldrb	r3, [r1, r3]
 800d30a:	f003 031f 	and.w	r3, r3, #31
 800d30e:	fa22 f303 	lsr.w	r3, r2, r3
 800d312:	4a0a      	ldr	r2, [pc, #40]	@ (800d33c <HAL_RCC_ClockConfig+0x270>)
 800d314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d316:	4b0a      	ldr	r3, [pc, #40]	@ (800d340 <HAL_RCC_ClockConfig+0x274>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7fd f81a 	bl	800a354 <HAL_InitTick>
 800d320:	4603      	mov	r3, r0
}
 800d322:	4618      	mov	r0, r3
 800d324:	3718      	adds	r7, #24
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	40022000 	.word	0x40022000
 800d330:	40021000 	.word	0x40021000
 800d334:	04c4b400 	.word	0x04c4b400
 800d338:	08014428 	.word	0x08014428
 800d33c:	20000338 	.word	0x20000338
 800d340:	2000033c 	.word	0x2000033c

0800d344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d344:	b480      	push	{r7}
 800d346:	b087      	sub	sp, #28
 800d348:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d34a:	4b2c      	ldr	r3, [pc, #176]	@ (800d3fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d34c:	689b      	ldr	r3, [r3, #8]
 800d34e:	f003 030c 	and.w	r3, r3, #12
 800d352:	2b04      	cmp	r3, #4
 800d354:	d102      	bne.n	800d35c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800d356:	4b2a      	ldr	r3, [pc, #168]	@ (800d400 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d358:	613b      	str	r3, [r7, #16]
 800d35a:	e047      	b.n	800d3ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d35c:	4b27      	ldr	r3, [pc, #156]	@ (800d3fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	f003 030c 	and.w	r3, r3, #12
 800d364:	2b08      	cmp	r3, #8
 800d366:	d102      	bne.n	800d36e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d368:	4b26      	ldr	r3, [pc, #152]	@ (800d404 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d36a:	613b      	str	r3, [r7, #16]
 800d36c:	e03e      	b.n	800d3ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800d36e:	4b23      	ldr	r3, [pc, #140]	@ (800d3fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d370:	689b      	ldr	r3, [r3, #8]
 800d372:	f003 030c 	and.w	r3, r3, #12
 800d376:	2b0c      	cmp	r3, #12
 800d378:	d136      	bne.n	800d3e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d37a:	4b20      	ldr	r3, [pc, #128]	@ (800d3fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	f003 0303 	and.w	r3, r3, #3
 800d382:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d384:	4b1d      	ldr	r3, [pc, #116]	@ (800d3fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d386:	68db      	ldr	r3, [r3, #12]
 800d388:	091b      	lsrs	r3, r3, #4
 800d38a:	f003 030f 	and.w	r3, r3, #15
 800d38e:	3301      	adds	r3, #1
 800d390:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2b03      	cmp	r3, #3
 800d396:	d10c      	bne.n	800d3b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d398:	4a1a      	ldr	r2, [pc, #104]	@ (800d404 <HAL_RCC_GetSysClockFreq+0xc0>)
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3a0:	4a16      	ldr	r2, [pc, #88]	@ (800d3fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d3a2:	68d2      	ldr	r2, [r2, #12]
 800d3a4:	0a12      	lsrs	r2, r2, #8
 800d3a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d3aa:	fb02 f303 	mul.w	r3, r2, r3
 800d3ae:	617b      	str	r3, [r7, #20]
      break;
 800d3b0:	e00c      	b.n	800d3cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d3b2:	4a13      	ldr	r2, [pc, #76]	@ (800d400 <HAL_RCC_GetSysClockFreq+0xbc>)
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ba:	4a10      	ldr	r2, [pc, #64]	@ (800d3fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d3bc:	68d2      	ldr	r2, [r2, #12]
 800d3be:	0a12      	lsrs	r2, r2, #8
 800d3c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d3c4:	fb02 f303 	mul.w	r3, r2, r3
 800d3c8:	617b      	str	r3, [r7, #20]
      break;
 800d3ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d3cc:	4b0b      	ldr	r3, [pc, #44]	@ (800d3fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	0e5b      	lsrs	r3, r3, #25
 800d3d2:	f003 0303 	and.w	r3, r3, #3
 800d3d6:	3301      	adds	r3, #1
 800d3d8:	005b      	lsls	r3, r3, #1
 800d3da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3e4:	613b      	str	r3, [r7, #16]
 800d3e6:	e001      	b.n	800d3ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d3ec:	693b      	ldr	r3, [r7, #16]
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	371c      	adds	r7, #28
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr
 800d3fa:	bf00      	nop
 800d3fc:	40021000 	.word	0x40021000
 800d400:	00f42400 	.word	0x00f42400
 800d404:	016e3600 	.word	0x016e3600

0800d408 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d408:	b480      	push	{r7}
 800d40a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d40c:	4b03      	ldr	r3, [pc, #12]	@ (800d41c <HAL_RCC_GetHCLKFreq+0x14>)
 800d40e:	681b      	ldr	r3, [r3, #0]
}
 800d410:	4618      	mov	r0, r3
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	20000338 	.word	0x20000338

0800d420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800d424:	f7ff fff0 	bl	800d408 <HAL_RCC_GetHCLKFreq>
 800d428:	4602      	mov	r2, r0
 800d42a:	4b06      	ldr	r3, [pc, #24]	@ (800d444 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	0a1b      	lsrs	r3, r3, #8
 800d430:	f003 0307 	and.w	r3, r3, #7
 800d434:	4904      	ldr	r1, [pc, #16]	@ (800d448 <HAL_RCC_GetPCLK1Freq+0x28>)
 800d436:	5ccb      	ldrb	r3, [r1, r3]
 800d438:	f003 031f 	and.w	r3, r3, #31
 800d43c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d440:	4618      	mov	r0, r3
 800d442:	bd80      	pop	{r7, pc}
 800d444:	40021000 	.word	0x40021000
 800d448:	08014438 	.word	0x08014438

0800d44c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800d450:	f7ff ffda 	bl	800d408 <HAL_RCC_GetHCLKFreq>
 800d454:	4602      	mov	r2, r0
 800d456:	4b06      	ldr	r3, [pc, #24]	@ (800d470 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d458:	689b      	ldr	r3, [r3, #8]
 800d45a:	0adb      	lsrs	r3, r3, #11
 800d45c:	f003 0307 	and.w	r3, r3, #7
 800d460:	4904      	ldr	r1, [pc, #16]	@ (800d474 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d462:	5ccb      	ldrb	r3, [r1, r3]
 800d464:	f003 031f 	and.w	r3, r3, #31
 800d468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	40021000 	.word	0x40021000
 800d474:	08014438 	.word	0x08014438

0800d478 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800d478:	b480      	push	{r7}
 800d47a:	b087      	sub	sp, #28
 800d47c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800d47e:	4b1e      	ldr	r3, [pc, #120]	@ (800d4f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d480:	68db      	ldr	r3, [r3, #12]
 800d482:	f003 0303 	and.w	r3, r3, #3
 800d486:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d488:	4b1b      	ldr	r3, [pc, #108]	@ (800d4f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	091b      	lsrs	r3, r3, #4
 800d48e:	f003 030f 	and.w	r3, r3, #15
 800d492:	3301      	adds	r3, #1
 800d494:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	2b03      	cmp	r3, #3
 800d49a:	d10c      	bne.n	800d4b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d49c:	4a17      	ldr	r2, [pc, #92]	@ (800d4fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4a4:	4a14      	ldr	r2, [pc, #80]	@ (800d4f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d4a6:	68d2      	ldr	r2, [r2, #12]
 800d4a8:	0a12      	lsrs	r2, r2, #8
 800d4aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d4ae:	fb02 f303 	mul.w	r3, r2, r3
 800d4b2:	617b      	str	r3, [r7, #20]
    break;
 800d4b4:	e00c      	b.n	800d4d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d4b6:	4a12      	ldr	r2, [pc, #72]	@ (800d500 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4be:	4a0e      	ldr	r2, [pc, #56]	@ (800d4f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d4c0:	68d2      	ldr	r2, [r2, #12]
 800d4c2:	0a12      	lsrs	r2, r2, #8
 800d4c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d4c8:	fb02 f303 	mul.w	r3, r2, r3
 800d4cc:	617b      	str	r3, [r7, #20]
    break;
 800d4ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800d4d0:	4b09      	ldr	r3, [pc, #36]	@ (800d4f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	0e5b      	lsrs	r3, r3, #25
 800d4d6:	f003 0303 	and.w	r3, r3, #3
 800d4da:	3301      	adds	r3, #1
 800d4dc:	005b      	lsls	r3, r3, #1
 800d4de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800d4e0:	697a      	ldr	r2, [r7, #20]
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800d4ea:	687b      	ldr	r3, [r7, #4]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	371c      	adds	r7, #28
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr
 800d4f8:	40021000 	.word	0x40021000
 800d4fc:	016e3600 	.word	0x016e3600
 800d500:	00f42400 	.word	0x00f42400

0800d504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b086      	sub	sp, #24
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d50c:	2300      	movs	r3, #0
 800d50e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d510:	2300      	movs	r3, #0
 800d512:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	f000 8098 	beq.w	800d652 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d522:	2300      	movs	r3, #0
 800d524:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d526:	4b43      	ldr	r3, [pc, #268]	@ (800d634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d52a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d10d      	bne.n	800d54e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d532:	4b40      	ldr	r3, [pc, #256]	@ (800d634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d536:	4a3f      	ldr	r2, [pc, #252]	@ (800d634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d53c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d53e:	4b3d      	ldr	r3, [pc, #244]	@ (800d634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d546:	60bb      	str	r3, [r7, #8]
 800d548:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d54a:	2301      	movs	r3, #1
 800d54c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d54e:	4b3a      	ldr	r3, [pc, #232]	@ (800d638 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	4a39      	ldr	r2, [pc, #228]	@ (800d638 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d558:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d55a:	f7fc ff47 	bl	800a3ec <HAL_GetTick>
 800d55e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d560:	e009      	b.n	800d576 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d562:	f7fc ff43 	bl	800a3ec <HAL_GetTick>
 800d566:	4602      	mov	r2, r0
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	1ad3      	subs	r3, r2, r3
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	d902      	bls.n	800d576 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d570:	2303      	movs	r3, #3
 800d572:	74fb      	strb	r3, [r7, #19]
        break;
 800d574:	e005      	b.n	800d582 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d576:	4b30      	ldr	r3, [pc, #192]	@ (800d638 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d0ef      	beq.n	800d562 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d582:	7cfb      	ldrb	r3, [r7, #19]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d159      	bne.n	800d63c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d588:	4b2a      	ldr	r3, [pc, #168]	@ (800d634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d58a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d58e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d592:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d01e      	beq.n	800d5d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d59e:	697a      	ldr	r2, [r7, #20]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d019      	beq.n	800d5d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d5a4:	4b23      	ldr	r3, [pc, #140]	@ (800d634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d5a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d5ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d5b0:	4b20      	ldr	r3, [pc, #128]	@ (800d634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d5b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5b6:	4a1f      	ldr	r2, [pc, #124]	@ (800d634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d5b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d5bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d5c0:	4b1c      	ldr	r3, [pc, #112]	@ (800d634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d5c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5c6:	4a1b      	ldr	r2, [pc, #108]	@ (800d634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d5c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d5cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d5d0:	4a18      	ldr	r2, [pc, #96]	@ (800d634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	f003 0301 	and.w	r3, r3, #1
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d016      	beq.n	800d610 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d5e2:	f7fc ff03 	bl	800a3ec <HAL_GetTick>
 800d5e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d5e8:	e00b      	b.n	800d602 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d5ea:	f7fc feff 	bl	800a3ec <HAL_GetTick>
 800d5ee:	4602      	mov	r2, r0
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	1ad3      	subs	r3, r2, r3
 800d5f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d902      	bls.n	800d602 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d5fc:	2303      	movs	r3, #3
 800d5fe:	74fb      	strb	r3, [r7, #19]
            break;
 800d600:	e006      	b.n	800d610 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d602:	4b0c      	ldr	r3, [pc, #48]	@ (800d634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d608:	f003 0302 	and.w	r3, r3, #2
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d0ec      	beq.n	800d5ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d610:	7cfb      	ldrb	r3, [r7, #19]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d10b      	bne.n	800d62e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d616:	4b07      	ldr	r3, [pc, #28]	@ (800d634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d61c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d624:	4903      	ldr	r1, [pc, #12]	@ (800d634 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d626:	4313      	orrs	r3, r2
 800d628:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800d62c:	e008      	b.n	800d640 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d62e:	7cfb      	ldrb	r3, [r7, #19]
 800d630:	74bb      	strb	r3, [r7, #18]
 800d632:	e005      	b.n	800d640 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d634:	40021000 	.word	0x40021000
 800d638:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d63c:	7cfb      	ldrb	r3, [r7, #19]
 800d63e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d640:	7c7b      	ldrb	r3, [r7, #17]
 800d642:	2b01      	cmp	r3, #1
 800d644:	d105      	bne.n	800d652 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d646:	4ba7      	ldr	r3, [pc, #668]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d64a:	4aa6      	ldr	r2, [pc, #664]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d64c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d650:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f003 0301 	and.w	r3, r3, #1
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00a      	beq.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d65e:	4ba1      	ldr	r3, [pc, #644]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d660:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d664:	f023 0203 	bic.w	r2, r3, #3
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	685b      	ldr	r3, [r3, #4]
 800d66c:	499d      	ldr	r1, [pc, #628]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d66e:	4313      	orrs	r3, r2
 800d670:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	f003 0302 	and.w	r3, r3, #2
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d00a      	beq.n	800d696 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d680:	4b98      	ldr	r3, [pc, #608]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d682:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d686:	f023 020c 	bic.w	r2, r3, #12
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	4995      	ldr	r1, [pc, #596]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d690:	4313      	orrs	r3, r2
 800d692:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f003 0304 	and.w	r3, r3, #4
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00a      	beq.n	800d6b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d6a2:	4b90      	ldr	r3, [pc, #576]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6a8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	498c      	ldr	r1, [pc, #560]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f003 0308 	and.w	r3, r3, #8
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d00a      	beq.n	800d6da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d6c4:	4b87      	ldr	r3, [pc, #540]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6ca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	691b      	ldr	r3, [r3, #16]
 800d6d2:	4984      	ldr	r1, [pc, #528]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f003 0310 	and.w	r3, r3, #16
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00a      	beq.n	800d6fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d6e6:	4b7f      	ldr	r3, [pc, #508]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d6ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	695b      	ldr	r3, [r3, #20]
 800d6f4:	497b      	ldr	r1, [pc, #492]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f003 0320 	and.w	r3, r3, #32
 800d704:	2b00      	cmp	r3, #0
 800d706:	d00a      	beq.n	800d71e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d708:	4b76      	ldr	r3, [pc, #472]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d70a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d70e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	699b      	ldr	r3, [r3, #24]
 800d716:	4973      	ldr	r1, [pc, #460]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d718:	4313      	orrs	r3, r2
 800d71a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d726:	2b00      	cmp	r3, #0
 800d728:	d00a      	beq.n	800d740 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d72a:	4b6e      	ldr	r3, [pc, #440]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d72c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d730:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	69db      	ldr	r3, [r3, #28]
 800d738:	496a      	ldr	r1, [pc, #424]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d73a:	4313      	orrs	r3, r2
 800d73c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d00a      	beq.n	800d762 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d74c:	4b65      	ldr	r3, [pc, #404]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d74e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d752:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6a1b      	ldr	r3, [r3, #32]
 800d75a:	4962      	ldr	r1, [pc, #392]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d75c:	4313      	orrs	r3, r2
 800d75e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00a      	beq.n	800d784 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d76e:	4b5d      	ldr	r3, [pc, #372]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d774:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d77c:	4959      	ldr	r1, [pc, #356]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d77e:	4313      	orrs	r3, r2
 800d780:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d00a      	beq.n	800d7a6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d790:	4b54      	ldr	r3, [pc, #336]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d792:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d796:	f023 0203 	bic.w	r2, r3, #3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d79e:	4951      	ldr	r1, [pc, #324]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7a0:	4313      	orrs	r3, r2
 800d7a2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d00a      	beq.n	800d7c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d7b2:	4b4c      	ldr	r3, [pc, #304]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d7b8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7c0:	4948      	ldr	r1, [pc, #288]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7c2:	4313      	orrs	r3, r2
 800d7c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d015      	beq.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d7d4:	4b43      	ldr	r3, [pc, #268]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d7da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7e2:	4940      	ldr	r1, [pc, #256]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d7f2:	d105      	bne.n	800d800 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d7f4:	4b3b      	ldr	r3, [pc, #236]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7f6:	68db      	ldr	r3, [r3, #12]
 800d7f8:	4a3a      	ldr	r2, [pc, #232]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d7fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d7fe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d015      	beq.n	800d838 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d80c:	4b35      	ldr	r3, [pc, #212]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d812:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d81a:	4932      	ldr	r1, [pc, #200]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d81c:	4313      	orrs	r3, r2
 800d81e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d826:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d82a:	d105      	bne.n	800d838 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d82c:	4b2d      	ldr	r3, [pc, #180]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d82e:	68db      	ldr	r3, [r3, #12]
 800d830:	4a2c      	ldr	r2, [pc, #176]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d836:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d840:	2b00      	cmp	r3, #0
 800d842:	d015      	beq.n	800d870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d844:	4b27      	ldr	r3, [pc, #156]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d84a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d852:	4924      	ldr	r1, [pc, #144]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d854:	4313      	orrs	r3, r2
 800d856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d85e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d862:	d105      	bne.n	800d870 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d864:	4b1f      	ldr	r3, [pc, #124]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d866:	68db      	ldr	r3, [r3, #12]
 800d868:	4a1e      	ldr	r2, [pc, #120]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d86a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d86e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d015      	beq.n	800d8a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d87c:	4b19      	ldr	r3, [pc, #100]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d87e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d882:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d88a:	4916      	ldr	r1, [pc, #88]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d88c:	4313      	orrs	r3, r2
 800d88e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d896:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d89a:	d105      	bne.n	800d8a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d89c:	4b11      	ldr	r3, [pc, #68]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d89e:	68db      	ldr	r3, [r3, #12]
 800d8a0:	4a10      	ldr	r2, [pc, #64]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d8a6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d019      	beq.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d8b4:	4b0b      	ldr	r3, [pc, #44]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8c2:	4908      	ldr	r1, [pc, #32]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8c4:	4313      	orrs	r3, r2
 800d8c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d8d2:	d109      	bne.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d8d4:	4b03      	ldr	r3, [pc, #12]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8d6:	68db      	ldr	r3, [r3, #12]
 800d8d8:	4a02      	ldr	r2, [pc, #8]	@ (800d8e4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d8da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d8de:	60d3      	str	r3, [r2, #12]
 800d8e0:	e002      	b.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d8e2:	bf00      	nop
 800d8e4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d015      	beq.n	800d920 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d8f4:	4b29      	ldr	r3, [pc, #164]	@ (800d99c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d8f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d8fa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d902:	4926      	ldr	r1, [pc, #152]	@ (800d99c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d904:	4313      	orrs	r3, r2
 800d906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d90e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d912:	d105      	bne.n	800d920 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d914:	4b21      	ldr	r3, [pc, #132]	@ (800d99c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d916:	68db      	ldr	r3, [r3, #12]
 800d918:	4a20      	ldr	r2, [pc, #128]	@ (800d99c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d91a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d91e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d015      	beq.n	800d958 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d92c:	4b1b      	ldr	r3, [pc, #108]	@ (800d99c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d92e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d932:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d93a:	4918      	ldr	r1, [pc, #96]	@ (800d99c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d93c:	4313      	orrs	r3, r2
 800d93e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d94a:	d105      	bne.n	800d958 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d94c:	4b13      	ldr	r3, [pc, #76]	@ (800d99c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d94e:	68db      	ldr	r3, [r3, #12]
 800d950:	4a12      	ldr	r2, [pc, #72]	@ (800d99c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d952:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d956:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d960:	2b00      	cmp	r3, #0
 800d962:	d015      	beq.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d964:	4b0d      	ldr	r3, [pc, #52]	@ (800d99c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d966:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d96a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d972:	490a      	ldr	r1, [pc, #40]	@ (800d99c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d974:	4313      	orrs	r3, r2
 800d976:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d97e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d982:	d105      	bne.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d984:	4b05      	ldr	r3, [pc, #20]	@ (800d99c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	4a04      	ldr	r2, [pc, #16]	@ (800d99c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d98a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d98e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d990:	7cbb      	ldrb	r3, [r7, #18]
}
 800d992:	4618      	mov	r0, r3
 800d994:	3718      	adds	r7, #24
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
 800d99a:	bf00      	nop
 800d99c:	40021000 	.word	0x40021000

0800d9a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d101      	bne.n	800d9b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	e054      	b.n	800da5c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d111      	bne.n	800d9e2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f001 fee2 	bl	800f790 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d102      	bne.n	800d9da <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	4a23      	ldr	r2, [pc, #140]	@ (800da64 <HAL_TIM_Base_Init+0xc4>)
 800d9d8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2202      	movs	r2, #2
 800d9e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	3304      	adds	r3, #4
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	4610      	mov	r0, r2
 800d9f6:	f001 fa2b 	bl	800ee50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2201      	movs	r2, #1
 800da06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2201      	movs	r2, #1
 800da0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2201      	movs	r2, #1
 800da16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2201      	movs	r2, #1
 800da1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2201      	movs	r2, #1
 800da26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2201      	movs	r2, #1
 800da2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2201      	movs	r2, #1
 800da36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2201      	movs	r2, #1
 800da3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2201      	movs	r2, #1
 800da46:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2201      	movs	r2, #1
 800da4e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2201      	movs	r2, #1
 800da56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800da5a:	2300      	movs	r3, #0
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3708      	adds	r7, #8
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}
 800da64:	08009c15 	.word	0x08009c15

0800da68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800da68:	b480      	push	{r7}
 800da6a:	b085      	sub	sp, #20
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da76:	b2db      	uxtb	r3, r3
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d001      	beq.n	800da80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800da7c:	2301      	movs	r3, #1
 800da7e:	e04c      	b.n	800db1a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2202      	movs	r2, #2
 800da84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4a26      	ldr	r2, [pc, #152]	@ (800db28 <HAL_TIM_Base_Start+0xc0>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d022      	beq.n	800dad8 <HAL_TIM_Base_Start+0x70>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da9a:	d01d      	beq.n	800dad8 <HAL_TIM_Base_Start+0x70>
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a22      	ldr	r2, [pc, #136]	@ (800db2c <HAL_TIM_Base_Start+0xc4>)
 800daa2:	4293      	cmp	r3, r2
 800daa4:	d018      	beq.n	800dad8 <HAL_TIM_Base_Start+0x70>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4a21      	ldr	r2, [pc, #132]	@ (800db30 <HAL_TIM_Base_Start+0xc8>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d013      	beq.n	800dad8 <HAL_TIM_Base_Start+0x70>
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4a1f      	ldr	r2, [pc, #124]	@ (800db34 <HAL_TIM_Base_Start+0xcc>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d00e      	beq.n	800dad8 <HAL_TIM_Base_Start+0x70>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4a1e      	ldr	r2, [pc, #120]	@ (800db38 <HAL_TIM_Base_Start+0xd0>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d009      	beq.n	800dad8 <HAL_TIM_Base_Start+0x70>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4a1c      	ldr	r2, [pc, #112]	@ (800db3c <HAL_TIM_Base_Start+0xd4>)
 800daca:	4293      	cmp	r3, r2
 800dacc:	d004      	beq.n	800dad8 <HAL_TIM_Base_Start+0x70>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4a1b      	ldr	r2, [pc, #108]	@ (800db40 <HAL_TIM_Base_Start+0xd8>)
 800dad4:	4293      	cmp	r3, r2
 800dad6:	d115      	bne.n	800db04 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	689a      	ldr	r2, [r3, #8]
 800dade:	4b19      	ldr	r3, [pc, #100]	@ (800db44 <HAL_TIM_Base_Start+0xdc>)
 800dae0:	4013      	ands	r3, r2
 800dae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2b06      	cmp	r3, #6
 800dae8:	d015      	beq.n	800db16 <HAL_TIM_Base_Start+0xae>
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800daf0:	d011      	beq.n	800db16 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	f042 0201 	orr.w	r2, r2, #1
 800db00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db02:	e008      	b.n	800db16 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f042 0201 	orr.w	r2, r2, #1
 800db12:	601a      	str	r2, [r3, #0]
 800db14:	e000      	b.n	800db18 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800db16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800db18:	2300      	movs	r3, #0
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3714      	adds	r7, #20
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr
 800db26:	bf00      	nop
 800db28:	40012c00 	.word	0x40012c00
 800db2c:	40000400 	.word	0x40000400
 800db30:	40000800 	.word	0x40000800
 800db34:	40000c00 	.word	0x40000c00
 800db38:	40013400 	.word	0x40013400
 800db3c:	40014000 	.word	0x40014000
 800db40:	40015000 	.word	0x40015000
 800db44:	00010007 	.word	0x00010007

0800db48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800db48:	b480      	push	{r7}
 800db4a:	b085      	sub	sp, #20
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800db56:	b2db      	uxtb	r3, r3
 800db58:	2b01      	cmp	r3, #1
 800db5a:	d001      	beq.n	800db60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800db5c:	2301      	movs	r3, #1
 800db5e:	e054      	b.n	800dc0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2202      	movs	r2, #2
 800db64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	68da      	ldr	r2, [r3, #12]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f042 0201 	orr.w	r2, r2, #1
 800db76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4a26      	ldr	r2, [pc, #152]	@ (800dc18 <HAL_TIM_Base_Start_IT+0xd0>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	d022      	beq.n	800dbc8 <HAL_TIM_Base_Start_IT+0x80>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800db8a:	d01d      	beq.n	800dbc8 <HAL_TIM_Base_Start_IT+0x80>
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4a22      	ldr	r2, [pc, #136]	@ (800dc1c <HAL_TIM_Base_Start_IT+0xd4>)
 800db92:	4293      	cmp	r3, r2
 800db94:	d018      	beq.n	800dbc8 <HAL_TIM_Base_Start_IT+0x80>
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a21      	ldr	r2, [pc, #132]	@ (800dc20 <HAL_TIM_Base_Start_IT+0xd8>)
 800db9c:	4293      	cmp	r3, r2
 800db9e:	d013      	beq.n	800dbc8 <HAL_TIM_Base_Start_IT+0x80>
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4a1f      	ldr	r2, [pc, #124]	@ (800dc24 <HAL_TIM_Base_Start_IT+0xdc>)
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d00e      	beq.n	800dbc8 <HAL_TIM_Base_Start_IT+0x80>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4a1e      	ldr	r2, [pc, #120]	@ (800dc28 <HAL_TIM_Base_Start_IT+0xe0>)
 800dbb0:	4293      	cmp	r3, r2
 800dbb2:	d009      	beq.n	800dbc8 <HAL_TIM_Base_Start_IT+0x80>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	4a1c      	ldr	r2, [pc, #112]	@ (800dc2c <HAL_TIM_Base_Start_IT+0xe4>)
 800dbba:	4293      	cmp	r3, r2
 800dbbc:	d004      	beq.n	800dbc8 <HAL_TIM_Base_Start_IT+0x80>
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	4a1b      	ldr	r2, [pc, #108]	@ (800dc30 <HAL_TIM_Base_Start_IT+0xe8>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d115      	bne.n	800dbf4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	689a      	ldr	r2, [r3, #8]
 800dbce:	4b19      	ldr	r3, [pc, #100]	@ (800dc34 <HAL_TIM_Base_Start_IT+0xec>)
 800dbd0:	4013      	ands	r3, r2
 800dbd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	2b06      	cmp	r3, #6
 800dbd8:	d015      	beq.n	800dc06 <HAL_TIM_Base_Start_IT+0xbe>
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbe0:	d011      	beq.n	800dc06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	681a      	ldr	r2, [r3, #0]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f042 0201 	orr.w	r2, r2, #1
 800dbf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dbf2:	e008      	b.n	800dc06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	681a      	ldr	r2, [r3, #0]
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	f042 0201 	orr.w	r2, r2, #1
 800dc02:	601a      	str	r2, [r3, #0]
 800dc04:	e000      	b.n	800dc08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3714      	adds	r7, #20
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr
 800dc16:	bf00      	nop
 800dc18:	40012c00 	.word	0x40012c00
 800dc1c:	40000400 	.word	0x40000400
 800dc20:	40000800 	.word	0x40000800
 800dc24:	40000c00 	.word	0x40000c00
 800dc28:	40013400 	.word	0x40013400
 800dc2c:	40014000 	.word	0x40014000
 800dc30:	40015000 	.word	0x40015000
 800dc34:	00010007 	.word	0x00010007

0800dc38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d101      	bne.n	800dc4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dc46:	2301      	movs	r3, #1
 800dc48:	e054      	b.n	800dcf4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dc50:	b2db      	uxtb	r3, r3
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d111      	bne.n	800dc7a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f001 fd96 	bl	800f790 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d102      	bne.n	800dc72 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	4a23      	ldr	r2, [pc, #140]	@ (800dcfc <HAL_TIM_PWM_Init+0xc4>)
 800dc70:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2202      	movs	r2, #2
 800dc7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681a      	ldr	r2, [r3, #0]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	3304      	adds	r3, #4
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	4610      	mov	r0, r2
 800dc8e:	f001 f8df 	bl	800ee50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2201      	movs	r2, #1
 800dc96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2201      	movs	r2, #1
 800dc9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2201      	movs	r2, #1
 800dca6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2201      	movs	r2, #1
 800dcae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2201      	movs	r2, #1
 800dcb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2201      	movs	r2, #1
 800dcbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	2201      	movs	r2, #1
 800dcce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2201      	movs	r2, #1
 800dcd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2201      	movs	r2, #1
 800dcde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2201      	movs	r2, #1
 800dce6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2201      	movs	r2, #1
 800dcee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dcf2:	2300      	movs	r3, #0
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3708      	adds	r7, #8
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	08009bc9 	.word	0x08009bc9

0800dd00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d109      	bne.n	800dd24 <HAL_TIM_PWM_Start+0x24>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	bf14      	ite	ne
 800dd1c:	2301      	movne	r3, #1
 800dd1e:	2300      	moveq	r3, #0
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	e03c      	b.n	800dd9e <HAL_TIM_PWM_Start+0x9e>
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	2b04      	cmp	r3, #4
 800dd28:	d109      	bne.n	800dd3e <HAL_TIM_PWM_Start+0x3e>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	bf14      	ite	ne
 800dd36:	2301      	movne	r3, #1
 800dd38:	2300      	moveq	r3, #0
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	e02f      	b.n	800dd9e <HAL_TIM_PWM_Start+0x9e>
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	2b08      	cmp	r3, #8
 800dd42:	d109      	bne.n	800dd58 <HAL_TIM_PWM_Start+0x58>
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dd4a:	b2db      	uxtb	r3, r3
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	bf14      	ite	ne
 800dd50:	2301      	movne	r3, #1
 800dd52:	2300      	moveq	r3, #0
 800dd54:	b2db      	uxtb	r3, r3
 800dd56:	e022      	b.n	800dd9e <HAL_TIM_PWM_Start+0x9e>
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	2b0c      	cmp	r3, #12
 800dd5c:	d109      	bne.n	800dd72 <HAL_TIM_PWM_Start+0x72>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dd64:	b2db      	uxtb	r3, r3
 800dd66:	2b01      	cmp	r3, #1
 800dd68:	bf14      	ite	ne
 800dd6a:	2301      	movne	r3, #1
 800dd6c:	2300      	moveq	r3, #0
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	e015      	b.n	800dd9e <HAL_TIM_PWM_Start+0x9e>
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	2b10      	cmp	r3, #16
 800dd76:	d109      	bne.n	800dd8c <HAL_TIM_PWM_Start+0x8c>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	2b01      	cmp	r3, #1
 800dd82:	bf14      	ite	ne
 800dd84:	2301      	movne	r3, #1
 800dd86:	2300      	moveq	r3, #0
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	e008      	b.n	800dd9e <HAL_TIM_PWM_Start+0x9e>
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	bf14      	ite	ne
 800dd98:	2301      	movne	r3, #1
 800dd9a:	2300      	moveq	r3, #0
 800dd9c:	b2db      	uxtb	r3, r3
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d001      	beq.n	800dda6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800dda2:	2301      	movs	r3, #1
 800dda4:	e0a6      	b.n	800def4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d104      	bne.n	800ddb6 <HAL_TIM_PWM_Start+0xb6>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2202      	movs	r2, #2
 800ddb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ddb4:	e023      	b.n	800ddfe <HAL_TIM_PWM_Start+0xfe>
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	2b04      	cmp	r3, #4
 800ddba:	d104      	bne.n	800ddc6 <HAL_TIM_PWM_Start+0xc6>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2202      	movs	r2, #2
 800ddc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ddc4:	e01b      	b.n	800ddfe <HAL_TIM_PWM_Start+0xfe>
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	2b08      	cmp	r3, #8
 800ddca:	d104      	bne.n	800ddd6 <HAL_TIM_PWM_Start+0xd6>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2202      	movs	r2, #2
 800ddd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ddd4:	e013      	b.n	800ddfe <HAL_TIM_PWM_Start+0xfe>
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	2b0c      	cmp	r3, #12
 800ddda:	d104      	bne.n	800dde6 <HAL_TIM_PWM_Start+0xe6>
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2202      	movs	r2, #2
 800dde0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dde4:	e00b      	b.n	800ddfe <HAL_TIM_PWM_Start+0xfe>
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	2b10      	cmp	r3, #16
 800ddea:	d104      	bne.n	800ddf6 <HAL_TIM_PWM_Start+0xf6>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2202      	movs	r2, #2
 800ddf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ddf4:	e003      	b.n	800ddfe <HAL_TIM_PWM_Start+0xfe>
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2202      	movs	r2, #2
 800ddfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	2201      	movs	r2, #1
 800de04:	6839      	ldr	r1, [r7, #0]
 800de06:	4618      	mov	r0, r3
 800de08:	f001 fc9c 	bl	800f744 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4a3a      	ldr	r2, [pc, #232]	@ (800defc <HAL_TIM_PWM_Start+0x1fc>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d018      	beq.n	800de48 <HAL_TIM_PWM_Start+0x148>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	4a39      	ldr	r2, [pc, #228]	@ (800df00 <HAL_TIM_PWM_Start+0x200>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d013      	beq.n	800de48 <HAL_TIM_PWM_Start+0x148>
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4a37      	ldr	r2, [pc, #220]	@ (800df04 <HAL_TIM_PWM_Start+0x204>)
 800de26:	4293      	cmp	r3, r2
 800de28:	d00e      	beq.n	800de48 <HAL_TIM_PWM_Start+0x148>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	4a36      	ldr	r2, [pc, #216]	@ (800df08 <HAL_TIM_PWM_Start+0x208>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d009      	beq.n	800de48 <HAL_TIM_PWM_Start+0x148>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	4a34      	ldr	r2, [pc, #208]	@ (800df0c <HAL_TIM_PWM_Start+0x20c>)
 800de3a:	4293      	cmp	r3, r2
 800de3c:	d004      	beq.n	800de48 <HAL_TIM_PWM_Start+0x148>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4a33      	ldr	r2, [pc, #204]	@ (800df10 <HAL_TIM_PWM_Start+0x210>)
 800de44:	4293      	cmp	r3, r2
 800de46:	d101      	bne.n	800de4c <HAL_TIM_PWM_Start+0x14c>
 800de48:	2301      	movs	r3, #1
 800de4a:	e000      	b.n	800de4e <HAL_TIM_PWM_Start+0x14e>
 800de4c:	2300      	movs	r3, #0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d007      	beq.n	800de62 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800de60:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	4a25      	ldr	r2, [pc, #148]	@ (800defc <HAL_TIM_PWM_Start+0x1fc>)
 800de68:	4293      	cmp	r3, r2
 800de6a:	d022      	beq.n	800deb2 <HAL_TIM_PWM_Start+0x1b2>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de74:	d01d      	beq.n	800deb2 <HAL_TIM_PWM_Start+0x1b2>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	4a26      	ldr	r2, [pc, #152]	@ (800df14 <HAL_TIM_PWM_Start+0x214>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d018      	beq.n	800deb2 <HAL_TIM_PWM_Start+0x1b2>
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	4a24      	ldr	r2, [pc, #144]	@ (800df18 <HAL_TIM_PWM_Start+0x218>)
 800de86:	4293      	cmp	r3, r2
 800de88:	d013      	beq.n	800deb2 <HAL_TIM_PWM_Start+0x1b2>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	4a23      	ldr	r2, [pc, #140]	@ (800df1c <HAL_TIM_PWM_Start+0x21c>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d00e      	beq.n	800deb2 <HAL_TIM_PWM_Start+0x1b2>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	4a19      	ldr	r2, [pc, #100]	@ (800df00 <HAL_TIM_PWM_Start+0x200>)
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d009      	beq.n	800deb2 <HAL_TIM_PWM_Start+0x1b2>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	4a18      	ldr	r2, [pc, #96]	@ (800df04 <HAL_TIM_PWM_Start+0x204>)
 800dea4:	4293      	cmp	r3, r2
 800dea6:	d004      	beq.n	800deb2 <HAL_TIM_PWM_Start+0x1b2>
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a18      	ldr	r2, [pc, #96]	@ (800df10 <HAL_TIM_PWM_Start+0x210>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d115      	bne.n	800dede <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	689a      	ldr	r2, [r3, #8]
 800deb8:	4b19      	ldr	r3, [pc, #100]	@ (800df20 <HAL_TIM_PWM_Start+0x220>)
 800deba:	4013      	ands	r3, r2
 800debc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2b06      	cmp	r3, #6
 800dec2:	d015      	beq.n	800def0 <HAL_TIM_PWM_Start+0x1f0>
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800deca:	d011      	beq.n	800def0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f042 0201 	orr.w	r2, r2, #1
 800deda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dedc:	e008      	b.n	800def0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f042 0201 	orr.w	r2, r2, #1
 800deec:	601a      	str	r2, [r3, #0]
 800deee:	e000      	b.n	800def2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800def0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800def2:	2300      	movs	r3, #0
}
 800def4:	4618      	mov	r0, r3
 800def6:	3710      	adds	r7, #16
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	40012c00 	.word	0x40012c00
 800df00:	40013400 	.word	0x40013400
 800df04:	40014000 	.word	0x40014000
 800df08:	40014400 	.word	0x40014400
 800df0c:	40014800 	.word	0x40014800
 800df10:	40015000 	.word	0x40015000
 800df14:	40000400 	.word	0x40000400
 800df18:	40000800 	.word	0x40000800
 800df1c:	40000c00 	.word	0x40000c00
 800df20:	00010007 	.word	0x00010007

0800df24 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d101      	bne.n	800df38 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800df34:	2301      	movs	r3, #1
 800df36:	e04c      	b.n	800dfd2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	2b00      	cmp	r3, #0
 800df42:	d111      	bne.n	800df68 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2200      	movs	r2, #0
 800df48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f001 fc1f 	bl	800f790 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df56:	2b00      	cmp	r3, #0
 800df58:	d102      	bne.n	800df60 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	4a1f      	ldr	r2, [pc, #124]	@ (800dfdc <HAL_TIM_OnePulse_Init+0xb8>)
 800df5e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2202      	movs	r2, #2
 800df6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681a      	ldr	r2, [r3, #0]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	3304      	adds	r3, #4
 800df78:	4619      	mov	r1, r3
 800df7a:	4610      	mov	r0, r2
 800df7c:	f000 ff68 	bl	800ee50 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f022 0208 	bic.w	r2, r2, #8
 800df8e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	6819      	ldr	r1, [r3, #0]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	683a      	ldr	r2, [r7, #0]
 800df9c:	430a      	orrs	r2, r1
 800df9e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2201      	movs	r2, #1
 800dfac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2201      	movs	r2, #1
 800dfb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2201      	movs	r2, #1
 800dfbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2201      	movs	r2, #1
 800dfc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2201      	movs	r2, #1
 800dfcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dfd0:	2300      	movs	r3, #0
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3708      	adds	r7, #8
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	0800dfe1 	.word	0x0800dfe1

0800dfe0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800dfe8:	bf00      	nop
 800dfea:	370c      	adds	r7, #12
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b084      	sub	sp, #16
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e004:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e00c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e014:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e01c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e01e:	7bfb      	ldrb	r3, [r7, #15]
 800e020:	2b01      	cmp	r3, #1
 800e022:	d108      	bne.n	800e036 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e024:	7bbb      	ldrb	r3, [r7, #14]
 800e026:	2b01      	cmp	r3, #1
 800e028:	d105      	bne.n	800e036 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e02a:	7b7b      	ldrb	r3, [r7, #13]
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d102      	bne.n	800e036 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e030:	7b3b      	ldrb	r3, [r7, #12]
 800e032:	2b01      	cmp	r3, #1
 800e034:	d001      	beq.n	800e03a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800e036:	2301      	movs	r3, #1
 800e038:	e059      	b.n	800e0ee <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2202      	movs	r2, #2
 800e03e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2202      	movs	r2, #2
 800e046:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2202      	movs	r2, #2
 800e04e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2202      	movs	r2, #2
 800e056:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	68da      	ldr	r2, [r3, #12]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f042 0202 	orr.w	r2, r2, #2
 800e068:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	68da      	ldr	r2, [r3, #12]
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f042 0204 	orr.w	r2, r2, #4
 800e078:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	2201      	movs	r2, #1
 800e080:	2100      	movs	r1, #0
 800e082:	4618      	mov	r0, r3
 800e084:	f001 fb5e 	bl	800f744 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	2201      	movs	r2, #1
 800e08e:	2104      	movs	r1, #4
 800e090:	4618      	mov	r0, r3
 800e092:	f001 fb57 	bl	800f744 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	4a17      	ldr	r2, [pc, #92]	@ (800e0f8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d018      	beq.n	800e0d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4a15      	ldr	r2, [pc, #84]	@ (800e0fc <HAL_TIM_OnePulse_Start_IT+0x108>)
 800e0a6:	4293      	cmp	r3, r2
 800e0a8:	d013      	beq.n	800e0d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	4a14      	ldr	r2, [pc, #80]	@ (800e100 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800e0b0:	4293      	cmp	r3, r2
 800e0b2:	d00e      	beq.n	800e0d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4a12      	ldr	r2, [pc, #72]	@ (800e104 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d009      	beq.n	800e0d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	4a11      	ldr	r2, [pc, #68]	@ (800e108 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800e0c4:	4293      	cmp	r3, r2
 800e0c6:	d004      	beq.n	800e0d2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	4a0f      	ldr	r2, [pc, #60]	@ (800e10c <HAL_TIM_OnePulse_Start_IT+0x118>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d101      	bne.n	800e0d6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800e0d2:	2301      	movs	r3, #1
 800e0d4:	e000      	b.n	800e0d8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d007      	beq.n	800e0ec <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e0ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800e0ec:	2300      	movs	r3, #0
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3710      	adds	r7, #16
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	40012c00 	.word	0x40012c00
 800e0fc:	40013400 	.word	0x40013400
 800e100:	40014000 	.word	0x40014000
 800e104:	40014400 	.word	0x40014400
 800e108:	40014800 	.word	0x40014800
 800e10c:	40015000 	.word	0x40015000

0800e110 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b086      	sub	sp, #24
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d101      	bne.n	800e124 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e120:	2301      	movs	r3, #1
 800e122:	e0a2      	b.n	800e26a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e12a:	b2db      	uxtb	r3, r3
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d111      	bne.n	800e154 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	2200      	movs	r2, #0
 800e134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f001 fb29 	bl	800f790 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e142:	2b00      	cmp	r3, #0
 800e144:	d102      	bne.n	800e14c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	4a4a      	ldr	r2, [pc, #296]	@ (800e274 <HAL_TIM_Encoder_Init+0x164>)
 800e14a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e150:	6878      	ldr	r0, [r7, #4]
 800e152:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2202      	movs	r2, #2
 800e158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	689b      	ldr	r3, [r3, #8]
 800e162:	687a      	ldr	r2, [r7, #4]
 800e164:	6812      	ldr	r2, [r2, #0]
 800e166:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800e16a:	f023 0307 	bic.w	r3, r3, #7
 800e16e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681a      	ldr	r2, [r3, #0]
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	3304      	adds	r3, #4
 800e178:	4619      	mov	r1, r3
 800e17a:	4610      	mov	r0, r2
 800e17c:	f000 fe68 	bl	800ee50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	689b      	ldr	r3, [r3, #8]
 800e186:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	699b      	ldr	r3, [r3, #24]
 800e18e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	6a1b      	ldr	r3, [r3, #32]
 800e196:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	697a      	ldr	r2, [r7, #20]
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e1a2:	693b      	ldr	r3, [r7, #16]
 800e1a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e1a8:	f023 0303 	bic.w	r3, r3, #3
 800e1ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	689a      	ldr	r2, [r3, #8]
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	699b      	ldr	r3, [r3, #24]
 800e1b6:	021b      	lsls	r3, r3, #8
 800e1b8:	4313      	orrs	r3, r2
 800e1ba:	693a      	ldr	r2, [r7, #16]
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800e1c6:	f023 030c 	bic.w	r3, r3, #12
 800e1ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e1cc:	693b      	ldr	r3, [r7, #16]
 800e1ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e1d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e1d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	68da      	ldr	r2, [r3, #12]
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	69db      	ldr	r3, [r3, #28]
 800e1e0:	021b      	lsls	r3, r3, #8
 800e1e2:	4313      	orrs	r3, r2
 800e1e4:	693a      	ldr	r2, [r7, #16]
 800e1e6:	4313      	orrs	r3, r2
 800e1e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	011a      	lsls	r2, r3, #4
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	6a1b      	ldr	r3, [r3, #32]
 800e1f4:	031b      	lsls	r3, r3, #12
 800e1f6:	4313      	orrs	r3, r2
 800e1f8:	693a      	ldr	r2, [r7, #16]
 800e1fa:	4313      	orrs	r3, r2
 800e1fc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800e204:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800e20c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	685a      	ldr	r2, [r3, #4]
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	695b      	ldr	r3, [r3, #20]
 800e216:	011b      	lsls	r3, r3, #4
 800e218:	4313      	orrs	r3, r2
 800e21a:	68fa      	ldr	r2, [r7, #12]
 800e21c:	4313      	orrs	r3, r2
 800e21e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	697a      	ldr	r2, [r7, #20]
 800e226:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	693a      	ldr	r2, [r7, #16]
 800e22e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	68fa      	ldr	r2, [r7, #12]
 800e236:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2201      	movs	r2, #1
 800e23c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2201      	movs	r2, #1
 800e244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2201      	movs	r2, #1
 800e24c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2201      	movs	r2, #1
 800e254:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2201      	movs	r2, #1
 800e25c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2201      	movs	r2, #1
 800e264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3718      	adds	r7, #24
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	08009cbd 	.word	0x08009cbd

0800e278 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e288:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e290:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e298:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e2a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d110      	bne.n	800e2ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e2a8:	7bfb      	ldrb	r3, [r7, #15]
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d102      	bne.n	800e2b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800e2ae:	7b7b      	ldrb	r3, [r7, #13]
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d001      	beq.n	800e2b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	e069      	b.n	800e38c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2202      	movs	r2, #2
 800e2bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	2202      	movs	r2, #2
 800e2c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e2c8:	e031      	b.n	800e32e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	2b04      	cmp	r3, #4
 800e2ce:	d110      	bne.n	800e2f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e2d0:	7bbb      	ldrb	r3, [r7, #14]
 800e2d2:	2b01      	cmp	r3, #1
 800e2d4:	d102      	bne.n	800e2dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e2d6:	7b3b      	ldrb	r3, [r7, #12]
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d001      	beq.n	800e2e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e055      	b.n	800e38c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2202      	movs	r2, #2
 800e2e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2202      	movs	r2, #2
 800e2ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e2f0:	e01d      	b.n	800e32e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e2f2:	7bfb      	ldrb	r3, [r7, #15]
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d108      	bne.n	800e30a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e2f8:	7bbb      	ldrb	r3, [r7, #14]
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d105      	bne.n	800e30a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e2fe:	7b7b      	ldrb	r3, [r7, #13]
 800e300:	2b01      	cmp	r3, #1
 800e302:	d102      	bne.n	800e30a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e304:	7b3b      	ldrb	r3, [r7, #12]
 800e306:	2b01      	cmp	r3, #1
 800e308:	d001      	beq.n	800e30e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800e30a:	2301      	movs	r3, #1
 800e30c:	e03e      	b.n	800e38c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2202      	movs	r2, #2
 800e312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2202      	movs	r2, #2
 800e31a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2202      	movs	r2, #2
 800e322:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2202      	movs	r2, #2
 800e32a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d003      	beq.n	800e33c <HAL_TIM_Encoder_Start+0xc4>
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	2b04      	cmp	r3, #4
 800e338:	d008      	beq.n	800e34c <HAL_TIM_Encoder_Start+0xd4>
 800e33a:	e00f      	b.n	800e35c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2201      	movs	r2, #1
 800e342:	2100      	movs	r1, #0
 800e344:	4618      	mov	r0, r3
 800e346:	f001 f9fd 	bl	800f744 <TIM_CCxChannelCmd>
      break;
 800e34a:	e016      	b.n	800e37a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	2201      	movs	r2, #1
 800e352:	2104      	movs	r1, #4
 800e354:	4618      	mov	r0, r3
 800e356:	f001 f9f5 	bl	800f744 <TIM_CCxChannelCmd>
      break;
 800e35a:	e00e      	b.n	800e37a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2201      	movs	r2, #1
 800e362:	2100      	movs	r1, #0
 800e364:	4618      	mov	r0, r3
 800e366:	f001 f9ed 	bl	800f744 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	2201      	movs	r2, #1
 800e370:	2104      	movs	r1, #4
 800e372:	4618      	mov	r0, r3
 800e374:	f001 f9e6 	bl	800f744 <TIM_CCxChannelCmd>
      break;
 800e378:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	681a      	ldr	r2, [r3, #0]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f042 0201 	orr.w	r2, r2, #1
 800e388:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800e38a:	2300      	movs	r3, #0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	691b      	ldr	r3, [r3, #16]
 800e3aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	f003 0302 	and.w	r3, r3, #2
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d026      	beq.n	800e404 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f003 0302 	and.w	r3, r3, #2
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d021      	beq.n	800e404 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	f06f 0202 	mvn.w	r2, #2
 800e3c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	699b      	ldr	r3, [r3, #24]
 800e3d6:	f003 0303 	and.w	r3, r3, #3
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d005      	beq.n	800e3ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	4798      	blx	r3
 800e3e8:	e009      	b.n	800e3fe <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2200      	movs	r2, #0
 800e402:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	f003 0304 	and.w	r3, r3, #4
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d026      	beq.n	800e45c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f003 0304 	and.w	r3, r3, #4
 800e414:	2b00      	cmp	r3, #0
 800e416:	d021      	beq.n	800e45c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f06f 0204 	mvn.w	r2, #4
 800e420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2202      	movs	r2, #2
 800e426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	699b      	ldr	r3, [r3, #24]
 800e42e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e432:	2b00      	cmp	r3, #0
 800e434:	d005      	beq.n	800e442 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	4798      	blx	r3
 800e440:	e009      	b.n	800e456 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2200      	movs	r2, #0
 800e45a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	f003 0308 	and.w	r3, r3, #8
 800e462:	2b00      	cmp	r3, #0
 800e464:	d026      	beq.n	800e4b4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f003 0308 	and.w	r3, r3, #8
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d021      	beq.n	800e4b4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f06f 0208 	mvn.w	r2, #8
 800e478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2204      	movs	r2, #4
 800e47e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	69db      	ldr	r3, [r3, #28]
 800e486:	f003 0303 	and.w	r3, r3, #3
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d005      	beq.n	800e49a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	4798      	blx	r3
 800e498:	e009      	b.n	800e4ae <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	f003 0310 	and.w	r3, r3, #16
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d026      	beq.n	800e50c <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f003 0310 	and.w	r3, r3, #16
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d021      	beq.n	800e50c <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f06f 0210 	mvn.w	r2, #16
 800e4d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2208      	movs	r2, #8
 800e4d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	69db      	ldr	r3, [r3, #28]
 800e4de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d005      	beq.n	800e4f2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	4798      	blx	r3
 800e4f0:	e009      	b.n	800e506 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2200      	movs	r2, #0
 800e50a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	f003 0301 	and.w	r3, r3, #1
 800e512:	2b00      	cmp	r3, #0
 800e514:	d00e      	beq.n	800e534 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f003 0301 	and.w	r3, r3, #1
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d009      	beq.n	800e534 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f06f 0201 	mvn.w	r2, #1
 800e528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d104      	bne.n	800e548 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e544:	2b00      	cmp	r3, #0
 800e546:	d00e      	beq.n	800e566 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d009      	beq.n	800e566 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e55a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d00e      	beq.n	800e58e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e576:	2b00      	cmp	r3, #0
 800e578:	d009      	beq.n	800e58e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800e58a:	6878      	ldr	r0, [r7, #4]
 800e58c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00e      	beq.n	800e5b6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d009      	beq.n	800e5b6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e5aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	f003 0320 	and.w	r3, r3, #32
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d00e      	beq.n	800e5de <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f003 0320 	and.w	r3, r3, #32
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d009      	beq.n	800e5de <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	f06f 0220 	mvn.w	r2, #32
 800e5d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d00e      	beq.n	800e606 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d009      	beq.n	800e606 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800e5fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d00e      	beq.n	800e62e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e616:	2b00      	cmp	r3, #0
 800e618:	d009      	beq.n	800e62e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800e622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e634:	2b00      	cmp	r3, #0
 800e636:	d00e      	beq.n	800e656 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d009      	beq.n	800e656 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800e64a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00e      	beq.n	800e67e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800e666:	2b00      	cmp	r3, #0
 800e668:	d009      	beq.n	800e67e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800e672:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e67e:	bf00      	nop
 800e680:	3710      	adds	r7, #16
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
	...

0800e688 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b086      	sub	sp, #24
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	60f8      	str	r0, [r7, #12]
 800e690:	60b9      	str	r1, [r7, #8]
 800e692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e694:	2300      	movs	r3, #0
 800e696:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	d101      	bne.n	800e6a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e6a2:	2302      	movs	r3, #2
 800e6a4:	e0ff      	b.n	800e8a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2201      	movs	r2, #1
 800e6aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2b14      	cmp	r3, #20
 800e6b2:	f200 80f0 	bhi.w	800e896 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e6b6:	a201      	add	r2, pc, #4	@ (adr r2, 800e6bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6bc:	0800e711 	.word	0x0800e711
 800e6c0:	0800e897 	.word	0x0800e897
 800e6c4:	0800e897 	.word	0x0800e897
 800e6c8:	0800e897 	.word	0x0800e897
 800e6cc:	0800e751 	.word	0x0800e751
 800e6d0:	0800e897 	.word	0x0800e897
 800e6d4:	0800e897 	.word	0x0800e897
 800e6d8:	0800e897 	.word	0x0800e897
 800e6dc:	0800e793 	.word	0x0800e793
 800e6e0:	0800e897 	.word	0x0800e897
 800e6e4:	0800e897 	.word	0x0800e897
 800e6e8:	0800e897 	.word	0x0800e897
 800e6ec:	0800e7d3 	.word	0x0800e7d3
 800e6f0:	0800e897 	.word	0x0800e897
 800e6f4:	0800e897 	.word	0x0800e897
 800e6f8:	0800e897 	.word	0x0800e897
 800e6fc:	0800e815 	.word	0x0800e815
 800e700:	0800e897 	.word	0x0800e897
 800e704:	0800e897 	.word	0x0800e897
 800e708:	0800e897 	.word	0x0800e897
 800e70c:	0800e855 	.word	0x0800e855
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	68b9      	ldr	r1, [r7, #8]
 800e716:	4618      	mov	r0, r3
 800e718:	f000 fc4e 	bl	800efb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	699a      	ldr	r2, [r3, #24]
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f042 0208 	orr.w	r2, r2, #8
 800e72a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	699a      	ldr	r2, [r3, #24]
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f022 0204 	bic.w	r2, r2, #4
 800e73a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	6999      	ldr	r1, [r3, #24]
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	691a      	ldr	r2, [r3, #16]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	430a      	orrs	r2, r1
 800e74c:	619a      	str	r2, [r3, #24]
      break;
 800e74e:	e0a5      	b.n	800e89c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	68b9      	ldr	r1, [r7, #8]
 800e756:	4618      	mov	r0, r3
 800e758:	f000 fcc8 	bl	800f0ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	699a      	ldr	r2, [r3, #24]
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e76a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	699a      	ldr	r2, [r3, #24]
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e77a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	6999      	ldr	r1, [r3, #24]
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	691b      	ldr	r3, [r3, #16]
 800e786:	021a      	lsls	r2, r3, #8
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	430a      	orrs	r2, r1
 800e78e:	619a      	str	r2, [r3, #24]
      break;
 800e790:	e084      	b.n	800e89c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	68b9      	ldr	r1, [r7, #8]
 800e798:	4618      	mov	r0, r3
 800e79a:	f000 fd3b 	bl	800f214 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	69da      	ldr	r2, [r3, #28]
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f042 0208 	orr.w	r2, r2, #8
 800e7ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	69da      	ldr	r2, [r3, #28]
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f022 0204 	bic.w	r2, r2, #4
 800e7bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	69d9      	ldr	r1, [r3, #28]
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	691a      	ldr	r2, [r3, #16]
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	430a      	orrs	r2, r1
 800e7ce:	61da      	str	r2, [r3, #28]
      break;
 800e7d0:	e064      	b.n	800e89c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	68b9      	ldr	r1, [r7, #8]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f000 fdad 	bl	800f338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	69da      	ldr	r2, [r3, #28]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e7ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	69da      	ldr	r2, [r3, #28]
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e7fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	69d9      	ldr	r1, [r3, #28]
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	691b      	ldr	r3, [r3, #16]
 800e808:	021a      	lsls	r2, r3, #8
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	430a      	orrs	r2, r1
 800e810:	61da      	str	r2, [r3, #28]
      break;
 800e812:	e043      	b.n	800e89c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	68b9      	ldr	r1, [r7, #8]
 800e81a:	4618      	mov	r0, r3
 800e81c:	f000 fe20 	bl	800f460 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f042 0208 	orr.w	r2, r2, #8
 800e82e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f022 0204 	bic.w	r2, r2, #4
 800e83e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	691a      	ldr	r2, [r3, #16]
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	430a      	orrs	r2, r1
 800e850:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e852:	e023      	b.n	800e89c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	68b9      	ldr	r1, [r7, #8]
 800e85a:	4618      	mov	r0, r3
 800e85c:	f000 fe6a 	bl	800f534 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e86e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e87e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	691b      	ldr	r3, [r3, #16]
 800e88a:	021a      	lsls	r2, r3, #8
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	430a      	orrs	r2, r1
 800e892:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e894:	e002      	b.n	800e89c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e896:	2301      	movs	r3, #1
 800e898:	75fb      	strb	r3, [r7, #23]
      break;
 800e89a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e8a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3718      	adds	r7, #24
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop

0800e8b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
 800e8b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e8c4:	2b01      	cmp	r3, #1
 800e8c6:	d101      	bne.n	800e8cc <HAL_TIM_ConfigClockSource+0x1c>
 800e8c8:	2302      	movs	r3, #2
 800e8ca:	e0f6      	b.n	800eaba <HAL_TIM_ConfigClockSource+0x20a>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2202      	movs	r2, #2
 800e8d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	689b      	ldr	r3, [r3, #8]
 800e8e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e8e4:	68bb      	ldr	r3, [r7, #8]
 800e8e6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800e8ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e8ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e8f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	68ba      	ldr	r2, [r7, #8]
 800e8fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	4a6f      	ldr	r2, [pc, #444]	@ (800eac4 <HAL_TIM_ConfigClockSource+0x214>)
 800e906:	4293      	cmp	r3, r2
 800e908:	f000 80c1 	beq.w	800ea8e <HAL_TIM_ConfigClockSource+0x1de>
 800e90c:	4a6d      	ldr	r2, [pc, #436]	@ (800eac4 <HAL_TIM_ConfigClockSource+0x214>)
 800e90e:	4293      	cmp	r3, r2
 800e910:	f200 80c6 	bhi.w	800eaa0 <HAL_TIM_ConfigClockSource+0x1f0>
 800e914:	4a6c      	ldr	r2, [pc, #432]	@ (800eac8 <HAL_TIM_ConfigClockSource+0x218>)
 800e916:	4293      	cmp	r3, r2
 800e918:	f000 80b9 	beq.w	800ea8e <HAL_TIM_ConfigClockSource+0x1de>
 800e91c:	4a6a      	ldr	r2, [pc, #424]	@ (800eac8 <HAL_TIM_ConfigClockSource+0x218>)
 800e91e:	4293      	cmp	r3, r2
 800e920:	f200 80be 	bhi.w	800eaa0 <HAL_TIM_ConfigClockSource+0x1f0>
 800e924:	4a69      	ldr	r2, [pc, #420]	@ (800eacc <HAL_TIM_ConfigClockSource+0x21c>)
 800e926:	4293      	cmp	r3, r2
 800e928:	f000 80b1 	beq.w	800ea8e <HAL_TIM_ConfigClockSource+0x1de>
 800e92c:	4a67      	ldr	r2, [pc, #412]	@ (800eacc <HAL_TIM_ConfigClockSource+0x21c>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	f200 80b6 	bhi.w	800eaa0 <HAL_TIM_ConfigClockSource+0x1f0>
 800e934:	4a66      	ldr	r2, [pc, #408]	@ (800ead0 <HAL_TIM_ConfigClockSource+0x220>)
 800e936:	4293      	cmp	r3, r2
 800e938:	f000 80a9 	beq.w	800ea8e <HAL_TIM_ConfigClockSource+0x1de>
 800e93c:	4a64      	ldr	r2, [pc, #400]	@ (800ead0 <HAL_TIM_ConfigClockSource+0x220>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	f200 80ae 	bhi.w	800eaa0 <HAL_TIM_ConfigClockSource+0x1f0>
 800e944:	4a63      	ldr	r2, [pc, #396]	@ (800ead4 <HAL_TIM_ConfigClockSource+0x224>)
 800e946:	4293      	cmp	r3, r2
 800e948:	f000 80a1 	beq.w	800ea8e <HAL_TIM_ConfigClockSource+0x1de>
 800e94c:	4a61      	ldr	r2, [pc, #388]	@ (800ead4 <HAL_TIM_ConfigClockSource+0x224>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	f200 80a6 	bhi.w	800eaa0 <HAL_TIM_ConfigClockSource+0x1f0>
 800e954:	4a60      	ldr	r2, [pc, #384]	@ (800ead8 <HAL_TIM_ConfigClockSource+0x228>)
 800e956:	4293      	cmp	r3, r2
 800e958:	f000 8099 	beq.w	800ea8e <HAL_TIM_ConfigClockSource+0x1de>
 800e95c:	4a5e      	ldr	r2, [pc, #376]	@ (800ead8 <HAL_TIM_ConfigClockSource+0x228>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	f200 809e 	bhi.w	800eaa0 <HAL_TIM_ConfigClockSource+0x1f0>
 800e964:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e968:	f000 8091 	beq.w	800ea8e <HAL_TIM_ConfigClockSource+0x1de>
 800e96c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e970:	f200 8096 	bhi.w	800eaa0 <HAL_TIM_ConfigClockSource+0x1f0>
 800e974:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e978:	f000 8089 	beq.w	800ea8e <HAL_TIM_ConfigClockSource+0x1de>
 800e97c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e980:	f200 808e 	bhi.w	800eaa0 <HAL_TIM_ConfigClockSource+0x1f0>
 800e984:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e988:	d03e      	beq.n	800ea08 <HAL_TIM_ConfigClockSource+0x158>
 800e98a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e98e:	f200 8087 	bhi.w	800eaa0 <HAL_TIM_ConfigClockSource+0x1f0>
 800e992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e996:	f000 8086 	beq.w	800eaa6 <HAL_TIM_ConfigClockSource+0x1f6>
 800e99a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e99e:	d87f      	bhi.n	800eaa0 <HAL_TIM_ConfigClockSource+0x1f0>
 800e9a0:	2b70      	cmp	r3, #112	@ 0x70
 800e9a2:	d01a      	beq.n	800e9da <HAL_TIM_ConfigClockSource+0x12a>
 800e9a4:	2b70      	cmp	r3, #112	@ 0x70
 800e9a6:	d87b      	bhi.n	800eaa0 <HAL_TIM_ConfigClockSource+0x1f0>
 800e9a8:	2b60      	cmp	r3, #96	@ 0x60
 800e9aa:	d050      	beq.n	800ea4e <HAL_TIM_ConfigClockSource+0x19e>
 800e9ac:	2b60      	cmp	r3, #96	@ 0x60
 800e9ae:	d877      	bhi.n	800eaa0 <HAL_TIM_ConfigClockSource+0x1f0>
 800e9b0:	2b50      	cmp	r3, #80	@ 0x50
 800e9b2:	d03c      	beq.n	800ea2e <HAL_TIM_ConfigClockSource+0x17e>
 800e9b4:	2b50      	cmp	r3, #80	@ 0x50
 800e9b6:	d873      	bhi.n	800eaa0 <HAL_TIM_ConfigClockSource+0x1f0>
 800e9b8:	2b40      	cmp	r3, #64	@ 0x40
 800e9ba:	d058      	beq.n	800ea6e <HAL_TIM_ConfigClockSource+0x1be>
 800e9bc:	2b40      	cmp	r3, #64	@ 0x40
 800e9be:	d86f      	bhi.n	800eaa0 <HAL_TIM_ConfigClockSource+0x1f0>
 800e9c0:	2b30      	cmp	r3, #48	@ 0x30
 800e9c2:	d064      	beq.n	800ea8e <HAL_TIM_ConfigClockSource+0x1de>
 800e9c4:	2b30      	cmp	r3, #48	@ 0x30
 800e9c6:	d86b      	bhi.n	800eaa0 <HAL_TIM_ConfigClockSource+0x1f0>
 800e9c8:	2b20      	cmp	r3, #32
 800e9ca:	d060      	beq.n	800ea8e <HAL_TIM_ConfigClockSource+0x1de>
 800e9cc:	2b20      	cmp	r3, #32
 800e9ce:	d867      	bhi.n	800eaa0 <HAL_TIM_ConfigClockSource+0x1f0>
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d05c      	beq.n	800ea8e <HAL_TIM_ConfigClockSource+0x1de>
 800e9d4:	2b10      	cmp	r3, #16
 800e9d6:	d05a      	beq.n	800ea8e <HAL_TIM_ConfigClockSource+0x1de>
 800e9d8:	e062      	b.n	800eaa0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e9ea:	f000 fe8b 	bl	800f704 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	689b      	ldr	r3, [r3, #8]
 800e9f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e9fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	68ba      	ldr	r2, [r7, #8]
 800ea04:	609a      	str	r2, [r3, #8]
      break;
 800ea06:	e04f      	b.n	800eaa8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ea18:	f000 fe74 	bl	800f704 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	689a      	ldr	r2, [r3, #8]
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ea2a:	609a      	str	r2, [r3, #8]
      break;
 800ea2c:	e03c      	b.n	800eaa8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	f000 fde6 	bl	800f60c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2150      	movs	r1, #80	@ 0x50
 800ea46:	4618      	mov	r0, r3
 800ea48:	f000 fe3f 	bl	800f6ca <TIM_ITRx_SetConfig>
      break;
 800ea4c:	e02c      	b.n	800eaa8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ea5a:	461a      	mov	r2, r3
 800ea5c:	f000 fe05 	bl	800f66a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	2160      	movs	r1, #96	@ 0x60
 800ea66:	4618      	mov	r0, r3
 800ea68:	f000 fe2f 	bl	800f6ca <TIM_ITRx_SetConfig>
      break;
 800ea6c:	e01c      	b.n	800eaa8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	f000 fdc6 	bl	800f60c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	2140      	movs	r1, #64	@ 0x40
 800ea86:	4618      	mov	r0, r3
 800ea88:	f000 fe1f 	bl	800f6ca <TIM_ITRx_SetConfig>
      break;
 800ea8c:	e00c      	b.n	800eaa8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681a      	ldr	r2, [r3, #0]
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	4619      	mov	r1, r3
 800ea98:	4610      	mov	r0, r2
 800ea9a:	f000 fe16 	bl	800f6ca <TIM_ITRx_SetConfig>
      break;
 800ea9e:	e003      	b.n	800eaa8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	73fb      	strb	r3, [r7, #15]
      break;
 800eaa4:	e000      	b.n	800eaa8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800eaa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2201      	movs	r2, #1
 800eaac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2200      	movs	r2, #0
 800eab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eab8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	00100070 	.word	0x00100070
 800eac8:	00100060 	.word	0x00100060
 800eacc:	00100050 	.word	0x00100050
 800ead0:	00100040 	.word	0x00100040
 800ead4:	00100030 	.word	0x00100030
 800ead8:	00100020 	.word	0x00100020

0800eadc <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800eadc:	b480      	push	{r7}
 800eade:	b083      	sub	sp, #12
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800eae4:	bf00      	nop
 800eae6:	370c      	adds	r7, #12
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b083      	sub	sp, #12
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eaf8:	bf00      	nop
 800eafa:	370c      	adds	r7, #12
 800eafc:	46bd      	mov	sp, r7
 800eafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb02:	4770      	bx	lr

0800eb04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eb0c:	bf00      	nop
 800eb0e:	370c      	adds	r7, #12
 800eb10:	46bd      	mov	sp, r7
 800eb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb16:	4770      	bx	lr

0800eb18 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	b083      	sub	sp, #12
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800eb20:	bf00      	nop
 800eb22:	370c      	adds	r7, #12
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr

0800eb2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eb34:	bf00      	nop
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr

0800eb40 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b083      	sub	sp, #12
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800eb48:	bf00      	nop
 800eb4a:	370c      	adds	r7, #12
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr

0800eb54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eb54:	b480      	push	{r7}
 800eb56:	b083      	sub	sp, #12
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eb5c:	bf00      	nop
 800eb5e:	370c      	adds	r7, #12
 800eb60:	46bd      	mov	sp, r7
 800eb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb66:	4770      	bx	lr

0800eb68 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800eb68:	b480      	push	{r7}
 800eb6a:	b083      	sub	sp, #12
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800eb70:	bf00      	nop
 800eb72:	370c      	adds	r7, #12
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800eb84:	bf00      	nop
 800eb86:	370c      	adds	r7, #12
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr

0800eb90 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b087      	sub	sp, #28
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	60f8      	str	r0, [r7, #12]
 800eb98:	460b      	mov	r3, r1
 800eb9a:	607a      	str	r2, [r7, #4]
 800eb9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d101      	bne.n	800ebac <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	e14a      	b.n	800ee42 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ebb2:	b2db      	uxtb	r3, r3
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	f040 80dd 	bne.w	800ed74 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800ebba:	7afb      	ldrb	r3, [r7, #11]
 800ebbc:	2b1f      	cmp	r3, #31
 800ebbe:	f200 80d6 	bhi.w	800ed6e <HAL_TIM_RegisterCallback+0x1de>
 800ebc2:	a201      	add	r2, pc, #4	@ (adr r2, 800ebc8 <HAL_TIM_RegisterCallback+0x38>)
 800ebc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc8:	0800ec49 	.word	0x0800ec49
 800ebcc:	0800ec51 	.word	0x0800ec51
 800ebd0:	0800ec59 	.word	0x0800ec59
 800ebd4:	0800ec61 	.word	0x0800ec61
 800ebd8:	0800ec69 	.word	0x0800ec69
 800ebdc:	0800ec71 	.word	0x0800ec71
 800ebe0:	0800ec79 	.word	0x0800ec79
 800ebe4:	0800ec81 	.word	0x0800ec81
 800ebe8:	0800ec89 	.word	0x0800ec89
 800ebec:	0800ec91 	.word	0x0800ec91
 800ebf0:	0800ec99 	.word	0x0800ec99
 800ebf4:	0800eca1 	.word	0x0800eca1
 800ebf8:	0800eca9 	.word	0x0800eca9
 800ebfc:	0800ecb1 	.word	0x0800ecb1
 800ec00:	0800ecbb 	.word	0x0800ecbb
 800ec04:	0800ecc5 	.word	0x0800ecc5
 800ec08:	0800eccf 	.word	0x0800eccf
 800ec0c:	0800ecd9 	.word	0x0800ecd9
 800ec10:	0800ece3 	.word	0x0800ece3
 800ec14:	0800eced 	.word	0x0800eced
 800ec18:	0800ecf7 	.word	0x0800ecf7
 800ec1c:	0800ed01 	.word	0x0800ed01
 800ec20:	0800ed0b 	.word	0x0800ed0b
 800ec24:	0800ed15 	.word	0x0800ed15
 800ec28:	0800ed1f 	.word	0x0800ed1f
 800ec2c:	0800ed29 	.word	0x0800ed29
 800ec30:	0800ed33 	.word	0x0800ed33
 800ec34:	0800ed3d 	.word	0x0800ed3d
 800ec38:	0800ed47 	.word	0x0800ed47
 800ec3c:	0800ed51 	.word	0x0800ed51
 800ec40:	0800ed5b 	.word	0x0800ed5b
 800ec44:	0800ed65 	.word	0x0800ed65
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800ec4e:	e0f7      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	687a      	ldr	r2, [r7, #4]
 800ec54:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800ec56:	e0f3      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800ec5e:	e0ef      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800ec66:	e0eb      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800ec6e:	e0e7      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	687a      	ldr	r2, [r7, #4]
 800ec74:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800ec76:	e0e3      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	687a      	ldr	r2, [r7, #4]
 800ec7c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800ec7e:	e0df      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800ec86:	e0db      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	687a      	ldr	r2, [r7, #4]
 800ec8c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800ec8e:	e0d7      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	687a      	ldr	r2, [r7, #4]
 800ec94:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800ec96:	e0d3      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	687a      	ldr	r2, [r7, #4]
 800ec9c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800ec9e:	e0cf      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800eca6:	e0cb      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ecae:	e0c7      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	687a      	ldr	r2, [r7, #4]
 800ecb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800ecb8:	e0c2      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	687a      	ldr	r2, [r7, #4]
 800ecbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800ecc2:	e0bd      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	687a      	ldr	r2, [r7, #4]
 800ecc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800eccc:	e0b8      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800ecd6:	e0b3      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800ece0:	e0ae      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	687a      	ldr	r2, [r7, #4]
 800ece6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800ecea:	e0a9      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800ecf4:	e0a4      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	687a      	ldr	r2, [r7, #4]
 800ecfa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800ecfe:	e09f      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	687a      	ldr	r2, [r7, #4]
 800ed04:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800ed08:	e09a      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	687a      	ldr	r2, [r7, #4]
 800ed0e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800ed12:	e095      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800ed1c:	e090      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800ed26:	e08b      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	687a      	ldr	r2, [r7, #4]
 800ed2c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800ed30:	e086      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	687a      	ldr	r2, [r7, #4]
 800ed36:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800ed3a:	e081      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	687a      	ldr	r2, [r7, #4]
 800ed40:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800ed44:	e07c      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	687a      	ldr	r2, [r7, #4]
 800ed4a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800ed4e:	e077      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800ed58:	e072      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800ed62:	e06d      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	687a      	ldr	r2, [r7, #4]
 800ed68:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800ed6c:	e068      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	75fb      	strb	r3, [r7, #23]
        break;
 800ed72:	e065      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d15d      	bne.n	800ee3c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800ed80:	7afb      	ldrb	r3, [r7, #11]
 800ed82:	2b0d      	cmp	r3, #13
 800ed84:	d857      	bhi.n	800ee36 <HAL_TIM_RegisterCallback+0x2a6>
 800ed86:	a201      	add	r2, pc, #4	@ (adr r2, 800ed8c <HAL_TIM_RegisterCallback+0x1fc>)
 800ed88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed8c:	0800edc5 	.word	0x0800edc5
 800ed90:	0800edcd 	.word	0x0800edcd
 800ed94:	0800edd5 	.word	0x0800edd5
 800ed98:	0800eddd 	.word	0x0800eddd
 800ed9c:	0800ede5 	.word	0x0800ede5
 800eda0:	0800eded 	.word	0x0800eded
 800eda4:	0800edf5 	.word	0x0800edf5
 800eda8:	0800edfd 	.word	0x0800edfd
 800edac:	0800ee05 	.word	0x0800ee05
 800edb0:	0800ee0d 	.word	0x0800ee0d
 800edb4:	0800ee15 	.word	0x0800ee15
 800edb8:	0800ee1d 	.word	0x0800ee1d
 800edbc:	0800ee25 	.word	0x0800ee25
 800edc0:	0800ee2d 	.word	0x0800ee2d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	687a      	ldr	r2, [r7, #4]
 800edc8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800edca:	e039      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800edd2:	e035      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800edda:	e031      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	687a      	ldr	r2, [r7, #4]
 800ede0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800ede2:	e02d      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	687a      	ldr	r2, [r7, #4]
 800ede8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800edea:	e029      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800edf2:	e025      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800edfa:	e021      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800ee02:	e01d      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	687a      	ldr	r2, [r7, #4]
 800ee08:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800ee0a:	e019      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	687a      	ldr	r2, [r7, #4]
 800ee10:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800ee12:	e015      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	687a      	ldr	r2, [r7, #4]
 800ee18:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800ee1a:	e011      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ee22:	e00d      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	687a      	ldr	r2, [r7, #4]
 800ee28:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ee2a:	e009      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800ee34:	e004      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800ee36:	2301      	movs	r3, #1
 800ee38:	75fb      	strb	r3, [r7, #23]
        break;
 800ee3a:	e001      	b.n	800ee40 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ee40:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	371c      	adds	r7, #28
 800ee46:	46bd      	mov	sp, r7
 800ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4c:	4770      	bx	lr
 800ee4e:	bf00      	nop

0800ee50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b085      	sub	sp, #20
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	4a4c      	ldr	r2, [pc, #304]	@ (800ef94 <TIM_Base_SetConfig+0x144>)
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d017      	beq.n	800ee98 <TIM_Base_SetConfig+0x48>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee6e:	d013      	beq.n	800ee98 <TIM_Base_SetConfig+0x48>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	4a49      	ldr	r2, [pc, #292]	@ (800ef98 <TIM_Base_SetConfig+0x148>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d00f      	beq.n	800ee98 <TIM_Base_SetConfig+0x48>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	4a48      	ldr	r2, [pc, #288]	@ (800ef9c <TIM_Base_SetConfig+0x14c>)
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d00b      	beq.n	800ee98 <TIM_Base_SetConfig+0x48>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	4a47      	ldr	r2, [pc, #284]	@ (800efa0 <TIM_Base_SetConfig+0x150>)
 800ee84:	4293      	cmp	r3, r2
 800ee86:	d007      	beq.n	800ee98 <TIM_Base_SetConfig+0x48>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	4a46      	ldr	r2, [pc, #280]	@ (800efa4 <TIM_Base_SetConfig+0x154>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d003      	beq.n	800ee98 <TIM_Base_SetConfig+0x48>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	4a45      	ldr	r2, [pc, #276]	@ (800efa8 <TIM_Base_SetConfig+0x158>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d108      	bne.n	800eeaa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	68fa      	ldr	r2, [r7, #12]
 800eea6:	4313      	orrs	r3, r2
 800eea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	4a39      	ldr	r2, [pc, #228]	@ (800ef94 <TIM_Base_SetConfig+0x144>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d023      	beq.n	800eefa <TIM_Base_SetConfig+0xaa>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eeb8:	d01f      	beq.n	800eefa <TIM_Base_SetConfig+0xaa>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	4a36      	ldr	r2, [pc, #216]	@ (800ef98 <TIM_Base_SetConfig+0x148>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d01b      	beq.n	800eefa <TIM_Base_SetConfig+0xaa>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	4a35      	ldr	r2, [pc, #212]	@ (800ef9c <TIM_Base_SetConfig+0x14c>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d017      	beq.n	800eefa <TIM_Base_SetConfig+0xaa>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	4a34      	ldr	r2, [pc, #208]	@ (800efa0 <TIM_Base_SetConfig+0x150>)
 800eece:	4293      	cmp	r3, r2
 800eed0:	d013      	beq.n	800eefa <TIM_Base_SetConfig+0xaa>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	4a33      	ldr	r2, [pc, #204]	@ (800efa4 <TIM_Base_SetConfig+0x154>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d00f      	beq.n	800eefa <TIM_Base_SetConfig+0xaa>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	4a33      	ldr	r2, [pc, #204]	@ (800efac <TIM_Base_SetConfig+0x15c>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d00b      	beq.n	800eefa <TIM_Base_SetConfig+0xaa>
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	4a32      	ldr	r2, [pc, #200]	@ (800efb0 <TIM_Base_SetConfig+0x160>)
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d007      	beq.n	800eefa <TIM_Base_SetConfig+0xaa>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	4a31      	ldr	r2, [pc, #196]	@ (800efb4 <TIM_Base_SetConfig+0x164>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d003      	beq.n	800eefa <TIM_Base_SetConfig+0xaa>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	4a2c      	ldr	r2, [pc, #176]	@ (800efa8 <TIM_Base_SetConfig+0x158>)
 800eef6:	4293      	cmp	r3, r2
 800eef8:	d108      	bne.n	800ef0c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ef00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	68db      	ldr	r3, [r3, #12]
 800ef06:	68fa      	ldr	r2, [r7, #12]
 800ef08:	4313      	orrs	r3, r2
 800ef0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	695b      	ldr	r3, [r3, #20]
 800ef16:	4313      	orrs	r3, r2
 800ef18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	68fa      	ldr	r2, [r7, #12]
 800ef1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	689a      	ldr	r2, [r3, #8]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	4a18      	ldr	r2, [pc, #96]	@ (800ef94 <TIM_Base_SetConfig+0x144>)
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d013      	beq.n	800ef60 <TIM_Base_SetConfig+0x110>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	4a1a      	ldr	r2, [pc, #104]	@ (800efa4 <TIM_Base_SetConfig+0x154>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d00f      	beq.n	800ef60 <TIM_Base_SetConfig+0x110>
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	4a1a      	ldr	r2, [pc, #104]	@ (800efac <TIM_Base_SetConfig+0x15c>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d00b      	beq.n	800ef60 <TIM_Base_SetConfig+0x110>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	4a19      	ldr	r2, [pc, #100]	@ (800efb0 <TIM_Base_SetConfig+0x160>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d007      	beq.n	800ef60 <TIM_Base_SetConfig+0x110>
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	4a18      	ldr	r2, [pc, #96]	@ (800efb4 <TIM_Base_SetConfig+0x164>)
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d003      	beq.n	800ef60 <TIM_Base_SetConfig+0x110>
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	4a13      	ldr	r2, [pc, #76]	@ (800efa8 <TIM_Base_SetConfig+0x158>)
 800ef5c:	4293      	cmp	r3, r2
 800ef5e:	d103      	bne.n	800ef68 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	691a      	ldr	r2, [r3, #16]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	691b      	ldr	r3, [r3, #16]
 800ef72:	f003 0301 	and.w	r3, r3, #1
 800ef76:	2b01      	cmp	r3, #1
 800ef78:	d105      	bne.n	800ef86 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	691b      	ldr	r3, [r3, #16]
 800ef7e:	f023 0201 	bic.w	r2, r3, #1
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	611a      	str	r2, [r3, #16]
  }
}
 800ef86:	bf00      	nop
 800ef88:	3714      	adds	r7, #20
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef90:	4770      	bx	lr
 800ef92:	bf00      	nop
 800ef94:	40012c00 	.word	0x40012c00
 800ef98:	40000400 	.word	0x40000400
 800ef9c:	40000800 	.word	0x40000800
 800efa0:	40000c00 	.word	0x40000c00
 800efa4:	40013400 	.word	0x40013400
 800efa8:	40015000 	.word	0x40015000
 800efac:	40014000 	.word	0x40014000
 800efb0:	40014400 	.word	0x40014400
 800efb4:	40014800 	.word	0x40014800

0800efb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800efb8:	b480      	push	{r7}
 800efba:	b087      	sub	sp, #28
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6a1b      	ldr	r3, [r3, #32]
 800efc6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6a1b      	ldr	r3, [r3, #32]
 800efcc:	f023 0201 	bic.w	r2, r3, #1
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	685b      	ldr	r3, [r3, #4]
 800efd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	699b      	ldr	r3, [r3, #24]
 800efde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800efe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800efea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	f023 0303 	bic.w	r3, r3, #3
 800eff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eff4:	683b      	ldr	r3, [r7, #0]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	68fa      	ldr	r2, [r7, #12]
 800effa:	4313      	orrs	r3, r2
 800effc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	f023 0302 	bic.w	r3, r3, #2
 800f004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	689b      	ldr	r3, [r3, #8]
 800f00a:	697a      	ldr	r2, [r7, #20]
 800f00c:	4313      	orrs	r3, r2
 800f00e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	4a30      	ldr	r2, [pc, #192]	@ (800f0d4 <TIM_OC1_SetConfig+0x11c>)
 800f014:	4293      	cmp	r3, r2
 800f016:	d013      	beq.n	800f040 <TIM_OC1_SetConfig+0x88>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	4a2f      	ldr	r2, [pc, #188]	@ (800f0d8 <TIM_OC1_SetConfig+0x120>)
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d00f      	beq.n	800f040 <TIM_OC1_SetConfig+0x88>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	4a2e      	ldr	r2, [pc, #184]	@ (800f0dc <TIM_OC1_SetConfig+0x124>)
 800f024:	4293      	cmp	r3, r2
 800f026:	d00b      	beq.n	800f040 <TIM_OC1_SetConfig+0x88>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	4a2d      	ldr	r2, [pc, #180]	@ (800f0e0 <TIM_OC1_SetConfig+0x128>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d007      	beq.n	800f040 <TIM_OC1_SetConfig+0x88>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4a2c      	ldr	r2, [pc, #176]	@ (800f0e4 <TIM_OC1_SetConfig+0x12c>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d003      	beq.n	800f040 <TIM_OC1_SetConfig+0x88>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	4a2b      	ldr	r2, [pc, #172]	@ (800f0e8 <TIM_OC1_SetConfig+0x130>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d10c      	bne.n	800f05a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	f023 0308 	bic.w	r3, r3, #8
 800f046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f048:	683b      	ldr	r3, [r7, #0]
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	697a      	ldr	r2, [r7, #20]
 800f04e:	4313      	orrs	r3, r2
 800f050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	f023 0304 	bic.w	r3, r3, #4
 800f058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	4a1d      	ldr	r2, [pc, #116]	@ (800f0d4 <TIM_OC1_SetConfig+0x11c>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d013      	beq.n	800f08a <TIM_OC1_SetConfig+0xd2>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	4a1c      	ldr	r2, [pc, #112]	@ (800f0d8 <TIM_OC1_SetConfig+0x120>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d00f      	beq.n	800f08a <TIM_OC1_SetConfig+0xd2>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	4a1b      	ldr	r2, [pc, #108]	@ (800f0dc <TIM_OC1_SetConfig+0x124>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d00b      	beq.n	800f08a <TIM_OC1_SetConfig+0xd2>
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4a1a      	ldr	r2, [pc, #104]	@ (800f0e0 <TIM_OC1_SetConfig+0x128>)
 800f076:	4293      	cmp	r3, r2
 800f078:	d007      	beq.n	800f08a <TIM_OC1_SetConfig+0xd2>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	4a19      	ldr	r2, [pc, #100]	@ (800f0e4 <TIM_OC1_SetConfig+0x12c>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d003      	beq.n	800f08a <TIM_OC1_SetConfig+0xd2>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	4a18      	ldr	r2, [pc, #96]	@ (800f0e8 <TIM_OC1_SetConfig+0x130>)
 800f086:	4293      	cmp	r3, r2
 800f088:	d111      	bne.n	800f0ae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	695b      	ldr	r3, [r3, #20]
 800f09e:	693a      	ldr	r2, [r7, #16]
 800f0a0:	4313      	orrs	r3, r2
 800f0a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	699b      	ldr	r3, [r3, #24]
 800f0a8:	693a      	ldr	r2, [r7, #16]
 800f0aa:	4313      	orrs	r3, r2
 800f0ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	693a      	ldr	r2, [r7, #16]
 800f0b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	685a      	ldr	r2, [r3, #4]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	697a      	ldr	r2, [r7, #20]
 800f0c6:	621a      	str	r2, [r3, #32]
}
 800f0c8:	bf00      	nop
 800f0ca:	371c      	adds	r7, #28
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr
 800f0d4:	40012c00 	.word	0x40012c00
 800f0d8:	40013400 	.word	0x40013400
 800f0dc:	40014000 	.word	0x40014000
 800f0e0:	40014400 	.word	0x40014400
 800f0e4:	40014800 	.word	0x40014800
 800f0e8:	40015000 	.word	0x40015000

0800f0ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f0ec:	b480      	push	{r7}
 800f0ee:	b087      	sub	sp, #28
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6a1b      	ldr	r3, [r3, #32]
 800f0fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	6a1b      	ldr	r3, [r3, #32]
 800f100:	f023 0210 	bic.w	r2, r3, #16
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	699b      	ldr	r3, [r3, #24]
 800f112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f11a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f11e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	021b      	lsls	r3, r3, #8
 800f12e:	68fa      	ldr	r2, [r7, #12]
 800f130:	4313      	orrs	r3, r2
 800f132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	f023 0320 	bic.w	r3, r3, #32
 800f13a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	689b      	ldr	r3, [r3, #8]
 800f140:	011b      	lsls	r3, r3, #4
 800f142:	697a      	ldr	r2, [r7, #20]
 800f144:	4313      	orrs	r3, r2
 800f146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	4a2c      	ldr	r2, [pc, #176]	@ (800f1fc <TIM_OC2_SetConfig+0x110>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d007      	beq.n	800f160 <TIM_OC2_SetConfig+0x74>
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	4a2b      	ldr	r2, [pc, #172]	@ (800f200 <TIM_OC2_SetConfig+0x114>)
 800f154:	4293      	cmp	r3, r2
 800f156:	d003      	beq.n	800f160 <TIM_OC2_SetConfig+0x74>
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	4a2a      	ldr	r2, [pc, #168]	@ (800f204 <TIM_OC2_SetConfig+0x118>)
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d10d      	bne.n	800f17c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f168:	683b      	ldr	r3, [r7, #0]
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	011b      	lsls	r3, r3, #4
 800f16e:	697a      	ldr	r2, [r7, #20]
 800f170:	4313      	orrs	r3, r2
 800f172:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f17a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	4a1f      	ldr	r2, [pc, #124]	@ (800f1fc <TIM_OC2_SetConfig+0x110>)
 800f180:	4293      	cmp	r3, r2
 800f182:	d013      	beq.n	800f1ac <TIM_OC2_SetConfig+0xc0>
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	4a1e      	ldr	r2, [pc, #120]	@ (800f200 <TIM_OC2_SetConfig+0x114>)
 800f188:	4293      	cmp	r3, r2
 800f18a:	d00f      	beq.n	800f1ac <TIM_OC2_SetConfig+0xc0>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	4a1e      	ldr	r2, [pc, #120]	@ (800f208 <TIM_OC2_SetConfig+0x11c>)
 800f190:	4293      	cmp	r3, r2
 800f192:	d00b      	beq.n	800f1ac <TIM_OC2_SetConfig+0xc0>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	4a1d      	ldr	r2, [pc, #116]	@ (800f20c <TIM_OC2_SetConfig+0x120>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d007      	beq.n	800f1ac <TIM_OC2_SetConfig+0xc0>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	4a1c      	ldr	r2, [pc, #112]	@ (800f210 <TIM_OC2_SetConfig+0x124>)
 800f1a0:	4293      	cmp	r3, r2
 800f1a2:	d003      	beq.n	800f1ac <TIM_OC2_SetConfig+0xc0>
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4a17      	ldr	r2, [pc, #92]	@ (800f204 <TIM_OC2_SetConfig+0x118>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d113      	bne.n	800f1d4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f1b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f1ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	695b      	ldr	r3, [r3, #20]
 800f1c0:	009b      	lsls	r3, r3, #2
 800f1c2:	693a      	ldr	r2, [r7, #16]
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	699b      	ldr	r3, [r3, #24]
 800f1cc:	009b      	lsls	r3, r3, #2
 800f1ce:	693a      	ldr	r2, [r7, #16]
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	693a      	ldr	r2, [r7, #16]
 800f1d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	68fa      	ldr	r2, [r7, #12]
 800f1de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f1e0:	683b      	ldr	r3, [r7, #0]
 800f1e2:	685a      	ldr	r2, [r3, #4]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	697a      	ldr	r2, [r7, #20]
 800f1ec:	621a      	str	r2, [r3, #32]
}
 800f1ee:	bf00      	nop
 800f1f0:	371c      	adds	r7, #28
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop
 800f1fc:	40012c00 	.word	0x40012c00
 800f200:	40013400 	.word	0x40013400
 800f204:	40015000 	.word	0x40015000
 800f208:	40014000 	.word	0x40014000
 800f20c:	40014400 	.word	0x40014400
 800f210:	40014800 	.word	0x40014800

0800f214 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f214:	b480      	push	{r7}
 800f216:	b087      	sub	sp, #28
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6a1b      	ldr	r3, [r3, #32]
 800f222:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	6a1b      	ldr	r3, [r3, #32]
 800f228:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	69db      	ldr	r3, [r3, #28]
 800f23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f023 0303 	bic.w	r3, r3, #3
 800f24e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	68fa      	ldr	r2, [r7, #12]
 800f256:	4313      	orrs	r3, r2
 800f258:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f260:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	689b      	ldr	r3, [r3, #8]
 800f266:	021b      	lsls	r3, r3, #8
 800f268:	697a      	ldr	r2, [r7, #20]
 800f26a:	4313      	orrs	r3, r2
 800f26c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	4a2b      	ldr	r2, [pc, #172]	@ (800f320 <TIM_OC3_SetConfig+0x10c>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d007      	beq.n	800f286 <TIM_OC3_SetConfig+0x72>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	4a2a      	ldr	r2, [pc, #168]	@ (800f324 <TIM_OC3_SetConfig+0x110>)
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d003      	beq.n	800f286 <TIM_OC3_SetConfig+0x72>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	4a29      	ldr	r2, [pc, #164]	@ (800f328 <TIM_OC3_SetConfig+0x114>)
 800f282:	4293      	cmp	r3, r2
 800f284:	d10d      	bne.n	800f2a2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f28c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	68db      	ldr	r3, [r3, #12]
 800f292:	021b      	lsls	r3, r3, #8
 800f294:	697a      	ldr	r2, [r7, #20]
 800f296:	4313      	orrs	r3, r2
 800f298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f2a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	4a1e      	ldr	r2, [pc, #120]	@ (800f320 <TIM_OC3_SetConfig+0x10c>)
 800f2a6:	4293      	cmp	r3, r2
 800f2a8:	d013      	beq.n	800f2d2 <TIM_OC3_SetConfig+0xbe>
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	4a1d      	ldr	r2, [pc, #116]	@ (800f324 <TIM_OC3_SetConfig+0x110>)
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d00f      	beq.n	800f2d2 <TIM_OC3_SetConfig+0xbe>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	4a1d      	ldr	r2, [pc, #116]	@ (800f32c <TIM_OC3_SetConfig+0x118>)
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d00b      	beq.n	800f2d2 <TIM_OC3_SetConfig+0xbe>
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	4a1c      	ldr	r2, [pc, #112]	@ (800f330 <TIM_OC3_SetConfig+0x11c>)
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d007      	beq.n	800f2d2 <TIM_OC3_SetConfig+0xbe>
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	4a1b      	ldr	r2, [pc, #108]	@ (800f334 <TIM_OC3_SetConfig+0x120>)
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	d003      	beq.n	800f2d2 <TIM_OC3_SetConfig+0xbe>
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	4a16      	ldr	r2, [pc, #88]	@ (800f328 <TIM_OC3_SetConfig+0x114>)
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d113      	bne.n	800f2fa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f2d2:	693b      	ldr	r3, [r7, #16]
 800f2d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f2d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f2e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	695b      	ldr	r3, [r3, #20]
 800f2e6:	011b      	lsls	r3, r3, #4
 800f2e8:	693a      	ldr	r2, [r7, #16]
 800f2ea:	4313      	orrs	r3, r2
 800f2ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	699b      	ldr	r3, [r3, #24]
 800f2f2:	011b      	lsls	r3, r3, #4
 800f2f4:	693a      	ldr	r2, [r7, #16]
 800f2f6:	4313      	orrs	r3, r2
 800f2f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	693a      	ldr	r2, [r7, #16]
 800f2fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	68fa      	ldr	r2, [r7, #12]
 800f304:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	685a      	ldr	r2, [r3, #4]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	697a      	ldr	r2, [r7, #20]
 800f312:	621a      	str	r2, [r3, #32]
}
 800f314:	bf00      	nop
 800f316:	371c      	adds	r7, #28
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr
 800f320:	40012c00 	.word	0x40012c00
 800f324:	40013400 	.word	0x40013400
 800f328:	40015000 	.word	0x40015000
 800f32c:	40014000 	.word	0x40014000
 800f330:	40014400 	.word	0x40014400
 800f334:	40014800 	.word	0x40014800

0800f338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f338:	b480      	push	{r7}
 800f33a:	b087      	sub	sp, #28
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6a1b      	ldr	r3, [r3, #32]
 800f346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6a1b      	ldr	r3, [r3, #32]
 800f34c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	69db      	ldr	r3, [r3, #28]
 800f35e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f366:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f36a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	021b      	lsls	r3, r3, #8
 800f37a:	68fa      	ldr	r2, [r7, #12]
 800f37c:	4313      	orrs	r3, r2
 800f37e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f380:	697b      	ldr	r3, [r7, #20]
 800f382:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	689b      	ldr	r3, [r3, #8]
 800f38c:	031b      	lsls	r3, r3, #12
 800f38e:	697a      	ldr	r2, [r7, #20]
 800f390:	4313      	orrs	r3, r2
 800f392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	4a2c      	ldr	r2, [pc, #176]	@ (800f448 <TIM_OC4_SetConfig+0x110>)
 800f398:	4293      	cmp	r3, r2
 800f39a:	d007      	beq.n	800f3ac <TIM_OC4_SetConfig+0x74>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	4a2b      	ldr	r2, [pc, #172]	@ (800f44c <TIM_OC4_SetConfig+0x114>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d003      	beq.n	800f3ac <TIM_OC4_SetConfig+0x74>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	4a2a      	ldr	r2, [pc, #168]	@ (800f450 <TIM_OC4_SetConfig+0x118>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d10d      	bne.n	800f3c8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f3b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	031b      	lsls	r3, r3, #12
 800f3ba:	697a      	ldr	r2, [r7, #20]
 800f3bc:	4313      	orrs	r3, r2
 800f3be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f3c0:	697b      	ldr	r3, [r7, #20]
 800f3c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f3c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	4a1f      	ldr	r2, [pc, #124]	@ (800f448 <TIM_OC4_SetConfig+0x110>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d013      	beq.n	800f3f8 <TIM_OC4_SetConfig+0xc0>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	4a1e      	ldr	r2, [pc, #120]	@ (800f44c <TIM_OC4_SetConfig+0x114>)
 800f3d4:	4293      	cmp	r3, r2
 800f3d6:	d00f      	beq.n	800f3f8 <TIM_OC4_SetConfig+0xc0>
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	4a1e      	ldr	r2, [pc, #120]	@ (800f454 <TIM_OC4_SetConfig+0x11c>)
 800f3dc:	4293      	cmp	r3, r2
 800f3de:	d00b      	beq.n	800f3f8 <TIM_OC4_SetConfig+0xc0>
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	4a1d      	ldr	r2, [pc, #116]	@ (800f458 <TIM_OC4_SetConfig+0x120>)
 800f3e4:	4293      	cmp	r3, r2
 800f3e6:	d007      	beq.n	800f3f8 <TIM_OC4_SetConfig+0xc0>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	4a1c      	ldr	r2, [pc, #112]	@ (800f45c <TIM_OC4_SetConfig+0x124>)
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d003      	beq.n	800f3f8 <TIM_OC4_SetConfig+0xc0>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	4a17      	ldr	r2, [pc, #92]	@ (800f450 <TIM_OC4_SetConfig+0x118>)
 800f3f4:	4293      	cmp	r3, r2
 800f3f6:	d113      	bne.n	800f420 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f3fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f400:	693b      	ldr	r3, [r7, #16]
 800f402:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800f406:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	695b      	ldr	r3, [r3, #20]
 800f40c:	019b      	lsls	r3, r3, #6
 800f40e:	693a      	ldr	r2, [r7, #16]
 800f410:	4313      	orrs	r3, r2
 800f412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	699b      	ldr	r3, [r3, #24]
 800f418:	019b      	lsls	r3, r3, #6
 800f41a:	693a      	ldr	r2, [r7, #16]
 800f41c:	4313      	orrs	r3, r2
 800f41e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	693a      	ldr	r2, [r7, #16]
 800f424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	68fa      	ldr	r2, [r7, #12]
 800f42a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	685a      	ldr	r2, [r3, #4]
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	697a      	ldr	r2, [r7, #20]
 800f438:	621a      	str	r2, [r3, #32]
}
 800f43a:	bf00      	nop
 800f43c:	371c      	adds	r7, #28
 800f43e:	46bd      	mov	sp, r7
 800f440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f444:	4770      	bx	lr
 800f446:	bf00      	nop
 800f448:	40012c00 	.word	0x40012c00
 800f44c:	40013400 	.word	0x40013400
 800f450:	40015000 	.word	0x40015000
 800f454:	40014000 	.word	0x40014000
 800f458:	40014400 	.word	0x40014400
 800f45c:	40014800 	.word	0x40014800

0800f460 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f460:	b480      	push	{r7}
 800f462:	b087      	sub	sp, #28
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6a1b      	ldr	r3, [r3, #32]
 800f46e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6a1b      	ldr	r3, [r3, #32]
 800f474:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f48e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	68fa      	ldr	r2, [r7, #12]
 800f49a:	4313      	orrs	r3, r2
 800f49c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f49e:	693b      	ldr	r3, [r7, #16]
 800f4a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f4a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	689b      	ldr	r3, [r3, #8]
 800f4aa:	041b      	lsls	r3, r3, #16
 800f4ac:	693a      	ldr	r2, [r7, #16]
 800f4ae:	4313      	orrs	r3, r2
 800f4b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	4a19      	ldr	r2, [pc, #100]	@ (800f51c <TIM_OC5_SetConfig+0xbc>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d013      	beq.n	800f4e2 <TIM_OC5_SetConfig+0x82>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4a18      	ldr	r2, [pc, #96]	@ (800f520 <TIM_OC5_SetConfig+0xc0>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d00f      	beq.n	800f4e2 <TIM_OC5_SetConfig+0x82>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4a17      	ldr	r2, [pc, #92]	@ (800f524 <TIM_OC5_SetConfig+0xc4>)
 800f4c6:	4293      	cmp	r3, r2
 800f4c8:	d00b      	beq.n	800f4e2 <TIM_OC5_SetConfig+0x82>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	4a16      	ldr	r2, [pc, #88]	@ (800f528 <TIM_OC5_SetConfig+0xc8>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	d007      	beq.n	800f4e2 <TIM_OC5_SetConfig+0x82>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	4a15      	ldr	r2, [pc, #84]	@ (800f52c <TIM_OC5_SetConfig+0xcc>)
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	d003      	beq.n	800f4e2 <TIM_OC5_SetConfig+0x82>
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4a14      	ldr	r2, [pc, #80]	@ (800f530 <TIM_OC5_SetConfig+0xd0>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d109      	bne.n	800f4f6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f4e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	695b      	ldr	r3, [r3, #20]
 800f4ee:	021b      	lsls	r3, r3, #8
 800f4f0:	697a      	ldr	r2, [r7, #20]
 800f4f2:	4313      	orrs	r3, r2
 800f4f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	697a      	ldr	r2, [r7, #20]
 800f4fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	68fa      	ldr	r2, [r7, #12]
 800f500:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	685a      	ldr	r2, [r3, #4]
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	693a      	ldr	r2, [r7, #16]
 800f50e:	621a      	str	r2, [r3, #32]
}
 800f510:	bf00      	nop
 800f512:	371c      	adds	r7, #28
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr
 800f51c:	40012c00 	.word	0x40012c00
 800f520:	40013400 	.word	0x40013400
 800f524:	40014000 	.word	0x40014000
 800f528:	40014400 	.word	0x40014400
 800f52c:	40014800 	.word	0x40014800
 800f530:	40015000 	.word	0x40015000

0800f534 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f534:	b480      	push	{r7}
 800f536:	b087      	sub	sp, #28
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6a1b      	ldr	r3, [r3, #32]
 800f542:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	6a1b      	ldr	r3, [r3, #32]
 800f548:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	685b      	ldr	r3, [r3, #4]
 800f554:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f55a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	021b      	lsls	r3, r3, #8
 800f56e:	68fa      	ldr	r2, [r7, #12]
 800f570:	4313      	orrs	r3, r2
 800f572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f57a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	689b      	ldr	r3, [r3, #8]
 800f580:	051b      	lsls	r3, r3, #20
 800f582:	693a      	ldr	r2, [r7, #16]
 800f584:	4313      	orrs	r3, r2
 800f586:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	4a1a      	ldr	r2, [pc, #104]	@ (800f5f4 <TIM_OC6_SetConfig+0xc0>)
 800f58c:	4293      	cmp	r3, r2
 800f58e:	d013      	beq.n	800f5b8 <TIM_OC6_SetConfig+0x84>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	4a19      	ldr	r2, [pc, #100]	@ (800f5f8 <TIM_OC6_SetConfig+0xc4>)
 800f594:	4293      	cmp	r3, r2
 800f596:	d00f      	beq.n	800f5b8 <TIM_OC6_SetConfig+0x84>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	4a18      	ldr	r2, [pc, #96]	@ (800f5fc <TIM_OC6_SetConfig+0xc8>)
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d00b      	beq.n	800f5b8 <TIM_OC6_SetConfig+0x84>
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	4a17      	ldr	r2, [pc, #92]	@ (800f600 <TIM_OC6_SetConfig+0xcc>)
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	d007      	beq.n	800f5b8 <TIM_OC6_SetConfig+0x84>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	4a16      	ldr	r2, [pc, #88]	@ (800f604 <TIM_OC6_SetConfig+0xd0>)
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	d003      	beq.n	800f5b8 <TIM_OC6_SetConfig+0x84>
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	4a15      	ldr	r2, [pc, #84]	@ (800f608 <TIM_OC6_SetConfig+0xd4>)
 800f5b4:	4293      	cmp	r3, r2
 800f5b6:	d109      	bne.n	800f5cc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f5be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	695b      	ldr	r3, [r3, #20]
 800f5c4:	029b      	lsls	r3, r3, #10
 800f5c6:	697a      	ldr	r2, [r7, #20]
 800f5c8:	4313      	orrs	r3, r2
 800f5ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	697a      	ldr	r2, [r7, #20]
 800f5d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	68fa      	ldr	r2, [r7, #12]
 800f5d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	685a      	ldr	r2, [r3, #4]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	693a      	ldr	r2, [r7, #16]
 800f5e4:	621a      	str	r2, [r3, #32]
}
 800f5e6:	bf00      	nop
 800f5e8:	371c      	adds	r7, #28
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f0:	4770      	bx	lr
 800f5f2:	bf00      	nop
 800f5f4:	40012c00 	.word	0x40012c00
 800f5f8:	40013400 	.word	0x40013400
 800f5fc:	40014000 	.word	0x40014000
 800f600:	40014400 	.word	0x40014400
 800f604:	40014800 	.word	0x40014800
 800f608:	40015000 	.word	0x40015000

0800f60c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f60c:	b480      	push	{r7}
 800f60e:	b087      	sub	sp, #28
 800f610:	af00      	add	r7, sp, #0
 800f612:	60f8      	str	r0, [r7, #12]
 800f614:	60b9      	str	r1, [r7, #8]
 800f616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	6a1b      	ldr	r3, [r3, #32]
 800f61c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	6a1b      	ldr	r3, [r3, #32]
 800f622:	f023 0201 	bic.w	r2, r3, #1
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	699b      	ldr	r3, [r3, #24]
 800f62e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	011b      	lsls	r3, r3, #4
 800f63c:	693a      	ldr	r2, [r7, #16]
 800f63e:	4313      	orrs	r3, r2
 800f640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f642:	697b      	ldr	r3, [r7, #20]
 800f644:	f023 030a 	bic.w	r3, r3, #10
 800f648:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f64a:	697a      	ldr	r2, [r7, #20]
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	4313      	orrs	r3, r2
 800f650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	693a      	ldr	r2, [r7, #16]
 800f656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	697a      	ldr	r2, [r7, #20]
 800f65c:	621a      	str	r2, [r3, #32]
}
 800f65e:	bf00      	nop
 800f660:	371c      	adds	r7, #28
 800f662:	46bd      	mov	sp, r7
 800f664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f668:	4770      	bx	lr

0800f66a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f66a:	b480      	push	{r7}
 800f66c:	b087      	sub	sp, #28
 800f66e:	af00      	add	r7, sp, #0
 800f670:	60f8      	str	r0, [r7, #12]
 800f672:	60b9      	str	r1, [r7, #8]
 800f674:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	6a1b      	ldr	r3, [r3, #32]
 800f67a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	6a1b      	ldr	r3, [r3, #32]
 800f680:	f023 0210 	bic.w	r2, r3, #16
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	699b      	ldr	r3, [r3, #24]
 800f68c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f694:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	031b      	lsls	r3, r3, #12
 800f69a:	693a      	ldr	r2, [r7, #16]
 800f69c:	4313      	orrs	r3, r2
 800f69e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f6a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	011b      	lsls	r3, r3, #4
 800f6ac:	697a      	ldr	r2, [r7, #20]
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	693a      	ldr	r2, [r7, #16]
 800f6b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	697a      	ldr	r2, [r7, #20]
 800f6bc:	621a      	str	r2, [r3, #32]
}
 800f6be:	bf00      	nop
 800f6c0:	371c      	adds	r7, #28
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c8:	4770      	bx	lr

0800f6ca <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f6ca:	b480      	push	{r7}
 800f6cc:	b085      	sub	sp, #20
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	6078      	str	r0, [r7, #4]
 800f6d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	689b      	ldr	r3, [r3, #8]
 800f6d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f6e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f6e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f6e6:	683a      	ldr	r2, [r7, #0]
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	4313      	orrs	r3, r2
 800f6ec:	f043 0307 	orr.w	r3, r3, #7
 800f6f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	68fa      	ldr	r2, [r7, #12]
 800f6f6:	609a      	str	r2, [r3, #8]
}
 800f6f8:	bf00      	nop
 800f6fa:	3714      	adds	r7, #20
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr

0800f704 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f704:	b480      	push	{r7}
 800f706:	b087      	sub	sp, #28
 800f708:	af00      	add	r7, sp, #0
 800f70a:	60f8      	str	r0, [r7, #12]
 800f70c:	60b9      	str	r1, [r7, #8]
 800f70e:	607a      	str	r2, [r7, #4]
 800f710:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	689b      	ldr	r3, [r3, #8]
 800f716:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f71e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f720:	683b      	ldr	r3, [r7, #0]
 800f722:	021a      	lsls	r2, r3, #8
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	431a      	orrs	r2, r3
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	4313      	orrs	r3, r2
 800f72c:	697a      	ldr	r2, [r7, #20]
 800f72e:	4313      	orrs	r3, r2
 800f730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	697a      	ldr	r2, [r7, #20]
 800f736:	609a      	str	r2, [r3, #8]
}
 800f738:	bf00      	nop
 800f73a:	371c      	adds	r7, #28
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr

0800f744 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f744:	b480      	push	{r7}
 800f746:	b087      	sub	sp, #28
 800f748:	af00      	add	r7, sp, #0
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	f003 031f 	and.w	r3, r3, #31
 800f756:	2201      	movs	r2, #1
 800f758:	fa02 f303 	lsl.w	r3, r2, r3
 800f75c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	6a1a      	ldr	r2, [r3, #32]
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	43db      	mvns	r3, r3
 800f766:	401a      	ands	r2, r3
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	6a1a      	ldr	r2, [r3, #32]
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	f003 031f 	and.w	r3, r3, #31
 800f776:	6879      	ldr	r1, [r7, #4]
 800f778:	fa01 f303 	lsl.w	r3, r1, r3
 800f77c:	431a      	orrs	r2, r3
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	621a      	str	r2, [r3, #32]
}
 800f782:	bf00      	nop
 800f784:	371c      	adds	r7, #28
 800f786:	46bd      	mov	sp, r7
 800f788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78c:	4770      	bx	lr
	...

0800f790 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800f790:	b480      	push	{r7}
 800f792:	b083      	sub	sp, #12
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	4a26      	ldr	r2, [pc, #152]	@ (800f834 <TIM_ResetCallback+0xa4>)
 800f79c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	4a25      	ldr	r2, [pc, #148]	@ (800f838 <TIM_ResetCallback+0xa8>)
 800f7a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	4a24      	ldr	r2, [pc, #144]	@ (800f83c <TIM_ResetCallback+0xac>)
 800f7ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	4a23      	ldr	r2, [pc, #140]	@ (800f840 <TIM_ResetCallback+0xb0>)
 800f7b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	4a22      	ldr	r2, [pc, #136]	@ (800f844 <TIM_ResetCallback+0xb4>)
 800f7bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	4a21      	ldr	r2, [pc, #132]	@ (800f848 <TIM_ResetCallback+0xb8>)
 800f7c4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	4a20      	ldr	r2, [pc, #128]	@ (800f84c <TIM_ResetCallback+0xbc>)
 800f7cc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	4a1f      	ldr	r2, [pc, #124]	@ (800f850 <TIM_ResetCallback+0xc0>)
 800f7d4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	4a1e      	ldr	r2, [pc, #120]	@ (800f854 <TIM_ResetCallback+0xc4>)
 800f7dc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	4a1d      	ldr	r2, [pc, #116]	@ (800f858 <TIM_ResetCallback+0xc8>)
 800f7e4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	4a1c      	ldr	r2, [pc, #112]	@ (800f85c <TIM_ResetCallback+0xcc>)
 800f7ec:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	4a1b      	ldr	r2, [pc, #108]	@ (800f860 <TIM_ResetCallback+0xd0>)
 800f7f4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	4a1a      	ldr	r2, [pc, #104]	@ (800f864 <TIM_ResetCallback+0xd4>)
 800f7fc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	4a19      	ldr	r2, [pc, #100]	@ (800f868 <TIM_ResetCallback+0xd8>)
 800f804:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	4a18      	ldr	r2, [pc, #96]	@ (800f86c <TIM_ResetCallback+0xdc>)
 800f80c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	4a17      	ldr	r2, [pc, #92]	@ (800f870 <TIM_ResetCallback+0xe0>)
 800f814:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	4a16      	ldr	r2, [pc, #88]	@ (800f874 <TIM_ResetCallback+0xe4>)
 800f81c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	4a15      	ldr	r2, [pc, #84]	@ (800f878 <TIM_ResetCallback+0xe8>)
 800f824:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800f828:	bf00      	nop
 800f82a:	370c      	adds	r7, #12
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr
 800f834:	0800843d 	.word	0x0800843d
 800f838:	0800eadd 	.word	0x0800eadd
 800f83c:	0800eb55 	.word	0x0800eb55
 800f840:	0800eb69 	.word	0x0800eb69
 800f844:	0800eb05 	.word	0x0800eb05
 800f848:	0800eb19 	.word	0x0800eb19
 800f84c:	0800eaf1 	.word	0x0800eaf1
 800f850:	0800eb2d 	.word	0x0800eb2d
 800f854:	0800eb41 	.word	0x0800eb41
 800f858:	0800eb7d 	.word	0x0800eb7d
 800f85c:	0800fad1 	.word	0x0800fad1
 800f860:	0800fae5 	.word	0x0800fae5
 800f864:	0800faf9 	.word	0x0800faf9
 800f868:	0800fb0d 	.word	0x0800fb0d
 800f86c:	0800fb21 	.word	0x0800fb21
 800f870:	0800fb35 	.word	0x0800fb35
 800f874:	0800fb49 	.word	0x0800fb49
 800f878:	0800fb5d 	.word	0x0800fb5d

0800f87c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f87c:	b480      	push	{r7}
 800f87e:	b085      	sub	sp, #20
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d101      	bne.n	800f894 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f890:	2302      	movs	r3, #2
 800f892:	e074      	b.n	800f97e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2201      	movs	r2, #1
 800f898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2202      	movs	r2, #2
 800f8a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	685b      	ldr	r3, [r3, #4]
 800f8aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	689b      	ldr	r3, [r3, #8]
 800f8b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	4a34      	ldr	r2, [pc, #208]	@ (800f98c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	d009      	beq.n	800f8d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	4a33      	ldr	r2, [pc, #204]	@ (800f990 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	d004      	beq.n	800f8d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	4a31      	ldr	r2, [pc, #196]	@ (800f994 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d108      	bne.n	800f8e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f8d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f8da:	683b      	ldr	r3, [r7, #0]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	68fa      	ldr	r2, [r7, #12]
 800f8e0:	4313      	orrs	r3, r2
 800f8e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f8ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f8ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	4313      	orrs	r3, r2
 800f8f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	68fa      	ldr	r2, [r7, #12]
 800f900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	4a21      	ldr	r2, [pc, #132]	@ (800f98c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f908:	4293      	cmp	r3, r2
 800f90a:	d022      	beq.n	800f952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f914:	d01d      	beq.n	800f952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	4a1f      	ldr	r2, [pc, #124]	@ (800f998 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f91c:	4293      	cmp	r3, r2
 800f91e:	d018      	beq.n	800f952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	4a1d      	ldr	r2, [pc, #116]	@ (800f99c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f926:	4293      	cmp	r3, r2
 800f928:	d013      	beq.n	800f952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	4a1c      	ldr	r2, [pc, #112]	@ (800f9a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f930:	4293      	cmp	r3, r2
 800f932:	d00e      	beq.n	800f952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	4a15      	ldr	r2, [pc, #84]	@ (800f990 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d009      	beq.n	800f952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	4a18      	ldr	r2, [pc, #96]	@ (800f9a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f944:	4293      	cmp	r3, r2
 800f946:	d004      	beq.n	800f952 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	4a11      	ldr	r2, [pc, #68]	@ (800f994 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f94e:	4293      	cmp	r3, r2
 800f950:	d10c      	bne.n	800f96c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f958:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	689b      	ldr	r3, [r3, #8]
 800f95e:	68ba      	ldr	r2, [r7, #8]
 800f960:	4313      	orrs	r3, r2
 800f962:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	68ba      	ldr	r2, [r7, #8]
 800f96a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2201      	movs	r2, #1
 800f970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	2200      	movs	r2, #0
 800f978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f97c:	2300      	movs	r3, #0
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3714      	adds	r7, #20
 800f982:	46bd      	mov	sp, r7
 800f984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f988:	4770      	bx	lr
 800f98a:	bf00      	nop
 800f98c:	40012c00 	.word	0x40012c00
 800f990:	40013400 	.word	0x40013400
 800f994:	40015000 	.word	0x40015000
 800f998:	40000400 	.word	0x40000400
 800f99c:	40000800 	.word	0x40000800
 800f9a0:	40000c00 	.word	0x40000c00
 800f9a4:	40014000 	.word	0x40014000

0800f9a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f9a8:	b480      	push	{r7}
 800f9aa:	b085      	sub	sp, #20
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f9bc:	2b01      	cmp	r3, #1
 800f9be:	d101      	bne.n	800f9c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f9c0:	2302      	movs	r3, #2
 800f9c2:	e078      	b.n	800fab6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	68db      	ldr	r3, [r3, #12]
 800f9d6:	4313      	orrs	r3, r2
 800f9d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	689b      	ldr	r3, [r3, #8]
 800f9e4:	4313      	orrs	r3, r2
 800f9e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	685b      	ldr	r3, [r3, #4]
 800f9f2:	4313      	orrs	r3, r2
 800f9f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	4313      	orrs	r3, r2
 800fa02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	691b      	ldr	r3, [r3, #16]
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	695b      	ldr	r3, [r3, #20]
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fa2a:	4313      	orrs	r3, r2
 800fa2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	699b      	ldr	r3, [r3, #24]
 800fa38:	041b      	lsls	r3, r3, #16
 800fa3a:	4313      	orrs	r3, r2
 800fa3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	69db      	ldr	r3, [r3, #28]
 800fa48:	4313      	orrs	r3, r2
 800fa4a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	4a1c      	ldr	r2, [pc, #112]	@ (800fac4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d009      	beq.n	800fa6a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	4a1b      	ldr	r2, [pc, #108]	@ (800fac8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d004      	beq.n	800fa6a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	4a19      	ldr	r2, [pc, #100]	@ (800facc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d11c      	bne.n	800faa4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa74:	051b      	lsls	r3, r3, #20
 800fa76:	4313      	orrs	r3, r2
 800fa78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	6a1b      	ldr	r3, [r3, #32]
 800fa84:	4313      	orrs	r3, r2
 800fa86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fa92:	4313      	orrs	r3, r2
 800fa94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faa0:	4313      	orrs	r3, r2
 800faa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	68fa      	ldr	r2, [r7, #12]
 800faaa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2200      	movs	r2, #0
 800fab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fab4:	2300      	movs	r3, #0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3714      	adds	r7, #20
 800faba:	46bd      	mov	sp, r7
 800fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac0:	4770      	bx	lr
 800fac2:	bf00      	nop
 800fac4:	40012c00 	.word	0x40012c00
 800fac8:	40013400 	.word	0x40013400
 800facc:	40015000 	.word	0x40015000

0800fad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fad8:	bf00      	nop
 800fada:	370c      	adds	r7, #12
 800fadc:	46bd      	mov	sp, r7
 800fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae2:	4770      	bx	lr

0800fae4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800fae4:	b480      	push	{r7}
 800fae6:	b083      	sub	sp, #12
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800faec:	bf00      	nop
 800faee:	370c      	adds	r7, #12
 800faf0:	46bd      	mov	sp, r7
 800faf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf6:	4770      	bx	lr

0800faf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b083      	sub	sp, #12
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fb00:	bf00      	nop
 800fb02:	370c      	adds	r7, #12
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b083      	sub	sp, #12
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fb14:	bf00      	nop
 800fb16:	370c      	adds	r7, #12
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr

0800fb20 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800fb20:	b480      	push	{r7}
 800fb22:	b083      	sub	sp, #12
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800fb28:	bf00      	nop
 800fb2a:	370c      	adds	r7, #12
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb32:	4770      	bx	lr

0800fb34 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800fb34:	b480      	push	{r7}
 800fb36:	b083      	sub	sp, #12
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800fb3c:	bf00      	nop
 800fb3e:	370c      	adds	r7, #12
 800fb40:	46bd      	mov	sp, r7
 800fb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb46:	4770      	bx	lr

0800fb48 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b083      	sub	sp, #12
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800fb50:	bf00      	nop
 800fb52:	370c      	adds	r7, #12
 800fb54:	46bd      	mov	sp, r7
 800fb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5a:	4770      	bx	lr

0800fb5c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	b083      	sub	sp, #12
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800fb64:	bf00      	nop
 800fb66:	370c      	adds	r7, #12
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr

0800fb70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d101      	bne.n	800fb82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fb7e:	2301      	movs	r3, #1
 800fb80:	e050      	b.n	800fc24 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d114      	bne.n	800fbb6 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f000 fde5 	bl	8010764 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d103      	bne.n	800fbac <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	4a21      	ldr	r2, [pc, #132]	@ (800fc2c <HAL_UART_Init+0xbc>)
 800fba8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2224      	movs	r2, #36	@ 0x24
 800fbba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	681a      	ldr	r2, [r3, #0]
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	f022 0201 	bic.w	r2, r2, #1
 800fbcc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d002      	beq.n	800fbdc <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f001 f912 	bl	8010e00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f000 fe13 	bl	8010808 <UART_SetConfig>
 800fbe2:	4603      	mov	r3, r0
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	d101      	bne.n	800fbec <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800fbe8:	2301      	movs	r3, #1
 800fbea:	e01b      	b.n	800fc24 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	685a      	ldr	r2, [r3, #4]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fbfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	689a      	ldr	r2, [r3, #8]
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fc0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	f042 0201 	orr.w	r2, r2, #1
 800fc1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f001 f991 	bl	8010f44 <UART_CheckIdleState>
 800fc22:	4603      	mov	r3, r0
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3708      	adds	r7, #8
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	0800a011 	.word	0x0800a011

0800fc30 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800fc30:	b480      	push	{r7}
 800fc32:	b087      	sub	sp, #28
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	60f8      	str	r0, [r7, #12]
 800fc38:	460b      	mov	r3, r1
 800fc3a:	607a      	str	r2, [r7, #4]
 800fc3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d109      	bne.n	800fc5c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fc4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800fc58:	2301      	movs	r3, #1
 800fc5a:	e09c      	b.n	800fd96 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fc62:	2b20      	cmp	r3, #32
 800fc64:	d16c      	bne.n	800fd40 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800fc66:	7afb      	ldrb	r3, [r7, #11]
 800fc68:	2b0c      	cmp	r3, #12
 800fc6a:	d85e      	bhi.n	800fd2a <HAL_UART_RegisterCallback+0xfa>
 800fc6c:	a201      	add	r2, pc, #4	@ (adr r2, 800fc74 <HAL_UART_RegisterCallback+0x44>)
 800fc6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc72:	bf00      	nop
 800fc74:	0800fca9 	.word	0x0800fca9
 800fc78:	0800fcb3 	.word	0x0800fcb3
 800fc7c:	0800fcbd 	.word	0x0800fcbd
 800fc80:	0800fcc7 	.word	0x0800fcc7
 800fc84:	0800fcd1 	.word	0x0800fcd1
 800fc88:	0800fcdb 	.word	0x0800fcdb
 800fc8c:	0800fce5 	.word	0x0800fce5
 800fc90:	0800fcef 	.word	0x0800fcef
 800fc94:	0800fcf9 	.word	0x0800fcf9
 800fc98:	0800fd03 	.word	0x0800fd03
 800fc9c:	0800fd0d 	.word	0x0800fd0d
 800fca0:	0800fd17 	.word	0x0800fd17
 800fca4:	0800fd21 	.word	0x0800fd21
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	687a      	ldr	r2, [r7, #4]
 800fcac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800fcb0:	e070      	b.n	800fd94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	687a      	ldr	r2, [r7, #4]
 800fcb6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800fcba:	e06b      	b.n	800fd94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	687a      	ldr	r2, [r7, #4]
 800fcc0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800fcc4:	e066      	b.n	800fd94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	687a      	ldr	r2, [r7, #4]
 800fcca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800fcce:	e061      	b.n	800fd94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800fcd8:	e05c      	b.n	800fd94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	687a      	ldr	r2, [r7, #4]
 800fcde:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800fce2:	e057      	b.n	800fd94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	687a      	ldr	r2, [r7, #4]
 800fce8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800fcec:	e052      	b.n	800fd94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	687a      	ldr	r2, [r7, #4]
 800fcf2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800fcf6:	e04d      	b.n	800fd94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	687a      	ldr	r2, [r7, #4]
 800fcfc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800fd00:	e048      	b.n	800fd94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	687a      	ldr	r2, [r7, #4]
 800fd06:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800fd0a:	e043      	b.n	800fd94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	687a      	ldr	r2, [r7, #4]
 800fd10:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800fd14:	e03e      	b.n	800fd94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800fd1e:	e039      	b.n	800fd94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	687a      	ldr	r2, [r7, #4]
 800fd24:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800fd28:	e034      	b.n	800fd94 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	75fb      	strb	r3, [r7, #23]
        break;
 800fd3e:	e029      	b.n	800fd94 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d11a      	bne.n	800fd80 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800fd4a:	7afb      	ldrb	r3, [r7, #11]
 800fd4c:	2b0b      	cmp	r3, #11
 800fd4e:	d002      	beq.n	800fd56 <HAL_UART_RegisterCallback+0x126>
 800fd50:	2b0c      	cmp	r3, #12
 800fd52:	d005      	beq.n	800fd60 <HAL_UART_RegisterCallback+0x130>
 800fd54:	e009      	b.n	800fd6a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	687a      	ldr	r2, [r7, #4]
 800fd5a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800fd5e:	e019      	b.n	800fd94 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	687a      	ldr	r2, [r7, #4]
 800fd64:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800fd68:	e014      	b.n	800fd94 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	75fb      	strb	r3, [r7, #23]
        break;
 800fd7e:	e009      	b.n	800fd94 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fd86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800fd90:	2301      	movs	r3, #1
 800fd92:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800fd94:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	371c      	adds	r7, #28
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda0:	4770      	bx	lr
 800fda2:	bf00      	nop

0800fda4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b08a      	sub	sp, #40	@ 0x28
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	4613      	mov	r3, r2
 800fdb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fdb8:	2b20      	cmp	r3, #32
 800fdba:	d167      	bne.n	800fe8c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d002      	beq.n	800fdc8 <HAL_UART_Transmit_DMA+0x24>
 800fdc2:	88fb      	ldrh	r3, [r7, #6]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d101      	bne.n	800fdcc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800fdc8:	2301      	movs	r3, #1
 800fdca:	e060      	b.n	800fe8e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	68ba      	ldr	r2, [r7, #8]
 800fdd0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	88fa      	ldrh	r2, [r7, #6]
 800fdd6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	88fa      	ldrh	r2, [r7, #6]
 800fdde:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	2200      	movs	r2, #0
 800fde6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	2221      	movs	r2, #33	@ 0x21
 800fdee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d028      	beq.n	800fe4c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fdfe:	4a26      	ldr	r2, [pc, #152]	@ (800fe98 <HAL_UART_Transmit_DMA+0xf4>)
 800fe00:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fe06:	4a25      	ldr	r2, [pc, #148]	@ (800fe9c <HAL_UART_Transmit_DMA+0xf8>)
 800fe08:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fe0e:	4a24      	ldr	r2, [pc, #144]	@ (800fea0 <HAL_UART_Transmit_DMA+0xfc>)
 800fe10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fe16:	2200      	movs	r2, #0
 800fe18:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe22:	4619      	mov	r1, r3
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	3328      	adds	r3, #40	@ 0x28
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	88fb      	ldrh	r3, [r7, #6]
 800fe2e:	f7fc f919 	bl	800c064 <HAL_DMA_Start_IT>
 800fe32:	4603      	mov	r3, r0
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d009      	beq.n	800fe4c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	2210      	movs	r2, #16
 800fe3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2220      	movs	r2, #32
 800fe44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800fe48:	2301      	movs	r3, #1
 800fe4a:	e020      	b.n	800fe8e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	2240      	movs	r2, #64	@ 0x40
 800fe52:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	3308      	adds	r3, #8
 800fe5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	e853 3f00 	ldrex	r3, [r3]
 800fe62:	613b      	str	r3, [r7, #16]
   return(result);
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe6a:	627b      	str	r3, [r7, #36]	@ 0x24
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	3308      	adds	r3, #8
 800fe72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe74:	623a      	str	r2, [r7, #32]
 800fe76:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe78:	69f9      	ldr	r1, [r7, #28]
 800fe7a:	6a3a      	ldr	r2, [r7, #32]
 800fe7c:	e841 2300 	strex	r3, r2, [r1]
 800fe80:	61bb      	str	r3, [r7, #24]
   return(result);
 800fe82:	69bb      	ldr	r3, [r7, #24]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d1e5      	bne.n	800fe54 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	e000      	b.n	800fe8e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800fe8c:	2302      	movs	r3, #2
  }
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3728      	adds	r7, #40	@ 0x28
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	0801140f 	.word	0x0801140f
 800fe9c:	080114ad 	.word	0x080114ad
 800fea0:	08011647 	.word	0x08011647

0800fea4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b08a      	sub	sp, #40	@ 0x28
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	4613      	mov	r3, r2
 800feb0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800feb8:	2b20      	cmp	r3, #32
 800feba:	d137      	bne.n	800ff2c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d002      	beq.n	800fec8 <HAL_UART_Receive_DMA+0x24>
 800fec2:	88fb      	ldrh	r3, [r7, #6]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d101      	bne.n	800fecc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800fec8:	2301      	movs	r3, #1
 800feca:	e030      	b.n	800ff2e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	2200      	movs	r2, #0
 800fed0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	4a18      	ldr	r2, [pc, #96]	@ (800ff38 <HAL_UART_Receive_DMA+0x94>)
 800fed8:	4293      	cmp	r3, r2
 800feda:	d01f      	beq.n	800ff1c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d018      	beq.n	800ff1c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	e853 3f00 	ldrex	r3, [r3]
 800fef6:	613b      	str	r3, [r7, #16]
   return(result);
 800fef8:	693b      	ldr	r3, [r7, #16]
 800fefa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fefe:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	461a      	mov	r2, r3
 800ff06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff08:	623b      	str	r3, [r7, #32]
 800ff0a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff0c:	69f9      	ldr	r1, [r7, #28]
 800ff0e:	6a3a      	ldr	r2, [r7, #32]
 800ff10:	e841 2300 	strex	r3, r2, [r1]
 800ff14:	61bb      	str	r3, [r7, #24]
   return(result);
 800ff16:	69bb      	ldr	r3, [r7, #24]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d1e6      	bne.n	800feea <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ff1c:	88fb      	ldrh	r3, [r7, #6]
 800ff1e:	461a      	mov	r2, r3
 800ff20:	68b9      	ldr	r1, [r7, #8]
 800ff22:	68f8      	ldr	r0, [r7, #12]
 800ff24:	f001 f926 	bl	8011174 <UART_Start_Receive_DMA>
 800ff28:	4603      	mov	r3, r0
 800ff2a:	e000      	b.n	800ff2e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ff2c:	2302      	movs	r3, #2
  }
}
 800ff2e:	4618      	mov	r0, r3
 800ff30:	3728      	adds	r7, #40	@ 0x28
 800ff32:	46bd      	mov	sp, r7
 800ff34:	bd80      	pop	{r7, pc}
 800ff36:	bf00      	nop
 800ff38:	40008000 	.word	0x40008000

0800ff3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b0ba      	sub	sp, #232	@ 0xe8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	69db      	ldr	r3, [r3, #28]
 800ff4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	689b      	ldr	r3, [r3, #8]
 800ff5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ff62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ff66:	f640 030f 	movw	r3, #2063	@ 0x80f
 800ff6a:	4013      	ands	r3, r2
 800ff6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800ff70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d11b      	bne.n	800ffb0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ff78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff7c:	f003 0320 	and.w	r3, r3, #32
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d015      	beq.n	800ffb0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ff84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff88:	f003 0320 	and.w	r3, r3, #32
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d105      	bne.n	800ff9c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ff90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ff94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d009      	beq.n	800ffb0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	f000 8312 	beq.w	80105ca <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	4798      	blx	r3
      }
      return;
 800ffae:	e30c      	b.n	80105ca <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ffb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	f000 8129 	beq.w	801020c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ffba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ffbe:	4b90      	ldr	r3, [pc, #576]	@ (8010200 <HAL_UART_IRQHandler+0x2c4>)
 800ffc0:	4013      	ands	r3, r2
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d106      	bne.n	800ffd4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ffc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800ffca:	4b8e      	ldr	r3, [pc, #568]	@ (8010204 <HAL_UART_IRQHandler+0x2c8>)
 800ffcc:	4013      	ands	r3, r2
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	f000 811c 	beq.w	801020c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ffd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ffd8:	f003 0301 	and.w	r3, r3, #1
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d011      	beq.n	8010004 <HAL_UART_IRQHandler+0xc8>
 800ffe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ffe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d00b      	beq.n	8010004 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	2201      	movs	r2, #1
 800fff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fffa:	f043 0201 	orr.w	r2, r3, #1
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010008:	f003 0302 	and.w	r3, r3, #2
 801000c:	2b00      	cmp	r3, #0
 801000e:	d011      	beq.n	8010034 <HAL_UART_IRQHandler+0xf8>
 8010010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010014:	f003 0301 	and.w	r3, r3, #1
 8010018:	2b00      	cmp	r3, #0
 801001a:	d00b      	beq.n	8010034 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2202      	movs	r2, #2
 8010022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801002a:	f043 0204 	orr.w	r2, r3, #4
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010038:	f003 0304 	and.w	r3, r3, #4
 801003c:	2b00      	cmp	r3, #0
 801003e:	d011      	beq.n	8010064 <HAL_UART_IRQHandler+0x128>
 8010040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010044:	f003 0301 	and.w	r3, r3, #1
 8010048:	2b00      	cmp	r3, #0
 801004a:	d00b      	beq.n	8010064 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	2204      	movs	r2, #4
 8010052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801005a:	f043 0202 	orr.w	r2, r3, #2
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010068:	f003 0308 	and.w	r3, r3, #8
 801006c:	2b00      	cmp	r3, #0
 801006e:	d017      	beq.n	80100a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010074:	f003 0320 	and.w	r3, r3, #32
 8010078:	2b00      	cmp	r3, #0
 801007a:	d105      	bne.n	8010088 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 801007c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010080:	4b5f      	ldr	r3, [pc, #380]	@ (8010200 <HAL_UART_IRQHandler+0x2c4>)
 8010082:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010084:	2b00      	cmp	r3, #0
 8010086:	d00b      	beq.n	80100a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	2208      	movs	r2, #8
 801008e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010096:	f043 0208 	orr.w	r2, r3, #8
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80100a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d012      	beq.n	80100d2 <HAL_UART_IRQHandler+0x196>
 80100ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80100b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d00c      	beq.n	80100d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80100c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100c8:	f043 0220 	orr.w	r2, r3, #32
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100d8:	2b00      	cmp	r3, #0
 80100da:	f000 8278 	beq.w	80105ce <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80100de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100e2:	f003 0320 	and.w	r3, r3, #32
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d013      	beq.n	8010112 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80100ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80100ee:	f003 0320 	and.w	r3, r3, #32
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d105      	bne.n	8010102 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80100f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80100fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d007      	beq.n	8010112 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010106:	2b00      	cmp	r3, #0
 8010108:	d003      	beq.n	8010112 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010118:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	689b      	ldr	r3, [r3, #8]
 8010122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010126:	2b40      	cmp	r3, #64	@ 0x40
 8010128:	d005      	beq.n	8010136 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801012a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801012e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010132:	2b00      	cmp	r3, #0
 8010134:	d058      	beq.n	80101e8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f001 f903 	bl	8011342 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	689b      	ldr	r3, [r3, #8]
 8010142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010146:	2b40      	cmp	r3, #64	@ 0x40
 8010148:	d148      	bne.n	80101dc <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	3308      	adds	r3, #8
 8010150:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010154:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010158:	e853 3f00 	ldrex	r3, [r3]
 801015c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010160:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010168:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	3308      	adds	r3, #8
 8010172:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010176:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801017a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801017e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010182:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010186:	e841 2300 	strex	r3, r2, [r1]
 801018a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801018e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010192:	2b00      	cmp	r3, #0
 8010194:	d1d9      	bne.n	801014a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801019c:	2b00      	cmp	r3, #0
 801019e:	d017      	beq.n	80101d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101a6:	4a18      	ldr	r2, [pc, #96]	@ (8010208 <HAL_UART_IRQHandler+0x2cc>)
 80101a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7fc f82b 	bl	800c20c <HAL_DMA_Abort_IT>
 80101b6:	4603      	mov	r3, r0
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d01f      	beq.n	80101fc <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80101c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101c4:	687a      	ldr	r2, [r7, #4]
 80101c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80101ca:	4610      	mov	r0, r2
 80101cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101ce:	e015      	b.n	80101fc <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101da:	e00f      	b.n	80101fc <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101e6:	e009      	b.n	80101fc <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	2200      	movs	r2, #0
 80101f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80101fa:	e1e8      	b.n	80105ce <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101fc:	bf00      	nop
    return;
 80101fe:	e1e6      	b.n	80105ce <HAL_UART_IRQHandler+0x692>
 8010200:	10000001 	.word	0x10000001
 8010204:	04000120 	.word	0x04000120
 8010208:	080116cb 	.word	0x080116cb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010210:	2b01      	cmp	r3, #1
 8010212:	f040 8176 	bne.w	8010502 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801021a:	f003 0310 	and.w	r3, r3, #16
 801021e:	2b00      	cmp	r3, #0
 8010220:	f000 816f 	beq.w	8010502 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010228:	f003 0310 	and.w	r3, r3, #16
 801022c:	2b00      	cmp	r3, #0
 801022e:	f000 8168 	beq.w	8010502 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	2210      	movs	r2, #16
 8010238:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	689b      	ldr	r3, [r3, #8]
 8010240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010244:	2b40      	cmp	r3, #64	@ 0x40
 8010246:	f040 80dc 	bne.w	8010402 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	685b      	ldr	r3, [r3, #4]
 8010254:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010258:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801025c:	2b00      	cmp	r3, #0
 801025e:	f000 80b1 	beq.w	80103c4 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010268:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801026c:	429a      	cmp	r2, r3
 801026e:	f080 80a9 	bcs.w	80103c4 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010278:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	f003 0320 	and.w	r3, r3, #32
 801028a:	2b00      	cmp	r3, #0
 801028c:	f040 8087 	bne.w	801039e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010298:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801029c:	e853 3f00 	ldrex	r3, [r3]
 80102a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80102a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80102a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80102ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	461a      	mov	r2, r3
 80102b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80102ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80102be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80102c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80102ca:	e841 2300 	strex	r3, r2, [r1]
 80102ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80102d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d1da      	bne.n	8010290 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	3308      	adds	r3, #8
 80102e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80102e4:	e853 3f00 	ldrex	r3, [r3]
 80102e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80102ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80102ec:	f023 0301 	bic.w	r3, r3, #1
 80102f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	3308      	adds	r3, #8
 80102fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80102fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010302:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010304:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010306:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801030a:	e841 2300 	strex	r3, r2, [r1]
 801030e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010310:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010312:	2b00      	cmp	r3, #0
 8010314:	d1e1      	bne.n	80102da <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	3308      	adds	r3, #8
 801031c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801031e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010320:	e853 3f00 	ldrex	r3, [r3]
 8010324:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801032c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	3308      	adds	r3, #8
 8010336:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801033a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801033c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801033e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010340:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010342:	e841 2300 	strex	r3, r2, [r1]
 8010346:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010348:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801034a:	2b00      	cmp	r3, #0
 801034c:	d1e3      	bne.n	8010316 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2220      	movs	r2, #32
 8010352:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2200      	movs	r2, #0
 801035a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010364:	e853 3f00 	ldrex	r3, [r3]
 8010368:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801036a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801036c:	f023 0310 	bic.w	r3, r3, #16
 8010370:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	461a      	mov	r2, r3
 801037a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801037e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010380:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010382:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010384:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010386:	e841 2300 	strex	r3, r2, [r1]
 801038a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801038c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801038e:	2b00      	cmp	r3, #0
 8010390:	d1e4      	bne.n	801035c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010398:	4618      	mov	r0, r3
 801039a:	f7fb fede 	bl	800c15a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2202      	movs	r2, #2
 80103a2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80103aa:	687a      	ldr	r2, [r7, #4]
 80103ac:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80103b0:	687a      	ldr	r2, [r7, #4]
 80103b2:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80103b6:	b292      	uxth	r2, r2
 80103b8:	1a8a      	subs	r2, r1, r2
 80103ba:	b292      	uxth	r2, r2
 80103bc:	4611      	mov	r1, r2
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80103c2:	e106      	b.n	80105d2 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80103ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80103ce:	429a      	cmp	r2, r3
 80103d0:	f040 80ff 	bne.w	80105d2 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	f003 0320 	and.w	r3, r3, #32
 80103e2:	2b20      	cmp	r3, #32
 80103e4:	f040 80f5 	bne.w	80105d2 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2202      	movs	r2, #2
 80103ec:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80103f4:	687a      	ldr	r2, [r7, #4]
 80103f6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80103fa:	4611      	mov	r1, r2
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	4798      	blx	r3
      return;
 8010400:	e0e7      	b.n	80105d2 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801040e:	b29b      	uxth	r3, r3
 8010410:	1ad3      	subs	r3, r2, r3
 8010412:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801041c:	b29b      	uxth	r3, r3
 801041e:	2b00      	cmp	r3, #0
 8010420:	f000 80d9 	beq.w	80105d6 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8010424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010428:	2b00      	cmp	r3, #0
 801042a:	f000 80d4 	beq.w	80105d6 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010436:	e853 3f00 	ldrex	r3, [r3]
 801043a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801043c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801043e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010442:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	461a      	mov	r2, r3
 801044c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010450:	647b      	str	r3, [r7, #68]	@ 0x44
 8010452:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010454:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010458:	e841 2300 	strex	r3, r2, [r1]
 801045c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801045e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010460:	2b00      	cmp	r3, #0
 8010462:	d1e4      	bne.n	801042e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	3308      	adds	r3, #8
 801046a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801046c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801046e:	e853 3f00 	ldrex	r3, [r3]
 8010472:	623b      	str	r3, [r7, #32]
   return(result);
 8010474:	6a3b      	ldr	r3, [r7, #32]
 8010476:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801047a:	f023 0301 	bic.w	r3, r3, #1
 801047e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	3308      	adds	r3, #8
 8010488:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801048c:	633a      	str	r2, [r7, #48]	@ 0x30
 801048e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010490:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010492:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010494:	e841 2300 	strex	r3, r2, [r1]
 8010498:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801049a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801049c:	2b00      	cmp	r3, #0
 801049e:	d1e1      	bne.n	8010464 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2220      	movs	r2, #32
 80104a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2200      	movs	r2, #0
 80104ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2200      	movs	r2, #0
 80104b2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ba:	693b      	ldr	r3, [r7, #16]
 80104bc:	e853 3f00 	ldrex	r3, [r3]
 80104c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	f023 0310 	bic.w	r3, r3, #16
 80104c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	461a      	mov	r2, r3
 80104d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80104d6:	61fb      	str	r3, [r7, #28]
 80104d8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104da:	69b9      	ldr	r1, [r7, #24]
 80104dc:	69fa      	ldr	r2, [r7, #28]
 80104de:	e841 2300 	strex	r3, r2, [r1]
 80104e2:	617b      	str	r3, [r7, #20]
   return(result);
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d1e4      	bne.n	80104b4 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	2202      	movs	r2, #2
 80104ee:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80104f6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80104fa:	4611      	mov	r1, r2
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010500:	e069      	b.n	80105d6 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010506:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801050a:	2b00      	cmp	r3, #0
 801050c:	d010      	beq.n	8010530 <HAL_UART_IRQHandler+0x5f4>
 801050e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010512:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010516:	2b00      	cmp	r3, #0
 8010518:	d00a      	beq.n	8010530 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8010522:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801052e:	e055      	b.n	80105dc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010538:	2b00      	cmp	r3, #0
 801053a:	d014      	beq.n	8010566 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801053c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010544:	2b00      	cmp	r3, #0
 8010546:	d105      	bne.n	8010554 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801054c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010550:	2b00      	cmp	r3, #0
 8010552:	d008      	beq.n	8010566 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010558:	2b00      	cmp	r3, #0
 801055a:	d03e      	beq.n	80105da <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	4798      	blx	r3
    }
    return;
 8010564:	e039      	b.n	80105da <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801056a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801056e:	2b00      	cmp	r3, #0
 8010570:	d009      	beq.n	8010586 <HAL_UART_IRQHandler+0x64a>
 8010572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801057a:	2b00      	cmp	r3, #0
 801057c:	d003      	beq.n	8010586 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f001 f8b7 	bl	80116f2 <UART_EndTransmit_IT>
    return;
 8010584:	e02a      	b.n	80105dc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801058a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801058e:	2b00      	cmp	r3, #0
 8010590:	d00b      	beq.n	80105aa <HAL_UART_IRQHandler+0x66e>
 8010592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010596:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801059a:	2b00      	cmp	r3, #0
 801059c:	d005      	beq.n	80105aa <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80105a8:	e018      	b.n	80105dc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80105aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80105ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d012      	beq.n	80105dc <HAL_UART_IRQHandler+0x6a0>
 80105b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	da0e      	bge.n	80105dc <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80105c8:	e008      	b.n	80105dc <HAL_UART_IRQHandler+0x6a0>
      return;
 80105ca:	bf00      	nop
 80105cc:	e006      	b.n	80105dc <HAL_UART_IRQHandler+0x6a0>
    return;
 80105ce:	bf00      	nop
 80105d0:	e004      	b.n	80105dc <HAL_UART_IRQHandler+0x6a0>
      return;
 80105d2:	bf00      	nop
 80105d4:	e002      	b.n	80105dc <HAL_UART_IRQHandler+0x6a0>
      return;
 80105d6:	bf00      	nop
 80105d8:	e000      	b.n	80105dc <HAL_UART_IRQHandler+0x6a0>
    return;
 80105da:	bf00      	nop
  }
}
 80105dc:	37e8      	adds	r7, #232	@ 0xe8
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop

080105e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80105e4:	b480      	push	{r7}
 80105e6:	b083      	sub	sp, #12
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80105ec:	bf00      	nop
 80105ee:	370c      	adds	r7, #12
 80105f0:	46bd      	mov	sp, r7
 80105f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f6:	4770      	bx	lr

080105f8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80105f8:	b480      	push	{r7}
 80105fa:	b083      	sub	sp, #12
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010600:	bf00      	nop
 8010602:	370c      	adds	r7, #12
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr

0801060c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801060c:	b480      	push	{r7}
 801060e:	b083      	sub	sp, #12
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8010614:	bf00      	nop
 8010616:	370c      	adds	r7, #12
 8010618:	46bd      	mov	sp, r7
 801061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061e:	4770      	bx	lr

08010620 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010620:	b480      	push	{r7}
 8010622:	b083      	sub	sp, #12
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010628:	bf00      	nop
 801062a:	370c      	adds	r7, #12
 801062c:	46bd      	mov	sp, r7
 801062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010632:	4770      	bx	lr

08010634 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010634:	b480      	push	{r7}
 8010636:	b083      	sub	sp, #12
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801063c:	bf00      	nop
 801063e:	370c      	adds	r7, #12
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr

08010648 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8010648:	b480      	push	{r7}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8010650:	bf00      	nop
 8010652:	370c      	adds	r7, #12
 8010654:	46bd      	mov	sp, r7
 8010656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065a:	4770      	bx	lr

0801065c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801065c:	b480      	push	{r7}
 801065e:	b083      	sub	sp, #12
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8010664:	bf00      	nop
 8010666:	370c      	adds	r7, #12
 8010668:	46bd      	mov	sp, r7
 801066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066e:	4770      	bx	lr

08010670 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8010670:	b480      	push	{r7}
 8010672:	b083      	sub	sp, #12
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8010678:	bf00      	nop
 801067a:	370c      	adds	r7, #12
 801067c:	46bd      	mov	sp, r7
 801067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010682:	4770      	bx	lr

08010684 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010684:	b480      	push	{r7}
 8010686:	b083      	sub	sp, #12
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	460b      	mov	r3, r1
 801068e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010690:	bf00      	nop
 8010692:	370c      	adds	r7, #12
 8010694:	46bd      	mov	sp, r7
 8010696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069a:	4770      	bx	lr

0801069c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 801069c:	b480      	push	{r7}
 801069e:	b083      	sub	sp, #12
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
 80106a4:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	4a09      	ldr	r2, [pc, #36]	@ (80106d0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 80106ac:	4293      	cmp	r3, r2
 80106ae:	d009      	beq.n	80106c4 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	695b      	ldr	r3, [r3, #20]
 80106b6:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	683a      	ldr	r2, [r7, #0]
 80106c0:	430a      	orrs	r2, r1
 80106c2:	615a      	str	r2, [r3, #20]
  }
}
 80106c4:	bf00      	nop
 80106c6:	370c      	adds	r7, #12
 80106c8:	46bd      	mov	sp, r7
 80106ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ce:	4770      	bx	lr
 80106d0:	40008000 	.word	0x40008000

080106d4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4a18      	ldr	r2, [pc, #96]	@ (8010744 <HAL_UART_EnableReceiverTimeout+0x70>)
 80106e2:	4293      	cmp	r3, r2
 80106e4:	d027      	beq.n	8010736 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80106ec:	2b20      	cmp	r3, #32
 80106ee:	d120      	bne.n	8010732 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80106f6:	2b01      	cmp	r3, #1
 80106f8:	d101      	bne.n	80106fe <HAL_UART_EnableReceiverTimeout+0x2a>
 80106fa:	2302      	movs	r3, #2
 80106fc:	e01c      	b.n	8010738 <HAL_UART_EnableReceiverTimeout+0x64>
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	2201      	movs	r2, #1
 8010702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	2224      	movs	r2, #36	@ 0x24
 801070a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	685a      	ldr	r2, [r3, #4]
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 801071c:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2220      	movs	r2, #32
 8010722:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2200      	movs	r2, #0
 801072a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 801072e:	2300      	movs	r3, #0
 8010730:	e002      	b.n	8010738 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8010732:	2302      	movs	r3, #2
 8010734:	e000      	b.n	8010738 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8010736:	2301      	movs	r3, #1
  }
}
 8010738:	4618      	mov	r0, r3
 801073a:	370c      	adds	r7, #12
 801073c:	46bd      	mov	sp, r7
 801073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010742:	4770      	bx	lr
 8010744:	40008000 	.word	0x40008000

08010748 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8010748:	b480      	push	{r7}
 801074a:	b083      	sub	sp, #12
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8010756:	4618      	mov	r0, r3
 8010758:	370c      	adds	r7, #12
 801075a:	46bd      	mov	sp, r7
 801075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010760:	4770      	bx	lr
	...

08010764 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8010764:	b480      	push	{r7}
 8010766:	b083      	sub	sp, #12
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	4a1a      	ldr	r2, [pc, #104]	@ (80107d8 <UART_InitCallbacksToDefault+0x74>)
 8010770:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	4a19      	ldr	r2, [pc, #100]	@ (80107dc <UART_InitCallbacksToDefault+0x78>)
 8010778:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	4a18      	ldr	r2, [pc, #96]	@ (80107e0 <UART_InitCallbacksToDefault+0x7c>)
 8010780:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	4a17      	ldr	r2, [pc, #92]	@ (80107e4 <UART_InitCallbacksToDefault+0x80>)
 8010788:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	4a16      	ldr	r2, [pc, #88]	@ (80107e8 <UART_InitCallbacksToDefault+0x84>)
 8010790:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	4a15      	ldr	r2, [pc, #84]	@ (80107ec <UART_InitCallbacksToDefault+0x88>)
 8010798:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	4a14      	ldr	r2, [pc, #80]	@ (80107f0 <UART_InitCallbacksToDefault+0x8c>)
 80107a0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	4a13      	ldr	r2, [pc, #76]	@ (80107f4 <UART_InitCallbacksToDefault+0x90>)
 80107a8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	4a12      	ldr	r2, [pc, #72]	@ (80107f8 <UART_InitCallbacksToDefault+0x94>)
 80107b0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	4a11      	ldr	r2, [pc, #68]	@ (80107fc <UART_InitCallbacksToDefault+0x98>)
 80107b8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	4a10      	ldr	r2, [pc, #64]	@ (8010800 <UART_InitCallbacksToDefault+0x9c>)
 80107c0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	4a0f      	ldr	r2, [pc, #60]	@ (8010804 <UART_InitCallbacksToDefault+0xa0>)
 80107c8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80107cc:	bf00      	nop
 80107ce:	370c      	adds	r7, #12
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr
 80107d8:	080105f9 	.word	0x080105f9
 80107dc:	080105e5 	.word	0x080105e5
 80107e0:	08010621 	.word	0x08010621
 80107e4:	0801060d 	.word	0x0801060d
 80107e8:	08010635 	.word	0x08010635
 80107ec:	08010649 	.word	0x08010649
 80107f0:	0801065d 	.word	0x0801065d
 80107f4:	08010671 	.word	0x08010671
 80107f8:	0801174d 	.word	0x0801174d
 80107fc:	08011761 	.word	0x08011761
 8010800:	08011775 	.word	0x08011775
 8010804:	08010685 	.word	0x08010685

08010808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801080c:	b08c      	sub	sp, #48	@ 0x30
 801080e:	af00      	add	r7, sp, #0
 8010810:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010812:	2300      	movs	r3, #0
 8010814:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	689a      	ldr	r2, [r3, #8]
 801081c:	697b      	ldr	r3, [r7, #20]
 801081e:	691b      	ldr	r3, [r3, #16]
 8010820:	431a      	orrs	r2, r3
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	695b      	ldr	r3, [r3, #20]
 8010826:	431a      	orrs	r2, r3
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	69db      	ldr	r3, [r3, #28]
 801082c:	4313      	orrs	r3, r2
 801082e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	681a      	ldr	r2, [r3, #0]
 8010836:	4baa      	ldr	r3, [pc, #680]	@ (8010ae0 <UART_SetConfig+0x2d8>)
 8010838:	4013      	ands	r3, r2
 801083a:	697a      	ldr	r2, [r7, #20]
 801083c:	6812      	ldr	r2, [r2, #0]
 801083e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010840:	430b      	orrs	r3, r1
 8010842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	685b      	ldr	r3, [r3, #4]
 801084a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801084e:	697b      	ldr	r3, [r7, #20]
 8010850:	68da      	ldr	r2, [r3, #12]
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	430a      	orrs	r2, r1
 8010858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	699b      	ldr	r3, [r3, #24]
 801085e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	4a9f      	ldr	r2, [pc, #636]	@ (8010ae4 <UART_SetConfig+0x2dc>)
 8010866:	4293      	cmp	r3, r2
 8010868:	d004      	beq.n	8010874 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801086a:	697b      	ldr	r3, [r7, #20]
 801086c:	6a1b      	ldr	r3, [r3, #32]
 801086e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010870:	4313      	orrs	r3, r2
 8010872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	689b      	ldr	r3, [r3, #8]
 801087a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 801087e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8010882:	697a      	ldr	r2, [r7, #20]
 8010884:	6812      	ldr	r2, [r2, #0]
 8010886:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010888:	430b      	orrs	r3, r1
 801088a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010892:	f023 010f 	bic.w	r1, r3, #15
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801089a:	697b      	ldr	r3, [r7, #20]
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	430a      	orrs	r2, r1
 80108a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	4a90      	ldr	r2, [pc, #576]	@ (8010ae8 <UART_SetConfig+0x2e0>)
 80108a8:	4293      	cmp	r3, r2
 80108aa:	d125      	bne.n	80108f8 <UART_SetConfig+0xf0>
 80108ac:	4b8f      	ldr	r3, [pc, #572]	@ (8010aec <UART_SetConfig+0x2e4>)
 80108ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80108b2:	f003 0303 	and.w	r3, r3, #3
 80108b6:	2b03      	cmp	r3, #3
 80108b8:	d81a      	bhi.n	80108f0 <UART_SetConfig+0xe8>
 80108ba:	a201      	add	r2, pc, #4	@ (adr r2, 80108c0 <UART_SetConfig+0xb8>)
 80108bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108c0:	080108d1 	.word	0x080108d1
 80108c4:	080108e1 	.word	0x080108e1
 80108c8:	080108d9 	.word	0x080108d9
 80108cc:	080108e9 	.word	0x080108e9
 80108d0:	2301      	movs	r3, #1
 80108d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80108d6:	e116      	b.n	8010b06 <UART_SetConfig+0x2fe>
 80108d8:	2302      	movs	r3, #2
 80108da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80108de:	e112      	b.n	8010b06 <UART_SetConfig+0x2fe>
 80108e0:	2304      	movs	r3, #4
 80108e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80108e6:	e10e      	b.n	8010b06 <UART_SetConfig+0x2fe>
 80108e8:	2308      	movs	r3, #8
 80108ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80108ee:	e10a      	b.n	8010b06 <UART_SetConfig+0x2fe>
 80108f0:	2310      	movs	r3, #16
 80108f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80108f6:	e106      	b.n	8010b06 <UART_SetConfig+0x2fe>
 80108f8:	697b      	ldr	r3, [r7, #20]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	4a7c      	ldr	r2, [pc, #496]	@ (8010af0 <UART_SetConfig+0x2e8>)
 80108fe:	4293      	cmp	r3, r2
 8010900:	d138      	bne.n	8010974 <UART_SetConfig+0x16c>
 8010902:	4b7a      	ldr	r3, [pc, #488]	@ (8010aec <UART_SetConfig+0x2e4>)
 8010904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010908:	f003 030c 	and.w	r3, r3, #12
 801090c:	2b0c      	cmp	r3, #12
 801090e:	d82d      	bhi.n	801096c <UART_SetConfig+0x164>
 8010910:	a201      	add	r2, pc, #4	@ (adr r2, 8010918 <UART_SetConfig+0x110>)
 8010912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010916:	bf00      	nop
 8010918:	0801094d 	.word	0x0801094d
 801091c:	0801096d 	.word	0x0801096d
 8010920:	0801096d 	.word	0x0801096d
 8010924:	0801096d 	.word	0x0801096d
 8010928:	0801095d 	.word	0x0801095d
 801092c:	0801096d 	.word	0x0801096d
 8010930:	0801096d 	.word	0x0801096d
 8010934:	0801096d 	.word	0x0801096d
 8010938:	08010955 	.word	0x08010955
 801093c:	0801096d 	.word	0x0801096d
 8010940:	0801096d 	.word	0x0801096d
 8010944:	0801096d 	.word	0x0801096d
 8010948:	08010965 	.word	0x08010965
 801094c:	2300      	movs	r3, #0
 801094e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010952:	e0d8      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010954:	2302      	movs	r3, #2
 8010956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801095a:	e0d4      	b.n	8010b06 <UART_SetConfig+0x2fe>
 801095c:	2304      	movs	r3, #4
 801095e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010962:	e0d0      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010964:	2308      	movs	r3, #8
 8010966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801096a:	e0cc      	b.n	8010b06 <UART_SetConfig+0x2fe>
 801096c:	2310      	movs	r3, #16
 801096e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010972:	e0c8      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	4a5e      	ldr	r2, [pc, #376]	@ (8010af4 <UART_SetConfig+0x2ec>)
 801097a:	4293      	cmp	r3, r2
 801097c:	d125      	bne.n	80109ca <UART_SetConfig+0x1c2>
 801097e:	4b5b      	ldr	r3, [pc, #364]	@ (8010aec <UART_SetConfig+0x2e4>)
 8010980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010984:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8010988:	2b30      	cmp	r3, #48	@ 0x30
 801098a:	d016      	beq.n	80109ba <UART_SetConfig+0x1b2>
 801098c:	2b30      	cmp	r3, #48	@ 0x30
 801098e:	d818      	bhi.n	80109c2 <UART_SetConfig+0x1ba>
 8010990:	2b20      	cmp	r3, #32
 8010992:	d00a      	beq.n	80109aa <UART_SetConfig+0x1a2>
 8010994:	2b20      	cmp	r3, #32
 8010996:	d814      	bhi.n	80109c2 <UART_SetConfig+0x1ba>
 8010998:	2b00      	cmp	r3, #0
 801099a:	d002      	beq.n	80109a2 <UART_SetConfig+0x19a>
 801099c:	2b10      	cmp	r3, #16
 801099e:	d008      	beq.n	80109b2 <UART_SetConfig+0x1aa>
 80109a0:	e00f      	b.n	80109c2 <UART_SetConfig+0x1ba>
 80109a2:	2300      	movs	r3, #0
 80109a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80109a8:	e0ad      	b.n	8010b06 <UART_SetConfig+0x2fe>
 80109aa:	2302      	movs	r3, #2
 80109ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80109b0:	e0a9      	b.n	8010b06 <UART_SetConfig+0x2fe>
 80109b2:	2304      	movs	r3, #4
 80109b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80109b8:	e0a5      	b.n	8010b06 <UART_SetConfig+0x2fe>
 80109ba:	2308      	movs	r3, #8
 80109bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80109c0:	e0a1      	b.n	8010b06 <UART_SetConfig+0x2fe>
 80109c2:	2310      	movs	r3, #16
 80109c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80109c8:	e09d      	b.n	8010b06 <UART_SetConfig+0x2fe>
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	4a4a      	ldr	r2, [pc, #296]	@ (8010af8 <UART_SetConfig+0x2f0>)
 80109d0:	4293      	cmp	r3, r2
 80109d2:	d125      	bne.n	8010a20 <UART_SetConfig+0x218>
 80109d4:	4b45      	ldr	r3, [pc, #276]	@ (8010aec <UART_SetConfig+0x2e4>)
 80109d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80109da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80109de:	2bc0      	cmp	r3, #192	@ 0xc0
 80109e0:	d016      	beq.n	8010a10 <UART_SetConfig+0x208>
 80109e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80109e4:	d818      	bhi.n	8010a18 <UART_SetConfig+0x210>
 80109e6:	2b80      	cmp	r3, #128	@ 0x80
 80109e8:	d00a      	beq.n	8010a00 <UART_SetConfig+0x1f8>
 80109ea:	2b80      	cmp	r3, #128	@ 0x80
 80109ec:	d814      	bhi.n	8010a18 <UART_SetConfig+0x210>
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d002      	beq.n	80109f8 <UART_SetConfig+0x1f0>
 80109f2:	2b40      	cmp	r3, #64	@ 0x40
 80109f4:	d008      	beq.n	8010a08 <UART_SetConfig+0x200>
 80109f6:	e00f      	b.n	8010a18 <UART_SetConfig+0x210>
 80109f8:	2300      	movs	r3, #0
 80109fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80109fe:	e082      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010a00:	2302      	movs	r3, #2
 8010a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a06:	e07e      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010a08:	2304      	movs	r3, #4
 8010a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a0e:	e07a      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010a10:	2308      	movs	r3, #8
 8010a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a16:	e076      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010a18:	2310      	movs	r3, #16
 8010a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a1e:	e072      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4a35      	ldr	r2, [pc, #212]	@ (8010afc <UART_SetConfig+0x2f4>)
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d12a      	bne.n	8010a80 <UART_SetConfig+0x278>
 8010a2a:	4b30      	ldr	r3, [pc, #192]	@ (8010aec <UART_SetConfig+0x2e4>)
 8010a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010a34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010a38:	d01a      	beq.n	8010a70 <UART_SetConfig+0x268>
 8010a3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010a3e:	d81b      	bhi.n	8010a78 <UART_SetConfig+0x270>
 8010a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a44:	d00c      	beq.n	8010a60 <UART_SetConfig+0x258>
 8010a46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010a4a:	d815      	bhi.n	8010a78 <UART_SetConfig+0x270>
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d003      	beq.n	8010a58 <UART_SetConfig+0x250>
 8010a50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010a54:	d008      	beq.n	8010a68 <UART_SetConfig+0x260>
 8010a56:	e00f      	b.n	8010a78 <UART_SetConfig+0x270>
 8010a58:	2300      	movs	r3, #0
 8010a5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a5e:	e052      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010a60:	2302      	movs	r3, #2
 8010a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a66:	e04e      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010a68:	2304      	movs	r3, #4
 8010a6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a6e:	e04a      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010a70:	2308      	movs	r3, #8
 8010a72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a76:	e046      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010a78:	2310      	movs	r3, #16
 8010a7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010a7e:	e042      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	4a17      	ldr	r2, [pc, #92]	@ (8010ae4 <UART_SetConfig+0x2dc>)
 8010a86:	4293      	cmp	r3, r2
 8010a88:	d13a      	bne.n	8010b00 <UART_SetConfig+0x2f8>
 8010a8a:	4b18      	ldr	r3, [pc, #96]	@ (8010aec <UART_SetConfig+0x2e4>)
 8010a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010a90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8010a94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010a98:	d01a      	beq.n	8010ad0 <UART_SetConfig+0x2c8>
 8010a9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010a9e:	d81b      	bhi.n	8010ad8 <UART_SetConfig+0x2d0>
 8010aa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010aa4:	d00c      	beq.n	8010ac0 <UART_SetConfig+0x2b8>
 8010aa6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010aaa:	d815      	bhi.n	8010ad8 <UART_SetConfig+0x2d0>
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d003      	beq.n	8010ab8 <UART_SetConfig+0x2b0>
 8010ab0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010ab4:	d008      	beq.n	8010ac8 <UART_SetConfig+0x2c0>
 8010ab6:	e00f      	b.n	8010ad8 <UART_SetConfig+0x2d0>
 8010ab8:	2300      	movs	r3, #0
 8010aba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010abe:	e022      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010ac0:	2302      	movs	r3, #2
 8010ac2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ac6:	e01e      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010ac8:	2304      	movs	r3, #4
 8010aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ace:	e01a      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010ad0:	2308      	movs	r3, #8
 8010ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ad6:	e016      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010ad8:	2310      	movs	r3, #16
 8010ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010ade:	e012      	b.n	8010b06 <UART_SetConfig+0x2fe>
 8010ae0:	cfff69f3 	.word	0xcfff69f3
 8010ae4:	40008000 	.word	0x40008000
 8010ae8:	40013800 	.word	0x40013800
 8010aec:	40021000 	.word	0x40021000
 8010af0:	40004400 	.word	0x40004400
 8010af4:	40004800 	.word	0x40004800
 8010af8:	40004c00 	.word	0x40004c00
 8010afc:	40005000 	.word	0x40005000
 8010b00:	2310      	movs	r3, #16
 8010b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	4aae      	ldr	r2, [pc, #696]	@ (8010dc4 <UART_SetConfig+0x5bc>)
 8010b0c:	4293      	cmp	r3, r2
 8010b0e:	f040 8097 	bne.w	8010c40 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010b12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010b16:	2b08      	cmp	r3, #8
 8010b18:	d823      	bhi.n	8010b62 <UART_SetConfig+0x35a>
 8010b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8010b20 <UART_SetConfig+0x318>)
 8010b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b20:	08010b45 	.word	0x08010b45
 8010b24:	08010b63 	.word	0x08010b63
 8010b28:	08010b4d 	.word	0x08010b4d
 8010b2c:	08010b63 	.word	0x08010b63
 8010b30:	08010b53 	.word	0x08010b53
 8010b34:	08010b63 	.word	0x08010b63
 8010b38:	08010b63 	.word	0x08010b63
 8010b3c:	08010b63 	.word	0x08010b63
 8010b40:	08010b5b 	.word	0x08010b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010b44:	f7fc fc6c 	bl	800d420 <HAL_RCC_GetPCLK1Freq>
 8010b48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010b4a:	e010      	b.n	8010b6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010b4c:	4b9e      	ldr	r3, [pc, #632]	@ (8010dc8 <UART_SetConfig+0x5c0>)
 8010b4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010b50:	e00d      	b.n	8010b6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010b52:	f7fc fbf7 	bl	800d344 <HAL_RCC_GetSysClockFreq>
 8010b56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010b58:	e009      	b.n	8010b6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010b5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010b5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010b60:	e005      	b.n	8010b6e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8010b62:	2300      	movs	r3, #0
 8010b64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010b66:	2301      	movs	r3, #1
 8010b68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010b6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	f000 8130 	beq.w	8010dd6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b7a:	4a94      	ldr	r2, [pc, #592]	@ (8010dcc <UART_SetConfig+0x5c4>)
 8010b7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b80:	461a      	mov	r2, r3
 8010b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b84:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b88:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	685a      	ldr	r2, [r3, #4]
 8010b8e:	4613      	mov	r3, r2
 8010b90:	005b      	lsls	r3, r3, #1
 8010b92:	4413      	add	r3, r2
 8010b94:	69ba      	ldr	r2, [r7, #24]
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d305      	bcc.n	8010ba6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010ba0:	69ba      	ldr	r2, [r7, #24]
 8010ba2:	429a      	cmp	r2, r3
 8010ba4:	d903      	bls.n	8010bae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010bac:	e113      	b.n	8010dd6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	60bb      	str	r3, [r7, #8]
 8010bb4:	60fa      	str	r2, [r7, #12]
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bba:	4a84      	ldr	r2, [pc, #528]	@ (8010dcc <UART_SetConfig+0x5c4>)
 8010bbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bc0:	b29b      	uxth	r3, r3
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	603b      	str	r3, [r7, #0]
 8010bc6:	607a      	str	r2, [r7, #4]
 8010bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010bcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010bd0:	f7f0 f810 	bl	8000bf4 <__aeabi_uldivmod>
 8010bd4:	4602      	mov	r2, r0
 8010bd6:	460b      	mov	r3, r1
 8010bd8:	4610      	mov	r0, r2
 8010bda:	4619      	mov	r1, r3
 8010bdc:	f04f 0200 	mov.w	r2, #0
 8010be0:	f04f 0300 	mov.w	r3, #0
 8010be4:	020b      	lsls	r3, r1, #8
 8010be6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010bea:	0202      	lsls	r2, r0, #8
 8010bec:	6979      	ldr	r1, [r7, #20]
 8010bee:	6849      	ldr	r1, [r1, #4]
 8010bf0:	0849      	lsrs	r1, r1, #1
 8010bf2:	2000      	movs	r0, #0
 8010bf4:	460c      	mov	r4, r1
 8010bf6:	4605      	mov	r5, r0
 8010bf8:	eb12 0804 	adds.w	r8, r2, r4
 8010bfc:	eb43 0905 	adc.w	r9, r3, r5
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	2200      	movs	r2, #0
 8010c06:	469a      	mov	sl, r3
 8010c08:	4693      	mov	fp, r2
 8010c0a:	4652      	mov	r2, sl
 8010c0c:	465b      	mov	r3, fp
 8010c0e:	4640      	mov	r0, r8
 8010c10:	4649      	mov	r1, r9
 8010c12:	f7ef ffef 	bl	8000bf4 <__aeabi_uldivmod>
 8010c16:	4602      	mov	r2, r0
 8010c18:	460b      	mov	r3, r1
 8010c1a:	4613      	mov	r3, r2
 8010c1c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010c1e:	6a3b      	ldr	r3, [r7, #32]
 8010c20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010c24:	d308      	bcc.n	8010c38 <UART_SetConfig+0x430>
 8010c26:	6a3b      	ldr	r3, [r7, #32]
 8010c28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010c2c:	d204      	bcs.n	8010c38 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	6a3a      	ldr	r2, [r7, #32]
 8010c34:	60da      	str	r2, [r3, #12]
 8010c36:	e0ce      	b.n	8010dd6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8010c38:	2301      	movs	r3, #1
 8010c3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010c3e:	e0ca      	b.n	8010dd6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c40:	697b      	ldr	r3, [r7, #20]
 8010c42:	69db      	ldr	r3, [r3, #28]
 8010c44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010c48:	d166      	bne.n	8010d18 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8010c4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010c4e:	2b08      	cmp	r3, #8
 8010c50:	d827      	bhi.n	8010ca2 <UART_SetConfig+0x49a>
 8010c52:	a201      	add	r2, pc, #4	@ (adr r2, 8010c58 <UART_SetConfig+0x450>)
 8010c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c58:	08010c7d 	.word	0x08010c7d
 8010c5c:	08010c85 	.word	0x08010c85
 8010c60:	08010c8d 	.word	0x08010c8d
 8010c64:	08010ca3 	.word	0x08010ca3
 8010c68:	08010c93 	.word	0x08010c93
 8010c6c:	08010ca3 	.word	0x08010ca3
 8010c70:	08010ca3 	.word	0x08010ca3
 8010c74:	08010ca3 	.word	0x08010ca3
 8010c78:	08010c9b 	.word	0x08010c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c7c:	f7fc fbd0 	bl	800d420 <HAL_RCC_GetPCLK1Freq>
 8010c80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010c82:	e014      	b.n	8010cae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010c84:	f7fc fbe2 	bl	800d44c <HAL_RCC_GetPCLK2Freq>
 8010c88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010c8a:	e010      	b.n	8010cae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010c8c:	4b4e      	ldr	r3, [pc, #312]	@ (8010dc8 <UART_SetConfig+0x5c0>)
 8010c8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010c90:	e00d      	b.n	8010cae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010c92:	f7fc fb57 	bl	800d344 <HAL_RCC_GetSysClockFreq>
 8010c96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010c98:	e009      	b.n	8010cae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010c9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010ca0:	e005      	b.n	8010cae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010ca6:	2301      	movs	r3, #1
 8010ca8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010cac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	f000 8090 	beq.w	8010dd6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010cba:	4a44      	ldr	r2, [pc, #272]	@ (8010dcc <UART_SetConfig+0x5c4>)
 8010cbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010cc0:	461a      	mov	r2, r3
 8010cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8010cc8:	005a      	lsls	r2, r3, #1
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	685b      	ldr	r3, [r3, #4]
 8010cce:	085b      	lsrs	r3, r3, #1
 8010cd0:	441a      	add	r2, r3
 8010cd2:	697b      	ldr	r3, [r7, #20]
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8010cda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010cdc:	6a3b      	ldr	r3, [r7, #32]
 8010cde:	2b0f      	cmp	r3, #15
 8010ce0:	d916      	bls.n	8010d10 <UART_SetConfig+0x508>
 8010ce2:	6a3b      	ldr	r3, [r7, #32]
 8010ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010ce8:	d212      	bcs.n	8010d10 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010cea:	6a3b      	ldr	r3, [r7, #32]
 8010cec:	b29b      	uxth	r3, r3
 8010cee:	f023 030f 	bic.w	r3, r3, #15
 8010cf2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010cf4:	6a3b      	ldr	r3, [r7, #32]
 8010cf6:	085b      	lsrs	r3, r3, #1
 8010cf8:	b29b      	uxth	r3, r3
 8010cfa:	f003 0307 	and.w	r3, r3, #7
 8010cfe:	b29a      	uxth	r2, r3
 8010d00:	8bfb      	ldrh	r3, [r7, #30]
 8010d02:	4313      	orrs	r3, r2
 8010d04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010d06:	697b      	ldr	r3, [r7, #20]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	8bfa      	ldrh	r2, [r7, #30]
 8010d0c:	60da      	str	r2, [r3, #12]
 8010d0e:	e062      	b.n	8010dd6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8010d10:	2301      	movs	r3, #1
 8010d12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010d16:	e05e      	b.n	8010dd6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010d18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010d1c:	2b08      	cmp	r3, #8
 8010d1e:	d828      	bhi.n	8010d72 <UART_SetConfig+0x56a>
 8010d20:	a201      	add	r2, pc, #4	@ (adr r2, 8010d28 <UART_SetConfig+0x520>)
 8010d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d26:	bf00      	nop
 8010d28:	08010d4d 	.word	0x08010d4d
 8010d2c:	08010d55 	.word	0x08010d55
 8010d30:	08010d5d 	.word	0x08010d5d
 8010d34:	08010d73 	.word	0x08010d73
 8010d38:	08010d63 	.word	0x08010d63
 8010d3c:	08010d73 	.word	0x08010d73
 8010d40:	08010d73 	.word	0x08010d73
 8010d44:	08010d73 	.word	0x08010d73
 8010d48:	08010d6b 	.word	0x08010d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d4c:	f7fc fb68 	bl	800d420 <HAL_RCC_GetPCLK1Freq>
 8010d50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010d52:	e014      	b.n	8010d7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d54:	f7fc fb7a 	bl	800d44c <HAL_RCC_GetPCLK2Freq>
 8010d58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010d5a:	e010      	b.n	8010d7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8010dc8 <UART_SetConfig+0x5c0>)
 8010d5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010d60:	e00d      	b.n	8010d7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010d62:	f7fc faef 	bl	800d344 <HAL_RCC_GetSysClockFreq>
 8010d66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010d68:	e009      	b.n	8010d7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010d6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010d6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010d70:	e005      	b.n	8010d7e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8010d72:	2300      	movs	r3, #0
 8010d74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010d76:	2301      	movs	r3, #1
 8010d78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010d7c:	bf00      	nop
    }

    if (pclk != 0U)
 8010d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d028      	beq.n	8010dd6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d88:	4a10      	ldr	r2, [pc, #64]	@ (8010dcc <UART_SetConfig+0x5c4>)
 8010d8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d8e:	461a      	mov	r2, r3
 8010d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d92:	fbb3 f2f2 	udiv	r2, r3, r2
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	685b      	ldr	r3, [r3, #4]
 8010d9a:	085b      	lsrs	r3, r3, #1
 8010d9c:	441a      	add	r2, r3
 8010d9e:	697b      	ldr	r3, [r7, #20]
 8010da0:	685b      	ldr	r3, [r3, #4]
 8010da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8010da6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010da8:	6a3b      	ldr	r3, [r7, #32]
 8010daa:	2b0f      	cmp	r3, #15
 8010dac:	d910      	bls.n	8010dd0 <UART_SetConfig+0x5c8>
 8010dae:	6a3b      	ldr	r3, [r7, #32]
 8010db0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010db4:	d20c      	bcs.n	8010dd0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010db6:	6a3b      	ldr	r3, [r7, #32]
 8010db8:	b29a      	uxth	r2, r3
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	60da      	str	r2, [r3, #12]
 8010dc0:	e009      	b.n	8010dd6 <UART_SetConfig+0x5ce>
 8010dc2:	bf00      	nop
 8010dc4:	40008000 	.word	0x40008000
 8010dc8:	00f42400 	.word	0x00f42400
 8010dcc:	08014440 	.word	0x08014440
      }
      else
      {
        ret = HAL_ERROR;
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	2201      	movs	r2, #1
 8010dda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	2201      	movs	r2, #1
 8010de2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	2200      	movs	r2, #0
 8010dea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010dec:	697b      	ldr	r3, [r7, #20]
 8010dee:	2200      	movs	r2, #0
 8010df0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010df2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3730      	adds	r7, #48	@ 0x30
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010e00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010e00:	b480      	push	{r7}
 8010e02:	b083      	sub	sp, #12
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e0c:	f003 0308 	and.w	r3, r3, #8
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d00a      	beq.n	8010e2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	685b      	ldr	r3, [r3, #4]
 8010e1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	430a      	orrs	r2, r1
 8010e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e2e:	f003 0301 	and.w	r3, r3, #1
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d00a      	beq.n	8010e4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	685b      	ldr	r3, [r3, #4]
 8010e3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	430a      	orrs	r2, r1
 8010e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e50:	f003 0302 	and.w	r3, r3, #2
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d00a      	beq.n	8010e6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	430a      	orrs	r2, r1
 8010e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e72:	f003 0304 	and.w	r3, r3, #4
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d00a      	beq.n	8010e90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	685b      	ldr	r3, [r3, #4]
 8010e80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	430a      	orrs	r2, r1
 8010e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e94:	f003 0310 	and.w	r3, r3, #16
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d00a      	beq.n	8010eb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	689b      	ldr	r3, [r3, #8]
 8010ea2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	430a      	orrs	r2, r1
 8010eb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010eb6:	f003 0320 	and.w	r3, r3, #32
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d00a      	beq.n	8010ed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	689b      	ldr	r3, [r3, #8]
 8010ec4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	430a      	orrs	r2, r1
 8010ed2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ed8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d01a      	beq.n	8010f16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	430a      	orrs	r2, r1
 8010ef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010efa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010efe:	d10a      	bne.n	8010f16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	430a      	orrs	r2, r1
 8010f14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d00a      	beq.n	8010f38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	685b      	ldr	r3, [r3, #4]
 8010f28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	430a      	orrs	r2, r1
 8010f36:	605a      	str	r2, [r3, #4]
  }
}
 8010f38:	bf00      	nop
 8010f3a:	370c      	adds	r7, #12
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f42:	4770      	bx	lr

08010f44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b098      	sub	sp, #96	@ 0x60
 8010f48:	af02      	add	r7, sp, #8
 8010f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2200      	movs	r2, #0
 8010f50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010f54:	f7f9 fa4a 	bl	800a3ec <HAL_GetTick>
 8010f58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	f003 0308 	and.w	r3, r3, #8
 8010f64:	2b08      	cmp	r3, #8
 8010f66:	d12f      	bne.n	8010fc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010f68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010f6c:	9300      	str	r3, [sp, #0]
 8010f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010f70:	2200      	movs	r2, #0
 8010f72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010f76:	6878      	ldr	r0, [r7, #4]
 8010f78:	f000 f88e 	bl	8011098 <UART_WaitOnFlagUntilTimeout>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d022      	beq.n	8010fc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f8a:	e853 3f00 	ldrex	r3, [r3]
 8010f8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010f96:	653b      	str	r3, [r7, #80]	@ 0x50
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	461a      	mov	r2, r3
 8010f9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010fa2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fa4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010fa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010fa8:	e841 2300 	strex	r3, r2, [r1]
 8010fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d1e6      	bne.n	8010f82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2220      	movs	r2, #32
 8010fb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010fc4:	2303      	movs	r3, #3
 8010fc6:	e063      	b.n	8011090 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	f003 0304 	and.w	r3, r3, #4
 8010fd2:	2b04      	cmp	r3, #4
 8010fd4:	d149      	bne.n	801106a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010fd6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010fda:	9300      	str	r3, [sp, #0]
 8010fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010fde:	2200      	movs	r2, #0
 8010fe0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010fe4:	6878      	ldr	r0, [r7, #4]
 8010fe6:	f000 f857 	bl	8011098 <UART_WaitOnFlagUntilTimeout>
 8010fea:	4603      	mov	r3, r0
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d03c      	beq.n	801106a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ff8:	e853 3f00 	ldrex	r3, [r3]
 8010ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8010ffe:	6a3b      	ldr	r3, [r7, #32]
 8011000:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011004:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	461a      	mov	r2, r3
 801100c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801100e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011010:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011012:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011016:	e841 2300 	strex	r3, r2, [r1]
 801101a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801101c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801101e:	2b00      	cmp	r3, #0
 8011020:	d1e6      	bne.n	8010ff0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	3308      	adds	r3, #8
 8011028:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801102a:	693b      	ldr	r3, [r7, #16]
 801102c:	e853 3f00 	ldrex	r3, [r3]
 8011030:	60fb      	str	r3, [r7, #12]
   return(result);
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	f023 0301 	bic.w	r3, r3, #1
 8011038:	64bb      	str	r3, [r7, #72]	@ 0x48
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	3308      	adds	r3, #8
 8011040:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011042:	61fa      	str	r2, [r7, #28]
 8011044:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011046:	69b9      	ldr	r1, [r7, #24]
 8011048:	69fa      	ldr	r2, [r7, #28]
 801104a:	e841 2300 	strex	r3, r2, [r1]
 801104e:	617b      	str	r3, [r7, #20]
   return(result);
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d1e5      	bne.n	8011022 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2220      	movs	r2, #32
 801105a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2200      	movs	r2, #0
 8011062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011066:	2303      	movs	r3, #3
 8011068:	e012      	b.n	8011090 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2220      	movs	r2, #32
 801106e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	2220      	movs	r2, #32
 8011076:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2200      	movs	r2, #0
 801107e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2200      	movs	r2, #0
 8011084:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	2200      	movs	r2, #0
 801108a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801108e:	2300      	movs	r3, #0
}
 8011090:	4618      	mov	r0, r3
 8011092:	3758      	adds	r7, #88	@ 0x58
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}

08011098 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b084      	sub	sp, #16
 801109c:	af00      	add	r7, sp, #0
 801109e:	60f8      	str	r0, [r7, #12]
 80110a0:	60b9      	str	r1, [r7, #8]
 80110a2:	603b      	str	r3, [r7, #0]
 80110a4:	4613      	mov	r3, r2
 80110a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80110a8:	e04f      	b.n	801114a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80110aa:	69bb      	ldr	r3, [r7, #24]
 80110ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110b0:	d04b      	beq.n	801114a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80110b2:	f7f9 f99b 	bl	800a3ec <HAL_GetTick>
 80110b6:	4602      	mov	r2, r0
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	1ad3      	subs	r3, r2, r3
 80110bc:	69ba      	ldr	r2, [r7, #24]
 80110be:	429a      	cmp	r2, r3
 80110c0:	d302      	bcc.n	80110c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80110c2:	69bb      	ldr	r3, [r7, #24]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d101      	bne.n	80110cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80110c8:	2303      	movs	r3, #3
 80110ca:	e04e      	b.n	801116a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	f003 0304 	and.w	r3, r3, #4
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d037      	beq.n	801114a <UART_WaitOnFlagUntilTimeout+0xb2>
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	2b80      	cmp	r3, #128	@ 0x80
 80110de:	d034      	beq.n	801114a <UART_WaitOnFlagUntilTimeout+0xb2>
 80110e0:	68bb      	ldr	r3, [r7, #8]
 80110e2:	2b40      	cmp	r3, #64	@ 0x40
 80110e4:	d031      	beq.n	801114a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	69db      	ldr	r3, [r3, #28]
 80110ec:	f003 0308 	and.w	r3, r3, #8
 80110f0:	2b08      	cmp	r3, #8
 80110f2:	d110      	bne.n	8011116 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	2208      	movs	r2, #8
 80110fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80110fc:	68f8      	ldr	r0, [r7, #12]
 80110fe:	f000 f920 	bl	8011342 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	2208      	movs	r2, #8
 8011106:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	2200      	movs	r2, #0
 801110e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011112:	2301      	movs	r3, #1
 8011114:	e029      	b.n	801116a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	69db      	ldr	r3, [r3, #28]
 801111c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011120:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011124:	d111      	bne.n	801114a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801112e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011130:	68f8      	ldr	r0, [r7, #12]
 8011132:	f000 f906 	bl	8011342 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	2220      	movs	r2, #32
 801113a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	2200      	movs	r2, #0
 8011142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011146:	2303      	movs	r3, #3
 8011148:	e00f      	b.n	801116a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	69da      	ldr	r2, [r3, #28]
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	4013      	ands	r3, r2
 8011154:	68ba      	ldr	r2, [r7, #8]
 8011156:	429a      	cmp	r2, r3
 8011158:	bf0c      	ite	eq
 801115a:	2301      	moveq	r3, #1
 801115c:	2300      	movne	r3, #0
 801115e:	b2db      	uxtb	r3, r3
 8011160:	461a      	mov	r2, r3
 8011162:	79fb      	ldrb	r3, [r7, #7]
 8011164:	429a      	cmp	r2, r3
 8011166:	d0a0      	beq.n	80110aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011168:	2300      	movs	r3, #0
}
 801116a:	4618      	mov	r0, r3
 801116c:	3710      	adds	r7, #16
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}
	...

08011174 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b096      	sub	sp, #88	@ 0x58
 8011178:	af00      	add	r7, sp, #0
 801117a:	60f8      	str	r0, [r7, #12]
 801117c:	60b9      	str	r1, [r7, #8]
 801117e:	4613      	mov	r3, r2
 8011180:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	68ba      	ldr	r2, [r7, #8]
 8011186:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	88fa      	ldrh	r2, [r7, #6]
 801118c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	2200      	movs	r2, #0
 8011194:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	2222      	movs	r2, #34	@ 0x22
 801119c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d02d      	beq.n	8011206 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80111b0:	4a40      	ldr	r2, [pc, #256]	@ (80112b4 <UART_Start_Receive_DMA+0x140>)
 80111b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80111ba:	4a3f      	ldr	r2, [pc, #252]	@ (80112b8 <UART_Start_Receive_DMA+0x144>)
 80111bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80111c4:	4a3d      	ldr	r2, [pc, #244]	@ (80112bc <UART_Start_Receive_DMA+0x148>)
 80111c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80111ce:	2200      	movs	r2, #0
 80111d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	3324      	adds	r3, #36	@ 0x24
 80111de:	4619      	mov	r1, r3
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80111e4:	461a      	mov	r2, r3
 80111e6:	88fb      	ldrh	r3, [r7, #6]
 80111e8:	f7fa ff3c 	bl	800c064 <HAL_DMA_Start_IT>
 80111ec:	4603      	mov	r3, r0
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d009      	beq.n	8011206 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	2210      	movs	r2, #16
 80111f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	2220      	movs	r2, #32
 80111fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8011202:	2301      	movs	r3, #1
 8011204:	e051      	b.n	80112aa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	691b      	ldr	r3, [r3, #16]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d018      	beq.n	8011240 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011216:	e853 3f00 	ldrex	r3, [r3]
 801121a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801121c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801121e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011222:	657b      	str	r3, [r7, #84]	@ 0x54
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	461a      	mov	r2, r3
 801122a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801122c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801122e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011230:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011232:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011234:	e841 2300 	strex	r3, r2, [r1]
 8011238:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801123a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801123c:	2b00      	cmp	r3, #0
 801123e:	d1e6      	bne.n	801120e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	3308      	adds	r3, #8
 8011246:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801124a:	e853 3f00 	ldrex	r3, [r3]
 801124e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011252:	f043 0301 	orr.w	r3, r3, #1
 8011256:	653b      	str	r3, [r7, #80]	@ 0x50
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	3308      	adds	r3, #8
 801125e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011260:	637a      	str	r2, [r7, #52]	@ 0x34
 8011262:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011264:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011266:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011268:	e841 2300 	strex	r3, r2, [r1]
 801126c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801126e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011270:	2b00      	cmp	r3, #0
 8011272:	d1e5      	bne.n	8011240 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	3308      	adds	r3, #8
 801127a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801127c:	697b      	ldr	r3, [r7, #20]
 801127e:	e853 3f00 	ldrex	r3, [r3]
 8011282:	613b      	str	r3, [r7, #16]
   return(result);
 8011284:	693b      	ldr	r3, [r7, #16]
 8011286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801128a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	3308      	adds	r3, #8
 8011292:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011294:	623a      	str	r2, [r7, #32]
 8011296:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011298:	69f9      	ldr	r1, [r7, #28]
 801129a:	6a3a      	ldr	r2, [r7, #32]
 801129c:	e841 2300 	strex	r3, r2, [r1]
 80112a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80112a2:	69bb      	ldr	r3, [r7, #24]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d1e5      	bne.n	8011274 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80112a8:	2300      	movs	r3, #0
}
 80112aa:	4618      	mov	r0, r3
 80112ac:	3758      	adds	r7, #88	@ 0x58
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop
 80112b4:	080114cd 	.word	0x080114cd
 80112b8:	08011601 	.word	0x08011601
 80112bc:	08011647 	.word	0x08011647

080112c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80112c0:	b480      	push	{r7}
 80112c2:	b08f      	sub	sp, #60	@ 0x3c
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112ce:	6a3b      	ldr	r3, [r7, #32]
 80112d0:	e853 3f00 	ldrex	r3, [r3]
 80112d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80112d6:	69fb      	ldr	r3, [r7, #28]
 80112d8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80112dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	461a      	mov	r2, r3
 80112e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80112e8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80112ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80112ee:	e841 2300 	strex	r3, r2, [r1]
 80112f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80112f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d1e6      	bne.n	80112c8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	3308      	adds	r3, #8
 8011300:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	e853 3f00 	ldrex	r3, [r3]
 8011308:	60bb      	str	r3, [r7, #8]
   return(result);
 801130a:	68bb      	ldr	r3, [r7, #8]
 801130c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011310:	633b      	str	r3, [r7, #48]	@ 0x30
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	3308      	adds	r3, #8
 8011318:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801131a:	61ba      	str	r2, [r7, #24]
 801131c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801131e:	6979      	ldr	r1, [r7, #20]
 8011320:	69ba      	ldr	r2, [r7, #24]
 8011322:	e841 2300 	strex	r3, r2, [r1]
 8011326:	613b      	str	r3, [r7, #16]
   return(result);
 8011328:	693b      	ldr	r3, [r7, #16]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d1e5      	bne.n	80112fa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	2220      	movs	r2, #32
 8011332:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8011336:	bf00      	nop
 8011338:	373c      	adds	r7, #60	@ 0x3c
 801133a:	46bd      	mov	sp, r7
 801133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011340:	4770      	bx	lr

08011342 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011342:	b480      	push	{r7}
 8011344:	b095      	sub	sp, #84	@ 0x54
 8011346:	af00      	add	r7, sp, #0
 8011348:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011352:	e853 3f00 	ldrex	r3, [r3]
 8011356:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801135a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801135e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	461a      	mov	r2, r3
 8011366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011368:	643b      	str	r3, [r7, #64]	@ 0x40
 801136a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801136c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801136e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011370:	e841 2300 	strex	r3, r2, [r1]
 8011374:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011378:	2b00      	cmp	r3, #0
 801137a:	d1e6      	bne.n	801134a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	3308      	adds	r3, #8
 8011382:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011384:	6a3b      	ldr	r3, [r7, #32]
 8011386:	e853 3f00 	ldrex	r3, [r3]
 801138a:	61fb      	str	r3, [r7, #28]
   return(result);
 801138c:	69fb      	ldr	r3, [r7, #28]
 801138e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011392:	f023 0301 	bic.w	r3, r3, #1
 8011396:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	3308      	adds	r3, #8
 801139e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80113a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80113a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80113a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80113a8:	e841 2300 	strex	r3, r2, [r1]
 80113ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80113ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d1e3      	bne.n	801137c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80113b8:	2b01      	cmp	r3, #1
 80113ba:	d118      	bne.n	80113ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	e853 3f00 	ldrex	r3, [r3]
 80113c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80113ca:	68bb      	ldr	r3, [r7, #8]
 80113cc:	f023 0310 	bic.w	r3, r3, #16
 80113d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	461a      	mov	r2, r3
 80113d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80113da:	61bb      	str	r3, [r7, #24]
 80113dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113de:	6979      	ldr	r1, [r7, #20]
 80113e0:	69ba      	ldr	r2, [r7, #24]
 80113e2:	e841 2300 	strex	r3, r2, [r1]
 80113e6:	613b      	str	r3, [r7, #16]
   return(result);
 80113e8:	693b      	ldr	r3, [r7, #16]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d1e6      	bne.n	80113bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	2220      	movs	r2, #32
 80113f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2200      	movs	r2, #0
 80113fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2200      	movs	r2, #0
 8011400:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011402:	bf00      	nop
 8011404:	3754      	adds	r7, #84	@ 0x54
 8011406:	46bd      	mov	sp, r7
 8011408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140c:	4770      	bx	lr

0801140e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801140e:	b580      	push	{r7, lr}
 8011410:	b090      	sub	sp, #64	@ 0x40
 8011412:	af00      	add	r7, sp, #0
 8011414:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801141a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	f003 0320 	and.w	r3, r3, #32
 8011426:	2b00      	cmp	r3, #0
 8011428:	d137      	bne.n	801149a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 801142a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801142c:	2200      	movs	r2, #0
 801142e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	3308      	adds	r3, #8
 8011438:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801143c:	e853 3f00 	ldrex	r3, [r3]
 8011440:	623b      	str	r3, [r7, #32]
   return(result);
 8011442:	6a3b      	ldr	r3, [r7, #32]
 8011444:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011448:	63bb      	str	r3, [r7, #56]	@ 0x38
 801144a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	3308      	adds	r3, #8
 8011450:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011452:	633a      	str	r2, [r7, #48]	@ 0x30
 8011454:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011456:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011458:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801145a:	e841 2300 	strex	r3, r2, [r1]
 801145e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011462:	2b00      	cmp	r3, #0
 8011464:	d1e5      	bne.n	8011432 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801146c:	693b      	ldr	r3, [r7, #16]
 801146e:	e853 3f00 	ldrex	r3, [r3]
 8011472:	60fb      	str	r3, [r7, #12]
   return(result);
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801147a:	637b      	str	r3, [r7, #52]	@ 0x34
 801147c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	461a      	mov	r2, r3
 8011482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011484:	61fb      	str	r3, [r7, #28]
 8011486:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011488:	69b9      	ldr	r1, [r7, #24]
 801148a:	69fa      	ldr	r2, [r7, #28]
 801148c:	e841 2300 	strex	r3, r2, [r1]
 8011490:	617b      	str	r3, [r7, #20]
   return(result);
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d1e6      	bne.n	8011466 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011498:	e004      	b.n	80114a4 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 801149a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801149c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80114a0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80114a2:	4798      	blx	r3
}
 80114a4:	bf00      	nop
 80114a6:	3740      	adds	r7, #64	@ 0x40
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}

080114ac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80114c0:	68f8      	ldr	r0, [r7, #12]
 80114c2:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80114c4:	bf00      	nop
 80114c6:	3710      	adds	r7, #16
 80114c8:	46bd      	mov	sp, r7
 80114ca:	bd80      	pop	{r7, pc}

080114cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b09c      	sub	sp, #112	@ 0x70
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114d8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	681b      	ldr	r3, [r3, #0]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	f003 0320 	and.w	r3, r3, #32
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d171      	bne.n	80115cc <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80114e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80114ea:	2200      	movs	r2, #0
 80114ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80114f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114f8:	e853 3f00 	ldrex	r3, [r3]
 80114fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80114fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011500:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011504:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011506:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	461a      	mov	r2, r3
 801150c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801150e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011510:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011512:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011514:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011516:	e841 2300 	strex	r3, r2, [r1]
 801151a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801151c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801151e:	2b00      	cmp	r3, #0
 8011520:	d1e6      	bne.n	80114f0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011522:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	3308      	adds	r3, #8
 8011528:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801152a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801152c:	e853 3f00 	ldrex	r3, [r3]
 8011530:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011534:	f023 0301 	bic.w	r3, r3, #1
 8011538:	667b      	str	r3, [r7, #100]	@ 0x64
 801153a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	3308      	adds	r3, #8
 8011540:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011542:	647a      	str	r2, [r7, #68]	@ 0x44
 8011544:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011546:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011548:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801154a:	e841 2300 	strex	r3, r2, [r1]
 801154e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011552:	2b00      	cmp	r3, #0
 8011554:	d1e5      	bne.n	8011522 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011556:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	3308      	adds	r3, #8
 801155c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011560:	e853 3f00 	ldrex	r3, [r3]
 8011564:	623b      	str	r3, [r7, #32]
   return(result);
 8011566:	6a3b      	ldr	r3, [r7, #32]
 8011568:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801156c:	663b      	str	r3, [r7, #96]	@ 0x60
 801156e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	3308      	adds	r3, #8
 8011574:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011576:	633a      	str	r2, [r7, #48]	@ 0x30
 8011578:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801157a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801157c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801157e:	e841 2300 	strex	r3, r2, [r1]
 8011582:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011586:	2b00      	cmp	r3, #0
 8011588:	d1e5      	bne.n	8011556 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801158a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801158c:	2220      	movs	r2, #32
 801158e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011592:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011594:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011596:	2b01      	cmp	r3, #1
 8011598:	d118      	bne.n	80115cc <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801159a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115a0:	693b      	ldr	r3, [r7, #16]
 80115a2:	e853 3f00 	ldrex	r3, [r3]
 80115a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	f023 0310 	bic.w	r3, r3, #16
 80115ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80115b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	461a      	mov	r2, r3
 80115b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80115b8:	61fb      	str	r3, [r7, #28]
 80115ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115bc:	69b9      	ldr	r1, [r7, #24]
 80115be:	69fa      	ldr	r2, [r7, #28]
 80115c0:	e841 2300 	strex	r3, r2, [r1]
 80115c4:	617b      	str	r3, [r7, #20]
   return(result);
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d1e6      	bne.n	801159a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80115cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115ce:	2200      	movs	r2, #0
 80115d0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80115d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115d6:	2b01      	cmp	r3, #1
 80115d8:	d109      	bne.n	80115ee <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80115da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80115e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80115e2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80115e6:	4611      	mov	r1, r2
 80115e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80115ea:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80115ec:	e004      	b.n	80115f8 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 80115ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80115f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80115f6:	4798      	blx	r3
}
 80115f8:	bf00      	nop
 80115fa:	3770      	adds	r7, #112	@ 0x70
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}

08011600 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b084      	sub	sp, #16
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801160c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	2201      	movs	r2, #1
 8011612:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011618:	2b01      	cmp	r3, #1
 801161a:	d10b      	bne.n	8011634 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8011622:	68fa      	ldr	r2, [r7, #12]
 8011624:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8011628:	0852      	lsrs	r2, r2, #1
 801162a:	b292      	uxth	r2, r2
 801162c:	4611      	mov	r1, r2
 801162e:	68f8      	ldr	r0, [r7, #12]
 8011630:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011632:	e004      	b.n	801163e <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801163a:	68f8      	ldr	r0, [r7, #12]
 801163c:	4798      	blx	r3
}
 801163e:	bf00      	nop
 8011640:	3710      	adds	r7, #16
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}

08011646 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011646:	b580      	push	{r7, lr}
 8011648:	b086      	sub	sp, #24
 801164a:	af00      	add	r7, sp, #0
 801164c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011652:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801165a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011662:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	689b      	ldr	r3, [r3, #8]
 801166a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801166e:	2b80      	cmp	r3, #128	@ 0x80
 8011670:	d109      	bne.n	8011686 <UART_DMAError+0x40>
 8011672:	693b      	ldr	r3, [r7, #16]
 8011674:	2b21      	cmp	r3, #33	@ 0x21
 8011676:	d106      	bne.n	8011686 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	2200      	movs	r2, #0
 801167c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8011680:	6978      	ldr	r0, [r7, #20]
 8011682:	f7ff fe1d 	bl	80112c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	689b      	ldr	r3, [r3, #8]
 801168c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011690:	2b40      	cmp	r3, #64	@ 0x40
 8011692:	d109      	bne.n	80116a8 <UART_DMAError+0x62>
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	2b22      	cmp	r3, #34	@ 0x22
 8011698:	d106      	bne.n	80116a8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	2200      	movs	r2, #0
 801169e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80116a2:	6978      	ldr	r0, [r7, #20]
 80116a4:	f7ff fe4d 	bl	8011342 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80116a8:	697b      	ldr	r3, [r7, #20]
 80116aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80116ae:	f043 0210 	orr.w	r2, r3, #16
 80116b2:	697b      	ldr	r3, [r7, #20]
 80116b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80116b8:	697b      	ldr	r3, [r7, #20]
 80116ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80116be:	6978      	ldr	r0, [r7, #20]
 80116c0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80116c2:	bf00      	nop
 80116c4:	3718      	adds	r7, #24
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}

080116ca <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80116ca:	b580      	push	{r7, lr}
 80116cc:	b084      	sub	sp, #16
 80116ce:	af00      	add	r7, sp, #0
 80116d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	2200      	movs	r2, #0
 80116dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80116e6:	68f8      	ldr	r0, [r7, #12]
 80116e8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80116ea:	bf00      	nop
 80116ec:	3710      	adds	r7, #16
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}

080116f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80116f2:	b580      	push	{r7, lr}
 80116f4:	b088      	sub	sp, #32
 80116f6:	af00      	add	r7, sp, #0
 80116f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	e853 3f00 	ldrex	r3, [r3]
 8011706:	60bb      	str	r3, [r7, #8]
   return(result);
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801170e:	61fb      	str	r3, [r7, #28]
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	461a      	mov	r2, r3
 8011716:	69fb      	ldr	r3, [r7, #28]
 8011718:	61bb      	str	r3, [r7, #24]
 801171a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801171c:	6979      	ldr	r1, [r7, #20]
 801171e:	69ba      	ldr	r2, [r7, #24]
 8011720:	e841 2300 	strex	r3, r2, [r1]
 8011724:	613b      	str	r3, [r7, #16]
   return(result);
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d1e6      	bne.n	80116fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2220      	movs	r2, #32
 8011730:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2200      	movs	r2, #0
 8011738:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011744:	bf00      	nop
 8011746:	3720      	adds	r7, #32
 8011748:	46bd      	mov	sp, r7
 801174a:	bd80      	pop	{r7, pc}

0801174c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801174c:	b480      	push	{r7}
 801174e:	b083      	sub	sp, #12
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011754:	bf00      	nop
 8011756:	370c      	adds	r7, #12
 8011758:	46bd      	mov	sp, r7
 801175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175e:	4770      	bx	lr

08011760 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011760:	b480      	push	{r7}
 8011762:	b083      	sub	sp, #12
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011768:	bf00      	nop
 801176a:	370c      	adds	r7, #12
 801176c:	46bd      	mov	sp, r7
 801176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011772:	4770      	bx	lr

08011774 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011774:	b480      	push	{r7}
 8011776:	b083      	sub	sp, #12
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801177c:	bf00      	nop
 801177e:	370c      	adds	r7, #12
 8011780:	46bd      	mov	sp, r7
 8011782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011786:	4770      	bx	lr

08011788 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011788:	b480      	push	{r7}
 801178a:	b085      	sub	sp, #20
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011796:	2b01      	cmp	r3, #1
 8011798:	d101      	bne.n	801179e <HAL_UARTEx_DisableFifoMode+0x16>
 801179a:	2302      	movs	r3, #2
 801179c:	e027      	b.n	80117ee <HAL_UARTEx_DisableFifoMode+0x66>
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2201      	movs	r2, #1
 80117a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2224      	movs	r2, #36	@ 0x24
 80117aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	f022 0201 	bic.w	r2, r2, #1
 80117c4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80117cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	2200      	movs	r2, #0
 80117d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	68fa      	ldr	r2, [r7, #12]
 80117da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2220      	movs	r2, #32
 80117e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2200      	movs	r2, #0
 80117e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80117ec:	2300      	movs	r3, #0
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	3714      	adds	r7, #20
 80117f2:	46bd      	mov	sp, r7
 80117f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f8:	4770      	bx	lr

080117fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80117fa:	b580      	push	{r7, lr}
 80117fc:	b084      	sub	sp, #16
 80117fe:	af00      	add	r7, sp, #0
 8011800:	6078      	str	r0, [r7, #4]
 8011802:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801180a:	2b01      	cmp	r3, #1
 801180c:	d101      	bne.n	8011812 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801180e:	2302      	movs	r3, #2
 8011810:	e02d      	b.n	801186e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2201      	movs	r2, #1
 8011816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	2224      	movs	r2, #36	@ 0x24
 801181e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	681a      	ldr	r2, [r3, #0]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	f022 0201 	bic.w	r2, r2, #1
 8011838:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	689b      	ldr	r3, [r3, #8]
 8011840:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	683a      	ldr	r2, [r7, #0]
 801184a:	430a      	orrs	r2, r1
 801184c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f000 f850 	bl	80118f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	68fa      	ldr	r2, [r7, #12]
 801185a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	2220      	movs	r2, #32
 8011860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2200      	movs	r2, #0
 8011868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801186c:	2300      	movs	r3, #0
}
 801186e:	4618      	mov	r0, r3
 8011870:	3710      	adds	r7, #16
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}

08011876 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011876:	b580      	push	{r7, lr}
 8011878:	b084      	sub	sp, #16
 801187a:	af00      	add	r7, sp, #0
 801187c:	6078      	str	r0, [r7, #4]
 801187e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011886:	2b01      	cmp	r3, #1
 8011888:	d101      	bne.n	801188e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801188a:	2302      	movs	r3, #2
 801188c:	e02d      	b.n	80118ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	2201      	movs	r2, #1
 8011892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	2224      	movs	r2, #36	@ 0x24
 801189a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	681a      	ldr	r2, [r3, #0]
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	f022 0201 	bic.w	r2, r2, #1
 80118b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	689b      	ldr	r3, [r3, #8]
 80118bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	683a      	ldr	r2, [r7, #0]
 80118c6:	430a      	orrs	r2, r1
 80118c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80118ca:	6878      	ldr	r0, [r7, #4]
 80118cc:	f000 f812 	bl	80118f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	68fa      	ldr	r2, [r7, #12]
 80118d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2220      	movs	r2, #32
 80118dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2200      	movs	r2, #0
 80118e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80118e8:	2300      	movs	r3, #0
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	3710      	adds	r7, #16
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
	...

080118f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80118f4:	b480      	push	{r7}
 80118f6:	b085      	sub	sp, #20
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011900:	2b00      	cmp	r3, #0
 8011902:	d108      	bne.n	8011916 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2201      	movs	r2, #1
 8011908:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2201      	movs	r2, #1
 8011910:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011914:	e031      	b.n	801197a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011916:	2308      	movs	r3, #8
 8011918:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801191a:	2308      	movs	r3, #8
 801191c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	689b      	ldr	r3, [r3, #8]
 8011924:	0e5b      	lsrs	r3, r3, #25
 8011926:	b2db      	uxtb	r3, r3
 8011928:	f003 0307 	and.w	r3, r3, #7
 801192c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	689b      	ldr	r3, [r3, #8]
 8011934:	0f5b      	lsrs	r3, r3, #29
 8011936:	b2db      	uxtb	r3, r3
 8011938:	f003 0307 	and.w	r3, r3, #7
 801193c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801193e:	7bbb      	ldrb	r3, [r7, #14]
 8011940:	7b3a      	ldrb	r2, [r7, #12]
 8011942:	4911      	ldr	r1, [pc, #68]	@ (8011988 <UARTEx_SetNbDataToProcess+0x94>)
 8011944:	5c8a      	ldrb	r2, [r1, r2]
 8011946:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801194a:	7b3a      	ldrb	r2, [r7, #12]
 801194c:	490f      	ldr	r1, [pc, #60]	@ (801198c <UARTEx_SetNbDataToProcess+0x98>)
 801194e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011950:	fb93 f3f2 	sdiv	r3, r3, r2
 8011954:	b29a      	uxth	r2, r3
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801195c:	7bfb      	ldrb	r3, [r7, #15]
 801195e:	7b7a      	ldrb	r2, [r7, #13]
 8011960:	4909      	ldr	r1, [pc, #36]	@ (8011988 <UARTEx_SetNbDataToProcess+0x94>)
 8011962:	5c8a      	ldrb	r2, [r1, r2]
 8011964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011968:	7b7a      	ldrb	r2, [r7, #13]
 801196a:	4908      	ldr	r1, [pc, #32]	@ (801198c <UARTEx_SetNbDataToProcess+0x98>)
 801196c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801196e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011972:	b29a      	uxth	r2, r3
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801197a:	bf00      	nop
 801197c:	3714      	adds	r7, #20
 801197e:	46bd      	mov	sp, r7
 8011980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011984:	4770      	bx	lr
 8011986:	bf00      	nop
 8011988:	08014458 	.word	0x08014458
 801198c:	08014460 	.word	0x08014460

08011990 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8011990:	b480      	push	{r7}
 8011992:	b08b      	sub	sp, #44	@ 0x2c
 8011994:	af00      	add	r7, sp, #0
 8011996:	60f8      	str	r0, [r7, #12]
 8011998:	60b9      	str	r1, [r7, #8]
 801199a:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	685b      	ldr	r3, [r3, #4]
 80119a0:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	685b      	ldr	r3, [r3, #4]
 80119a6:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	685b      	ldr	r3, [r3, #4]
 80119ac:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	881b      	ldrh	r3, [r3, #0]
 80119b2:	461a      	mov	r2, r3
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	885b      	ldrh	r3, [r3, #2]
 80119b8:	fb02 f303 	mul.w	r3, r2, r3
 80119bc:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80119be:	697b      	ldr	r3, [r7, #20]
 80119c0:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80119c2:	e013      	b.n	80119ec <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 80119c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119c6:	1d1a      	adds	r2, r3, #4
 80119c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80119ca:	ed93 7a00 	vldr	s14, [r3]
 80119ce:	6a3b      	ldr	r3, [r7, #32]
 80119d0:	1d1a      	adds	r2, r3, #4
 80119d2:	623a      	str	r2, [r7, #32]
 80119d4:	edd3 7a00 	vldr	s15, [r3]
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	1d1a      	adds	r2, r3, #4
 80119dc:	61fa      	str	r2, [r7, #28]
 80119de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80119e2:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80119e6:	69bb      	ldr	r3, [r7, #24]
 80119e8:	3b01      	subs	r3, #1
 80119ea:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80119ec:	69bb      	ldr	r3, [r7, #24]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d1e8      	bne.n	80119c4 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80119f2:	2300      	movs	r3, #0
 80119f4:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80119f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80119fa:	4618      	mov	r0, r3
 80119fc:	372c      	adds	r7, #44	@ 0x2c
 80119fe:	46bd      	mov	sp, r7
 8011a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a04:	4770      	bx	lr

08011a06 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8011a06:	b480      	push	{r7}
 8011a08:	b085      	sub	sp, #20
 8011a0a:	af00      	add	r7, sp, #0
 8011a0c:	60f8      	str	r0, [r7, #12]
 8011a0e:	607b      	str	r3, [r7, #4]
 8011a10:	460b      	mov	r3, r1
 8011a12:	817b      	strh	r3, [r7, #10]
 8011a14:	4613      	mov	r3, r2
 8011a16:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	897a      	ldrh	r2, [r7, #10]
 8011a1c:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	893a      	ldrh	r2, [r7, #8]
 8011a22:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	687a      	ldr	r2, [r7, #4]
 8011a28:	605a      	str	r2, [r3, #4]
}
 8011a2a:	bf00      	nop
 8011a2c:	3714      	adds	r7, #20
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a34:	4770      	bx	lr

08011a36 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8011a36:	b480      	push	{r7}
 8011a38:	b0bb      	sub	sp, #236	@ 0xec
 8011a3a:	af00      	add	r7, sp, #0
 8011a3c:	6078      	str	r0, [r7, #4]
 8011a3e:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	685b      	ldr	r3, [r3, #4]
 8011a44:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	685b      	ldr	r3, [r3, #4]
 8011a4a:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	881b      	ldrh	r3, [r3, #0]
 8011a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	885b      	ldrh	r3, [r3, #2]
 8011a56:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8011a58:	f04f 0300 	mov.w	r3, #0
 8011a5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011a60:	f04f 0300 	mov.w	r3, #0
 8011a64:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 8011a66:	2300      	movs	r3, #0
 8011a68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8011a6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 8011a72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011a74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8011a78:	e03b      	b.n	8011af2 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8011a7a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8011a7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011a80:	1ad3      	subs	r3, r2, r3
 8011a82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011a86:	e00c      	b.n	8011aa2 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8011a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011a8c:	1d1a      	adds	r2, r3, #4
 8011a8e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8011a92:	f04f 0200 	mov.w	r2, #0
 8011a96:	601a      	str	r2, [r3, #0]
        j--;
 8011a98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011a9c:	3b01      	subs	r3, #1
 8011a9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011aa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d1ee      	bne.n	8011a88 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8011aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011aae:	1d1a      	adds	r2, r3, #4
 8011ab0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8011ab4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8011ab8:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8011aba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011abe:	3b01      	subs	r3, #1
 8011ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011ac4:	e00c      	b.n	8011ae0 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 8011ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011aca:	1d1a      	adds	r2, r3, #4
 8011acc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8011ad0:	f04f 0200 	mov.w	r2, #0
 8011ad4:	601a      	str	r2, [r3, #0]
        j--;
 8011ad6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011ada:	3b01      	subs	r3, #1
 8011adc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011ae0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d1ee      	bne.n	8011ac6 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 8011ae8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011aec:	3b01      	subs	r3, #1
 8011aee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 8011af2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d1bf      	bne.n	8011a7a <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 8011afa:	2300      	movs	r3, #0
 8011afc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011b00:	e2c7      	b.n	8012092 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8011b02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011b06:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	685a      	ldr	r2, [r3, #4]
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	885b      	ldrh	r3, [r3, #2]
 8011b10:	3301      	adds	r3, #1
 8011b12:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8011b16:	fb01 f303 	mul.w	r3, r1, r3
 8011b1a:	009b      	lsls	r3, r3, #2
 8011b1c:	4413      	add	r3, r2
 8011b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 8011b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 8011b2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011b30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8011b34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011b38:	3301      	adds	r3, #1
 8011b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011b3e:	e02c      	b.n	8011b9a <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	685a      	ldr	r2, [r3, #4]
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	885b      	ldrh	r3, [r3, #2]
 8011b48:	4619      	mov	r1, r3
 8011b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011b4e:	fb03 f101 	mul.w	r1, r3, r1
 8011b52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011b56:	440b      	add	r3, r1
 8011b58:	009b      	lsls	r3, r3, #2
 8011b5a:	4413      	add	r3, r2
 8011b5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 8011b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8011b68:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8011b6c:	eeb0 7ae7 	vabs.f32	s14, s15
 8011b70:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011b74:	eef0 7ae7 	vabs.f32	s15, s15
 8011b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b80:	dd06      	ble.n	8011b90 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 8011b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011b86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 8011b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8011b90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011b94:	3301      	adds	r3, #1
 8011b96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011b9a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d3cd      	bcc.n	8011b40 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8011ba4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011ba8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb0:	f000 809b 	beq.w	8011cea <arm_mat_inverse_f32+0x2b4>
 8011bb4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011bb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	f000 8094 	beq.w	8011cea <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	685b      	ldr	r3, [r3, #4]
 8011bc6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	685b      	ldr	r3, [r3, #4]
 8011bce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	885b      	ldrh	r3, [r3, #2]
 8011bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011bd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011bda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011bde:	1ad3      	subs	r3, r2, r3
 8011be0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011be2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011be4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011be6:	fb03 f202 	mul.w	r2, r3, r2
 8011bea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011bee:	4413      	add	r3, r2
 8011bf0:	009b      	lsls	r3, r3, #2
 8011bf2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8011bf6:	4413      	add	r3, r2
 8011bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bfe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011c02:	fb03 f202 	mul.w	r2, r3, r2
 8011c06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011c0a:	4413      	add	r3, r2
 8011c0c:	009b      	lsls	r3, r3, #2
 8011c0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011c12:	4413      	add	r3, r2
 8011c14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011c18:	2300      	movs	r3, #0
 8011c1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011c1e:	e018      	b.n	8011c52 <arm_mat_inverse_f32+0x21c>
 8011c20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011c28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011c2c:	1d1a      	adds	r2, r3, #4
 8011c2e:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8011c32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011c36:	6812      	ldr	r2, [r2, #0]
 8011c38:	601a      	str	r2, [r3, #0]
 8011c3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011c3e:	1d1a      	adds	r2, r3, #4
 8011c40:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8011c44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c46:	601a      	str	r2, [r3, #0]
 8011c48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8011c4c:	3301      	adds	r3, #1
 8011c4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011c52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8011c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	dbe1      	blt.n	8011c20 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	685b      	ldr	r3, [r3, #4]
 8011c68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	885b      	ldrh	r3, [r3, #2]
 8011c70:	647b      	str	r3, [r7, #68]	@ 0x44
 8011c72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c74:	643b      	str	r3, [r7, #64]	@ 0x40
 8011c76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011c7a:	fb02 f303 	mul.w	r3, r2, r3
 8011c7e:	009b      	lsls	r3, r3, #2
 8011c80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8011c84:	4413      	add	r3, r2
 8011c86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011c8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011c90:	fb02 f303 	mul.w	r3, r2, r3
 8011c94:	009b      	lsls	r3, r3, #2
 8011c96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011c9a:	4413      	add	r3, r2
 8011c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011ca0:	2300      	movs	r3, #0
 8011ca2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011ca6:	e018      	b.n	8011cda <arm_mat_inverse_f32+0x2a4>
 8011ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011cb4:	1d1a      	adds	r2, r3, #4
 8011cb6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8011cba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011cbe:	6812      	ldr	r2, [r2, #0]
 8011cc0:	601a      	str	r2, [r3, #0]
 8011cc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011cc6:	1d1a      	adds	r2, r3, #4
 8011cc8:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8011ccc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011cce:	601a      	str	r2, [r3, #0]
 8011cd0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8011cd4:	3301      	adds	r3, #1
 8011cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011cda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	dbe1      	blt.n	8011ca8 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 8011cea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8011cee:	2b01      	cmp	r3, #1
 8011cf0:	d009      	beq.n	8011d06 <arm_mat_inverse_f32+0x2d0>
 8011cf2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011cf6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cfe:	d102      	bne.n	8011d06 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8011d00:	f06f 0304 	mvn.w	r3, #4
 8011d04:	e208      	b.n	8012118 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 8011d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011d0a:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8011d0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011d12:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	685b      	ldr	r3, [r3, #4]
 8011d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	885b      	ldrh	r3, [r3, #2]
 8011d22:	637b      	str	r3, [r7, #52]	@ 0x34
 8011d24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011d2a:	1ad3      	subs	r3, r2, r3
 8011d2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8011d2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d30:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011d32:	fb03 f202 	mul.w	r2, r3, r2
 8011d36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011d3a:	4413      	add	r3, r2
 8011d3c:	009b      	lsls	r3, r3, #2
 8011d3e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8011d42:	4413      	add	r3, r2
 8011d44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011d48:	2300      	movs	r3, #0
 8011d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011d4e:	e011      	b.n	8011d74 <arm_mat_inverse_f32+0x33e>
 8011d50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011d54:	1d1a      	adds	r2, r3, #4
 8011d56:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8011d5a:	ed93 7a00 	vldr	s14, [r3]
 8011d5e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011d66:	edc3 7a00 	vstr	s15, [r3]
 8011d6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8011d6e:	3301      	adds	r3, #1
 8011d70:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011d74:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	dbe8      	blt.n	8011d50 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8011d7e:	683b      	ldr	r3, [r7, #0]
 8011d80:	685b      	ldr	r3, [r3, #4]
 8011d82:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	885b      	ldrh	r3, [r3, #2]
 8011d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011d94:	fb02 f303 	mul.w	r3, r2, r3
 8011d98:	009b      	lsls	r3, r3, #2
 8011d9a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011d9e:	4413      	add	r3, r2
 8011da0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011da4:	2300      	movs	r3, #0
 8011da6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011daa:	e011      	b.n	8011dd0 <arm_mat_inverse_f32+0x39a>
 8011dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011db0:	1d1a      	adds	r2, r3, #4
 8011db2:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8011db6:	ed93 7a00 	vldr	s14, [r3]
 8011dba:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011dc2:	edc3 7a00 	vstr	s15, [r3]
 8011dc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011dca:	3301      	adds	r3, #1
 8011dcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011dd0:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	dbe8      	blt.n	8011dac <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 8011dda:	2300      	movs	r3, #0
 8011ddc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8011de0:	e0ae      	b.n	8011f40 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	685a      	ldr	r2, [r3, #4]
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	885b      	ldrh	r3, [r3, #2]
 8011dea:	4619      	mov	r1, r3
 8011dec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011df0:	fb03 f101 	mul.w	r1, r3, r1
 8011df4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011df8:	440b      	add	r3, r1
 8011dfa:	009b      	lsls	r3, r3, #2
 8011dfc:	4413      	add	r3, r2
 8011dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8011e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	685b      	ldr	r3, [r3, #4]
 8011e18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	885b      	ldrh	r3, [r3, #2]
 8011e20:	617b      	str	r3, [r7, #20]
 8011e22:	697a      	ldr	r2, [r7, #20]
 8011e24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011e28:	1ad3      	subs	r3, r2, r3
 8011e2a:	613b      	str	r3, [r7, #16]
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011e32:	fb03 f202 	mul.w	r2, r3, r2
 8011e36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011e3a:	4413      	add	r3, r2
 8011e3c:	009b      	lsls	r3, r3, #2
 8011e3e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8011e42:	4413      	add	r3, r2
 8011e44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011e48:	697b      	ldr	r3, [r7, #20]
 8011e4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011e4c:	fb03 f202 	mul.w	r2, r3, r2
 8011e50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011e54:	4413      	add	r3, r2
 8011e56:	009b      	lsls	r3, r3, #2
 8011e58:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8011e5c:	4413      	add	r3, r2
 8011e5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011e62:	2300      	movs	r3, #0
 8011e64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011e68:	e01a      	b.n	8011ea0 <arm_mat_inverse_f32+0x46a>
 8011e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011e6e:	1d1a      	adds	r2, r3, #4
 8011e70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011e74:	ed93 7a00 	vldr	s14, [r3]
 8011e78:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011e84:	1d1a      	adds	r2, r3, #4
 8011e86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8011e8a:	ed93 7a00 	vldr	s14, [r3]
 8011e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e92:	edc3 7a00 	vstr	s15, [r3]
 8011e96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011ea0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	dbdf      	blt.n	8011e6a <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	685b      	ldr	r3, [r3, #4]
 8011eb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	885b      	ldrh	r3, [r3, #2]
 8011ebe:	60fb      	str	r3, [r7, #12]
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	60bb      	str	r3, [r7, #8]
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011eca:	fb02 f303 	mul.w	r3, r2, r3
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011ed4:	4413      	add	r3, r2
 8011ed6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011ede:	fb02 f303 	mul.w	r3, r2, r3
 8011ee2:	009b      	lsls	r3, r3, #2
 8011ee4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011ee8:	4413      	add	r3, r2
 8011eea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011eee:	2300      	movs	r3, #0
 8011ef0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011ef4:	e01a      	b.n	8011f2c <arm_mat_inverse_f32+0x4f6>
 8011ef6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011efa:	1d1a      	adds	r2, r3, #4
 8011efc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8011f00:	ed93 7a00 	vldr	s14, [r3]
 8011f04:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011f10:	1d1a      	adds	r2, r3, #4
 8011f12:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8011f16:	ed93 7a00 	vldr	s14, [r3]
 8011f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f1e:	edc3 7a00 	vstr	s15, [r3]
 8011f22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011f26:	3301      	adds	r3, #1
 8011f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011f2c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	429a      	cmp	r2, r3
 8011f34:	dbdf      	blt.n	8011ef6 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8011f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011f3a:	3301      	adds	r3, #1
 8011f3c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011f40:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011f44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f46:	429a      	cmp	r2, r3
 8011f48:	f4ff af4b 	bcc.w	8011de2 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8011f4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f4e:	3301      	adds	r3, #1
 8011f50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011f54:	e092      	b.n	801207c <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	685a      	ldr	r2, [r3, #4]
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	885b      	ldrh	r3, [r3, #2]
 8011f5e:	4619      	mov	r1, r3
 8011f60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011f64:	fb03 f101 	mul.w	r1, r3, r1
 8011f68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011f6c:	440b      	add	r3, r1
 8011f6e:	009b      	lsls	r3, r3, #2
 8011f70:	4413      	add	r3, r2
 8011f72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8011f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	685b      	ldr	r3, [r3, #4]
 8011f8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	885b      	ldrh	r3, [r3, #2]
 8011f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8011f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011f98:	1ad3      	subs	r3, r2, r3
 8011f9a:	623b      	str	r3, [r7, #32]
 8011f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f9e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011fa2:	fb03 f202 	mul.w	r2, r3, r2
 8011fa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011faa:	4413      	add	r3, r2
 8011fac:	009b      	lsls	r3, r3, #2
 8011fae:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011fb0:	4413      	add	r3, r2
 8011fb2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011fb8:	fb03 f202 	mul.w	r2, r3, r2
 8011fbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011fc0:	4413      	add	r3, r2
 8011fc2:	009b      	lsls	r3, r3, #2
 8011fc4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8011fc6:	4413      	add	r3, r2
 8011fc8:	677b      	str	r3, [r7, #116]	@ 0x74
 8011fca:	2300      	movs	r3, #0
 8011fcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011fce:	e014      	b.n	8011ffa <arm_mat_inverse_f32+0x5c4>
 8011fd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011fd2:	1d1a      	adds	r2, r3, #4
 8011fd4:	677a      	str	r2, [r7, #116]	@ 0x74
 8011fd6:	ed93 7a00 	vldr	s14, [r3]
 8011fda:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011fe2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011fe4:	1d1a      	adds	r2, r3, #4
 8011fe6:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011fe8:	ed93 7a00 	vldr	s14, [r3]
 8011fec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011ff0:	edc3 7a00 	vstr	s15, [r3]
 8011ff4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011ff6:	3301      	adds	r3, #1
 8011ff8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011ffa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011ffc:	6a3b      	ldr	r3, [r7, #32]
 8011ffe:	429a      	cmp	r2, r3
 8012000:	dbe6      	blt.n	8011fd0 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8012002:	683b      	ldr	r3, [r7, #0]
 8012004:	685b      	ldr	r3, [r3, #4]
 8012006:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	685b      	ldr	r3, [r3, #4]
 801200c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	885b      	ldrh	r3, [r3, #2]
 8012012:	61fb      	str	r3, [r7, #28]
 8012014:	69fb      	ldr	r3, [r7, #28]
 8012016:	61bb      	str	r3, [r7, #24]
 8012018:	69fb      	ldr	r3, [r7, #28]
 801201a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801201e:	fb02 f303 	mul.w	r3, r2, r3
 8012022:	009b      	lsls	r3, r3, #2
 8012024:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012026:	4413      	add	r3, r2
 8012028:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801202a:	69fb      	ldr	r3, [r7, #28]
 801202c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801202e:	fb02 f303 	mul.w	r3, r2, r3
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012036:	4413      	add	r3, r2
 8012038:	66bb      	str	r3, [r7, #104]	@ 0x68
 801203a:	2300      	movs	r3, #0
 801203c:	673b      	str	r3, [r7, #112]	@ 0x70
 801203e:	e014      	b.n	801206a <arm_mat_inverse_f32+0x634>
 8012040:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012042:	1d1a      	adds	r2, r3, #4
 8012044:	66ba      	str	r2, [r7, #104]	@ 0x68
 8012046:	ed93 7a00 	vldr	s14, [r3]
 801204a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801204e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012054:	1d1a      	adds	r2, r3, #4
 8012056:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012058:	ed93 7a00 	vldr	s14, [r3]
 801205c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012060:	edc3 7a00 	vstr	s15, [r3]
 8012064:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012066:	3301      	adds	r3, #1
 8012068:	673b      	str	r3, [r7, #112]	@ 0x70
 801206a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801206c:	69bb      	ldr	r3, [r7, #24]
 801206e:	429a      	cmp	r2, r3
 8012070:	dbe6      	blt.n	8012040 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8012072:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012076:	3301      	adds	r3, #1
 8012078:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801207c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012080:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012082:	429a      	cmp	r2, r3
 8012084:	f4ff af67 	bcc.w	8011f56 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8012088:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801208c:	3301      	adds	r3, #1
 801208e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012092:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012096:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012098:	429a      	cmp	r2, r3
 801209a:	f4ff ad32 	bcc.w	8011b02 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 801209e:	2300      	movs	r3, #0
 80120a0:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 80120a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80120a8:	2b01      	cmp	r3, #1
 80120aa:	d033      	beq.n	8012114 <arm_mat_inverse_f32+0x6de>
 80120ac:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80120b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80120b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120b8:	d12c      	bne.n	8012114 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 80120c0:	2300      	movs	r3, #0
 80120c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80120c6:	e010      	b.n	80120ea <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 80120c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80120cc:	009b      	lsls	r3, r3, #2
 80120ce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80120d0:	4413      	add	r3, r2
 80120d2:	edd3 7a00 	vldr	s15, [r3]
 80120d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80120da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120de:	d10d      	bne.n	80120fc <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 80120e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80120e4:	3301      	adds	r3, #1
 80120e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80120ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80120ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80120ee:	fb02 f303 	mul.w	r3, r2, r3
 80120f2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d3e6      	bcc.n	80120c8 <arm_mat_inverse_f32+0x692>
 80120fa:	e000      	b.n	80120fe <arm_mat_inverse_f32+0x6c8>
            break;
 80120fc:	bf00      	nop
      }

      if (i == numRows * numCols)
 80120fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012100:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012102:	fb02 f303 	mul.w	r3, r2, r3
 8012106:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801210a:	429a      	cmp	r2, r3
 801210c:	d102      	bne.n	8012114 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 801210e:	23fb      	movs	r3, #251	@ 0xfb
 8012110:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 8012114:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 8012118:	4618      	mov	r0, r3
 801211a:	37ec      	adds	r7, #236	@ 0xec
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr

08012124 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012124:	b480      	push	{r7}
 8012126:	b093      	sub	sp, #76	@ 0x4c
 8012128:	af00      	add	r7, sp, #0
 801212a:	60f8      	str	r0, [r7, #12]
 801212c:	60b9      	str	r1, [r7, #8]
 801212e:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	685b      	ldr	r3, [r3, #4]
 8012134:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8012136:	68bb      	ldr	r3, [r7, #8]
 8012138:	685b      	ldr	r3, [r3, #4]
 801213a:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	685b      	ldr	r3, [r3, #4]
 8012140:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	685b      	ldr	r3, [r3, #4]
 8012146:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	685b      	ldr	r3, [r3, #4]
 801214c:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	881b      	ldrh	r3, [r3, #0]
 8012152:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	885b      	ldrh	r3, [r3, #2]
 8012158:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	885b      	ldrh	r3, [r3, #2]
 801215e:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8012160:	2300      	movs	r3, #0
 8012162:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012164:	8b7b      	ldrh	r3, [r7, #26]
 8012166:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8012168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801216a:	009b      	lsls	r3, r3, #2
 801216c:	69fa      	ldr	r2, [r7, #28]
 801216e:	4413      	add	r3, r2
 8012170:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8012172:	8b3b      	ldrh	r3, [r7, #24]
 8012174:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	685b      	ldr	r3, [r3, #4]
 801217a:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 801217c:	f04f 0300 	mov.w	r3, #0
 8012180:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8012182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012184:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8012186:	8afb      	ldrh	r3, [r7, #22]
 8012188:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 801218a:	e017      	b.n	80121bc <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 801218c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801218e:	1d1a      	adds	r2, r3, #4
 8012190:	647a      	str	r2, [r7, #68]	@ 0x44
 8012192:	ed93 7a00 	vldr	s14, [r3]
 8012196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012198:	edd3 7a00 	vldr	s15, [r3]
 801219c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121a0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80121a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121a8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 80121ac:	8b3b      	ldrh	r3, [r7, #24]
 80121ae:	009b      	lsls	r3, r3, #2
 80121b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80121b2:	4413      	add	r3, r2
 80121b4:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 80121b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121b8:	3b01      	subs	r3, #1
 80121ba:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 80121bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d1e4      	bne.n	801218c <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 80121c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121c4:	1d1a      	adds	r2, r3, #4
 80121c6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80121c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80121ca:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 80121cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121ce:	3b01      	subs	r3, #1
 80121d0:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 80121d2:	8b3a      	ldrh	r2, [r7, #24]
 80121d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121d6:	1ad3      	subs	r3, r2, r3
 80121d8:	009b      	lsls	r3, r3, #2
 80121da:	6a3a      	ldr	r2, [r7, #32]
 80121dc:	4413      	add	r3, r2
 80121de:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 80121e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d1ca      	bne.n	801217c <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 80121e6:	8b3b      	ldrh	r3, [r7, #24]
 80121e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80121ea:	4413      	add	r3, r2
 80121ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 80121ee:	8afb      	ldrh	r3, [r7, #22]
 80121f0:	009b      	lsls	r3, r3, #2
 80121f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80121f4:	4413      	add	r3, r2
 80121f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 80121f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121fa:	3b01      	subs	r3, #1
 80121fc:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 80121fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012200:	2b00      	cmp	r3, #0
 8012202:	d1b1      	bne.n	8012168 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012204:	2300      	movs	r3, #0
 8012206:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8012208:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 801220c:	4618      	mov	r0, r3
 801220e:	374c      	adds	r7, #76	@ 0x4c
 8012210:	46bd      	mov	sp, r7
 8012212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012216:	4770      	bx	lr

08012218 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8012218:	b480      	push	{r7}
 801221a:	b08b      	sub	sp, #44	@ 0x2c
 801221c:	af00      	add	r7, sp, #0
 801221e:	60f8      	str	r0, [r7, #12]
 8012220:	ed87 0a02 	vstr	s0, [r7, #8]
 8012224:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	685b      	ldr	r3, [r3, #4]
 8012230:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	881b      	ldrh	r3, [r3, #0]
 8012236:	461a      	mov	r2, r3
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	885b      	ldrh	r3, [r3, #2]
 801223c:	fb02 f303 	mul.w	r3, r2, r3
 8012240:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012242:	69bb      	ldr	r3, [r7, #24]
 8012244:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8012246:	e010      	b.n	801226a <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8012248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801224a:	1d1a      	adds	r2, r3, #4
 801224c:	627a      	str	r2, [r7, #36]	@ 0x24
 801224e:	ed93 7a00 	vldr	s14, [r3]
 8012252:	6a3b      	ldr	r3, [r7, #32]
 8012254:	1d1a      	adds	r2, r3, #4
 8012256:	623a      	str	r2, [r7, #32]
 8012258:	edd7 7a02 	vldr	s15, [r7, #8]
 801225c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012260:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8012264:	69fb      	ldr	r3, [r7, #28]
 8012266:	3b01      	subs	r3, #1
 8012268:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 801226a:	69fb      	ldr	r3, [r7, #28]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d1eb      	bne.n	8012248 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012270:	2300      	movs	r3, #0
 8012272:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8012274:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012278:	4618      	mov	r0, r3
 801227a:	372c      	adds	r7, #44	@ 0x2c
 801227c:	46bd      	mov	sp, r7
 801227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012282:	4770      	bx	lr

08012284 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012284:	b480      	push	{r7}
 8012286:	b08b      	sub	sp, #44	@ 0x2c
 8012288:	af00      	add	r7, sp, #0
 801228a:	60f8      	str	r0, [r7, #12]
 801228c:	60b9      	str	r1, [r7, #8]
 801228e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	685b      	ldr	r3, [r3, #4]
 8012294:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	685b      	ldr	r3, [r3, #4]
 801229a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	685b      	ldr	r3, [r3, #4]
 80122a0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	881b      	ldrh	r3, [r3, #0]
 80122a6:	461a      	mov	r2, r3
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	885b      	ldrh	r3, [r3, #2]
 80122ac:	fb02 f303 	mul.w	r3, r2, r3
 80122b0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80122b2:	697b      	ldr	r3, [r7, #20]
 80122b4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80122b6:	e013      	b.n	80122e0 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 80122b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ba:	1d1a      	adds	r2, r3, #4
 80122bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80122be:	ed93 7a00 	vldr	s14, [r3]
 80122c2:	6a3b      	ldr	r3, [r7, #32]
 80122c4:	1d1a      	adds	r2, r3, #4
 80122c6:	623a      	str	r2, [r7, #32]
 80122c8:	edd3 7a00 	vldr	s15, [r3]
 80122cc:	69fb      	ldr	r3, [r7, #28]
 80122ce:	1d1a      	adds	r2, r3, #4
 80122d0:	61fa      	str	r2, [r7, #28]
 80122d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80122d6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80122da:	69bb      	ldr	r3, [r7, #24]
 80122dc:	3b01      	subs	r3, #1
 80122de:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80122e0:	69bb      	ldr	r3, [r7, #24]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d1e8      	bne.n	80122b8 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80122e6:	2300      	movs	r3, #0
 80122e8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80122ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	372c      	adds	r7, #44	@ 0x2c
 80122f2:	46bd      	mov	sp, r7
 80122f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f8:	4770      	bx	lr

080122fa <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80122fa:	b480      	push	{r7}
 80122fc:	b08b      	sub	sp, #44	@ 0x2c
 80122fe:	af00      	add	r7, sp, #0
 8012300:	6078      	str	r0, [r7, #4]
 8012302:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	685b      	ldr	r3, [r3, #4]
 8012308:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	685b      	ldr	r3, [r3, #4]
 801230e:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	881b      	ldrh	r3, [r3, #0]
 8012314:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	885b      	ldrh	r3, [r3, #2]
 801231a:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 801231c:	89fb      	ldrh	r3, [r7, #14]
 801231e:	61bb      	str	r3, [r7, #24]
 8012320:	2300      	movs	r3, #0
 8012322:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8012324:	697b      	ldr	r3, [r7, #20]
 8012326:	009b      	lsls	r3, r3, #2
 8012328:	693a      	ldr	r2, [r7, #16]
 801232a:	4413      	add	r3, r2
 801232c:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 801232e:	89bb      	ldrh	r3, [r7, #12]
 8012330:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8012332:	e00d      	b.n	8012350 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8012334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012336:	1d1a      	adds	r2, r3, #4
 8012338:	627a      	str	r2, [r7, #36]	@ 0x24
 801233a:	681a      	ldr	r2, [r3, #0]
 801233c:	6a3b      	ldr	r3, [r7, #32]
 801233e:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8012340:	89fb      	ldrh	r3, [r7, #14]
 8012342:	009b      	lsls	r3, r3, #2
 8012344:	6a3a      	ldr	r2, [r7, #32]
 8012346:	4413      	add	r3, r2
 8012348:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 801234a:	69fb      	ldr	r3, [r7, #28]
 801234c:	3b01      	subs	r3, #1
 801234e:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8012350:	69fb      	ldr	r3, [r7, #28]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d1ee      	bne.n	8012334 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8012356:	697b      	ldr	r3, [r7, #20]
 8012358:	3301      	adds	r3, #1
 801235a:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 801235c:	69bb      	ldr	r3, [r7, #24]
 801235e:	3b01      	subs	r3, #1
 8012360:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8012362:	69bb      	ldr	r3, [r7, #24]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d1dd      	bne.n	8012324 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012368:	2300      	movs	r3, #0
 801236a:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 801236c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012370:	4618      	mov	r0, r3
 8012372:	372c      	adds	r7, #44	@ 0x2c
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr

0801237c <malloc>:
 801237c:	4b02      	ldr	r3, [pc, #8]	@ (8012388 <malloc+0xc>)
 801237e:	4601      	mov	r1, r0
 8012380:	6818      	ldr	r0, [r3, #0]
 8012382:	f000 b825 	b.w	80123d0 <_malloc_r>
 8012386:	bf00      	nop
 8012388:	20000344 	.word	0x20000344

0801238c <sbrk_aligned>:
 801238c:	b570      	push	{r4, r5, r6, lr}
 801238e:	4e0f      	ldr	r6, [pc, #60]	@ (80123cc <sbrk_aligned+0x40>)
 8012390:	460c      	mov	r4, r1
 8012392:	6831      	ldr	r1, [r6, #0]
 8012394:	4605      	mov	r5, r0
 8012396:	b911      	cbnz	r1, 801239e <sbrk_aligned+0x12>
 8012398:	f000 f8ae 	bl	80124f8 <_sbrk_r>
 801239c:	6030      	str	r0, [r6, #0]
 801239e:	4621      	mov	r1, r4
 80123a0:	4628      	mov	r0, r5
 80123a2:	f000 f8a9 	bl	80124f8 <_sbrk_r>
 80123a6:	1c43      	adds	r3, r0, #1
 80123a8:	d103      	bne.n	80123b2 <sbrk_aligned+0x26>
 80123aa:	f04f 34ff 	mov.w	r4, #4294967295
 80123ae:	4620      	mov	r0, r4
 80123b0:	bd70      	pop	{r4, r5, r6, pc}
 80123b2:	1cc4      	adds	r4, r0, #3
 80123b4:	f024 0403 	bic.w	r4, r4, #3
 80123b8:	42a0      	cmp	r0, r4
 80123ba:	d0f8      	beq.n	80123ae <sbrk_aligned+0x22>
 80123bc:	1a21      	subs	r1, r4, r0
 80123be:	4628      	mov	r0, r5
 80123c0:	f000 f89a 	bl	80124f8 <_sbrk_r>
 80123c4:	3001      	adds	r0, #1
 80123c6:	d1f2      	bne.n	80123ae <sbrk_aligned+0x22>
 80123c8:	e7ef      	b.n	80123aa <sbrk_aligned+0x1e>
 80123ca:	bf00      	nop
 80123cc:	20002444 	.word	0x20002444

080123d0 <_malloc_r>:
 80123d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123d4:	1ccd      	adds	r5, r1, #3
 80123d6:	f025 0503 	bic.w	r5, r5, #3
 80123da:	3508      	adds	r5, #8
 80123dc:	2d0c      	cmp	r5, #12
 80123de:	bf38      	it	cc
 80123e0:	250c      	movcc	r5, #12
 80123e2:	2d00      	cmp	r5, #0
 80123e4:	4606      	mov	r6, r0
 80123e6:	db01      	blt.n	80123ec <_malloc_r+0x1c>
 80123e8:	42a9      	cmp	r1, r5
 80123ea:	d904      	bls.n	80123f6 <_malloc_r+0x26>
 80123ec:	230c      	movs	r3, #12
 80123ee:	6033      	str	r3, [r6, #0]
 80123f0:	2000      	movs	r0, #0
 80123f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80124cc <_malloc_r+0xfc>
 80123fa:	f000 f869 	bl	80124d0 <__malloc_lock>
 80123fe:	f8d8 3000 	ldr.w	r3, [r8]
 8012402:	461c      	mov	r4, r3
 8012404:	bb44      	cbnz	r4, 8012458 <_malloc_r+0x88>
 8012406:	4629      	mov	r1, r5
 8012408:	4630      	mov	r0, r6
 801240a:	f7ff ffbf 	bl	801238c <sbrk_aligned>
 801240e:	1c43      	adds	r3, r0, #1
 8012410:	4604      	mov	r4, r0
 8012412:	d158      	bne.n	80124c6 <_malloc_r+0xf6>
 8012414:	f8d8 4000 	ldr.w	r4, [r8]
 8012418:	4627      	mov	r7, r4
 801241a:	2f00      	cmp	r7, #0
 801241c:	d143      	bne.n	80124a6 <_malloc_r+0xd6>
 801241e:	2c00      	cmp	r4, #0
 8012420:	d04b      	beq.n	80124ba <_malloc_r+0xea>
 8012422:	6823      	ldr	r3, [r4, #0]
 8012424:	4639      	mov	r1, r7
 8012426:	4630      	mov	r0, r6
 8012428:	eb04 0903 	add.w	r9, r4, r3
 801242c:	f000 f864 	bl	80124f8 <_sbrk_r>
 8012430:	4581      	cmp	r9, r0
 8012432:	d142      	bne.n	80124ba <_malloc_r+0xea>
 8012434:	6821      	ldr	r1, [r4, #0]
 8012436:	1a6d      	subs	r5, r5, r1
 8012438:	4629      	mov	r1, r5
 801243a:	4630      	mov	r0, r6
 801243c:	f7ff ffa6 	bl	801238c <sbrk_aligned>
 8012440:	3001      	adds	r0, #1
 8012442:	d03a      	beq.n	80124ba <_malloc_r+0xea>
 8012444:	6823      	ldr	r3, [r4, #0]
 8012446:	442b      	add	r3, r5
 8012448:	6023      	str	r3, [r4, #0]
 801244a:	f8d8 3000 	ldr.w	r3, [r8]
 801244e:	685a      	ldr	r2, [r3, #4]
 8012450:	bb62      	cbnz	r2, 80124ac <_malloc_r+0xdc>
 8012452:	f8c8 7000 	str.w	r7, [r8]
 8012456:	e00f      	b.n	8012478 <_malloc_r+0xa8>
 8012458:	6822      	ldr	r2, [r4, #0]
 801245a:	1b52      	subs	r2, r2, r5
 801245c:	d420      	bmi.n	80124a0 <_malloc_r+0xd0>
 801245e:	2a0b      	cmp	r2, #11
 8012460:	d917      	bls.n	8012492 <_malloc_r+0xc2>
 8012462:	1961      	adds	r1, r4, r5
 8012464:	42a3      	cmp	r3, r4
 8012466:	6025      	str	r5, [r4, #0]
 8012468:	bf18      	it	ne
 801246a:	6059      	strne	r1, [r3, #4]
 801246c:	6863      	ldr	r3, [r4, #4]
 801246e:	bf08      	it	eq
 8012470:	f8c8 1000 	streq.w	r1, [r8]
 8012474:	5162      	str	r2, [r4, r5]
 8012476:	604b      	str	r3, [r1, #4]
 8012478:	4630      	mov	r0, r6
 801247a:	f000 f82f 	bl	80124dc <__malloc_unlock>
 801247e:	f104 000b 	add.w	r0, r4, #11
 8012482:	1d23      	adds	r3, r4, #4
 8012484:	f020 0007 	bic.w	r0, r0, #7
 8012488:	1ac2      	subs	r2, r0, r3
 801248a:	bf1c      	itt	ne
 801248c:	1a1b      	subne	r3, r3, r0
 801248e:	50a3      	strne	r3, [r4, r2]
 8012490:	e7af      	b.n	80123f2 <_malloc_r+0x22>
 8012492:	6862      	ldr	r2, [r4, #4]
 8012494:	42a3      	cmp	r3, r4
 8012496:	bf0c      	ite	eq
 8012498:	f8c8 2000 	streq.w	r2, [r8]
 801249c:	605a      	strne	r2, [r3, #4]
 801249e:	e7eb      	b.n	8012478 <_malloc_r+0xa8>
 80124a0:	4623      	mov	r3, r4
 80124a2:	6864      	ldr	r4, [r4, #4]
 80124a4:	e7ae      	b.n	8012404 <_malloc_r+0x34>
 80124a6:	463c      	mov	r4, r7
 80124a8:	687f      	ldr	r7, [r7, #4]
 80124aa:	e7b6      	b.n	801241a <_malloc_r+0x4a>
 80124ac:	461a      	mov	r2, r3
 80124ae:	685b      	ldr	r3, [r3, #4]
 80124b0:	42a3      	cmp	r3, r4
 80124b2:	d1fb      	bne.n	80124ac <_malloc_r+0xdc>
 80124b4:	2300      	movs	r3, #0
 80124b6:	6053      	str	r3, [r2, #4]
 80124b8:	e7de      	b.n	8012478 <_malloc_r+0xa8>
 80124ba:	230c      	movs	r3, #12
 80124bc:	6033      	str	r3, [r6, #0]
 80124be:	4630      	mov	r0, r6
 80124c0:	f000 f80c 	bl	80124dc <__malloc_unlock>
 80124c4:	e794      	b.n	80123f0 <_malloc_r+0x20>
 80124c6:	6005      	str	r5, [r0, #0]
 80124c8:	e7d6      	b.n	8012478 <_malloc_r+0xa8>
 80124ca:	bf00      	nop
 80124cc:	20002448 	.word	0x20002448

080124d0 <__malloc_lock>:
 80124d0:	4801      	ldr	r0, [pc, #4]	@ (80124d8 <__malloc_lock+0x8>)
 80124d2:	f000 b84b 	b.w	801256c <__retarget_lock_acquire_recursive>
 80124d6:	bf00      	nop
 80124d8:	20002588 	.word	0x20002588

080124dc <__malloc_unlock>:
 80124dc:	4801      	ldr	r0, [pc, #4]	@ (80124e4 <__malloc_unlock+0x8>)
 80124de:	f000 b846 	b.w	801256e <__retarget_lock_release_recursive>
 80124e2:	bf00      	nop
 80124e4:	20002588 	.word	0x20002588

080124e8 <memset>:
 80124e8:	4402      	add	r2, r0
 80124ea:	4603      	mov	r3, r0
 80124ec:	4293      	cmp	r3, r2
 80124ee:	d100      	bne.n	80124f2 <memset+0xa>
 80124f0:	4770      	bx	lr
 80124f2:	f803 1b01 	strb.w	r1, [r3], #1
 80124f6:	e7f9      	b.n	80124ec <memset+0x4>

080124f8 <_sbrk_r>:
 80124f8:	b538      	push	{r3, r4, r5, lr}
 80124fa:	4d06      	ldr	r5, [pc, #24]	@ (8012514 <_sbrk_r+0x1c>)
 80124fc:	2300      	movs	r3, #0
 80124fe:	4604      	mov	r4, r0
 8012500:	4608      	mov	r0, r1
 8012502:	602b      	str	r3, [r5, #0]
 8012504:	f7f7 f846 	bl	8009594 <_sbrk>
 8012508:	1c43      	adds	r3, r0, #1
 801250a:	d102      	bne.n	8012512 <_sbrk_r+0x1a>
 801250c:	682b      	ldr	r3, [r5, #0]
 801250e:	b103      	cbz	r3, 8012512 <_sbrk_r+0x1a>
 8012510:	6023      	str	r3, [r4, #0]
 8012512:	bd38      	pop	{r3, r4, r5, pc}
 8012514:	20002584 	.word	0x20002584

08012518 <__errno>:
 8012518:	4b01      	ldr	r3, [pc, #4]	@ (8012520 <__errno+0x8>)
 801251a:	6818      	ldr	r0, [r3, #0]
 801251c:	4770      	bx	lr
 801251e:	bf00      	nop
 8012520:	20000344 	.word	0x20000344

08012524 <__libc_init_array>:
 8012524:	b570      	push	{r4, r5, r6, lr}
 8012526:	4d0d      	ldr	r5, [pc, #52]	@ (801255c <__libc_init_array+0x38>)
 8012528:	4c0d      	ldr	r4, [pc, #52]	@ (8012560 <__libc_init_array+0x3c>)
 801252a:	1b64      	subs	r4, r4, r5
 801252c:	10a4      	asrs	r4, r4, #2
 801252e:	2600      	movs	r6, #0
 8012530:	42a6      	cmp	r6, r4
 8012532:	d109      	bne.n	8012548 <__libc_init_array+0x24>
 8012534:	4d0b      	ldr	r5, [pc, #44]	@ (8012564 <__libc_init_array+0x40>)
 8012536:	4c0c      	ldr	r4, [pc, #48]	@ (8012568 <__libc_init_array+0x44>)
 8012538:	f001 ff32 	bl	80143a0 <_init>
 801253c:	1b64      	subs	r4, r4, r5
 801253e:	10a4      	asrs	r4, r4, #2
 8012540:	2600      	movs	r6, #0
 8012542:	42a6      	cmp	r6, r4
 8012544:	d105      	bne.n	8012552 <__libc_init_array+0x2e>
 8012546:	bd70      	pop	{r4, r5, r6, pc}
 8012548:	f855 3b04 	ldr.w	r3, [r5], #4
 801254c:	4798      	blx	r3
 801254e:	3601      	adds	r6, #1
 8012550:	e7ee      	b.n	8012530 <__libc_init_array+0xc>
 8012552:	f855 3b04 	ldr.w	r3, [r5], #4
 8012556:	4798      	blx	r3
 8012558:	3601      	adds	r6, #1
 801255a:	e7f2      	b.n	8012542 <__libc_init_array+0x1e>
 801255c:	08014a20 	.word	0x08014a20
 8012560:	08014a20 	.word	0x08014a20
 8012564:	08014a20 	.word	0x08014a20
 8012568:	08014a24 	.word	0x08014a24

0801256c <__retarget_lock_acquire_recursive>:
 801256c:	4770      	bx	lr

0801256e <__retarget_lock_release_recursive>:
 801256e:	4770      	bx	lr

08012570 <memcpy>:
 8012570:	440a      	add	r2, r1
 8012572:	4291      	cmp	r1, r2
 8012574:	f100 33ff 	add.w	r3, r0, #4294967295
 8012578:	d100      	bne.n	801257c <memcpy+0xc>
 801257a:	4770      	bx	lr
 801257c:	b510      	push	{r4, lr}
 801257e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012582:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012586:	4291      	cmp	r1, r2
 8012588:	d1f9      	bne.n	801257e <memcpy+0xe>
 801258a:	bd10      	pop	{r4, pc}
 801258c:	0000      	movs	r0, r0
	...

08012590 <cos>:
 8012590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012592:	ec53 2b10 	vmov	r2, r3, d0
 8012596:	4826      	ldr	r0, [pc, #152]	@ (8012630 <cos+0xa0>)
 8012598:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801259c:	4281      	cmp	r1, r0
 801259e:	d806      	bhi.n	80125ae <cos+0x1e>
 80125a0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012628 <cos+0x98>
 80125a4:	b005      	add	sp, #20
 80125a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80125aa:	f000 b9bd 	b.w	8012928 <__kernel_cos>
 80125ae:	4821      	ldr	r0, [pc, #132]	@ (8012634 <cos+0xa4>)
 80125b0:	4281      	cmp	r1, r0
 80125b2:	d908      	bls.n	80125c6 <cos+0x36>
 80125b4:	4610      	mov	r0, r2
 80125b6:	4619      	mov	r1, r3
 80125b8:	f7ed fe32 	bl	8000220 <__aeabi_dsub>
 80125bc:	ec41 0b10 	vmov	d0, r0, r1
 80125c0:	b005      	add	sp, #20
 80125c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80125c6:	4668      	mov	r0, sp
 80125c8:	f000 fb32 	bl	8012c30 <__ieee754_rem_pio2>
 80125cc:	f000 0003 	and.w	r0, r0, #3
 80125d0:	2801      	cmp	r0, #1
 80125d2:	d00b      	beq.n	80125ec <cos+0x5c>
 80125d4:	2802      	cmp	r0, #2
 80125d6:	d015      	beq.n	8012604 <cos+0x74>
 80125d8:	b9d8      	cbnz	r0, 8012612 <cos+0x82>
 80125da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80125de:	ed9d 0b00 	vldr	d0, [sp]
 80125e2:	f000 f9a1 	bl	8012928 <__kernel_cos>
 80125e6:	ec51 0b10 	vmov	r0, r1, d0
 80125ea:	e7e7      	b.n	80125bc <cos+0x2c>
 80125ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80125f0:	ed9d 0b00 	vldr	d0, [sp]
 80125f4:	f000 fa60 	bl	8012ab8 <__kernel_sin>
 80125f8:	ec53 2b10 	vmov	r2, r3, d0
 80125fc:	4610      	mov	r0, r2
 80125fe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012602:	e7db      	b.n	80125bc <cos+0x2c>
 8012604:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012608:	ed9d 0b00 	vldr	d0, [sp]
 801260c:	f000 f98c 	bl	8012928 <__kernel_cos>
 8012610:	e7f2      	b.n	80125f8 <cos+0x68>
 8012612:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012616:	ed9d 0b00 	vldr	d0, [sp]
 801261a:	2001      	movs	r0, #1
 801261c:	f000 fa4c 	bl	8012ab8 <__kernel_sin>
 8012620:	e7e1      	b.n	80125e6 <cos+0x56>
 8012622:	bf00      	nop
 8012624:	f3af 8000 	nop.w
	...
 8012630:	3fe921fb 	.word	0x3fe921fb
 8012634:	7fefffff 	.word	0x7fefffff

08012638 <sin>:
 8012638:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801263a:	ec53 2b10 	vmov	r2, r3, d0
 801263e:	4826      	ldr	r0, [pc, #152]	@ (80126d8 <sin+0xa0>)
 8012640:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012644:	4281      	cmp	r1, r0
 8012646:	d807      	bhi.n	8012658 <sin+0x20>
 8012648:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80126d0 <sin+0x98>
 801264c:	2000      	movs	r0, #0
 801264e:	b005      	add	sp, #20
 8012650:	f85d eb04 	ldr.w	lr, [sp], #4
 8012654:	f000 ba30 	b.w	8012ab8 <__kernel_sin>
 8012658:	4820      	ldr	r0, [pc, #128]	@ (80126dc <sin+0xa4>)
 801265a:	4281      	cmp	r1, r0
 801265c:	d908      	bls.n	8012670 <sin+0x38>
 801265e:	4610      	mov	r0, r2
 8012660:	4619      	mov	r1, r3
 8012662:	f7ed fddd 	bl	8000220 <__aeabi_dsub>
 8012666:	ec41 0b10 	vmov	d0, r0, r1
 801266a:	b005      	add	sp, #20
 801266c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012670:	4668      	mov	r0, sp
 8012672:	f000 fadd 	bl	8012c30 <__ieee754_rem_pio2>
 8012676:	f000 0003 	and.w	r0, r0, #3
 801267a:	2801      	cmp	r0, #1
 801267c:	d00c      	beq.n	8012698 <sin+0x60>
 801267e:	2802      	cmp	r0, #2
 8012680:	d011      	beq.n	80126a6 <sin+0x6e>
 8012682:	b9e8      	cbnz	r0, 80126c0 <sin+0x88>
 8012684:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012688:	ed9d 0b00 	vldr	d0, [sp]
 801268c:	2001      	movs	r0, #1
 801268e:	f000 fa13 	bl	8012ab8 <__kernel_sin>
 8012692:	ec51 0b10 	vmov	r0, r1, d0
 8012696:	e7e6      	b.n	8012666 <sin+0x2e>
 8012698:	ed9d 1b02 	vldr	d1, [sp, #8]
 801269c:	ed9d 0b00 	vldr	d0, [sp]
 80126a0:	f000 f942 	bl	8012928 <__kernel_cos>
 80126a4:	e7f5      	b.n	8012692 <sin+0x5a>
 80126a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80126aa:	ed9d 0b00 	vldr	d0, [sp]
 80126ae:	2001      	movs	r0, #1
 80126b0:	f000 fa02 	bl	8012ab8 <__kernel_sin>
 80126b4:	ec53 2b10 	vmov	r2, r3, d0
 80126b8:	4610      	mov	r0, r2
 80126ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80126be:	e7d2      	b.n	8012666 <sin+0x2e>
 80126c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80126c4:	ed9d 0b00 	vldr	d0, [sp]
 80126c8:	f000 f92e 	bl	8012928 <__kernel_cos>
 80126cc:	e7f2      	b.n	80126b4 <sin+0x7c>
 80126ce:	bf00      	nop
	...
 80126d8:	3fe921fb 	.word	0x3fe921fb
 80126dc:	7fefffff 	.word	0x7fefffff

080126e0 <fmodf>:
 80126e0:	b508      	push	{r3, lr}
 80126e2:	ed2d 8b02 	vpush	{d8}
 80126e6:	eef0 8a40 	vmov.f32	s17, s0
 80126ea:	eeb0 8a60 	vmov.f32	s16, s1
 80126ee:	f000 fd43 	bl	8013178 <__ieee754_fmodf>
 80126f2:	eef4 8a48 	vcmp.f32	s17, s16
 80126f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126fa:	d60c      	bvs.n	8012716 <fmodf+0x36>
 80126fc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801271c <fmodf+0x3c>
 8012700:	eeb4 8a68 	vcmp.f32	s16, s17
 8012704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012708:	d105      	bne.n	8012716 <fmodf+0x36>
 801270a:	f7ff ff05 	bl	8012518 <__errno>
 801270e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012712:	2321      	movs	r3, #33	@ 0x21
 8012714:	6003      	str	r3, [r0, #0]
 8012716:	ecbd 8b02 	vpop	{d8}
 801271a:	bd08      	pop	{r3, pc}
 801271c:	00000000 	.word	0x00000000

08012720 <sqrtf>:
 8012720:	b508      	push	{r3, lr}
 8012722:	ed2d 8b02 	vpush	{d8}
 8012726:	eeb0 8a40 	vmov.f32	s16, s0
 801272a:	f000 f8f7 	bl	801291c <__ieee754_sqrtf>
 801272e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012736:	d60c      	bvs.n	8012752 <sqrtf+0x32>
 8012738:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012758 <sqrtf+0x38>
 801273c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012744:	d505      	bpl.n	8012752 <sqrtf+0x32>
 8012746:	f7ff fee7 	bl	8012518 <__errno>
 801274a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801274e:	2321      	movs	r3, #33	@ 0x21
 8012750:	6003      	str	r3, [r0, #0]
 8012752:	ecbd 8b02 	vpop	{d8}
 8012756:	bd08      	pop	{r3, pc}
 8012758:	00000000 	.word	0x00000000

0801275c <cosf>:
 801275c:	ee10 3a10 	vmov	r3, s0
 8012760:	b507      	push	{r0, r1, r2, lr}
 8012762:	4a1e      	ldr	r2, [pc, #120]	@ (80127dc <cosf+0x80>)
 8012764:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012768:	4293      	cmp	r3, r2
 801276a:	d806      	bhi.n	801277a <cosf+0x1e>
 801276c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80127e0 <cosf+0x84>
 8012770:	b003      	add	sp, #12
 8012772:	f85d eb04 	ldr.w	lr, [sp], #4
 8012776:	f000 bc5f 	b.w	8013038 <__kernel_cosf>
 801277a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801277e:	d304      	bcc.n	801278a <cosf+0x2e>
 8012780:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012784:	b003      	add	sp, #12
 8012786:	f85d fb04 	ldr.w	pc, [sp], #4
 801278a:	4668      	mov	r0, sp
 801278c:	f000 fd76 	bl	801327c <__ieee754_rem_pio2f>
 8012790:	f000 0003 	and.w	r0, r0, #3
 8012794:	2801      	cmp	r0, #1
 8012796:	d009      	beq.n	80127ac <cosf+0x50>
 8012798:	2802      	cmp	r0, #2
 801279a:	d010      	beq.n	80127be <cosf+0x62>
 801279c:	b9b0      	cbnz	r0, 80127cc <cosf+0x70>
 801279e:	eddd 0a01 	vldr	s1, [sp, #4]
 80127a2:	ed9d 0a00 	vldr	s0, [sp]
 80127a6:	f000 fc47 	bl	8013038 <__kernel_cosf>
 80127aa:	e7eb      	b.n	8012784 <cosf+0x28>
 80127ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80127b0:	ed9d 0a00 	vldr	s0, [sp]
 80127b4:	f000 fc98 	bl	80130e8 <__kernel_sinf>
 80127b8:	eeb1 0a40 	vneg.f32	s0, s0
 80127bc:	e7e2      	b.n	8012784 <cosf+0x28>
 80127be:	eddd 0a01 	vldr	s1, [sp, #4]
 80127c2:	ed9d 0a00 	vldr	s0, [sp]
 80127c6:	f000 fc37 	bl	8013038 <__kernel_cosf>
 80127ca:	e7f5      	b.n	80127b8 <cosf+0x5c>
 80127cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80127d0:	ed9d 0a00 	vldr	s0, [sp]
 80127d4:	2001      	movs	r0, #1
 80127d6:	f000 fc87 	bl	80130e8 <__kernel_sinf>
 80127da:	e7d3      	b.n	8012784 <cosf+0x28>
 80127dc:	3f490fd8 	.word	0x3f490fd8
 80127e0:	00000000 	.word	0x00000000

080127e4 <sinf>:
 80127e4:	ee10 3a10 	vmov	r3, s0
 80127e8:	b507      	push	{r0, r1, r2, lr}
 80127ea:	4a1f      	ldr	r2, [pc, #124]	@ (8012868 <sinf+0x84>)
 80127ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80127f0:	4293      	cmp	r3, r2
 80127f2:	d807      	bhi.n	8012804 <sinf+0x20>
 80127f4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801286c <sinf+0x88>
 80127f8:	2000      	movs	r0, #0
 80127fa:	b003      	add	sp, #12
 80127fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8012800:	f000 bc72 	b.w	80130e8 <__kernel_sinf>
 8012804:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012808:	d304      	bcc.n	8012814 <sinf+0x30>
 801280a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801280e:	b003      	add	sp, #12
 8012810:	f85d fb04 	ldr.w	pc, [sp], #4
 8012814:	4668      	mov	r0, sp
 8012816:	f000 fd31 	bl	801327c <__ieee754_rem_pio2f>
 801281a:	f000 0003 	and.w	r0, r0, #3
 801281e:	2801      	cmp	r0, #1
 8012820:	d00a      	beq.n	8012838 <sinf+0x54>
 8012822:	2802      	cmp	r0, #2
 8012824:	d00f      	beq.n	8012846 <sinf+0x62>
 8012826:	b9c0      	cbnz	r0, 801285a <sinf+0x76>
 8012828:	eddd 0a01 	vldr	s1, [sp, #4]
 801282c:	ed9d 0a00 	vldr	s0, [sp]
 8012830:	2001      	movs	r0, #1
 8012832:	f000 fc59 	bl	80130e8 <__kernel_sinf>
 8012836:	e7ea      	b.n	801280e <sinf+0x2a>
 8012838:	eddd 0a01 	vldr	s1, [sp, #4]
 801283c:	ed9d 0a00 	vldr	s0, [sp]
 8012840:	f000 fbfa 	bl	8013038 <__kernel_cosf>
 8012844:	e7e3      	b.n	801280e <sinf+0x2a>
 8012846:	eddd 0a01 	vldr	s1, [sp, #4]
 801284a:	ed9d 0a00 	vldr	s0, [sp]
 801284e:	2001      	movs	r0, #1
 8012850:	f000 fc4a 	bl	80130e8 <__kernel_sinf>
 8012854:	eeb1 0a40 	vneg.f32	s0, s0
 8012858:	e7d9      	b.n	801280e <sinf+0x2a>
 801285a:	eddd 0a01 	vldr	s1, [sp, #4]
 801285e:	ed9d 0a00 	vldr	s0, [sp]
 8012862:	f000 fbe9 	bl	8013038 <__kernel_cosf>
 8012866:	e7f5      	b.n	8012854 <sinf+0x70>
 8012868:	3f490fd8 	.word	0x3f490fd8
 801286c:	00000000 	.word	0x00000000

08012870 <fmaxf>:
 8012870:	b508      	push	{r3, lr}
 8012872:	ed2d 8b02 	vpush	{d8}
 8012876:	eeb0 8a40 	vmov.f32	s16, s0
 801287a:	eef0 8a60 	vmov.f32	s17, s1
 801287e:	f000 f831 	bl	80128e4 <__fpclassifyf>
 8012882:	b930      	cbnz	r0, 8012892 <fmaxf+0x22>
 8012884:	eeb0 8a68 	vmov.f32	s16, s17
 8012888:	eeb0 0a48 	vmov.f32	s0, s16
 801288c:	ecbd 8b02 	vpop	{d8}
 8012890:	bd08      	pop	{r3, pc}
 8012892:	eeb0 0a68 	vmov.f32	s0, s17
 8012896:	f000 f825 	bl	80128e4 <__fpclassifyf>
 801289a:	2800      	cmp	r0, #0
 801289c:	d0f4      	beq.n	8012888 <fmaxf+0x18>
 801289e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80128a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a6:	dded      	ble.n	8012884 <fmaxf+0x14>
 80128a8:	e7ee      	b.n	8012888 <fmaxf+0x18>

080128aa <fminf>:
 80128aa:	b508      	push	{r3, lr}
 80128ac:	ed2d 8b02 	vpush	{d8}
 80128b0:	eeb0 8a40 	vmov.f32	s16, s0
 80128b4:	eef0 8a60 	vmov.f32	s17, s1
 80128b8:	f000 f814 	bl	80128e4 <__fpclassifyf>
 80128bc:	b930      	cbnz	r0, 80128cc <fminf+0x22>
 80128be:	eeb0 8a68 	vmov.f32	s16, s17
 80128c2:	eeb0 0a48 	vmov.f32	s0, s16
 80128c6:	ecbd 8b02 	vpop	{d8}
 80128ca:	bd08      	pop	{r3, pc}
 80128cc:	eeb0 0a68 	vmov.f32	s0, s17
 80128d0:	f000 f808 	bl	80128e4 <__fpclassifyf>
 80128d4:	2800      	cmp	r0, #0
 80128d6:	d0f4      	beq.n	80128c2 <fminf+0x18>
 80128d8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80128dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128e0:	d5ed      	bpl.n	80128be <fminf+0x14>
 80128e2:	e7ee      	b.n	80128c2 <fminf+0x18>

080128e4 <__fpclassifyf>:
 80128e4:	ee10 3a10 	vmov	r3, s0
 80128e8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80128ec:	d00d      	beq.n	801290a <__fpclassifyf+0x26>
 80128ee:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80128f2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80128f6:	d30a      	bcc.n	801290e <__fpclassifyf+0x2a>
 80128f8:	4b07      	ldr	r3, [pc, #28]	@ (8012918 <__fpclassifyf+0x34>)
 80128fa:	1e42      	subs	r2, r0, #1
 80128fc:	429a      	cmp	r2, r3
 80128fe:	d908      	bls.n	8012912 <__fpclassifyf+0x2e>
 8012900:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8012904:	4258      	negs	r0, r3
 8012906:	4158      	adcs	r0, r3
 8012908:	4770      	bx	lr
 801290a:	2002      	movs	r0, #2
 801290c:	4770      	bx	lr
 801290e:	2004      	movs	r0, #4
 8012910:	4770      	bx	lr
 8012912:	2003      	movs	r0, #3
 8012914:	4770      	bx	lr
 8012916:	bf00      	nop
 8012918:	007ffffe 	.word	0x007ffffe

0801291c <__ieee754_sqrtf>:
 801291c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012920:	4770      	bx	lr
 8012922:	0000      	movs	r0, r0
 8012924:	0000      	movs	r0, r0
	...

08012928 <__kernel_cos>:
 8012928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801292c:	ec57 6b10 	vmov	r6, r7, d0
 8012930:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012934:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8012938:	ed8d 1b00 	vstr	d1, [sp]
 801293c:	d206      	bcs.n	801294c <__kernel_cos+0x24>
 801293e:	4630      	mov	r0, r6
 8012940:	4639      	mov	r1, r7
 8012942:	f7ee f8bf 	bl	8000ac4 <__aeabi_d2iz>
 8012946:	2800      	cmp	r0, #0
 8012948:	f000 8088 	beq.w	8012a5c <__kernel_cos+0x134>
 801294c:	4632      	mov	r2, r6
 801294e:	463b      	mov	r3, r7
 8012950:	4630      	mov	r0, r6
 8012952:	4639      	mov	r1, r7
 8012954:	f7ed fe1c 	bl	8000590 <__aeabi_dmul>
 8012958:	4b51      	ldr	r3, [pc, #324]	@ (8012aa0 <__kernel_cos+0x178>)
 801295a:	2200      	movs	r2, #0
 801295c:	4604      	mov	r4, r0
 801295e:	460d      	mov	r5, r1
 8012960:	f7ed fe16 	bl	8000590 <__aeabi_dmul>
 8012964:	a340      	add	r3, pc, #256	@ (adr r3, 8012a68 <__kernel_cos+0x140>)
 8012966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801296a:	4682      	mov	sl, r0
 801296c:	468b      	mov	fp, r1
 801296e:	4620      	mov	r0, r4
 8012970:	4629      	mov	r1, r5
 8012972:	f7ed fe0d 	bl	8000590 <__aeabi_dmul>
 8012976:	a33e      	add	r3, pc, #248	@ (adr r3, 8012a70 <__kernel_cos+0x148>)
 8012978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801297c:	f7ed fc52 	bl	8000224 <__adddf3>
 8012980:	4622      	mov	r2, r4
 8012982:	462b      	mov	r3, r5
 8012984:	f7ed fe04 	bl	8000590 <__aeabi_dmul>
 8012988:	a33b      	add	r3, pc, #236	@ (adr r3, 8012a78 <__kernel_cos+0x150>)
 801298a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801298e:	f7ed fc47 	bl	8000220 <__aeabi_dsub>
 8012992:	4622      	mov	r2, r4
 8012994:	462b      	mov	r3, r5
 8012996:	f7ed fdfb 	bl	8000590 <__aeabi_dmul>
 801299a:	a339      	add	r3, pc, #228	@ (adr r3, 8012a80 <__kernel_cos+0x158>)
 801299c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a0:	f7ed fc40 	bl	8000224 <__adddf3>
 80129a4:	4622      	mov	r2, r4
 80129a6:	462b      	mov	r3, r5
 80129a8:	f7ed fdf2 	bl	8000590 <__aeabi_dmul>
 80129ac:	a336      	add	r3, pc, #216	@ (adr r3, 8012a88 <__kernel_cos+0x160>)
 80129ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129b2:	f7ed fc35 	bl	8000220 <__aeabi_dsub>
 80129b6:	4622      	mov	r2, r4
 80129b8:	462b      	mov	r3, r5
 80129ba:	f7ed fde9 	bl	8000590 <__aeabi_dmul>
 80129be:	a334      	add	r3, pc, #208	@ (adr r3, 8012a90 <__kernel_cos+0x168>)
 80129c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129c4:	f7ed fc2e 	bl	8000224 <__adddf3>
 80129c8:	4622      	mov	r2, r4
 80129ca:	462b      	mov	r3, r5
 80129cc:	f7ed fde0 	bl	8000590 <__aeabi_dmul>
 80129d0:	4622      	mov	r2, r4
 80129d2:	462b      	mov	r3, r5
 80129d4:	f7ed fddc 	bl	8000590 <__aeabi_dmul>
 80129d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129dc:	4604      	mov	r4, r0
 80129de:	460d      	mov	r5, r1
 80129e0:	4630      	mov	r0, r6
 80129e2:	4639      	mov	r1, r7
 80129e4:	f7ed fdd4 	bl	8000590 <__aeabi_dmul>
 80129e8:	460b      	mov	r3, r1
 80129ea:	4602      	mov	r2, r0
 80129ec:	4629      	mov	r1, r5
 80129ee:	4620      	mov	r0, r4
 80129f0:	f7ed fc16 	bl	8000220 <__aeabi_dsub>
 80129f4:	4b2b      	ldr	r3, [pc, #172]	@ (8012aa4 <__kernel_cos+0x17c>)
 80129f6:	4598      	cmp	r8, r3
 80129f8:	4606      	mov	r6, r0
 80129fa:	460f      	mov	r7, r1
 80129fc:	d810      	bhi.n	8012a20 <__kernel_cos+0xf8>
 80129fe:	4602      	mov	r2, r0
 8012a00:	460b      	mov	r3, r1
 8012a02:	4650      	mov	r0, sl
 8012a04:	4659      	mov	r1, fp
 8012a06:	f7ed fc0b 	bl	8000220 <__aeabi_dsub>
 8012a0a:	460b      	mov	r3, r1
 8012a0c:	4926      	ldr	r1, [pc, #152]	@ (8012aa8 <__kernel_cos+0x180>)
 8012a0e:	4602      	mov	r2, r0
 8012a10:	2000      	movs	r0, #0
 8012a12:	f7ed fc05 	bl	8000220 <__aeabi_dsub>
 8012a16:	ec41 0b10 	vmov	d0, r0, r1
 8012a1a:	b003      	add	sp, #12
 8012a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a20:	4b22      	ldr	r3, [pc, #136]	@ (8012aac <__kernel_cos+0x184>)
 8012a22:	4921      	ldr	r1, [pc, #132]	@ (8012aa8 <__kernel_cos+0x180>)
 8012a24:	4598      	cmp	r8, r3
 8012a26:	bf8c      	ite	hi
 8012a28:	4d21      	ldrhi	r5, [pc, #132]	@ (8012ab0 <__kernel_cos+0x188>)
 8012a2a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8012a2e:	2400      	movs	r4, #0
 8012a30:	4622      	mov	r2, r4
 8012a32:	462b      	mov	r3, r5
 8012a34:	2000      	movs	r0, #0
 8012a36:	f7ed fbf3 	bl	8000220 <__aeabi_dsub>
 8012a3a:	4622      	mov	r2, r4
 8012a3c:	4680      	mov	r8, r0
 8012a3e:	4689      	mov	r9, r1
 8012a40:	462b      	mov	r3, r5
 8012a42:	4650      	mov	r0, sl
 8012a44:	4659      	mov	r1, fp
 8012a46:	f7ed fbeb 	bl	8000220 <__aeabi_dsub>
 8012a4a:	4632      	mov	r2, r6
 8012a4c:	463b      	mov	r3, r7
 8012a4e:	f7ed fbe7 	bl	8000220 <__aeabi_dsub>
 8012a52:	4602      	mov	r2, r0
 8012a54:	460b      	mov	r3, r1
 8012a56:	4640      	mov	r0, r8
 8012a58:	4649      	mov	r1, r9
 8012a5a:	e7da      	b.n	8012a12 <__kernel_cos+0xea>
 8012a5c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8012a98 <__kernel_cos+0x170>
 8012a60:	e7db      	b.n	8012a1a <__kernel_cos+0xf2>
 8012a62:	bf00      	nop
 8012a64:	f3af 8000 	nop.w
 8012a68:	be8838d4 	.word	0xbe8838d4
 8012a6c:	bda8fae9 	.word	0xbda8fae9
 8012a70:	bdb4b1c4 	.word	0xbdb4b1c4
 8012a74:	3e21ee9e 	.word	0x3e21ee9e
 8012a78:	809c52ad 	.word	0x809c52ad
 8012a7c:	3e927e4f 	.word	0x3e927e4f
 8012a80:	19cb1590 	.word	0x19cb1590
 8012a84:	3efa01a0 	.word	0x3efa01a0
 8012a88:	16c15177 	.word	0x16c15177
 8012a8c:	3f56c16c 	.word	0x3f56c16c
 8012a90:	5555554c 	.word	0x5555554c
 8012a94:	3fa55555 	.word	0x3fa55555
 8012a98:	00000000 	.word	0x00000000
 8012a9c:	3ff00000 	.word	0x3ff00000
 8012aa0:	3fe00000 	.word	0x3fe00000
 8012aa4:	3fd33332 	.word	0x3fd33332
 8012aa8:	3ff00000 	.word	0x3ff00000
 8012aac:	3fe90000 	.word	0x3fe90000
 8012ab0:	3fd20000 	.word	0x3fd20000
 8012ab4:	00000000 	.word	0x00000000

08012ab8 <__kernel_sin>:
 8012ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012abc:	ec55 4b10 	vmov	r4, r5, d0
 8012ac0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012ac4:	b085      	sub	sp, #20
 8012ac6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8012aca:	ed8d 1b02 	vstr	d1, [sp, #8]
 8012ace:	4680      	mov	r8, r0
 8012ad0:	d205      	bcs.n	8012ade <__kernel_sin+0x26>
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	4629      	mov	r1, r5
 8012ad6:	f7ed fff5 	bl	8000ac4 <__aeabi_d2iz>
 8012ada:	2800      	cmp	r0, #0
 8012adc:	d052      	beq.n	8012b84 <__kernel_sin+0xcc>
 8012ade:	4622      	mov	r2, r4
 8012ae0:	462b      	mov	r3, r5
 8012ae2:	4620      	mov	r0, r4
 8012ae4:	4629      	mov	r1, r5
 8012ae6:	f7ed fd53 	bl	8000590 <__aeabi_dmul>
 8012aea:	4682      	mov	sl, r0
 8012aec:	468b      	mov	fp, r1
 8012aee:	4602      	mov	r2, r0
 8012af0:	460b      	mov	r3, r1
 8012af2:	4620      	mov	r0, r4
 8012af4:	4629      	mov	r1, r5
 8012af6:	f7ed fd4b 	bl	8000590 <__aeabi_dmul>
 8012afa:	a342      	add	r3, pc, #264	@ (adr r3, 8012c04 <__kernel_sin+0x14c>)
 8012afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b00:	e9cd 0100 	strd	r0, r1, [sp]
 8012b04:	4650      	mov	r0, sl
 8012b06:	4659      	mov	r1, fp
 8012b08:	f7ed fd42 	bl	8000590 <__aeabi_dmul>
 8012b0c:	a33f      	add	r3, pc, #252	@ (adr r3, 8012c0c <__kernel_sin+0x154>)
 8012b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b12:	f7ed fb85 	bl	8000220 <__aeabi_dsub>
 8012b16:	4652      	mov	r2, sl
 8012b18:	465b      	mov	r3, fp
 8012b1a:	f7ed fd39 	bl	8000590 <__aeabi_dmul>
 8012b1e:	a33d      	add	r3, pc, #244	@ (adr r3, 8012c14 <__kernel_sin+0x15c>)
 8012b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b24:	f7ed fb7e 	bl	8000224 <__adddf3>
 8012b28:	4652      	mov	r2, sl
 8012b2a:	465b      	mov	r3, fp
 8012b2c:	f7ed fd30 	bl	8000590 <__aeabi_dmul>
 8012b30:	a33a      	add	r3, pc, #232	@ (adr r3, 8012c1c <__kernel_sin+0x164>)
 8012b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b36:	f7ed fb73 	bl	8000220 <__aeabi_dsub>
 8012b3a:	4652      	mov	r2, sl
 8012b3c:	465b      	mov	r3, fp
 8012b3e:	f7ed fd27 	bl	8000590 <__aeabi_dmul>
 8012b42:	a338      	add	r3, pc, #224	@ (adr r3, 8012c24 <__kernel_sin+0x16c>)
 8012b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b48:	f7ed fb6c 	bl	8000224 <__adddf3>
 8012b4c:	4606      	mov	r6, r0
 8012b4e:	460f      	mov	r7, r1
 8012b50:	f1b8 0f00 	cmp.w	r8, #0
 8012b54:	d11b      	bne.n	8012b8e <__kernel_sin+0xd6>
 8012b56:	4602      	mov	r2, r0
 8012b58:	460b      	mov	r3, r1
 8012b5a:	4650      	mov	r0, sl
 8012b5c:	4659      	mov	r1, fp
 8012b5e:	f7ed fd17 	bl	8000590 <__aeabi_dmul>
 8012b62:	a325      	add	r3, pc, #148	@ (adr r3, 8012bf8 <__kernel_sin+0x140>)
 8012b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b68:	f7ed fb5a 	bl	8000220 <__aeabi_dsub>
 8012b6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012b70:	f7ed fd0e 	bl	8000590 <__aeabi_dmul>
 8012b74:	4602      	mov	r2, r0
 8012b76:	460b      	mov	r3, r1
 8012b78:	4620      	mov	r0, r4
 8012b7a:	4629      	mov	r1, r5
 8012b7c:	f7ed fb52 	bl	8000224 <__adddf3>
 8012b80:	4604      	mov	r4, r0
 8012b82:	460d      	mov	r5, r1
 8012b84:	ec45 4b10 	vmov	d0, r4, r5
 8012b88:	b005      	add	sp, #20
 8012b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b92:	4b1b      	ldr	r3, [pc, #108]	@ (8012c00 <__kernel_sin+0x148>)
 8012b94:	2200      	movs	r2, #0
 8012b96:	f7ed fcfb 	bl	8000590 <__aeabi_dmul>
 8012b9a:	4632      	mov	r2, r6
 8012b9c:	4680      	mov	r8, r0
 8012b9e:	4689      	mov	r9, r1
 8012ba0:	463b      	mov	r3, r7
 8012ba2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ba6:	f7ed fcf3 	bl	8000590 <__aeabi_dmul>
 8012baa:	4602      	mov	r2, r0
 8012bac:	460b      	mov	r3, r1
 8012bae:	4640      	mov	r0, r8
 8012bb0:	4649      	mov	r1, r9
 8012bb2:	f7ed fb35 	bl	8000220 <__aeabi_dsub>
 8012bb6:	4652      	mov	r2, sl
 8012bb8:	465b      	mov	r3, fp
 8012bba:	f7ed fce9 	bl	8000590 <__aeabi_dmul>
 8012bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012bc2:	f7ed fb2d 	bl	8000220 <__aeabi_dsub>
 8012bc6:	a30c      	add	r3, pc, #48	@ (adr r3, 8012bf8 <__kernel_sin+0x140>)
 8012bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bcc:	4606      	mov	r6, r0
 8012bce:	460f      	mov	r7, r1
 8012bd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012bd4:	f7ed fcdc 	bl	8000590 <__aeabi_dmul>
 8012bd8:	4602      	mov	r2, r0
 8012bda:	460b      	mov	r3, r1
 8012bdc:	4630      	mov	r0, r6
 8012bde:	4639      	mov	r1, r7
 8012be0:	f7ed fb20 	bl	8000224 <__adddf3>
 8012be4:	4602      	mov	r2, r0
 8012be6:	460b      	mov	r3, r1
 8012be8:	4620      	mov	r0, r4
 8012bea:	4629      	mov	r1, r5
 8012bec:	f7ed fb18 	bl	8000220 <__aeabi_dsub>
 8012bf0:	e7c6      	b.n	8012b80 <__kernel_sin+0xc8>
 8012bf2:	bf00      	nop
 8012bf4:	f3af 8000 	nop.w
 8012bf8:	55555549 	.word	0x55555549
 8012bfc:	3fc55555 	.word	0x3fc55555
 8012c00:	3fe00000 	.word	0x3fe00000
 8012c04:	5acfd57c 	.word	0x5acfd57c
 8012c08:	3de5d93a 	.word	0x3de5d93a
 8012c0c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012c10:	3e5ae5e6 	.word	0x3e5ae5e6
 8012c14:	57b1fe7d 	.word	0x57b1fe7d
 8012c18:	3ec71de3 	.word	0x3ec71de3
 8012c1c:	19c161d5 	.word	0x19c161d5
 8012c20:	3f2a01a0 	.word	0x3f2a01a0
 8012c24:	1110f8a6 	.word	0x1110f8a6
 8012c28:	3f811111 	.word	0x3f811111
 8012c2c:	00000000 	.word	0x00000000

08012c30 <__ieee754_rem_pio2>:
 8012c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c34:	ec57 6b10 	vmov	r6, r7, d0
 8012c38:	4bc5      	ldr	r3, [pc, #788]	@ (8012f50 <__ieee754_rem_pio2+0x320>)
 8012c3a:	b08d      	sub	sp, #52	@ 0x34
 8012c3c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012c40:	4598      	cmp	r8, r3
 8012c42:	4604      	mov	r4, r0
 8012c44:	9704      	str	r7, [sp, #16]
 8012c46:	d807      	bhi.n	8012c58 <__ieee754_rem_pio2+0x28>
 8012c48:	2200      	movs	r2, #0
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	ed80 0b00 	vstr	d0, [r0]
 8012c50:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012c54:	2500      	movs	r5, #0
 8012c56:	e028      	b.n	8012caa <__ieee754_rem_pio2+0x7a>
 8012c58:	4bbe      	ldr	r3, [pc, #760]	@ (8012f54 <__ieee754_rem_pio2+0x324>)
 8012c5a:	4598      	cmp	r8, r3
 8012c5c:	d878      	bhi.n	8012d50 <__ieee754_rem_pio2+0x120>
 8012c5e:	9b04      	ldr	r3, [sp, #16]
 8012c60:	4dbd      	ldr	r5, [pc, #756]	@ (8012f58 <__ieee754_rem_pio2+0x328>)
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	4630      	mov	r0, r6
 8012c66:	a3ac      	add	r3, pc, #688	@ (adr r3, 8012f18 <__ieee754_rem_pio2+0x2e8>)
 8012c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c6c:	4639      	mov	r1, r7
 8012c6e:	dd38      	ble.n	8012ce2 <__ieee754_rem_pio2+0xb2>
 8012c70:	f7ed fad6 	bl	8000220 <__aeabi_dsub>
 8012c74:	45a8      	cmp	r8, r5
 8012c76:	4606      	mov	r6, r0
 8012c78:	460f      	mov	r7, r1
 8012c7a:	d01a      	beq.n	8012cb2 <__ieee754_rem_pio2+0x82>
 8012c7c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8012f20 <__ieee754_rem_pio2+0x2f0>)
 8012c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c82:	f7ed facd 	bl	8000220 <__aeabi_dsub>
 8012c86:	4602      	mov	r2, r0
 8012c88:	460b      	mov	r3, r1
 8012c8a:	4680      	mov	r8, r0
 8012c8c:	4689      	mov	r9, r1
 8012c8e:	4630      	mov	r0, r6
 8012c90:	4639      	mov	r1, r7
 8012c92:	f7ed fac5 	bl	8000220 <__aeabi_dsub>
 8012c96:	a3a2      	add	r3, pc, #648	@ (adr r3, 8012f20 <__ieee754_rem_pio2+0x2f0>)
 8012c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c9c:	f7ed fac0 	bl	8000220 <__aeabi_dsub>
 8012ca0:	e9c4 8900 	strd	r8, r9, [r4]
 8012ca4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012ca8:	2501      	movs	r5, #1
 8012caa:	4628      	mov	r0, r5
 8012cac:	b00d      	add	sp, #52	@ 0x34
 8012cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cb2:	a39d      	add	r3, pc, #628	@ (adr r3, 8012f28 <__ieee754_rem_pio2+0x2f8>)
 8012cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb8:	f7ed fab2 	bl	8000220 <__aeabi_dsub>
 8012cbc:	a39c      	add	r3, pc, #624	@ (adr r3, 8012f30 <__ieee754_rem_pio2+0x300>)
 8012cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc2:	4606      	mov	r6, r0
 8012cc4:	460f      	mov	r7, r1
 8012cc6:	f7ed faab 	bl	8000220 <__aeabi_dsub>
 8012cca:	4602      	mov	r2, r0
 8012ccc:	460b      	mov	r3, r1
 8012cce:	4680      	mov	r8, r0
 8012cd0:	4689      	mov	r9, r1
 8012cd2:	4630      	mov	r0, r6
 8012cd4:	4639      	mov	r1, r7
 8012cd6:	f7ed faa3 	bl	8000220 <__aeabi_dsub>
 8012cda:	a395      	add	r3, pc, #596	@ (adr r3, 8012f30 <__ieee754_rem_pio2+0x300>)
 8012cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ce0:	e7dc      	b.n	8012c9c <__ieee754_rem_pio2+0x6c>
 8012ce2:	f7ed fa9f 	bl	8000224 <__adddf3>
 8012ce6:	45a8      	cmp	r8, r5
 8012ce8:	4606      	mov	r6, r0
 8012cea:	460f      	mov	r7, r1
 8012cec:	d018      	beq.n	8012d20 <__ieee754_rem_pio2+0xf0>
 8012cee:	a38c      	add	r3, pc, #560	@ (adr r3, 8012f20 <__ieee754_rem_pio2+0x2f0>)
 8012cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cf4:	f7ed fa96 	bl	8000224 <__adddf3>
 8012cf8:	4602      	mov	r2, r0
 8012cfa:	460b      	mov	r3, r1
 8012cfc:	4680      	mov	r8, r0
 8012cfe:	4689      	mov	r9, r1
 8012d00:	4630      	mov	r0, r6
 8012d02:	4639      	mov	r1, r7
 8012d04:	f7ed fa8c 	bl	8000220 <__aeabi_dsub>
 8012d08:	a385      	add	r3, pc, #532	@ (adr r3, 8012f20 <__ieee754_rem_pio2+0x2f0>)
 8012d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d0e:	f7ed fa89 	bl	8000224 <__adddf3>
 8012d12:	f04f 35ff 	mov.w	r5, #4294967295
 8012d16:	e9c4 8900 	strd	r8, r9, [r4]
 8012d1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012d1e:	e7c4      	b.n	8012caa <__ieee754_rem_pio2+0x7a>
 8012d20:	a381      	add	r3, pc, #516	@ (adr r3, 8012f28 <__ieee754_rem_pio2+0x2f8>)
 8012d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d26:	f7ed fa7d 	bl	8000224 <__adddf3>
 8012d2a:	a381      	add	r3, pc, #516	@ (adr r3, 8012f30 <__ieee754_rem_pio2+0x300>)
 8012d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d30:	4606      	mov	r6, r0
 8012d32:	460f      	mov	r7, r1
 8012d34:	f7ed fa76 	bl	8000224 <__adddf3>
 8012d38:	4602      	mov	r2, r0
 8012d3a:	460b      	mov	r3, r1
 8012d3c:	4680      	mov	r8, r0
 8012d3e:	4689      	mov	r9, r1
 8012d40:	4630      	mov	r0, r6
 8012d42:	4639      	mov	r1, r7
 8012d44:	f7ed fa6c 	bl	8000220 <__aeabi_dsub>
 8012d48:	a379      	add	r3, pc, #484	@ (adr r3, 8012f30 <__ieee754_rem_pio2+0x300>)
 8012d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d4e:	e7de      	b.n	8012d0e <__ieee754_rem_pio2+0xde>
 8012d50:	4b82      	ldr	r3, [pc, #520]	@ (8012f5c <__ieee754_rem_pio2+0x32c>)
 8012d52:	4598      	cmp	r8, r3
 8012d54:	f200 80d1 	bhi.w	8012efa <__ieee754_rem_pio2+0x2ca>
 8012d58:	f000 f966 	bl	8013028 <fabs>
 8012d5c:	ec57 6b10 	vmov	r6, r7, d0
 8012d60:	a375      	add	r3, pc, #468	@ (adr r3, 8012f38 <__ieee754_rem_pio2+0x308>)
 8012d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d66:	4630      	mov	r0, r6
 8012d68:	4639      	mov	r1, r7
 8012d6a:	f7ed fc11 	bl	8000590 <__aeabi_dmul>
 8012d6e:	4b7c      	ldr	r3, [pc, #496]	@ (8012f60 <__ieee754_rem_pio2+0x330>)
 8012d70:	2200      	movs	r2, #0
 8012d72:	f7ed fa57 	bl	8000224 <__adddf3>
 8012d76:	f7ed fea5 	bl	8000ac4 <__aeabi_d2iz>
 8012d7a:	4605      	mov	r5, r0
 8012d7c:	f7ed fb9e 	bl	80004bc <__aeabi_i2d>
 8012d80:	4602      	mov	r2, r0
 8012d82:	460b      	mov	r3, r1
 8012d84:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012d88:	a363      	add	r3, pc, #396	@ (adr r3, 8012f18 <__ieee754_rem_pio2+0x2e8>)
 8012d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d8e:	f7ed fbff 	bl	8000590 <__aeabi_dmul>
 8012d92:	4602      	mov	r2, r0
 8012d94:	460b      	mov	r3, r1
 8012d96:	4630      	mov	r0, r6
 8012d98:	4639      	mov	r1, r7
 8012d9a:	f7ed fa41 	bl	8000220 <__aeabi_dsub>
 8012d9e:	a360      	add	r3, pc, #384	@ (adr r3, 8012f20 <__ieee754_rem_pio2+0x2f0>)
 8012da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da4:	4682      	mov	sl, r0
 8012da6:	468b      	mov	fp, r1
 8012da8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012dac:	f7ed fbf0 	bl	8000590 <__aeabi_dmul>
 8012db0:	2d1f      	cmp	r5, #31
 8012db2:	4606      	mov	r6, r0
 8012db4:	460f      	mov	r7, r1
 8012db6:	dc0c      	bgt.n	8012dd2 <__ieee754_rem_pio2+0x1a2>
 8012db8:	4b6a      	ldr	r3, [pc, #424]	@ (8012f64 <__ieee754_rem_pio2+0x334>)
 8012dba:	1e6a      	subs	r2, r5, #1
 8012dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dc0:	4543      	cmp	r3, r8
 8012dc2:	d006      	beq.n	8012dd2 <__ieee754_rem_pio2+0x1a2>
 8012dc4:	4632      	mov	r2, r6
 8012dc6:	463b      	mov	r3, r7
 8012dc8:	4650      	mov	r0, sl
 8012dca:	4659      	mov	r1, fp
 8012dcc:	f7ed fa28 	bl	8000220 <__aeabi_dsub>
 8012dd0:	e00e      	b.n	8012df0 <__ieee754_rem_pio2+0x1c0>
 8012dd2:	463b      	mov	r3, r7
 8012dd4:	4632      	mov	r2, r6
 8012dd6:	4650      	mov	r0, sl
 8012dd8:	4659      	mov	r1, fp
 8012dda:	f7ed fa21 	bl	8000220 <__aeabi_dsub>
 8012dde:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012de2:	9305      	str	r3, [sp, #20]
 8012de4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012de8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8012dec:	2b10      	cmp	r3, #16
 8012dee:	dc02      	bgt.n	8012df6 <__ieee754_rem_pio2+0x1c6>
 8012df0:	e9c4 0100 	strd	r0, r1, [r4]
 8012df4:	e039      	b.n	8012e6a <__ieee754_rem_pio2+0x23a>
 8012df6:	a34c      	add	r3, pc, #304	@ (adr r3, 8012f28 <__ieee754_rem_pio2+0x2f8>)
 8012df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e00:	f7ed fbc6 	bl	8000590 <__aeabi_dmul>
 8012e04:	4606      	mov	r6, r0
 8012e06:	460f      	mov	r7, r1
 8012e08:	4602      	mov	r2, r0
 8012e0a:	460b      	mov	r3, r1
 8012e0c:	4650      	mov	r0, sl
 8012e0e:	4659      	mov	r1, fp
 8012e10:	f7ed fa06 	bl	8000220 <__aeabi_dsub>
 8012e14:	4602      	mov	r2, r0
 8012e16:	460b      	mov	r3, r1
 8012e18:	4680      	mov	r8, r0
 8012e1a:	4689      	mov	r9, r1
 8012e1c:	4650      	mov	r0, sl
 8012e1e:	4659      	mov	r1, fp
 8012e20:	f7ed f9fe 	bl	8000220 <__aeabi_dsub>
 8012e24:	4632      	mov	r2, r6
 8012e26:	463b      	mov	r3, r7
 8012e28:	f7ed f9fa 	bl	8000220 <__aeabi_dsub>
 8012e2c:	a340      	add	r3, pc, #256	@ (adr r3, 8012f30 <__ieee754_rem_pio2+0x300>)
 8012e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e32:	4606      	mov	r6, r0
 8012e34:	460f      	mov	r7, r1
 8012e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e3a:	f7ed fba9 	bl	8000590 <__aeabi_dmul>
 8012e3e:	4632      	mov	r2, r6
 8012e40:	463b      	mov	r3, r7
 8012e42:	f7ed f9ed 	bl	8000220 <__aeabi_dsub>
 8012e46:	4602      	mov	r2, r0
 8012e48:	460b      	mov	r3, r1
 8012e4a:	4606      	mov	r6, r0
 8012e4c:	460f      	mov	r7, r1
 8012e4e:	4640      	mov	r0, r8
 8012e50:	4649      	mov	r1, r9
 8012e52:	f7ed f9e5 	bl	8000220 <__aeabi_dsub>
 8012e56:	9a05      	ldr	r2, [sp, #20]
 8012e58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012e5c:	1ad3      	subs	r3, r2, r3
 8012e5e:	2b31      	cmp	r3, #49	@ 0x31
 8012e60:	dc20      	bgt.n	8012ea4 <__ieee754_rem_pio2+0x274>
 8012e62:	e9c4 0100 	strd	r0, r1, [r4]
 8012e66:	46c2      	mov	sl, r8
 8012e68:	46cb      	mov	fp, r9
 8012e6a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012e6e:	4650      	mov	r0, sl
 8012e70:	4642      	mov	r2, r8
 8012e72:	464b      	mov	r3, r9
 8012e74:	4659      	mov	r1, fp
 8012e76:	f7ed f9d3 	bl	8000220 <__aeabi_dsub>
 8012e7a:	463b      	mov	r3, r7
 8012e7c:	4632      	mov	r2, r6
 8012e7e:	f7ed f9cf 	bl	8000220 <__aeabi_dsub>
 8012e82:	9b04      	ldr	r3, [sp, #16]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012e8a:	f6bf af0e 	bge.w	8012caa <__ieee754_rem_pio2+0x7a>
 8012e8e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8012e92:	6063      	str	r3, [r4, #4]
 8012e94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012e98:	f8c4 8000 	str.w	r8, [r4]
 8012e9c:	60a0      	str	r0, [r4, #8]
 8012e9e:	60e3      	str	r3, [r4, #12]
 8012ea0:	426d      	negs	r5, r5
 8012ea2:	e702      	b.n	8012caa <__ieee754_rem_pio2+0x7a>
 8012ea4:	a326      	add	r3, pc, #152	@ (adr r3, 8012f40 <__ieee754_rem_pio2+0x310>)
 8012ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012eae:	f7ed fb6f 	bl	8000590 <__aeabi_dmul>
 8012eb2:	4606      	mov	r6, r0
 8012eb4:	460f      	mov	r7, r1
 8012eb6:	4602      	mov	r2, r0
 8012eb8:	460b      	mov	r3, r1
 8012eba:	4640      	mov	r0, r8
 8012ebc:	4649      	mov	r1, r9
 8012ebe:	f7ed f9af 	bl	8000220 <__aeabi_dsub>
 8012ec2:	4602      	mov	r2, r0
 8012ec4:	460b      	mov	r3, r1
 8012ec6:	4682      	mov	sl, r0
 8012ec8:	468b      	mov	fp, r1
 8012eca:	4640      	mov	r0, r8
 8012ecc:	4649      	mov	r1, r9
 8012ece:	f7ed f9a7 	bl	8000220 <__aeabi_dsub>
 8012ed2:	4632      	mov	r2, r6
 8012ed4:	463b      	mov	r3, r7
 8012ed6:	f7ed f9a3 	bl	8000220 <__aeabi_dsub>
 8012eda:	a31b      	add	r3, pc, #108	@ (adr r3, 8012f48 <__ieee754_rem_pio2+0x318>)
 8012edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee0:	4606      	mov	r6, r0
 8012ee2:	460f      	mov	r7, r1
 8012ee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ee8:	f7ed fb52 	bl	8000590 <__aeabi_dmul>
 8012eec:	4632      	mov	r2, r6
 8012eee:	463b      	mov	r3, r7
 8012ef0:	f7ed f996 	bl	8000220 <__aeabi_dsub>
 8012ef4:	4606      	mov	r6, r0
 8012ef6:	460f      	mov	r7, r1
 8012ef8:	e764      	b.n	8012dc4 <__ieee754_rem_pio2+0x194>
 8012efa:	4b1b      	ldr	r3, [pc, #108]	@ (8012f68 <__ieee754_rem_pio2+0x338>)
 8012efc:	4598      	cmp	r8, r3
 8012efe:	d935      	bls.n	8012f6c <__ieee754_rem_pio2+0x33c>
 8012f00:	4632      	mov	r2, r6
 8012f02:	463b      	mov	r3, r7
 8012f04:	4630      	mov	r0, r6
 8012f06:	4639      	mov	r1, r7
 8012f08:	f7ed f98a 	bl	8000220 <__aeabi_dsub>
 8012f0c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012f10:	e9c4 0100 	strd	r0, r1, [r4]
 8012f14:	e69e      	b.n	8012c54 <__ieee754_rem_pio2+0x24>
 8012f16:	bf00      	nop
 8012f18:	54400000 	.word	0x54400000
 8012f1c:	3ff921fb 	.word	0x3ff921fb
 8012f20:	1a626331 	.word	0x1a626331
 8012f24:	3dd0b461 	.word	0x3dd0b461
 8012f28:	1a600000 	.word	0x1a600000
 8012f2c:	3dd0b461 	.word	0x3dd0b461
 8012f30:	2e037073 	.word	0x2e037073
 8012f34:	3ba3198a 	.word	0x3ba3198a
 8012f38:	6dc9c883 	.word	0x6dc9c883
 8012f3c:	3fe45f30 	.word	0x3fe45f30
 8012f40:	2e000000 	.word	0x2e000000
 8012f44:	3ba3198a 	.word	0x3ba3198a
 8012f48:	252049c1 	.word	0x252049c1
 8012f4c:	397b839a 	.word	0x397b839a
 8012f50:	3fe921fb 	.word	0x3fe921fb
 8012f54:	4002d97b 	.word	0x4002d97b
 8012f58:	3ff921fb 	.word	0x3ff921fb
 8012f5c:	413921fb 	.word	0x413921fb
 8012f60:	3fe00000 	.word	0x3fe00000
 8012f64:	08014468 	.word	0x08014468
 8012f68:	7fefffff 	.word	0x7fefffff
 8012f6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012f70:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8012f74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012f78:	4630      	mov	r0, r6
 8012f7a:	460f      	mov	r7, r1
 8012f7c:	f7ed fda2 	bl	8000ac4 <__aeabi_d2iz>
 8012f80:	f7ed fa9c 	bl	80004bc <__aeabi_i2d>
 8012f84:	4602      	mov	r2, r0
 8012f86:	460b      	mov	r3, r1
 8012f88:	4630      	mov	r0, r6
 8012f8a:	4639      	mov	r1, r7
 8012f8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012f90:	f7ed f946 	bl	8000220 <__aeabi_dsub>
 8012f94:	4b22      	ldr	r3, [pc, #136]	@ (8013020 <__ieee754_rem_pio2+0x3f0>)
 8012f96:	2200      	movs	r2, #0
 8012f98:	f7ed fafa 	bl	8000590 <__aeabi_dmul>
 8012f9c:	460f      	mov	r7, r1
 8012f9e:	4606      	mov	r6, r0
 8012fa0:	f7ed fd90 	bl	8000ac4 <__aeabi_d2iz>
 8012fa4:	f7ed fa8a 	bl	80004bc <__aeabi_i2d>
 8012fa8:	4602      	mov	r2, r0
 8012faa:	460b      	mov	r3, r1
 8012fac:	4630      	mov	r0, r6
 8012fae:	4639      	mov	r1, r7
 8012fb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012fb4:	f7ed f934 	bl	8000220 <__aeabi_dsub>
 8012fb8:	4b19      	ldr	r3, [pc, #100]	@ (8013020 <__ieee754_rem_pio2+0x3f0>)
 8012fba:	2200      	movs	r2, #0
 8012fbc:	f7ed fae8 	bl	8000590 <__aeabi_dmul>
 8012fc0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8012fc4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8012fc8:	f04f 0803 	mov.w	r8, #3
 8012fcc:	2600      	movs	r6, #0
 8012fce:	2700      	movs	r7, #0
 8012fd0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012fd4:	4632      	mov	r2, r6
 8012fd6:	463b      	mov	r3, r7
 8012fd8:	46c2      	mov	sl, r8
 8012fda:	f108 38ff 	add.w	r8, r8, #4294967295
 8012fde:	f7ed fd3f 	bl	8000a60 <__aeabi_dcmpeq>
 8012fe2:	2800      	cmp	r0, #0
 8012fe4:	d1f4      	bne.n	8012fd0 <__ieee754_rem_pio2+0x3a0>
 8012fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8013024 <__ieee754_rem_pio2+0x3f4>)
 8012fe8:	9301      	str	r3, [sp, #4]
 8012fea:	2302      	movs	r3, #2
 8012fec:	9300      	str	r3, [sp, #0]
 8012fee:	462a      	mov	r2, r5
 8012ff0:	4653      	mov	r3, sl
 8012ff2:	4621      	mov	r1, r4
 8012ff4:	a806      	add	r0, sp, #24
 8012ff6:	f000 fb5b 	bl	80136b0 <__kernel_rem_pio2>
 8012ffa:	9b04      	ldr	r3, [sp, #16]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	4605      	mov	r5, r0
 8013000:	f6bf ae53 	bge.w	8012caa <__ieee754_rem_pio2+0x7a>
 8013004:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013008:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801300c:	e9c4 2300 	strd	r2, r3, [r4]
 8013010:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8013014:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013018:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801301c:	e740      	b.n	8012ea0 <__ieee754_rem_pio2+0x270>
 801301e:	bf00      	nop
 8013020:	41700000 	.word	0x41700000
 8013024:	080144e8 	.word	0x080144e8

08013028 <fabs>:
 8013028:	ec51 0b10 	vmov	r0, r1, d0
 801302c:	4602      	mov	r2, r0
 801302e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013032:	ec43 2b10 	vmov	d0, r2, r3
 8013036:	4770      	bx	lr

08013038 <__kernel_cosf>:
 8013038:	ee10 3a10 	vmov	r3, s0
 801303c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013040:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013044:	eef0 6a40 	vmov.f32	s13, s0
 8013048:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801304c:	d204      	bcs.n	8013058 <__kernel_cosf+0x20>
 801304e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8013052:	ee17 2a90 	vmov	r2, s15
 8013056:	b342      	cbz	r2, 80130aa <__kernel_cosf+0x72>
 8013058:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801305c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80130c8 <__kernel_cosf+0x90>
 8013060:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80130cc <__kernel_cosf+0x94>
 8013064:	4a1a      	ldr	r2, [pc, #104]	@ (80130d0 <__kernel_cosf+0x98>)
 8013066:	eea7 6a27 	vfma.f32	s12, s14, s15
 801306a:	4293      	cmp	r3, r2
 801306c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80130d4 <__kernel_cosf+0x9c>
 8013070:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013074:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80130d8 <__kernel_cosf+0xa0>
 8013078:	eea7 6a87 	vfma.f32	s12, s15, s14
 801307c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80130dc <__kernel_cosf+0xa4>
 8013080:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013084:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80130e0 <__kernel_cosf+0xa8>
 8013088:	eea7 6a87 	vfma.f32	s12, s15, s14
 801308c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8013090:	ee26 6a07 	vmul.f32	s12, s12, s14
 8013094:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013098:	eee7 0a06 	vfma.f32	s1, s14, s12
 801309c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80130a0:	d804      	bhi.n	80130ac <__kernel_cosf+0x74>
 80130a2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80130a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80130aa:	4770      	bx	lr
 80130ac:	4a0d      	ldr	r2, [pc, #52]	@ (80130e4 <__kernel_cosf+0xac>)
 80130ae:	4293      	cmp	r3, r2
 80130b0:	bf9a      	itte	ls
 80130b2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80130b6:	ee07 3a10 	vmovls	s14, r3
 80130ba:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80130be:	ee30 0a47 	vsub.f32	s0, s0, s14
 80130c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80130c6:	e7ec      	b.n	80130a2 <__kernel_cosf+0x6a>
 80130c8:	ad47d74e 	.word	0xad47d74e
 80130cc:	310f74f6 	.word	0x310f74f6
 80130d0:	3e999999 	.word	0x3e999999
 80130d4:	b493f27c 	.word	0xb493f27c
 80130d8:	37d00d01 	.word	0x37d00d01
 80130dc:	bab60b61 	.word	0xbab60b61
 80130e0:	3d2aaaab 	.word	0x3d2aaaab
 80130e4:	3f480000 	.word	0x3f480000

080130e8 <__kernel_sinf>:
 80130e8:	ee10 3a10 	vmov	r3, s0
 80130ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80130f0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80130f4:	d204      	bcs.n	8013100 <__kernel_sinf+0x18>
 80130f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80130fa:	ee17 3a90 	vmov	r3, s15
 80130fe:	b35b      	cbz	r3, 8013158 <__kernel_sinf+0x70>
 8013100:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013104:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801315c <__kernel_sinf+0x74>
 8013108:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8013160 <__kernel_sinf+0x78>
 801310c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013110:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8013164 <__kernel_sinf+0x7c>
 8013114:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013118:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8013168 <__kernel_sinf+0x80>
 801311c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013120:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801316c <__kernel_sinf+0x84>
 8013124:	ee60 6a07 	vmul.f32	s13, s0, s14
 8013128:	eee6 7a07 	vfma.f32	s15, s12, s14
 801312c:	b930      	cbnz	r0, 801313c <__kernel_sinf+0x54>
 801312e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8013170 <__kernel_sinf+0x88>
 8013132:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013136:	eea6 0a26 	vfma.f32	s0, s12, s13
 801313a:	4770      	bx	lr
 801313c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013140:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8013144:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013148:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801314c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8013174 <__kernel_sinf+0x8c>
 8013150:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8013154:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013158:	4770      	bx	lr
 801315a:	bf00      	nop
 801315c:	2f2ec9d3 	.word	0x2f2ec9d3
 8013160:	b2d72f34 	.word	0xb2d72f34
 8013164:	3638ef1b 	.word	0x3638ef1b
 8013168:	b9500d01 	.word	0xb9500d01
 801316c:	3c088889 	.word	0x3c088889
 8013170:	be2aaaab 	.word	0xbe2aaaab
 8013174:	3e2aaaab 	.word	0x3e2aaaab

08013178 <__ieee754_fmodf>:
 8013178:	b570      	push	{r4, r5, r6, lr}
 801317a:	ee10 6a90 	vmov	r6, s1
 801317e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013182:	1e5a      	subs	r2, r3, #1
 8013184:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013188:	d206      	bcs.n	8013198 <__ieee754_fmodf+0x20>
 801318a:	ee10 4a10 	vmov	r4, s0
 801318e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 8013192:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013196:	d304      	bcc.n	80131a2 <__ieee754_fmodf+0x2a>
 8013198:	ee60 0a20 	vmul.f32	s1, s0, s1
 801319c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80131a0:	bd70      	pop	{r4, r5, r6, pc}
 80131a2:	4299      	cmp	r1, r3
 80131a4:	dbfc      	blt.n	80131a0 <__ieee754_fmodf+0x28>
 80131a6:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 80131aa:	d105      	bne.n	80131b8 <__ieee754_fmodf+0x40>
 80131ac:	4b32      	ldr	r3, [pc, #200]	@ (8013278 <__ieee754_fmodf+0x100>)
 80131ae:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 80131b2:	ed93 0a00 	vldr	s0, [r3]
 80131b6:	e7f3      	b.n	80131a0 <__ieee754_fmodf+0x28>
 80131b8:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80131bc:	d146      	bne.n	801324c <__ieee754_fmodf+0xd4>
 80131be:	020a      	lsls	r2, r1, #8
 80131c0:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 80131c4:	2a00      	cmp	r2, #0
 80131c6:	dc3e      	bgt.n	8013246 <__ieee754_fmodf+0xce>
 80131c8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80131cc:	bf01      	itttt	eq
 80131ce:	021a      	lsleq	r2, r3, #8
 80131d0:	fab2 f282 	clzeq	r2, r2
 80131d4:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 80131d8:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 80131dc:	bf16      	itet	ne
 80131de:	15da      	asrne	r2, r3, #23
 80131e0:	3282      	addeq	r2, #130	@ 0x82
 80131e2:	3a7f      	subne	r2, #127	@ 0x7f
 80131e4:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 80131e8:	bfbb      	ittet	lt
 80131ea:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 80131ee:	1a24      	sublt	r4, r4, r0
 80131f0:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 80131f4:	40a1      	lsllt	r1, r4
 80131f6:	bfa8      	it	ge
 80131f8:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 80131fc:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8013200:	bfb5      	itete	lt
 8013202:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8013206:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 801320a:	1aa4      	sublt	r4, r4, r2
 801320c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8013210:	bfb8      	it	lt
 8013212:	fa03 f404 	lsllt.w	r4, r3, r4
 8013216:	1a80      	subs	r0, r0, r2
 8013218:	1b0b      	subs	r3, r1, r4
 801321a:	b9d0      	cbnz	r0, 8013252 <__ieee754_fmodf+0xda>
 801321c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8013220:	bf28      	it	cs
 8013222:	460b      	movcs	r3, r1
 8013224:	2b00      	cmp	r3, #0
 8013226:	d0c1      	beq.n	80131ac <__ieee754_fmodf+0x34>
 8013228:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801322c:	db19      	blt.n	8013262 <__ieee754_fmodf+0xea>
 801322e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8013232:	db19      	blt.n	8013268 <__ieee754_fmodf+0xf0>
 8013234:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8013238:	327f      	adds	r2, #127	@ 0x7f
 801323a:	432b      	orrs	r3, r5
 801323c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013240:	ee00 3a10 	vmov	s0, r3
 8013244:	e7ac      	b.n	80131a0 <__ieee754_fmodf+0x28>
 8013246:	3801      	subs	r0, #1
 8013248:	0052      	lsls	r2, r2, #1
 801324a:	e7bb      	b.n	80131c4 <__ieee754_fmodf+0x4c>
 801324c:	15c8      	asrs	r0, r1, #23
 801324e:	387f      	subs	r0, #127	@ 0x7f
 8013250:	e7ba      	b.n	80131c8 <__ieee754_fmodf+0x50>
 8013252:	2b00      	cmp	r3, #0
 8013254:	da02      	bge.n	801325c <__ieee754_fmodf+0xe4>
 8013256:	0049      	lsls	r1, r1, #1
 8013258:	3801      	subs	r0, #1
 801325a:	e7dd      	b.n	8013218 <__ieee754_fmodf+0xa0>
 801325c:	d0a6      	beq.n	80131ac <__ieee754_fmodf+0x34>
 801325e:	0059      	lsls	r1, r3, #1
 8013260:	e7fa      	b.n	8013258 <__ieee754_fmodf+0xe0>
 8013262:	005b      	lsls	r3, r3, #1
 8013264:	3a01      	subs	r2, #1
 8013266:	e7df      	b.n	8013228 <__ieee754_fmodf+0xb0>
 8013268:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 801326c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8013270:	3282      	adds	r2, #130	@ 0x82
 8013272:	4113      	asrs	r3, r2
 8013274:	432b      	orrs	r3, r5
 8013276:	e7e3      	b.n	8013240 <__ieee754_fmodf+0xc8>
 8013278:	080145f0 	.word	0x080145f0

0801327c <__ieee754_rem_pio2f>:
 801327c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801327e:	ee10 6a10 	vmov	r6, s0
 8013282:	4b88      	ldr	r3, [pc, #544]	@ (80134a4 <__ieee754_rem_pio2f+0x228>)
 8013284:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8013288:	429d      	cmp	r5, r3
 801328a:	b087      	sub	sp, #28
 801328c:	4604      	mov	r4, r0
 801328e:	d805      	bhi.n	801329c <__ieee754_rem_pio2f+0x20>
 8013290:	2300      	movs	r3, #0
 8013292:	ed80 0a00 	vstr	s0, [r0]
 8013296:	6043      	str	r3, [r0, #4]
 8013298:	2000      	movs	r0, #0
 801329a:	e022      	b.n	80132e2 <__ieee754_rem_pio2f+0x66>
 801329c:	4b82      	ldr	r3, [pc, #520]	@ (80134a8 <__ieee754_rem_pio2f+0x22c>)
 801329e:	429d      	cmp	r5, r3
 80132a0:	d83a      	bhi.n	8013318 <__ieee754_rem_pio2f+0x9c>
 80132a2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80132a6:	2e00      	cmp	r6, #0
 80132a8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80134ac <__ieee754_rem_pio2f+0x230>
 80132ac:	4a80      	ldr	r2, [pc, #512]	@ (80134b0 <__ieee754_rem_pio2f+0x234>)
 80132ae:	f023 030f 	bic.w	r3, r3, #15
 80132b2:	dd18      	ble.n	80132e6 <__ieee754_rem_pio2f+0x6a>
 80132b4:	4293      	cmp	r3, r2
 80132b6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80132ba:	bf09      	itett	eq
 80132bc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80134b4 <__ieee754_rem_pio2f+0x238>
 80132c0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80134b8 <__ieee754_rem_pio2f+0x23c>
 80132c4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80134bc <__ieee754_rem_pio2f+0x240>
 80132c8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80132cc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80132d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80132d4:	ed80 7a00 	vstr	s14, [r0]
 80132d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80132dc:	edc0 7a01 	vstr	s15, [r0, #4]
 80132e0:	2001      	movs	r0, #1
 80132e2:	b007      	add	sp, #28
 80132e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132e6:	4293      	cmp	r3, r2
 80132e8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80132ec:	bf09      	itett	eq
 80132ee:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80134b4 <__ieee754_rem_pio2f+0x238>
 80132f2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80134b8 <__ieee754_rem_pio2f+0x23c>
 80132f6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80134bc <__ieee754_rem_pio2f+0x240>
 80132fa:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80132fe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013302:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013306:	ed80 7a00 	vstr	s14, [r0]
 801330a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801330e:	edc0 7a01 	vstr	s15, [r0, #4]
 8013312:	f04f 30ff 	mov.w	r0, #4294967295
 8013316:	e7e4      	b.n	80132e2 <__ieee754_rem_pio2f+0x66>
 8013318:	4b69      	ldr	r3, [pc, #420]	@ (80134c0 <__ieee754_rem_pio2f+0x244>)
 801331a:	429d      	cmp	r5, r3
 801331c:	d873      	bhi.n	8013406 <__ieee754_rem_pio2f+0x18a>
 801331e:	f000 f8dd 	bl	80134dc <fabsf>
 8013322:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80134c4 <__ieee754_rem_pio2f+0x248>
 8013326:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801332a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801332e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013336:	ee17 0a90 	vmov	r0, s15
 801333a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80134ac <__ieee754_rem_pio2f+0x230>
 801333e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013342:	281f      	cmp	r0, #31
 8013344:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80134b8 <__ieee754_rem_pio2f+0x23c>
 8013348:	ee67 7a27 	vmul.f32	s15, s14, s15
 801334c:	eeb1 6a47 	vneg.f32	s12, s14
 8013350:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013354:	ee16 1a90 	vmov	r1, s13
 8013358:	dc09      	bgt.n	801336e <__ieee754_rem_pio2f+0xf2>
 801335a:	4a5b      	ldr	r2, [pc, #364]	@ (80134c8 <__ieee754_rem_pio2f+0x24c>)
 801335c:	1e47      	subs	r7, r0, #1
 801335e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013362:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8013366:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801336a:	4293      	cmp	r3, r2
 801336c:	d107      	bne.n	801337e <__ieee754_rem_pio2f+0x102>
 801336e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8013372:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8013376:	2a08      	cmp	r2, #8
 8013378:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801337c:	dc14      	bgt.n	80133a8 <__ieee754_rem_pio2f+0x12c>
 801337e:	6021      	str	r1, [r4, #0]
 8013380:	ed94 7a00 	vldr	s14, [r4]
 8013384:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013388:	2e00      	cmp	r6, #0
 801338a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801338e:	ed84 0a01 	vstr	s0, [r4, #4]
 8013392:	daa6      	bge.n	80132e2 <__ieee754_rem_pio2f+0x66>
 8013394:	eeb1 7a47 	vneg.f32	s14, s14
 8013398:	eeb1 0a40 	vneg.f32	s0, s0
 801339c:	ed84 7a00 	vstr	s14, [r4]
 80133a0:	ed84 0a01 	vstr	s0, [r4, #4]
 80133a4:	4240      	negs	r0, r0
 80133a6:	e79c      	b.n	80132e2 <__ieee754_rem_pio2f+0x66>
 80133a8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80134b4 <__ieee754_rem_pio2f+0x238>
 80133ac:	eef0 6a40 	vmov.f32	s13, s0
 80133b0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80133b4:	ee70 7a66 	vsub.f32	s15, s0, s13
 80133b8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80133bc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80134bc <__ieee754_rem_pio2f+0x240>
 80133c0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80133c4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80133c8:	ee15 2a90 	vmov	r2, s11
 80133cc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80133d0:	1a5b      	subs	r3, r3, r1
 80133d2:	2b19      	cmp	r3, #25
 80133d4:	dc04      	bgt.n	80133e0 <__ieee754_rem_pio2f+0x164>
 80133d6:	edc4 5a00 	vstr	s11, [r4]
 80133da:	eeb0 0a66 	vmov.f32	s0, s13
 80133de:	e7cf      	b.n	8013380 <__ieee754_rem_pio2f+0x104>
 80133e0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80134cc <__ieee754_rem_pio2f+0x250>
 80133e4:	eeb0 0a66 	vmov.f32	s0, s13
 80133e8:	eea6 0a25 	vfma.f32	s0, s12, s11
 80133ec:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80133f0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80134d0 <__ieee754_rem_pio2f+0x254>
 80133f4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80133f8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80133fc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013400:	ed84 7a00 	vstr	s14, [r4]
 8013404:	e7bc      	b.n	8013380 <__ieee754_rem_pio2f+0x104>
 8013406:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801340a:	d306      	bcc.n	801341a <__ieee754_rem_pio2f+0x19e>
 801340c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013410:	edc0 7a01 	vstr	s15, [r0, #4]
 8013414:	edc0 7a00 	vstr	s15, [r0]
 8013418:	e73e      	b.n	8013298 <__ieee754_rem_pio2f+0x1c>
 801341a:	15ea      	asrs	r2, r5, #23
 801341c:	3a86      	subs	r2, #134	@ 0x86
 801341e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013422:	ee07 3a90 	vmov	s15, r3
 8013426:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801342a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80134d4 <__ieee754_rem_pio2f+0x258>
 801342e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013432:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013436:	ed8d 7a03 	vstr	s14, [sp, #12]
 801343a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801343e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013442:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013446:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801344a:	ed8d 7a04 	vstr	s14, [sp, #16]
 801344e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013452:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801345a:	edcd 7a05 	vstr	s15, [sp, #20]
 801345e:	d11e      	bne.n	801349e <__ieee754_rem_pio2f+0x222>
 8013460:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013468:	bf0c      	ite	eq
 801346a:	2301      	moveq	r3, #1
 801346c:	2302      	movne	r3, #2
 801346e:	491a      	ldr	r1, [pc, #104]	@ (80134d8 <__ieee754_rem_pio2f+0x25c>)
 8013470:	9101      	str	r1, [sp, #4]
 8013472:	2102      	movs	r1, #2
 8013474:	9100      	str	r1, [sp, #0]
 8013476:	a803      	add	r0, sp, #12
 8013478:	4621      	mov	r1, r4
 801347a:	f000 fc69 	bl	8013d50 <__kernel_rem_pio2f>
 801347e:	2e00      	cmp	r6, #0
 8013480:	f6bf af2f 	bge.w	80132e2 <__ieee754_rem_pio2f+0x66>
 8013484:	edd4 7a00 	vldr	s15, [r4]
 8013488:	eef1 7a67 	vneg.f32	s15, s15
 801348c:	edc4 7a00 	vstr	s15, [r4]
 8013490:	edd4 7a01 	vldr	s15, [r4, #4]
 8013494:	eef1 7a67 	vneg.f32	s15, s15
 8013498:	edc4 7a01 	vstr	s15, [r4, #4]
 801349c:	e782      	b.n	80133a4 <__ieee754_rem_pio2f+0x128>
 801349e:	2303      	movs	r3, #3
 80134a0:	e7e5      	b.n	801346e <__ieee754_rem_pio2f+0x1f2>
 80134a2:	bf00      	nop
 80134a4:	3f490fd8 	.word	0x3f490fd8
 80134a8:	4016cbe3 	.word	0x4016cbe3
 80134ac:	3fc90f80 	.word	0x3fc90f80
 80134b0:	3fc90fd0 	.word	0x3fc90fd0
 80134b4:	37354400 	.word	0x37354400
 80134b8:	37354443 	.word	0x37354443
 80134bc:	2e85a308 	.word	0x2e85a308
 80134c0:	43490f80 	.word	0x43490f80
 80134c4:	3f22f984 	.word	0x3f22f984
 80134c8:	080145f8 	.word	0x080145f8
 80134cc:	2e85a300 	.word	0x2e85a300
 80134d0:	248d3132 	.word	0x248d3132
 80134d4:	43800000 	.word	0x43800000
 80134d8:	08014678 	.word	0x08014678

080134dc <fabsf>:
 80134dc:	ee10 3a10 	vmov	r3, s0
 80134e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80134e4:	ee00 3a10 	vmov	s0, r3
 80134e8:	4770      	bx	lr
 80134ea:	0000      	movs	r0, r0
 80134ec:	0000      	movs	r0, r0
	...

080134f0 <scalbn>:
 80134f0:	b570      	push	{r4, r5, r6, lr}
 80134f2:	ec55 4b10 	vmov	r4, r5, d0
 80134f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80134fa:	4606      	mov	r6, r0
 80134fc:	462b      	mov	r3, r5
 80134fe:	b991      	cbnz	r1, 8013526 <scalbn+0x36>
 8013500:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013504:	4323      	orrs	r3, r4
 8013506:	d03b      	beq.n	8013580 <scalbn+0x90>
 8013508:	4b33      	ldr	r3, [pc, #204]	@ (80135d8 <scalbn+0xe8>)
 801350a:	4620      	mov	r0, r4
 801350c:	4629      	mov	r1, r5
 801350e:	2200      	movs	r2, #0
 8013510:	f7ed f83e 	bl	8000590 <__aeabi_dmul>
 8013514:	4b31      	ldr	r3, [pc, #196]	@ (80135dc <scalbn+0xec>)
 8013516:	429e      	cmp	r6, r3
 8013518:	4604      	mov	r4, r0
 801351a:	460d      	mov	r5, r1
 801351c:	da0f      	bge.n	801353e <scalbn+0x4e>
 801351e:	a326      	add	r3, pc, #152	@ (adr r3, 80135b8 <scalbn+0xc8>)
 8013520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013524:	e01e      	b.n	8013564 <scalbn+0x74>
 8013526:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801352a:	4291      	cmp	r1, r2
 801352c:	d10b      	bne.n	8013546 <scalbn+0x56>
 801352e:	4622      	mov	r2, r4
 8013530:	4620      	mov	r0, r4
 8013532:	4629      	mov	r1, r5
 8013534:	f7ec fe76 	bl	8000224 <__adddf3>
 8013538:	4604      	mov	r4, r0
 801353a:	460d      	mov	r5, r1
 801353c:	e020      	b.n	8013580 <scalbn+0x90>
 801353e:	460b      	mov	r3, r1
 8013540:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013544:	3936      	subs	r1, #54	@ 0x36
 8013546:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801354a:	4296      	cmp	r6, r2
 801354c:	dd0d      	ble.n	801356a <scalbn+0x7a>
 801354e:	2d00      	cmp	r5, #0
 8013550:	a11b      	add	r1, pc, #108	@ (adr r1, 80135c0 <scalbn+0xd0>)
 8013552:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013556:	da02      	bge.n	801355e <scalbn+0x6e>
 8013558:	a11b      	add	r1, pc, #108	@ (adr r1, 80135c8 <scalbn+0xd8>)
 801355a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801355e:	a318      	add	r3, pc, #96	@ (adr r3, 80135c0 <scalbn+0xd0>)
 8013560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013564:	f7ed f814 	bl	8000590 <__aeabi_dmul>
 8013568:	e7e6      	b.n	8013538 <scalbn+0x48>
 801356a:	1872      	adds	r2, r6, r1
 801356c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013570:	428a      	cmp	r2, r1
 8013572:	dcec      	bgt.n	801354e <scalbn+0x5e>
 8013574:	2a00      	cmp	r2, #0
 8013576:	dd06      	ble.n	8013586 <scalbn+0x96>
 8013578:	f36f 531e 	bfc	r3, #20, #11
 801357c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013580:	ec45 4b10 	vmov	d0, r4, r5
 8013584:	bd70      	pop	{r4, r5, r6, pc}
 8013586:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801358a:	da08      	bge.n	801359e <scalbn+0xae>
 801358c:	2d00      	cmp	r5, #0
 801358e:	a10a      	add	r1, pc, #40	@ (adr r1, 80135b8 <scalbn+0xc8>)
 8013590:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013594:	dac3      	bge.n	801351e <scalbn+0x2e>
 8013596:	a10e      	add	r1, pc, #56	@ (adr r1, 80135d0 <scalbn+0xe0>)
 8013598:	e9d1 0100 	ldrd	r0, r1, [r1]
 801359c:	e7bf      	b.n	801351e <scalbn+0x2e>
 801359e:	3236      	adds	r2, #54	@ 0x36
 80135a0:	f36f 531e 	bfc	r3, #20, #11
 80135a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80135a8:	4620      	mov	r0, r4
 80135aa:	4b0d      	ldr	r3, [pc, #52]	@ (80135e0 <scalbn+0xf0>)
 80135ac:	4629      	mov	r1, r5
 80135ae:	2200      	movs	r2, #0
 80135b0:	e7d8      	b.n	8013564 <scalbn+0x74>
 80135b2:	bf00      	nop
 80135b4:	f3af 8000 	nop.w
 80135b8:	c2f8f359 	.word	0xc2f8f359
 80135bc:	01a56e1f 	.word	0x01a56e1f
 80135c0:	8800759c 	.word	0x8800759c
 80135c4:	7e37e43c 	.word	0x7e37e43c
 80135c8:	8800759c 	.word	0x8800759c
 80135cc:	fe37e43c 	.word	0xfe37e43c
 80135d0:	c2f8f359 	.word	0xc2f8f359
 80135d4:	81a56e1f 	.word	0x81a56e1f
 80135d8:	43500000 	.word	0x43500000
 80135dc:	ffff3cb0 	.word	0xffff3cb0
 80135e0:	3c900000 	.word	0x3c900000

080135e4 <scalbnf>:
 80135e4:	ee10 3a10 	vmov	r3, s0
 80135e8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80135ec:	d02b      	beq.n	8013646 <scalbnf+0x62>
 80135ee:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80135f2:	d302      	bcc.n	80135fa <scalbnf+0x16>
 80135f4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80135f8:	4770      	bx	lr
 80135fa:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80135fe:	d123      	bne.n	8013648 <scalbnf+0x64>
 8013600:	4b24      	ldr	r3, [pc, #144]	@ (8013694 <scalbnf+0xb0>)
 8013602:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8013698 <scalbnf+0xb4>
 8013606:	4298      	cmp	r0, r3
 8013608:	ee20 0a27 	vmul.f32	s0, s0, s15
 801360c:	db17      	blt.n	801363e <scalbnf+0x5a>
 801360e:	ee10 3a10 	vmov	r3, s0
 8013612:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013616:	3a19      	subs	r2, #25
 8013618:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801361c:	4288      	cmp	r0, r1
 801361e:	dd15      	ble.n	801364c <scalbnf+0x68>
 8013620:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801369c <scalbnf+0xb8>
 8013624:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80136a0 <scalbnf+0xbc>
 8013628:	ee10 3a10 	vmov	r3, s0
 801362c:	eeb0 7a67 	vmov.f32	s14, s15
 8013630:	2b00      	cmp	r3, #0
 8013632:	bfb8      	it	lt
 8013634:	eef0 7a66 	vmovlt.f32	s15, s13
 8013638:	ee27 0a87 	vmul.f32	s0, s15, s14
 801363c:	4770      	bx	lr
 801363e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80136a4 <scalbnf+0xc0>
 8013642:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013646:	4770      	bx	lr
 8013648:	0dd2      	lsrs	r2, r2, #23
 801364a:	e7e5      	b.n	8013618 <scalbnf+0x34>
 801364c:	4410      	add	r0, r2
 801364e:	28fe      	cmp	r0, #254	@ 0xfe
 8013650:	dce6      	bgt.n	8013620 <scalbnf+0x3c>
 8013652:	2800      	cmp	r0, #0
 8013654:	dd06      	ble.n	8013664 <scalbnf+0x80>
 8013656:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801365a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801365e:	ee00 3a10 	vmov	s0, r3
 8013662:	4770      	bx	lr
 8013664:	f110 0f16 	cmn.w	r0, #22
 8013668:	da09      	bge.n	801367e <scalbnf+0x9a>
 801366a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80136a4 <scalbnf+0xc0>
 801366e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80136a8 <scalbnf+0xc4>
 8013672:	ee10 3a10 	vmov	r3, s0
 8013676:	eeb0 7a67 	vmov.f32	s14, s15
 801367a:	2b00      	cmp	r3, #0
 801367c:	e7d9      	b.n	8013632 <scalbnf+0x4e>
 801367e:	3019      	adds	r0, #25
 8013680:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013684:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013688:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80136ac <scalbnf+0xc8>
 801368c:	ee07 3a90 	vmov	s15, r3
 8013690:	e7d7      	b.n	8013642 <scalbnf+0x5e>
 8013692:	bf00      	nop
 8013694:	ffff3cb0 	.word	0xffff3cb0
 8013698:	4c000000 	.word	0x4c000000
 801369c:	7149f2ca 	.word	0x7149f2ca
 80136a0:	f149f2ca 	.word	0xf149f2ca
 80136a4:	0da24260 	.word	0x0da24260
 80136a8:	8da24260 	.word	0x8da24260
 80136ac:	33000000 	.word	0x33000000

080136b0 <__kernel_rem_pio2>:
 80136b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136b4:	ed2d 8b02 	vpush	{d8}
 80136b8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80136bc:	f112 0f14 	cmn.w	r2, #20
 80136c0:	9306      	str	r3, [sp, #24]
 80136c2:	9104      	str	r1, [sp, #16]
 80136c4:	4bc2      	ldr	r3, [pc, #776]	@ (80139d0 <__kernel_rem_pio2+0x320>)
 80136c6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 80136c8:	9008      	str	r0, [sp, #32]
 80136ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80136ce:	9300      	str	r3, [sp, #0]
 80136d0:	9b06      	ldr	r3, [sp, #24]
 80136d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80136d6:	bfa8      	it	ge
 80136d8:	1ed4      	subge	r4, r2, #3
 80136da:	9305      	str	r3, [sp, #20]
 80136dc:	bfb2      	itee	lt
 80136de:	2400      	movlt	r4, #0
 80136e0:	2318      	movge	r3, #24
 80136e2:	fb94 f4f3 	sdivge	r4, r4, r3
 80136e6:	f06f 0317 	mvn.w	r3, #23
 80136ea:	fb04 3303 	mla	r3, r4, r3, r3
 80136ee:	eb03 0b02 	add.w	fp, r3, r2
 80136f2:	9b00      	ldr	r3, [sp, #0]
 80136f4:	9a05      	ldr	r2, [sp, #20]
 80136f6:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 80139c0 <__kernel_rem_pio2+0x310>
 80136fa:	eb03 0802 	add.w	r8, r3, r2
 80136fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013700:	1aa7      	subs	r7, r4, r2
 8013702:	ae20      	add	r6, sp, #128	@ 0x80
 8013704:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013708:	2500      	movs	r5, #0
 801370a:	4545      	cmp	r5, r8
 801370c:	dd12      	ble.n	8013734 <__kernel_rem_pio2+0x84>
 801370e:	9b06      	ldr	r3, [sp, #24]
 8013710:	aa20      	add	r2, sp, #128	@ 0x80
 8013712:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8013716:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 801371a:	2700      	movs	r7, #0
 801371c:	9b00      	ldr	r3, [sp, #0]
 801371e:	429f      	cmp	r7, r3
 8013720:	dc2e      	bgt.n	8013780 <__kernel_rem_pio2+0xd0>
 8013722:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 80139c0 <__kernel_rem_pio2+0x310>
 8013726:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801372a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801372e:	46a8      	mov	r8, r5
 8013730:	2600      	movs	r6, #0
 8013732:	e01b      	b.n	801376c <__kernel_rem_pio2+0xbc>
 8013734:	42ef      	cmn	r7, r5
 8013736:	d407      	bmi.n	8013748 <__kernel_rem_pio2+0x98>
 8013738:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801373c:	f7ec febe 	bl	80004bc <__aeabi_i2d>
 8013740:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013744:	3501      	adds	r5, #1
 8013746:	e7e0      	b.n	801370a <__kernel_rem_pio2+0x5a>
 8013748:	ec51 0b18 	vmov	r0, r1, d8
 801374c:	e7f8      	b.n	8013740 <__kernel_rem_pio2+0x90>
 801374e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8013752:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013756:	f7ec ff1b 	bl	8000590 <__aeabi_dmul>
 801375a:	4602      	mov	r2, r0
 801375c:	460b      	mov	r3, r1
 801375e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013762:	f7ec fd5f 	bl	8000224 <__adddf3>
 8013766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801376a:	3601      	adds	r6, #1
 801376c:	9b05      	ldr	r3, [sp, #20]
 801376e:	429e      	cmp	r6, r3
 8013770:	dded      	ble.n	801374e <__kernel_rem_pio2+0x9e>
 8013772:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013776:	3701      	adds	r7, #1
 8013778:	ecaa 7b02 	vstmia	sl!, {d7}
 801377c:	3508      	adds	r5, #8
 801377e:	e7cd      	b.n	801371c <__kernel_rem_pio2+0x6c>
 8013780:	9b00      	ldr	r3, [sp, #0]
 8013782:	f8dd 8000 	ldr.w	r8, [sp]
 8013786:	aa0c      	add	r2, sp, #48	@ 0x30
 8013788:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801378c:	930a      	str	r3, [sp, #40]	@ 0x28
 801378e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013790:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013794:	9309      	str	r3, [sp, #36]	@ 0x24
 8013796:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801379a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801379c:	ab98      	add	r3, sp, #608	@ 0x260
 801379e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80137a2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80137a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80137aa:	ac0c      	add	r4, sp, #48	@ 0x30
 80137ac:	ab70      	add	r3, sp, #448	@ 0x1c0
 80137ae:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80137b2:	46a1      	mov	r9, r4
 80137b4:	46c2      	mov	sl, r8
 80137b6:	f1ba 0f00 	cmp.w	sl, #0
 80137ba:	dc77      	bgt.n	80138ac <__kernel_rem_pio2+0x1fc>
 80137bc:	4658      	mov	r0, fp
 80137be:	ed9d 0b02 	vldr	d0, [sp, #8]
 80137c2:	f7ff fe95 	bl	80134f0 <scalbn>
 80137c6:	ec57 6b10 	vmov	r6, r7, d0
 80137ca:	2200      	movs	r2, #0
 80137cc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80137d0:	4630      	mov	r0, r6
 80137d2:	4639      	mov	r1, r7
 80137d4:	f7ec fedc 	bl	8000590 <__aeabi_dmul>
 80137d8:	ec41 0b10 	vmov	d0, r0, r1
 80137dc:	f000 fd20 	bl	8014220 <floor>
 80137e0:	4b7c      	ldr	r3, [pc, #496]	@ (80139d4 <__kernel_rem_pio2+0x324>)
 80137e2:	ec51 0b10 	vmov	r0, r1, d0
 80137e6:	2200      	movs	r2, #0
 80137e8:	f7ec fed2 	bl	8000590 <__aeabi_dmul>
 80137ec:	4602      	mov	r2, r0
 80137ee:	460b      	mov	r3, r1
 80137f0:	4630      	mov	r0, r6
 80137f2:	4639      	mov	r1, r7
 80137f4:	f7ec fd14 	bl	8000220 <__aeabi_dsub>
 80137f8:	460f      	mov	r7, r1
 80137fa:	4606      	mov	r6, r0
 80137fc:	f7ed f962 	bl	8000ac4 <__aeabi_d2iz>
 8013800:	9002      	str	r0, [sp, #8]
 8013802:	f7ec fe5b 	bl	80004bc <__aeabi_i2d>
 8013806:	4602      	mov	r2, r0
 8013808:	460b      	mov	r3, r1
 801380a:	4630      	mov	r0, r6
 801380c:	4639      	mov	r1, r7
 801380e:	f7ec fd07 	bl	8000220 <__aeabi_dsub>
 8013812:	f1bb 0f00 	cmp.w	fp, #0
 8013816:	4606      	mov	r6, r0
 8013818:	460f      	mov	r7, r1
 801381a:	dd6c      	ble.n	80138f6 <__kernel_rem_pio2+0x246>
 801381c:	f108 31ff 	add.w	r1, r8, #4294967295
 8013820:	ab0c      	add	r3, sp, #48	@ 0x30
 8013822:	9d02      	ldr	r5, [sp, #8]
 8013824:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013828:	f1cb 0018 	rsb	r0, fp, #24
 801382c:	fa43 f200 	asr.w	r2, r3, r0
 8013830:	4415      	add	r5, r2
 8013832:	4082      	lsls	r2, r0
 8013834:	1a9b      	subs	r3, r3, r2
 8013836:	aa0c      	add	r2, sp, #48	@ 0x30
 8013838:	9502      	str	r5, [sp, #8]
 801383a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801383e:	f1cb 0217 	rsb	r2, fp, #23
 8013842:	fa43 f902 	asr.w	r9, r3, r2
 8013846:	f1b9 0f00 	cmp.w	r9, #0
 801384a:	dd64      	ble.n	8013916 <__kernel_rem_pio2+0x266>
 801384c:	9b02      	ldr	r3, [sp, #8]
 801384e:	2200      	movs	r2, #0
 8013850:	3301      	adds	r3, #1
 8013852:	9302      	str	r3, [sp, #8]
 8013854:	4615      	mov	r5, r2
 8013856:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 801385a:	4590      	cmp	r8, r2
 801385c:	f300 80a1 	bgt.w	80139a2 <__kernel_rem_pio2+0x2f2>
 8013860:	f1bb 0f00 	cmp.w	fp, #0
 8013864:	dd07      	ble.n	8013876 <__kernel_rem_pio2+0x1c6>
 8013866:	f1bb 0f01 	cmp.w	fp, #1
 801386a:	f000 80c1 	beq.w	80139f0 <__kernel_rem_pio2+0x340>
 801386e:	f1bb 0f02 	cmp.w	fp, #2
 8013872:	f000 80c8 	beq.w	8013a06 <__kernel_rem_pio2+0x356>
 8013876:	f1b9 0f02 	cmp.w	r9, #2
 801387a:	d14c      	bne.n	8013916 <__kernel_rem_pio2+0x266>
 801387c:	4632      	mov	r2, r6
 801387e:	463b      	mov	r3, r7
 8013880:	4955      	ldr	r1, [pc, #340]	@ (80139d8 <__kernel_rem_pio2+0x328>)
 8013882:	2000      	movs	r0, #0
 8013884:	f7ec fccc 	bl	8000220 <__aeabi_dsub>
 8013888:	4606      	mov	r6, r0
 801388a:	460f      	mov	r7, r1
 801388c:	2d00      	cmp	r5, #0
 801388e:	d042      	beq.n	8013916 <__kernel_rem_pio2+0x266>
 8013890:	4658      	mov	r0, fp
 8013892:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 80139c8 <__kernel_rem_pio2+0x318>
 8013896:	f7ff fe2b 	bl	80134f0 <scalbn>
 801389a:	4630      	mov	r0, r6
 801389c:	4639      	mov	r1, r7
 801389e:	ec53 2b10 	vmov	r2, r3, d0
 80138a2:	f7ec fcbd 	bl	8000220 <__aeabi_dsub>
 80138a6:	4606      	mov	r6, r0
 80138a8:	460f      	mov	r7, r1
 80138aa:	e034      	b.n	8013916 <__kernel_rem_pio2+0x266>
 80138ac:	4b4b      	ldr	r3, [pc, #300]	@ (80139dc <__kernel_rem_pio2+0x32c>)
 80138ae:	2200      	movs	r2, #0
 80138b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80138b4:	f7ec fe6c 	bl	8000590 <__aeabi_dmul>
 80138b8:	f7ed f904 	bl	8000ac4 <__aeabi_d2iz>
 80138bc:	f7ec fdfe 	bl	80004bc <__aeabi_i2d>
 80138c0:	4b47      	ldr	r3, [pc, #284]	@ (80139e0 <__kernel_rem_pio2+0x330>)
 80138c2:	2200      	movs	r2, #0
 80138c4:	4606      	mov	r6, r0
 80138c6:	460f      	mov	r7, r1
 80138c8:	f7ec fe62 	bl	8000590 <__aeabi_dmul>
 80138cc:	4602      	mov	r2, r0
 80138ce:	460b      	mov	r3, r1
 80138d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80138d4:	f7ec fca4 	bl	8000220 <__aeabi_dsub>
 80138d8:	f7ed f8f4 	bl	8000ac4 <__aeabi_d2iz>
 80138dc:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80138e0:	f849 0b04 	str.w	r0, [r9], #4
 80138e4:	4639      	mov	r1, r7
 80138e6:	4630      	mov	r0, r6
 80138e8:	f7ec fc9c 	bl	8000224 <__adddf3>
 80138ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80138f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80138f4:	e75f      	b.n	80137b6 <__kernel_rem_pio2+0x106>
 80138f6:	d107      	bne.n	8013908 <__kernel_rem_pio2+0x258>
 80138f8:	f108 33ff 	add.w	r3, r8, #4294967295
 80138fc:	aa0c      	add	r2, sp, #48	@ 0x30
 80138fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013902:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8013906:	e79e      	b.n	8013846 <__kernel_rem_pio2+0x196>
 8013908:	4b36      	ldr	r3, [pc, #216]	@ (80139e4 <__kernel_rem_pio2+0x334>)
 801390a:	2200      	movs	r2, #0
 801390c:	f7ed f8c6 	bl	8000a9c <__aeabi_dcmpge>
 8013910:	2800      	cmp	r0, #0
 8013912:	d143      	bne.n	801399c <__kernel_rem_pio2+0x2ec>
 8013914:	4681      	mov	r9, r0
 8013916:	2200      	movs	r2, #0
 8013918:	2300      	movs	r3, #0
 801391a:	4630      	mov	r0, r6
 801391c:	4639      	mov	r1, r7
 801391e:	f7ed f89f 	bl	8000a60 <__aeabi_dcmpeq>
 8013922:	2800      	cmp	r0, #0
 8013924:	f000 80c1 	beq.w	8013aaa <__kernel_rem_pio2+0x3fa>
 8013928:	f108 33ff 	add.w	r3, r8, #4294967295
 801392c:	2200      	movs	r2, #0
 801392e:	9900      	ldr	r1, [sp, #0]
 8013930:	428b      	cmp	r3, r1
 8013932:	da70      	bge.n	8013a16 <__kernel_rem_pio2+0x366>
 8013934:	2a00      	cmp	r2, #0
 8013936:	f000 808b 	beq.w	8013a50 <__kernel_rem_pio2+0x3a0>
 801393a:	f108 38ff 	add.w	r8, r8, #4294967295
 801393e:	ab0c      	add	r3, sp, #48	@ 0x30
 8013940:	f1ab 0b18 	sub.w	fp, fp, #24
 8013944:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d0f6      	beq.n	801393a <__kernel_rem_pio2+0x28a>
 801394c:	4658      	mov	r0, fp
 801394e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80139c8 <__kernel_rem_pio2+0x318>
 8013952:	f7ff fdcd 	bl	80134f0 <scalbn>
 8013956:	f108 0301 	add.w	r3, r8, #1
 801395a:	00da      	lsls	r2, r3, #3
 801395c:	9205      	str	r2, [sp, #20]
 801395e:	ec55 4b10 	vmov	r4, r5, d0
 8013962:	aa70      	add	r2, sp, #448	@ 0x1c0
 8013964:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80139dc <__kernel_rem_pio2+0x32c>
 8013968:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 801396c:	4646      	mov	r6, r8
 801396e:	f04f 0a00 	mov.w	sl, #0
 8013972:	2e00      	cmp	r6, #0
 8013974:	f280 80d1 	bge.w	8013b1a <__kernel_rem_pio2+0x46a>
 8013978:	4644      	mov	r4, r8
 801397a:	2c00      	cmp	r4, #0
 801397c:	f2c0 80ff 	blt.w	8013b7e <__kernel_rem_pio2+0x4ce>
 8013980:	4b19      	ldr	r3, [pc, #100]	@ (80139e8 <__kernel_rem_pio2+0x338>)
 8013982:	461f      	mov	r7, r3
 8013984:	ab70      	add	r3, sp, #448	@ 0x1c0
 8013986:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801398a:	9306      	str	r3, [sp, #24]
 801398c:	f04f 0a00 	mov.w	sl, #0
 8013990:	f04f 0b00 	mov.w	fp, #0
 8013994:	2600      	movs	r6, #0
 8013996:	eba8 0504 	sub.w	r5, r8, r4
 801399a:	e0e4      	b.n	8013b66 <__kernel_rem_pio2+0x4b6>
 801399c:	f04f 0902 	mov.w	r9, #2
 80139a0:	e754      	b.n	801384c <__kernel_rem_pio2+0x19c>
 80139a2:	f854 3b04 	ldr.w	r3, [r4], #4
 80139a6:	bb0d      	cbnz	r5, 80139ec <__kernel_rem_pio2+0x33c>
 80139a8:	b123      	cbz	r3, 80139b4 <__kernel_rem_pio2+0x304>
 80139aa:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80139ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80139b2:	2301      	movs	r3, #1
 80139b4:	3201      	adds	r2, #1
 80139b6:	461d      	mov	r5, r3
 80139b8:	e74f      	b.n	801385a <__kernel_rem_pio2+0x1aa>
 80139ba:	bf00      	nop
 80139bc:	f3af 8000 	nop.w
	...
 80139cc:	3ff00000 	.word	0x3ff00000
 80139d0:	080149d0 	.word	0x080149d0
 80139d4:	40200000 	.word	0x40200000
 80139d8:	3ff00000 	.word	0x3ff00000
 80139dc:	3e700000 	.word	0x3e700000
 80139e0:	41700000 	.word	0x41700000
 80139e4:	3fe00000 	.word	0x3fe00000
 80139e8:	08014990 	.word	0x08014990
 80139ec:	1acb      	subs	r3, r1, r3
 80139ee:	e7de      	b.n	80139ae <__kernel_rem_pio2+0x2fe>
 80139f0:	f108 32ff 	add.w	r2, r8, #4294967295
 80139f4:	ab0c      	add	r3, sp, #48	@ 0x30
 80139f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139fa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80139fe:	a90c      	add	r1, sp, #48	@ 0x30
 8013a00:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013a04:	e737      	b.n	8013876 <__kernel_rem_pio2+0x1c6>
 8013a06:	f108 32ff 	add.w	r2, r8, #4294967295
 8013a0a:	ab0c      	add	r3, sp, #48	@ 0x30
 8013a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a10:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013a14:	e7f3      	b.n	80139fe <__kernel_rem_pio2+0x34e>
 8013a16:	a90c      	add	r1, sp, #48	@ 0x30
 8013a18:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013a1c:	3b01      	subs	r3, #1
 8013a1e:	430a      	orrs	r2, r1
 8013a20:	e785      	b.n	801392e <__kernel_rem_pio2+0x27e>
 8013a22:	3401      	adds	r4, #1
 8013a24:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013a28:	2a00      	cmp	r2, #0
 8013a2a:	d0fa      	beq.n	8013a22 <__kernel_rem_pio2+0x372>
 8013a2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013a2e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013a32:	eb0d 0503 	add.w	r5, sp, r3
 8013a36:	9b06      	ldr	r3, [sp, #24]
 8013a38:	aa20      	add	r2, sp, #128	@ 0x80
 8013a3a:	4443      	add	r3, r8
 8013a3c:	f108 0701 	add.w	r7, r8, #1
 8013a40:	3d98      	subs	r5, #152	@ 0x98
 8013a42:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8013a46:	4444      	add	r4, r8
 8013a48:	42bc      	cmp	r4, r7
 8013a4a:	da04      	bge.n	8013a56 <__kernel_rem_pio2+0x3a6>
 8013a4c:	46a0      	mov	r8, r4
 8013a4e:	e6a2      	b.n	8013796 <__kernel_rem_pio2+0xe6>
 8013a50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013a52:	2401      	movs	r4, #1
 8013a54:	e7e6      	b.n	8013a24 <__kernel_rem_pio2+0x374>
 8013a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a58:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8013a5c:	f7ec fd2e 	bl	80004bc <__aeabi_i2d>
 8013a60:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8013d20 <__kernel_rem_pio2+0x670>
 8013a64:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013a68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013a6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013a70:	46b2      	mov	sl, r6
 8013a72:	f04f 0800 	mov.w	r8, #0
 8013a76:	9b05      	ldr	r3, [sp, #20]
 8013a78:	4598      	cmp	r8, r3
 8013a7a:	dd05      	ble.n	8013a88 <__kernel_rem_pio2+0x3d8>
 8013a7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013a80:	3701      	adds	r7, #1
 8013a82:	eca5 7b02 	vstmia	r5!, {d7}
 8013a86:	e7df      	b.n	8013a48 <__kernel_rem_pio2+0x398>
 8013a88:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8013a8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013a90:	f7ec fd7e 	bl	8000590 <__aeabi_dmul>
 8013a94:	4602      	mov	r2, r0
 8013a96:	460b      	mov	r3, r1
 8013a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a9c:	f7ec fbc2 	bl	8000224 <__adddf3>
 8013aa0:	f108 0801 	add.w	r8, r8, #1
 8013aa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013aa8:	e7e5      	b.n	8013a76 <__kernel_rem_pio2+0x3c6>
 8013aaa:	f1cb 0000 	rsb	r0, fp, #0
 8013aae:	ec47 6b10 	vmov	d0, r6, r7
 8013ab2:	f7ff fd1d 	bl	80134f0 <scalbn>
 8013ab6:	ec55 4b10 	vmov	r4, r5, d0
 8013aba:	4b9b      	ldr	r3, [pc, #620]	@ (8013d28 <__kernel_rem_pio2+0x678>)
 8013abc:	2200      	movs	r2, #0
 8013abe:	4620      	mov	r0, r4
 8013ac0:	4629      	mov	r1, r5
 8013ac2:	f7ec ffeb 	bl	8000a9c <__aeabi_dcmpge>
 8013ac6:	b300      	cbz	r0, 8013b0a <__kernel_rem_pio2+0x45a>
 8013ac8:	4b98      	ldr	r3, [pc, #608]	@ (8013d2c <__kernel_rem_pio2+0x67c>)
 8013aca:	2200      	movs	r2, #0
 8013acc:	4620      	mov	r0, r4
 8013ace:	4629      	mov	r1, r5
 8013ad0:	f7ec fd5e 	bl	8000590 <__aeabi_dmul>
 8013ad4:	f7ec fff6 	bl	8000ac4 <__aeabi_d2iz>
 8013ad8:	4606      	mov	r6, r0
 8013ada:	f7ec fcef 	bl	80004bc <__aeabi_i2d>
 8013ade:	4b92      	ldr	r3, [pc, #584]	@ (8013d28 <__kernel_rem_pio2+0x678>)
 8013ae0:	2200      	movs	r2, #0
 8013ae2:	f7ec fd55 	bl	8000590 <__aeabi_dmul>
 8013ae6:	460b      	mov	r3, r1
 8013ae8:	4602      	mov	r2, r0
 8013aea:	4629      	mov	r1, r5
 8013aec:	4620      	mov	r0, r4
 8013aee:	f7ec fb97 	bl	8000220 <__aeabi_dsub>
 8013af2:	f7ec ffe7 	bl	8000ac4 <__aeabi_d2iz>
 8013af6:	ab0c      	add	r3, sp, #48	@ 0x30
 8013af8:	f10b 0b18 	add.w	fp, fp, #24
 8013afc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013b00:	f108 0801 	add.w	r8, r8, #1
 8013b04:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8013b08:	e720      	b.n	801394c <__kernel_rem_pio2+0x29c>
 8013b0a:	4620      	mov	r0, r4
 8013b0c:	4629      	mov	r1, r5
 8013b0e:	f7ec ffd9 	bl	8000ac4 <__aeabi_d2iz>
 8013b12:	ab0c      	add	r3, sp, #48	@ 0x30
 8013b14:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013b18:	e718      	b.n	801394c <__kernel_rem_pio2+0x29c>
 8013b1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8013b1c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013b20:	f7ec fccc 	bl	80004bc <__aeabi_i2d>
 8013b24:	4622      	mov	r2, r4
 8013b26:	462b      	mov	r3, r5
 8013b28:	f7ec fd32 	bl	8000590 <__aeabi_dmul>
 8013b2c:	4652      	mov	r2, sl
 8013b2e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8013b32:	465b      	mov	r3, fp
 8013b34:	4620      	mov	r0, r4
 8013b36:	4629      	mov	r1, r5
 8013b38:	f7ec fd2a 	bl	8000590 <__aeabi_dmul>
 8013b3c:	3e01      	subs	r6, #1
 8013b3e:	4604      	mov	r4, r0
 8013b40:	460d      	mov	r5, r1
 8013b42:	e716      	b.n	8013972 <__kernel_rem_pio2+0x2c2>
 8013b44:	9906      	ldr	r1, [sp, #24]
 8013b46:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8013b4a:	9106      	str	r1, [sp, #24]
 8013b4c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8013b50:	f7ec fd1e 	bl	8000590 <__aeabi_dmul>
 8013b54:	4602      	mov	r2, r0
 8013b56:	460b      	mov	r3, r1
 8013b58:	4650      	mov	r0, sl
 8013b5a:	4659      	mov	r1, fp
 8013b5c:	f7ec fb62 	bl	8000224 <__adddf3>
 8013b60:	3601      	adds	r6, #1
 8013b62:	4682      	mov	sl, r0
 8013b64:	468b      	mov	fp, r1
 8013b66:	9b00      	ldr	r3, [sp, #0]
 8013b68:	429e      	cmp	r6, r3
 8013b6a:	dc01      	bgt.n	8013b70 <__kernel_rem_pio2+0x4c0>
 8013b6c:	42ae      	cmp	r6, r5
 8013b6e:	dde9      	ble.n	8013b44 <__kernel_rem_pio2+0x494>
 8013b70:	ab48      	add	r3, sp, #288	@ 0x120
 8013b72:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013b76:	e9c5 ab00 	strd	sl, fp, [r5]
 8013b7a:	3c01      	subs	r4, #1
 8013b7c:	e6fd      	b.n	801397a <__kernel_rem_pio2+0x2ca>
 8013b7e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013b80:	2b02      	cmp	r3, #2
 8013b82:	dc0b      	bgt.n	8013b9c <__kernel_rem_pio2+0x4ec>
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	dc35      	bgt.n	8013bf4 <__kernel_rem_pio2+0x544>
 8013b88:	d059      	beq.n	8013c3e <__kernel_rem_pio2+0x58e>
 8013b8a:	9b02      	ldr	r3, [sp, #8]
 8013b8c:	f003 0007 	and.w	r0, r3, #7
 8013b90:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8013b94:	ecbd 8b02 	vpop	{d8}
 8013b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b9c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013b9e:	2b03      	cmp	r3, #3
 8013ba0:	d1f3      	bne.n	8013b8a <__kernel_rem_pio2+0x4da>
 8013ba2:	9b05      	ldr	r3, [sp, #20]
 8013ba4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013ba8:	eb0d 0403 	add.w	r4, sp, r3
 8013bac:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8013bb0:	4625      	mov	r5, r4
 8013bb2:	46c2      	mov	sl, r8
 8013bb4:	f1ba 0f00 	cmp.w	sl, #0
 8013bb8:	dc69      	bgt.n	8013c8e <__kernel_rem_pio2+0x5de>
 8013bba:	4645      	mov	r5, r8
 8013bbc:	2d01      	cmp	r5, #1
 8013bbe:	f300 8087 	bgt.w	8013cd0 <__kernel_rem_pio2+0x620>
 8013bc2:	9c05      	ldr	r4, [sp, #20]
 8013bc4:	ab48      	add	r3, sp, #288	@ 0x120
 8013bc6:	441c      	add	r4, r3
 8013bc8:	2000      	movs	r0, #0
 8013bca:	2100      	movs	r1, #0
 8013bcc:	f1b8 0f01 	cmp.w	r8, #1
 8013bd0:	f300 809c 	bgt.w	8013d0c <__kernel_rem_pio2+0x65c>
 8013bd4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8013bd8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8013bdc:	f1b9 0f00 	cmp.w	r9, #0
 8013be0:	f040 80a6 	bne.w	8013d30 <__kernel_rem_pio2+0x680>
 8013be4:	9b04      	ldr	r3, [sp, #16]
 8013be6:	e9c3 5600 	strd	r5, r6, [r3]
 8013bea:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8013bee:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013bf2:	e7ca      	b.n	8013b8a <__kernel_rem_pio2+0x4da>
 8013bf4:	9d05      	ldr	r5, [sp, #20]
 8013bf6:	ab48      	add	r3, sp, #288	@ 0x120
 8013bf8:	441d      	add	r5, r3
 8013bfa:	4644      	mov	r4, r8
 8013bfc:	2000      	movs	r0, #0
 8013bfe:	2100      	movs	r1, #0
 8013c00:	2c00      	cmp	r4, #0
 8013c02:	da35      	bge.n	8013c70 <__kernel_rem_pio2+0x5c0>
 8013c04:	f1b9 0f00 	cmp.w	r9, #0
 8013c08:	d038      	beq.n	8013c7c <__kernel_rem_pio2+0x5cc>
 8013c0a:	4602      	mov	r2, r0
 8013c0c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013c10:	9c04      	ldr	r4, [sp, #16]
 8013c12:	e9c4 2300 	strd	r2, r3, [r4]
 8013c16:	4602      	mov	r2, r0
 8013c18:	460b      	mov	r3, r1
 8013c1a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8013c1e:	f7ec faff 	bl	8000220 <__aeabi_dsub>
 8013c22:	ad4a      	add	r5, sp, #296	@ 0x128
 8013c24:	2401      	movs	r4, #1
 8013c26:	45a0      	cmp	r8, r4
 8013c28:	da2b      	bge.n	8013c82 <__kernel_rem_pio2+0x5d2>
 8013c2a:	f1b9 0f00 	cmp.w	r9, #0
 8013c2e:	d002      	beq.n	8013c36 <__kernel_rem_pio2+0x586>
 8013c30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013c34:	4619      	mov	r1, r3
 8013c36:	9b04      	ldr	r3, [sp, #16]
 8013c38:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8013c3c:	e7a5      	b.n	8013b8a <__kernel_rem_pio2+0x4da>
 8013c3e:	9c05      	ldr	r4, [sp, #20]
 8013c40:	ab48      	add	r3, sp, #288	@ 0x120
 8013c42:	441c      	add	r4, r3
 8013c44:	2000      	movs	r0, #0
 8013c46:	2100      	movs	r1, #0
 8013c48:	f1b8 0f00 	cmp.w	r8, #0
 8013c4c:	da09      	bge.n	8013c62 <__kernel_rem_pio2+0x5b2>
 8013c4e:	f1b9 0f00 	cmp.w	r9, #0
 8013c52:	d002      	beq.n	8013c5a <__kernel_rem_pio2+0x5aa>
 8013c54:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013c58:	4619      	mov	r1, r3
 8013c5a:	9b04      	ldr	r3, [sp, #16]
 8013c5c:	e9c3 0100 	strd	r0, r1, [r3]
 8013c60:	e793      	b.n	8013b8a <__kernel_rem_pio2+0x4da>
 8013c62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013c66:	f7ec fadd 	bl	8000224 <__adddf3>
 8013c6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8013c6e:	e7eb      	b.n	8013c48 <__kernel_rem_pio2+0x598>
 8013c70:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8013c74:	f7ec fad6 	bl	8000224 <__adddf3>
 8013c78:	3c01      	subs	r4, #1
 8013c7a:	e7c1      	b.n	8013c00 <__kernel_rem_pio2+0x550>
 8013c7c:	4602      	mov	r2, r0
 8013c7e:	460b      	mov	r3, r1
 8013c80:	e7c6      	b.n	8013c10 <__kernel_rem_pio2+0x560>
 8013c82:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8013c86:	f7ec facd 	bl	8000224 <__adddf3>
 8013c8a:	3401      	adds	r4, #1
 8013c8c:	e7cb      	b.n	8013c26 <__kernel_rem_pio2+0x576>
 8013c8e:	ed35 7b02 	vldmdb	r5!, {d7}
 8013c92:	ed8d 7b00 	vstr	d7, [sp]
 8013c96:	ed95 7b02 	vldr	d7, [r5, #8]
 8013c9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c9e:	ec53 2b17 	vmov	r2, r3, d7
 8013ca2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013ca6:	f7ec fabd 	bl	8000224 <__adddf3>
 8013caa:	4602      	mov	r2, r0
 8013cac:	460b      	mov	r3, r1
 8013cae:	4606      	mov	r6, r0
 8013cb0:	460f      	mov	r7, r1
 8013cb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013cb6:	f7ec fab3 	bl	8000220 <__aeabi_dsub>
 8013cba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013cbe:	f7ec fab1 	bl	8000224 <__adddf3>
 8013cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013cc6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8013cca:	e9c5 6700 	strd	r6, r7, [r5]
 8013cce:	e771      	b.n	8013bb4 <__kernel_rem_pio2+0x504>
 8013cd0:	ed34 7b02 	vldmdb	r4!, {d7}
 8013cd4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8013cd8:	ec51 0b17 	vmov	r0, r1, d7
 8013cdc:	4652      	mov	r2, sl
 8013cde:	465b      	mov	r3, fp
 8013ce0:	ed8d 7b00 	vstr	d7, [sp]
 8013ce4:	f7ec fa9e 	bl	8000224 <__adddf3>
 8013ce8:	4602      	mov	r2, r0
 8013cea:	460b      	mov	r3, r1
 8013cec:	4606      	mov	r6, r0
 8013cee:	460f      	mov	r7, r1
 8013cf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013cf4:	f7ec fa94 	bl	8000220 <__aeabi_dsub>
 8013cf8:	4652      	mov	r2, sl
 8013cfa:	465b      	mov	r3, fp
 8013cfc:	f7ec fa92 	bl	8000224 <__adddf3>
 8013d00:	3d01      	subs	r5, #1
 8013d02:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013d06:	e9c4 6700 	strd	r6, r7, [r4]
 8013d0a:	e757      	b.n	8013bbc <__kernel_rem_pio2+0x50c>
 8013d0c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013d10:	f7ec fa88 	bl	8000224 <__adddf3>
 8013d14:	f108 38ff 	add.w	r8, r8, #4294967295
 8013d18:	e758      	b.n	8013bcc <__kernel_rem_pio2+0x51c>
 8013d1a:	bf00      	nop
 8013d1c:	f3af 8000 	nop.w
	...
 8013d28:	41700000 	.word	0x41700000
 8013d2c:	3e700000 	.word	0x3e700000
 8013d30:	9b04      	ldr	r3, [sp, #16]
 8013d32:	9a04      	ldr	r2, [sp, #16]
 8013d34:	601d      	str	r5, [r3, #0]
 8013d36:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8013d3a:	605c      	str	r4, [r3, #4]
 8013d3c:	609f      	str	r7, [r3, #8]
 8013d3e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8013d42:	60d3      	str	r3, [r2, #12]
 8013d44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013d48:	6110      	str	r0, [r2, #16]
 8013d4a:	6153      	str	r3, [r2, #20]
 8013d4c:	e71d      	b.n	8013b8a <__kernel_rem_pio2+0x4da>
 8013d4e:	bf00      	nop

08013d50 <__kernel_rem_pio2f>:
 8013d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d54:	ed2d 8b04 	vpush	{d8-d9}
 8013d58:	b0d9      	sub	sp, #356	@ 0x164
 8013d5a:	4690      	mov	r8, r2
 8013d5c:	9001      	str	r0, [sp, #4]
 8013d5e:	4ab6      	ldr	r2, [pc, #728]	@ (8014038 <__kernel_rem_pio2f+0x2e8>)
 8013d60:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8013d62:	f118 0f04 	cmn.w	r8, #4
 8013d66:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8013d6a:	460f      	mov	r7, r1
 8013d6c:	f103 3bff 	add.w	fp, r3, #4294967295
 8013d70:	db26      	blt.n	8013dc0 <__kernel_rem_pio2f+0x70>
 8013d72:	f1b8 0203 	subs.w	r2, r8, #3
 8013d76:	bf48      	it	mi
 8013d78:	f108 0204 	addmi.w	r2, r8, #4
 8013d7c:	10d2      	asrs	r2, r2, #3
 8013d7e:	1c55      	adds	r5, r2, #1
 8013d80:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013d82:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8014048 <__kernel_rem_pio2f+0x2f8>
 8013d86:	00e8      	lsls	r0, r5, #3
 8013d88:	eba2 060b 	sub.w	r6, r2, fp
 8013d8c:	9002      	str	r0, [sp, #8]
 8013d8e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8013d92:	eb0a 0c0b 	add.w	ip, sl, fp
 8013d96:	ac1c      	add	r4, sp, #112	@ 0x70
 8013d98:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8013d9c:	2000      	movs	r0, #0
 8013d9e:	4560      	cmp	r0, ip
 8013da0:	dd10      	ble.n	8013dc4 <__kernel_rem_pio2f+0x74>
 8013da2:	a91c      	add	r1, sp, #112	@ 0x70
 8013da4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8013da8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8013dac:	2600      	movs	r6, #0
 8013dae:	4556      	cmp	r6, sl
 8013db0:	dc24      	bgt.n	8013dfc <__kernel_rem_pio2f+0xac>
 8013db2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013db6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8014048 <__kernel_rem_pio2f+0x2f8>
 8013dba:	4684      	mov	ip, r0
 8013dbc:	2400      	movs	r4, #0
 8013dbe:	e016      	b.n	8013dee <__kernel_rem_pio2f+0x9e>
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	e7dc      	b.n	8013d7e <__kernel_rem_pio2f+0x2e>
 8013dc4:	42c6      	cmn	r6, r0
 8013dc6:	bf5d      	ittte	pl
 8013dc8:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8013dcc:	ee07 1a90 	vmovpl	s15, r1
 8013dd0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013dd4:	eef0 7a47 	vmovmi.f32	s15, s14
 8013dd8:	ece4 7a01 	vstmia	r4!, {s15}
 8013ddc:	3001      	adds	r0, #1
 8013dde:	e7de      	b.n	8013d9e <__kernel_rem_pio2f+0x4e>
 8013de0:	ecfe 6a01 	vldmia	lr!, {s13}
 8013de4:	ed3c 7a01 	vldmdb	ip!, {s14}
 8013de8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013dec:	3401      	adds	r4, #1
 8013dee:	455c      	cmp	r4, fp
 8013df0:	ddf6      	ble.n	8013de0 <__kernel_rem_pio2f+0x90>
 8013df2:	ece9 7a01 	vstmia	r9!, {s15}
 8013df6:	3601      	adds	r6, #1
 8013df8:	3004      	adds	r0, #4
 8013dfa:	e7d8      	b.n	8013dae <__kernel_rem_pio2f+0x5e>
 8013dfc:	a908      	add	r1, sp, #32
 8013dfe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013e02:	9104      	str	r1, [sp, #16]
 8013e04:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013e06:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8014044 <__kernel_rem_pio2f+0x2f4>
 8013e0a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8014040 <__kernel_rem_pio2f+0x2f0>
 8013e0e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013e12:	9203      	str	r2, [sp, #12]
 8013e14:	4654      	mov	r4, sl
 8013e16:	00a2      	lsls	r2, r4, #2
 8013e18:	9205      	str	r2, [sp, #20]
 8013e1a:	aa58      	add	r2, sp, #352	@ 0x160
 8013e1c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8013e20:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8013e24:	a944      	add	r1, sp, #272	@ 0x110
 8013e26:	aa08      	add	r2, sp, #32
 8013e28:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8013e2c:	4694      	mov	ip, r2
 8013e2e:	4626      	mov	r6, r4
 8013e30:	2e00      	cmp	r6, #0
 8013e32:	dc4c      	bgt.n	8013ece <__kernel_rem_pio2f+0x17e>
 8013e34:	4628      	mov	r0, r5
 8013e36:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013e3a:	f7ff fbd3 	bl	80135e4 <scalbnf>
 8013e3e:	eeb0 8a40 	vmov.f32	s16, s0
 8013e42:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8013e46:	ee28 0a00 	vmul.f32	s0, s16, s0
 8013e4a:	f000 fa65 	bl	8014318 <floorf>
 8013e4e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8013e52:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013e56:	2d00      	cmp	r5, #0
 8013e58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013e5c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013e60:	ee17 9a90 	vmov	r9, s15
 8013e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e68:	ee38 8a67 	vsub.f32	s16, s16, s15
 8013e6c:	dd41      	ble.n	8013ef2 <__kernel_rem_pio2f+0x1a2>
 8013e6e:	f104 3cff 	add.w	ip, r4, #4294967295
 8013e72:	a908      	add	r1, sp, #32
 8013e74:	f1c5 0e08 	rsb	lr, r5, #8
 8013e78:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8013e7c:	fa46 f00e 	asr.w	r0, r6, lr
 8013e80:	4481      	add	r9, r0
 8013e82:	fa00 f00e 	lsl.w	r0, r0, lr
 8013e86:	1a36      	subs	r6, r6, r0
 8013e88:	f1c5 0007 	rsb	r0, r5, #7
 8013e8c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8013e90:	4106      	asrs	r6, r0
 8013e92:	2e00      	cmp	r6, #0
 8013e94:	dd3c      	ble.n	8013f10 <__kernel_rem_pio2f+0x1c0>
 8013e96:	f04f 0e00 	mov.w	lr, #0
 8013e9a:	f109 0901 	add.w	r9, r9, #1
 8013e9e:	4670      	mov	r0, lr
 8013ea0:	4574      	cmp	r4, lr
 8013ea2:	dc68      	bgt.n	8013f76 <__kernel_rem_pio2f+0x226>
 8013ea4:	2d00      	cmp	r5, #0
 8013ea6:	dd03      	ble.n	8013eb0 <__kernel_rem_pio2f+0x160>
 8013ea8:	2d01      	cmp	r5, #1
 8013eaa:	d074      	beq.n	8013f96 <__kernel_rem_pio2f+0x246>
 8013eac:	2d02      	cmp	r5, #2
 8013eae:	d07d      	beq.n	8013fac <__kernel_rem_pio2f+0x25c>
 8013eb0:	2e02      	cmp	r6, #2
 8013eb2:	d12d      	bne.n	8013f10 <__kernel_rem_pio2f+0x1c0>
 8013eb4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013eb8:	ee30 8a48 	vsub.f32	s16, s0, s16
 8013ebc:	b340      	cbz	r0, 8013f10 <__kernel_rem_pio2f+0x1c0>
 8013ebe:	4628      	mov	r0, r5
 8013ec0:	9306      	str	r3, [sp, #24]
 8013ec2:	f7ff fb8f 	bl	80135e4 <scalbnf>
 8013ec6:	9b06      	ldr	r3, [sp, #24]
 8013ec8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013ecc:	e020      	b.n	8013f10 <__kernel_rem_pio2f+0x1c0>
 8013ece:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013ed2:	3e01      	subs	r6, #1
 8013ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013edc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013ee0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013ee4:	ecac 0a01 	vstmia	ip!, {s0}
 8013ee8:	ed30 0a01 	vldmdb	r0!, {s0}
 8013eec:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013ef0:	e79e      	b.n	8013e30 <__kernel_rem_pio2f+0xe0>
 8013ef2:	d105      	bne.n	8013f00 <__kernel_rem_pio2f+0x1b0>
 8013ef4:	1e60      	subs	r0, r4, #1
 8013ef6:	a908      	add	r1, sp, #32
 8013ef8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8013efc:	11f6      	asrs	r6, r6, #7
 8013efe:	e7c8      	b.n	8013e92 <__kernel_rem_pio2f+0x142>
 8013f00:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013f04:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f0c:	da31      	bge.n	8013f72 <__kernel_rem_pio2f+0x222>
 8013f0e:	2600      	movs	r6, #0
 8013f10:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f18:	f040 8098 	bne.w	801404c <__kernel_rem_pio2f+0x2fc>
 8013f1c:	1e60      	subs	r0, r4, #1
 8013f1e:	2200      	movs	r2, #0
 8013f20:	4550      	cmp	r0, sl
 8013f22:	da4b      	bge.n	8013fbc <__kernel_rem_pio2f+0x26c>
 8013f24:	2a00      	cmp	r2, #0
 8013f26:	d065      	beq.n	8013ff4 <__kernel_rem_pio2f+0x2a4>
 8013f28:	3c01      	subs	r4, #1
 8013f2a:	ab08      	add	r3, sp, #32
 8013f2c:	3d08      	subs	r5, #8
 8013f2e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d0f8      	beq.n	8013f28 <__kernel_rem_pio2f+0x1d8>
 8013f36:	4628      	mov	r0, r5
 8013f38:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013f3c:	f7ff fb52 	bl	80135e4 <scalbnf>
 8013f40:	1c63      	adds	r3, r4, #1
 8013f42:	aa44      	add	r2, sp, #272	@ 0x110
 8013f44:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8014044 <__kernel_rem_pio2f+0x2f4>
 8013f48:	0099      	lsls	r1, r3, #2
 8013f4a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8013f4e:	4623      	mov	r3, r4
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	f280 80a9 	bge.w	80140a8 <__kernel_rem_pio2f+0x358>
 8013f56:	4623      	mov	r3, r4
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	f2c0 80c7 	blt.w	80140ec <__kernel_rem_pio2f+0x39c>
 8013f5e:	aa44      	add	r2, sp, #272	@ 0x110
 8013f60:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8013f64:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801403c <__kernel_rem_pio2f+0x2ec>
 8013f68:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8014048 <__kernel_rem_pio2f+0x2f8>
 8013f6c:	2000      	movs	r0, #0
 8013f6e:	1ae2      	subs	r2, r4, r3
 8013f70:	e0b1      	b.n	80140d6 <__kernel_rem_pio2f+0x386>
 8013f72:	2602      	movs	r6, #2
 8013f74:	e78f      	b.n	8013e96 <__kernel_rem_pio2f+0x146>
 8013f76:	f852 1b04 	ldr.w	r1, [r2], #4
 8013f7a:	b948      	cbnz	r0, 8013f90 <__kernel_rem_pio2f+0x240>
 8013f7c:	b121      	cbz	r1, 8013f88 <__kernel_rem_pio2f+0x238>
 8013f7e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8013f82:	f842 1c04 	str.w	r1, [r2, #-4]
 8013f86:	2101      	movs	r1, #1
 8013f88:	f10e 0e01 	add.w	lr, lr, #1
 8013f8c:	4608      	mov	r0, r1
 8013f8e:	e787      	b.n	8013ea0 <__kernel_rem_pio2f+0x150>
 8013f90:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8013f94:	e7f5      	b.n	8013f82 <__kernel_rem_pio2f+0x232>
 8013f96:	f104 3cff 	add.w	ip, r4, #4294967295
 8013f9a:	aa08      	add	r2, sp, #32
 8013f9c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8013fa0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8013fa4:	a908      	add	r1, sp, #32
 8013fa6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8013faa:	e781      	b.n	8013eb0 <__kernel_rem_pio2f+0x160>
 8013fac:	f104 3cff 	add.w	ip, r4, #4294967295
 8013fb0:	aa08      	add	r2, sp, #32
 8013fb2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8013fb6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8013fba:	e7f3      	b.n	8013fa4 <__kernel_rem_pio2f+0x254>
 8013fbc:	a908      	add	r1, sp, #32
 8013fbe:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8013fc2:	3801      	subs	r0, #1
 8013fc4:	430a      	orrs	r2, r1
 8013fc6:	e7ab      	b.n	8013f20 <__kernel_rem_pio2f+0x1d0>
 8013fc8:	3201      	adds	r2, #1
 8013fca:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8013fce:	2e00      	cmp	r6, #0
 8013fd0:	d0fa      	beq.n	8013fc8 <__kernel_rem_pio2f+0x278>
 8013fd2:	9905      	ldr	r1, [sp, #20]
 8013fd4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8013fd8:	eb0d 0001 	add.w	r0, sp, r1
 8013fdc:	18e6      	adds	r6, r4, r3
 8013fde:	a91c      	add	r1, sp, #112	@ 0x70
 8013fe0:	f104 0c01 	add.w	ip, r4, #1
 8013fe4:	384c      	subs	r0, #76	@ 0x4c
 8013fe6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8013fea:	4422      	add	r2, r4
 8013fec:	4562      	cmp	r2, ip
 8013fee:	da04      	bge.n	8013ffa <__kernel_rem_pio2f+0x2aa>
 8013ff0:	4614      	mov	r4, r2
 8013ff2:	e710      	b.n	8013e16 <__kernel_rem_pio2f+0xc6>
 8013ff4:	9804      	ldr	r0, [sp, #16]
 8013ff6:	2201      	movs	r2, #1
 8013ff8:	e7e7      	b.n	8013fca <__kernel_rem_pio2f+0x27a>
 8013ffa:	9903      	ldr	r1, [sp, #12]
 8013ffc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8014000:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8014004:	9105      	str	r1, [sp, #20]
 8014006:	ee07 1a90 	vmov	s15, r1
 801400a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801400e:	2400      	movs	r4, #0
 8014010:	ece6 7a01 	vstmia	r6!, {s15}
 8014014:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8014048 <__kernel_rem_pio2f+0x2f8>
 8014018:	46b1      	mov	r9, r6
 801401a:	455c      	cmp	r4, fp
 801401c:	dd04      	ble.n	8014028 <__kernel_rem_pio2f+0x2d8>
 801401e:	ece0 7a01 	vstmia	r0!, {s15}
 8014022:	f10c 0c01 	add.w	ip, ip, #1
 8014026:	e7e1      	b.n	8013fec <__kernel_rem_pio2f+0x29c>
 8014028:	ecfe 6a01 	vldmia	lr!, {s13}
 801402c:	ed39 7a01 	vldmdb	r9!, {s14}
 8014030:	3401      	adds	r4, #1
 8014032:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014036:	e7f0      	b.n	801401a <__kernel_rem_pio2f+0x2ca>
 8014038:	08014a0c 	.word	0x08014a0c
 801403c:	080149e0 	.word	0x080149e0
 8014040:	43800000 	.word	0x43800000
 8014044:	3b800000 	.word	0x3b800000
 8014048:	00000000 	.word	0x00000000
 801404c:	9b02      	ldr	r3, [sp, #8]
 801404e:	eeb0 0a48 	vmov.f32	s0, s16
 8014052:	eba3 0008 	sub.w	r0, r3, r8
 8014056:	f7ff fac5 	bl	80135e4 <scalbnf>
 801405a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8014040 <__kernel_rem_pio2f+0x2f0>
 801405e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014066:	db19      	blt.n	801409c <__kernel_rem_pio2f+0x34c>
 8014068:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8014044 <__kernel_rem_pio2f+0x2f4>
 801406c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014070:	aa08      	add	r2, sp, #32
 8014072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014076:	3508      	adds	r5, #8
 8014078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801407c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014084:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014088:	ee10 3a10 	vmov	r3, s0
 801408c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014090:	ee17 3a90 	vmov	r3, s15
 8014094:	3401      	adds	r4, #1
 8014096:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801409a:	e74c      	b.n	8013f36 <__kernel_rem_pio2f+0x1e6>
 801409c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80140a0:	aa08      	add	r2, sp, #32
 80140a2:	ee10 3a10 	vmov	r3, s0
 80140a6:	e7f6      	b.n	8014096 <__kernel_rem_pio2f+0x346>
 80140a8:	a808      	add	r0, sp, #32
 80140aa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80140ae:	9001      	str	r0, [sp, #4]
 80140b0:	ee07 0a90 	vmov	s15, r0
 80140b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140b8:	3b01      	subs	r3, #1
 80140ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 80140be:	ee20 0a07 	vmul.f32	s0, s0, s14
 80140c2:	ed62 7a01 	vstmdb	r2!, {s15}
 80140c6:	e743      	b.n	8013f50 <__kernel_rem_pio2f+0x200>
 80140c8:	ecfc 6a01 	vldmia	ip!, {s13}
 80140cc:	ecb5 7a01 	vldmia	r5!, {s14}
 80140d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80140d4:	3001      	adds	r0, #1
 80140d6:	4550      	cmp	r0, sl
 80140d8:	dc01      	bgt.n	80140de <__kernel_rem_pio2f+0x38e>
 80140da:	4290      	cmp	r0, r2
 80140dc:	ddf4      	ble.n	80140c8 <__kernel_rem_pio2f+0x378>
 80140de:	a858      	add	r0, sp, #352	@ 0x160
 80140e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80140e4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80140e8:	3b01      	subs	r3, #1
 80140ea:	e735      	b.n	8013f58 <__kernel_rem_pio2f+0x208>
 80140ec:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80140ee:	2b02      	cmp	r3, #2
 80140f0:	dc09      	bgt.n	8014106 <__kernel_rem_pio2f+0x3b6>
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	dc27      	bgt.n	8014146 <__kernel_rem_pio2f+0x3f6>
 80140f6:	d040      	beq.n	801417a <__kernel_rem_pio2f+0x42a>
 80140f8:	f009 0007 	and.w	r0, r9, #7
 80140fc:	b059      	add	sp, #356	@ 0x164
 80140fe:	ecbd 8b04 	vpop	{d8-d9}
 8014102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014106:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8014108:	2b03      	cmp	r3, #3
 801410a:	d1f5      	bne.n	80140f8 <__kernel_rem_pio2f+0x3a8>
 801410c:	aa30      	add	r2, sp, #192	@ 0xc0
 801410e:	1f0b      	subs	r3, r1, #4
 8014110:	4413      	add	r3, r2
 8014112:	461a      	mov	r2, r3
 8014114:	4620      	mov	r0, r4
 8014116:	2800      	cmp	r0, #0
 8014118:	dc50      	bgt.n	80141bc <__kernel_rem_pio2f+0x46c>
 801411a:	4622      	mov	r2, r4
 801411c:	2a01      	cmp	r2, #1
 801411e:	dc5d      	bgt.n	80141dc <__kernel_rem_pio2f+0x48c>
 8014120:	ab30      	add	r3, sp, #192	@ 0xc0
 8014122:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8014048 <__kernel_rem_pio2f+0x2f8>
 8014126:	440b      	add	r3, r1
 8014128:	2c01      	cmp	r4, #1
 801412a:	dc67      	bgt.n	80141fc <__kernel_rem_pio2f+0x4ac>
 801412c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8014130:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8014134:	2e00      	cmp	r6, #0
 8014136:	d167      	bne.n	8014208 <__kernel_rem_pio2f+0x4b8>
 8014138:	edc7 6a00 	vstr	s13, [r7]
 801413c:	ed87 7a01 	vstr	s14, [r7, #4]
 8014140:	edc7 7a02 	vstr	s15, [r7, #8]
 8014144:	e7d8      	b.n	80140f8 <__kernel_rem_pio2f+0x3a8>
 8014146:	ab30      	add	r3, sp, #192	@ 0xc0
 8014148:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8014048 <__kernel_rem_pio2f+0x2f8>
 801414c:	440b      	add	r3, r1
 801414e:	4622      	mov	r2, r4
 8014150:	2a00      	cmp	r2, #0
 8014152:	da24      	bge.n	801419e <__kernel_rem_pio2f+0x44e>
 8014154:	b34e      	cbz	r6, 80141aa <__kernel_rem_pio2f+0x45a>
 8014156:	eef1 7a47 	vneg.f32	s15, s14
 801415a:	edc7 7a00 	vstr	s15, [r7]
 801415e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8014162:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014166:	aa31      	add	r2, sp, #196	@ 0xc4
 8014168:	2301      	movs	r3, #1
 801416a:	429c      	cmp	r4, r3
 801416c:	da20      	bge.n	80141b0 <__kernel_rem_pio2f+0x460>
 801416e:	b10e      	cbz	r6, 8014174 <__kernel_rem_pio2f+0x424>
 8014170:	eef1 7a67 	vneg.f32	s15, s15
 8014174:	edc7 7a01 	vstr	s15, [r7, #4]
 8014178:	e7be      	b.n	80140f8 <__kernel_rem_pio2f+0x3a8>
 801417a:	ab30      	add	r3, sp, #192	@ 0xc0
 801417c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8014048 <__kernel_rem_pio2f+0x2f8>
 8014180:	440b      	add	r3, r1
 8014182:	2c00      	cmp	r4, #0
 8014184:	da05      	bge.n	8014192 <__kernel_rem_pio2f+0x442>
 8014186:	b10e      	cbz	r6, 801418c <__kernel_rem_pio2f+0x43c>
 8014188:	eef1 7a67 	vneg.f32	s15, s15
 801418c:	edc7 7a00 	vstr	s15, [r7]
 8014190:	e7b2      	b.n	80140f8 <__kernel_rem_pio2f+0x3a8>
 8014192:	ed33 7a01 	vldmdb	r3!, {s14}
 8014196:	3c01      	subs	r4, #1
 8014198:	ee77 7a87 	vadd.f32	s15, s15, s14
 801419c:	e7f1      	b.n	8014182 <__kernel_rem_pio2f+0x432>
 801419e:	ed73 7a01 	vldmdb	r3!, {s15}
 80141a2:	3a01      	subs	r2, #1
 80141a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80141a8:	e7d2      	b.n	8014150 <__kernel_rem_pio2f+0x400>
 80141aa:	eef0 7a47 	vmov.f32	s15, s14
 80141ae:	e7d4      	b.n	801415a <__kernel_rem_pio2f+0x40a>
 80141b0:	ecb2 7a01 	vldmia	r2!, {s14}
 80141b4:	3301      	adds	r3, #1
 80141b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80141ba:	e7d6      	b.n	801416a <__kernel_rem_pio2f+0x41a>
 80141bc:	ed72 7a01 	vldmdb	r2!, {s15}
 80141c0:	edd2 6a01 	vldr	s13, [r2, #4]
 80141c4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80141c8:	3801      	subs	r0, #1
 80141ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80141ce:	ed82 7a00 	vstr	s14, [r2]
 80141d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141d6:	edc2 7a01 	vstr	s15, [r2, #4]
 80141da:	e79c      	b.n	8014116 <__kernel_rem_pio2f+0x3c6>
 80141dc:	ed73 7a01 	vldmdb	r3!, {s15}
 80141e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80141e4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80141e8:	3a01      	subs	r2, #1
 80141ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80141ee:	ed83 7a00 	vstr	s14, [r3]
 80141f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80141f6:	edc3 7a01 	vstr	s15, [r3, #4]
 80141fa:	e78f      	b.n	801411c <__kernel_rem_pio2f+0x3cc>
 80141fc:	ed33 7a01 	vldmdb	r3!, {s14}
 8014200:	3c01      	subs	r4, #1
 8014202:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014206:	e78f      	b.n	8014128 <__kernel_rem_pio2f+0x3d8>
 8014208:	eef1 6a66 	vneg.f32	s13, s13
 801420c:	eeb1 7a47 	vneg.f32	s14, s14
 8014210:	edc7 6a00 	vstr	s13, [r7]
 8014214:	ed87 7a01 	vstr	s14, [r7, #4]
 8014218:	eef1 7a67 	vneg.f32	s15, s15
 801421c:	e790      	b.n	8014140 <__kernel_rem_pio2f+0x3f0>
 801421e:	bf00      	nop

08014220 <floor>:
 8014220:	ec51 0b10 	vmov	r0, r1, d0
 8014224:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801422c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8014230:	2e13      	cmp	r6, #19
 8014232:	460c      	mov	r4, r1
 8014234:	4605      	mov	r5, r0
 8014236:	4680      	mov	r8, r0
 8014238:	dc34      	bgt.n	80142a4 <floor+0x84>
 801423a:	2e00      	cmp	r6, #0
 801423c:	da17      	bge.n	801426e <floor+0x4e>
 801423e:	a332      	add	r3, pc, #200	@ (adr r3, 8014308 <floor+0xe8>)
 8014240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014244:	f7eb ffee 	bl	8000224 <__adddf3>
 8014248:	2200      	movs	r2, #0
 801424a:	2300      	movs	r3, #0
 801424c:	f7ec fc30 	bl	8000ab0 <__aeabi_dcmpgt>
 8014250:	b150      	cbz	r0, 8014268 <floor+0x48>
 8014252:	2c00      	cmp	r4, #0
 8014254:	da55      	bge.n	8014302 <floor+0xe2>
 8014256:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801425a:	432c      	orrs	r4, r5
 801425c:	2500      	movs	r5, #0
 801425e:	42ac      	cmp	r4, r5
 8014260:	4c2b      	ldr	r4, [pc, #172]	@ (8014310 <floor+0xf0>)
 8014262:	bf08      	it	eq
 8014264:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8014268:	4621      	mov	r1, r4
 801426a:	4628      	mov	r0, r5
 801426c:	e023      	b.n	80142b6 <floor+0x96>
 801426e:	4f29      	ldr	r7, [pc, #164]	@ (8014314 <floor+0xf4>)
 8014270:	4137      	asrs	r7, r6
 8014272:	ea01 0307 	and.w	r3, r1, r7
 8014276:	4303      	orrs	r3, r0
 8014278:	d01d      	beq.n	80142b6 <floor+0x96>
 801427a:	a323      	add	r3, pc, #140	@ (adr r3, 8014308 <floor+0xe8>)
 801427c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014280:	f7eb ffd0 	bl	8000224 <__adddf3>
 8014284:	2200      	movs	r2, #0
 8014286:	2300      	movs	r3, #0
 8014288:	f7ec fc12 	bl	8000ab0 <__aeabi_dcmpgt>
 801428c:	2800      	cmp	r0, #0
 801428e:	d0eb      	beq.n	8014268 <floor+0x48>
 8014290:	2c00      	cmp	r4, #0
 8014292:	bfbe      	ittt	lt
 8014294:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8014298:	4133      	asrlt	r3, r6
 801429a:	18e4      	addlt	r4, r4, r3
 801429c:	ea24 0407 	bic.w	r4, r4, r7
 80142a0:	2500      	movs	r5, #0
 80142a2:	e7e1      	b.n	8014268 <floor+0x48>
 80142a4:	2e33      	cmp	r6, #51	@ 0x33
 80142a6:	dd0a      	ble.n	80142be <floor+0x9e>
 80142a8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80142ac:	d103      	bne.n	80142b6 <floor+0x96>
 80142ae:	4602      	mov	r2, r0
 80142b0:	460b      	mov	r3, r1
 80142b2:	f7eb ffb7 	bl	8000224 <__adddf3>
 80142b6:	ec41 0b10 	vmov	d0, r0, r1
 80142ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142be:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80142c2:	f04f 37ff 	mov.w	r7, #4294967295
 80142c6:	40df      	lsrs	r7, r3
 80142c8:	4207      	tst	r7, r0
 80142ca:	d0f4      	beq.n	80142b6 <floor+0x96>
 80142cc:	a30e      	add	r3, pc, #56	@ (adr r3, 8014308 <floor+0xe8>)
 80142ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142d2:	f7eb ffa7 	bl	8000224 <__adddf3>
 80142d6:	2200      	movs	r2, #0
 80142d8:	2300      	movs	r3, #0
 80142da:	f7ec fbe9 	bl	8000ab0 <__aeabi_dcmpgt>
 80142de:	2800      	cmp	r0, #0
 80142e0:	d0c2      	beq.n	8014268 <floor+0x48>
 80142e2:	2c00      	cmp	r4, #0
 80142e4:	da0a      	bge.n	80142fc <floor+0xdc>
 80142e6:	2e14      	cmp	r6, #20
 80142e8:	d101      	bne.n	80142ee <floor+0xce>
 80142ea:	3401      	adds	r4, #1
 80142ec:	e006      	b.n	80142fc <floor+0xdc>
 80142ee:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80142f2:	2301      	movs	r3, #1
 80142f4:	40b3      	lsls	r3, r6
 80142f6:	441d      	add	r5, r3
 80142f8:	4545      	cmp	r5, r8
 80142fa:	d3f6      	bcc.n	80142ea <floor+0xca>
 80142fc:	ea25 0507 	bic.w	r5, r5, r7
 8014300:	e7b2      	b.n	8014268 <floor+0x48>
 8014302:	2500      	movs	r5, #0
 8014304:	462c      	mov	r4, r5
 8014306:	e7af      	b.n	8014268 <floor+0x48>
 8014308:	8800759c 	.word	0x8800759c
 801430c:	7e37e43c 	.word	0x7e37e43c
 8014310:	bff00000 	.word	0xbff00000
 8014314:	000fffff 	.word	0x000fffff

08014318 <floorf>:
 8014318:	ee10 3a10 	vmov	r3, s0
 801431c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014320:	3a7f      	subs	r2, #127	@ 0x7f
 8014322:	2a16      	cmp	r2, #22
 8014324:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014328:	dc2b      	bgt.n	8014382 <floorf+0x6a>
 801432a:	2a00      	cmp	r2, #0
 801432c:	da12      	bge.n	8014354 <floorf+0x3c>
 801432e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014394 <floorf+0x7c>
 8014332:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014336:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801433a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801433e:	dd06      	ble.n	801434e <floorf+0x36>
 8014340:	2b00      	cmp	r3, #0
 8014342:	da24      	bge.n	801438e <floorf+0x76>
 8014344:	2900      	cmp	r1, #0
 8014346:	4b14      	ldr	r3, [pc, #80]	@ (8014398 <floorf+0x80>)
 8014348:	bf08      	it	eq
 801434a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801434e:	ee00 3a10 	vmov	s0, r3
 8014352:	4770      	bx	lr
 8014354:	4911      	ldr	r1, [pc, #68]	@ (801439c <floorf+0x84>)
 8014356:	4111      	asrs	r1, r2
 8014358:	420b      	tst	r3, r1
 801435a:	d0fa      	beq.n	8014352 <floorf+0x3a>
 801435c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8014394 <floorf+0x7c>
 8014360:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014364:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801436c:	ddef      	ble.n	801434e <floorf+0x36>
 801436e:	2b00      	cmp	r3, #0
 8014370:	bfbe      	ittt	lt
 8014372:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8014376:	fa40 f202 	asrlt.w	r2, r0, r2
 801437a:	189b      	addlt	r3, r3, r2
 801437c:	ea23 0301 	bic.w	r3, r3, r1
 8014380:	e7e5      	b.n	801434e <floorf+0x36>
 8014382:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8014386:	d3e4      	bcc.n	8014352 <floorf+0x3a>
 8014388:	ee30 0a00 	vadd.f32	s0, s0, s0
 801438c:	4770      	bx	lr
 801438e:	2300      	movs	r3, #0
 8014390:	e7dd      	b.n	801434e <floorf+0x36>
 8014392:	bf00      	nop
 8014394:	7149f2ca 	.word	0x7149f2ca
 8014398:	bf800000 	.word	0xbf800000
 801439c:	007fffff 	.word	0x007fffff

080143a0 <_init>:
 80143a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143a2:	bf00      	nop
 80143a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143a6:	bc08      	pop	{r3}
 80143a8:	469e      	mov	lr, r3
 80143aa:	4770      	bx	lr

080143ac <_fini>:
 80143ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ae:	bf00      	nop
 80143b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143b2:	bc08      	pop	{r3}
 80143b4:	469e      	mov	lr, r3
 80143b6:	4770      	bx	lr
