
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c090  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800c268  0800c268  0000d268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6b8  0800c6b8  0000e3b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c6b8  0800c6b8  0000d6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6c0  0800c6c0  0000e3b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6c0  0800c6c0  0000d6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c6c4  0800c6c4  0000d6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003b4  20000000  0800c6c8  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001af0  200003b4  0800ca7c  0000e3b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ea4  0800ca7c  0000eea4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e3b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029027  00000000  00000000  0000e3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d1c  00000000  00000000  0003740b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  0003c128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014a8  00000000  00000000  0003dbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c7d4  00000000  00000000  0003f088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027308  00000000  00000000  0006b85c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118ce6  00000000  00000000  00092b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ab84a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076d8  00000000  00000000  001ab890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001b2f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200003b4 	.word	0x200003b4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c250 	.word	0x0800c250

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200003b8 	.word	0x200003b8
 8000214:	0800c250 	.word	0x0800c250

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b988 	b.w	8000dbc <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	468e      	mov	lr, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	4688      	mov	r8, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d962      	bls.n	8000ba0 <__udivmoddi4+0xdc>
 8000ada:	fab2 f682 	clz	r6, r2
 8000ade:	b14e      	cbz	r6, 8000af4 <__udivmoddi4+0x30>
 8000ae0:	f1c6 0320 	rsb	r3, r6, #32
 8000ae4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	40b7      	lsls	r7, r6
 8000aee:	ea43 0808 	orr.w	r8, r3, r8
 8000af2:	40b4      	lsls	r4, r6
 8000af4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b00:	0c23      	lsrs	r3, r4, #16
 8000b02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d909      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b18:	f080 80ea 	bcs.w	8000cf0 <__udivmoddi4+0x22c>
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f240 80e7 	bls.w	8000cf0 <__udivmoddi4+0x22c>
 8000b22:	3902      	subs	r1, #2
 8000b24:	443b      	add	r3, r7
 8000b26:	1a9a      	subs	r2, r3, r2
 8000b28:	b2a3      	uxth	r3, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b3a:	459c      	cmp	ip, r3
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x8e>
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b44:	f080 80d6 	bcs.w	8000cf4 <__udivmoddi4+0x230>
 8000b48:	459c      	cmp	ip, r3
 8000b4a:	f240 80d3 	bls.w	8000cf4 <__udivmoddi4+0x230>
 8000b4e:	443b      	add	r3, r7
 8000b50:	3802      	subs	r0, #2
 8000b52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b56:	eba3 030c 	sub.w	r3, r3, ip
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11d      	cbz	r5, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40f3      	lsrs	r3, r6
 8000b60:	2200      	movs	r2, #0
 8000b62:	e9c5 3200 	strd	r3, r2, [r5]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d905      	bls.n	8000b7a <__udivmoddi4+0xb6>
 8000b6e:	b10d      	cbz	r5, 8000b74 <__udivmoddi4+0xb0>
 8000b70:	e9c5 0100 	strd	r0, r1, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	4608      	mov	r0, r1
 8000b78:	e7f5      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d146      	bne.n	8000c10 <__udivmoddi4+0x14c>
 8000b82:	4573      	cmp	r3, lr
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xc8>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 8105 	bhi.w	8000d96 <__udivmoddi4+0x2d2>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4690      	mov	r8, r2
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	d0e5      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000b9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b9e:	e7e2      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f000 8090 	beq.w	8000cc6 <__udivmoddi4+0x202>
 8000ba6:	fab2 f682 	clz	r6, r2
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	f040 80a4 	bne.w	8000cf8 <__udivmoddi4+0x234>
 8000bb0:	1a8a      	subs	r2, r1, r2
 8000bb2:	0c03      	lsrs	r3, r0, #16
 8000bb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb8:	b280      	uxth	r0, r0
 8000bba:	b2bc      	uxth	r4, r7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bc2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bca:	fb04 f20c 	mul.w	r2, r4, ip
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d907      	bls.n	8000be2 <__udivmoddi4+0x11e>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x11c>
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	f200 80e0 	bhi.w	8000da0 <__udivmoddi4+0x2dc>
 8000be0:	46c4      	mov	ip, r8
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000be8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bf0:	fb02 f404 	mul.w	r4, r2, r4
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x144>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x142>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f200 80ca 	bhi.w	8000d9a <__udivmoddi4+0x2d6>
 8000c06:	4602      	mov	r2, r0
 8000c08:	1b1b      	subs	r3, r3, r4
 8000c0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c0e:	e7a5      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c10:	f1c1 0620 	rsb	r6, r1, #32
 8000c14:	408b      	lsls	r3, r1
 8000c16:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1a:	431f      	orrs	r7, r3
 8000c1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c20:	fa20 f306 	lsr.w	r3, r0, r6
 8000c24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	fa1f fc87 	uxth.w	ip, r7
 8000c36:	fbbe f0f9 	udiv	r0, lr, r9
 8000c3a:	0c1c      	lsrs	r4, r3, #16
 8000c3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x1a0>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c56:	f080 809c 	bcs.w	8000d92 <__udivmoddi4+0x2ce>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8099 	bls.w	8000d92 <__udivmoddi4+0x2ce>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	eba4 040e 	sub.w	r4, r4, lr
 8000c68:	fa1f fe83 	uxth.w	lr, r3
 8000c6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c70:	fb09 4413 	mls	r4, r9, r3, r4
 8000c74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x1ce>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c86:	f080 8082 	bcs.w	8000d8e <__udivmoddi4+0x2ca>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d97f      	bls.n	8000d8e <__udivmoddi4+0x2ca>
 8000c8e:	3b02      	subs	r3, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c9e:	4564      	cmp	r4, ip
 8000ca0:	4673      	mov	r3, lr
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	d362      	bcc.n	8000d6c <__udivmoddi4+0x2a8>
 8000ca6:	d05f      	beq.n	8000d68 <__udivmoddi4+0x2a4>
 8000ca8:	b15d      	cbz	r5, 8000cc2 <__udivmoddi4+0x1fe>
 8000caa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cae:	eb64 0409 	sbc.w	r4, r4, r9
 8000cb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	e74f      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000cc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cca:	0c01      	lsrs	r1, r0, #16
 8000ccc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4638      	mov	r0, r7
 8000cda:	463c      	mov	r4, r7
 8000cdc:	46b8      	mov	r8, r7
 8000cde:	46be      	mov	lr, r7
 8000ce0:	2620      	movs	r6, #32
 8000ce2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ce6:	eba2 0208 	sub.w	r2, r2, r8
 8000cea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cee:	e766      	b.n	8000bbe <__udivmoddi4+0xfa>
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	e718      	b.n	8000b26 <__udivmoddi4+0x62>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	e72c      	b.n	8000b52 <__udivmoddi4+0x8e>
 8000cf8:	f1c6 0220 	rsb	r2, r6, #32
 8000cfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	40b1      	lsls	r1, r6
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d12:	b2bc      	uxth	r4, r7
 8000d14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d18:	0c11      	lsrs	r1, r2, #16
 8000d1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1e:	fb08 f904 	mul.w	r9, r8, r4
 8000d22:	40b0      	lsls	r0, r6
 8000d24:	4589      	cmp	r9, r1
 8000d26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d2a:	b280      	uxth	r0, r0
 8000d2c:	d93e      	bls.n	8000dac <__udivmoddi4+0x2e8>
 8000d2e:	1879      	adds	r1, r7, r1
 8000d30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d34:	d201      	bcs.n	8000d3a <__udivmoddi4+0x276>
 8000d36:	4589      	cmp	r9, r1
 8000d38:	d81f      	bhi.n	8000d7a <__udivmoddi4+0x2b6>
 8000d3a:	eba1 0109 	sub.w	r1, r1, r9
 8000d3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d42:	fb09 f804 	mul.w	r8, r9, r4
 8000d46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d50:	4542      	cmp	r2, r8
 8000d52:	d229      	bcs.n	8000da8 <__udivmoddi4+0x2e4>
 8000d54:	18ba      	adds	r2, r7, r2
 8000d56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d5a:	d2c4      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d5c:	4542      	cmp	r2, r8
 8000d5e:	d2c2      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d60:	f1a9 0102 	sub.w	r1, r9, #2
 8000d64:	443a      	add	r2, r7
 8000d66:	e7be      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000d68:	45f0      	cmp	r8, lr
 8000d6a:	d29d      	bcs.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d74:	3801      	subs	r0, #1
 8000d76:	46e1      	mov	r9, ip
 8000d78:	e796      	b.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d7a:	eba7 0909 	sub.w	r9, r7, r9
 8000d7e:	4449      	add	r1, r9
 8000d80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d88:	fb09 f804 	mul.w	r8, r9, r4
 8000d8c:	e7db      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d8e:	4673      	mov	r3, lr
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1ce>
 8000d92:	4650      	mov	r0, sl
 8000d94:	e766      	b.n	8000c64 <__udivmoddi4+0x1a0>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e6fd      	b.n	8000b96 <__udivmoddi4+0xd2>
 8000d9a:	443b      	add	r3, r7
 8000d9c:	3a02      	subs	r2, #2
 8000d9e:	e733      	b.n	8000c08 <__udivmoddi4+0x144>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	e71c      	b.n	8000be2 <__udivmoddi4+0x11e>
 8000da8:	4649      	mov	r1, r9
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000dac:	eba1 0109 	sub.w	r1, r1, r9
 8000db0:	46c4      	mov	ip, r8
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fb09 f804 	mul.w	r8, r9, r4
 8000dba:	e7c4      	b.n	8000d46 <__udivmoddi4+0x282>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6178      	str	r0, [r7, #20]
 8000dc8:	6139      	str	r1, [r7, #16]
 8000dca:	60fa      	str	r2, [r7, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dd2:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000dee:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	e008      	b.n	8000e14 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3301      	adds	r3, #1
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	69fa      	ldr	r2, [r7, #28]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3f2      	bcc.n	8000e02 <ADC_DMA_Init+0x42>
    }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	217f      	movs	r1, #127	@ 0x7f
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 fbe1 	bl	8005600 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6859      	ldr	r1, [r3, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f003 fcca 	bl	80047e4 <HAL_ADC_Start_DMA>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	e012      	b.n	8000e98 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	4413      	add	r3, r2
 8000e84:	617b      	str	r3, [r7, #20]
        samples++;
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7b1b      	ldrb	r3, [r3, #12]
 8000e90:	461a      	mov	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4413      	add	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d3e7      	bcc.n	8000e72 <ADC_DMA_GetValue+0x1a>
    }


    // Calculate raw ADC value and convert to voltage
    if (samples > 0) {
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00f      	beq.n	8000ec8 <ADC_DMA_GetValue+0x70>
        float raw_value = (float)sum / samples;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	ee07 3a90 	vmov	s15, r3
 8000eb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ec0:	edc7 7a02 	vstr	s15, [r7, #8]
        return raw_value;
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	e001      	b.n	8000ecc <ADC_DMA_GetValue+0x74>
    }

    return 0.0f;
 8000ec8:	f04f 0300 	mov.w	r3, #0
}
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <ADC_DMA_GetJoystick>:

    // Compute current using WCS1700 formula
    return 15.1793457908771 * voltage - 24.8674344063837;
}

float ADC_DMA_GetJoystick(ADC_DMA *adc_dma, uint8_t channel_index, float joydata) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eee:	72fb      	strb	r3, [r7, #11]
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff ffaf 	bl	8000e58 <ADC_DMA_GetValue>
 8000efa:	ed87 0a05 	vstr	s0, [r7, #20]

    return mapf(value, 0.0, adc_dma->adc_resolution, 0.0, joydata);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f04:	ed97 2a01 	vldr	s4, [r7, #4]
 8000f08:	eddf 1a08 	vldr	s3, [pc, #32]	@ 8000f2c <ADC_DMA_GetJoystick+0x4c>
 8000f0c:	eeb0 1a67 	vmov.f32	s2, s15
 8000f10:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8000f2c <ADC_DMA_GetJoystick+0x4c>
 8000f14:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f18:	f000 fa92 	bl	8001440 <mapf>
 8000f1c:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f20:	eeb0 0a67 	vmov.f32	s0, s15
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	00000000 	.word	0x00000000

08000f30 <PID_CONTROLLER_Init>:
  if (_u > _upper_limit) return _upper_limit;
  else if (_u < _lower_limit) return _lower_limit;
  return (int32_t)_u;
}

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6178      	str	r0, [r7, #20]
 8000f38:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f3c:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f40:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f44:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	f04f 0200 	mov.w	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]

}
 8000f78:	bf00      	nop
 8000f7a:	371c      	adds	r7, #28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	88fa      	ldrh	r2, [r7, #6]
 8000f9e:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	3328      	adds	r3, #40	@ 0x28
 8000fa4:	88fa      	ldrh	r2, [r7, #6]
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fdc9 	bl	8001b40 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	8b3a      	ldrh	r2, [r7, #24]
 8000fb8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8000fc4:	bf00      	nop
 8000fc6:	3710      	adds	r7, #16
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fd8:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d15f      	bne.n	80010a6 <MDXX_set_range+0xda>
		if (duty == 0) {
 8000fe6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff2:	d115      	bne.n	8001020 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	3310      	adds	r3, #16
 8000ff8:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001178 <MDXX_set_range+0x1ac>
 8000ffc:	ed97 0a02 	vldr	s0, [r7, #8]
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fec5 	bl	8001d90 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3328      	adds	r3, #40	@ 0x28
 800100a:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001178 <MDXX_set_range+0x1ac>
 800100e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 febc 	bl	8001d90 <PWM_write_range>
			mdxx->cmd = 0;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2200      	movs	r2, #0
 800101c:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800101e:	e0a6      	b.n	800116e <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001020:	edd7 7a01 	vldr	s15, [r7, #4]
 8001024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800102c:	dd1a      	ble.n	8001064 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3310      	adds	r3, #16
 8001032:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001178 <MDXX_set_range+0x1ac>
 8001036:	ed97 0a02 	vldr	s0, [r7, #8]
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fea8 	bl	8001d90 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3328      	adds	r3, #40	@ 0x28
 8001044:	edd7 0a01 	vldr	s1, [r7, #4]
 8001048:	ed97 0a02 	vldr	s0, [r7, #8]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fe9f 	bl	8001d90 <PWM_write_range>
			mdxx->cmd = duty;
 8001052:	edd7 7a01 	vldr	s15, [r7, #4]
 8001056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800105a:	ee17 2a90 	vmov	r2, s15
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001062:	e084      	b.n	800116e <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3310      	adds	r3, #16
 8001068:	eddf 0a44 	vldr	s1, [pc, #272]	@ 800117c <MDXX_set_range+0x1b0>
 800106c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001070:	4618      	mov	r0, r3
 8001072:	f000 fe8d 	bl	8001d90 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	3328      	adds	r3, #40	@ 0x28
 800107a:	edd7 7a01 	vldr	s15, [r7, #4]
 800107e:	eef0 7ae7 	vabs.f32	s15, s15
 8001082:	eef0 0a67 	vmov.f32	s1, s15
 8001086:	ed97 0a02 	vldr	s0, [r7, #8]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fe80 	bl	8001d90 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001090:	edd7 7a01 	vldr	s15, [r7, #4]
 8001094:	eef0 7ae7 	vabs.f32	s15, s15
 8001098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109c:	ee17 2a90 	vmov	r2, s15
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010a4:	e063      	b.n	800116e <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d15e      	bne.n	800116e <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80010b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010bc:	d115      	bne.n	80010ea <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	f005 f9de 	bl	800648c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3328      	adds	r3, #40	@ 0x28
 80010d4:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001178 <MDXX_set_range+0x1ac>
 80010d8:	ed97 0a02 	vldr	s0, [r7, #8]
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fe57 	bl	8001d90 <PWM_write_range>
			mdxx->cmd = 0;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010e8:	e041      	b.n	800116e <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80010ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f6:	dd1a      	ble.n	800112e <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001102:	2200      	movs	r2, #0
 8001104:	4619      	mov	r1, r3
 8001106:	f005 f9c1 	bl	800648c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3328      	adds	r3, #40	@ 0x28
 800110e:	edd7 0a01 	vldr	s1, [r7, #4]
 8001112:	ed97 0a02 	vldr	s0, [r7, #8]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fe3a 	bl	8001d90 <PWM_write_range>
			mdxx->cmd = duty;
 800111c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001124:	ee17 2a90 	vmov	r2, s15
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800112c:	e01f      	b.n	800116e <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001138:	2201      	movs	r2, #1
 800113a:	4619      	mov	r1, r3
 800113c:	f005 f9a6 	bl	800648c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3328      	adds	r3, #40	@ 0x28
 8001144:	edd7 7a01 	vldr	s15, [r7, #4]
 8001148:	eef0 7ae7 	vabs.f32	s15, s15
 800114c:	eef0 0a67 	vmov.f32	s1, s15
 8001150:	ed97 0a02 	vldr	s0, [r7, #8]
 8001154:	4618      	mov	r0, r3
 8001156:	f000 fe1b 	bl	8001d90 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800115a:	edd7 7a01 	vldr	s15, [r7, #4]
 800115e:	eef0 7ae7 	vabs.f32	s15, s15
 8001162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001166:	ee17 2a90 	vmov	r2, s15
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	00000000 	.word	0x00000000
 800117c:	42c80000 	.word	0x42c80000

08001180 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, // kg
    .c = 64.83e-3,           // m
    .prismatic_pulley = 1.5915e-2 // m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	605a      	str	r2, [r3, #4]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	601a      	str	r2, [r3, #0]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	605a      	str	r2, [r3, #4]
}
 80011f4:	bf00      	nop
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001200:	b580      	push	{r7, lr}
 8001202:	ed2d 8b02 	vpush	{d8}
 8001206:	b08a      	sub	sp, #40	@ 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	460b      	mov	r3, r1
 800120e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001212:	edc7 0a00 	vstr	s1, [r7]
 8001216:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001218:	897b      	ldrh	r3, [r7, #10]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	b29b      	uxth	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <FIR_init+0x2a>
        numTaps += 1;
 8001224:	897b      	ldrh	r3, [r7, #10]
 8001226:	3301      	adds	r3, #1
 8001228:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	897a      	ldrh	r2, [r7, #10]
 800122e:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001236:	897b      	ldrh	r3, [r7, #10]
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4618      	mov	r0, r3
 800123c:	f00a f98c 	bl	800b558 <malloc>
 8001240:	4603      	mov	r3, r0
 8001242:	461a      	mov	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001248:	897b      	ldrh	r3, [r7, #10]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4618      	mov	r0, r3
 800124e:	f00a f983 	bl	800b558 <malloc>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80e0 	beq.w	8001424 <FIR_init+0x224>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 80db 	beq.w	8001424 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 800126e:	2300      	movs	r3, #0
 8001270:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001272:	e00a      	b.n	800128a <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001284:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001286:	3301      	adds	r3, #1
 8001288:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800128a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800128c:	897b      	ldrh	r3, [r7, #10]
 800128e:	429a      	cmp	r2, r3
 8001290:	d3f0      	bcc.n	8001274 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001292:	edd7 6a01 	vldr	s13, [r7, #4]
 8001296:	ed97 7a00 	vldr	s14, [r7]
 800129a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800129e:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 80012a2:	897b      	ldrh	r3, [r7, #10]
 80012a4:	085b      	lsrs	r3, r3, #1
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80012ae:	e077      	b.n	80013a0 <FIR_init+0x1a0>
            if (i == half_taps) {
 80012b0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80012b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d10c      	bne.n	80012d6 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80012cc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012d0:	edc3 7a00 	vstr	s15, [r3]
 80012d4:	e02c      	b.n	8001330 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 80012d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80012d8:	8afb      	ldrh	r3, [r7, #22]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	b29b      	uxth	r3, r3
 80012de:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 80012e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80012e4:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001430 <FIR_init+0x230>
 80012e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012f0:	ee07 3a90 	vmov	s15, r3
 80012f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001300:	f00a fa76 	bl	800b7f0 <sinf>
 8001304:	eef0 6a40 	vmov.f32	s13, s0
 8001308:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800130c:	ee07 3a90 	vmov	s15, r3
 8001310:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001314:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001434 <FIR_init+0x234>
 8001318:	ee27 7a87 	vmul.f32	s14, s15, s14
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132c:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	ed93 8a00 	vldr	s16, [r3]
 8001340:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001430 <FIR_init+0x230>
 8001350:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001354:	897b      	ldrh	r3, [r7, #10]
 8001356:	3b01      	subs	r3, #1
 8001358:	ee07 3a90 	vmov	s15, r3
 800135c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001360:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001364:	eeb0 0a66 	vmov.f32	s0, s13
 8001368:	f00a f9fe 	bl	800b768 <cosf>
 800136c:	eef0 7a40 	vmov.f32	s15, s0
 8001370:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001438 <FIR_init+0x238>
 8001374:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001378:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800143c <FIR_init+0x23c>
 800137c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001390:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001394:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001398:	b29b      	uxth	r3, r3
 800139a:	3301      	adds	r3, #1
 800139c:	b29b      	uxth	r3, r3
 800139e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80013a0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80013a4:	897b      	ldrh	r3, [r7, #10]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	db82      	blt.n	80012b0 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 80013aa:	f04f 0300 	mov.w	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	83fb      	strh	r3, [r7, #30]
 80013b4:	e00f      	b.n	80013d6 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	8bfb      	ldrh	r3, [r7, #30]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	edd3 7a00 	vldr	s15, [r3]
 80013c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80013c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013cc:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80013d0:	8bfb      	ldrh	r3, [r7, #30]
 80013d2:	3301      	adds	r3, #1
 80013d4:	83fb      	strh	r3, [r7, #30]
 80013d6:	8bfa      	ldrh	r2, [r7, #30]
 80013d8:	897b      	ldrh	r3, [r7, #10]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d3eb      	bcc.n	80013b6 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 80013de:	edd7 7a08 	vldr	s15, [r7, #32]
 80013e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ea:	d01b      	beq.n	8001424 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 80013ec:	2300      	movs	r3, #0
 80013ee:	83bb      	strh	r3, [r7, #28]
 80013f0:	e014      	b.n	800141c <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	8bbb      	ldrh	r3, [r7, #28]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	edd3 6a00 	vldr	s13, [r3]
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	8bbb      	ldrh	r3, [r7, #28]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	ed97 7a08 	vldr	s14, [r7, #32]
 800140e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001412:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001416:	8bbb      	ldrh	r3, [r7, #28]
 8001418:	3301      	adds	r3, #1
 800141a:	83bb      	strh	r3, [r7, #28]
 800141c:	8bba      	ldrh	r2, [r7, #28]
 800141e:	897b      	ldrh	r3, [r7, #10]
 8001420:	429a      	cmp	r2, r3
 8001422:	d3e6      	bcc.n	80013f2 <FIR_init+0x1f2>
            }
        }
    }
}
 8001424:	bf00      	nop
 8001426:	3728      	adds	r7, #40	@ 0x28
 8001428:	46bd      	mov	sp, r7
 800142a:	ecbd 8b02 	vpop	{d8}
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40c90fdb 	.word	0x40c90fdb
 8001434:	40490fdb 	.word	0x40490fdb
 8001438:	3eeb851f 	.word	0x3eeb851f
 800143c:	3f0a3d71 	.word	0x3f0a3d71

08001440 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	@ 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	ed87 0a05 	vstr	s0, [r7, #20]
 800144a:	edc7 0a04 	vstr	s1, [r7, #16]
 800144e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001452:	edc7 1a02 	vstr	s3, [r7, #8]
 8001456:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 800145a:	ed97 7a05 	vldr	s14, [r7, #20]
 800145e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001462:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001466:	ed97 7a03 	vldr	s14, [r7, #12]
 800146a:	edd7 7a04 	vldr	s15, [r7, #16]
 800146e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001476:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 800147a:	ed97 7a01 	vldr	s14, [r7, #4]
 800147e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001482:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001486:	edd7 7a07 	vldr	s15, [r7, #28]
 800148a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001496:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	ee07 3a90 	vmov	s15, r3
}
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	3724      	adds	r7, #36	@ 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80014b4:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <modbus_1t5_Timeout+0x3c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2201      	movs	r2, #1
 80014ba:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80014bc:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <modbus_1t5_Timeout+0x3c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2200      	movs	r2, #0
 80014c6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <modbus_1t5_Timeout+0x3c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <modbus_1t5_Timeout+0x3c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 0201 	orr.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	200003d0 	.word	0x200003d0

080014f0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80014f8:	4b04      	ldr	r3, [pc, #16]	@ (800150c <modbus_3t5_Timeout+0x1c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2201      	movs	r2, #1
 80014fe:	755a      	strb	r2, [r3, #21]

}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	200003d0 	.word	0x200003d0

08001510 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f008 fee1 	bl	800a2e0 <HAL_UART_GetError>
 800151e:	4603      	mov	r3, r0
 8001520:	2b20      	cmp	r3, #32
 8001522:	d101      	bne.n	8001528 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001524:	f7ff ffc4 	bl	80014b0 <modbus_1t5_Timeout>

	}
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
 800153c:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 800153e:	4a2d      	ldr	r2, [pc, #180]	@ (80015f4 <Modbus_init+0xc4>)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001544:	4b2b      	ldr	r3, [pc, #172]	@ (80015f4 <Modbus_init+0xc4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68ba      	ldr	r2, [r7, #8]
 800154a:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 800154c:	4b29      	ldr	r3, [pc, #164]	@ (80015f4 <Modbus_init+0xc4>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001554:	4b27      	ldr	r3, [pc, #156]	@ (80015f4 <Modbus_init+0xc4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 800155c:	4b25      	ldr	r3, [pc, #148]	@ (80015f4 <Modbus_init+0xc4>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	7e3a      	ldrb	r2, [r7, #24]
 8001562:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001564:	4b23      	ldr	r3, [pc, #140]	@ (80015f4 <Modbus_init+0xc4>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	4a21      	ldr	r2, [pc, #132]	@ (80015f8 <Modbus_init+0xc8>)
 8001572:	210e      	movs	r1, #14
 8001574:	4618      	mov	r0, r3
 8001576:	f007 f8e1 	bl	800873c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2110      	movs	r1, #16
 8001580:	4618      	mov	r0, r3
 8001582:	f008 fe57 	bl	800a234 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	4618      	mov	r0, r3
 800158c:	f008 fe6e 	bl	800a26c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	4a19      	ldr	r2, [pc, #100]	@ (80015fc <Modbus_init+0xcc>)
 8001596:	2104      	movs	r1, #4
 8001598:	4618      	mov	r0, r3
 800159a:	f008 f91f 	bl	80097dc <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 800159e:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <Modbus_init+0xc4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80015a4:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <Modbus_init+0xc4>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b12      	ldr	r3, [pc, #72]	@ (80015f4 <Modbus_init+0xc4>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80015b0:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80015b4:	4413      	add	r3, r2
 80015b6:	3302      	adds	r3, #2
 80015b8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015bc:	4619      	mov	r1, r3
 80015be:	f008 fa47 	bl	8009a50 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <Modbus_init+0xc4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d10c      	bne.n	80015ec <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80015d2:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <Modbus_init+0xc4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	4618      	mov	r0, r3
 80015da:	f006 f88b 	bl	80076f4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80015de:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <Modbus_init+0xc4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f006 fada 	bl	8007ba0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80015ec:	bf00      	nop
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200003d0 	.word	0x200003d0
 80015f8:	080014f1 	.word	0x080014f1
 80015fc:	08001511 	.word	0x08001511

08001600 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800160c:	23ff      	movs	r3, #255	@ 0xff
 800160e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001610:	23ff      	movs	r3, #255	@ 0xff
 8001612:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001614:	e013      	b.n	800163e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	607a      	str	r2, [r7, #4]
 800161c:	781a      	ldrb	r2, [r3, #0]
 800161e:	7bbb      	ldrb	r3, [r7, #14]
 8001620:	4053      	eors	r3, r2
 8001622:	b2db      	uxtb	r3, r3
 8001624:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001626:	4a10      	ldr	r2, [pc, #64]	@ (8001668 <CRC16+0x68>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4413      	add	r3, r2
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	4053      	eors	r3, r2
 8001632:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001634:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <CRC16+0x6c>)
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	4413      	add	r3, r2
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800163e:	883b      	ldrh	r3, [r7, #0]
 8001640:	1e5a      	subs	r2, r3, #1
 8001642:	803a      	strh	r2, [r7, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1e6      	bne.n	8001616 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	b21b      	sxth	r3, r3
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	b21a      	sxth	r2, r3
 8001650:	7bbb      	ldrb	r3, [r7, #14]
 8001652:	b21b      	sxth	r3, r3
 8001654:	4313      	orrs	r3, r2
 8001656:	b21b      	sxth	r3, r3
 8001658:	b29b      	uxth	r3, r3
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	200001b8 	.word	0x200001b8
 800166c:	200000b8 	.word	0x200000b8

08001670 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001676:	4b7e      	ldr	r3, [pc, #504]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	7ddb      	ldrb	r3, [r3, #23]
 800167c:	3b01      	subs	r3, #1
 800167e:	2b03      	cmp	r3, #3
 8001680:	d80a      	bhi.n	8001698 <Modbus_Protocal_Worker+0x28>
 8001682:	a201      	add	r2, pc, #4	@ (adr r2, 8001688 <Modbus_Protocal_Worker+0x18>)
 8001684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001688:	080016a3 	.word	0x080016a3
 800168c:	08001837 	.word	0x08001837
 8001690:	0800172f 	.word	0x0800172f
 8001694:	08001773 	.word	0x08001773
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001698:	4b75      	ldr	r3, [pc, #468]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2201      	movs	r2, #1
 800169e:	75da      	strb	r2, [r3, #23]
		break;
 80016a0:	e0e1      	b.n	8001866 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80016a2:	4b73      	ldr	r3, [pc, #460]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d006      	beq.n	80016bc <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80016ae:	4b70      	ldr	r3, [pc, #448]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2202      	movs	r2, #2
 80016b4:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80016b6:	f000 f9cd 	bl	8001a54 <Modbus_Emission>
 80016ba:	e018      	b.n	80016ee <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80016bc:	4b6c      	ldr	r3, [pc, #432]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80016c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d00b      	beq.n	80016ee <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80016d6:	4b66      	ldr	r3, [pc, #408]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2200      	movs	r2, #0
 80016dc:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80016de:	4b64      	ldr	r3, [pc, #400]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2200      	movs	r2, #0
 80016e4:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80016e6:	4b62      	ldr	r3, [pc, #392]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2203      	movs	r2, #3
 80016ec:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80016ee:	4b60      	ldr	r3, [pc, #384]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016f8:	2b20      	cmp	r3, #32
 80016fa:	f040 80ad 	bne.w	8001858 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80016fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2200      	movs	r2, #0
 8001704:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001708:	4b59      	ldr	r3, [pc, #356]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800170e:	4b58      	ldr	r3, [pc, #352]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4b57      	ldr	r3, [pc, #348]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800171a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800171e:	4413      	add	r3, r2
 8001720:	3302      	adds	r3, #2
 8001722:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001726:	4619      	mov	r1, r3
 8001728:	f008 f992 	bl	8009a50 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 800172c:	e094      	b.n	8001858 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800172e:	4b50      	ldr	r3, [pc, #320]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	7d1b      	ldrb	r3, [r3, #20]
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8091 	beq.w	800185c <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800173a:	4b4d      	ldr	r3, [pc, #308]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	22fe      	movs	r2, #254	@ 0xfe
 8001740:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001742:	4b4b      	ldr	r3, [pc, #300]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 800174c:	4b48      	ldr	r3, [pc, #288]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 800175c:	4b44      	ldr	r3, [pc, #272]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 800175e:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001760:	1a8a      	subs	r2, r1, r2
 8001762:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001764:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001768:	4b41      	ldr	r3, [pc, #260]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2204      	movs	r2, #4
 800176e:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001770:	e074      	b.n	800185c <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001772:	4b3f      	ldr	r3, [pc, #252]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800177a:	f113 0f02 	cmn.w	r3, #2
 800177e:	d150      	bne.n	8001822 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001780:	4b3b      	ldr	r3, [pc, #236]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001788:	4b39      	ldr	r3, [pc, #228]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001790:	4b37      	ldr	r3, [pc, #220]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001798:	3b02      	subs	r3, #2
 800179a:	4619      	mov	r1, r3
 800179c:	4610      	mov	r0, r2
 800179e:	f7ff ff2f 	bl	8001600 <CRC16>
 80017a2:	4603      	mov	r3, r0
 80017a4:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80017a6:	793a      	ldrb	r2, [r7, #4]
 80017a8:	4b31      	ldr	r3, [pc, #196]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 80017aa:	6819      	ldr	r1, [r3, #0]
 80017ac:	4b30      	ldr	r3, [pc, #192]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80017b4:	3b02      	subs	r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80017bc:	429a      	cmp	r2, r3
 80017be:	d10c      	bne.n	80017da <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80017c0:	797a      	ldrb	r2, [r7, #5]
 80017c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 80017c4:	6819      	ldr	r1, [r3, #0]
 80017c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80017ce:	3b01      	subs	r3, #1
 80017d0:	440b      	add	r3, r1
 80017d2:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d004      	beq.n	80017e4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80017da:	4b25      	ldr	r3, [pc, #148]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	22ff      	movs	r2, #255	@ 0xff
 80017e0:	759a      	strb	r2, [r3, #22]
				break;
 80017e2:	e040      	b.n	8001866 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80017e4:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80017ec:	4b20      	ldr	r3, [pc, #128]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d113      	bne.n	800181e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80017f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80017fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001806:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001808:	4b19      	ldr	r3, [pc, #100]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001810:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001812:	461a      	mov	r2, r3
 8001814:	f009 ff9a 	bl	800b74c <memcpy>

			//execute command
			Modbus_frame_response();
 8001818:	f000 f904 	bl	8001a24 <Modbus_frame_response>
 800181c:	e001      	b.n	8001822 <Modbus_Protocal_Worker+0x1b2>
				break;
 800181e:	bf00      	nop
					}
		break;


	}
}
 8001820:	e021      	b.n	8001866 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001822:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	7d5b      	ldrb	r3, [r3, #21]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d019      	beq.n	8001860 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 800182c:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2201      	movs	r2, #1
 8001832:	75da      	strb	r2, [r3, #23]
		break;
 8001834:	e014      	b.n	8001860 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001840:	2b20      	cmp	r3, #32
 8001842:	d10f      	bne.n	8001864 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001844:	4b0a      	ldr	r3, [pc, #40]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800184e:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <Modbus_Protocal_Worker+0x200>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2201      	movs	r2, #1
 8001854:	75da      	strb	r2, [r3, #23]
		break;
 8001856:	e005      	b.n	8001864 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001858:	bf00      	nop
 800185a:	e004      	b.n	8001866 <Modbus_Protocal_Worker+0x1f6>
		break;
 800185c:	bf00      	nop
 800185e:	e002      	b.n	8001866 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001860:	bf00      	nop
 8001862:	e000      	b.n	8001866 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001864:	bf00      	nop
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200003d0 	.word	0x200003d0

08001874 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800187a:	4b1d      	ldr	r3, [pc, #116]	@ (80018f0 <modbusWrite1Register+0x7c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	7e5b      	ldrb	r3, [r3, #25]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	b29b      	uxth	r3, r3
 8001884:	4a1a      	ldr	r2, [pc, #104]	@ (80018f0 <modbusWrite1Register+0x7c>)
 8001886:	6812      	ldr	r2, [r2, #0]
 8001888:	7e92      	ldrb	r2, [r2, #26]
 800188a:	4413      	add	r3, r2
 800188c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800188e:	88fa      	ldrh	r2, [r7, #6]
 8001890:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <modbusWrite1Register+0x7c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	429a      	cmp	r2, r3
 8001898:	d903      	bls.n	80018a2 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800189a:	2002      	movs	r0, #2
 800189c:	f000 f8a0 	bl	80019e0 <ModbusErrorReply>
			 return;
 80018a0:	e023      	b.n	80018ea <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80018a2:	4b13      	ldr	r3, [pc, #76]	@ (80018f0 <modbusWrite1Register+0x7c>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b12      	ldr	r3, [pc, #72]	@ (80018f0 <modbusWrite1Register+0x7c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6859      	ldr	r1, [r3, #4]
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	440b      	add	r3, r1
 80018b2:	7ed2      	ldrb	r2, [r2, #27]
 80018b4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <modbusWrite1Register+0x7c>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <modbusWrite1Register+0x7c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6859      	ldr	r1, [r3, #4]
 80018c0:	88fb      	ldrh	r3, [r7, #6]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	440b      	add	r3, r1
 80018c6:	7f12      	ldrb	r2, [r2, #28]
 80018c8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <modbusWrite1Register+0x7c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80018d2:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <modbusWrite1Register+0x7c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80018d8:	2208      	movs	r2, #8
 80018da:	4619      	mov	r1, r3
 80018dc:	f009 ff36 	bl	800b74c <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80018e0:	4b03      	ldr	r3, [pc, #12]	@ (80018f0 <modbusWrite1Register+0x7c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2205      	movs	r2, #5
 80018e6:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200003d0 	.word	0x200003d0

080018f4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80018fa:	4b38      	ldr	r3, [pc, #224]	@ (80019dc <modbusRead1Register+0xe8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	7edb      	ldrb	r3, [r3, #27]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	b29b      	uxth	r3, r3
 8001904:	4a35      	ldr	r2, [pc, #212]	@ (80019dc <modbusRead1Register+0xe8>)
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	7f12      	ldrb	r2, [r2, #28]
 800190a:	4413      	add	r3, r2
 800190c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800190e:	4b33      	ldr	r3, [pc, #204]	@ (80019dc <modbusRead1Register+0xe8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	7e5b      	ldrb	r3, [r3, #25]
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	b29b      	uxth	r3, r3
 8001918:	4a30      	ldr	r2, [pc, #192]	@ (80019dc <modbusRead1Register+0xe8>)
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	7e92      	ldrb	r2, [r2, #26]
 800191e:	4413      	add	r3, r2
 8001920:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001922:	88fb      	ldrh	r3, [r7, #6]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <modbusRead1Register+0x3a>
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	2b7d      	cmp	r3, #125	@ 0x7d
 800192c:	d903      	bls.n	8001936 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800192e:	2003      	movs	r0, #3
 8001930:	f000 f856 	bl	80019e0 <ModbusErrorReply>
		 return;
 8001934:	e04e      	b.n	80019d4 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001936:	88ba      	ldrh	r2, [r7, #4]
 8001938:	4b28      	ldr	r3, [pc, #160]	@ (80019dc <modbusRead1Register+0xe8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	429a      	cmp	r2, r3
 8001940:	d808      	bhi.n	8001954 <modbusRead1Register+0x60>
 8001942:	88ba      	ldrh	r2, [r7, #4]
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	4413      	add	r3, r2
 8001948:	461a      	mov	r2, r3
 800194a:	4b24      	ldr	r3, [pc, #144]	@ (80019dc <modbusRead1Register+0xe8>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	429a      	cmp	r2, r3
 8001952:	d903      	bls.n	800195c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001954:	2002      	movs	r0, #2
 8001956:	f000 f843 	bl	80019e0 <ModbusErrorReply>
		 return;
 800195a:	e03b      	b.n	80019d4 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800195c:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <modbusRead1Register+0xe8>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2203      	movs	r2, #3
 8001962:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4b1c      	ldr	r3, [pc, #112]	@ (80019dc <modbusRead1Register+0xe8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	0052      	lsls	r2, r2, #1
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001976:	2400      	movs	r4, #0
 8001978:	e020      	b.n	80019bc <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800197a:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <modbusRead1Register+0xe8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	88bb      	ldrh	r3, [r7, #4]
 8001982:	4423      	add	r3, r4
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	18d1      	adds	r1, r2, r3
 8001988:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <modbusRead1Register+0xe8>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	1c63      	adds	r3, r4, #1
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	7849      	ldrb	r1, [r1, #1]
 8001992:	4413      	add	r3, r2
 8001994:	460a      	mov	r2, r1
 8001996:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800199a:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <modbusRead1Register+0xe8>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	88bb      	ldrh	r3, [r7, #4]
 80019a2:	4423      	add	r3, r4
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	18d1      	adds	r1, r2, r3
 80019a8:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <modbusRead1Register+0xe8>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	0063      	lsls	r3, r4, #1
 80019ae:	3303      	adds	r3, #3
 80019b0:	7809      	ldrb	r1, [r1, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	460a      	mov	r2, r1
 80019b6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80019ba:	3401      	adds	r4, #1
 80019bc:	88fb      	ldrh	r3, [r7, #6]
 80019be:	429c      	cmp	r4, r3
 80019c0:	dbdb      	blt.n	800197a <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	3301      	adds	r3, #1
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <modbusRead1Register+0xe8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	0052      	lsls	r2, r2, #1
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd90      	pop	{r4, r7, pc}
 80019da:	bf00      	nop
 80019dc:	200003d0 	.word	0x200003d0

080019e0 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80019ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001a20 <ModbusErrorReply+0x40>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	7e1a      	ldrb	r2, [r3, #24]
 80019f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a20 <ModbusErrorReply+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80019fe:	4b08      	ldr	r3, [pc, #32]	@ (8001a20 <ModbusErrorReply+0x40>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	79fa      	ldrb	r2, [r7, #7]
 8001a04:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001a08:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <ModbusErrorReply+0x40>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	200003d0 	.word	0x200003d0

08001a24 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001a28:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <Modbus_frame_response+0x2c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	7e1b      	ldrb	r3, [r3, #24]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d004      	beq.n	8001a3c <Modbus_frame_response+0x18>
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d105      	bne.n	8001a42 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001a36:	f7ff ff1d 	bl	8001874 <modbusWrite1Register>
		break;
 8001a3a:	e006      	b.n	8001a4a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001a3c:	f7ff ff5a 	bl	80018f4 <modbusRead1Register>
		break;
 8001a40:	e003      	b.n	8001a4a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001a42:	2001      	movs	r0, #1
 8001a44:	f7ff ffcc 	bl	80019e0 <ModbusErrorReply>
		break;
 8001a48:	bf00      	nop

	}
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	200003d0 	.word	0x200003d0

08001a54 <Modbus_Emission>:

void Modbus_Emission()
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001a5a:	4b38      	ldr	r3, [pc, #224]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	d15d      	bne.n	8001b24 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001a68:	4b34      	ldr	r3, [pc, #208]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b33      	ldr	r3, [pc, #204]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	7812      	ldrb	r2, [r2, #0]
 8001a72:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001a76:	4b31      	ldr	r3, [pc, #196]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001a7e:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001a80:	4b2e      	ldr	r3, [pc, #184]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001a88:	4b2c      	ldr	r3, [pc, #176]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001a90:	461a      	mov	r2, r3
 8001a92:	f009 fe5b 	bl	800b74c <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001a96:	4b29      	ldr	r3, [pc, #164]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b26      	ldr	r3, [pc, #152]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	3203      	adds	r2, #3
 8001aa6:	b292      	uxth	r2, r2
 8001aa8:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001aac:	4b23      	ldr	r3, [pc, #140]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001ab4:	4b21      	ldr	r3, [pc, #132]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001abc:	3b02      	subs	r3, #2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	f7ff fd9d 	bl	8001600 <CRC16>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001aca:	4b1c      	ldr	r3, [pc, #112]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001ad6:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001ad8:	7939      	ldrb	r1, [r7, #4]
 8001ada:	4413      	add	r3, r2
 8001adc:	460a      	mov	r2, r1
 8001ade:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001ae2:	4b16      	ldr	r3, [pc, #88]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001aee:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001af0:	7979      	ldrb	r1, [r7, #5]
 8001af2:	4413      	add	r3, r2
 8001af4:	460a      	mov	r2, r1
 8001af6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b04:	2b20      	cmp	r3, #32
 8001b06:	d10d      	bne.n	8001b24 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001b08:	4b0c      	ldr	r3, [pc, #48]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001b16:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001b1a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001b1e:	461a      	mov	r2, r3
 8001b20:	f007 ff16 	bl	8009950 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001b24:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	@ (8001b3c <Modbus_Emission+0xe8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2200      	movs	r2, #0
 8001b32:	755a      	strb	r2, [r3, #21]

}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	200003d0 	.word	0x200003d0

08001b40 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4a0b      	ldr	r2, [pc, #44]	@ (8001b80 <PWM_init+0x40>)
 8001b52:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	88fa      	ldrh	r2, [r7, #6]
 8001b5e:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8001b66:	68b8      	ldr	r0, [r7, #8]
 8001b68:	f005 fd54 	bl	8007614 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	68b8      	ldr	r0, [r7, #8]
 8001b72:	f005 fe9b 	bl	80078ac <HAL_TIM_PWM_Start>
}
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	0a21fe80 	.word	0x0a21fe80

08001b84 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b90:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001b94:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba0:	d137      	bne.n	8001c12 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	889b      	ldrh	r3, [r3, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d105      	bne.n	8001bb6 <PWM_write_duty+0x32>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001bb4:	e0e1      	b.n	8001d7a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	889b      	ldrh	r3, [r3, #4]
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d105      	bne.n	8001bca <PWM_write_duty+0x46>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	6393      	str	r3, [r2, #56]	@ 0x38
 8001bc8:	e0d7      	b.n	8001d7a <PWM_write_duty+0x1f6>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	889b      	ldrh	r3, [r3, #4]
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d105      	bne.n	8001bde <PWM_write_duty+0x5a>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001bdc:	e0cd      	b.n	8001d7a <PWM_write_duty+0x1f6>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	889b      	ldrh	r3, [r3, #4]
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d105      	bne.n	8001bf2 <PWM_write_duty+0x6e>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	2300      	movs	r3, #0
 8001bee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf0:	e0c3      	b.n	8001d7a <PWM_write_duty+0x1f6>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	889b      	ldrh	r3, [r3, #4]
 8001bf6:	2b10      	cmp	r3, #16
 8001bf8:	d105      	bne.n	8001c06 <PWM_write_duty+0x82>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2300      	movs	r3, #0
 8001c02:	6493      	str	r3, [r2, #72]	@ 0x48
 8001c04:	e0b9      	b.n	8001d7a <PWM_write_duty+0x1f6>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001c10:	e0b3      	b.n	8001d7a <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c2a:	ee17 2a90 	vmov	r2, s15
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001c3a:	33fe      	adds	r3, #254	@ 0xfe
 8001c3c:	4a51      	ldr	r2, [pc, #324]	@ (8001d84 <PWM_write_duty+0x200>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	0bdb      	lsrs	r3, r3, #15
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	899b      	ldrh	r3, [r3, #12]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	ee07 3a90 	vmov	s15, r3
 8001c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c68:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c80:	ee17 3a90 	vmov	r3, s15
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	89db      	ldrh	r3, [r3, #14]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fc14 	bl	80004bc <__aeabi_i2d>
 8001c94:	4604      	mov	r4, r0
 8001c96:	460d      	mov	r5, r1
 8001c98:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c9c:	eef0 7ae7 	vabs.f32	s15, s15
 8001ca0:	ee17 0a90 	vmov	r0, s15
 8001ca4:	f7fe fc1c 	bl	80004e0 <__aeabi_f2d>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4620      	mov	r0, r4
 8001cae:	4629      	mov	r1, r5
 8001cb0:	f7fe fc6e 	bl	8000590 <__aeabi_dmul>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4610      	mov	r0, r2
 8001cba:	4619      	mov	r1, r3
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	4b31      	ldr	r3, [pc, #196]	@ (8001d88 <PWM_write_duty+0x204>)
 8001cc2:	f7fe fd8f 	bl	80007e4 <__aeabi_ddiv>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7fe fe71 	bl	80009b4 <__aeabi_d2uiz>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	899a      	ldrh	r2, [r3, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	89da      	ldrh	r2, [r3, #14]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	89da      	ldrh	r2, [r3, #14]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	889b      	ldrh	r3, [r3, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d106      	bne.n	8001d14 <PWM_write_duty+0x190>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	6952      	ldr	r2, [r2, #20]
 8001d10:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d12:	e032      	b.n	8001d7a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	889b      	ldrh	r3, [r3, #4]
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d106      	bne.n	8001d2a <PWM_write_duty+0x1a6>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001d28:	e027      	b.n	8001d7a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	889b      	ldrh	r3, [r3, #4]
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d106      	bne.n	8001d40 <PWM_write_duty+0x1bc>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001d3e:	e01c      	b.n	8001d7a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	889b      	ldrh	r3, [r3, #4]
 8001d44:	2b0c      	cmp	r3, #12
 8001d46:	d106      	bne.n	8001d56 <PWM_write_duty+0x1d2>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001d54:	e011      	b.n	8001d7a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	889b      	ldrh	r3, [r3, #4]
 8001d5a:	2b10      	cmp	r3, #16
 8001d5c:	d106      	bne.n	8001d6c <PWM_write_duty+0x1e8>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001d6a:	e006      	b.n	8001d7a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001d78:	e7ff      	b.n	8001d7a <PWM_write_duty+0x1f6>
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bdb0      	pop	{r4, r5, r7, pc}
 8001d82:	bf00      	nop
 8001d84:	80008001 	.word	0x80008001
 8001d88:	40590000 	.word	0x40590000
 8001d8c:	00000000 	.word	0x00000000

08001d90 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001d90:	b5b0      	push	{r4, r5, r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d9c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001da0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001da4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dac:	d137      	bne.n	8001e1e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	889b      	ldrh	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d105      	bne.n	8001dc2 <PWM_write_range+0x32>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001dc0:	e0e1      	b.n	8001f86 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	889b      	ldrh	r3, [r3, #4]
 8001dc6:	2b04      	cmp	r3, #4
 8001dc8:	d105      	bne.n	8001dd6 <PWM_write_range+0x46>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	6393      	str	r3, [r2, #56]	@ 0x38
 8001dd4:	e0d7      	b.n	8001f86 <PWM_write_range+0x1f6>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	889b      	ldrh	r3, [r3, #4]
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d105      	bne.n	8001dea <PWM_write_range+0x5a>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2300      	movs	r3, #0
 8001de6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001de8:	e0cd      	b.n	8001f86 <PWM_write_range+0x1f6>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	889b      	ldrh	r3, [r3, #4]
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	d105      	bne.n	8001dfe <PWM_write_range+0x6e>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dfc:	e0c3      	b.n	8001f86 <PWM_write_range+0x1f6>
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	889b      	ldrh	r3, [r3, #4]
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	d105      	bne.n	8001e12 <PWM_write_range+0x82>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e10:	e0b9      	b.n	8001f86 <PWM_write_range+0x1f6>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	2300      	movs	r3, #0
 8001e1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001e1c:	e0b3      	b.n	8001f86 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e36:	ee17 2a90 	vmov	r2, s15
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001e46:	33fe      	adds	r3, #254	@ 0xfe
 8001e48:	4a53      	ldr	r2, [pc, #332]	@ (8001f98 <PWM_write_range+0x208>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	0bdb      	lsrs	r3, r3, #15
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3b01      	subs	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	899b      	ldrh	r3, [r3, #12]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	ee07 3a90 	vmov	s15, r3
 8001e70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e74:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e78:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e8c:	ee17 3a90 	vmov	r3, s15
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	89db      	ldrh	r3, [r3, #14]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fb0e 	bl	80004bc <__aeabi_i2d>
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	460d      	mov	r5, r1
 8001ea4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ea8:	eef0 7ae7 	vabs.f32	s15, s15
 8001eac:	ee17 0a90 	vmov	r0, s15
 8001eb0:	f7fe fb16 	bl	80004e0 <__aeabi_f2d>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4620      	mov	r0, r4
 8001eba:	4629      	mov	r1, r5
 8001ebc:	f7fe fb68 	bl	8000590 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	a331      	add	r3, pc, #196	@ (adr r3, 8001f90 <PWM_write_range+0x200>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f7fe fc89 	bl	80007e4 <__aeabi_ddiv>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f7fe fd6b 	bl	80009b4 <__aeabi_d2uiz>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	899a      	ldrh	r2, [r3, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	89da      	ldrh	r2, [r3, #14]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	89da      	ldrh	r2, [r3, #14]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	889b      	ldrh	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <PWM_write_range+0x190>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	6952      	ldr	r2, [r2, #20]
 8001f1c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001f1e:	e032      	b.n	8001f86 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	889b      	ldrh	r3, [r3, #4]
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	d106      	bne.n	8001f36 <PWM_write_range+0x1a6>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001f34:	e027      	b.n	8001f86 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	889b      	ldrh	r3, [r3, #4]
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d106      	bne.n	8001f4c <PWM_write_range+0x1bc>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001f4a:	e01c      	b.n	8001f86 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	889b      	ldrh	r3, [r3, #4]
 8001f50:	2b0c      	cmp	r3, #12
 8001f52:	d106      	bne.n	8001f62 <PWM_write_range+0x1d2>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001f60:	e011      	b.n	8001f86 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	889b      	ldrh	r3, [r3, #4]
 8001f66:	2b10      	cmp	r3, #16
 8001f68:	d106      	bne.n	8001f78 <PWM_write_range+0x1e8>
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001f76:	e006      	b.n	8001f86 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001f84:	e7ff      	b.n	8001f86 <PWM_write_range+0x1f6>
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	00000000 	.word	0x00000000
 8001f94:	40efffe0 	.word	0x40efffe0
 8001f98:	80008001 	.word	0x80008001

08001f9c <QEI_init>:
* Created on: Mar 30, 2024
* Author: beamk
*/
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6178      	str	r0, [r7, #20]
 8001fa4:	6139      	str	r1, [r7, #16]
 8001fa6:	60fa      	str	r2, [r7, #12]
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	ed87 0a01 	vstr	s0, [r7, #4]
    qei->htimx = htimx;
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	611a      	str	r2, [r3, #16]
    qei->ppr = ppr;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	619a      	str	r2, [r3, #24]
    qei->freq = freq;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	621a      	str	r2, [r3, #32]
    qei->c[NOW] = 0;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	605a      	str	r2, [r3, #4]
    qei->pps = 0;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f04f 0200 	mov.w	r2, #0
 8001fda:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = 0;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->enc_period = 65536 - (65536 % ppr);
 8001fe4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	fb93 f2f2 	sdiv	r2, r3, r2
 8001fee:	68f9      	ldr	r1, [r7, #12]
 8001ff0:	fb01 f202 	mul.w	r2, r1, r2
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	615a      	str	r2, [r3, #20]
    qei->pulses = 0;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2200      	movs	r2, #0
 8002002:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf = 0;
    qei->revs = 0;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->rads = 0;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->mm = 0;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mmps = 0;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	645a      	str	r2, [r3, #68]	@ 0x44

    qei->ratio = ratio;  // Gear ratio or scaling factor
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	649a      	str	r2, [r3, #72]	@ 0x48
    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 800202a:	213c      	movs	r1, #60	@ 0x3c
 800202c:	6938      	ldr	r0, [r7, #16]
 800202e:	f005 fef9 	bl	8007e24 <HAL_TIM_Encoder_Start>
}
 8002032:	bf00      	nop
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	@ 0x30
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002042:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	2220      	movs	r2, #32
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f009 fb35 	bl	800b6c4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800205a:	4b39      	ldr	r3, [pc, #228]	@ (8002140 <MX_ADC1_Init+0x104>)
 800205c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002060:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002062:	4b37      	ldr	r3, [pc, #220]	@ (8002140 <MX_ADC1_Init+0x104>)
 8002064:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002068:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800206a:	4b35      	ldr	r3, [pc, #212]	@ (8002140 <MX_ADC1_Init+0x104>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002070:	4b33      	ldr	r3, [pc, #204]	@ (8002140 <MX_ADC1_Init+0x104>)
 8002072:	2200      	movs	r2, #0
 8002074:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002076:	4b32      	ldr	r3, [pc, #200]	@ (8002140 <MX_ADC1_Init+0x104>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800207c:	4b30      	ldr	r3, [pc, #192]	@ (8002140 <MX_ADC1_Init+0x104>)
 800207e:	2201      	movs	r2, #1
 8002080:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002082:	4b2f      	ldr	r3, [pc, #188]	@ (8002140 <MX_ADC1_Init+0x104>)
 8002084:	2204      	movs	r2, #4
 8002086:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002088:	4b2d      	ldr	r3, [pc, #180]	@ (8002140 <MX_ADC1_Init+0x104>)
 800208a:	2200      	movs	r2, #0
 800208c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800208e:	4b2c      	ldr	r3, [pc, #176]	@ (8002140 <MX_ADC1_Init+0x104>)
 8002090:	2201      	movs	r2, #1
 8002092:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8002094:	4b2a      	ldr	r3, [pc, #168]	@ (8002140 <MX_ADC1_Init+0x104>)
 8002096:	2202      	movs	r2, #2
 8002098:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800209a:	4b29      	ldr	r3, [pc, #164]	@ (8002140 <MX_ADC1_Init+0x104>)
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020a2:	4b27      	ldr	r3, [pc, #156]	@ (8002140 <MX_ADC1_Init+0x104>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020a8:	4b25      	ldr	r3, [pc, #148]	@ (8002140 <MX_ADC1_Init+0x104>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80020ae:	4b24      	ldr	r3, [pc, #144]	@ (8002140 <MX_ADC1_Init+0x104>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80020b6:	4b22      	ldr	r3, [pc, #136]	@ (8002140 <MX_ADC1_Init+0x104>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80020bc:	4b20      	ldr	r3, [pc, #128]	@ (8002140 <MX_ADC1_Init+0x104>)
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020c4:	481e      	ldr	r0, [pc, #120]	@ (8002140 <MX_ADC1_Init+0x104>)
 80020c6:	f002 f9d1 	bl	800446c <HAL_ADC_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80020d0:	f000 fce4 	bl	8002a9c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80020d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020dc:	4619      	mov	r1, r3
 80020de:	4818      	ldr	r0, [pc, #96]	@ (8002140 <MX_ADC1_Init+0x104>)
 80020e0:	f003 faf0 	bl	80056c4 <HAL_ADCEx_MultiModeConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80020ea:	f000 fcd7 	bl	8002a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80020ee:	4b15      	ldr	r3, [pc, #84]	@ (8002144 <MX_ADC1_Init+0x108>)
 80020f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020f2:	2306      	movs	r3, #6
 80020f4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80020f6:	2307      	movs	r3, #7
 80020f8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020fa:	237f      	movs	r3, #127	@ 0x7f
 80020fc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020fe:	2304      	movs	r3, #4
 8002100:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002106:	1d3b      	adds	r3, r7, #4
 8002108:	4619      	mov	r1, r3
 800210a:	480d      	ldr	r0, [pc, #52]	@ (8002140 <MX_ADC1_Init+0x104>)
 800210c:	f002 fc5c 	bl	80049c8 <HAL_ADC_ConfigChannel>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002116:	f000 fcc1 	bl	8002a9c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800211a:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <MX_ADC1_Init+0x10c>)
 800211c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800211e:	230c      	movs	r3, #12
 8002120:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	4619      	mov	r1, r3
 8002126:	4806      	ldr	r0, [pc, #24]	@ (8002140 <MX_ADC1_Init+0x104>)
 8002128:	f002 fc4e 	bl	80049c8 <HAL_ADC_ConfigChannel>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002132:	f000 fcb3 	bl	8002a9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002136:	bf00      	nop
 8002138:	3730      	adds	r7, #48	@ 0x30
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200003d4 	.word	0x200003d4
 8002144:	19200040 	.word	0x19200040
 8002148:	1d500080 	.word	0x1d500080

0800214c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b09e      	sub	sp, #120	@ 0x78
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002164:	f107 0310 	add.w	r3, r7, #16
 8002168:	2254      	movs	r2, #84	@ 0x54
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f009 faa9 	bl	800b6c4 <memset>
  if(adcHandle->Instance==ADC1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800217a:	d15e      	bne.n	800223a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800217c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002180:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002182:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002186:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002188:	f107 0310 	add.w	r3, r7, #16
 800218c:	4618      	mov	r0, r3
 800218e:	f004 ff8f 	bl	80070b0 <HAL_RCCEx_PeriphCLKConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002198:	f000 fc80 	bl	8002a9c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800219c:	4b29      	ldr	r3, [pc, #164]	@ (8002244 <HAL_ADC_MspInit+0xf8>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a0:	4a28      	ldr	r2, [pc, #160]	@ (8002244 <HAL_ADC_MspInit+0xf8>)
 80021a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021a8:	4b26      	ldr	r3, [pc, #152]	@ (8002244 <HAL_ADC_MspInit+0xf8>)
 80021aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b4:	4b23      	ldr	r3, [pc, #140]	@ (8002244 <HAL_ADC_MspInit+0xf8>)
 80021b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b8:	4a22      	ldr	r2, [pc, #136]	@ (8002244 <HAL_ADC_MspInit+0xf8>)
 80021ba:	f043 0304 	orr.w	r3, r3, #4
 80021be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021c0:	4b20      	ldr	r3, [pc, #128]	@ (8002244 <HAL_ADC_MspInit+0xf8>)
 80021c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	60bb      	str	r3, [r7, #8]
 80021ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021cc:	2303      	movs	r3, #3
 80021ce:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d0:	2303      	movs	r3, #3
 80021d2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021dc:	4619      	mov	r1, r3
 80021de:	481a      	ldr	r0, [pc, #104]	@ (8002248 <HAL_ADC_MspInit+0xfc>)
 80021e0:	f003 ffba 	bl	8006158 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80021e4:	4b19      	ldr	r3, [pc, #100]	@ (800224c <HAL_ADC_MspInit+0x100>)
 80021e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002250 <HAL_ADC_MspInit+0x104>)
 80021e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80021ea:	4b18      	ldr	r3, [pc, #96]	@ (800224c <HAL_ADC_MspInit+0x100>)
 80021ec:	2205      	movs	r2, #5
 80021ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f0:	4b16      	ldr	r3, [pc, #88]	@ (800224c <HAL_ADC_MspInit+0x100>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f6:	4b15      	ldr	r3, [pc, #84]	@ (800224c <HAL_ADC_MspInit+0x100>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021fc:	4b13      	ldr	r3, [pc, #76]	@ (800224c <HAL_ADC_MspInit+0x100>)
 80021fe:	2280      	movs	r2, #128	@ 0x80
 8002200:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002202:	4b12      	ldr	r3, [pc, #72]	@ (800224c <HAL_ADC_MspInit+0x100>)
 8002204:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002208:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800220a:	4b10      	ldr	r3, [pc, #64]	@ (800224c <HAL_ADC_MspInit+0x100>)
 800220c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002210:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002212:	4b0e      	ldr	r3, [pc, #56]	@ (800224c <HAL_ADC_MspInit+0x100>)
 8002214:	2220      	movs	r2, #32
 8002216:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002218:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <HAL_ADC_MspInit+0x100>)
 800221a:	2200      	movs	r2, #0
 800221c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800221e:	480b      	ldr	r0, [pc, #44]	@ (800224c <HAL_ADC_MspInit+0x100>)
 8002220:	f003 fc68 	bl	8005af4 <HAL_DMA_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800222a:	f000 fc37 	bl	8002a9c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a06      	ldr	r2, [pc, #24]	@ (800224c <HAL_ADC_MspInit+0x100>)
 8002232:	655a      	str	r2, [r3, #84]	@ 0x54
 8002234:	4a05      	ldr	r2, [pc, #20]	@ (800224c <HAL_ADC_MspInit+0x100>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800223a:	bf00      	nop
 800223c:	3778      	adds	r7, #120	@ 0x78
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	48000800 	.word	0x48000800
 800224c:	20000440 	.word	0x20000440
 8002250:	40020008 	.word	0x40020008

08002254 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800225a:	4b1a      	ldr	r3, [pc, #104]	@ (80022c4 <MX_DMA_Init+0x70>)
 800225c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800225e:	4a19      	ldr	r2, [pc, #100]	@ (80022c4 <MX_DMA_Init+0x70>)
 8002260:	f043 0304 	orr.w	r3, r3, #4
 8002264:	6493      	str	r3, [r2, #72]	@ 0x48
 8002266:	4b17      	ldr	r3, [pc, #92]	@ (80022c4 <MX_DMA_Init+0x70>)
 8002268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800226a:	f003 0304 	and.w	r3, r3, #4
 800226e:	607b      	str	r3, [r7, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002272:	4b14      	ldr	r3, [pc, #80]	@ (80022c4 <MX_DMA_Init+0x70>)
 8002274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002276:	4a13      	ldr	r2, [pc, #76]	@ (80022c4 <MX_DMA_Init+0x70>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6493      	str	r3, [r2, #72]	@ 0x48
 800227e:	4b11      	ldr	r3, [pc, #68]	@ (80022c4 <MX_DMA_Init+0x70>)
 8002280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800228a:	2200      	movs	r2, #0
 800228c:	2100      	movs	r1, #0
 800228e:	200b      	movs	r0, #11
 8002290:	f003 fbfb 	bl	8005a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002294:	200b      	movs	r0, #11
 8002296:	f003 fc12 	bl	8005abe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800229a:	2200      	movs	r2, #0
 800229c:	2100      	movs	r1, #0
 800229e:	200c      	movs	r0, #12
 80022a0:	f003 fbf3 	bl	8005a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80022a4:	200c      	movs	r0, #12
 80022a6:	f003 fc0a 	bl	8005abe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	200d      	movs	r0, #13
 80022b0:	f003 fbeb 	bl	8005a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80022b4:	200d      	movs	r0, #13
 80022b6:	f003 fc02 	bl	8005abe <HAL_NVIC_EnableIRQ>

}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000

080022c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08a      	sub	sp, #40	@ 0x28
 80022cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ce:	f107 0314 	add.w	r3, r7, #20
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
 80022dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022de:	4b4f      	ldr	r3, [pc, #316]	@ (800241c <MX_GPIO_Init+0x154>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e2:	4a4e      	ldr	r2, [pc, #312]	@ (800241c <MX_GPIO_Init+0x154>)
 80022e4:	f043 0304 	orr.w	r3, r3, #4
 80022e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ea:	4b4c      	ldr	r3, [pc, #304]	@ (800241c <MX_GPIO_Init+0x154>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022f6:	4b49      	ldr	r3, [pc, #292]	@ (800241c <MX_GPIO_Init+0x154>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fa:	4a48      	ldr	r2, [pc, #288]	@ (800241c <MX_GPIO_Init+0x154>)
 80022fc:	f043 0320 	orr.w	r3, r3, #32
 8002300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002302:	4b46      	ldr	r3, [pc, #280]	@ (800241c <MX_GPIO_Init+0x154>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	4b43      	ldr	r3, [pc, #268]	@ (800241c <MX_GPIO_Init+0x154>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002312:	4a42      	ldr	r2, [pc, #264]	@ (800241c <MX_GPIO_Init+0x154>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800231a:	4b40      	ldr	r3, [pc, #256]	@ (800241c <MX_GPIO_Init+0x154>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002326:	4b3d      	ldr	r3, [pc, #244]	@ (800241c <MX_GPIO_Init+0x154>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232a:	4a3c      	ldr	r2, [pc, #240]	@ (800241c <MX_GPIO_Init+0x154>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002332:	4b3a      	ldr	r3, [pc, #232]	@ (800241c <MX_GPIO_Init+0x154>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 800233e:	2200      	movs	r2, #0
 8002340:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002344:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002348:	f004 f8a0 	bl	800648c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800234c:	2200      	movs	r2, #0
 800234e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002352:	4833      	ldr	r0, [pc, #204]	@ (8002420 <MX_GPIO_Init+0x158>)
 8002354:	f004 f89a 	bl	800648c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002358:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800235c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800235e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002362:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4619      	mov	r1, r3
 800236e:	482c      	ldr	r0, [pc, #176]	@ (8002420 <MX_GPIO_Init+0x158>)
 8002370:	f003 fef2 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8002374:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8002378:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237a:	2301      	movs	r3, #1
 800237c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002382:	2300      	movs	r3, #0
 8002384:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	4619      	mov	r1, r3
 800238c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002390:	f003 fee2 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_LIM_Pin LOWER_LIM_Pin PHOTO_REVO_Pin PB11
                           PB12 EMER_Pin PROX_Pin SAVE_Pin */
  GPIO_InitStruct.Pin = UPPER_LIM_Pin|LOWER_LIM_Pin|PHOTO_REVO_Pin|GPIO_PIN_11
 8002394:	f641 43b6 	movw	r3, #7350	@ 0x1cb6
 8002398:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|EMER_Pin|PROX_Pin|SAVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a2:	f107 0314 	add.w	r3, r7, #20
 80023a6:	4619      	mov	r1, r3
 80023a8:	481e      	ldr	r0, [pc, #120]	@ (8002424 <MX_GPIO_Init+0x15c>)
 80023aa:	f003 fed5 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80023ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	2300      	movs	r3, #0
 80023be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	4619      	mov	r1, r3
 80023c6:	4816      	ldr	r0, [pc, #88]	@ (8002420 <MX_GPIO_Init+0x158>)
 80023c8:	f003 fec6 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PHOTO_PRIS_Pin */
  GPIO_InitStruct.Pin = PHOTO_PRIS_Pin;
 80023cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PHOTO_PRIS_GPIO_Port, &GPIO_InitStruct);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4619      	mov	r1, r3
 80023e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023e4:	f003 feb8 	bl	8006158 <HAL_GPIO_Init>

  /*Configure GPIO pins : START_Pin DELETE_Pin RESET_SYS_Pin */
  GPIO_InitStruct.Pin = START_Pin|DELETE_Pin|RESET_SYS_Pin;
 80023e8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80023ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	4808      	ldr	r0, [pc, #32]	@ (8002420 <MX_GPIO_Init+0x158>)
 80023fe:	f003 feab 	bl	8006158 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	2028      	movs	r0, #40	@ 0x28
 8002408:	f003 fb3f 	bl	8005a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800240c:	2028      	movs	r0, #40	@ 0x28
 800240e:	f003 fb56 	bl	8005abe <HAL_NVIC_EnableIRQ>

}
 8002412:	bf00      	nop
 8002414:	3728      	adds	r7, #40	@ 0x28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	48000800 	.word	0x48000800
 8002424:	48000400 	.word	0x48000400

08002428 <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix){
 8002428:	b5b0      	push	{r4, r5, r7, lr}
 800242a:	b0a2      	sub	sp, #136	@ 0x88
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
	filter->Q = 0.05f; //0.05
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4a37      	ldr	r2, [pc, #220]	@ (8002514 <Kalman_Start+0xec>)
 8002438:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 0.1f;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4a36      	ldr	r2, [pc, #216]	@ (8002518 <Kalman_Start+0xf0>)
 8002440:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	677b      	str	r3, [r7, #116]	@ 0x74
 800244a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800244e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	float32_t g[4] = {0.0f,
 800245e:	f04f 0300 	mov.w	r3, #0
 8002462:	667b      	str	r3, [r7, #100]	@ 0x64
 8002464:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800246a:	f04f 0300 	mov.w	r3, #0
 800246e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	673b      	str	r3, [r7, #112]	@ 0x70
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8002476:	4b29      	ldr	r3, [pc, #164]	@ (800251c <Kalman_Start+0xf4>)
 8002478:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800247c:	461d      	mov	r5, r3
 800247e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800248a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800248e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80024b0:	e028      	b.n	8002504 <Kalman_Start+0xdc>
	{
		filter->A[i] = A_matrix[i];
 80024b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	4413      	add	r3, r2
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68f9      	ldr	r1, [r7, #12]
 80024c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024c4:	3314      	adds	r3, #20
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 80024cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	3388      	adds	r3, #136	@ 0x88
 80024d4:	443b      	add	r3, r7
 80024d6:	3b64      	subs	r3, #100	@ 0x64
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	68f9      	ldr	r1, [r7, #12]
 80024dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024e0:	3398      	adds	r3, #152	@ 0x98
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024ee:	3304      	adds	r3, #4
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 80024fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024fe:	3301      	adds	r3, #1
 8002500:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002504:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002508:	2b0f      	cmp	r3, #15
 800250a:	ddd2      	ble.n	80024b2 <Kalman_Start+0x8a>
	}

	for(i=0;i<4;i++)
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002512:	e040      	b.n	8002596 <Kalman_Start+0x16e>
 8002514:	3d4ccccd 	.word	0x3d4ccccd
 8002518:	3dcccccd 	.word	0x3dcccccd
 800251c:	0800c268 	.word	0x0800c268
	{
		filter->X_k[i] = x_k[i];
 8002520:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	3388      	adds	r3, #136	@ 0x88
 8002528:	443b      	add	r3, r7
 800252a:	3b74      	subs	r3, #116	@ 0x74
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68f9      	ldr	r1, [r7, #12]
 8002530:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	440b      	add	r3, r1
 8002538:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 800253a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	4413      	add	r3, r2
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68f9      	ldr	r1, [r7, #12]
 8002548:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800254c:	3324      	adds	r3, #36	@ 0x24
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	440b      	add	r3, r1
 8002552:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8002554:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	3388      	adds	r3, #136	@ 0x88
 800255c:	443b      	add	r3, r7
 800255e:	3b14      	subs	r3, #20
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68f9      	ldr	r1, [r7, #12]
 8002564:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002568:	3328      	adds	r3, #40	@ 0x28
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8002570:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	3388      	adds	r3, #136	@ 0x88
 8002578:	443b      	add	r3, r7
 800257a:	3b24      	subs	r3, #36	@ 0x24
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	68f9      	ldr	r1, [r7, #12]
 8002580:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002584:	332c      	adds	r3, #44	@ 0x2c
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 800258c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002590:	3301      	adds	r3, #1
 8002592:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002596:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800259a:	2b03      	cmp	r3, #3
 800259c:	ddc0      	ble.n	8002520 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2201      	movs	r2, #1
 80025a8:	2104      	movs	r1, #4
 80025aa:	f008 ffbd 	bl	800b528 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	3310      	adds	r3, #16
 80025b8:	2204      	movs	r2, #4
 80025ba:	2104      	movs	r1, #4
 80025bc:	f008 ffb4 	bl	800b528 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3350      	adds	r3, #80	@ 0x50
 80025ca:	2204      	movs	r2, #4
 80025cc:	2104      	movs	r1, #4
 80025ce:	f008 ffab 	bl	800b528 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	3390      	adds	r3, #144	@ 0x90
 80025dc:	2201      	movs	r2, #1
 80025de:	2104      	movs	r1, #4
 80025e0:	f008 ffa2 	bl	800b528 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	33a0      	adds	r3, #160	@ 0xa0
 80025ee:	2204      	movs	r2, #4
 80025f0:	2101      	movs	r1, #1
 80025f2:	f008 ff99 	bl	800b528 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	33b0      	adds	r3, #176	@ 0xb0
 8002600:	2201      	movs	r2, #1
 8002602:	2104      	movs	r1, #4
 8002604:	f008 ff90 	bl	800b528 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	33c8      	adds	r3, #200	@ 0xc8
 8002612:	2204      	movs	r2, #4
 8002614:	2104      	movs	r1, #4
 8002616:	f008 ff87 	bl	800b528 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002626:	2201      	movs	r2, #1
 8002628:	2104      	movs	r1, #4
 800262a:	f008 ff7d 	bl	800b528 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800263a:	2204      	movs	r2, #4
 800263c:	2101      	movs	r1, #1
 800263e:	f008 ff73 	bl	800b528 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800264e:	2204      	movs	r2, #4
 8002650:	2104      	movs	r1, #4
 8002652:	f008 ff69 	bl	800b528 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002662:	2204      	movs	r2, #4
 8002664:	2104      	movs	r1, #4
 8002666:	f008 ff5f 	bl	800b528 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8002676:	2201      	movs	r2, #1
 8002678:	2104      	movs	r1, #4
 800267a:	f008 ff55 	bl	800b528 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 800268a:	2201      	movs	r2, #1
 800268c:	2104      	movs	r1, #4
 800268e:	f008 ff4b 	bl	800b528 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800269e:	2204      	movs	r2, #4
 80026a0:	2101      	movs	r1, #1
 80026a2:	f008 ff41 	bl	800b528 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80026b2:	2201      	movs	r2, #1
 80026b4:	2101      	movs	r1, #1
 80026b6:	f008 ff37 	bl	800b528 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80026c6:	2201      	movs	r2, #1
 80026c8:	2101      	movs	r1, #1
 80026ca:	f008 ff2d 	bl	800b528 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80026da:	2201      	movs	r2, #1
 80026dc:	2104      	movs	r1, #4
 80026de:	f008 ff23 	bl	800b528 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80026ee:	2201      	movs	r2, #1
 80026f0:	2104      	movs	r1, #4
 80026f2:	f008 ff19 	bl	800b528 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8002702:	2201      	movs	r2, #1
 8002704:	2101      	movs	r1, #1
 8002706:	f008 ff0f 	bl	800b528 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8002716:	2201      	movs	r2, #1
 8002718:	2101      	movs	r1, #1
 800271a:	f008 ff05 	bl	800b528 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800272a:	2201      	movs	r2, #1
 800272c:	2101      	movs	r1, #1
 800272e:	f008 fefb 	bl	800b528 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800273e:	2201      	movs	r2, #1
 8002740:	2104      	movs	r1, #4
 8002742:	f008 fef1 	bl	800b528 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002752:	2201      	movs	r2, #1
 8002754:	2101      	movs	r1, #1
 8002756:	f008 fee7 	bl	800b528 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002766:	2204      	movs	r2, #4
 8002768:	2104      	movs	r1, #4
 800276a:	f008 fedd 	bl	800b528 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	33c4      	adds	r3, #196	@ 0xc4
 8002778:	2201      	movs	r2, #1
 800277a:	2101      	movs	r1, #1
 800277c:	f008 fed4 	bl	800b528 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 800278c:	2201      	movs	r2, #1
 800278e:	2101      	movs	r1, #1
 8002790:	f008 feca 	bl	800b528 <arm_mat_init_f32>
}
 8002794:	bf00      	nop
 8002796:	3788      	adds	r7, #136	@ 0x88
 8002798:	46bd      	mov	sp, r7
 800279a:	bdb0      	pop	{r4, r5, r7, pc}

0800279c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027a0:	f3bf 8f4f 	dsb	sy
}
 80027a4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80027a6:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <__NVIC_SystemReset+0x24>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80027ae:	4904      	ldr	r1, [pc, #16]	@ (80027c0 <__NVIC_SystemReset+0x24>)
 80027b0:	4b04      	ldr	r3, [pc, #16]	@ (80027c4 <__NVIC_SystemReset+0x28>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80027b6:	f3bf 8f4f 	dsb	sy
}
 80027ba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80027bc:	bf00      	nop
 80027be:	e7fd      	b.n	80027bc <__NVIC_SystemReset+0x20>
 80027c0:	e000ed00 	.word	0xe000ed00
 80027c4:	05fa0004 	.word	0x05fa0004

080027c8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80027cc:	f001 fb99 	bl	8003f02 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80027d0:	f000 f83e 	bl	8002850 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80027d4:	f7ff fd78 	bl	80022c8 <MX_GPIO_Init>
	MX_DMA_Init();
 80027d8:	f7ff fd3c 	bl	8002254 <MX_DMA_Init>
	MX_ADC1_Init();
 80027dc:	f7ff fc2e 	bl	800203c <MX_ADC1_Init>
	MX_TIM2_Init();
 80027e0:	f000 fe90 	bl	8003504 <MX_TIM2_Init>
	MX_TIM3_Init();
 80027e4:	f000 fedc 	bl	80035a0 <MX_TIM3_Init>
	MX_TIM4_Init();
 80027e8:	f000 ff30 	bl	800364c <MX_TIM4_Init>
	MX_TIM5_Init();
 80027ec:	f000 ff84 	bl	80036f8 <MX_TIM5_Init>
	MX_TIM8_Init();
 80027f0:	f000 ffd0 	bl	8003794 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 80027f4:	f001 fa52 	bl	8003c9c <MX_USART2_UART_Init>
	MX_TIM16_Init();
 80027f8:	f001 f894 	bl	8003924 <MX_TIM16_Init>
	MX_TIM1_Init();
 80027fc:	f000 fdee 	bl	80033dc <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8002800:	f000 f952 	bl	8002aa8 <plotter_begin>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, b2);
 8002804:	4b0e      	ldr	r3, [pc, #56]	@ (8002840 <main+0x78>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	461a      	mov	r2, r3
 800280c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002810:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002814:	f003 fe3a 	bl	800648c <HAL_GPIO_WritePin>

		if (b3) {
 8002818:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <main+0x7c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <main+0x5c>
			NVIC_SystemReset();
 8002820:	f7ff ffbc 	bl	800279c <__NVIC_SystemReset>
		}
		if (b1) {
 8002824:	4b08      	ldr	r3, [pc, #32]	@ (8002848 <main+0x80>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <main+0x68>
			pen_up();
 800282c:	f000 fb9c 	bl	8002f68 <pen_up>
		}
		if (b4) {
 8002830:	4b06      	ldr	r3, [pc, #24]	@ (800284c <main+0x84>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d0e5      	beq.n	8002804 <main+0x3c>
			pen_down();
 8002838:	f000 fba6 	bl	8002f88 <pen_down>
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, b2);
 800283c:	e7e2      	b.n	8002804 <main+0x3c>
 800283e:	bf00      	nop
 8002840:	20001610 	.word	0x20001610
 8002844:	20001614 	.word	0x20001614
 8002848:	2000160c 	.word	0x2000160c
 800284c:	20001618 	.word	0x20001618

08002850 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b094      	sub	sp, #80	@ 0x50
 8002854:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002856:	f107 0318 	add.w	r3, r7, #24
 800285a:	2238      	movs	r2, #56	@ 0x38
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f008 ff30 	bl	800b6c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
 800286e:	60da      	str	r2, [r3, #12]
 8002870:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002872:	2000      	movs	r0, #0
 8002874:	f003 fe3a 	bl	80064ec <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002878:	2302      	movs	r3, #2
 800287a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800287c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002882:	2340      	movs	r3, #64	@ 0x40
 8002884:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002886:	2302      	movs	r3, #2
 8002888:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800288a:	2302      	movs	r3, #2
 800288c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800288e:	2304      	movs	r3, #4
 8002890:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8002892:	2355      	movs	r3, #85	@ 0x55
 8002894:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002896:	2302      	movs	r3, #2
 8002898:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800289a:	2302      	movs	r3, #2
 800289c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800289e:	2302      	movs	r3, #2
 80028a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80028a2:	f107 0318 	add.w	r3, r7, #24
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 fed4 	bl	8006654 <HAL_RCC_OscConfig>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <SystemClock_Config+0x66>
		Error_Handler();
 80028b2:	f000 f8f3 	bl	8002a9c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80028b6:	230f      	movs	r3, #15
 80028b8:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ba:	2303      	movs	r3, #3
 80028bc:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80028ca:	1d3b      	adds	r3, r7, #4
 80028cc:	2104      	movs	r1, #4
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 f9d2 	bl	8006c78 <HAL_RCC_ClockConfig>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <SystemClock_Config+0x8e>
		Error_Handler();
 80028da:	f000 f8df 	bl	8002a9c <Error_Handler>
	}
}
 80028de:	bf00      	nop
 80028e0:	3750      	adds	r7, #80	@ 0x50
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	4603      	mov	r3, r0
 80028ee:	80fb      	strh	r3, [r7, #6]

}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a5e      	ldr	r2, [pc, #376]	@ (8002a94 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800291c:	4293      	cmp	r3, r2
 800291e:	f040 80b5 	bne.w	8002a8c <HAL_TIM_PeriodElapsedCallback+0x17c>
		update_sensors();
 8002922:	f000 fa7f 	bl	8002e24 <update_sensors>
		Modbus_Protocal_Worker();
 8002926:	f7fe fea3 	bl	8001670 <Modbus_Protocal_Worker>

		//Heartbeat
		registerFrame[Heartbeat_Protocol].U16 = 22881;
 800292a:	4b5b      	ldr	r3, [pc, #364]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800292c:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002930:	801a      	strh	r2, [r3, #0]

		if (registerFrame[Servo_UP].U16 == 1) {
 8002932:	4b59      	ldr	r3, [pc, #356]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002934:	891b      	ldrh	r3, [r3, #8]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d104      	bne.n	8002944 <HAL_TIM_PeriodElapsedCallback+0x34>
			pen_up(); //servo up command
 800293a:	f000 fb15 	bl	8002f68 <pen_up>
			registerFrame[LimitSwitch_Status].U16 = 1;
 800293e:	4b56      	ldr	r3, [pc, #344]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002940:	2201      	movs	r2, #1
 8002942:	80da      	strh	r2, [r3, #6]
		}
		if (registerFrame[Servo_Down].U16 == 1) {
 8002944:	4b54      	ldr	r3, [pc, #336]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002946:	895b      	ldrh	r3, [r3, #10]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d104      	bne.n	8002956 <HAL_TIM_PeriodElapsedCallback+0x46>
			pen_down(); // servo down command
 800294c:	f000 fb1c 	bl	8002f88 <pen_down>
			registerFrame[LimitSwitch_Status].U16 = 2;
 8002950:	4b51      	ldr	r3, [pc, #324]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002952:	2202      	movs	r2, #2
 8002954:	80da      	strh	r2, [r3, #6]
		}

		if (registerFrame[BaseSystem_Status].U16 == 1) { // homing
 8002956:	4b50      	ldr	r3, [pc, #320]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002958:	885b      	ldrh	r3, [r3, #2]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d11a      	bne.n	8002994 <HAL_TIM_PeriodElapsedCallback+0x84>

			registerFrame[R_Theta_Status].U16 = 1;
 800295e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002960:	2201      	movs	r2, #1
 8002962:	841a      	strh	r2, [r3, #32]
			//reset Arm Position command

			//--tell Arm Status--//
			registerFrame[R_Axis_Actual_Position].U16 = 1; //Rev Pos
 8002964:	4b4c      	ldr	r3, [pc, #304]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002966:	2201      	movs	r2, #1
 8002968:	845a      	strh	r2, [r3, #34]	@ 0x22
			registerFrame[Theta_Axis_Actual_Position].U16 = 1; //pris Pos
 800296a:	4b4b      	ldr	r3, [pc, #300]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800296c:	2201      	movs	r2, #1
 800296e:	849a      	strh	r2, [r3, #36]	@ 0x24
			registerFrame[R_Axis_Actual_Speed].U16 = 1; //Rev speed
 8002970:	4b49      	ldr	r3, [pc, #292]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002972:	2201      	movs	r2, #1
 8002974:	84da      	strh	r2, [r3, #38]	@ 0x26
			registerFrame[Theta_Axis_Actual_Speed].U16 = 1; //pris speed
 8002976:	4b48      	ldr	r3, [pc, #288]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002978:	2201      	movs	r2, #1
 800297a:	851a      	strh	r2, [r3, #40]	@ 0x28
			registerFrame[R_Axis_Acceleration].U16 = 1; //Rev Acc
 800297c:	4b46      	ldr	r3, [pc, #280]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800297e:	2201      	movs	r2, #1
 8002980:	855a      	strh	r2, [r3, #42]	@ 0x2a
			registerFrame[Theta_Axis_Acceleration].U16 = 1; //pris Acc
 8002982:	4b45      	ldr	r3, [pc, #276]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002984:	2201      	movs	r2, #1
 8002986:	859a      	strh	r2, [r3, #44]	@ 0x2c
			//if finish
			registerFrame[BaseSystem_Status].U16 = 0;
 8002988:	4b43      	ldr	r3, [pc, #268]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800298a:	2200      	movs	r2, #0
 800298c:	805a      	strh	r2, [r3, #2]
			registerFrame[R_Theta_Status].U16 = 0;
 800298e:	4b42      	ldr	r3, [pc, #264]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002990:	2200      	movs	r2, #0
 8002992:	841a      	strh	r2, [r3, #32]
		}
		if (registerFrame[BaseSystem_Status].U16 == 2) {				//joy
 8002994:	4b40      	ldr	r3, [pc, #256]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002996:	885b      	ldrh	r3, [r3, #2]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d11a      	bne.n	80029d2 <HAL_TIM_PeriodElapsedCallback+0xc2>

			registerFrame[R_Theta_Status].U16 = 2;
 800299c:	4b3e      	ldr	r3, [pc, #248]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800299e:	2202      	movs	r2, #2
 80029a0:	841a      	strh	r2, [r3, #32]
			//joystick control command

			//--tell Arm Status--//
			registerFrame[R_Axis_Actual_Position].U16 = 2; //Rev Pos
 80029a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029a4:	2202      	movs	r2, #2
 80029a6:	845a      	strh	r2, [r3, #34]	@ 0x22
			registerFrame[Theta_Axis_Actual_Position].U16 = 2; //pris Pos
 80029a8:	4b3b      	ldr	r3, [pc, #236]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029aa:	2202      	movs	r2, #2
 80029ac:	849a      	strh	r2, [r3, #36]	@ 0x24
			registerFrame[R_Axis_Actual_Speed].U16 = 2; //Rev speed
 80029ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029b0:	2202      	movs	r2, #2
 80029b2:	84da      	strh	r2, [r3, #38]	@ 0x26
			registerFrame[Theta_Axis_Actual_Speed].U16 = 2; //pris speed
 80029b4:	4b38      	ldr	r3, [pc, #224]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029b6:	2202      	movs	r2, #2
 80029b8:	851a      	strh	r2, [r3, #40]	@ 0x28
			registerFrame[R_Axis_Acceleration].U16 = 2; //Rev Acc
 80029ba:	4b37      	ldr	r3, [pc, #220]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029bc:	2202      	movs	r2, #2
 80029be:	855a      	strh	r2, [r3, #42]	@ 0x2a
			registerFrame[Theta_Axis_Acceleration].U16 = 2; //pris Acc
 80029c0:	4b35      	ldr	r3, [pc, #212]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029c2:	2202      	movs	r2, #2
 80029c4:	859a      	strh	r2, [r3, #44]	@ 0x2c

			//if finish
			registerFrame[BaseSystem_Status].U16 = 0;
 80029c6:	4b34      	ldr	r3, [pc, #208]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	805a      	strh	r2, [r3, #2]
			registerFrame[R_Theta_Status].U16 = 0;
 80029cc:	4b32      	ldr	r3, [pc, #200]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	841a      	strh	r2, [r3, #32]
		}
		if (registerFrame[BaseSystem_Status].U16 == 4) { //point
 80029d2:	4b31      	ldr	r3, [pc, #196]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029d4:	885b      	ldrh	r3, [r3, #2]
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d11a      	bne.n	8002a10 <HAL_TIM_PeriodElapsedCallback+0x100>

			registerFrame[R_Theta_Status].U16 = 4;
 80029da:	4b2f      	ldr	r3, [pc, #188]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029dc:	2204      	movs	r2, #4
 80029de:	841a      	strh	r2, [r3, #32]
			//Point mode command

			//--tell Arm Status--//
			registerFrame[R_Axis_Actual_Position].U16 = 3; //Rev Pos
 80029e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029e2:	2203      	movs	r2, #3
 80029e4:	845a      	strh	r2, [r3, #34]	@ 0x22
			registerFrame[Theta_Axis_Actual_Position].U16 = 3; //pris Pos
 80029e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029e8:	2203      	movs	r2, #3
 80029ea:	849a      	strh	r2, [r3, #36]	@ 0x24
			registerFrame[R_Axis_Actual_Speed].U16 = 3; //Rev speed
 80029ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029ee:	2203      	movs	r2, #3
 80029f0:	84da      	strh	r2, [r3, #38]	@ 0x26
			registerFrame[Theta_Axis_Actual_Speed].U16 = 3; //pris speed
 80029f2:	4b29      	ldr	r3, [pc, #164]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029f4:	2203      	movs	r2, #3
 80029f6:	851a      	strh	r2, [r3, #40]	@ 0x28
			registerFrame[R_Axis_Acceleration].U16 = 3; //Rev Acc
 80029f8:	4b27      	ldr	r3, [pc, #156]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80029fa:	2203      	movs	r2, #3
 80029fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
			registerFrame[Theta_Axis_Acceleration].U16 = 3; //pris Acc
 80029fe:	4b26      	ldr	r3, [pc, #152]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a00:	2203      	movs	r2, #3
 8002a02:	859a      	strh	r2, [r3, #44]	@ 0x2c

			//if finish
			registerFrame[BaseSystem_Status].U16 = 0;
 8002a04:	4b24      	ldr	r3, [pc, #144]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	805a      	strh	r2, [r3, #2]
			registerFrame[R_Theta_Status].U16 = 0;
 8002a0a:	4b23      	ldr	r3, [pc, #140]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	841a      	strh	r2, [r3, #32]
		}
		if (registerFrame[BaseSystem_Status].U16 == 8) { //go to
 8002a10:	4b21      	ldr	r3, [pc, #132]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a12:	885b      	ldrh	r3, [r3, #2]
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d11a      	bne.n	8002a4e <HAL_TIM_PeriodElapsedCallback+0x13e>

			registerFrame[R_Theta_Status].U16 = 8;
 8002a18:	4b1f      	ldr	r3, [pc, #124]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a1a:	2208      	movs	r2, #8
 8002a1c:	841a      	strh	r2, [r3, #32]
			//send Arm to target command

			// goto registerFrame[Goal_R].U16,registerFrame[Goal_Theta].U16

			//--tell Arm Status--//
			registerFrame[R_Axis_Actual_Position].U16 = 4; //Rev Pos
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a20:	2204      	movs	r2, #4
 8002a22:	845a      	strh	r2, [r3, #34]	@ 0x22
			registerFrame[Theta_Axis_Actual_Position].U16 = 4; //pris Pos
 8002a24:	4b1c      	ldr	r3, [pc, #112]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a26:	2204      	movs	r2, #4
 8002a28:	849a      	strh	r2, [r3, #36]	@ 0x24
			registerFrame[R_Axis_Actual_Speed].U16 = 4; //Rev speed
 8002a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	84da      	strh	r2, [r3, #38]	@ 0x26
			registerFrame[Theta_Axis_Actual_Speed].U16 = 4; //pris speed
 8002a30:	4b19      	ldr	r3, [pc, #100]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a32:	2204      	movs	r2, #4
 8002a34:	851a      	strh	r2, [r3, #40]	@ 0x28
			registerFrame[R_Axis_Acceleration].U16 = 4; //Rev Acc
 8002a36:	4b18      	ldr	r3, [pc, #96]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a38:	2204      	movs	r2, #4
 8002a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
			registerFrame[Theta_Axis_Acceleration].U16 = 4; //pris Acc
 8002a3c:	4b16      	ldr	r3, [pc, #88]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a3e:	2204      	movs	r2, #4
 8002a40:	859a      	strh	r2, [r3, #44]	@ 0x2c

			//if finish
			registerFrame[BaseSystem_Status].U16 = 0;
 8002a42:	4b15      	ldr	r3, [pc, #84]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	805a      	strh	r2, [r3, #2]
			registerFrame[R_Theta_Status].U16 = 0;
 8002a48:	4b13      	ldr	r3, [pc, #76]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	841a      	strh	r2, [r3, #32]

		}
		if (registerFrame[BaseSystem_Status].U16 == 16) { //stop
 8002a4e:	4b12      	ldr	r3, [pc, #72]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a50:	885b      	ldrh	r3, [r3, #2]
 8002a52:	2b10      	cmp	r3, #16
 8002a54:	d11a      	bne.n	8002a8c <HAL_TIM_PeriodElapsedCallback+0x17c>

			registerFrame[R_Theta_Status].U16 = 16;
 8002a56:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a58:	2210      	movs	r2, #16
 8002a5a:	841a      	strh	r2, [r3, #32]
			//send Arm to target command

			//--tell Arm Status--//
			registerFrame[R_Axis_Actual_Position].U16 = 5; //Rev Pos
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a5e:	2205      	movs	r2, #5
 8002a60:	845a      	strh	r2, [r3, #34]	@ 0x22
			registerFrame[Theta_Axis_Actual_Position].U16 = 5; //pris Pos
 8002a62:	4b0d      	ldr	r3, [pc, #52]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a64:	2205      	movs	r2, #5
 8002a66:	849a      	strh	r2, [r3, #36]	@ 0x24
			registerFrame[R_Axis_Actual_Speed].U16 = 0; //Rev speed
 8002a68:	4b0b      	ldr	r3, [pc, #44]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	84da      	strh	r2, [r3, #38]	@ 0x26
			registerFrame[Theta_Axis_Actual_Speed].U16 = 0; //pris speed
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	851a      	strh	r2, [r3, #40]	@ 0x28
			registerFrame[R_Axis_Acceleration].U16 = 0; //Rev Acc
 8002a74:	4b08      	ldr	r3, [pc, #32]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	855a      	strh	r2, [r3, #42]	@ 0x2a
			registerFrame[Theta_Axis_Acceleration].U16 = 0; //pris Acc
 8002a7a:	4b07      	ldr	r3, [pc, #28]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	859a      	strh	r2, [r3, #44]	@ 0x2c

			//if finish
			registerFrame[BaseSystem_Status].U16 = 0;
 8002a80:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	805a      	strh	r2, [r3, #2]
			registerFrame[R_Theta_Status].U16 = 0;
 8002a86:	4b04      	ldr	r3, [pc, #16]	@ (8002a98 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	841a      	strh	r2, [r3, #32]
//			cmd_ux = 0;
//		}
//
//		MDXX_set_range(&revolute_motor, 2000, cmd_ux);
	}
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20001704 	.word	0x20001704
 8002a98:	20001474 	.word	0x20001474

08002a9c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002aa0:	b672      	cpsid	i
}
 8002aa2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002aa4:	bf00      	nop
 8002aa6:	e7fd      	b.n	8002aa4 <Error_Handler+0x8>

08002aa8 <plotter_begin>:
float revolute_current = 0.0f;

int b1, b2, b3, b4, prox, emer, photo_pris, photo_revo, up_lim, low_lim;
float joy_x, joy_y;

void plotter_begin() {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg, SIGNAL_SINE);
 8002aae:	2100      	movs	r1, #0
 8002ab0:	48a4      	ldr	r0, [pc, #656]	@ (8002d44 <plotter_begin+0x29c>)
 8002ab2:	f000 fa79 	bl	8002fa8 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8002ab6:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 8002d48 <plotter_begin+0x2a0>
 8002aba:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 8002d4c <plotter_begin+0x2a4>
 8002abe:	eddf 1aa4 	vldr	s3, [pc, #656]	@ 8002d50 <plotter_begin+0x2a8>
 8002ac2:	ed9f 1aa3 	vldr	s2, [pc, #652]	@ 8002d50 <plotter_begin+0x2a8>
 8002ac6:	eddf 0aa3 	vldr	s1, [pc, #652]	@ 8002d54 <plotter_begin+0x2ac>
 8002aca:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8002d48 <plotter_begin+0x2a0>
 8002ace:	489d      	ldr	r0, [pc, #628]	@ (8002d44 <plotter_begin+0x29c>)
 8002ad0:	f000 fac8 	bl	8003064 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&chirp_linear_sg, SIGNAL_CHIRP);
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	48a0      	ldr	r0, [pc, #640]	@ (8002d58 <plotter_begin+0x2b0>)
 8002ad8:	f000 fa66 	bl	8002fa8 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_linear_sg, CHIRP_LINEAR_AMPLITUDE,
 8002adc:	eddf 2a9a 	vldr	s5, [pc, #616]	@ 8002d48 <plotter_begin+0x2a0>
 8002ae0:	ed9f 2a9a 	vldr	s4, [pc, #616]	@ 8002d4c <plotter_begin+0x2a4>
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8002aea:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002aee:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002af2:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8002d48 <plotter_begin+0x2a0>
 8002af6:	4898      	ldr	r0, [pc, #608]	@ (8002d58 <plotter_begin+0x2b0>)
 8002af8:	f000 fadf 	bl	80030ba <SIGNAL_config_chirp>
	CHIRP_LINEAR_START_FREQ,
	CHIRP_LINEAR_END_FREQ, CHIRP_LINEAR_DURATION, CHIRP_LINEAR,
	CHIRP_LINEAR_MIN_SETPOINT, CHIRP_LINEAR_MAX_SETPOINT);

	SIGNAL_init(&chirp_log_sg, SIGNAL_CHIRP);
 8002afc:	2101      	movs	r1, #1
 8002afe:	4897      	ldr	r0, [pc, #604]	@ (8002d5c <plotter_begin+0x2b4>)
 8002b00:	f000 fa52 	bl	8002fa8 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_log_sg, CHIRP_LOG_AMPLITUDE,
 8002b04:	eddf 2a90 	vldr	s5, [pc, #576]	@ 8002d48 <plotter_begin+0x2a0>
 8002b08:	ed9f 2a90 	vldr	s4, [pc, #576]	@ 8002d4c <plotter_begin+0x2a4>
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8002b12:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002b16:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002b1a:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8002d48 <plotter_begin+0x2a0>
 8002b1e:	488f      	ldr	r0, [pc, #572]	@ (8002d5c <plotter_begin+0x2b4>)
 8002b20:	f000 facb 	bl	80030ba <SIGNAL_config_chirp>
	CHIRP_LOG_START_FREQ,
	CHIRP_LOG_END_FREQ, CHIRP_LOG_DURATION, CHIRP_LOGARITHMIC,
	CHIRP_LOG_MIN_SETPOINT, CHIRP_LOG_MAX_SETPOINT);

	SIGNAL_init(&square_sg, SIGNAL_SQUARE);
 8002b24:	2102      	movs	r1, #2
 8002b26:	488e      	ldr	r0, [pc, #568]	@ (8002d60 <plotter_begin+0x2b8>)
 8002b28:	f000 fa3e 	bl	8002fa8 <SIGNAL_init>
	SIGNAL_config_square(&square_sg, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8002b2c:	ed9f 3a86 	vldr	s6, [pc, #536]	@ 8002d48 <plotter_begin+0x2a0>
 8002b30:	eddf 2a86 	vldr	s5, [pc, #536]	@ 8002d4c <plotter_begin+0x2a4>
 8002b34:	ed9f 2a86 	vldr	s4, [pc, #536]	@ 8002d50 <plotter_begin+0x2a8>
 8002b38:	eddf 1a85 	vldr	s3, [pc, #532]	@ 8002d50 <plotter_begin+0x2a8>
 8002b3c:	ed9f 1a89 	vldr	s2, [pc, #548]	@ 8002d64 <plotter_begin+0x2bc>
 8002b40:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002b44:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 8002d48 <plotter_begin+0x2a0>
 8002b48:	4885      	ldr	r0, [pc, #532]	@ (8002d60 <plotter_begin+0x2b8>)
 8002b4a:	f000 faea 	bl	8003122 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&ramp_sg, SIGNAL_RAMP);
 8002b4e:	2103      	movs	r1, #3
 8002b50:	4885      	ldr	r0, [pc, #532]	@ (8002d68 <plotter_begin+0x2c0>)
 8002b52:	f000 fa29 	bl	8002fa8 <SIGNAL_init>
	SIGNAL_config_ramp(&ramp_sg, RAMP_AMPLITUDE, RAMP_FREQUENCY,
 8002b56:	eddf 3a7c 	vldr	s7, [pc, #496]	@ 8002d48 <plotter_begin+0x2a0>
 8002b5a:	ed9f 3a7c 	vldr	s6, [pc, #496]	@ 8002d4c <plotter_begin+0x2a4>
 8002b5e:	eddf 2a7c 	vldr	s5, [pc, #496]	@ 8002d50 <plotter_begin+0x2a8>
 8002b62:	ed9f 2a7b 	vldr	s4, [pc, #492]	@ 8002d50 <plotter_begin+0x2a8>
 8002b66:	eddf 1a78 	vldr	s3, [pc, #480]	@ 8002d48 <plotter_begin+0x2a0>
 8002b6a:	ed9f 1a78 	vldr	s2, [pc, #480]	@ 8002d4c <plotter_begin+0x2a4>
 8002b6e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002b72:	ed9f 0a75 	vldr	s0, [pc, #468]	@ 8002d48 <plotter_begin+0x2a0>
 8002b76:	487c      	ldr	r0, [pc, #496]	@ (8002d68 <plotter_begin+0x2c0>)
 8002b78:	f000 fb03 	bl	8003182 <SIGNAL_config_ramp>
	RAMP_START, RAMP_END, RAMP_PHASE, RAMP_OFFSET,
	RAMP_MIN_SETPOINT, RAMP_MAX_SETPOINT);

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR_RATIO1);
 8002b7c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002b80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b88:	4978      	ldr	r1, [pc, #480]	@ (8002d6c <plotter_begin+0x2c4>)
 8002b8a:	4879      	ldr	r0, [pc, #484]	@ (8002d70 <plotter_begin+0x2c8>)
 8002b8c:	f7ff fa06 	bl	8001f9c <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR_RATIO2);
 8002b90:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002b94:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b9c:	4975      	ldr	r1, [pc, #468]	@ (8002d74 <plotter_begin+0x2cc>)
 8002b9e:	4876      	ldr	r0, [pc, #472]	@ (8002d78 <plotter_begin+0x2d0>)
 8002ba0:	f7ff f9fc 	bl	8001f9c <QEI_init>

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8002ba4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002bae:	2204      	movs	r2, #4
 8002bb0:	4972      	ldr	r1, [pc, #456]	@ (8002d7c <plotter_begin+0x2d4>)
 8002bb2:	4873      	ldr	r0, [pc, #460]	@ (8002d80 <plotter_begin+0x2d8>)
 8002bb4:	f7fe f9e6 	bl	8000f84 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8002bb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	4b71      	ldr	r3, [pc, #452]	@ (8002d84 <plotter_begin+0x2dc>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	496e      	ldr	r1, [pc, #440]	@ (8002d7c <plotter_begin+0x2d4>)
 8002bc4:	4870      	ldr	r0, [pc, #448]	@ (8002d88 <plotter_begin+0x2e0>)
 8002bc6:	f7fe f9dd 	bl	8000f84 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8002bca:	220c      	movs	r2, #12
 8002bcc:	496f      	ldr	r1, [pc, #444]	@ (8002d8c <plotter_begin+0x2e4>)
 8002bce:	4870      	ldr	r0, [pc, #448]	@ (8002d90 <plotter_begin+0x2e8>)
 8002bd0:	f7fe ffb6 	bl	8001b40 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8002bd4:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 8002d50 <plotter_begin+0x2a8>
 8002bd8:	ed9f 0a6e 	vldr	s0, [pc, #440]	@ 8002d94 <plotter_begin+0x2ec>
 8002bdc:	4868      	ldr	r0, [pc, #416]	@ (8002d80 <plotter_begin+0x2d8>)
 8002bde:	f7fe f9f5 	bl	8000fcc <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8002be2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8002d50 <plotter_begin+0x2a8>
 8002be6:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 8002d94 <plotter_begin+0x2ec>
 8002bea:	4867      	ldr	r0, [pc, #412]	@ (8002d88 <plotter_begin+0x2e0>)
 8002bec:	f7fe f9ee 	bl	8000fcc <MDXX_set_range>
	pen_up();
 8002bf0:	f000 f9ba 	bl	8002f68 <pen_up>

	PID_CONTROLLER_Init(&prismatic_position_pid, 2, 1e-7, 1, ZGX45RGG_400RPM_Constant.U_max);
 8002bf4:	4b68      	ldr	r3, [pc, #416]	@ (8002d98 <plotter_begin+0x2f0>)
 8002bf6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f7fd fef9 	bl	80009f4 <__aeabi_d2f>
 8002c02:	4603      	mov	r3, r0
 8002c04:	ee01 3a90 	vmov	s3, r3
 8002c08:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002c0c:	eddf 0a63 	vldr	s1, [pc, #396]	@ 8002d9c <plotter_begin+0x2f4>
 8002c10:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8002c14:	4862      	ldr	r0, [pc, #392]	@ (8002da0 <plotter_begin+0x2f8>)
 8002c16:	f7fe f98b 	bl	8000f30 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 25, 0, ZGX45RGG_400RPM_Constant.U_max);
 8002c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8002d98 <plotter_begin+0x2f0>)
 8002c1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002c20:	4610      	mov	r0, r2
 8002c22:	4619      	mov	r1, r3
 8002c24:	f7fd fee6 	bl	80009f4 <__aeabi_d2f>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	ee01 3a90 	vmov	s3, r3
 8002c2e:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 8002d50 <plotter_begin+0x2a8>
 8002c32:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8002c36:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 8002da4 <plotter_begin+0x2fc>
 8002c3a:	485b      	ldr	r0, [pc, #364]	@ (8002da8 <plotter_begin+0x300>)
 8002c3c:	f7fe f978 	bl	8000f30 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 2, 1e-7, 1, ZGX45RGG_150RPM_Constant.U_max);
 8002c40:	4b5a      	ldr	r3, [pc, #360]	@ (8002dac <plotter_begin+0x304>)
 8002c42:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002c46:	4610      	mov	r0, r2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	f7fd fed3 	bl	80009f4 <__aeabi_d2f>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	ee01 3a90 	vmov	s3, r3
 8002c54:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002c58:	eddf 0a50 	vldr	s1, [pc, #320]	@ 8002d9c <plotter_begin+0x2f4>
 8002c5c:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8002c60:	4853      	ldr	r0, [pc, #332]	@ (8002db0 <plotter_begin+0x308>)
 8002c62:	f7fe f965 	bl	8000f30 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 1000, 50, 0, ZGX45RGG_150RPM_Constant.U_max);
 8002c66:	4b51      	ldr	r3, [pc, #324]	@ (8002dac <plotter_begin+0x304>)
 8002c68:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	4619      	mov	r1, r3
 8002c70:	f7fd fec0 	bl	80009f4 <__aeabi_d2f>
 8002c74:	4603      	mov	r3, r0
 8002c76:	ee01 3a90 	vmov	s3, r3
 8002c7a:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 8002d50 <plotter_begin+0x2a8>
 8002c7e:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 8002db4 <plotter_begin+0x30c>
 8002c82:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8002db8 <plotter_begin+0x310>
 8002c86:	484d      	ldr	r0, [pc, #308]	@ (8002dbc <plotter_begin+0x314>)
 8002c88:	f7fe f952 	bl	8000f30 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8002c8c:	4947      	ldr	r1, [pc, #284]	@ (8002dac <plotter_begin+0x304>)
 8002c8e:	484c      	ldr	r0, [pc, #304]	@ (8002dc0 <plotter_begin+0x318>)
 8002c90:	f7fe fa76 	bl	8001180 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8002c94:	4940      	ldr	r1, [pc, #256]	@ (8002d98 <plotter_begin+0x2f0>)
 8002c96:	484b      	ldr	r0, [pc, #300]	@ (8002dc4 <plotter_begin+0x31c>)
 8002c98:	f7fe fa92 	bl	80011c0 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8002c9c:	4a4a      	ldr	r2, [pc, #296]	@ (8002dc8 <plotter_begin+0x320>)
 8002c9e:	4943      	ldr	r1, [pc, #268]	@ (8002dac <plotter_begin+0x304>)
 8002ca0:	484a      	ldr	r0, [pc, #296]	@ (8002dcc <plotter_begin+0x324>)
 8002ca2:	f7fe fa7b 	bl	800119c <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8002ca6:	4a48      	ldr	r2, [pc, #288]	@ (8002dc8 <plotter_begin+0x320>)
 8002ca8:	493b      	ldr	r1, [pc, #236]	@ (8002d98 <plotter_begin+0x2f0>)
 8002caa:	4849      	ldr	r0, [pc, #292]	@ (8002dd0 <plotter_begin+0x328>)
 8002cac:	f7fe fa96 	bl	80011dc <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE, ADC_CHANNELS, 3.3f, 4095.0f);
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8002dd4 <plotter_begin+0x32c>
 8002cb8:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8002dd8 <plotter_begin+0x330>
 8002cbc:	2328      	movs	r3, #40	@ 0x28
 8002cbe:	4a47      	ldr	r2, [pc, #284]	@ (8002ddc <plotter_begin+0x334>)
 8002cc0:	4947      	ldr	r1, [pc, #284]	@ (8002de0 <plotter_begin+0x338>)
 8002cc2:	4848      	ldr	r0, [pc, #288]	@ (8002de4 <plotter_begin+0x33c>)
 8002cc4:	f7fe f87c 	bl	8000dc0 <ADC_DMA_Init>
	ADC_DMA_Start(&adc_dma);
 8002cc8:	4846      	ldr	r0, [pc, #280]	@ (8002de4 <plotter_begin+0x33c>)
 8002cca:	f7fe f8ae 	bl	8000e2a <ADC_DMA_Start>

	FIR_init(&LP_prismatic_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002cce:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8002db8 <plotter_begin+0x310>
 8002cd2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002cd6:	211f      	movs	r1, #31
 8002cd8:	4843      	ldr	r0, [pc, #268]	@ (8002de8 <plotter_begin+0x340>)
 8002cda:	f7fe fa91 	bl	8001200 <FIR_init>
	FIR_init(&LP_prismatic_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002cde:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8002db8 <plotter_begin+0x310>
 8002ce2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002ce6:	211f      	movs	r1, #31
 8002ce8:	4840      	ldr	r0, [pc, #256]	@ (8002dec <plotter_begin+0x344>)
 8002cea:	f7fe fa89 	bl	8001200 <FIR_init>
	FIR_init(&LP_revolute_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002cee:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8002db8 <plotter_begin+0x310>
 8002cf2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002cf6:	211f      	movs	r1, #31
 8002cf8:	483d      	ldr	r0, [pc, #244]	@ (8002df0 <plotter_begin+0x348>)
 8002cfa:	f7fe fa81 	bl	8001200 <FIR_init>
	FIR_init(&LP_revolute_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8002cfe:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8002db8 <plotter_begin+0x310>
 8002d02:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8002d06:	211f      	movs	r1, #31
 8002d08:	483a      	ldr	r0, [pc, #232]	@ (8002df4 <plotter_begin+0x34c>)
 8002d0a:	f7fe fa79 	bl	8001200 <FIR_init>

	Kalman_Start(&flit_revolute_velocity, revolute_A, revolute_B);
 8002d0e:	4a3a      	ldr	r2, [pc, #232]	@ (8002df8 <plotter_begin+0x350>)
 8002d10:	493a      	ldr	r1, [pc, #232]	@ (8002dfc <plotter_begin+0x354>)
 8002d12:	483b      	ldr	r0, [pc, #236]	@ (8002e00 <plotter_begin+0x358>)
 8002d14:	f7ff fb88 	bl	8002428 <Kalman_Start>
	Kalman_Start(&flit_prismatic_velocity, prismatic_A, prismatic_B);
 8002d18:	4a3a      	ldr	r2, [pc, #232]	@ (8002e04 <plotter_begin+0x35c>)
 8002d1a:	493b      	ldr	r1, [pc, #236]	@ (8002e08 <plotter_begin+0x360>)
 8002d1c:	483b      	ldr	r0, [pc, #236]	@ (8002e0c <plotter_begin+0x364>)
 8002d1e:	f7ff fb83 	bl	8002428 <Kalman_Start>

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8002d22:	23c8      	movs	r3, #200	@ 0xc8
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	2315      	movs	r3, #21
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	4b39      	ldr	r3, [pc, #228]	@ (8002e10 <plotter_begin+0x368>)
 8002d2c:	4a39      	ldr	r2, [pc, #228]	@ (8002e14 <plotter_begin+0x36c>)
 8002d2e:	493a      	ldr	r1, [pc, #232]	@ (8002e18 <plotter_begin+0x370>)
 8002d30:	483a      	ldr	r0, [pc, #232]	@ (8002e1c <plotter_begin+0x374>)
 8002d32:	f7fe fbfd 	bl	8001530 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8002d36:	483a      	ldr	r0, [pc, #232]	@ (8002e20 <plotter_begin+0x378>)
 8002d38:	f004 fcdc 	bl	80076f4 <HAL_TIM_Base_Start_IT>
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	200006c8 	.word	0x200006c8
 8002d48:	3e6eeeef 	.word	0x3e6eeeef
 8002d4c:	be6eeeef 	.word	0xbe6eeeef
 8002d50:	00000000 	.word	0x00000000
 8002d54:	3d4ccccd 	.word	0x3d4ccccd
 8002d58:	2000070c 	.word	0x2000070c
 8002d5c:	20000750 	.word	0x20000750
 8002d60:	20000794 	.word	0x20000794
 8002d64:	3e99999a 	.word	0x3e99999a
 8002d68:	200007d8 	.word	0x200007d8
 8002d6c:	2000189c 	.word	0x2000189c
 8002d70:	20000538 	.word	0x20000538
 8002d74:	200017d0 	.word	0x200017d0
 8002d78:	20000584 	.word	0x20000584
 8002d7c:	20001a34 	.word	0x20001a34
 8002d80:	200004a0 	.word	0x200004a0
 8002d84:	48000800 	.word	0x48000800
 8002d88:	200004ec 	.word	0x200004ec
 8002d8c:	20001638 	.word	0x20001638
 8002d90:	20000698 	.word	0x20000698
 8002d94:	44fa0000 	.word	0x44fa0000
 8002d98:	20000048 	.word	0x20000048
 8002d9c:	33d6bf95 	.word	0x33d6bf95
 8002da0:	200005d0 	.word	0x200005d0
 8002da4:	43fa0000 	.word	0x43fa0000
 8002da8:	200005fc 	.word	0x200005fc
 8002dac:	20000000 	.word	0x20000000
 8002db0:	20000628 	.word	0x20000628
 8002db4:	42480000 	.word	0x42480000
 8002db8:	447a0000 	.word	0x447a0000
 8002dbc:	20000654 	.word	0x20000654
 8002dc0:	2000068c 	.word	0x2000068c
 8002dc4:	20000680 	.word	0x20000680
 8002dc8:	20000090 	.word	0x20000090
 8002dcc:	20000690 	.word	0x20000690
 8002dd0:	20000684 	.word	0x20000684
 8002dd4:	457ff000 	.word	0x457ff000
 8002dd8:	40533333 	.word	0x40533333
 8002ddc:	20000f4c 	.word	0x20000f4c
 8002de0:	200003d4 	.word	0x200003d4
 8002de4:	200006b0 	.word	0x200006b0
 8002de8:	20000828 	.word	0x20000828
 8002dec:	2000081c 	.word	0x2000081c
 8002df0:	20000840 	.word	0x20000840
 8002df4:	20000834 	.word	0x20000834
 8002df8:	20000348 	.word	0x20000348
 8002dfc:	20000308 	.word	0x20000308
 8002e00:	20000bcc 	.word	0x20000bcc
 8002e04:	200002f8 	.word	0x200002f8
 8002e08:	200002b8 	.word	0x200002b8
 8002e0c:	2000084c 	.word	0x2000084c
 8002e10:	20001474 	.word	0x20001474
 8002e14:	20001b00 	.word	0x20001b00
 8002e18:	20001bcc 	.word	0x20001bcc
 8002e1c:	20000f9c 	.word	0x20000f9c
 8002e20:	20001704 	.word	0x20001704

08002e24 <update_sensors>:

void update_sensors() {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_X_CHANNEL, 1.0);
 8002e28:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002e2c:	2106      	movs	r1, #6
 8002e2e:	483f      	ldr	r0, [pc, #252]	@ (8002f2c <update_sensors+0x108>)
 8002e30:	f7fe f856 	bl	8000ee0 <ADC_DMA_GetJoystick>
 8002e34:	eef0 7a40 	vmov.f32	s15, s0
 8002e38:	4b3d      	ldr	r3, [pc, #244]	@ (8002f30 <update_sensors+0x10c>)
 8002e3a:	edc3 7a00 	vstr	s15, [r3]
	joystick_y = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_Y_CHANNEL, 1.0);
 8002e3e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002e42:	2107      	movs	r1, #7
 8002e44:	4839      	ldr	r0, [pc, #228]	@ (8002f2c <update_sensors+0x108>)
 8002e46:	f7fe f84b 	bl	8000ee0 <ADC_DMA_GetJoystick>
 8002e4a:	eef0 7a40 	vmov.f32	s15, s0
 8002e4e:	4b39      	ldr	r3, [pc, #228]	@ (8002f34 <update_sensors+0x110>)
 8002e50:	edc3 7a00 	vstr	s15, [r3]

	b1 = !HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 8002e54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e58:	4837      	ldr	r0, [pc, #220]	@ (8002f38 <update_sensors+0x114>)
 8002e5a:	f003 faff 	bl	800645c <HAL_GPIO_ReadPin>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b33      	ldr	r3, [pc, #204]	@ (8002f3c <update_sensors+0x118>)
 8002e6e:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(SAVE_GPIO_Port, SAVE_Pin);
 8002e70:	2180      	movs	r1, #128	@ 0x80
 8002e72:	4833      	ldr	r0, [pc, #204]	@ (8002f40 <update_sensors+0x11c>)
 8002e74:	f003 faf2 	bl	800645c <HAL_GPIO_ReadPin>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf0c      	ite	eq
 8002e7e:	2301      	moveq	r3, #1
 8002e80:	2300      	movne	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	4b2f      	ldr	r3, [pc, #188]	@ (8002f44 <update_sensors+0x120>)
 8002e88:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(DELETE_GPIO_Port, DELETE_Pin);
 8002e8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002e8e:	482a      	ldr	r0, [pc, #168]	@ (8002f38 <update_sensors+0x114>)
 8002e90:	f003 fae4 	bl	800645c <HAL_GPIO_ReadPin>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bf0c      	ite	eq
 8002e9a:	2301      	moveq	r3, #1
 8002e9c:	2300      	movne	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b29      	ldr	r3, [pc, #164]	@ (8002f48 <update_sensors+0x124>)
 8002ea4:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(RESET_SYS_GPIO_Port, RESET_SYS_Pin);
 8002ea6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002eaa:	4823      	ldr	r0, [pc, #140]	@ (8002f38 <update_sensors+0x114>)
 8002eac:	f003 fad6 	bl	800645c <HAL_GPIO_ReadPin>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	bf0c      	ite	eq
 8002eb6:	2301      	moveq	r3, #1
 8002eb8:	2300      	movne	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4b23      	ldr	r3, [pc, #140]	@ (8002f4c <update_sensors+0x128>)
 8002ec0:	601a      	str	r2, [r3, #0]

	prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8002ec2:	2120      	movs	r1, #32
 8002ec4:	481e      	ldr	r0, [pc, #120]	@ (8002f40 <update_sensors+0x11c>)
 8002ec6:	f003 fac9 	bl	800645c <HAL_GPIO_ReadPin>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	461a      	mov	r2, r3
 8002ece:	4b20      	ldr	r3, [pc, #128]	@ (8002f50 <update_sensors+0x12c>)
 8002ed0:	601a      	str	r2, [r3, #0]
	photo_pris = HAL_GPIO_ReadPin(PHOTO_PRIS_GPIO_Port, PHOTO_PRIS_Pin);
 8002ed2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ed6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002eda:	f003 fabf 	bl	800645c <HAL_GPIO_ReadPin>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f54 <update_sensors+0x130>)
 8002ee4:	601a      	str	r2, [r3, #0]
	photo_revo = HAL_GPIO_ReadPin(PHOTO_REVO_GPIO_Port, PHOTO_REVO_Pin);
 8002ee6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002eea:	4815      	ldr	r0, [pc, #84]	@ (8002f40 <update_sensors+0x11c>)
 8002eec:	f003 fab6 	bl	800645c <HAL_GPIO_ReadPin>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b18      	ldr	r3, [pc, #96]	@ (8002f58 <update_sensors+0x134>)
 8002ef6:	601a      	str	r2, [r3, #0]
	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8002ef8:	2102      	movs	r1, #2
 8002efa:	4811      	ldr	r0, [pc, #68]	@ (8002f40 <update_sensors+0x11c>)
 8002efc:	f003 faae 	bl	800645c <HAL_GPIO_ReadPin>
 8002f00:	4603      	mov	r3, r0
 8002f02:	461a      	mov	r2, r3
 8002f04:	4b15      	ldr	r3, [pc, #84]	@ (8002f5c <update_sensors+0x138>)
 8002f06:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8002f08:	2104      	movs	r1, #4
 8002f0a:	480d      	ldr	r0, [pc, #52]	@ (8002f40 <update_sensors+0x11c>)
 8002f0c:	f003 faa6 	bl	800645c <HAL_GPIO_ReadPin>
 8002f10:	4603      	mov	r3, r0
 8002f12:	461a      	mov	r2, r3
 8002f14:	4b12      	ldr	r3, [pc, #72]	@ (8002f60 <update_sensors+0x13c>)
 8002f16:	601a      	str	r2, [r3, #0]

	emer = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8002f18:	2110      	movs	r1, #16
 8002f1a:	4809      	ldr	r0, [pc, #36]	@ (8002f40 <update_sensors+0x11c>)
 8002f1c:	f003 fa9e 	bl	800645c <HAL_GPIO_ReadPin>
 8002f20:	4603      	mov	r3, r0
 8002f22:	461a      	mov	r2, r3
 8002f24:	4b0f      	ldr	r3, [pc, #60]	@ (8002f64 <update_sensors+0x140>)
 8002f26:	601a      	str	r2, [r3, #0]
//    prismatic_current = ADC_DMA_ComputeCurrent(&adc_dma, PRISMATIC_CURRENT_CHANNEL, PRISMATIC_CURRENT_OFFSET);
//    revolute_current = ADC_DMA_ComputeCurrent(&adc_dma, REVOLUTE_CURRENT_CHANNEL, REVOLUTE_CURRENT_OFFSET);
}
 8002f28:	bf00      	nop
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	200006b0 	.word	0x200006b0
 8002f30:	20001604 	.word	0x20001604
 8002f34:	20001608 	.word	0x20001608
 8002f38:	48000800 	.word	0x48000800
 8002f3c:	2000160c 	.word	0x2000160c
 8002f40:	48000400 	.word	0x48000400
 8002f44:	20001610 	.word	0x20001610
 8002f48:	20001614 	.word	0x20001614
 8002f4c:	20001618 	.word	0x20001618
 8002f50:	2000161c 	.word	0x2000161c
 8002f54:	20001624 	.word	0x20001624
 8002f58:	20001628 	.word	0x20001628
 8002f5c:	2000162c 	.word	0x2000162c
 8002f60:	20001630 	.word	0x20001630
 8002f64:	20001620 	.word	0x20001620

08002f68 <pen_up>:

	joy_x = joystick_x;
	joy_y = joystick_y;
}

void pen_up() {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8002f6c:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8002f70:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8002f80 <pen_up+0x18>
 8002f74:	4803      	ldr	r0, [pc, #12]	@ (8002f84 <pen_up+0x1c>)
 8002f76:	f7fe fe05 	bl	8001b84 <PWM_write_duty>
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	42480000 	.word	0x42480000
 8002f84:	20000698 	.word	0x20000698

08002f88 <pen_down>:

void pen_down() {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 8002f8c:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8002f90:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8002fa0 <pen_down+0x18>
 8002f94:	4803      	ldr	r0, [pc, #12]	@ (8002fa4 <pen_down+0x1c>)
 8002f96:	f7fe fdf5 	bl	8001b84 <PWM_write_duty>
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	42480000 	.word	0x42480000
 8002fa4:	20000698 	.word	0x20000698

08002fa8 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002fc0:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002fc8:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a1b      	ldr	r2, [pc, #108]	@ (800305c <SIGNAL_init+0xb4>)
 8002fee:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002ff6:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d828      	bhi.n	8003050 <SIGNAL_init+0xa8>
 8002ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8003004 <SIGNAL_init+0x5c>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	0800304f 	.word	0x0800304f
 8003008:	08003015 	.word	0x08003015
 800300c:	08003033 	.word	0x08003033
 8003010:	0800303d 	.word	0x0800303d
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003020:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a0e      	ldr	r2, [pc, #56]	@ (8003060 <SIGNAL_init+0xb8>)
 8003026:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800302e:	621a      	str	r2, [r3, #32]
            break;
 8003030:	e00e      	b.n	8003050 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003038:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 800303a:	e009      	b.n	8003050 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800304a:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 800304c:	e000      	b.n	8003050 <SIGNAL_init+0xa8>
            break;
 800304e:	bf00      	nop
    }
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	bf800000 	.word	0xbf800000
 8003060:	41200000 	.word	0x41200000

08003064 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8003064:	b480      	push	{r7}
 8003066:	b089      	sub	sp, #36	@ 0x24
 8003068:	af00      	add	r7, sp, #0
 800306a:	61f8      	str	r0, [r7, #28]
 800306c:	ed87 0a06 	vstr	s0, [r7, #24]
 8003070:	edc7 0a05 	vstr	s1, [r7, #20]
 8003074:	ed87 1a04 	vstr	s2, [r7, #16]
 8003078:	edc7 1a03 	vstr	s3, [r7, #12]
 800307c:	ed87 2a02 	vstr	s4, [r7, #8]
 8003080:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	2200      	movs	r2, #0
 8003088:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80030ae:	bf00      	nop
 80030b0:	3724      	adds	r7, #36	@ 0x24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <SIGNAL_config_chirp>:
                         float32_t f_start,
                         float32_t f_end,
                         float32_t duration,
                         ChirpType chirp_type,
                         float32_t min_setpoint,
                         float32_t max_setpoint) {
 80030ba:	b480      	push	{r7}
 80030bc:	b089      	sub	sp, #36	@ 0x24
 80030be:	af00      	add	r7, sp, #0
 80030c0:	61f8      	str	r0, [r7, #28]
 80030c2:	ed87 0a06 	vstr	s0, [r7, #24]
 80030c6:	edc7 0a05 	vstr	s1, [r7, #20]
 80030ca:	ed87 1a04 	vstr	s2, [r7, #16]
 80030ce:	edc7 1a03 	vstr	s3, [r7, #12]
 80030d2:	460b      	mov	r3, r1
 80030d4:	ed87 2a01 	vstr	s4, [r7, #4]
 80030d8:	edc7 2a00 	vstr	s5, [r7]
 80030dc:	72fb      	strb	r3, [r7, #11]
    sg->type = SIGNAL_CHIRP;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	605a      	str	r2, [r3, #4]
    sg->f_start = f_start;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	619a      	str	r2, [r3, #24]
    sg->f_end = f_end;
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	61da      	str	r2, [r3, #28]
    sg->duration = duration;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	621a      	str	r2, [r3, #32]
    sg->chirp_type = chirp_type;
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	7afa      	ldrb	r2, [r7, #11]
 8003100:	751a      	strb	r2, [r3, #20]
    sg->t = 0.0f;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	625a      	str	r2, [r3, #36]	@ 0x24
    sg->min_setpoint = min_setpoint;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003116:	bf00      	nop
 8003118:	3724      	adds	r7, #36	@ 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8003122:	b480      	push	{r7}
 8003124:	b089      	sub	sp, #36	@ 0x24
 8003126:	af00      	add	r7, sp, #0
 8003128:	61f8      	str	r0, [r7, #28]
 800312a:	ed87 0a06 	vstr	s0, [r7, #24]
 800312e:	edc7 0a05 	vstr	s1, [r7, #20]
 8003132:	ed87 1a04 	vstr	s2, [r7, #16]
 8003136:	edc7 1a03 	vstr	s3, [r7, #12]
 800313a:	ed87 2a02 	vstr	s4, [r7, #8]
 800313e:	edc7 2a01 	vstr	s5, [r7, #4]
 8003142:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	2202      	movs	r2, #2
 800314a:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003176:	bf00      	nop
 8003178:	3724      	adds	r7, #36	@ 0x24
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <SIGNAL_config_ramp>:
                        float32_t ramp_start,
                        float32_t ramp_end,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8003182:	b480      	push	{r7}
 8003184:	b08b      	sub	sp, #44	@ 0x2c
 8003186:	af00      	add	r7, sp, #0
 8003188:	6278      	str	r0, [r7, #36]	@ 0x24
 800318a:	ed87 0a08 	vstr	s0, [r7, #32]
 800318e:	edc7 0a07 	vstr	s1, [r7, #28]
 8003192:	ed87 1a06 	vstr	s2, [r7, #24]
 8003196:	edc7 1a05 	vstr	s3, [r7, #20]
 800319a:	ed87 2a04 	vstr	s4, [r7, #16]
 800319e:	edc7 2a03 	vstr	s5, [r7, #12]
 80031a2:	ed87 3a02 	vstr	s6, [r7, #8]
 80031a6:	edc7 3a01 	vstr	s7, [r7, #4]
    sg->type = SIGNAL_RAMP;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	2203      	movs	r2, #3
 80031ae:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	6a3a      	ldr	r2, [r7, #32]
 80031b4:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80031b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b8:	69fa      	ldr	r2, [r7, #28]
 80031ba:	609a      	str	r2, [r3, #8]
    sg->ramp_start = ramp_start;
 80031bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    sg->ramp_end = ramp_end;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	631a      	str	r2, [r3, #48]	@ 0x30
    sg->phase = phase;
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80031da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80031e0:	bf00      	nop
 80031e2:	372c      	adds	r7, #44	@ 0x2c
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003230 <HAL_MspInit+0x44>)
 80031f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003230 <HAL_MspInit+0x44>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80031fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003230 <HAL_MspInit+0x44>)
 8003200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	607b      	str	r3, [r7, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800320a:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <HAL_MspInit+0x44>)
 800320c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320e:	4a08      	ldr	r2, [pc, #32]	@ (8003230 <HAL_MspInit+0x44>)
 8003210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003214:	6593      	str	r3, [r2, #88]	@ 0x58
 8003216:	4b06      	ldr	r3, [pc, #24]	@ (8003230 <HAL_MspInit+0x44>)
 8003218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800321e:	603b      	str	r3, [r7, #0]
 8003220:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003222:	f003 fa07 	bl	8006634 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000

08003234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003238:	bf00      	nop
 800323a:	e7fd      	b.n	8003238 <NMI_Handler+0x4>

0800323c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003240:	bf00      	nop
 8003242:	e7fd      	b.n	8003240 <HardFault_Handler+0x4>

08003244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003248:	bf00      	nop
 800324a:	e7fd      	b.n	8003248 <MemManage_Handler+0x4>

0800324c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003250:	bf00      	nop
 8003252:	e7fd      	b.n	8003250 <BusFault_Handler+0x4>

08003254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003258:	bf00      	nop
 800325a:	e7fd      	b.n	8003258 <UsageFault_Handler+0x4>

0800325c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800327c:	bf00      	nop
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800328a:	f000 fe8d 	bl	8003fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
	...

08003294 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003298:	4802      	ldr	r0, [pc, #8]	@ (80032a4 <DMA1_Channel1_IRQHandler+0x10>)
 800329a:	f002 fe0e 	bl	8005eba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	20000440 	.word	0x20000440

080032a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80032ac:	4802      	ldr	r0, [pc, #8]	@ (80032b8 <DMA1_Channel2_IRQHandler+0x10>)
 80032ae:	f002 fe04 	bl	8005eba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20001c98 	.word	0x20001c98

080032bc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80032c0:	4802      	ldr	r0, [pc, #8]	@ (80032cc <DMA1_Channel3_IRQHandler+0x10>)
 80032c2:	f002 fdfa 	bl	8005eba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80032c6:	bf00      	nop
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	20001cf8 	.word	0x20001cf8

080032d0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032d4:	4803      	ldr	r0, [pc, #12]	@ (80032e4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80032d6:	f004 fe33 	bl	8007f40 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80032da:	4803      	ldr	r0, [pc, #12]	@ (80032e8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80032dc:	f004 fe30 	bl	8007f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80032e0:	bf00      	nop
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20001638 	.word	0x20001638
 80032e8:	20001b00 	.word	0x20001b00

080032ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032f0:	4802      	ldr	r0, [pc, #8]	@ (80032fc <TIM2_IRQHandler+0x10>)
 80032f2:	f004 fe25 	bl	8007f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032f6:	bf00      	nop
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20001704 	.word	0x20001704

08003300 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003304:	4802      	ldr	r0, [pc, #8]	@ (8003310 <TIM3_IRQHandler+0x10>)
 8003306:	f004 fe1b 	bl	8007f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	200017d0 	.word	0x200017d0

08003314 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003318:	4802      	ldr	r0, [pc, #8]	@ (8003324 <TIM4_IRQHandler+0x10>)
 800331a:	f004 fe11 	bl	8007f40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	2000189c 	.word	0x2000189c

08003328 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800332c:	4802      	ldr	r0, [pc, #8]	@ (8003338 <USART2_IRQHandler+0x10>)
 800332e:	f006 fbdb 	bl	8009ae8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20001bcc 	.word	0x20001bcc

0800333c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003340:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003344:	f003 f8ba 	bl	80064bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003348:	bf00      	nop
 800334a:	bd80      	pop	{r7, pc}

0800334c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003354:	4a14      	ldr	r2, [pc, #80]	@ (80033a8 <_sbrk+0x5c>)
 8003356:	4b15      	ldr	r3, [pc, #84]	@ (80033ac <_sbrk+0x60>)
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003360:	4b13      	ldr	r3, [pc, #76]	@ (80033b0 <_sbrk+0x64>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d102      	bne.n	800336e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003368:	4b11      	ldr	r3, [pc, #68]	@ (80033b0 <_sbrk+0x64>)
 800336a:	4a12      	ldr	r2, [pc, #72]	@ (80033b4 <_sbrk+0x68>)
 800336c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800336e:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <_sbrk+0x64>)
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	429a      	cmp	r2, r3
 800337a:	d207      	bcs.n	800338c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800337c:	f008 f9ba 	bl	800b6f4 <__errno>
 8003380:	4603      	mov	r3, r0
 8003382:	220c      	movs	r2, #12
 8003384:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003386:	f04f 33ff 	mov.w	r3, #4294967295
 800338a:	e009      	b.n	80033a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800338c:	4b08      	ldr	r3, [pc, #32]	@ (80033b0 <_sbrk+0x64>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003392:	4b07      	ldr	r3, [pc, #28]	@ (80033b0 <_sbrk+0x64>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4413      	add	r3, r2
 800339a:	4a05      	ldr	r2, [pc, #20]	@ (80033b0 <_sbrk+0x64>)
 800339c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800339e:	68fb      	ldr	r3, [r7, #12]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20020000 	.word	0x20020000
 80033ac:	00000400 	.word	0x00000400
 80033b0:	20001634 	.word	0x20001634
 80033b4:	20001ea8 	.word	0x20001ea8

080033b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80033bc:	4b06      	ldr	r3, [pc, #24]	@ (80033d8 <SystemInit+0x20>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c2:	4a05      	ldr	r2, [pc, #20]	@ (80033d8 <SystemInit+0x20>)
 80033c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b098      	sub	sp, #96	@ 0x60
 80033e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	605a      	str	r2, [r3, #4]
 80033ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	609a      	str	r2, [r3, #8]
 80033fa:	60da      	str	r2, [r3, #12]
 80033fc:	611a      	str	r2, [r3, #16]
 80033fe:	615a      	str	r2, [r3, #20]
 8003400:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	2234      	movs	r2, #52	@ 0x34
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f008 f95b 	bl	800b6c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800340e:	4b3b      	ldr	r3, [pc, #236]	@ (80034fc <MX_TIM1_Init+0x120>)
 8003410:	4a3b      	ldr	r2, [pc, #236]	@ (8003500 <MX_TIM1_Init+0x124>)
 8003412:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003414:	4b39      	ldr	r3, [pc, #228]	@ (80034fc <MX_TIM1_Init+0x120>)
 8003416:	2200      	movs	r2, #0
 8003418:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800341a:	4b38      	ldr	r3, [pc, #224]	@ (80034fc <MX_TIM1_Init+0x120>)
 800341c:	2200      	movs	r2, #0
 800341e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003420:	4b36      	ldr	r3, [pc, #216]	@ (80034fc <MX_TIM1_Init+0x120>)
 8003422:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003426:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003428:	4b34      	ldr	r3, [pc, #208]	@ (80034fc <MX_TIM1_Init+0x120>)
 800342a:	2200      	movs	r2, #0
 800342c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800342e:	4b33      	ldr	r3, [pc, #204]	@ (80034fc <MX_TIM1_Init+0x120>)
 8003430:	2200      	movs	r2, #0
 8003432:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003434:	4b31      	ldr	r3, [pc, #196]	@ (80034fc <MX_TIM1_Init+0x120>)
 8003436:	2200      	movs	r2, #0
 8003438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800343a:	4830      	ldr	r0, [pc, #192]	@ (80034fc <MX_TIM1_Init+0x120>)
 800343c:	f004 f9d2 	bl	80077e4 <HAL_TIM_PWM_Init>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8003446:	f7ff fb29 	bl	8002a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800344a:	2300      	movs	r3, #0
 800344c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800344e:	2300      	movs	r3, #0
 8003450:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003452:	2300      	movs	r3, #0
 8003454:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003456:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800345a:	4619      	mov	r1, r3
 800345c:	4827      	ldr	r0, [pc, #156]	@ (80034fc <MX_TIM1_Init+0x120>)
 800345e:	f005 ffe3 	bl	8009428 <HAL_TIMEx_MasterConfigSynchronization>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003468:	f7ff fb18 	bl	8002a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800346c:	2360      	movs	r3, #96	@ 0x60
 800346e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003474:	2300      	movs	r3, #0
 8003476:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003478:	2300      	movs	r3, #0
 800347a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800347c:	2300      	movs	r3, #0
 800347e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003480:	2300      	movs	r3, #0
 8003482:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003484:	2300      	movs	r3, #0
 8003486:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003488:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800348c:	220c      	movs	r2, #12
 800348e:	4619      	mov	r1, r3
 8003490:	481a      	ldr	r0, [pc, #104]	@ (80034fc <MX_TIM1_Init+0x120>)
 8003492:	f004 fecf 	bl	8008234 <HAL_TIM_PWM_ConfigChannel>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800349c:	f7ff fafe 	bl	8002a9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034b0:	2300      	movs	r3, #0
 80034b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80034be:	2300      	movs	r3, #0
 80034c0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80034c2:	2300      	movs	r3, #0
 80034c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80034c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80034ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80034d0:	2300      	movs	r3, #0
 80034d2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80034d4:	2300      	movs	r3, #0
 80034d6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80034d8:	1d3b      	adds	r3, r7, #4
 80034da:	4619      	mov	r1, r3
 80034dc:	4807      	ldr	r0, [pc, #28]	@ (80034fc <MX_TIM1_Init+0x120>)
 80034de:	f006 f839 	bl	8009554 <HAL_TIMEx_ConfigBreakDeadTime>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80034e8:	f7ff fad8 	bl	8002a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80034ec:	4803      	ldr	r0, [pc, #12]	@ (80034fc <MX_TIM1_Init+0x120>)
 80034ee:	f000 fb5b 	bl	8003ba8 <HAL_TIM_MspPostInit>

}
 80034f2:	bf00      	nop
 80034f4:	3760      	adds	r7, #96	@ 0x60
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20001638 	.word	0x20001638
 8003500:	40012c00 	.word	0x40012c00

08003504 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b088      	sub	sp, #32
 8003508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800350a:	f107 0310 	add.w	r3, r7, #16
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	609a      	str	r2, [r3, #8]
 8003516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003518:	1d3b      	adds	r3, r7, #4
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
 800351e:	605a      	str	r2, [r3, #4]
 8003520:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003522:	4b1e      	ldr	r3, [pc, #120]	@ (800359c <MX_TIM2_Init+0x98>)
 8003524:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003528:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800352a:	4b1c      	ldr	r3, [pc, #112]	@ (800359c <MX_TIM2_Init+0x98>)
 800352c:	22a9      	movs	r2, #169	@ 0xa9
 800352e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003530:	4b1a      	ldr	r3, [pc, #104]	@ (800359c <MX_TIM2_Init+0x98>)
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003536:	4b19      	ldr	r3, [pc, #100]	@ (800359c <MX_TIM2_Init+0x98>)
 8003538:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800353c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800353e:	4b17      	ldr	r3, [pc, #92]	@ (800359c <MX_TIM2_Init+0x98>)
 8003540:	2200      	movs	r2, #0
 8003542:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003544:	4b15      	ldr	r3, [pc, #84]	@ (800359c <MX_TIM2_Init+0x98>)
 8003546:	2200      	movs	r2, #0
 8003548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800354a:	4814      	ldr	r0, [pc, #80]	@ (800359c <MX_TIM2_Init+0x98>)
 800354c:	f003 fffe 	bl	800754c <HAL_TIM_Base_Init>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003556:	f7ff faa1 	bl	8002a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800355a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800355e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003560:	f107 0310 	add.w	r3, r7, #16
 8003564:	4619      	mov	r1, r3
 8003566:	480d      	ldr	r0, [pc, #52]	@ (800359c <MX_TIM2_Init+0x98>)
 8003568:	f004 ff78 	bl	800845c <HAL_TIM_ConfigClockSource>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003572:	f7ff fa93 	bl	8002a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003576:	2300      	movs	r3, #0
 8003578:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800357e:	1d3b      	adds	r3, r7, #4
 8003580:	4619      	mov	r1, r3
 8003582:	4806      	ldr	r0, [pc, #24]	@ (800359c <MX_TIM2_Init+0x98>)
 8003584:	f005 ff50 	bl	8009428 <HAL_TIMEx_MasterConfigSynchronization>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800358e:	f7ff fa85 	bl	8002a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003592:	bf00      	nop
 8003594:	3720      	adds	r7, #32
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20001704 	.word	0x20001704

080035a0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08c      	sub	sp, #48	@ 0x30
 80035a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80035a6:	f107 030c 	add.w	r3, r7, #12
 80035aa:	2224      	movs	r2, #36	@ 0x24
 80035ac:	2100      	movs	r1, #0
 80035ae:	4618      	mov	r0, r3
 80035b0:	f008 f888 	bl	800b6c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035b4:	463b      	mov	r3, r7
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	605a      	str	r2, [r3, #4]
 80035bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80035be:	4b21      	ldr	r3, [pc, #132]	@ (8003644 <MX_TIM3_Init+0xa4>)
 80035c0:	4a21      	ldr	r2, [pc, #132]	@ (8003648 <MX_TIM3_Init+0xa8>)
 80035c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80035c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003644 <MX_TIM3_Init+0xa4>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003644 <MX_TIM3_Init+0xa4>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80035d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003644 <MX_TIM3_Init+0xa4>)
 80035d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80035d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003644 <MX_TIM3_Init+0xa4>)
 80035da:	2200      	movs	r2, #0
 80035dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035de:	4b19      	ldr	r3, [pc, #100]	@ (8003644 <MX_TIM3_Init+0xa4>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80035e4:	2303      	movs	r3, #3
 80035e6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80035e8:	2300      	movs	r3, #0
 80035ea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80035ec:	2301      	movs	r3, #1
 80035ee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80035f0:	2300      	movs	r3, #0
 80035f2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80035f8:	2300      	movs	r3, #0
 80035fa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035fc:	2301      	movs	r3, #1
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003600:	2300      	movs	r3, #0
 8003602:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003608:	f107 030c 	add.w	r3, r7, #12
 800360c:	4619      	mov	r1, r3
 800360e:	480d      	ldr	r0, [pc, #52]	@ (8003644 <MX_TIM3_Init+0xa4>)
 8003610:	f004 fb54 	bl	8007cbc <HAL_TIM_Encoder_Init>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800361a:	f7ff fa3f 	bl	8002a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800361e:	2300      	movs	r3, #0
 8003620:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003626:	463b      	mov	r3, r7
 8003628:	4619      	mov	r1, r3
 800362a:	4806      	ldr	r0, [pc, #24]	@ (8003644 <MX_TIM3_Init+0xa4>)
 800362c:	f005 fefc 	bl	8009428 <HAL_TIMEx_MasterConfigSynchronization>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003636:	f7ff fa31 	bl	8002a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800363a:	bf00      	nop
 800363c:	3730      	adds	r7, #48	@ 0x30
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	200017d0 	.word	0x200017d0
 8003648:	40000400 	.word	0x40000400

0800364c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08c      	sub	sp, #48	@ 0x30
 8003650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003652:	f107 030c 	add.w	r3, r7, #12
 8003656:	2224      	movs	r2, #36	@ 0x24
 8003658:	2100      	movs	r1, #0
 800365a:	4618      	mov	r0, r3
 800365c:	f008 f832 	bl	800b6c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003660:	463b      	mov	r3, r7
 8003662:	2200      	movs	r2, #0
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	605a      	str	r2, [r3, #4]
 8003668:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800366a:	4b21      	ldr	r3, [pc, #132]	@ (80036f0 <MX_TIM4_Init+0xa4>)
 800366c:	4a21      	ldr	r2, [pc, #132]	@ (80036f4 <MX_TIM4_Init+0xa8>)
 800366e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003670:	4b1f      	ldr	r3, [pc, #124]	@ (80036f0 <MX_TIM4_Init+0xa4>)
 8003672:	2200      	movs	r2, #0
 8003674:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003676:	4b1e      	ldr	r3, [pc, #120]	@ (80036f0 <MX_TIM4_Init+0xa4>)
 8003678:	2200      	movs	r2, #0
 800367a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800367c:	4b1c      	ldr	r3, [pc, #112]	@ (80036f0 <MX_TIM4_Init+0xa4>)
 800367e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003682:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003684:	4b1a      	ldr	r3, [pc, #104]	@ (80036f0 <MX_TIM4_Init+0xa4>)
 8003686:	2200      	movs	r2, #0
 8003688:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800368a:	4b19      	ldr	r3, [pc, #100]	@ (80036f0 <MX_TIM4_Init+0xa4>)
 800368c:	2200      	movs	r2, #0
 800368e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003690:	2303      	movs	r3, #3
 8003692:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003694:	2300      	movs	r3, #0
 8003696:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003698:	2301      	movs	r3, #1
 800369a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036a4:	2300      	movs	r3, #0
 80036a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80036a8:	2301      	movs	r3, #1
 80036aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80036ac:	2300      	movs	r3, #0
 80036ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80036b4:	f107 030c 	add.w	r3, r7, #12
 80036b8:	4619      	mov	r1, r3
 80036ba:	480d      	ldr	r0, [pc, #52]	@ (80036f0 <MX_TIM4_Init+0xa4>)
 80036bc:	f004 fafe 	bl	8007cbc <HAL_TIM_Encoder_Init>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80036c6:	f7ff f9e9 	bl	8002a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036ca:	2300      	movs	r3, #0
 80036cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036d2:	463b      	mov	r3, r7
 80036d4:	4619      	mov	r1, r3
 80036d6:	4806      	ldr	r0, [pc, #24]	@ (80036f0 <MX_TIM4_Init+0xa4>)
 80036d8:	f005 fea6 	bl	8009428 <HAL_TIMEx_MasterConfigSynchronization>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80036e2:	f7ff f9db 	bl	8002a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80036e6:	bf00      	nop
 80036e8:	3730      	adds	r7, #48	@ 0x30
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	2000189c 	.word	0x2000189c
 80036f4:	40000800 	.word	0x40000800

080036f8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b088      	sub	sp, #32
 80036fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036fe:	f107 0310 	add.w	r3, r7, #16
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	605a      	str	r2, [r3, #4]
 8003708:	609a      	str	r2, [r3, #8]
 800370a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800370c:	1d3b      	adds	r3, r7, #4
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003716:	4b1d      	ldr	r3, [pc, #116]	@ (800378c <MX_TIM5_Init+0x94>)
 8003718:	4a1d      	ldr	r2, [pc, #116]	@ (8003790 <MX_TIM5_Init+0x98>)
 800371a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 800371c:	4b1b      	ldr	r3, [pc, #108]	@ (800378c <MX_TIM5_Init+0x94>)
 800371e:	22a9      	movs	r2, #169	@ 0xa9
 8003720:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003722:	4b1a      	ldr	r3, [pc, #104]	@ (800378c <MX_TIM5_Init+0x94>)
 8003724:	2200      	movs	r2, #0
 8003726:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003728:	4b18      	ldr	r3, [pc, #96]	@ (800378c <MX_TIM5_Init+0x94>)
 800372a:	f04f 32ff 	mov.w	r2, #4294967295
 800372e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003730:	4b16      	ldr	r3, [pc, #88]	@ (800378c <MX_TIM5_Init+0x94>)
 8003732:	2200      	movs	r2, #0
 8003734:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003736:	4b15      	ldr	r3, [pc, #84]	@ (800378c <MX_TIM5_Init+0x94>)
 8003738:	2200      	movs	r2, #0
 800373a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800373c:	4813      	ldr	r0, [pc, #76]	@ (800378c <MX_TIM5_Init+0x94>)
 800373e:	f003 ff05 	bl	800754c <HAL_TIM_Base_Init>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003748:	f7ff f9a8 	bl	8002a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800374c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003750:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003752:	f107 0310 	add.w	r3, r7, #16
 8003756:	4619      	mov	r1, r3
 8003758:	480c      	ldr	r0, [pc, #48]	@ (800378c <MX_TIM5_Init+0x94>)
 800375a:	f004 fe7f 	bl	800845c <HAL_TIM_ConfigClockSource>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003764:	f7ff f99a 	bl	8002a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003768:	2300      	movs	r3, #0
 800376a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800376c:	2300      	movs	r3, #0
 800376e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003770:	1d3b      	adds	r3, r7, #4
 8003772:	4619      	mov	r1, r3
 8003774:	4805      	ldr	r0, [pc, #20]	@ (800378c <MX_TIM5_Init+0x94>)
 8003776:	f005 fe57 	bl	8009428 <HAL_TIMEx_MasterConfigSynchronization>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003780:	f7ff f98c 	bl	8002a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003784:	bf00      	nop
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	20001968 	.word	0x20001968
 8003790:	40000c00 	.word	0x40000c00

08003794 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b09c      	sub	sp, #112	@ 0x70
 8003798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800379a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	605a      	str	r2, [r3, #4]
 80037a4:	609a      	str	r2, [r3, #8]
 80037a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	611a      	str	r2, [r3, #16]
 80037c4:	615a      	str	r2, [r3, #20]
 80037c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80037c8:	1d3b      	adds	r3, r7, #4
 80037ca:	2234      	movs	r2, #52	@ 0x34
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f007 ff78 	bl	800b6c4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80037d4:	4b51      	ldr	r3, [pc, #324]	@ (800391c <MX_TIM8_Init+0x188>)
 80037d6:	4a52      	ldr	r2, [pc, #328]	@ (8003920 <MX_TIM8_Init+0x18c>)
 80037d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80037da:	4b50      	ldr	r3, [pc, #320]	@ (800391c <MX_TIM8_Init+0x188>)
 80037dc:	2200      	movs	r2, #0
 80037de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e0:	4b4e      	ldr	r3, [pc, #312]	@ (800391c <MX_TIM8_Init+0x188>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80037e6:	4b4d      	ldr	r3, [pc, #308]	@ (800391c <MX_TIM8_Init+0x188>)
 80037e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037ec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ee:	4b4b      	ldr	r3, [pc, #300]	@ (800391c <MX_TIM8_Init+0x188>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80037f4:	4b49      	ldr	r3, [pc, #292]	@ (800391c <MX_TIM8_Init+0x188>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037fa:	4b48      	ldr	r3, [pc, #288]	@ (800391c <MX_TIM8_Init+0x188>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003800:	4846      	ldr	r0, [pc, #280]	@ (800391c <MX_TIM8_Init+0x188>)
 8003802:	f003 fea3 	bl	800754c <HAL_TIM_Base_Init>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800380c:	f7ff f946 	bl	8002a9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003814:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003816:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800381a:	4619      	mov	r1, r3
 800381c:	483f      	ldr	r0, [pc, #252]	@ (800391c <MX_TIM8_Init+0x188>)
 800381e:	f004 fe1d 	bl	800845c <HAL_TIM_ConfigClockSource>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003828:	f7ff f938 	bl	8002a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800382c:	483b      	ldr	r0, [pc, #236]	@ (800391c <MX_TIM8_Init+0x188>)
 800382e:	f003 ffd9 	bl	80077e4 <HAL_TIM_PWM_Init>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003838:	f7ff f930 	bl	8002a9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800383c:	2300      	movs	r3, #0
 800383e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003840:	2300      	movs	r3, #0
 8003842:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003844:	2300      	movs	r3, #0
 8003846:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003848:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800384c:	4619      	mov	r1, r3
 800384e:	4833      	ldr	r0, [pc, #204]	@ (800391c <MX_TIM8_Init+0x188>)
 8003850:	f005 fdea 	bl	8009428 <HAL_TIMEx_MasterConfigSynchronization>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800385a:	f7ff f91f 	bl	8002a9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800385e:	2360      	movs	r3, #96	@ 0x60
 8003860:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003866:	2300      	movs	r3, #0
 8003868:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800386a:	2300      	movs	r3, #0
 800386c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800386e:	2300      	movs	r3, #0
 8003870:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003872:	2300      	movs	r3, #0
 8003874:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003876:	2300      	movs	r3, #0
 8003878:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800387a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800387e:	2200      	movs	r2, #0
 8003880:	4619      	mov	r1, r3
 8003882:	4826      	ldr	r0, [pc, #152]	@ (800391c <MX_TIM8_Init+0x188>)
 8003884:	f004 fcd6 	bl	8008234 <HAL_TIM_PWM_ConfigChannel>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800388e:	f7ff f905 	bl	8002a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003892:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003896:	2204      	movs	r2, #4
 8003898:	4619      	mov	r1, r3
 800389a:	4820      	ldr	r0, [pc, #128]	@ (800391c <MX_TIM8_Init+0x188>)
 800389c:	f004 fcca 	bl	8008234 <HAL_TIM_PWM_ConfigChannel>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 80038a6:	f7ff f8f9 	bl	8002a9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038ae:	2208      	movs	r2, #8
 80038b0:	4619      	mov	r1, r3
 80038b2:	481a      	ldr	r0, [pc, #104]	@ (800391c <MX_TIM8_Init+0x188>)
 80038b4:	f004 fcbe 	bl	8008234 <HAL_TIM_PWM_ConfigChannel>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 80038be:	f7ff f8ed 	bl	8002a9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038c2:	2300      	movs	r3, #0
 80038c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80038e0:	2300      	movs	r3, #0
 80038e2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80038e4:	2300      	movs	r3, #0
 80038e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80038e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80038f2:	2300      	movs	r3, #0
 80038f4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038f6:	2300      	movs	r3, #0
 80038f8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80038fa:	1d3b      	adds	r3, r7, #4
 80038fc:	4619      	mov	r1, r3
 80038fe:	4807      	ldr	r0, [pc, #28]	@ (800391c <MX_TIM8_Init+0x188>)
 8003900:	f005 fe28 	bl	8009554 <HAL_TIMEx_ConfigBreakDeadTime>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 800390a:	f7ff f8c7 	bl	8002a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800390e:	4803      	ldr	r0, [pc, #12]	@ (800391c <MX_TIM8_Init+0x188>)
 8003910:	f000 f94a 	bl	8003ba8 <HAL_TIM_MspPostInit>

}
 8003914:	bf00      	nop
 8003916:	3770      	adds	r7, #112	@ 0x70
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20001a34 	.word	0x20001a34
 8003920:	40013400 	.word	0x40013400

08003924 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003928:	4b14      	ldr	r3, [pc, #80]	@ (800397c <MX_TIM16_Init+0x58>)
 800392a:	4a15      	ldr	r2, [pc, #84]	@ (8003980 <MX_TIM16_Init+0x5c>)
 800392c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800392e:	4b13      	ldr	r3, [pc, #76]	@ (800397c <MX_TIM16_Init+0x58>)
 8003930:	22a9      	movs	r2, #169	@ 0xa9
 8003932:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003934:	4b11      	ldr	r3, [pc, #68]	@ (800397c <MX_TIM16_Init+0x58>)
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800393a:	4b10      	ldr	r3, [pc, #64]	@ (800397c <MX_TIM16_Init+0x58>)
 800393c:	f240 4279 	movw	r2, #1145	@ 0x479
 8003940:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003942:	4b0e      	ldr	r3, [pc, #56]	@ (800397c <MX_TIM16_Init+0x58>)
 8003944:	2200      	movs	r2, #0
 8003946:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003948:	4b0c      	ldr	r3, [pc, #48]	@ (800397c <MX_TIM16_Init+0x58>)
 800394a:	2200      	movs	r2, #0
 800394c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800394e:	4b0b      	ldr	r3, [pc, #44]	@ (800397c <MX_TIM16_Init+0x58>)
 8003950:	2200      	movs	r2, #0
 8003952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003954:	4809      	ldr	r0, [pc, #36]	@ (800397c <MX_TIM16_Init+0x58>)
 8003956:	f003 fdf9 	bl	800754c <HAL_TIM_Base_Init>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003960:	f7ff f89c 	bl	8002a9c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003964:	2108      	movs	r1, #8
 8003966:	4805      	ldr	r0, [pc, #20]	@ (800397c <MX_TIM16_Init+0x58>)
 8003968:	f004 f8b2 	bl	8007ad0 <HAL_TIM_OnePulse_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8003972:	f7ff f893 	bl	8002a9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20001b00 	.word	0x20001b00
 8003980:	40014400 	.word	0x40014400

08003984 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a0d      	ldr	r2, [pc, #52]	@ (80039c8 <HAL_TIM_PWM_MspInit+0x44>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d113      	bne.n	80039be <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003996:	4b0d      	ldr	r3, [pc, #52]	@ (80039cc <HAL_TIM_PWM_MspInit+0x48>)
 8003998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800399a:	4a0c      	ldr	r2, [pc, #48]	@ (80039cc <HAL_TIM_PWM_MspInit+0x48>)
 800399c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80039a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80039a2:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <HAL_TIM_PWM_MspInit+0x48>)
 80039a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80039ae:	2200      	movs	r2, #0
 80039b0:	2100      	movs	r1, #0
 80039b2:	2019      	movs	r0, #25
 80039b4:	f002 f869 	bl	8005a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80039b8:	2019      	movs	r0, #25
 80039ba:	f002 f880 	bl	8005abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40021000 	.word	0x40021000

080039d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039e0:	d114      	bne.n	8003a0c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003a90 <HAL_TIM_Base_MspInit+0xc0>)
 80039e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e6:	4a2a      	ldr	r2, [pc, #168]	@ (8003a90 <HAL_TIM_Base_MspInit+0xc0>)
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80039ee:	4b28      	ldr	r3, [pc, #160]	@ (8003a90 <HAL_TIM_Base_MspInit+0xc0>)
 80039f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80039fa:	2200      	movs	r2, #0
 80039fc:	2100      	movs	r1, #0
 80039fe:	201c      	movs	r0, #28
 8003a00:	f002 f843 	bl	8005a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a04:	201c      	movs	r0, #28
 8003a06:	f002 f85a 	bl	8005abe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003a0a:	e03c      	b.n	8003a86 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a20      	ldr	r2, [pc, #128]	@ (8003a94 <HAL_TIM_Base_MspInit+0xc4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d10c      	bne.n	8003a30 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a16:	4b1e      	ldr	r3, [pc, #120]	@ (8003a90 <HAL_TIM_Base_MspInit+0xc0>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003a90 <HAL_TIM_Base_MspInit+0xc0>)
 8003a1c:	f043 0308 	orr.w	r3, r3, #8
 8003a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a22:	4b1b      	ldr	r3, [pc, #108]	@ (8003a90 <HAL_TIM_Base_MspInit+0xc0>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	693b      	ldr	r3, [r7, #16]
}
 8003a2e:	e02a      	b.n	8003a86 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a18      	ldr	r2, [pc, #96]	@ (8003a98 <HAL_TIM_Base_MspInit+0xc8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d10c      	bne.n	8003a54 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003a3a:	4b15      	ldr	r3, [pc, #84]	@ (8003a90 <HAL_TIM_Base_MspInit+0xc0>)
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3e:	4a14      	ldr	r2, [pc, #80]	@ (8003a90 <HAL_TIM_Base_MspInit+0xc0>)
 8003a40:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a44:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a46:	4b12      	ldr	r3, [pc, #72]	@ (8003a90 <HAL_TIM_Base_MspInit+0xc0>)
 8003a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
}
 8003a52:	e018      	b.n	8003a86 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a10      	ldr	r2, [pc, #64]	@ (8003a9c <HAL_TIM_Base_MspInit+0xcc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d113      	bne.n	8003a86 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a90 <HAL_TIM_Base_MspInit+0xc0>)
 8003a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a62:	4a0b      	ldr	r2, [pc, #44]	@ (8003a90 <HAL_TIM_Base_MspInit+0xc0>)
 8003a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a68:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a6a:	4b09      	ldr	r3, [pc, #36]	@ (8003a90 <HAL_TIM_Base_MspInit+0xc0>)
 8003a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a72:	60bb      	str	r3, [r7, #8]
 8003a74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003a76:	2200      	movs	r2, #0
 8003a78:	2100      	movs	r1, #0
 8003a7a:	2019      	movs	r0, #25
 8003a7c:	f002 f805 	bl	8005a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003a80:	2019      	movs	r0, #25
 8003a82:	f002 f81c 	bl	8005abe <HAL_NVIC_EnableIRQ>
}
 8003a86:	bf00      	nop
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40021000 	.word	0x40021000
 8003a94:	40000c00 	.word	0x40000c00
 8003a98:	40013400 	.word	0x40013400
 8003a9c:	40014400 	.word	0x40014400

08003aa0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08c      	sub	sp, #48	@ 0x30
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa8:	f107 031c 	add.w	r3, r7, #28
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a37      	ldr	r2, [pc, #220]	@ (8003b9c <HAL_TIM_Encoder_MspInit+0xfc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d131      	bne.n	8003b26 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ac2:	4b37      	ldr	r3, [pc, #220]	@ (8003ba0 <HAL_TIM_Encoder_MspInit+0x100>)
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac6:	4a36      	ldr	r2, [pc, #216]	@ (8003ba0 <HAL_TIM_Encoder_MspInit+0x100>)
 8003ac8:	f043 0302 	orr.w	r3, r3, #2
 8003acc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ace:	4b34      	ldr	r3, [pc, #208]	@ (8003ba0 <HAL_TIM_Encoder_MspInit+0x100>)
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	61bb      	str	r3, [r7, #24]
 8003ad8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ada:	4b31      	ldr	r3, [pc, #196]	@ (8003ba0 <HAL_TIM_Encoder_MspInit+0x100>)
 8003adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ade:	4a30      	ldr	r2, [pc, #192]	@ (8003ba0 <HAL_TIM_Encoder_MspInit+0x100>)
 8003ae0:	f043 0301 	orr.w	r3, r3, #1
 8003ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ae6:	4b2e      	ldr	r3, [pc, #184]	@ (8003ba0 <HAL_TIM_Encoder_MspInit+0x100>)
 8003ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003af2:	23c0      	movs	r3, #192	@ 0xc0
 8003af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af6:	2302      	movs	r3, #2
 8003af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003afe:	2300      	movs	r3, #0
 8003b00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b02:	2302      	movs	r3, #2
 8003b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b06:	f107 031c 	add.w	r3, r7, #28
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b10:	f002 fb22 	bl	8006158 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b14:	2200      	movs	r2, #0
 8003b16:	2100      	movs	r1, #0
 8003b18:	201d      	movs	r0, #29
 8003b1a:	f001 ffb6 	bl	8005a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b1e:	201d      	movs	r0, #29
 8003b20:	f001 ffcd 	bl	8005abe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003b24:	e036      	b.n	8003b94 <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM4)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba4 <HAL_TIM_Encoder_MspInit+0x104>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d131      	bne.n	8003b94 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b30:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba0 <HAL_TIM_Encoder_MspInit+0x100>)
 8003b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b34:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba0 <HAL_TIM_Encoder_MspInit+0x100>)
 8003b36:	f043 0304 	orr.w	r3, r3, #4
 8003b3a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b3c:	4b18      	ldr	r3, [pc, #96]	@ (8003ba0 <HAL_TIM_Encoder_MspInit+0x100>)
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b48:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <HAL_TIM_Encoder_MspInit+0x100>)
 8003b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b4c:	4a14      	ldr	r2, [pc, #80]	@ (8003ba0 <HAL_TIM_Encoder_MspInit+0x100>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b54:	4b12      	ldr	r3, [pc, #72]	@ (8003ba0 <HAL_TIM_Encoder_MspInit+0x100>)
 8003b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003b60:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b66:	2302      	movs	r3, #2
 8003b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003b72:	230a      	movs	r3, #10
 8003b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b76:	f107 031c 	add.w	r3, r7, #28
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b80:	f002 faea 	bl	8006158 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b84:	2200      	movs	r2, #0
 8003b86:	2100      	movs	r1, #0
 8003b88:	201e      	movs	r0, #30
 8003b8a:	f001 ff7e 	bl	8005a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003b8e:	201e      	movs	r0, #30
 8003b90:	f001 ff95 	bl	8005abe <HAL_NVIC_EnableIRQ>
}
 8003b94:	bf00      	nop
 8003b96:	3730      	adds	r7, #48	@ 0x30
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40000800 	.word	0x40000800

08003ba8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	@ 0x28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb0:	f107 0314 	add.w	r3, r7, #20
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	60da      	str	r2, [r3, #12]
 8003bbe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a30      	ldr	r2, [pc, #192]	@ (8003c88 <HAL_TIM_MspPostInit+0xe0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d11c      	bne.n	8003c04 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bca:	4b30      	ldr	r3, [pc, #192]	@ (8003c8c <HAL_TIM_MspPostInit+0xe4>)
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bce:	4a2f      	ldr	r2, [pc, #188]	@ (8003c8c <HAL_TIM_MspPostInit+0xe4>)
 8003bd0:	f043 0304 	orr.w	r3, r3, #4
 8003bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8003c8c <HAL_TIM_MspPostInit+0xe4>)
 8003bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003be2:	2308      	movs	r3, #8
 8003be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be6:	2302      	movs	r3, #2
 8003be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bf6:	f107 0314 	add.w	r3, r7, #20
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4824      	ldr	r0, [pc, #144]	@ (8003c90 <HAL_TIM_MspPostInit+0xe8>)
 8003bfe:	f002 faab 	bl	8006158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003c02:	e03d      	b.n	8003c80 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM8)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a22      	ldr	r2, [pc, #136]	@ (8003c94 <HAL_TIM_MspPostInit+0xec>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d138      	bne.n	8003c80 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003c8c <HAL_TIM_MspPostInit+0xe4>)
 8003c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c12:	4a1e      	ldr	r2, [pc, #120]	@ (8003c8c <HAL_TIM_MspPostInit+0xe4>)
 8003c14:	f043 0304 	orr.w	r3, r3, #4
 8003c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003c8c <HAL_TIM_MspPostInit+0xe4>)
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c26:	4b19      	ldr	r3, [pc, #100]	@ (8003c8c <HAL_TIM_MspPostInit+0xe4>)
 8003c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c2a:	4a18      	ldr	r2, [pc, #96]	@ (8003c8c <HAL_TIM_MspPostInit+0xe4>)
 8003c2c:	f043 0302 	orr.w	r3, r3, #2
 8003c30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c32:	4b16      	ldr	r3, [pc, #88]	@ (8003c8c <HAL_TIM_MspPostInit+0xe4>)
 8003c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c36:	f003 0302 	and.w	r3, r3, #2
 8003c3a:	60bb      	str	r3, [r7, #8]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c3e:	23c0      	movs	r3, #192	@ 0xc0
 8003c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c42:	2302      	movs	r3, #2
 8003c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003c4e:	2304      	movs	r3, #4
 8003c50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c52:	f107 0314 	add.w	r3, r7, #20
 8003c56:	4619      	mov	r1, r3
 8003c58:	480d      	ldr	r0, [pc, #52]	@ (8003c90 <HAL_TIM_MspPostInit+0xe8>)
 8003c5a:	f002 fa7d 	bl	8006158 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c64:	2302      	movs	r3, #2
 8003c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003c70:	230a      	movs	r3, #10
 8003c72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c74:	f107 0314 	add.w	r3, r7, #20
 8003c78:	4619      	mov	r1, r3
 8003c7a:	4807      	ldr	r0, [pc, #28]	@ (8003c98 <HAL_TIM_MspPostInit+0xf0>)
 8003c7c:	f002 fa6c 	bl	8006158 <HAL_GPIO_Init>
}
 8003c80:	bf00      	nop
 8003c82:	3728      	adds	r7, #40	@ 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40012c00 	.word	0x40012c00
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	48000800 	.word	0x48000800
 8003c94:	40013400 	.word	0x40013400
 8003c98:	48000400 	.word	0x48000400

08003c9c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ca0:	4b23      	ldr	r3, [pc, #140]	@ (8003d30 <MX_USART2_UART_Init+0x94>)
 8003ca2:	4a24      	ldr	r2, [pc, #144]	@ (8003d34 <MX_USART2_UART_Init+0x98>)
 8003ca4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8003ca6:	4b22      	ldr	r3, [pc, #136]	@ (8003d30 <MX_USART2_UART_Init+0x94>)
 8003ca8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003cac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003cae:	4b20      	ldr	r3, [pc, #128]	@ (8003d30 <MX_USART2_UART_Init+0x94>)
 8003cb0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003cb4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003d30 <MX_USART2_UART_Init+0x94>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8003d30 <MX_USART2_UART_Init+0x94>)
 8003cbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d30 <MX_USART2_UART_Init+0x94>)
 8003cc6:	220c      	movs	r2, #12
 8003cc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003cca:	4b19      	ldr	r3, [pc, #100]	@ (8003d30 <MX_USART2_UART_Init+0x94>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003cd0:	4b17      	ldr	r3, [pc, #92]	@ (8003d30 <MX_USART2_UART_Init+0x94>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003cd6:	4b16      	ldr	r3, [pc, #88]	@ (8003d30 <MX_USART2_UART_Init+0x94>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003cdc:	4b14      	ldr	r3, [pc, #80]	@ (8003d30 <MX_USART2_UART_Init+0x94>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ce2:	4b13      	ldr	r3, [pc, #76]	@ (8003d30 <MX_USART2_UART_Init+0x94>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ce8:	4811      	ldr	r0, [pc, #68]	@ (8003d30 <MX_USART2_UART_Init+0x94>)
 8003cea:	f005 fd17 	bl	800971c <HAL_UART_Init>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003cf4:	f7fe fed2 	bl	8002a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	480d      	ldr	r0, [pc, #52]	@ (8003d30 <MX_USART2_UART_Init+0x94>)
 8003cfc:	f007 fb49 	bl	800b392 <HAL_UARTEx_SetTxFifoThreshold>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8003d06:	f7fe fec9 	bl	8002a9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4808      	ldr	r0, [pc, #32]	@ (8003d30 <MX_USART2_UART_Init+0x94>)
 8003d0e:	f007 fb7e 	bl	800b40e <HAL_UARTEx_SetRxFifoThreshold>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8003d18:	f7fe fec0 	bl	8002a9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003d1c:	4804      	ldr	r0, [pc, #16]	@ (8003d30 <MX_USART2_UART_Init+0x94>)
 8003d1e:	f007 faff 	bl	800b320 <HAL_UARTEx_DisableFifoMode>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003d28:	f7fe feb8 	bl	8002a9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003d2c:	bf00      	nop
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	20001bcc 	.word	0x20001bcc
 8003d34:	40004400 	.word	0x40004400

08003d38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b09e      	sub	sp, #120	@ 0x78
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d40:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	605a      	str	r2, [r3, #4]
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	60da      	str	r2, [r3, #12]
 8003d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d50:	f107 0310 	add.w	r3, r7, #16
 8003d54:	2254      	movs	r2, #84	@ 0x54
 8003d56:	2100      	movs	r1, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f007 fcb3 	bl	800b6c4 <memset>
  if(uartHandle->Instance==USART2)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a4d      	ldr	r2, [pc, #308]	@ (8003e98 <HAL_UART_MspInit+0x160>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	f040 8092 	bne.w	8003e8e <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d72:	f107 0310 	add.w	r3, r7, #16
 8003d76:	4618      	mov	r0, r3
 8003d78:	f003 f99a 	bl	80070b0 <HAL_RCCEx_PeriphCLKConfig>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003d82:	f7fe fe8b 	bl	8002a9c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d86:	4b45      	ldr	r3, [pc, #276]	@ (8003e9c <HAL_UART_MspInit+0x164>)
 8003d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8a:	4a44      	ldr	r2, [pc, #272]	@ (8003e9c <HAL_UART_MspInit+0x164>)
 8003d8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d90:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d92:	4b42      	ldr	r3, [pc, #264]	@ (8003e9c <HAL_UART_MspInit+0x164>)
 8003d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e9c <HAL_UART_MspInit+0x164>)
 8003da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003da2:	4a3e      	ldr	r2, [pc, #248]	@ (8003e9c <HAL_UART_MspInit+0x164>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003daa:	4b3c      	ldr	r3, [pc, #240]	@ (8003e9c <HAL_UART_MspInit+0x164>)
 8003dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003db6:	230c      	movs	r3, #12
 8003db8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003dc6:	2307      	movs	r3, #7
 8003dc8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dca:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dd4:	f002 f9c0 	bl	8006158 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003dd8:	4b31      	ldr	r3, [pc, #196]	@ (8003ea0 <HAL_UART_MspInit+0x168>)
 8003dda:	4a32      	ldr	r2, [pc, #200]	@ (8003ea4 <HAL_UART_MspInit+0x16c>)
 8003ddc:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003dde:	4b30      	ldr	r3, [pc, #192]	@ (8003ea0 <HAL_UART_MspInit+0x168>)
 8003de0:	221a      	movs	r2, #26
 8003de2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003de4:	4b2e      	ldr	r3, [pc, #184]	@ (8003ea0 <HAL_UART_MspInit+0x168>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dea:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea0 <HAL_UART_MspInit+0x168>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003df0:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea0 <HAL_UART_MspInit+0x168>)
 8003df2:	2280      	movs	r2, #128	@ 0x80
 8003df4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003df6:	4b2a      	ldr	r3, [pc, #168]	@ (8003ea0 <HAL_UART_MspInit+0x168>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003dfc:	4b28      	ldr	r3, [pc, #160]	@ (8003ea0 <HAL_UART_MspInit+0x168>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003e02:	4b27      	ldr	r3, [pc, #156]	@ (8003ea0 <HAL_UART_MspInit+0x168>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e08:	4b25      	ldr	r3, [pc, #148]	@ (8003ea0 <HAL_UART_MspInit+0x168>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003e0e:	4824      	ldr	r0, [pc, #144]	@ (8003ea0 <HAL_UART_MspInit+0x168>)
 8003e10:	f001 fe70 	bl	8005af4 <HAL_DMA_Init>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003e1a:	f7fe fe3f 	bl	8002a9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea0 <HAL_UART_MspInit+0x168>)
 8003e22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003e26:	4a1e      	ldr	r2, [pc, #120]	@ (8003ea0 <HAL_UART_MspInit+0x168>)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8003e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea8 <HAL_UART_MspInit+0x170>)
 8003e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8003eac <HAL_UART_MspInit+0x174>)
 8003e30:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003e32:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea8 <HAL_UART_MspInit+0x170>)
 8003e34:	221b      	movs	r2, #27
 8003e36:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e38:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea8 <HAL_UART_MspInit+0x170>)
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea8 <HAL_UART_MspInit+0x170>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e44:	4b18      	ldr	r3, [pc, #96]	@ (8003ea8 <HAL_UART_MspInit+0x170>)
 8003e46:	2280      	movs	r2, #128	@ 0x80
 8003e48:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e4a:	4b17      	ldr	r3, [pc, #92]	@ (8003ea8 <HAL_UART_MspInit+0x170>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e50:	4b15      	ldr	r3, [pc, #84]	@ (8003ea8 <HAL_UART_MspInit+0x170>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003e56:	4b14      	ldr	r3, [pc, #80]	@ (8003ea8 <HAL_UART_MspInit+0x170>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e5c:	4b12      	ldr	r3, [pc, #72]	@ (8003ea8 <HAL_UART_MspInit+0x170>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003e62:	4811      	ldr	r0, [pc, #68]	@ (8003ea8 <HAL_UART_MspInit+0x170>)
 8003e64:	f001 fe46 	bl	8005af4 <HAL_DMA_Init>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8003e6e:	f7fe fe15 	bl	8002a9c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a0c      	ldr	r2, [pc, #48]	@ (8003ea8 <HAL_UART_MspInit+0x170>)
 8003e76:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003e78:	4a0b      	ldr	r2, [pc, #44]	@ (8003ea8 <HAL_UART_MspInit+0x170>)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2100      	movs	r1, #0
 8003e82:	2026      	movs	r0, #38	@ 0x26
 8003e84:	f001 fe01 	bl	8005a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e88:	2026      	movs	r0, #38	@ 0x26
 8003e8a:	f001 fe18 	bl	8005abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003e8e:	bf00      	nop
 8003e90:	3778      	adds	r7, #120	@ 0x78
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40004400 	.word	0x40004400
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	20001c98 	.word	0x20001c98
 8003ea4:	4002001c 	.word	0x4002001c
 8003ea8:	20001cf8 	.word	0x20001cf8
 8003eac:	40020030 	.word	0x40020030

08003eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003eb0:	480d      	ldr	r0, [pc, #52]	@ (8003ee8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003eb2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003eb4:	f7ff fa80 	bl	80033b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003eb8:	480c      	ldr	r0, [pc, #48]	@ (8003eec <LoopForever+0x6>)
  ldr r1, =_edata
 8003eba:	490d      	ldr	r1, [pc, #52]	@ (8003ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8003ef4 <LoopForever+0xe>)
  movs r3, #0
 8003ebe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003ec0:	e002      	b.n	8003ec8 <LoopCopyDataInit>

08003ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ec6:	3304      	adds	r3, #4

08003ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ecc:	d3f9      	bcc.n	8003ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ece:	4a0a      	ldr	r2, [pc, #40]	@ (8003ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ed0:	4c0a      	ldr	r4, [pc, #40]	@ (8003efc <LoopForever+0x16>)
  movs r3, #0
 8003ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ed4:	e001      	b.n	8003eda <LoopFillZerobss>

08003ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ed8:	3204      	adds	r2, #4

08003eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003edc:	d3fb      	bcc.n	8003ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ede:	f007 fc0f 	bl	800b700 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ee2:	f7fe fc71 	bl	80027c8 <main>

08003ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ee6:	e7fe      	b.n	8003ee6 <LoopForever>
  ldr   r0, =_estack
 8003ee8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ef0:	200003b4 	.word	0x200003b4
  ldr r2, =_sidata
 8003ef4:	0800c6c8 	.word	0x0800c6c8
  ldr r2, =_sbss
 8003ef8:	200003b4 	.word	0x200003b4
  ldr r4, =_ebss
 8003efc:	20001ea4 	.word	0x20001ea4

08003f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f00:	e7fe      	b.n	8003f00 <ADC1_2_IRQHandler>

08003f02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f0c:	2003      	movs	r0, #3
 8003f0e:	f001 fdb1 	bl	8005a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f12:	2000      	movs	r0, #0
 8003f14:	f000 f80e 	bl	8003f34 <HAL_InitTick>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	71fb      	strb	r3, [r7, #7]
 8003f22:	e001      	b.n	8003f28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f24:	f7ff f962 	bl	80031ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f28:	79fb      	ldrb	r3, [r7, #7]

}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003f40:	4b16      	ldr	r3, [pc, #88]	@ (8003f9c <HAL_InitTick+0x68>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d022      	beq.n	8003f8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003f48:	4b15      	ldr	r3, [pc, #84]	@ (8003fa0 <HAL_InitTick+0x6c>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	4b13      	ldr	r3, [pc, #76]	@ (8003f9c <HAL_InitTick+0x68>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003f54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f001 fdbc 	bl	8005ada <HAL_SYSTICK_Config>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10f      	bne.n	8003f88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b0f      	cmp	r3, #15
 8003f6c:	d809      	bhi.n	8003f82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f6e:	2200      	movs	r2, #0
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	f04f 30ff 	mov.w	r0, #4294967295
 8003f76:	f001 fd88 	bl	8005a8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa4 <HAL_InitTick+0x70>)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	e007      	b.n	8003f92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	73fb      	strb	r3, [r7, #15]
 8003f86:	e004      	b.n	8003f92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
 8003f8c:	e001      	b.n	8003f92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000360 	.word	0x20000360
 8003fa0:	20000358 	.word	0x20000358
 8003fa4:	2000035c 	.word	0x2000035c

08003fa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fac:	4b05      	ldr	r3, [pc, #20]	@ (8003fc4 <HAL_IncTick+0x1c>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b05      	ldr	r3, [pc, #20]	@ (8003fc8 <HAL_IncTick+0x20>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	4a03      	ldr	r2, [pc, #12]	@ (8003fc4 <HAL_IncTick+0x1c>)
 8003fb8:	6013      	str	r3, [r2, #0]
}
 8003fba:	bf00      	nop
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	20001d58 	.word	0x20001d58
 8003fc8:	20000360 	.word	0x20000360

08003fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return uwTick;
 8003fd0:	4b03      	ldr	r3, [pc, #12]	@ (8003fe0 <HAL_GetTick+0x14>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20001d58 	.word	0x20001d58

08003fe4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	609a      	str	r2, [r3, #8]
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	609a      	str	r2, [r3, #8]
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3360      	adds	r3, #96	@ 0x60
 800405e:	461a      	mov	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	4b08      	ldr	r3, [pc, #32]	@ (8004090 <LL_ADC_SetOffset+0x44>)
 800406e:	4013      	ands	r3, r2
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	4313      	orrs	r3, r2
 800407c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004084:	bf00      	nop
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	03fff000 	.word	0x03fff000

08004094 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3360      	adds	r3, #96	@ 0x60
 80040a2:	461a      	mov	r2, r3
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3360      	adds	r3, #96	@ 0x60
 80040d0:	461a      	mov	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4413      	add	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b087      	sub	sp, #28
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3360      	adds	r3, #96	@ 0x60
 8004106:	461a      	mov	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	431a      	orrs	r2, r3
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004120:	bf00      	nop
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	3360      	adds	r3, #96	@ 0x60
 800413c:	461a      	mov	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	431a      	orrs	r2, r3
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	615a      	str	r2, [r3, #20]
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b087      	sub	sp, #28
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3330      	adds	r3, #48	@ 0x30
 80041be:	461a      	mov	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	0a1b      	lsrs	r3, r3, #8
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	f003 030c 	and.w	r3, r3, #12
 80041ca:	4413      	add	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	211f      	movs	r1, #31
 80041da:	fa01 f303 	lsl.w	r3, r1, r3
 80041de:	43db      	mvns	r3, r3
 80041e0:	401a      	ands	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	0e9b      	lsrs	r3, r3, #26
 80041e6:	f003 011f 	and.w	r1, r3, #31
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	fa01 f303 	lsl.w	r3, r1, r3
 80041f4:	431a      	orrs	r2, r3
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004206:	b480      	push	{r7}
 8004208:	b087      	sub	sp, #28
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3314      	adds	r3, #20
 8004216:	461a      	mov	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	0e5b      	lsrs	r3, r3, #25
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	f003 0304 	and.w	r3, r3, #4
 8004222:	4413      	add	r3, r2
 8004224:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	0d1b      	lsrs	r3, r3, #20
 800422e:	f003 031f 	and.w	r3, r3, #31
 8004232:	2107      	movs	r1, #7
 8004234:	fa01 f303 	lsl.w	r3, r1, r3
 8004238:	43db      	mvns	r3, r3
 800423a:	401a      	ands	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	0d1b      	lsrs	r3, r3, #20
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	431a      	orrs	r2, r3
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004250:	bf00      	nop
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004274:	43db      	mvns	r3, r3
 8004276:	401a      	ands	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f003 0318 	and.w	r3, r3, #24
 800427e:	4908      	ldr	r1, [pc, #32]	@ (80042a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004280:	40d9      	lsrs	r1, r3
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	400b      	ands	r3, r1
 8004286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800428a:	431a      	orrs	r2, r3
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	0007ffff 	.word	0x0007ffff

080042a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 031f 	and.w	r3, r3, #31
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80042d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	6093      	str	r3, [r2, #8]
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042f8:	d101      	bne.n	80042fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800431c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004320:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004344:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004348:	d101      	bne.n	800434e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800434a:	2301      	movs	r3, #1
 800434c:	e000      	b.n	8004350 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800434e:	2300      	movs	r3, #0
}
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800436c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004370:	f043 0201 	orr.w	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004394:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004398:	f043 0202 	orr.w	r2, r3, #2
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 0301 	and.w	r3, r3, #1
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <LL_ADC_IsEnabled+0x18>
 80043c0:	2301      	movs	r3, #1
 80043c2:	e000      	b.n	80043c6 <LL_ADC_IsEnabled+0x1a>
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d101      	bne.n	80043ea <LL_ADC_IsDisableOngoing+0x18>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <LL_ADC_IsDisableOngoing+0x1a>
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004408:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800440c:	f043 0204 	orr.w	r2, r3, #4
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b04      	cmp	r3, #4
 8004432:	d101      	bne.n	8004438 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b08      	cmp	r3, #8
 8004458:	d101      	bne.n	800445e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800445a:	2301      	movs	r3, #1
 800445c:	e000      	b.n	8004460 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800446c:	b590      	push	{r4, r7, lr}
 800446e:	b089      	sub	sp, #36	@ 0x24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e1a9      	b.n	80047da <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d109      	bne.n	80044a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f7fd fe59 	bl	800214c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff ff19 	bl	80042e4 <LL_ADC_IsDeepPowerDownEnabled>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d004      	beq.n	80044c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff feff 	bl	80042c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff ff34 	bl	8004334 <LL_ADC_IsInternalRegulatorEnabled>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d115      	bne.n	80044fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff ff18 	bl	800430c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044dc:	4b9c      	ldr	r3, [pc, #624]	@ (8004750 <HAL_ADC_Init+0x2e4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	099b      	lsrs	r3, r3, #6
 80044e2:	4a9c      	ldr	r2, [pc, #624]	@ (8004754 <HAL_ADC_Init+0x2e8>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	099b      	lsrs	r3, r3, #6
 80044ea:	3301      	adds	r3, #1
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80044f0:	e002      	b.n	80044f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f9      	bne.n	80044f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff ff16 	bl	8004334 <LL_ADC_IsInternalRegulatorEnabled>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10d      	bne.n	800452a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004512:	f043 0210 	orr.w	r2, r3, #16
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800451e:	f043 0201 	orr.w	r2, r3, #1
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff ff76 	bl	8004420 <LL_ADC_REG_IsConversionOngoing>
 8004534:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	2b00      	cmp	r3, #0
 8004540:	f040 8142 	bne.w	80047c8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	f040 813e 	bne.w	80047c8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004550:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004554:	f043 0202 	orr.w	r2, r3, #2
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff ff23 	bl	80043ac <LL_ADC_IsEnabled>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d141      	bne.n	80045f0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004574:	d004      	beq.n	8004580 <HAL_ADC_Init+0x114>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a77      	ldr	r2, [pc, #476]	@ (8004758 <HAL_ADC_Init+0x2ec>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d10f      	bne.n	80045a0 <HAL_ADC_Init+0x134>
 8004580:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004584:	f7ff ff12 	bl	80043ac <LL_ADC_IsEnabled>
 8004588:	4604      	mov	r4, r0
 800458a:	4873      	ldr	r0, [pc, #460]	@ (8004758 <HAL_ADC_Init+0x2ec>)
 800458c:	f7ff ff0e 	bl	80043ac <LL_ADC_IsEnabled>
 8004590:	4603      	mov	r3, r0
 8004592:	4323      	orrs	r3, r4
 8004594:	2b00      	cmp	r3, #0
 8004596:	bf0c      	ite	eq
 8004598:	2301      	moveq	r3, #1
 800459a:	2300      	movne	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e012      	b.n	80045c6 <HAL_ADC_Init+0x15a>
 80045a0:	486e      	ldr	r0, [pc, #440]	@ (800475c <HAL_ADC_Init+0x2f0>)
 80045a2:	f7ff ff03 	bl	80043ac <LL_ADC_IsEnabled>
 80045a6:	4604      	mov	r4, r0
 80045a8:	486d      	ldr	r0, [pc, #436]	@ (8004760 <HAL_ADC_Init+0x2f4>)
 80045aa:	f7ff feff 	bl	80043ac <LL_ADC_IsEnabled>
 80045ae:	4603      	mov	r3, r0
 80045b0:	431c      	orrs	r4, r3
 80045b2:	486c      	ldr	r0, [pc, #432]	@ (8004764 <HAL_ADC_Init+0x2f8>)
 80045b4:	f7ff fefa 	bl	80043ac <LL_ADC_IsEnabled>
 80045b8:	4603      	mov	r3, r0
 80045ba:	4323      	orrs	r3, r4
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d012      	beq.n	80045f0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045d2:	d004      	beq.n	80045de <HAL_ADC_Init+0x172>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a5f      	ldr	r2, [pc, #380]	@ (8004758 <HAL_ADC_Init+0x2ec>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d101      	bne.n	80045e2 <HAL_ADC_Init+0x176>
 80045de:	4a62      	ldr	r2, [pc, #392]	@ (8004768 <HAL_ADC_Init+0x2fc>)
 80045e0:	e000      	b.n	80045e4 <HAL_ADC_Init+0x178>
 80045e2:	4a62      	ldr	r2, [pc, #392]	@ (800476c <HAL_ADC_Init+0x300>)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f7ff fcfa 	bl	8003fe4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	7f5b      	ldrb	r3, [r3, #29]
 80045f4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80045fa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004600:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004606:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800460e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004610:	4313      	orrs	r3, r2
 8004612:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800461a:	2b01      	cmp	r3, #1
 800461c:	d106      	bne.n	800462c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004622:	3b01      	subs	r3, #1
 8004624:	045b      	lsls	r3, r3, #17
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4313      	orrs	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004630:	2b00      	cmp	r3, #0
 8004632:	d009      	beq.n	8004648 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004638:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004640:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4313      	orrs	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	4b48      	ldr	r3, [pc, #288]	@ (8004770 <HAL_ADC_Init+0x304>)
 8004650:	4013      	ands	r3, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6812      	ldr	r2, [r2, #0]
 8004656:	69b9      	ldr	r1, [r7, #24]
 8004658:	430b      	orrs	r3, r1
 800465a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff fee5 	bl	8004446 <LL_ADC_INJ_IsConversionOngoing>
 800467c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d17f      	bne.n	8004784 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d17c      	bne.n	8004784 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800468e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004696:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046a6:	f023 0302 	bic.w	r3, r3, #2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6812      	ldr	r2, [r2, #0]
 80046ae:	69b9      	ldr	r1, [r7, #24]
 80046b0:	430b      	orrs	r3, r1
 80046b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d017      	beq.n	80046ec <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80046ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80046d4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80046d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6911      	ldr	r1, [r2, #16]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6812      	ldr	r2, [r2, #0]
 80046e4:	430b      	orrs	r3, r1
 80046e6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80046ea:	e013      	b.n	8004714 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691a      	ldr	r2, [r3, #16]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80046fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6812      	ldr	r2, [r2, #0]
 8004708:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800470c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004710:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800471a:	2b01      	cmp	r3, #1
 800471c:	d12a      	bne.n	8004774 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004728:	f023 0304 	bic.w	r3, r3, #4
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004734:	4311      	orrs	r1, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800473a:	4311      	orrs	r1, r2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004740:	430a      	orrs	r2, r1
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f042 0201 	orr.w	r2, r2, #1
 800474c:	611a      	str	r2, [r3, #16]
 800474e:	e019      	b.n	8004784 <HAL_ADC_Init+0x318>
 8004750:	20000358 	.word	0x20000358
 8004754:	053e2d63 	.word	0x053e2d63
 8004758:	50000100 	.word	0x50000100
 800475c:	50000400 	.word	0x50000400
 8004760:	50000500 	.word	0x50000500
 8004764:	50000600 	.word	0x50000600
 8004768:	50000300 	.word	0x50000300
 800476c:	50000700 	.word	0x50000700
 8004770:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d10c      	bne.n	80047a6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004792:	f023 010f 	bic.w	r1, r3, #15
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	1e5a      	subs	r2, r3, #1
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80047a4:	e007      	b.n	80047b6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 020f 	bic.w	r2, r2, #15
 80047b4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ba:	f023 0303 	bic.w	r3, r3, #3
 80047be:	f043 0201 	orr.w	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047c6:	e007      	b.n	80047d8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047cc:	f043 0210 	orr.w	r2, r3, #16
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80047d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3724      	adds	r7, #36	@ 0x24
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd90      	pop	{r4, r7, pc}
 80047e2:	bf00      	nop

080047e4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047f8:	d004      	beq.n	8004804 <HAL_ADC_Start_DMA+0x20>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a5a      	ldr	r2, [pc, #360]	@ (8004968 <HAL_ADC_Start_DMA+0x184>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d101      	bne.n	8004808 <HAL_ADC_Start_DMA+0x24>
 8004804:	4b59      	ldr	r3, [pc, #356]	@ (800496c <HAL_ADC_Start_DMA+0x188>)
 8004806:	e000      	b.n	800480a <HAL_ADC_Start_DMA+0x26>
 8004808:	4b59      	ldr	r3, [pc, #356]	@ (8004970 <HAL_ADC_Start_DMA+0x18c>)
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff fd4a 	bl	80042a4 <LL_ADC_GetMultimode>
 8004810:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff fe02 	bl	8004420 <LL_ADC_REG_IsConversionOngoing>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	f040 809b 	bne.w	800495a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800482a:	2b01      	cmp	r3, #1
 800482c:	d101      	bne.n	8004832 <HAL_ADC_Start_DMA+0x4e>
 800482e:	2302      	movs	r3, #2
 8004830:	e096      	b.n	8004960 <HAL_ADC_Start_DMA+0x17c>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a4d      	ldr	r2, [pc, #308]	@ (8004974 <HAL_ADC_Start_DMA+0x190>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d008      	beq.n	8004856 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d005      	beq.n	8004856 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2b05      	cmp	r3, #5
 800484e:	d002      	beq.n	8004856 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	2b09      	cmp	r3, #9
 8004854:	d17a      	bne.n	800494c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 fcf6 	bl	8005248 <ADC_Enable>
 800485c:	4603      	mov	r3, r0
 800485e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004860:	7dfb      	ldrb	r3, [r7, #23]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d16d      	bne.n	8004942 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800486a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800486e:	f023 0301 	bic.w	r3, r3, #1
 8004872:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a3a      	ldr	r2, [pc, #232]	@ (8004968 <HAL_ADC_Start_DMA+0x184>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d009      	beq.n	8004898 <HAL_ADC_Start_DMA+0xb4>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a3b      	ldr	r2, [pc, #236]	@ (8004978 <HAL_ADC_Start_DMA+0x194>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d002      	beq.n	8004894 <HAL_ADC_Start_DMA+0xb0>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	e003      	b.n	800489c <HAL_ADC_Start_DMA+0xb8>
 8004894:	4b39      	ldr	r3, [pc, #228]	@ (800497c <HAL_ADC_Start_DMA+0x198>)
 8004896:	e001      	b.n	800489c <HAL_ADC_Start_DMA+0xb8>
 8004898:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d002      	beq.n	80048aa <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d105      	bne.n	80048b6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ae:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d006      	beq.n	80048d0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c6:	f023 0206 	bic.w	r2, r3, #6
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	661a      	str	r2, [r3, #96]	@ 0x60
 80048ce:	e002      	b.n	80048d6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2200      	movs	r2, #0
 80048d4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048da:	4a29      	ldr	r2, [pc, #164]	@ (8004980 <HAL_ADC_Start_DMA+0x19c>)
 80048dc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e2:	4a28      	ldr	r2, [pc, #160]	@ (8004984 <HAL_ADC_Start_DMA+0x1a0>)
 80048e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ea:	4a27      	ldr	r2, [pc, #156]	@ (8004988 <HAL_ADC_Start_DMA+0x1a4>)
 80048ec:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	221c      	movs	r2, #28
 80048f4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0210 	orr.w	r2, r2, #16
 800490c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0201 	orr.w	r2, r2, #1
 800491c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3340      	adds	r3, #64	@ 0x40
 8004928:	4619      	mov	r1, r3
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f001 f989 	bl	8005c44 <HAL_DMA_Start_IT>
 8004932:	4603      	mov	r3, r0
 8004934:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff fd5c 	bl	80043f8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004940:	e00d      	b.n	800495e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800494a:	e008      	b.n	800495e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004958:	e001      	b.n	800495e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800495a:	2302      	movs	r3, #2
 800495c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800495e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	50000100 	.word	0x50000100
 800496c:	50000300 	.word	0x50000300
 8004970:	50000700 	.word	0x50000700
 8004974:	50000600 	.word	0x50000600
 8004978:	50000500 	.word	0x50000500
 800497c:	50000400 	.word	0x50000400
 8004980:	08005433 	.word	0x08005433
 8004984:	0800550b 	.word	0x0800550b
 8004988:	08005527 	.word	0x08005527

0800498c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b0b6      	sub	sp, #216	@ 0xd8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80049d8:	2300      	movs	r3, #0
 80049da:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d102      	bne.n	80049ec <HAL_ADC_ConfigChannel+0x24>
 80049e6:	2302      	movs	r3, #2
 80049e8:	f000 bc13 	b.w	8005212 <HAL_ADC_ConfigChannel+0x84a>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff fd11 	bl	8004420 <LL_ADC_REG_IsConversionOngoing>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f040 83f3 	bne.w	80051ec <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	6859      	ldr	r1, [r3, #4]
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	f7ff fbcb 	bl	80041ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fcff 	bl	8004420 <LL_ADC_REG_IsConversionOngoing>
 8004a22:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff fd0b 	bl	8004446 <LL_ADC_INJ_IsConversionOngoing>
 8004a30:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f040 81d9 	bne.w	8004df0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f040 81d4 	bne.w	8004df0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a50:	d10f      	bne.n	8004a72 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	f7ff fbd2 	bl	8004206 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff fb79 	bl	8004162 <LL_ADC_SetSamplingTimeCommonConfig>
 8004a70:	e00e      	b.n	8004a90 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6819      	ldr	r1, [r3, #0]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f7ff fbc1 	bl	8004206 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2100      	movs	r1, #0
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff fb69 	bl	8004162 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	08db      	lsrs	r3, r3, #3
 8004a9c:	f003 0303 	and.w	r3, r3, #3
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d022      	beq.n	8004af8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6919      	ldr	r1, [r3, #16]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ac2:	f7ff fac3 	bl	800404c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6919      	ldr	r1, [r3, #16]
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f7ff fb0f 	bl	80040f6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d102      	bne.n	8004aee <HAL_ADC_ConfigChannel+0x126>
 8004ae8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004aec:	e000      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x128>
 8004aee:	2300      	movs	r3, #0
 8004af0:	461a      	mov	r2, r3
 8004af2:	f7ff fb1b 	bl	800412c <LL_ADC_SetOffsetSaturation>
 8004af6:	e17b      	b.n	8004df0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2100      	movs	r1, #0
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff fac8 	bl	8004094 <LL_ADC_GetOffsetChannel>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10a      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x15c>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2100      	movs	r1, #0
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7ff fabd 	bl	8004094 <LL_ADC_GetOffsetChannel>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	0e9b      	lsrs	r3, r3, #26
 8004b1e:	f003 021f 	and.w	r2, r3, #31
 8004b22:	e01e      	b.n	8004b62 <HAL_ADC_ConfigChannel+0x19a>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2100      	movs	r1, #0
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fab2 	bl	8004094 <LL_ADC_GetOffsetChannel>
 8004b30:	4603      	mov	r3, r0
 8004b32:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b3a:	fa93 f3a3 	rbit	r3, r3
 8004b3e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004b42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004b4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004b52:	2320      	movs	r3, #32
 8004b54:	e004      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004b56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b5a:	fab3 f383 	clz	r3, r3
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d105      	bne.n	8004b7a <HAL_ADC_ConfigChannel+0x1b2>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	0e9b      	lsrs	r3, r3, #26
 8004b74:	f003 031f 	and.w	r3, r3, #31
 8004b78:	e018      	b.n	8004bac <HAL_ADC_ConfigChannel+0x1e4>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004b86:	fa93 f3a3 	rbit	r3, r3
 8004b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004b8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b92:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004b96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004b9e:	2320      	movs	r3, #32
 8004ba0:	e004      	b.n	8004bac <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004ba2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ba6:	fab3 f383 	clz	r3, r3
 8004baa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d106      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2100      	movs	r1, #0
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7ff fa81 	bl	80040c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff fa65 	bl	8004094 <LL_ADC_GetOffsetChannel>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <HAL_ADC_ConfigChannel+0x222>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2101      	movs	r1, #1
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff fa5a 	bl	8004094 <LL_ADC_GetOffsetChannel>
 8004be0:	4603      	mov	r3, r0
 8004be2:	0e9b      	lsrs	r3, r3, #26
 8004be4:	f003 021f 	and.w	r2, r3, #31
 8004be8:	e01e      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x260>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2101      	movs	r1, #1
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff fa4f 	bl	8004094 <LL_ADC_GetOffsetChannel>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c00:	fa93 f3a3 	rbit	r3, r3
 8004c04:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004c08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004c10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d101      	bne.n	8004c1c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004c18:	2320      	movs	r3, #32
 8004c1a:	e004      	b.n	8004c26 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004c1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c20:	fab3 f383 	clz	r3, r3
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d105      	bne.n	8004c40 <HAL_ADC_ConfigChannel+0x278>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	0e9b      	lsrs	r3, r3, #26
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	e018      	b.n	8004c72 <HAL_ADC_ConfigChannel+0x2aa>
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c4c:	fa93 f3a3 	rbit	r3, r3
 8004c50:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004c54:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004c5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004c64:	2320      	movs	r3, #32
 8004c66:	e004      	b.n	8004c72 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004c68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c6c:	fab3 f383 	clz	r3, r3
 8004c70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d106      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7ff fa1e 	bl	80040c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2102      	movs	r1, #2
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff fa02 	bl	8004094 <LL_ADC_GetOffsetChannel>
 8004c90:	4603      	mov	r3, r0
 8004c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10a      	bne.n	8004cb0 <HAL_ADC_ConfigChannel+0x2e8>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2102      	movs	r1, #2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff f9f7 	bl	8004094 <LL_ADC_GetOffsetChannel>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	0e9b      	lsrs	r3, r3, #26
 8004caa:	f003 021f 	and.w	r2, r3, #31
 8004cae:	e01e      	b.n	8004cee <HAL_ADC_ConfigChannel+0x326>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2102      	movs	r1, #2
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff f9ec 	bl	8004094 <LL_ADC_GetOffsetChannel>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cc6:	fa93 f3a3 	rbit	r3, r3
 8004cca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004cce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004cd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004cde:	2320      	movs	r3, #32
 8004ce0:	e004      	b.n	8004cec <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004ce6:	fab3 f383 	clz	r3, r3
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d105      	bne.n	8004d06 <HAL_ADC_ConfigChannel+0x33e>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	0e9b      	lsrs	r3, r3, #26
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	e016      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x36c>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004d12:	fa93 f3a3 	rbit	r3, r3
 8004d16:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004d18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004d1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004d1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004d26:	2320      	movs	r3, #32
 8004d28:	e004      	b.n	8004d34 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004d2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d2e:	fab3 f383 	clz	r3, r3
 8004d32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d106      	bne.n	8004d46 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2102      	movs	r1, #2
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff f9bd 	bl	80040c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2103      	movs	r1, #3
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff f9a1 	bl	8004094 <LL_ADC_GetOffsetChannel>
 8004d52:	4603      	mov	r3, r0
 8004d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10a      	bne.n	8004d72 <HAL_ADC_ConfigChannel+0x3aa>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2103      	movs	r1, #3
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff f996 	bl	8004094 <LL_ADC_GetOffsetChannel>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	0e9b      	lsrs	r3, r3, #26
 8004d6c:	f003 021f 	and.w	r2, r3, #31
 8004d70:	e017      	b.n	8004da2 <HAL_ADC_ConfigChannel+0x3da>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2103      	movs	r1, #3
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff f98b 	bl	8004094 <LL_ADC_GetOffsetChannel>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d84:	fa93 f3a3 	rbit	r3, r3
 8004d88:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004d8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d8c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004d8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004d94:	2320      	movs	r3, #32
 8004d96:	e003      	b.n	8004da0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004d98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d9a:	fab3 f383 	clz	r3, r3
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d105      	bne.n	8004dba <HAL_ADC_ConfigChannel+0x3f2>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	0e9b      	lsrs	r3, r3, #26
 8004db4:	f003 031f 	and.w	r3, r3, #31
 8004db8:	e011      	b.n	8004dde <HAL_ADC_ConfigChannel+0x416>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004dc2:	fa93 f3a3 	rbit	r3, r3
 8004dc6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004dc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004dcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004dd2:	2320      	movs	r3, #32
 8004dd4:	e003      	b.n	8004dde <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004dd8:	fab3 f383 	clz	r3, r3
 8004ddc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d106      	bne.n	8004df0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2200      	movs	r2, #0
 8004de8:	2103      	movs	r1, #3
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff f968 	bl	80040c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fad9 	bl	80043ac <LL_ADC_IsEnabled>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f040 813d 	bne.w	800507c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6818      	ldr	r0, [r3, #0]
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	6819      	ldr	r1, [r3, #0]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	f7ff fa24 	bl	800425c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4aa2      	ldr	r2, [pc, #648]	@ (80050a4 <HAL_ADC_ConfigChannel+0x6dc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	f040 812e 	bne.w	800507c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10b      	bne.n	8004e48 <HAL_ADC_ConfigChannel+0x480>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	0e9b      	lsrs	r3, r3, #26
 8004e36:	3301      	adds	r3, #1
 8004e38:	f003 031f 	and.w	r3, r3, #31
 8004e3c:	2b09      	cmp	r3, #9
 8004e3e:	bf94      	ite	ls
 8004e40:	2301      	movls	r3, #1
 8004e42:	2300      	movhi	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	e019      	b.n	8004e7c <HAL_ADC_ConfigChannel+0x4b4>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e50:	fa93 f3a3 	rbit	r3, r3
 8004e54:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004e56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e58:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004e5a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004e60:	2320      	movs	r3, #32
 8004e62:	e003      	b.n	8004e6c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004e64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e66:	fab3 f383 	clz	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	f003 031f 	and.w	r3, r3, #31
 8004e72:	2b09      	cmp	r3, #9
 8004e74:	bf94      	ite	ls
 8004e76:	2301      	movls	r3, #1
 8004e78:	2300      	movhi	r3, #0
 8004e7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d079      	beq.n	8004f74 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d107      	bne.n	8004e9c <HAL_ADC_ConfigChannel+0x4d4>
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	0e9b      	lsrs	r3, r3, #26
 8004e92:	3301      	adds	r3, #1
 8004e94:	069b      	lsls	r3, r3, #26
 8004e96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004e9a:	e015      	b.n	8004ec8 <HAL_ADC_ConfigChannel+0x500>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ea4:	fa93 f3a3 	rbit	r3, r3
 8004ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004eaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004eb4:	2320      	movs	r3, #32
 8004eb6:	e003      	b.n	8004ec0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eba:	fab3 f383 	clz	r3, r3
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	069b      	lsls	r3, r3, #26
 8004ec4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d109      	bne.n	8004ee8 <HAL_ADC_ConfigChannel+0x520>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	0e9b      	lsrs	r3, r3, #26
 8004eda:	3301      	adds	r3, #1
 8004edc:	f003 031f 	and.w	r3, r3, #31
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ee6:	e017      	b.n	8004f18 <HAL_ADC_ConfigChannel+0x550>
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ef0:	fa93 f3a3 	rbit	r3, r3
 8004ef4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004f00:	2320      	movs	r3, #32
 8004f02:	e003      	b.n	8004f0c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004f04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f06:	fab3 f383 	clz	r3, r3
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	f003 031f 	and.w	r3, r3, #31
 8004f12:	2101      	movs	r1, #1
 8004f14:	fa01 f303 	lsl.w	r3, r1, r3
 8004f18:	ea42 0103 	orr.w	r1, r2, r3
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <HAL_ADC_ConfigChannel+0x576>
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	0e9b      	lsrs	r3, r3, #26
 8004f2e:	3301      	adds	r3, #1
 8004f30:	f003 021f 	and.w	r2, r3, #31
 8004f34:	4613      	mov	r3, r2
 8004f36:	005b      	lsls	r3, r3, #1
 8004f38:	4413      	add	r3, r2
 8004f3a:	051b      	lsls	r3, r3, #20
 8004f3c:	e018      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x5a8>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f46:	fa93 f3a3 	rbit	r3, r3
 8004f4a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004f56:	2320      	movs	r3, #32
 8004f58:	e003      	b.n	8004f62 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f5c:	fab3 f383 	clz	r3, r3
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	3301      	adds	r3, #1
 8004f64:	f003 021f 	and.w	r2, r3, #31
 8004f68:	4613      	mov	r3, r2
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	4413      	add	r3, r2
 8004f6e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f70:	430b      	orrs	r3, r1
 8004f72:	e07e      	b.n	8005072 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d107      	bne.n	8004f90 <HAL_ADC_ConfigChannel+0x5c8>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	0e9b      	lsrs	r3, r3, #26
 8004f86:	3301      	adds	r3, #1
 8004f88:	069b      	lsls	r3, r3, #26
 8004f8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f8e:	e015      	b.n	8004fbc <HAL_ADC_ConfigChannel+0x5f4>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f98:	fa93 f3a3 	rbit	r3, r3
 8004f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004fa8:	2320      	movs	r3, #32
 8004faa:	e003      	b.n	8004fb4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fae:	fab3 f383 	clz	r3, r3
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	069b      	lsls	r3, r3, #26
 8004fb8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d109      	bne.n	8004fdc <HAL_ADC_ConfigChannel+0x614>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	0e9b      	lsrs	r3, r3, #26
 8004fce:	3301      	adds	r3, #1
 8004fd0:	f003 031f 	and.w	r3, r3, #31
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fda:	e017      	b.n	800500c <HAL_ADC_ConfigChannel+0x644>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe2:	6a3b      	ldr	r3, [r7, #32]
 8004fe4:	fa93 f3a3 	rbit	r3, r3
 8004fe8:	61fb      	str	r3, [r7, #28]
  return result;
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004ff4:	2320      	movs	r3, #32
 8004ff6:	e003      	b.n	8005000 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	fab3 f383 	clz	r3, r3
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	3301      	adds	r3, #1
 8005002:	f003 031f 	and.w	r3, r3, #31
 8005006:	2101      	movs	r1, #1
 8005008:	fa01 f303 	lsl.w	r3, r1, r3
 800500c:	ea42 0103 	orr.w	r1, r2, r3
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10d      	bne.n	8005038 <HAL_ADC_ConfigChannel+0x670>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	0e9b      	lsrs	r3, r3, #26
 8005022:	3301      	adds	r3, #1
 8005024:	f003 021f 	and.w	r2, r3, #31
 8005028:	4613      	mov	r3, r2
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	4413      	add	r3, r2
 800502e:	3b1e      	subs	r3, #30
 8005030:	051b      	lsls	r3, r3, #20
 8005032:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005036:	e01b      	b.n	8005070 <HAL_ADC_ConfigChannel+0x6a8>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	fa93 f3a3 	rbit	r3, r3
 8005044:	613b      	str	r3, [r7, #16]
  return result;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005050:	2320      	movs	r3, #32
 8005052:	e003      	b.n	800505c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	fab3 f383 	clz	r3, r3
 800505a:	b2db      	uxtb	r3, r3
 800505c:	3301      	adds	r3, #1
 800505e:	f003 021f 	and.w	r2, r3, #31
 8005062:	4613      	mov	r3, r2
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	4413      	add	r3, r2
 8005068:	3b1e      	subs	r3, #30
 800506a:	051b      	lsls	r3, r3, #20
 800506c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005070:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005076:	4619      	mov	r1, r3
 8005078:	f7ff f8c5 	bl	8004206 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	4b09      	ldr	r3, [pc, #36]	@ (80050a8 <HAL_ADC_ConfigChannel+0x6e0>)
 8005082:	4013      	ands	r3, r2
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 80be 	beq.w	8005206 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005092:	d004      	beq.n	800509e <HAL_ADC_ConfigChannel+0x6d6>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a04      	ldr	r2, [pc, #16]	@ (80050ac <HAL_ADC_ConfigChannel+0x6e4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d10a      	bne.n	80050b4 <HAL_ADC_ConfigChannel+0x6ec>
 800509e:	4b04      	ldr	r3, [pc, #16]	@ (80050b0 <HAL_ADC_ConfigChannel+0x6e8>)
 80050a0:	e009      	b.n	80050b6 <HAL_ADC_ConfigChannel+0x6ee>
 80050a2:	bf00      	nop
 80050a4:	407f0000 	.word	0x407f0000
 80050a8:	80080000 	.word	0x80080000
 80050ac:	50000100 	.word	0x50000100
 80050b0:	50000300 	.word	0x50000300
 80050b4:	4b59      	ldr	r3, [pc, #356]	@ (800521c <HAL_ADC_ConfigChannel+0x854>)
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe ffba 	bl	8004030 <LL_ADC_GetCommonPathInternalCh>
 80050bc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a56      	ldr	r2, [pc, #344]	@ (8005220 <HAL_ADC_ConfigChannel+0x858>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d004      	beq.n	80050d4 <HAL_ADC_ConfigChannel+0x70c>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a55      	ldr	r2, [pc, #340]	@ (8005224 <HAL_ADC_ConfigChannel+0x85c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d13a      	bne.n	800514a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80050d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d134      	bne.n	800514a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050e8:	d005      	beq.n	80050f6 <HAL_ADC_ConfigChannel+0x72e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a4e      	ldr	r2, [pc, #312]	@ (8005228 <HAL_ADC_ConfigChannel+0x860>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	f040 8085 	bne.w	8005200 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80050fe:	d004      	beq.n	800510a <HAL_ADC_ConfigChannel+0x742>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a49      	ldr	r2, [pc, #292]	@ (800522c <HAL_ADC_ConfigChannel+0x864>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d101      	bne.n	800510e <HAL_ADC_ConfigChannel+0x746>
 800510a:	4a49      	ldr	r2, [pc, #292]	@ (8005230 <HAL_ADC_ConfigChannel+0x868>)
 800510c:	e000      	b.n	8005110 <HAL_ADC_ConfigChannel+0x748>
 800510e:	4a43      	ldr	r2, [pc, #268]	@ (800521c <HAL_ADC_ConfigChannel+0x854>)
 8005110:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005114:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f7fe ff75 	bl	800400a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005120:	4b44      	ldr	r3, [pc, #272]	@ (8005234 <HAL_ADC_ConfigChannel+0x86c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	099b      	lsrs	r3, r3, #6
 8005126:	4a44      	ldr	r2, [pc, #272]	@ (8005238 <HAL_ADC_ConfigChannel+0x870>)
 8005128:	fba2 2303 	umull	r2, r3, r2, r3
 800512c:	099b      	lsrs	r3, r3, #6
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	4613      	mov	r3, r2
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800513a:	e002      	b.n	8005142 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3b01      	subs	r3, #1
 8005140:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1f9      	bne.n	800513c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005148:	e05a      	b.n	8005200 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a3b      	ldr	r2, [pc, #236]	@ (800523c <HAL_ADC_ConfigChannel+0x874>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d125      	bne.n	80051a0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005154:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005158:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d11f      	bne.n	80051a0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a31      	ldr	r2, [pc, #196]	@ (800522c <HAL_ADC_ConfigChannel+0x864>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d104      	bne.n	8005174 <HAL_ADC_ConfigChannel+0x7ac>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a34      	ldr	r2, [pc, #208]	@ (8005240 <HAL_ADC_ConfigChannel+0x878>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d047      	beq.n	8005204 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800517c:	d004      	beq.n	8005188 <HAL_ADC_ConfigChannel+0x7c0>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a2a      	ldr	r2, [pc, #168]	@ (800522c <HAL_ADC_ConfigChannel+0x864>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d101      	bne.n	800518c <HAL_ADC_ConfigChannel+0x7c4>
 8005188:	4a29      	ldr	r2, [pc, #164]	@ (8005230 <HAL_ADC_ConfigChannel+0x868>)
 800518a:	e000      	b.n	800518e <HAL_ADC_ConfigChannel+0x7c6>
 800518c:	4a23      	ldr	r2, [pc, #140]	@ (800521c <HAL_ADC_ConfigChannel+0x854>)
 800518e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005192:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005196:	4619      	mov	r1, r3
 8005198:	4610      	mov	r0, r2
 800519a:	f7fe ff36 	bl	800400a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800519e:	e031      	b.n	8005204 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a27      	ldr	r2, [pc, #156]	@ (8005244 <HAL_ADC_ConfigChannel+0x87c>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d12d      	bne.n	8005206 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80051aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80051ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d127      	bne.n	8005206 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1c      	ldr	r2, [pc, #112]	@ (800522c <HAL_ADC_ConfigChannel+0x864>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d022      	beq.n	8005206 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051c8:	d004      	beq.n	80051d4 <HAL_ADC_ConfigChannel+0x80c>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a17      	ldr	r2, [pc, #92]	@ (800522c <HAL_ADC_ConfigChannel+0x864>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d101      	bne.n	80051d8 <HAL_ADC_ConfigChannel+0x810>
 80051d4:	4a16      	ldr	r2, [pc, #88]	@ (8005230 <HAL_ADC_ConfigChannel+0x868>)
 80051d6:	e000      	b.n	80051da <HAL_ADC_ConfigChannel+0x812>
 80051d8:	4a10      	ldr	r2, [pc, #64]	@ (800521c <HAL_ADC_ConfigChannel+0x854>)
 80051da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80051de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80051e2:	4619      	mov	r1, r3
 80051e4:	4610      	mov	r0, r2
 80051e6:	f7fe ff10 	bl	800400a <LL_ADC_SetCommonPathInternalCh>
 80051ea:	e00c      	b.n	8005206 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f0:	f043 0220 	orr.w	r2, r3, #32
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80051fe:	e002      	b.n	8005206 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005200:	bf00      	nop
 8005202:	e000      	b.n	8005206 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005204:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800520e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005212:	4618      	mov	r0, r3
 8005214:	37d8      	adds	r7, #216	@ 0xd8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	50000700 	.word	0x50000700
 8005220:	c3210000 	.word	0xc3210000
 8005224:	90c00010 	.word	0x90c00010
 8005228:	50000600 	.word	0x50000600
 800522c:	50000100 	.word	0x50000100
 8005230:	50000300 	.word	0x50000300
 8005234:	20000358 	.word	0x20000358
 8005238:	053e2d63 	.word	0x053e2d63
 800523c:	c7520000 	.word	0xc7520000
 8005240:	50000500 	.word	0x50000500
 8005244:	cb840000 	.word	0xcb840000

08005248 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005250:	2300      	movs	r3, #0
 8005252:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff f8a7 	bl	80043ac <LL_ADC_IsEnabled>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d176      	bne.n	8005352 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	4b3c      	ldr	r3, [pc, #240]	@ (800535c <ADC_Enable+0x114>)
 800526c:	4013      	ands	r3, r2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00d      	beq.n	800528e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005276:	f043 0210 	orr.w	r2, r3, #16
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005282:	f043 0201 	orr.w	r2, r3, #1
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e062      	b.n	8005354 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff f862 	bl	800435c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052a0:	d004      	beq.n	80052ac <ADC_Enable+0x64>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a2e      	ldr	r2, [pc, #184]	@ (8005360 <ADC_Enable+0x118>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d101      	bne.n	80052b0 <ADC_Enable+0x68>
 80052ac:	4b2d      	ldr	r3, [pc, #180]	@ (8005364 <ADC_Enable+0x11c>)
 80052ae:	e000      	b.n	80052b2 <ADC_Enable+0x6a>
 80052b0:	4b2d      	ldr	r3, [pc, #180]	@ (8005368 <ADC_Enable+0x120>)
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fe febc 	bl	8004030 <LL_ADC_GetCommonPathInternalCh>
 80052b8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80052ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d013      	beq.n	80052ea <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80052c2:	4b2a      	ldr	r3, [pc, #168]	@ (800536c <ADC_Enable+0x124>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	099b      	lsrs	r3, r3, #6
 80052c8:	4a29      	ldr	r2, [pc, #164]	@ (8005370 <ADC_Enable+0x128>)
 80052ca:	fba2 2303 	umull	r2, r3, r2, r3
 80052ce:	099b      	lsrs	r3, r3, #6
 80052d0:	1c5a      	adds	r2, r3, #1
 80052d2:	4613      	mov	r3, r2
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80052dc:	e002      	b.n	80052e4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f9      	bne.n	80052de <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80052ea:	f7fe fe6f 	bl	8003fcc <HAL_GetTick>
 80052ee:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80052f0:	e028      	b.n	8005344 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff f858 	bl	80043ac <LL_ADC_IsEnabled>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d104      	bne.n	800530c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f7ff f828 	bl	800435c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800530c:	f7fe fe5e 	bl	8003fcc <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d914      	bls.n	8005344 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b01      	cmp	r3, #1
 8005326:	d00d      	beq.n	8005344 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800532c:	f043 0210 	orr.w	r2, r3, #16
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005338:	f043 0201 	orr.w	r2, r3, #1
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e007      	b.n	8005354 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b01      	cmp	r3, #1
 8005350:	d1cf      	bne.n	80052f2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	8000003f 	.word	0x8000003f
 8005360:	50000100 	.word	0x50000100
 8005364:	50000300 	.word	0x50000300
 8005368:	50000700 	.word	0x50000700
 800536c:	20000358 	.word	0x20000358
 8005370:	053e2d63 	.word	0x053e2d63

08005374 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff f826 	bl	80043d2 <LL_ADC_IsDisableOngoing>
 8005386:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff f80d 	bl	80043ac <LL_ADC_IsEnabled>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d047      	beq.n	8005428 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d144      	bne.n	8005428 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f003 030d 	and.w	r3, r3, #13
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d10c      	bne.n	80053c6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fe ffe7 	bl	8004384 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2203      	movs	r2, #3
 80053bc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80053be:	f7fe fe05 	bl	8003fcc <HAL_GetTick>
 80053c2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80053c4:	e029      	b.n	800541a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ca:	f043 0210 	orr.w	r2, r3, #16
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053d6:	f043 0201 	orr.w	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e023      	b.n	800542a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80053e2:	f7fe fdf3 	bl	8003fcc <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d914      	bls.n	800541a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00d      	beq.n	800541a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005402:	f043 0210 	orr.w	r2, r3, #16
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800540e:	f043 0201 	orr.w	r2, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e007      	b.n	800542a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1dc      	bne.n	80053e2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005444:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005448:	2b00      	cmp	r3, #0
 800544a:	d14b      	bne.n	80054e4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005450:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0308 	and.w	r3, r3, #8
 8005462:	2b00      	cmp	r3, #0
 8005464:	d021      	beq.n	80054aa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f7fe fe8c 	bl	8004188 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d032      	beq.n	80054dc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d12b      	bne.n	80054dc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005488:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005494:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d11f      	bne.n	80054dc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054a0:	f043 0201 	orr.w	r2, r3, #1
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80054a8:	e018      	b.n	80054dc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d111      	bne.n	80054dc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d105      	bne.n	80054dc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054d4:	f043 0201 	orr.w	r2, r3, #1
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f7ff fa55 	bl	800498c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80054e2:	e00e      	b.n	8005502 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f7ff fa5f 	bl	80049b4 <HAL_ADC_ErrorCallback>
}
 80054f6:	e004      	b.n	8005502 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	4798      	blx	r3
}
 8005502:	bf00      	nop
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005516:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f7ff fa41 	bl	80049a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005532:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005538:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005544:	f043 0204 	orr.w	r2, r3, #4
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f7ff fa31 	bl	80049b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005552:	bf00      	nop
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <LL_ADC_IsEnabled>:
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <LL_ADC_IsEnabled+0x18>
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <LL_ADC_IsEnabled+0x1a>
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <LL_ADC_StartCalibration>:
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005592:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800559c:	4313      	orrs	r3, r2
 800559e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	609a      	str	r2, [r3, #8]
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <LL_ADC_IsCalibrationOnGoing>:
{
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055c6:	d101      	bne.n	80055cc <LL_ADC_IsCalibrationOnGoing+0x1a>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <LL_ADC_IsCalibrationOnGoing+0x1c>
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <LL_ADC_REG_IsConversionOngoing>:
{
 80055da:	b480      	push	{r7}
 80055dc:	b083      	sub	sp, #12
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 0304 	and.w	r3, r3, #4
 80055ea:	2b04      	cmp	r3, #4
 80055ec:	d101      	bne.n	80055f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005614:	2b01      	cmp	r3, #1
 8005616:	d101      	bne.n	800561c <HAL_ADCEx_Calibration_Start+0x1c>
 8005618:	2302      	movs	r3, #2
 800561a:	e04d      	b.n	80056b8 <HAL_ADCEx_Calibration_Start+0xb8>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff fea5 	bl	8005374 <ADC_Disable>
 800562a:	4603      	mov	r3, r0
 800562c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d136      	bne.n	80056a2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005638:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800563c:	f023 0302 	bic.w	r3, r3, #2
 8005640:	f043 0202 	orr.w	r2, r3, #2
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6839      	ldr	r1, [r7, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff ff96 	bl	8005580 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005654:	e014      	b.n	8005680 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	3301      	adds	r3, #1
 800565a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	4a18      	ldr	r2, [pc, #96]	@ (80056c0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d90d      	bls.n	8005680 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005668:	f023 0312 	bic.w	r3, r3, #18
 800566c:	f043 0210 	orr.w	r2, r3, #16
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e01b      	b.n	80056b8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff ff94 	bl	80055b2 <LL_ADC_IsCalibrationOnGoing>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e2      	bne.n	8005656 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005694:	f023 0303 	bic.w	r3, r3, #3
 8005698:	f043 0201 	orr.w	r2, r3, #1
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	65da      	str	r2, [r3, #92]	@ 0x5c
 80056a0:	e005      	b.n	80056ae <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056a6:	f043 0210 	orr.w	r2, r3, #16
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	0004de01 	.word	0x0004de01

080056c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80056c4:	b590      	push	{r4, r7, lr}
 80056c6:	b0a1      	sub	sp, #132	@ 0x84
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d101      	bne.n	80056e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80056de:	2302      	movs	r3, #2
 80056e0:	e0e7      	b.n	80058b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80056ea:	2300      	movs	r3, #0
 80056ec:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80056ee:	2300      	movs	r3, #0
 80056f0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056fa:	d102      	bne.n	8005702 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80056fc:	4b6f      	ldr	r3, [pc, #444]	@ (80058bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80056fe:	60bb      	str	r3, [r7, #8]
 8005700:	e009      	b.n	8005716 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a6e      	ldr	r2, [pc, #440]	@ (80058c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d102      	bne.n	8005712 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800570c:	4b6d      	ldr	r3, [pc, #436]	@ (80058c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800570e:	60bb      	str	r3, [r7, #8]
 8005710:	e001      	b.n	8005716 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005712:	2300      	movs	r3, #0
 8005714:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10b      	bne.n	8005734 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005720:	f043 0220 	orr.w	r2, r3, #32
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e0be      	b.n	80058b2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff ff4f 	bl	80055da <LL_ADC_REG_IsConversionOngoing>
 800573c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff ff49 	bl	80055da <LL_ADC_REG_IsConversionOngoing>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	f040 80a0 	bne.w	8005890 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005750:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005752:	2b00      	cmp	r3, #0
 8005754:	f040 809c 	bne.w	8005890 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005760:	d004      	beq.n	800576c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a55      	ldr	r2, [pc, #340]	@ (80058bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d101      	bne.n	8005770 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800576c:	4b56      	ldr	r3, [pc, #344]	@ (80058c8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800576e:	e000      	b.n	8005772 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005770:	4b56      	ldr	r3, [pc, #344]	@ (80058cc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005772:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d04b      	beq.n	8005814 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800577c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	6859      	ldr	r1, [r3, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800578e:	035b      	lsls	r3, r3, #13
 8005790:	430b      	orrs	r3, r1
 8005792:	431a      	orrs	r2, r3
 8005794:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005796:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057a0:	d004      	beq.n	80057ac <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a45      	ldr	r2, [pc, #276]	@ (80058bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d10f      	bne.n	80057cc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80057ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80057b0:	f7ff fed3 	bl	800555a <LL_ADC_IsEnabled>
 80057b4:	4604      	mov	r4, r0
 80057b6:	4841      	ldr	r0, [pc, #260]	@ (80058bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80057b8:	f7ff fecf 	bl	800555a <LL_ADC_IsEnabled>
 80057bc:	4603      	mov	r3, r0
 80057be:	4323      	orrs	r3, r4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	bf0c      	ite	eq
 80057c4:	2301      	moveq	r3, #1
 80057c6:	2300      	movne	r3, #0
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	e012      	b.n	80057f2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80057cc:	483c      	ldr	r0, [pc, #240]	@ (80058c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80057ce:	f7ff fec4 	bl	800555a <LL_ADC_IsEnabled>
 80057d2:	4604      	mov	r4, r0
 80057d4:	483b      	ldr	r0, [pc, #236]	@ (80058c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80057d6:	f7ff fec0 	bl	800555a <LL_ADC_IsEnabled>
 80057da:	4603      	mov	r3, r0
 80057dc:	431c      	orrs	r4, r3
 80057de:	483c      	ldr	r0, [pc, #240]	@ (80058d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80057e0:	f7ff febb 	bl	800555a <LL_ADC_IsEnabled>
 80057e4:	4603      	mov	r3, r0
 80057e6:	4323      	orrs	r3, r4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bf0c      	ite	eq
 80057ec:	2301      	moveq	r3, #1
 80057ee:	2300      	movne	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d056      	beq.n	80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80057f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80057fe:	f023 030f 	bic.w	r3, r3, #15
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	6811      	ldr	r1, [r2, #0]
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	6892      	ldr	r2, [r2, #8]
 800580a:	430a      	orrs	r2, r1
 800580c:	431a      	orrs	r2, r3
 800580e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005810:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005812:	e047      	b.n	80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005814:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800581c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800581e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005828:	d004      	beq.n	8005834 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a23      	ldr	r2, [pc, #140]	@ (80058bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d10f      	bne.n	8005854 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005834:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005838:	f7ff fe8f 	bl	800555a <LL_ADC_IsEnabled>
 800583c:	4604      	mov	r4, r0
 800583e:	481f      	ldr	r0, [pc, #124]	@ (80058bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005840:	f7ff fe8b 	bl	800555a <LL_ADC_IsEnabled>
 8005844:	4603      	mov	r3, r0
 8005846:	4323      	orrs	r3, r4
 8005848:	2b00      	cmp	r3, #0
 800584a:	bf0c      	ite	eq
 800584c:	2301      	moveq	r3, #1
 800584e:	2300      	movne	r3, #0
 8005850:	b2db      	uxtb	r3, r3
 8005852:	e012      	b.n	800587a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005854:	481a      	ldr	r0, [pc, #104]	@ (80058c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005856:	f7ff fe80 	bl	800555a <LL_ADC_IsEnabled>
 800585a:	4604      	mov	r4, r0
 800585c:	4819      	ldr	r0, [pc, #100]	@ (80058c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800585e:	f7ff fe7c 	bl	800555a <LL_ADC_IsEnabled>
 8005862:	4603      	mov	r3, r0
 8005864:	431c      	orrs	r4, r3
 8005866:	481a      	ldr	r0, [pc, #104]	@ (80058d0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005868:	f7ff fe77 	bl	800555a <LL_ADC_IsEnabled>
 800586c:	4603      	mov	r3, r0
 800586e:	4323      	orrs	r3, r4
 8005870:	2b00      	cmp	r3, #0
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d012      	beq.n	80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800587e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005886:	f023 030f 	bic.w	r3, r3, #15
 800588a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800588c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800588e:	e009      	b.n	80058a4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005894:	f043 0220 	orr.w	r2, r3, #32
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80058a2:	e000      	b.n	80058a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80058a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80058ae:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3784      	adds	r7, #132	@ 0x84
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd90      	pop	{r4, r7, pc}
 80058ba:	bf00      	nop
 80058bc:	50000100 	.word	0x50000100
 80058c0:	50000400 	.word	0x50000400
 80058c4:	50000500 	.word	0x50000500
 80058c8:	50000300 	.word	0x50000300
 80058cc:	50000700 	.word	0x50000700
 80058d0:	50000600 	.word	0x50000600

080058d4 <__NVIC_SetPriorityGrouping>:
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005918 <__NVIC_SetPriorityGrouping+0x44>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80058f0:	4013      	ands	r3, r2
 80058f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005906:	4a04      	ldr	r2, [pc, #16]	@ (8005918 <__NVIC_SetPriorityGrouping+0x44>)
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	60d3      	str	r3, [r2, #12]
}
 800590c:	bf00      	nop
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	e000ed00 	.word	0xe000ed00

0800591c <__NVIC_GetPriorityGrouping>:
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005920:	4b04      	ldr	r3, [pc, #16]	@ (8005934 <__NVIC_GetPriorityGrouping+0x18>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	0a1b      	lsrs	r3, r3, #8
 8005926:	f003 0307 	and.w	r3, r3, #7
}
 800592a:	4618      	mov	r0, r3
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	e000ed00 	.word	0xe000ed00

08005938 <__NVIC_EnableIRQ>:
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	4603      	mov	r3, r0
 8005940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005946:	2b00      	cmp	r3, #0
 8005948:	db0b      	blt.n	8005962 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800594a:	79fb      	ldrb	r3, [r7, #7]
 800594c:	f003 021f 	and.w	r2, r3, #31
 8005950:	4907      	ldr	r1, [pc, #28]	@ (8005970 <__NVIC_EnableIRQ+0x38>)
 8005952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	2001      	movs	r0, #1
 800595a:	fa00 f202 	lsl.w	r2, r0, r2
 800595e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	e000e100 	.word	0xe000e100

08005974 <__NVIC_SetPriority>:
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	6039      	str	r1, [r7, #0]
 800597e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005984:	2b00      	cmp	r3, #0
 8005986:	db0a      	blt.n	800599e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	b2da      	uxtb	r2, r3
 800598c:	490c      	ldr	r1, [pc, #48]	@ (80059c0 <__NVIC_SetPriority+0x4c>)
 800598e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005992:	0112      	lsls	r2, r2, #4
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	440b      	add	r3, r1
 8005998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800599c:	e00a      	b.n	80059b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	4908      	ldr	r1, [pc, #32]	@ (80059c4 <__NVIC_SetPriority+0x50>)
 80059a4:	79fb      	ldrb	r3, [r7, #7]
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	3b04      	subs	r3, #4
 80059ac:	0112      	lsls	r2, r2, #4
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	440b      	add	r3, r1
 80059b2:	761a      	strb	r2, [r3, #24]
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	e000e100 	.word	0xe000e100
 80059c4:	e000ed00 	.word	0xe000ed00

080059c8 <NVIC_EncodePriority>:
{
 80059c8:	b480      	push	{r7}
 80059ca:	b089      	sub	sp, #36	@ 0x24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	f1c3 0307 	rsb	r3, r3, #7
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	bf28      	it	cs
 80059e6:	2304      	movcs	r3, #4
 80059e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	3304      	adds	r3, #4
 80059ee:	2b06      	cmp	r3, #6
 80059f0:	d902      	bls.n	80059f8 <NVIC_EncodePriority+0x30>
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	3b03      	subs	r3, #3
 80059f6:	e000      	b.n	80059fa <NVIC_EncodePriority+0x32>
 80059f8:	2300      	movs	r3, #0
 80059fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	fa02 f303 	lsl.w	r3, r2, r3
 8005a06:	43da      	mvns	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	401a      	ands	r2, r3
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a10:	f04f 31ff 	mov.w	r1, #4294967295
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	fa01 f303 	lsl.w	r3, r1, r3
 8005a1a:	43d9      	mvns	r1, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a20:	4313      	orrs	r3, r2
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3724      	adds	r7, #36	@ 0x24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
	...

08005a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a40:	d301      	bcc.n	8005a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a42:	2301      	movs	r3, #1
 8005a44:	e00f      	b.n	8005a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a46:	4a0a      	ldr	r2, [pc, #40]	@ (8005a70 <SysTick_Config+0x40>)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a4e:	210f      	movs	r1, #15
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295
 8005a54:	f7ff ff8e 	bl	8005974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a58:	4b05      	ldr	r3, [pc, #20]	@ (8005a70 <SysTick_Config+0x40>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a5e:	4b04      	ldr	r3, [pc, #16]	@ (8005a70 <SysTick_Config+0x40>)
 8005a60:	2207      	movs	r2, #7
 8005a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	e000e010 	.word	0xe000e010

08005a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff ff29 	bl	80058d4 <__NVIC_SetPriorityGrouping>
}
 8005a82:	bf00      	nop
 8005a84:	3708      	adds	r7, #8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b086      	sub	sp, #24
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	4603      	mov	r3, r0
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	607a      	str	r2, [r7, #4]
 8005a96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a98:	f7ff ff40 	bl	800591c <__NVIC_GetPriorityGrouping>
 8005a9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	68b9      	ldr	r1, [r7, #8]
 8005aa2:	6978      	ldr	r0, [r7, #20]
 8005aa4:	f7ff ff90 	bl	80059c8 <NVIC_EncodePriority>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aae:	4611      	mov	r1, r2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff ff5f 	bl	8005974 <__NVIC_SetPriority>
}
 8005ab6:	bf00      	nop
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b082      	sub	sp, #8
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff ff33 	bl	8005938 <__NVIC_EnableIRQ>
}
 8005ad2:	bf00      	nop
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b082      	sub	sp, #8
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7ff ffa4 	bl	8005a30 <SysTick_Config>
 8005ae8:	4603      	mov	r3, r0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
	...

08005af4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e08d      	b.n	8005c22 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	4b47      	ldr	r3, [pc, #284]	@ (8005c2c <HAL_DMA_Init+0x138>)
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d80f      	bhi.n	8005b32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	4b45      	ldr	r3, [pc, #276]	@ (8005c30 <HAL_DMA_Init+0x13c>)
 8005b1a:	4413      	add	r3, r2
 8005b1c:	4a45      	ldr	r2, [pc, #276]	@ (8005c34 <HAL_DMA_Init+0x140>)
 8005b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b22:	091b      	lsrs	r3, r3, #4
 8005b24:	009a      	lsls	r2, r3, #2
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a42      	ldr	r2, [pc, #264]	@ (8005c38 <HAL_DMA_Init+0x144>)
 8005b2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b30:	e00e      	b.n	8005b50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	4b40      	ldr	r3, [pc, #256]	@ (8005c3c <HAL_DMA_Init+0x148>)
 8005b3a:	4413      	add	r3, r2
 8005b3c:	4a3d      	ldr	r2, [pc, #244]	@ (8005c34 <HAL_DMA_Init+0x140>)
 8005b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b42:	091b      	lsrs	r3, r3, #4
 8005b44:	009a      	lsls	r2, r3, #2
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a3c      	ldr	r2, [pc, #240]	@ (8005c40 <HAL_DMA_Init+0x14c>)
 8005b4e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fa76 	bl	8006094 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bb0:	d102      	bne.n	8005bb8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005bcc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d010      	beq.n	8005bf8 <HAL_DMA_Init+0x104>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d80c      	bhi.n	8005bf8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fa96 	bl	8006110 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005bf4:	605a      	str	r2, [r3, #4]
 8005bf6:	e008      	b.n	8005c0a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40020407 	.word	0x40020407
 8005c30:	bffdfff8 	.word	0xbffdfff8
 8005c34:	cccccccd 	.word	0xcccccccd
 8005c38:	40020000 	.word	0x40020000
 8005c3c:	bffdfbf8 	.word	0xbffdfbf8
 8005c40:	40020400 	.word	0x40020400

08005c44 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_DMA_Start_IT+0x20>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e066      	b.n	8005d32 <HAL_DMA_Start_IT+0xee>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d155      	bne.n	8005d24 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0201 	bic.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	68b9      	ldr	r1, [r7, #8]
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 f9bb 	bl	8006018 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d008      	beq.n	8005cbc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 020e 	orr.w	r2, r2, #14
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	e00f      	b.n	8005cdc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f022 0204 	bic.w	r2, r2, #4
 8005cca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f042 020a 	orr.w	r2, r2, #10
 8005cda:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d007      	beq.n	8005cfa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cf8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d007      	beq.n	8005d12 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0201 	orr.w	r2, r2, #1
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	e005      	b.n	8005d30 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d005      	beq.n	8005d5e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2204      	movs	r2, #4
 8005d56:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	73fb      	strb	r3, [r7, #15]
 8005d5c:	e037      	b.n	8005dce <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 020e 	bic.w	r2, r2, #14
 8005d6c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d7c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f022 0201 	bic.w	r2, r2, #1
 8005d8c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d92:	f003 021f 	and.w	r2, r3, #31
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8005da0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005daa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00c      	beq.n	8005dce <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dbe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005dc2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005dcc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d00d      	beq.n	8005e20 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2204      	movs	r2, #4
 8005e08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	73fb      	strb	r3, [r7, #15]
 8005e1e:	e047      	b.n	8005eb0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f022 020e 	bic.w	r2, r2, #14
 8005e2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0201 	bic.w	r2, r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e54:	f003 021f 	and.w	r2, r3, #31
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e62:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005e6c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00c      	beq.n	8005e90 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e84:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005e8e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d003      	beq.n	8005eb0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	4798      	blx	r3
    }
  }
  return status;
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ed6:	f003 031f 	and.w	r3, r3, #31
 8005eda:	2204      	movs	r2, #4
 8005edc:	409a      	lsls	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d026      	beq.n	8005f34 <HAL_DMA_IRQHandler+0x7a>
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f003 0304 	and.w	r3, r3, #4
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d021      	beq.n	8005f34 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0320 	and.w	r3, r3, #32
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d107      	bne.n	8005f0e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0204 	bic.w	r2, r2, #4
 8005f0c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f12:	f003 021f 	and.w	r2, r3, #31
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1a:	2104      	movs	r1, #4
 8005f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8005f20:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d071      	beq.n	800600e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005f32:	e06c      	b.n	800600e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f38:	f003 031f 	and.w	r3, r3, #31
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	409a      	lsls	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4013      	ands	r3, r2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d02e      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d029      	beq.n	8005fa6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0320 	and.w	r3, r3, #32
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10b      	bne.n	8005f78 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 020a 	bic.w	r2, r2, #10
 8005f6e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f7c:	f003 021f 	and.w	r2, r3, #31
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f84:	2102      	movs	r1, #2
 8005f86:	fa01 f202 	lsl.w	r2, r1, r2
 8005f8a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d038      	beq.n	800600e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005fa4:	e033      	b.n	800600e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005faa:	f003 031f 	and.w	r3, r3, #31
 8005fae:	2208      	movs	r2, #8
 8005fb0:	409a      	lsls	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d02a      	beq.n	8006010 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f003 0308 	and.w	r3, r3, #8
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d025      	beq.n	8006010 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 020e 	bic.w	r2, r2, #14
 8005fd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fd8:	f003 021f 	and.w	r2, r3, #31
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8005fe6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006002:	2b00      	cmp	r3, #0
 8006004:	d004      	beq.n	8006010 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800600e:	bf00      	nop
 8006010:	bf00      	nop
}
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800602e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006034:	2b00      	cmp	r3, #0
 8006036:	d004      	beq.n	8006042 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006040:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006046:	f003 021f 	and.w	r2, r3, #31
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604e:	2101      	movs	r1, #1
 8006050:	fa01 f202 	lsl.w	r2, r1, r2
 8006054:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	2b10      	cmp	r3, #16
 8006064:	d108      	bne.n	8006078 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006076:	e007      	b.n	8006088 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	60da      	str	r2, [r3, #12]
}
 8006088:	bf00      	nop
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	461a      	mov	r2, r3
 80060a2:	4b16      	ldr	r3, [pc, #88]	@ (80060fc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d802      	bhi.n	80060ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80060a8:	4b15      	ldr	r3, [pc, #84]	@ (8006100 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	e001      	b.n	80060b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80060ae:	4b15      	ldr	r3, [pc, #84]	@ (8006104 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80060b0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	3b08      	subs	r3, #8
 80060be:	4a12      	ldr	r2, [pc, #72]	@ (8006108 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80060c0:	fba2 2303 	umull	r2, r3, r2, r3
 80060c4:	091b      	lsrs	r3, r3, #4
 80060c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060cc:	089b      	lsrs	r3, r3, #2
 80060ce:	009a      	lsls	r2, r3, #2
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	4413      	add	r3, r2
 80060d4:	461a      	mov	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a0b      	ldr	r2, [pc, #44]	@ (800610c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80060de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f003 031f 	and.w	r3, r3, #31
 80060e6:	2201      	movs	r2, #1
 80060e8:	409a      	lsls	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80060ee:	bf00      	nop
 80060f0:	371c      	adds	r7, #28
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	40020407 	.word	0x40020407
 8006100:	40020800 	.word	0x40020800
 8006104:	40020820 	.word	0x40020820
 8006108:	cccccccd 	.word	0xcccccccd
 800610c:	40020880 	.word	0x40020880

08006110 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4b0b      	ldr	r3, [pc, #44]	@ (8006150 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006124:	4413      	add	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	461a      	mov	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a08      	ldr	r2, [pc, #32]	@ (8006154 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006132:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	3b01      	subs	r3, #1
 8006138:	f003 031f 	and.w	r3, r3, #31
 800613c:	2201      	movs	r2, #1
 800613e:	409a      	lsls	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006144:	bf00      	nop
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr
 8006150:	1000823f 	.word	0x1000823f
 8006154:	40020940 	.word	0x40020940

08006158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006166:	e15a      	b.n	800641e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	2101      	movs	r1, #1
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	fa01 f303 	lsl.w	r3, r1, r3
 8006174:	4013      	ands	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 814c 	beq.w	8006418 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f003 0303 	and.w	r3, r3, #3
 8006188:	2b01      	cmp	r3, #1
 800618a:	d005      	beq.n	8006198 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006194:	2b02      	cmp	r3, #2
 8006196:	d130      	bne.n	80061fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	005b      	lsls	r3, r3, #1
 80061a2:	2203      	movs	r2, #3
 80061a4:	fa02 f303 	lsl.w	r3, r2, r3
 80061a8:	43db      	mvns	r3, r3
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4013      	ands	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68da      	ldr	r2, [r3, #12]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4313      	orrs	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061ce:	2201      	movs	r2, #1
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	43db      	mvns	r3, r3
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	4013      	ands	r3, r2
 80061dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	091b      	lsrs	r3, r3, #4
 80061e4:	f003 0201 	and.w	r2, r3, #1
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	fa02 f303 	lsl.w	r3, r2, r3
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	2b03      	cmp	r3, #3
 8006204:	d017      	beq.n	8006236 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	005b      	lsls	r3, r3, #1
 8006210:	2203      	movs	r2, #3
 8006212:	fa02 f303 	lsl.w	r3, r2, r3
 8006216:	43db      	mvns	r3, r3
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4013      	ands	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	689a      	ldr	r2, [r3, #8]
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	fa02 f303 	lsl.w	r3, r2, r3
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f003 0303 	and.w	r3, r3, #3
 800623e:	2b02      	cmp	r3, #2
 8006240:	d123      	bne.n	800628a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	08da      	lsrs	r2, r3, #3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3208      	adds	r2, #8
 800624a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	220f      	movs	r2, #15
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	43db      	mvns	r3, r3
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	4013      	ands	r3, r2
 8006264:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	691a      	ldr	r2, [r3, #16]
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	fa02 f303 	lsl.w	r3, r2, r3
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	08da      	lsrs	r2, r3, #3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	3208      	adds	r2, #8
 8006284:	6939      	ldr	r1, [r7, #16]
 8006286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	005b      	lsls	r3, r3, #1
 8006294:	2203      	movs	r2, #3
 8006296:	fa02 f303 	lsl.w	r3, r2, r3
 800629a:	43db      	mvns	r3, r3
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4013      	ands	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f003 0203 	and.w	r2, r3, #3
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 80a6 	beq.w	8006418 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062cc:	4b5b      	ldr	r3, [pc, #364]	@ (800643c <HAL_GPIO_Init+0x2e4>)
 80062ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062d0:	4a5a      	ldr	r2, [pc, #360]	@ (800643c <HAL_GPIO_Init+0x2e4>)
 80062d2:	f043 0301 	orr.w	r3, r3, #1
 80062d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80062d8:	4b58      	ldr	r3, [pc, #352]	@ (800643c <HAL_GPIO_Init+0x2e4>)
 80062da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	60bb      	str	r3, [r7, #8]
 80062e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062e4:	4a56      	ldr	r2, [pc, #344]	@ (8006440 <HAL_GPIO_Init+0x2e8>)
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	089b      	lsrs	r3, r3, #2
 80062ea:	3302      	adds	r3, #2
 80062ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f003 0303 	and.w	r3, r3, #3
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	220f      	movs	r2, #15
 80062fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006300:	43db      	mvns	r3, r3
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	4013      	ands	r3, r2
 8006306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800630e:	d01f      	beq.n	8006350 <HAL_GPIO_Init+0x1f8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a4c      	ldr	r2, [pc, #304]	@ (8006444 <HAL_GPIO_Init+0x2ec>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d019      	beq.n	800634c <HAL_GPIO_Init+0x1f4>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a4b      	ldr	r2, [pc, #300]	@ (8006448 <HAL_GPIO_Init+0x2f0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d013      	beq.n	8006348 <HAL_GPIO_Init+0x1f0>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a4a      	ldr	r2, [pc, #296]	@ (800644c <HAL_GPIO_Init+0x2f4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00d      	beq.n	8006344 <HAL_GPIO_Init+0x1ec>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a49      	ldr	r2, [pc, #292]	@ (8006450 <HAL_GPIO_Init+0x2f8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d007      	beq.n	8006340 <HAL_GPIO_Init+0x1e8>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a48      	ldr	r2, [pc, #288]	@ (8006454 <HAL_GPIO_Init+0x2fc>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d101      	bne.n	800633c <HAL_GPIO_Init+0x1e4>
 8006338:	2305      	movs	r3, #5
 800633a:	e00a      	b.n	8006352 <HAL_GPIO_Init+0x1fa>
 800633c:	2306      	movs	r3, #6
 800633e:	e008      	b.n	8006352 <HAL_GPIO_Init+0x1fa>
 8006340:	2304      	movs	r3, #4
 8006342:	e006      	b.n	8006352 <HAL_GPIO_Init+0x1fa>
 8006344:	2303      	movs	r3, #3
 8006346:	e004      	b.n	8006352 <HAL_GPIO_Init+0x1fa>
 8006348:	2302      	movs	r3, #2
 800634a:	e002      	b.n	8006352 <HAL_GPIO_Init+0x1fa>
 800634c:	2301      	movs	r3, #1
 800634e:	e000      	b.n	8006352 <HAL_GPIO_Init+0x1fa>
 8006350:	2300      	movs	r3, #0
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	f002 0203 	and.w	r2, r2, #3
 8006358:	0092      	lsls	r2, r2, #2
 800635a:	4093      	lsls	r3, r2
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006362:	4937      	ldr	r1, [pc, #220]	@ (8006440 <HAL_GPIO_Init+0x2e8>)
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	089b      	lsrs	r3, r3, #2
 8006368:	3302      	adds	r3, #2
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006370:	4b39      	ldr	r3, [pc, #228]	@ (8006458 <HAL_GPIO_Init+0x300>)
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	43db      	mvns	r3, r3
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	4013      	ands	r3, r2
 800637e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4313      	orrs	r3, r2
 8006392:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006394:	4a30      	ldr	r2, [pc, #192]	@ (8006458 <HAL_GPIO_Init+0x300>)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800639a:	4b2f      	ldr	r3, [pc, #188]	@ (8006458 <HAL_GPIO_Init+0x300>)
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	43db      	mvns	r3, r3
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4013      	ands	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80063be:	4a26      	ldr	r2, [pc, #152]	@ (8006458 <HAL_GPIO_Init+0x300>)
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80063c4:	4b24      	ldr	r3, [pc, #144]	@ (8006458 <HAL_GPIO_Init+0x300>)
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	43db      	mvns	r3, r3
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4013      	ands	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80063e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006458 <HAL_GPIO_Init+0x300>)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80063ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006458 <HAL_GPIO_Init+0x300>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	43db      	mvns	r3, r3
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4013      	ands	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d003      	beq.n	8006412 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4313      	orrs	r3, r2
 8006410:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006412:	4a11      	ldr	r2, [pc, #68]	@ (8006458 <HAL_GPIO_Init+0x300>)
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	3301      	adds	r3, #1
 800641c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	fa22 f303 	lsr.w	r3, r2, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	f47f ae9d 	bne.w	8006168 <HAL_GPIO_Init+0x10>
  }
}
 800642e:	bf00      	nop
 8006430:	bf00      	nop
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	40021000 	.word	0x40021000
 8006440:	40010000 	.word	0x40010000
 8006444:	48000400 	.word	0x48000400
 8006448:	48000800 	.word	0x48000800
 800644c:	48000c00 	.word	0x48000c00
 8006450:	48001000 	.word	0x48001000
 8006454:	48001400 	.word	0x48001400
 8006458:	40010400 	.word	0x40010400

0800645c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	460b      	mov	r3, r1
 8006466:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	887b      	ldrh	r3, [r7, #2]
 800646e:	4013      	ands	r3, r2
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006474:	2301      	movs	r3, #1
 8006476:	73fb      	strb	r3, [r7, #15]
 8006478:	e001      	b.n	800647e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800647a:	2300      	movs	r3, #0
 800647c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800647e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	807b      	strh	r3, [r7, #2]
 8006498:	4613      	mov	r3, r2
 800649a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800649c:	787b      	ldrb	r3, [r7, #1]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064a2:	887a      	ldrh	r2, [r7, #2]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80064a8:	e002      	b.n	80064b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064aa:	887a      	ldrh	r2, [r7, #2]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4603      	mov	r3, r0
 80064c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80064c6:	4b08      	ldr	r3, [pc, #32]	@ (80064e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064c8:	695a      	ldr	r2, [r3, #20]
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	4013      	ands	r3, r2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d006      	beq.n	80064e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064d2:	4a05      	ldr	r2, [pc, #20]	@ (80064e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064d4:	88fb      	ldrh	r3, [r7, #6]
 80064d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	4618      	mov	r0, r3
 80064dc:	f7fc fa03 	bl	80028e6 <HAL_GPIO_EXTI_Callback>
  }
}
 80064e0:	bf00      	nop
 80064e2:	3708      	adds	r7, #8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	40010400 	.word	0x40010400

080064ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d141      	bne.n	800657e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80064fa:	4b4b      	ldr	r3, [pc, #300]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006502:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006506:	d131      	bne.n	800656c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006508:	4b47      	ldr	r3, [pc, #284]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800650a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800650e:	4a46      	ldr	r2, [pc, #280]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006514:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006518:	4b43      	ldr	r3, [pc, #268]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006520:	4a41      	ldr	r2, [pc, #260]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006522:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006526:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006528:	4b40      	ldr	r3, [pc, #256]	@ (800662c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2232      	movs	r2, #50	@ 0x32
 800652e:	fb02 f303 	mul.w	r3, r2, r3
 8006532:	4a3f      	ldr	r2, [pc, #252]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006534:	fba2 2303 	umull	r2, r3, r2, r3
 8006538:	0c9b      	lsrs	r3, r3, #18
 800653a:	3301      	adds	r3, #1
 800653c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800653e:	e002      	b.n	8006546 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	3b01      	subs	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006546:	4b38      	ldr	r3, [pc, #224]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800654e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006552:	d102      	bne.n	800655a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1f2      	bne.n	8006540 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800655a:	4b33      	ldr	r3, [pc, #204]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006566:	d158      	bne.n	800661a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e057      	b.n	800661c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800656c:	4b2e      	ldr	r3, [pc, #184]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800656e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006572:	4a2d      	ldr	r2, [pc, #180]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006578:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800657c:	e04d      	b.n	800661a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006584:	d141      	bne.n	800660a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006586:	4b28      	ldr	r3, [pc, #160]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800658e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006592:	d131      	bne.n	80065f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006594:	4b24      	ldr	r3, [pc, #144]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800659a:	4a23      	ldr	r2, [pc, #140]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800659c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80065a4:	4b20      	ldr	r3, [pc, #128]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80065ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80065b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80065b4:	4b1d      	ldr	r3, [pc, #116]	@ (800662c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2232      	movs	r2, #50	@ 0x32
 80065ba:	fb02 f303 	mul.w	r3, r2, r3
 80065be:	4a1c      	ldr	r2, [pc, #112]	@ (8006630 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80065c0:	fba2 2303 	umull	r2, r3, r2, r3
 80065c4:	0c9b      	lsrs	r3, r3, #18
 80065c6:	3301      	adds	r3, #1
 80065c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065ca:	e002      	b.n	80065d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80065d2:	4b15      	ldr	r3, [pc, #84]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065de:	d102      	bne.n	80065e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d1f2      	bne.n	80065cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80065e6:	4b10      	ldr	r3, [pc, #64]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065f2:	d112      	bne.n	800661a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80065f4:	2303      	movs	r3, #3
 80065f6:	e011      	b.n	800661c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80065f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80065fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065fe:	4a0a      	ldr	r2, [pc, #40]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006604:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006608:	e007      	b.n	800661a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800660a:	4b07      	ldr	r3, [pc, #28]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006612:	4a05      	ldr	r2, [pc, #20]	@ (8006628 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006614:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006618:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr
 8006628:	40007000 	.word	0x40007000
 800662c:	20000358 	.word	0x20000358
 8006630:	431bde83 	.word	0x431bde83

08006634 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006634:	b480      	push	{r7}
 8006636:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006638:	4b05      	ldr	r3, [pc, #20]	@ (8006650 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	4a04      	ldr	r2, [pc, #16]	@ (8006650 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800663e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006642:	6093      	str	r3, [r2, #8]
}
 8006644:	bf00      	nop
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	40007000 	.word	0x40007000

08006654 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d101      	bne.n	8006666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e2fe      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d075      	beq.n	800675e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006672:	4b97      	ldr	r3, [pc, #604]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f003 030c 	and.w	r3, r3, #12
 800667a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800667c:	4b94      	ldr	r3, [pc, #592]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	f003 0303 	and.w	r3, r3, #3
 8006684:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	2b0c      	cmp	r3, #12
 800668a:	d102      	bne.n	8006692 <HAL_RCC_OscConfig+0x3e>
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2b03      	cmp	r3, #3
 8006690:	d002      	beq.n	8006698 <HAL_RCC_OscConfig+0x44>
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	2b08      	cmp	r3, #8
 8006696:	d10b      	bne.n	80066b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006698:	4b8d      	ldr	r3, [pc, #564]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d05b      	beq.n	800675c <HAL_RCC_OscConfig+0x108>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d157      	bne.n	800675c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e2d9      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066b8:	d106      	bne.n	80066c8 <HAL_RCC_OscConfig+0x74>
 80066ba:	4b85      	ldr	r3, [pc, #532]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a84      	ldr	r2, [pc, #528]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 80066c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066c4:	6013      	str	r3, [r2, #0]
 80066c6:	e01d      	b.n	8006704 <HAL_RCC_OscConfig+0xb0>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066d0:	d10c      	bne.n	80066ec <HAL_RCC_OscConfig+0x98>
 80066d2:	4b7f      	ldr	r3, [pc, #508]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a7e      	ldr	r2, [pc, #504]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 80066d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	4b7c      	ldr	r3, [pc, #496]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a7b      	ldr	r2, [pc, #492]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 80066e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066e8:	6013      	str	r3, [r2, #0]
 80066ea:	e00b      	b.n	8006704 <HAL_RCC_OscConfig+0xb0>
 80066ec:	4b78      	ldr	r3, [pc, #480]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a77      	ldr	r2, [pc, #476]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 80066f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	4b75      	ldr	r3, [pc, #468]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a74      	ldr	r2, [pc, #464]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 80066fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006702:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d013      	beq.n	8006734 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670c:	f7fd fc5e 	bl	8003fcc <HAL_GetTick>
 8006710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006712:	e008      	b.n	8006726 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006714:	f7fd fc5a 	bl	8003fcc <HAL_GetTick>
 8006718:	4602      	mov	r2, r0
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	2b64      	cmp	r3, #100	@ 0x64
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e29e      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006726:	4b6a      	ldr	r3, [pc, #424]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0f0      	beq.n	8006714 <HAL_RCC_OscConfig+0xc0>
 8006732:	e014      	b.n	800675e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006734:	f7fd fc4a 	bl	8003fcc <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800673c:	f7fd fc46 	bl	8003fcc <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b64      	cmp	r3, #100	@ 0x64
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e28a      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800674e:	4b60      	ldr	r3, [pc, #384]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f0      	bne.n	800673c <HAL_RCC_OscConfig+0xe8>
 800675a:	e000      	b.n	800675e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800675c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0302 	and.w	r3, r3, #2
 8006766:	2b00      	cmp	r3, #0
 8006768:	d075      	beq.n	8006856 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800676a:	4b59      	ldr	r3, [pc, #356]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 030c 	and.w	r3, r3, #12
 8006772:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006774:	4b56      	ldr	r3, [pc, #344]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f003 0303 	and.w	r3, r3, #3
 800677c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	2b0c      	cmp	r3, #12
 8006782:	d102      	bne.n	800678a <HAL_RCC_OscConfig+0x136>
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	2b02      	cmp	r3, #2
 8006788:	d002      	beq.n	8006790 <HAL_RCC_OscConfig+0x13c>
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	2b04      	cmp	r3, #4
 800678e:	d11f      	bne.n	80067d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006790:	4b4f      	ldr	r3, [pc, #316]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <HAL_RCC_OscConfig+0x154>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e25d      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067a8:	4b49      	ldr	r3, [pc, #292]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	061b      	lsls	r3, r3, #24
 80067b6:	4946      	ldr	r1, [pc, #280]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80067bc:	4b45      	ldr	r3, [pc, #276]	@ (80068d4 <HAL_RCC_OscConfig+0x280>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fd fbb7 	bl	8003f34 <HAL_InitTick>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d043      	beq.n	8006854 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e249      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d023      	beq.n	8006820 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067d8:	4b3d      	ldr	r3, [pc, #244]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a3c      	ldr	r2, [pc, #240]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 80067de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e4:	f7fd fbf2 	bl	8003fcc <HAL_GetTick>
 80067e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067ea:	e008      	b.n	80067fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067ec:	f7fd fbee 	bl	8003fcc <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e232      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067fe:	4b34      	ldr	r3, [pc, #208]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0f0      	beq.n	80067ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800680a:	4b31      	ldr	r3, [pc, #196]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	061b      	lsls	r3, r3, #24
 8006818:	492d      	ldr	r1, [pc, #180]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 800681a:	4313      	orrs	r3, r2
 800681c:	604b      	str	r3, [r1, #4]
 800681e:	e01a      	b.n	8006856 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006820:	4b2b      	ldr	r3, [pc, #172]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a2a      	ldr	r2, [pc, #168]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 8006826:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800682a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682c:	f7fd fbce 	bl	8003fcc <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006832:	e008      	b.n	8006846 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006834:	f7fd fbca 	bl	8003fcc <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e20e      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006846:	4b22      	ldr	r3, [pc, #136]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1f0      	bne.n	8006834 <HAL_RCC_OscConfig+0x1e0>
 8006852:	e000      	b.n	8006856 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006854:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d041      	beq.n	80068e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	695b      	ldr	r3, [r3, #20]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d01c      	beq.n	80068a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800686a:	4b19      	ldr	r3, [pc, #100]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 800686c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006870:	4a17      	ldr	r2, [pc, #92]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 8006872:	f043 0301 	orr.w	r3, r3, #1
 8006876:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800687a:	f7fd fba7 	bl	8003fcc <HAL_GetTick>
 800687e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006882:	f7fd fba3 	bl	8003fcc <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e1e7      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006894:	4b0e      	ldr	r3, [pc, #56]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 8006896:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d0ef      	beq.n	8006882 <HAL_RCC_OscConfig+0x22e>
 80068a2:	e020      	b.n	80068e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068a4:	4b0a      	ldr	r3, [pc, #40]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 80068a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068aa:	4a09      	ldr	r2, [pc, #36]	@ (80068d0 <HAL_RCC_OscConfig+0x27c>)
 80068ac:	f023 0301 	bic.w	r3, r3, #1
 80068b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b4:	f7fd fb8a 	bl	8003fcc <HAL_GetTick>
 80068b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068ba:	e00d      	b.n	80068d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068bc:	f7fd fb86 	bl	8003fcc <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d906      	bls.n	80068d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e1ca      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
 80068ce:	bf00      	nop
 80068d0:	40021000 	.word	0x40021000
 80068d4:	2000035c 	.word	0x2000035c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068d8:	4b8c      	ldr	r3, [pc, #560]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 80068da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1ea      	bne.n	80068bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 80a6 	beq.w	8006a40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068f4:	2300      	movs	r3, #0
 80068f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80068f8:	4b84      	ldr	r3, [pc, #528]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 80068fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <HAL_RCC_OscConfig+0x2b4>
 8006904:	2301      	movs	r3, #1
 8006906:	e000      	b.n	800690a <HAL_RCC_OscConfig+0x2b6>
 8006908:	2300      	movs	r3, #0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00d      	beq.n	800692a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800690e:	4b7f      	ldr	r3, [pc, #508]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 8006910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006912:	4a7e      	ldr	r2, [pc, #504]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 8006914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006918:	6593      	str	r3, [r2, #88]	@ 0x58
 800691a:	4b7c      	ldr	r3, [pc, #496]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 800691c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800691e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006926:	2301      	movs	r3, #1
 8006928:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800692a:	4b79      	ldr	r3, [pc, #484]	@ (8006b10 <HAL_RCC_OscConfig+0x4bc>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006932:	2b00      	cmp	r3, #0
 8006934:	d118      	bne.n	8006968 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006936:	4b76      	ldr	r3, [pc, #472]	@ (8006b10 <HAL_RCC_OscConfig+0x4bc>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a75      	ldr	r2, [pc, #468]	@ (8006b10 <HAL_RCC_OscConfig+0x4bc>)
 800693c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006940:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006942:	f7fd fb43 	bl	8003fcc <HAL_GetTick>
 8006946:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006948:	e008      	b.n	800695c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800694a:	f7fd fb3f 	bl	8003fcc <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d901      	bls.n	800695c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e183      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800695c:	4b6c      	ldr	r3, [pc, #432]	@ (8006b10 <HAL_RCC_OscConfig+0x4bc>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006964:	2b00      	cmp	r3, #0
 8006966:	d0f0      	beq.n	800694a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d108      	bne.n	8006982 <HAL_RCC_OscConfig+0x32e>
 8006970:	4b66      	ldr	r3, [pc, #408]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 8006972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006976:	4a65      	ldr	r2, [pc, #404]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 8006978:	f043 0301 	orr.w	r3, r3, #1
 800697c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006980:	e024      	b.n	80069cc <HAL_RCC_OscConfig+0x378>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b05      	cmp	r3, #5
 8006988:	d110      	bne.n	80069ac <HAL_RCC_OscConfig+0x358>
 800698a:	4b60      	ldr	r3, [pc, #384]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 800698c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006990:	4a5e      	ldr	r2, [pc, #376]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 8006992:	f043 0304 	orr.w	r3, r3, #4
 8006996:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800699a:	4b5c      	ldr	r3, [pc, #368]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 800699c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a0:	4a5a      	ldr	r2, [pc, #360]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 80069a2:	f043 0301 	orr.w	r3, r3, #1
 80069a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80069aa:	e00f      	b.n	80069cc <HAL_RCC_OscConfig+0x378>
 80069ac:	4b57      	ldr	r3, [pc, #348]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 80069ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b2:	4a56      	ldr	r2, [pc, #344]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 80069b4:	f023 0301 	bic.w	r3, r3, #1
 80069b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80069bc:	4b53      	ldr	r3, [pc, #332]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 80069be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c2:	4a52      	ldr	r2, [pc, #328]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 80069c4:	f023 0304 	bic.w	r3, r3, #4
 80069c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d016      	beq.n	8006a02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d4:	f7fd fafa 	bl	8003fcc <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069da:	e00a      	b.n	80069f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069dc:	f7fd faf6 	bl	8003fcc <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e138      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069f2:	4b46      	ldr	r3, [pc, #280]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 80069f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d0ed      	beq.n	80069dc <HAL_RCC_OscConfig+0x388>
 8006a00:	e015      	b.n	8006a2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a02:	f7fd fae3 	bl	8003fcc <HAL_GetTick>
 8006a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a08:	e00a      	b.n	8006a20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a0a:	f7fd fadf 	bl	8003fcc <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d901      	bls.n	8006a20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e121      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a20:	4b3a      	ldr	r3, [pc, #232]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 8006a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d1ed      	bne.n	8006a0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a2e:	7ffb      	ldrb	r3, [r7, #31]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d105      	bne.n	8006a40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a34:	4b35      	ldr	r3, [pc, #212]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 8006a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a38:	4a34      	ldr	r2, [pc, #208]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 8006a3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d03c      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d01c      	beq.n	8006a8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a54:	4b2d      	ldr	r3, [pc, #180]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 8006a56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a5a:	4a2c      	ldr	r2, [pc, #176]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 8006a5c:	f043 0301 	orr.w	r3, r3, #1
 8006a60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a64:	f7fd fab2 	bl	8003fcc <HAL_GetTick>
 8006a68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a6a:	e008      	b.n	8006a7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a6c:	f7fd faae 	bl	8003fcc <HAL_GetTick>
 8006a70:	4602      	mov	r2, r0
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	1ad3      	subs	r3, r2, r3
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e0f2      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a7e:	4b23      	ldr	r3, [pc, #140]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 8006a80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0ef      	beq.n	8006a6c <HAL_RCC_OscConfig+0x418>
 8006a8c:	e01b      	b.n	8006ac6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 8006a90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a94:	4a1d      	ldr	r2, [pc, #116]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 8006a96:	f023 0301 	bic.w	r3, r3, #1
 8006a9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a9e:	f7fd fa95 	bl	8003fcc <HAL_GetTick>
 8006aa2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006aa4:	e008      	b.n	8006ab8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006aa6:	f7fd fa91 	bl	8003fcc <HAL_GetTick>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d901      	bls.n	8006ab8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e0d5      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ab8:	4b14      	ldr	r3, [pc, #80]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 8006aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1ef      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 80c9 	beq.w	8006c62 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f003 030c 	and.w	r3, r3, #12
 8006ad8:	2b0c      	cmp	r3, #12
 8006ada:	f000 8083 	beq.w	8006be4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d15e      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ae6:	4b09      	ldr	r3, [pc, #36]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a08      	ldr	r2, [pc, #32]	@ (8006b0c <HAL_RCC_OscConfig+0x4b8>)
 8006aec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af2:	f7fd fa6b 	bl	8003fcc <HAL_GetTick>
 8006af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006af8:	e00c      	b.n	8006b14 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006afa:	f7fd fa67 	bl	8003fcc <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d905      	bls.n	8006b14 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e0ab      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
 8006b0c:	40021000 	.word	0x40021000
 8006b10:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b14:	4b55      	ldr	r3, [pc, #340]	@ (8006c6c <HAL_RCC_OscConfig+0x618>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1ec      	bne.n	8006afa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b20:	4b52      	ldr	r3, [pc, #328]	@ (8006c6c <HAL_RCC_OscConfig+0x618>)
 8006b22:	68da      	ldr	r2, [r3, #12]
 8006b24:	4b52      	ldr	r3, [pc, #328]	@ (8006c70 <HAL_RCC_OscConfig+0x61c>)
 8006b26:	4013      	ands	r3, r2
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6a11      	ldr	r1, [r2, #32]
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b30:	3a01      	subs	r2, #1
 8006b32:	0112      	lsls	r2, r2, #4
 8006b34:	4311      	orrs	r1, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006b3a:	0212      	lsls	r2, r2, #8
 8006b3c:	4311      	orrs	r1, r2
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b42:	0852      	lsrs	r2, r2, #1
 8006b44:	3a01      	subs	r2, #1
 8006b46:	0552      	lsls	r2, r2, #21
 8006b48:	4311      	orrs	r1, r2
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b4e:	0852      	lsrs	r2, r2, #1
 8006b50:	3a01      	subs	r2, #1
 8006b52:	0652      	lsls	r2, r2, #25
 8006b54:	4311      	orrs	r1, r2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006b5a:	06d2      	lsls	r2, r2, #27
 8006b5c:	430a      	orrs	r2, r1
 8006b5e:	4943      	ldr	r1, [pc, #268]	@ (8006c6c <HAL_RCC_OscConfig+0x618>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b64:	4b41      	ldr	r3, [pc, #260]	@ (8006c6c <HAL_RCC_OscConfig+0x618>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a40      	ldr	r2, [pc, #256]	@ (8006c6c <HAL_RCC_OscConfig+0x618>)
 8006b6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b70:	4b3e      	ldr	r3, [pc, #248]	@ (8006c6c <HAL_RCC_OscConfig+0x618>)
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	4a3d      	ldr	r2, [pc, #244]	@ (8006c6c <HAL_RCC_OscConfig+0x618>)
 8006b76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b7c:	f7fd fa26 	bl	8003fcc <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b84:	f7fd fa22 	bl	8003fcc <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e066      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b96:	4b35      	ldr	r3, [pc, #212]	@ (8006c6c <HAL_RCC_OscConfig+0x618>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d0f0      	beq.n	8006b84 <HAL_RCC_OscConfig+0x530>
 8006ba2:	e05e      	b.n	8006c62 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ba4:	4b31      	ldr	r3, [pc, #196]	@ (8006c6c <HAL_RCC_OscConfig+0x618>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a30      	ldr	r2, [pc, #192]	@ (8006c6c <HAL_RCC_OscConfig+0x618>)
 8006baa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb0:	f7fd fa0c 	bl	8003fcc <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bb8:	f7fd fa08 	bl	8003fcc <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e04c      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bca:	4b28      	ldr	r3, [pc, #160]	@ (8006c6c <HAL_RCC_OscConfig+0x618>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f0      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006bd6:	4b25      	ldr	r3, [pc, #148]	@ (8006c6c <HAL_RCC_OscConfig+0x618>)
 8006bd8:	68da      	ldr	r2, [r3, #12]
 8006bda:	4924      	ldr	r1, [pc, #144]	@ (8006c6c <HAL_RCC_OscConfig+0x618>)
 8006bdc:	4b25      	ldr	r3, [pc, #148]	@ (8006c74 <HAL_RCC_OscConfig+0x620>)
 8006bde:	4013      	ands	r3, r2
 8006be0:	60cb      	str	r3, [r1, #12]
 8006be2:	e03e      	b.n	8006c62 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e039      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8006c6c <HAL_RCC_OscConfig+0x618>)
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f003 0203 	and.w	r2, r3, #3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d12c      	bne.n	8006c5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d123      	bne.n	8006c5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c20:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d11b      	bne.n	8006c5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c30:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d113      	bne.n	8006c5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c40:	085b      	lsrs	r3, r3, #1
 8006c42:	3b01      	subs	r3, #1
 8006c44:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d109      	bne.n	8006c5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c54:	085b      	lsrs	r3, r3, #1
 8006c56:	3b01      	subs	r3, #1
 8006c58:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d001      	beq.n	8006c62 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e000      	b.n	8006c64 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3720      	adds	r7, #32
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	019f800c 	.word	0x019f800c
 8006c74:	feeefffc 	.word	0xfeeefffc

08006c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006c82:	2300      	movs	r3, #0
 8006c84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e11e      	b.n	8006ece <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c90:	4b91      	ldr	r3, [pc, #580]	@ (8006ed8 <HAL_RCC_ClockConfig+0x260>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 030f 	and.w	r3, r3, #15
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d910      	bls.n	8006cc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c9e:	4b8e      	ldr	r3, [pc, #568]	@ (8006ed8 <HAL_RCC_ClockConfig+0x260>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f023 020f 	bic.w	r2, r3, #15
 8006ca6:	498c      	ldr	r1, [pc, #560]	@ (8006ed8 <HAL_RCC_ClockConfig+0x260>)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cae:	4b8a      	ldr	r3, [pc, #552]	@ (8006ed8 <HAL_RCC_ClockConfig+0x260>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 030f 	and.w	r3, r3, #15
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d001      	beq.n	8006cc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e106      	b.n	8006ece <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0301 	and.w	r3, r3, #1
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d073      	beq.n	8006db4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2b03      	cmp	r3, #3
 8006cd2:	d129      	bne.n	8006d28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cd4:	4b81      	ldr	r3, [pc, #516]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e0f4      	b.n	8006ece <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006ce4:	f000 f99e 	bl	8007024 <RCC_GetSysClockFreqFromPLLSource>
 8006ce8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	4a7c      	ldr	r2, [pc, #496]	@ (8006ee0 <HAL_RCC_ClockConfig+0x268>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d93f      	bls.n	8006d72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006cf2:	4b7a      	ldr	r3, [pc, #488]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d009      	beq.n	8006d12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d033      	beq.n	8006d72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d12f      	bne.n	8006d72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d12:	4b72      	ldr	r3, [pc, #456]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d1a:	4a70      	ldr	r2, [pc, #448]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006d22:	2380      	movs	r3, #128	@ 0x80
 8006d24:	617b      	str	r3, [r7, #20]
 8006d26:	e024      	b.n	8006d72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d107      	bne.n	8006d40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d30:	4b6a      	ldr	r3, [pc, #424]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d109      	bne.n	8006d50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e0c6      	b.n	8006ece <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d40:	4b66      	ldr	r3, [pc, #408]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e0be      	b.n	8006ece <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006d50:	f000 f8ce 	bl	8006ef0 <HAL_RCC_GetSysClockFreq>
 8006d54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	4a61      	ldr	r2, [pc, #388]	@ (8006ee0 <HAL_RCC_ClockConfig+0x268>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d909      	bls.n	8006d72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d66:	4a5d      	ldr	r2, [pc, #372]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006d68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006d6e:	2380      	movs	r3, #128	@ 0x80
 8006d70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d72:	4b5a      	ldr	r3, [pc, #360]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f023 0203 	bic.w	r2, r3, #3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	4957      	ldr	r1, [pc, #348]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d84:	f7fd f922 	bl	8003fcc <HAL_GetTick>
 8006d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d8a:	e00a      	b.n	8006da2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d8c:	f7fd f91e 	bl	8003fcc <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e095      	b.n	8006ece <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006da2:	4b4e      	ldr	r3, [pc, #312]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f003 020c 	and.w	r2, r3, #12
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d1eb      	bne.n	8006d8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d023      	beq.n	8006e08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d005      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dcc:	4b43      	ldr	r3, [pc, #268]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	4a42      	ldr	r2, [pc, #264]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006dd2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006dd6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0308 	and.w	r3, r3, #8
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d007      	beq.n	8006df4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006de4:	4b3d      	ldr	r3, [pc, #244]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006dec:	4a3b      	ldr	r2, [pc, #236]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006dee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006df2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006df4:	4b39      	ldr	r3, [pc, #228]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	4936      	ldr	r1, [pc, #216]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	608b      	str	r3, [r1, #8]
 8006e06:	e008      	b.n	8006e1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2b80      	cmp	r3, #128	@ 0x80
 8006e0c:	d105      	bne.n	8006e1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006e0e:	4b33      	ldr	r3, [pc, #204]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	4a32      	ldr	r2, [pc, #200]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006e14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e1a:	4b2f      	ldr	r3, [pc, #188]	@ (8006ed8 <HAL_RCC_ClockConfig+0x260>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d21d      	bcs.n	8006e64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e28:	4b2b      	ldr	r3, [pc, #172]	@ (8006ed8 <HAL_RCC_ClockConfig+0x260>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f023 020f 	bic.w	r2, r3, #15
 8006e30:	4929      	ldr	r1, [pc, #164]	@ (8006ed8 <HAL_RCC_ClockConfig+0x260>)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006e38:	f7fd f8c8 	bl	8003fcc <HAL_GetTick>
 8006e3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3e:	e00a      	b.n	8006e56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e40:	f7fd f8c4 	bl	8003fcc <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d901      	bls.n	8006e56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006e52:	2303      	movs	r3, #3
 8006e54:	e03b      	b.n	8006ece <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e56:	4b20      	ldr	r3, [pc, #128]	@ (8006ed8 <HAL_RCC_ClockConfig+0x260>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d1ed      	bne.n	8006e40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0304 	and.w	r3, r3, #4
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d008      	beq.n	8006e82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e70:	4b1a      	ldr	r3, [pc, #104]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	4917      	ldr	r1, [pc, #92]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0308 	and.w	r3, r3, #8
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d009      	beq.n	8006ea2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e8e:	4b13      	ldr	r3, [pc, #76]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	691b      	ldr	r3, [r3, #16]
 8006e9a:	00db      	lsls	r3, r3, #3
 8006e9c:	490f      	ldr	r1, [pc, #60]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ea2:	f000 f825 	bl	8006ef0 <HAL_RCC_GetSysClockFreq>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8006edc <HAL_RCC_ClockConfig+0x264>)
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	091b      	lsrs	r3, r3, #4
 8006eae:	f003 030f 	and.w	r3, r3, #15
 8006eb2:	490c      	ldr	r1, [pc, #48]	@ (8006ee4 <HAL_RCC_ClockConfig+0x26c>)
 8006eb4:	5ccb      	ldrb	r3, [r1, r3]
 8006eb6:	f003 031f 	and.w	r3, r3, #31
 8006eba:	fa22 f303 	lsr.w	r3, r2, r3
 8006ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8006ee8 <HAL_RCC_ClockConfig+0x270>)
 8006ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8006eec <HAL_RCC_ClockConfig+0x274>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fd f834 	bl	8003f34 <HAL_InitTick>
 8006ecc:	4603      	mov	r3, r0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40022000 	.word	0x40022000
 8006edc:	40021000 	.word	0x40021000
 8006ee0:	04c4b400 	.word	0x04c4b400
 8006ee4:	0800c2a8 	.word	0x0800c2a8
 8006ee8:	20000358 	.word	0x20000358
 8006eec:	2000035c 	.word	0x2000035c

08006ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006ef6:	4b2c      	ldr	r3, [pc, #176]	@ (8006fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f003 030c 	and.w	r3, r3, #12
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d102      	bne.n	8006f08 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f02:	4b2a      	ldr	r3, [pc, #168]	@ (8006fac <HAL_RCC_GetSysClockFreq+0xbc>)
 8006f04:	613b      	str	r3, [r7, #16]
 8006f06:	e047      	b.n	8006f98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006f08:	4b27      	ldr	r3, [pc, #156]	@ (8006fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f003 030c 	and.w	r3, r3, #12
 8006f10:	2b08      	cmp	r3, #8
 8006f12:	d102      	bne.n	8006f1a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f14:	4b26      	ldr	r3, [pc, #152]	@ (8006fb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006f16:	613b      	str	r3, [r7, #16]
 8006f18:	e03e      	b.n	8006f98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006f1a:	4b23      	ldr	r3, [pc, #140]	@ (8006fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f003 030c 	and.w	r3, r3, #12
 8006f22:	2b0c      	cmp	r3, #12
 8006f24:	d136      	bne.n	8006f94 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f26:	4b20      	ldr	r3, [pc, #128]	@ (8006fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	f003 0303 	and.w	r3, r3, #3
 8006f2e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f30:	4b1d      	ldr	r3, [pc, #116]	@ (8006fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	091b      	lsrs	r3, r3, #4
 8006f36:	f003 030f 	and.w	r3, r3, #15
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d10c      	bne.n	8006f5e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f44:	4a1a      	ldr	r2, [pc, #104]	@ (8006fb0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4c:	4a16      	ldr	r2, [pc, #88]	@ (8006fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f4e:	68d2      	ldr	r2, [r2, #12]
 8006f50:	0a12      	lsrs	r2, r2, #8
 8006f52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f56:	fb02 f303 	mul.w	r3, r2, r3
 8006f5a:	617b      	str	r3, [r7, #20]
      break;
 8006f5c:	e00c      	b.n	8006f78 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f5e:	4a13      	ldr	r2, [pc, #76]	@ (8006fac <HAL_RCC_GetSysClockFreq+0xbc>)
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f66:	4a10      	ldr	r2, [pc, #64]	@ (8006fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f68:	68d2      	ldr	r2, [r2, #12]
 8006f6a:	0a12      	lsrs	r2, r2, #8
 8006f6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006f70:	fb02 f303 	mul.w	r3, r2, r3
 8006f74:	617b      	str	r3, [r7, #20]
      break;
 8006f76:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f78:	4b0b      	ldr	r3, [pc, #44]	@ (8006fa8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	0e5b      	lsrs	r3, r3, #25
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	3301      	adds	r3, #1
 8006f84:	005b      	lsls	r3, r3, #1
 8006f86:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f90:	613b      	str	r3, [r7, #16]
 8006f92:	e001      	b.n	8006f98 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006f98:	693b      	ldr	r3, [r7, #16]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	40021000 	.word	0x40021000
 8006fac:	00f42400 	.word	0x00f42400
 8006fb0:	016e3600 	.word	0x016e3600

08006fb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fb8:	4b03      	ldr	r3, [pc, #12]	@ (8006fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fba:	681b      	ldr	r3, [r3, #0]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	20000358 	.word	0x20000358

08006fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006fd0:	f7ff fff0 	bl	8006fb4 <HAL_RCC_GetHCLKFreq>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	4b06      	ldr	r3, [pc, #24]	@ (8006ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	0a1b      	lsrs	r3, r3, #8
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	4904      	ldr	r1, [pc, #16]	@ (8006ff4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006fe2:	5ccb      	ldrb	r3, [r1, r3]
 8006fe4:	f003 031f 	and.w	r3, r3, #31
 8006fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	40021000 	.word	0x40021000
 8006ff4:	0800c2b8 	.word	0x0800c2b8

08006ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ffc:	f7ff ffda 	bl	8006fb4 <HAL_RCC_GetHCLKFreq>
 8007000:	4602      	mov	r2, r0
 8007002:	4b06      	ldr	r3, [pc, #24]	@ (800701c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	0adb      	lsrs	r3, r3, #11
 8007008:	f003 0307 	and.w	r3, r3, #7
 800700c:	4904      	ldr	r1, [pc, #16]	@ (8007020 <HAL_RCC_GetPCLK2Freq+0x28>)
 800700e:	5ccb      	ldrb	r3, [r1, r3]
 8007010:	f003 031f 	and.w	r3, r3, #31
 8007014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007018:	4618      	mov	r0, r3
 800701a:	bd80      	pop	{r7, pc}
 800701c:	40021000 	.word	0x40021000
 8007020:	0800c2b8 	.word	0x0800c2b8

08007024 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800702a:	4b1e      	ldr	r3, [pc, #120]	@ (80070a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	f003 0303 	and.w	r3, r3, #3
 8007032:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007034:	4b1b      	ldr	r3, [pc, #108]	@ (80070a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	091b      	lsrs	r3, r3, #4
 800703a:	f003 030f 	and.w	r3, r3, #15
 800703e:	3301      	adds	r3, #1
 8007040:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	2b03      	cmp	r3, #3
 8007046:	d10c      	bne.n	8007062 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007048:	4a17      	ldr	r2, [pc, #92]	@ (80070a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007050:	4a14      	ldr	r2, [pc, #80]	@ (80070a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007052:	68d2      	ldr	r2, [r2, #12]
 8007054:	0a12      	lsrs	r2, r2, #8
 8007056:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800705a:	fb02 f303 	mul.w	r3, r2, r3
 800705e:	617b      	str	r3, [r7, #20]
    break;
 8007060:	e00c      	b.n	800707c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007062:	4a12      	ldr	r2, [pc, #72]	@ (80070ac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	fbb2 f3f3 	udiv	r3, r2, r3
 800706a:	4a0e      	ldr	r2, [pc, #56]	@ (80070a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800706c:	68d2      	ldr	r2, [r2, #12]
 800706e:	0a12      	lsrs	r2, r2, #8
 8007070:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007074:	fb02 f303 	mul.w	r3, r2, r3
 8007078:	617b      	str	r3, [r7, #20]
    break;
 800707a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800707c:	4b09      	ldr	r3, [pc, #36]	@ (80070a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	0e5b      	lsrs	r3, r3, #25
 8007082:	f003 0303 	and.w	r3, r3, #3
 8007086:	3301      	adds	r3, #1
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	fbb2 f3f3 	udiv	r3, r2, r3
 8007094:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007096:	687b      	ldr	r3, [r7, #4]
}
 8007098:	4618      	mov	r0, r3
 800709a:	371c      	adds	r7, #28
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	40021000 	.word	0x40021000
 80070a8:	016e3600 	.word	0x016e3600
 80070ac:	00f42400 	.word	0x00f42400

080070b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070b8:	2300      	movs	r3, #0
 80070ba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070bc:	2300      	movs	r3, #0
 80070be:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 8098 	beq.w	80071fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070ce:	2300      	movs	r3, #0
 80070d0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070d2:	4b43      	ldr	r3, [pc, #268]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10d      	bne.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070de:	4b40      	ldr	r3, [pc, #256]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070e2:	4a3f      	ldr	r2, [pc, #252]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80070e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80070ea:	4b3d      	ldr	r3, [pc, #244]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80070ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070f2:	60bb      	str	r3, [r7, #8]
 80070f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070f6:	2301      	movs	r3, #1
 80070f8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070fa:	4b3a      	ldr	r3, [pc, #232]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a39      	ldr	r2, [pc, #228]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007104:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007106:	f7fc ff61 	bl	8003fcc <HAL_GetTick>
 800710a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800710c:	e009      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800710e:	f7fc ff5d 	bl	8003fcc <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	2b02      	cmp	r3, #2
 800711a:	d902      	bls.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	74fb      	strb	r3, [r7, #19]
        break;
 8007120:	e005      	b.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007122:	4b30      	ldr	r3, [pc, #192]	@ (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0ef      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800712e:	7cfb      	ldrb	r3, [r7, #19]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d159      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007134:	4b2a      	ldr	r3, [pc, #168]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800713a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800713e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d01e      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800714a:	697a      	ldr	r2, [r7, #20]
 800714c:	429a      	cmp	r2, r3
 800714e:	d019      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007150:	4b23      	ldr	r3, [pc, #140]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800715a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800715c:	4b20      	ldr	r3, [pc, #128]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800715e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007162:	4a1f      	ldr	r2, [pc, #124]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800716c:	4b1c      	ldr	r3, [pc, #112]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800716e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007172:	4a1b      	ldr	r2, [pc, #108]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007174:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007178:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800717c:	4a18      	ldr	r2, [pc, #96]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	f003 0301 	and.w	r3, r3, #1
 800718a:	2b00      	cmp	r3, #0
 800718c:	d016      	beq.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718e:	f7fc ff1d 	bl	8003fcc <HAL_GetTick>
 8007192:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007194:	e00b      	b.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007196:	f7fc ff19 	bl	8003fcc <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d902      	bls.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	74fb      	strb	r3, [r7, #19]
            break;
 80071ac:	e006      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071ae:	4b0c      	ldr	r3, [pc, #48]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d0ec      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80071bc:	7cfb      	ldrb	r3, [r7, #19]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10b      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071c2:	4b07      	ldr	r3, [pc, #28]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071d0:	4903      	ldr	r1, [pc, #12]	@ (80071e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80071d8:	e008      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071da:	7cfb      	ldrb	r3, [r7, #19]
 80071dc:	74bb      	strb	r3, [r7, #18]
 80071de:	e005      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80071e0:	40021000 	.word	0x40021000
 80071e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e8:	7cfb      	ldrb	r3, [r7, #19]
 80071ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071ec:	7c7b      	ldrb	r3, [r7, #17]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d105      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071f2:	4ba7      	ldr	r3, [pc, #668]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071f6:	4aa6      	ldr	r2, [pc, #664]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071fc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d00a      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800720a:	4ba1      	ldr	r3, [pc, #644]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800720c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007210:	f023 0203 	bic.w	r2, r3, #3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	499d      	ldr	r1, [pc, #628]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800721a:	4313      	orrs	r3, r2
 800721c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800722c:	4b98      	ldr	r3, [pc, #608]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800722e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007232:	f023 020c 	bic.w	r2, r3, #12
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	4995      	ldr	r1, [pc, #596]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800723c:	4313      	orrs	r3, r2
 800723e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0304 	and.w	r3, r3, #4
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800724e:	4b90      	ldr	r3, [pc, #576]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007254:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68db      	ldr	r3, [r3, #12]
 800725c:	498c      	ldr	r1, [pc, #560]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800725e:	4313      	orrs	r3, r2
 8007260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f003 0308 	and.w	r3, r3, #8
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007270:	4b87      	ldr	r3, [pc, #540]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007276:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	4984      	ldr	r1, [pc, #528]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007280:	4313      	orrs	r3, r2
 8007282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0310 	and.w	r3, r3, #16
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007292:	4b7f      	ldr	r3, [pc, #508]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007298:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	497b      	ldr	r1, [pc, #492]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0320 	and.w	r3, r3, #32
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00a      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072b4:	4b76      	ldr	r3, [pc, #472]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	4973      	ldr	r1, [pc, #460]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00a      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072d6:	4b6e      	ldr	r3, [pc, #440]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072dc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	69db      	ldr	r3, [r3, #28]
 80072e4:	496a      	ldr	r1, [pc, #424]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00a      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80072f8:	4b65      	ldr	r3, [pc, #404]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072fe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	4962      	ldr	r1, [pc, #392]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007308:	4313      	orrs	r3, r2
 800730a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800731a:	4b5d      	ldr	r3, [pc, #372]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800731c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007320:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007328:	4959      	ldr	r1, [pc, #356]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800732a:	4313      	orrs	r3, r2
 800732c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00a      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800733c:	4b54      	ldr	r3, [pc, #336]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800733e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007342:	f023 0203 	bic.w	r2, r3, #3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800734a:	4951      	ldr	r1, [pc, #324]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800734c:	4313      	orrs	r3, r2
 800734e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800735e:	4b4c      	ldr	r3, [pc, #304]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007364:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736c:	4948      	ldr	r1, [pc, #288]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800736e:	4313      	orrs	r3, r2
 8007370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800737c:	2b00      	cmp	r3, #0
 800737e:	d015      	beq.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007380:	4b43      	ldr	r3, [pc, #268]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007386:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738e:	4940      	ldr	r1, [pc, #256]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007390:	4313      	orrs	r3, r2
 8007392:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800739a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800739e:	d105      	bne.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073a0:	4b3b      	ldr	r3, [pc, #236]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073a2:	68db      	ldr	r3, [r3, #12]
 80073a4:	4a3a      	ldr	r2, [pc, #232]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073aa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d015      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80073b8:	4b35      	ldr	r3, [pc, #212]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073be:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073c6:	4932      	ldr	r1, [pc, #200]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80073d6:	d105      	bne.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	4a2c      	ldr	r2, [pc, #176]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073e2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d015      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80073f0:	4b27      	ldr	r3, [pc, #156]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fe:	4924      	ldr	r1, [pc, #144]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007400:	4313      	orrs	r3, r2
 8007402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800740e:	d105      	bne.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007410:	4b1f      	ldr	r3, [pc, #124]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	4a1e      	ldr	r2, [pc, #120]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007416:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800741a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d015      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007428:	4b19      	ldr	r3, [pc, #100]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800742a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800742e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007436:	4916      	ldr	r1, [pc, #88]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007438:	4313      	orrs	r3, r2
 800743a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007442:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007446:	d105      	bne.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007448:	4b11      	ldr	r3, [pc, #68]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	4a10      	ldr	r2, [pc, #64]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800744e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007452:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d019      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007460:	4b0b      	ldr	r3, [pc, #44]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007466:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746e:	4908      	ldr	r1, [pc, #32]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007470:	4313      	orrs	r3, r2
 8007472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800747a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800747e:	d109      	bne.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007480:	4b03      	ldr	r3, [pc, #12]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	4a02      	ldr	r2, [pc, #8]	@ (8007490 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007486:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800748a:	60d3      	str	r3, [r2, #12]
 800748c:	e002      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800748e:	bf00      	nop
 8007490:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d015      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80074a0:	4b29      	ldr	r3, [pc, #164]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074a6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ae:	4926      	ldr	r1, [pc, #152]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074b0:	4313      	orrs	r3, r2
 80074b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074be:	d105      	bne.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80074c0:	4b21      	ldr	r3, [pc, #132]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	4a20      	ldr	r2, [pc, #128]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d015      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80074d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074de:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074e6:	4918      	ldr	r1, [pc, #96]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074f6:	d105      	bne.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80074f8:	4b13      	ldr	r3, [pc, #76]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074fa:	68db      	ldr	r3, [r3, #12]
 80074fc:	4a12      	ldr	r2, [pc, #72]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80074fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007502:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d015      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007510:	4b0d      	ldr	r3, [pc, #52]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007512:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007516:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800751e:	490a      	ldr	r1, [pc, #40]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007520:	4313      	orrs	r3, r2
 8007522:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800752a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800752e:	d105      	bne.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007530:	4b05      	ldr	r3, [pc, #20]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	4a04      	ldr	r2, [pc, #16]	@ (8007548 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007536:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800753a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800753c:	7cbb      	ldrb	r3, [r7, #18]
}
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	40021000 	.word	0x40021000

0800754c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e054      	b.n	8007608 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	d111      	bne.n	800758e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 fee2 	bl	800933c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800757c:	2b00      	cmp	r3, #0
 800757e:	d102      	bne.n	8007586 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a23      	ldr	r2, [pc, #140]	@ (8007610 <HAL_TIM_Base_Init+0xc4>)
 8007584:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2202      	movs	r2, #2
 8007592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3304      	adds	r3, #4
 800759e:	4619      	mov	r1, r3
 80075a0:	4610      	mov	r0, r2
 80075a2:	f001 fa2b 	bl	80089fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2201      	movs	r2, #1
 80075e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2201      	movs	r2, #1
 8007602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	080039d1 	.word	0x080039d1

08007614 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b01      	cmp	r3, #1
 8007626:	d001      	beq.n	800762c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e04c      	b.n	80076c6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a26      	ldr	r2, [pc, #152]	@ (80076d4 <HAL_TIM_Base_Start+0xc0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d022      	beq.n	8007684 <HAL_TIM_Base_Start+0x70>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007646:	d01d      	beq.n	8007684 <HAL_TIM_Base_Start+0x70>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a22      	ldr	r2, [pc, #136]	@ (80076d8 <HAL_TIM_Base_Start+0xc4>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d018      	beq.n	8007684 <HAL_TIM_Base_Start+0x70>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a21      	ldr	r2, [pc, #132]	@ (80076dc <HAL_TIM_Base_Start+0xc8>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d013      	beq.n	8007684 <HAL_TIM_Base_Start+0x70>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a1f      	ldr	r2, [pc, #124]	@ (80076e0 <HAL_TIM_Base_Start+0xcc>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00e      	beq.n	8007684 <HAL_TIM_Base_Start+0x70>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a1e      	ldr	r2, [pc, #120]	@ (80076e4 <HAL_TIM_Base_Start+0xd0>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d009      	beq.n	8007684 <HAL_TIM_Base_Start+0x70>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a1c      	ldr	r2, [pc, #112]	@ (80076e8 <HAL_TIM_Base_Start+0xd4>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d004      	beq.n	8007684 <HAL_TIM_Base_Start+0x70>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a1b      	ldr	r2, [pc, #108]	@ (80076ec <HAL_TIM_Base_Start+0xd8>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d115      	bne.n	80076b0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689a      	ldr	r2, [r3, #8]
 800768a:	4b19      	ldr	r3, [pc, #100]	@ (80076f0 <HAL_TIM_Base_Start+0xdc>)
 800768c:	4013      	ands	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b06      	cmp	r3, #6
 8007694:	d015      	beq.n	80076c2 <HAL_TIM_Base_Start+0xae>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800769c:	d011      	beq.n	80076c2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f042 0201 	orr.w	r2, r2, #1
 80076ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ae:	e008      	b.n	80076c2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f042 0201 	orr.w	r2, r2, #1
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	e000      	b.n	80076c4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	40012c00 	.word	0x40012c00
 80076d8:	40000400 	.word	0x40000400
 80076dc:	40000800 	.word	0x40000800
 80076e0:	40000c00 	.word	0x40000c00
 80076e4:	40013400 	.word	0x40013400
 80076e8:	40014000 	.word	0x40014000
 80076ec:	40015000 	.word	0x40015000
 80076f0:	00010007 	.word	0x00010007

080076f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b01      	cmp	r3, #1
 8007706:	d001      	beq.n	800770c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e054      	b.n	80077b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0201 	orr.w	r2, r2, #1
 8007722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a26      	ldr	r2, [pc, #152]	@ (80077c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d022      	beq.n	8007774 <HAL_TIM_Base_Start_IT+0x80>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007736:	d01d      	beq.n	8007774 <HAL_TIM_Base_Start_IT+0x80>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a22      	ldr	r2, [pc, #136]	@ (80077c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d018      	beq.n	8007774 <HAL_TIM_Base_Start_IT+0x80>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a21      	ldr	r2, [pc, #132]	@ (80077cc <HAL_TIM_Base_Start_IT+0xd8>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d013      	beq.n	8007774 <HAL_TIM_Base_Start_IT+0x80>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a1f      	ldr	r2, [pc, #124]	@ (80077d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d00e      	beq.n	8007774 <HAL_TIM_Base_Start_IT+0x80>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a1e      	ldr	r2, [pc, #120]	@ (80077d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d009      	beq.n	8007774 <HAL_TIM_Base_Start_IT+0x80>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1c      	ldr	r2, [pc, #112]	@ (80077d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d004      	beq.n	8007774 <HAL_TIM_Base_Start_IT+0x80>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a1b      	ldr	r2, [pc, #108]	@ (80077dc <HAL_TIM_Base_Start_IT+0xe8>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d115      	bne.n	80077a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	4b19      	ldr	r3, [pc, #100]	@ (80077e0 <HAL_TIM_Base_Start_IT+0xec>)
 800777c:	4013      	ands	r3, r2
 800777e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b06      	cmp	r3, #6
 8007784:	d015      	beq.n	80077b2 <HAL_TIM_Base_Start_IT+0xbe>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800778c:	d011      	beq.n	80077b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f042 0201 	orr.w	r2, r2, #1
 800779c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800779e:	e008      	b.n	80077b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0201 	orr.w	r2, r2, #1
 80077ae:	601a      	str	r2, [r3, #0]
 80077b0:	e000      	b.n	80077b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	40012c00 	.word	0x40012c00
 80077c8:	40000400 	.word	0x40000400
 80077cc:	40000800 	.word	0x40000800
 80077d0:	40000c00 	.word	0x40000c00
 80077d4:	40013400 	.word	0x40013400
 80077d8:	40014000 	.word	0x40014000
 80077dc:	40015000 	.word	0x40015000
 80077e0:	00010007 	.word	0x00010007

080077e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e054      	b.n	80078a0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d111      	bne.n	8007826 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f001 fd96 	bl	800933c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007814:	2b00      	cmp	r3, #0
 8007816:	d102      	bne.n	800781e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a23      	ldr	r2, [pc, #140]	@ (80078a8 <HAL_TIM_PWM_Init+0xc4>)
 800781c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2202      	movs	r2, #2
 800782a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	3304      	adds	r3, #4
 8007836:	4619      	mov	r1, r3
 8007838:	4610      	mov	r0, r2
 800783a:	f001 f8df 	bl	80089fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	08003985 	.word	0x08003985

080078ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d109      	bne.n	80078d0 <HAL_TIM_PWM_Start+0x24>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	bf14      	ite	ne
 80078c8:	2301      	movne	r3, #1
 80078ca:	2300      	moveq	r3, #0
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	e03c      	b.n	800794a <HAL_TIM_PWM_Start+0x9e>
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d109      	bne.n	80078ea <HAL_TIM_PWM_Start+0x3e>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b01      	cmp	r3, #1
 80078e0:	bf14      	ite	ne
 80078e2:	2301      	movne	r3, #1
 80078e4:	2300      	moveq	r3, #0
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	e02f      	b.n	800794a <HAL_TIM_PWM_Start+0x9e>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d109      	bne.n	8007904 <HAL_TIM_PWM_Start+0x58>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	bf14      	ite	ne
 80078fc:	2301      	movne	r3, #1
 80078fe:	2300      	moveq	r3, #0
 8007900:	b2db      	uxtb	r3, r3
 8007902:	e022      	b.n	800794a <HAL_TIM_PWM_Start+0x9e>
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2b0c      	cmp	r3, #12
 8007908:	d109      	bne.n	800791e <HAL_TIM_PWM_Start+0x72>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b01      	cmp	r3, #1
 8007914:	bf14      	ite	ne
 8007916:	2301      	movne	r3, #1
 8007918:	2300      	moveq	r3, #0
 800791a:	b2db      	uxtb	r3, r3
 800791c:	e015      	b.n	800794a <HAL_TIM_PWM_Start+0x9e>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b10      	cmp	r3, #16
 8007922:	d109      	bne.n	8007938 <HAL_TIM_PWM_Start+0x8c>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b01      	cmp	r3, #1
 800792e:	bf14      	ite	ne
 8007930:	2301      	movne	r3, #1
 8007932:	2300      	moveq	r3, #0
 8007934:	b2db      	uxtb	r3, r3
 8007936:	e008      	b.n	800794a <HAL_TIM_PWM_Start+0x9e>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b01      	cmp	r3, #1
 8007942:	bf14      	ite	ne
 8007944:	2301      	movne	r3, #1
 8007946:	2300      	moveq	r3, #0
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d001      	beq.n	8007952 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e0a6      	b.n	8007aa0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d104      	bne.n	8007962 <HAL_TIM_PWM_Start+0xb6>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2202      	movs	r2, #2
 800795c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007960:	e023      	b.n	80079aa <HAL_TIM_PWM_Start+0xfe>
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b04      	cmp	r3, #4
 8007966:	d104      	bne.n	8007972 <HAL_TIM_PWM_Start+0xc6>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007970:	e01b      	b.n	80079aa <HAL_TIM_PWM_Start+0xfe>
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b08      	cmp	r3, #8
 8007976:	d104      	bne.n	8007982 <HAL_TIM_PWM_Start+0xd6>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007980:	e013      	b.n	80079aa <HAL_TIM_PWM_Start+0xfe>
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b0c      	cmp	r3, #12
 8007986:	d104      	bne.n	8007992 <HAL_TIM_PWM_Start+0xe6>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2202      	movs	r2, #2
 800798c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007990:	e00b      	b.n	80079aa <HAL_TIM_PWM_Start+0xfe>
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b10      	cmp	r3, #16
 8007996:	d104      	bne.n	80079a2 <HAL_TIM_PWM_Start+0xf6>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079a0:	e003      	b.n	80079aa <HAL_TIM_PWM_Start+0xfe>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2202      	movs	r2, #2
 80079a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2201      	movs	r2, #1
 80079b0:	6839      	ldr	r1, [r7, #0]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f001 fc9c 	bl	80092f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a3a      	ldr	r2, [pc, #232]	@ (8007aa8 <HAL_TIM_PWM_Start+0x1fc>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d018      	beq.n	80079f4 <HAL_TIM_PWM_Start+0x148>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a39      	ldr	r2, [pc, #228]	@ (8007aac <HAL_TIM_PWM_Start+0x200>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d013      	beq.n	80079f4 <HAL_TIM_PWM_Start+0x148>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a37      	ldr	r2, [pc, #220]	@ (8007ab0 <HAL_TIM_PWM_Start+0x204>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d00e      	beq.n	80079f4 <HAL_TIM_PWM_Start+0x148>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a36      	ldr	r2, [pc, #216]	@ (8007ab4 <HAL_TIM_PWM_Start+0x208>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d009      	beq.n	80079f4 <HAL_TIM_PWM_Start+0x148>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a34      	ldr	r2, [pc, #208]	@ (8007ab8 <HAL_TIM_PWM_Start+0x20c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d004      	beq.n	80079f4 <HAL_TIM_PWM_Start+0x148>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a33      	ldr	r2, [pc, #204]	@ (8007abc <HAL_TIM_PWM_Start+0x210>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d101      	bne.n	80079f8 <HAL_TIM_PWM_Start+0x14c>
 80079f4:	2301      	movs	r3, #1
 80079f6:	e000      	b.n	80079fa <HAL_TIM_PWM_Start+0x14e>
 80079f8:	2300      	movs	r3, #0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d007      	beq.n	8007a0e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a25      	ldr	r2, [pc, #148]	@ (8007aa8 <HAL_TIM_PWM_Start+0x1fc>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d022      	beq.n	8007a5e <HAL_TIM_PWM_Start+0x1b2>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a20:	d01d      	beq.n	8007a5e <HAL_TIM_PWM_Start+0x1b2>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a26      	ldr	r2, [pc, #152]	@ (8007ac0 <HAL_TIM_PWM_Start+0x214>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d018      	beq.n	8007a5e <HAL_TIM_PWM_Start+0x1b2>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a24      	ldr	r2, [pc, #144]	@ (8007ac4 <HAL_TIM_PWM_Start+0x218>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d013      	beq.n	8007a5e <HAL_TIM_PWM_Start+0x1b2>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a23      	ldr	r2, [pc, #140]	@ (8007ac8 <HAL_TIM_PWM_Start+0x21c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d00e      	beq.n	8007a5e <HAL_TIM_PWM_Start+0x1b2>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a19      	ldr	r2, [pc, #100]	@ (8007aac <HAL_TIM_PWM_Start+0x200>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d009      	beq.n	8007a5e <HAL_TIM_PWM_Start+0x1b2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a18      	ldr	r2, [pc, #96]	@ (8007ab0 <HAL_TIM_PWM_Start+0x204>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d004      	beq.n	8007a5e <HAL_TIM_PWM_Start+0x1b2>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a18      	ldr	r2, [pc, #96]	@ (8007abc <HAL_TIM_PWM_Start+0x210>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d115      	bne.n	8007a8a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	689a      	ldr	r2, [r3, #8]
 8007a64:	4b19      	ldr	r3, [pc, #100]	@ (8007acc <HAL_TIM_PWM_Start+0x220>)
 8007a66:	4013      	ands	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2b06      	cmp	r3, #6
 8007a6e:	d015      	beq.n	8007a9c <HAL_TIM_PWM_Start+0x1f0>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a76:	d011      	beq.n	8007a9c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f042 0201 	orr.w	r2, r2, #1
 8007a86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a88:	e008      	b.n	8007a9c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f042 0201 	orr.w	r2, r2, #1
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	e000      	b.n	8007a9e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	40012c00 	.word	0x40012c00
 8007aac:	40013400 	.word	0x40013400
 8007ab0:	40014000 	.word	0x40014000
 8007ab4:	40014400 	.word	0x40014400
 8007ab8:	40014800 	.word	0x40014800
 8007abc:	40015000 	.word	0x40015000
 8007ac0:	40000400 	.word	0x40000400
 8007ac4:	40000800 	.word	0x40000800
 8007ac8:	40000c00 	.word	0x40000c00
 8007acc:	00010007 	.word	0x00010007

08007ad0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e04c      	b.n	8007b7e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d111      	bne.n	8007b14 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 fc1f 	bl	800933c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d102      	bne.n	8007b0c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a1f      	ldr	r2, [pc, #124]	@ (8007b88 <HAL_TIM_OnePulse_Init+0xb8>)
 8007b0a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2202      	movs	r2, #2
 8007b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3304      	adds	r3, #4
 8007b24:	4619      	mov	r1, r3
 8007b26:	4610      	mov	r0, r2
 8007b28:	f000 ff68 	bl	80089fc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f022 0208 	bic.w	r2, r2, #8
 8007b3a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6819      	ldr	r1, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	683a      	ldr	r2, [r7, #0]
 8007b48:	430a      	orrs	r2, r1
 8007b4a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	08007b8d 	.word	0x08007b8d

08007b8c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007bb0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007bb8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bc0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bc8:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d108      	bne.n	8007be2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d105      	bne.n	8007be2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007bd6:	7b7b      	ldrb	r3, [r7, #13]
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d102      	bne.n	8007be2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007bdc:	7b3b      	ldrb	r3, [r7, #12]
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d001      	beq.n	8007be6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e059      	b.n	8007c9a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2202      	movs	r2, #2
 8007bea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2202      	movs	r2, #2
 8007bf2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2202      	movs	r2, #2
 8007bfa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2202      	movs	r2, #2
 8007c02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68da      	ldr	r2, [r3, #12]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f042 0202 	orr.w	r2, r2, #2
 8007c14:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f042 0204 	orr.w	r2, r2, #4
 8007c24:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f001 fb5e 	bl	80092f0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	2104      	movs	r1, #4
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f001 fb57 	bl	80092f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a17      	ldr	r2, [pc, #92]	@ (8007ca4 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d018      	beq.n	8007c7e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a15      	ldr	r2, [pc, #84]	@ (8007ca8 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d013      	beq.n	8007c7e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a14      	ldr	r2, [pc, #80]	@ (8007cac <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d00e      	beq.n	8007c7e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a12      	ldr	r2, [pc, #72]	@ (8007cb0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d009      	beq.n	8007c7e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a11      	ldr	r2, [pc, #68]	@ (8007cb4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d004      	beq.n	8007c7e <HAL_TIM_OnePulse_Start_IT+0xde>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a0f      	ldr	r2, [pc, #60]	@ (8007cb8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d101      	bne.n	8007c82 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e000      	b.n	8007c84 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007c82:	2300      	movs	r3, #0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d007      	beq.n	8007c98 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	40012c00 	.word	0x40012c00
 8007ca8:	40013400 	.word	0x40013400
 8007cac:	40014000 	.word	0x40014000
 8007cb0:	40014400 	.word	0x40014400
 8007cb4:	40014800 	.word	0x40014800
 8007cb8:	40015000 	.word	0x40015000

08007cbc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d101      	bne.n	8007cd0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e0a2      	b.n	8007e16 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d111      	bne.n	8007d00 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 fb29 	bl	800933c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d102      	bne.n	8007cf8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4a4a      	ldr	r2, [pc, #296]	@ (8007e20 <HAL_TIM_Encoder_Init+0x164>)
 8007cf6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	6812      	ldr	r2, [r2, #0]
 8007d12:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007d16:	f023 0307 	bic.w	r3, r3, #7
 8007d1a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3304      	adds	r3, #4
 8007d24:	4619      	mov	r1, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	f000 fe68 	bl	80089fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699b      	ldr	r3, [r3, #24]
 8007d3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d54:	f023 0303 	bic.w	r3, r3, #3
 8007d58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	689a      	ldr	r2, [r3, #8]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	699b      	ldr	r3, [r3, #24]
 8007d62:	021b      	lsls	r3, r3, #8
 8007d64:	4313      	orrs	r3, r2
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007d72:	f023 030c 	bic.w	r3, r3, #12
 8007d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	68da      	ldr	r2, [r3, #12]
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	69db      	ldr	r3, [r3, #28]
 8007d8c:	021b      	lsls	r3, r3, #8
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	693a      	ldr	r2, [r7, #16]
 8007d92:	4313      	orrs	r3, r2
 8007d94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	011a      	lsls	r2, r3, #4
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	6a1b      	ldr	r3, [r3, #32]
 8007da0:	031b      	lsls	r3, r3, #12
 8007da2:	4313      	orrs	r3, r2
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007db0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007db8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	685a      	ldr	r2, [r3, #4]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	011b      	lsls	r3, r3, #4
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	08003aa1 	.word	0x08003aa1

08007e24 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e34:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e3c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e44:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e4c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d110      	bne.n	8007e76 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d102      	bne.n	8007e60 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e5a:	7b7b      	ldrb	r3, [r7, #13]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d001      	beq.n	8007e64 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007e60:	2301      	movs	r3, #1
 8007e62:	e069      	b.n	8007f38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e74:	e031      	b.n	8007eda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	2b04      	cmp	r3, #4
 8007e7a:	d110      	bne.n	8007e9e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d102      	bne.n	8007e88 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007e82:	7b3b      	ldrb	r3, [r7, #12]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d001      	beq.n	8007e8c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e055      	b.n	8007f38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2202      	movs	r2, #2
 8007e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e9c:	e01d      	b.n	8007eda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d108      	bne.n	8007eb6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d105      	bne.n	8007eb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007eaa:	7b7b      	ldrb	r3, [r7, #13]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d102      	bne.n	8007eb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007eb0:	7b3b      	ldrb	r3, [r7, #12]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d001      	beq.n	8007eba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e03e      	b.n	8007f38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2202      	movs	r2, #2
 8007ebe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2202      	movs	r2, #2
 8007ece:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d003      	beq.n	8007ee8 <HAL_TIM_Encoder_Start+0xc4>
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	d008      	beq.n	8007ef8 <HAL_TIM_Encoder_Start+0xd4>
 8007ee6:	e00f      	b.n	8007f08 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2201      	movs	r2, #1
 8007eee:	2100      	movs	r1, #0
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f001 f9fd 	bl	80092f0 <TIM_CCxChannelCmd>
      break;
 8007ef6:	e016      	b.n	8007f26 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2201      	movs	r2, #1
 8007efe:	2104      	movs	r1, #4
 8007f00:	4618      	mov	r0, r3
 8007f02:	f001 f9f5 	bl	80092f0 <TIM_CCxChannelCmd>
      break;
 8007f06:	e00e      	b.n	8007f26 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	2100      	movs	r1, #0
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 f9ed 	bl	80092f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	2104      	movs	r1, #4
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f001 f9e6 	bl	80092f0 <TIM_CCxChannelCmd>
      break;
 8007f24:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f042 0201 	orr.w	r2, r2, #1
 8007f34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f003 0302 	and.w	r3, r3, #2
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d026      	beq.n	8007fb0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f003 0302 	and.w	r3, r3, #2
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d021      	beq.n	8007fb0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f06f 0202 	mvn.w	r2, #2
 8007f74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	f003 0303 	and.w	r3, r3, #3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d005      	beq.n	8007f96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	4798      	blx	r3
 8007f94:	e009      	b.n	8007faa <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	f003 0304 	and.w	r3, r3, #4
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d026      	beq.n	8008008 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f003 0304 	and.w	r3, r3, #4
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d021      	beq.n	8008008 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f06f 0204 	mvn.w	r2, #4
 8007fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2202      	movs	r2, #2
 8007fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d005      	beq.n	8007fee <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	4798      	blx	r3
 8007fec:	e009      	b.n	8008002 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	f003 0308 	and.w	r3, r3, #8
 800800e:	2b00      	cmp	r3, #0
 8008010:	d026      	beq.n	8008060 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f003 0308 	and.w	r3, r3, #8
 8008018:	2b00      	cmp	r3, #0
 800801a:	d021      	beq.n	8008060 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f06f 0208 	mvn.w	r2, #8
 8008024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2204      	movs	r2, #4
 800802a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	f003 0303 	and.w	r3, r3, #3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d005      	beq.n	8008046 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	4798      	blx	r3
 8008044:	e009      	b.n	800805a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	f003 0310 	and.w	r3, r3, #16
 8008066:	2b00      	cmp	r3, #0
 8008068:	d026      	beq.n	80080b8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f003 0310 	and.w	r3, r3, #16
 8008070:	2b00      	cmp	r3, #0
 8008072:	d021      	beq.n	80080b8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f06f 0210 	mvn.w	r2, #16
 800807c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2208      	movs	r2, #8
 8008082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800808e:	2b00      	cmp	r3, #0
 8008090:	d005      	beq.n	800809e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	4798      	blx	r3
 800809c:	e009      	b.n	80080b2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00e      	beq.n	80080e0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d009      	beq.n	80080e0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f06f 0201 	mvn.w	r2, #1
 80080d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d104      	bne.n	80080f4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00e      	beq.n	8008112 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d009      	beq.n	8008112 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00e      	beq.n	800813a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008122:	2b00      	cmp	r3, #0
 8008124:	d009      	beq.n	800813a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800812e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00e      	beq.n	8008162 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800814a:	2b00      	cmp	r3, #0
 800814c:	d009      	beq.n	8008162 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	f003 0320 	and.w	r3, r3, #32
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00e      	beq.n	800818a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f003 0320 	and.w	r3, r3, #32
 8008172:	2b00      	cmp	r3, #0
 8008174:	d009      	beq.n	800818a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f06f 0220 	mvn.w	r2, #32
 800817e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00e      	beq.n	80081b2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d009      	beq.n	80081b2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80081a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d00e      	beq.n	80081da <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d009      	beq.n	80081da <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80081ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d00e      	beq.n	8008202 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d009      	beq.n	8008202 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80081f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00e      	beq.n	800822a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d009      	beq.n	800822a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800821e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
	...

08008234 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b086      	sub	sp, #24
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800824a:	2b01      	cmp	r3, #1
 800824c:	d101      	bne.n	8008252 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800824e:	2302      	movs	r3, #2
 8008250:	e0ff      	b.n	8008452 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2b14      	cmp	r3, #20
 800825e:	f200 80f0 	bhi.w	8008442 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008262:	a201      	add	r2, pc, #4	@ (adr r2, 8008268 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	080082bd 	.word	0x080082bd
 800826c:	08008443 	.word	0x08008443
 8008270:	08008443 	.word	0x08008443
 8008274:	08008443 	.word	0x08008443
 8008278:	080082fd 	.word	0x080082fd
 800827c:	08008443 	.word	0x08008443
 8008280:	08008443 	.word	0x08008443
 8008284:	08008443 	.word	0x08008443
 8008288:	0800833f 	.word	0x0800833f
 800828c:	08008443 	.word	0x08008443
 8008290:	08008443 	.word	0x08008443
 8008294:	08008443 	.word	0x08008443
 8008298:	0800837f 	.word	0x0800837f
 800829c:	08008443 	.word	0x08008443
 80082a0:	08008443 	.word	0x08008443
 80082a4:	08008443 	.word	0x08008443
 80082a8:	080083c1 	.word	0x080083c1
 80082ac:	08008443 	.word	0x08008443
 80082b0:	08008443 	.word	0x08008443
 80082b4:	08008443 	.word	0x08008443
 80082b8:	08008401 	.word	0x08008401
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68b9      	ldr	r1, [r7, #8]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 fc4e 	bl	8008b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	699a      	ldr	r2, [r3, #24]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0208 	orr.w	r2, r2, #8
 80082d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	699a      	ldr	r2, [r3, #24]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0204 	bic.w	r2, r2, #4
 80082e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6999      	ldr	r1, [r3, #24]
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	691a      	ldr	r2, [r3, #16]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	430a      	orrs	r2, r1
 80082f8:	619a      	str	r2, [r3, #24]
      break;
 80082fa:	e0a5      	b.n	8008448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	68b9      	ldr	r1, [r7, #8]
 8008302:	4618      	mov	r0, r3
 8008304:	f000 fcc8 	bl	8008c98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699a      	ldr	r2, [r3, #24]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	699a      	ldr	r2, [r3, #24]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6999      	ldr	r1, [r3, #24]
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	021a      	lsls	r2, r3, #8
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	430a      	orrs	r2, r1
 800833a:	619a      	str	r2, [r3, #24]
      break;
 800833c:	e084      	b.n	8008448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68b9      	ldr	r1, [r7, #8]
 8008344:	4618      	mov	r0, r3
 8008346:	f000 fd3b 	bl	8008dc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	69da      	ldr	r2, [r3, #28]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f042 0208 	orr.w	r2, r2, #8
 8008358:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	69da      	ldr	r2, [r3, #28]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f022 0204 	bic.w	r2, r2, #4
 8008368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69d9      	ldr	r1, [r3, #28]
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	691a      	ldr	r2, [r3, #16]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	430a      	orrs	r2, r1
 800837a:	61da      	str	r2, [r3, #28]
      break;
 800837c:	e064      	b.n	8008448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68b9      	ldr	r1, [r7, #8]
 8008384:	4618      	mov	r0, r3
 8008386:	f000 fdad 	bl	8008ee4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	69da      	ldr	r2, [r3, #28]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	69da      	ldr	r2, [r3, #28]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69d9      	ldr	r1, [r3, #28]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	021a      	lsls	r2, r3, #8
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	61da      	str	r2, [r3, #28]
      break;
 80083be:	e043      	b.n	8008448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68b9      	ldr	r1, [r7, #8]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 fe20 	bl	800900c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f042 0208 	orr.w	r2, r2, #8
 80083da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 0204 	bic.w	r2, r2, #4
 80083ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	691a      	ldr	r2, [r3, #16]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80083fe:	e023      	b.n	8008448 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68b9      	ldr	r1, [r7, #8]
 8008406:	4618      	mov	r0, r3
 8008408:	f000 fe6a 	bl	80090e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800841a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800842a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	021a      	lsls	r2, r3, #8
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008440:	e002      	b.n	8008448 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	75fb      	strb	r3, [r7, #23]
      break;
 8008446:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008450:	7dfb      	ldrb	r3, [r7, #23]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3718      	adds	r7, #24
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop

0800845c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008470:	2b01      	cmp	r3, #1
 8008472:	d101      	bne.n	8008478 <HAL_TIM_ConfigClockSource+0x1c>
 8008474:	2302      	movs	r3, #2
 8008476:	e0f6      	b.n	8008666 <HAL_TIM_ConfigClockSource+0x20a>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2202      	movs	r2, #2
 8008484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008496:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800849a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80084a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68ba      	ldr	r2, [r7, #8]
 80084aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a6f      	ldr	r2, [pc, #444]	@ (8008670 <HAL_TIM_ConfigClockSource+0x214>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	f000 80c1 	beq.w	800863a <HAL_TIM_ConfigClockSource+0x1de>
 80084b8:	4a6d      	ldr	r2, [pc, #436]	@ (8008670 <HAL_TIM_ConfigClockSource+0x214>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	f200 80c6 	bhi.w	800864c <HAL_TIM_ConfigClockSource+0x1f0>
 80084c0:	4a6c      	ldr	r2, [pc, #432]	@ (8008674 <HAL_TIM_ConfigClockSource+0x218>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	f000 80b9 	beq.w	800863a <HAL_TIM_ConfigClockSource+0x1de>
 80084c8:	4a6a      	ldr	r2, [pc, #424]	@ (8008674 <HAL_TIM_ConfigClockSource+0x218>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	f200 80be 	bhi.w	800864c <HAL_TIM_ConfigClockSource+0x1f0>
 80084d0:	4a69      	ldr	r2, [pc, #420]	@ (8008678 <HAL_TIM_ConfigClockSource+0x21c>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	f000 80b1 	beq.w	800863a <HAL_TIM_ConfigClockSource+0x1de>
 80084d8:	4a67      	ldr	r2, [pc, #412]	@ (8008678 <HAL_TIM_ConfigClockSource+0x21c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	f200 80b6 	bhi.w	800864c <HAL_TIM_ConfigClockSource+0x1f0>
 80084e0:	4a66      	ldr	r2, [pc, #408]	@ (800867c <HAL_TIM_ConfigClockSource+0x220>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	f000 80a9 	beq.w	800863a <HAL_TIM_ConfigClockSource+0x1de>
 80084e8:	4a64      	ldr	r2, [pc, #400]	@ (800867c <HAL_TIM_ConfigClockSource+0x220>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	f200 80ae 	bhi.w	800864c <HAL_TIM_ConfigClockSource+0x1f0>
 80084f0:	4a63      	ldr	r2, [pc, #396]	@ (8008680 <HAL_TIM_ConfigClockSource+0x224>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	f000 80a1 	beq.w	800863a <HAL_TIM_ConfigClockSource+0x1de>
 80084f8:	4a61      	ldr	r2, [pc, #388]	@ (8008680 <HAL_TIM_ConfigClockSource+0x224>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	f200 80a6 	bhi.w	800864c <HAL_TIM_ConfigClockSource+0x1f0>
 8008500:	4a60      	ldr	r2, [pc, #384]	@ (8008684 <HAL_TIM_ConfigClockSource+0x228>)
 8008502:	4293      	cmp	r3, r2
 8008504:	f000 8099 	beq.w	800863a <HAL_TIM_ConfigClockSource+0x1de>
 8008508:	4a5e      	ldr	r2, [pc, #376]	@ (8008684 <HAL_TIM_ConfigClockSource+0x228>)
 800850a:	4293      	cmp	r3, r2
 800850c:	f200 809e 	bhi.w	800864c <HAL_TIM_ConfigClockSource+0x1f0>
 8008510:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008514:	f000 8091 	beq.w	800863a <HAL_TIM_ConfigClockSource+0x1de>
 8008518:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800851c:	f200 8096 	bhi.w	800864c <HAL_TIM_ConfigClockSource+0x1f0>
 8008520:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008524:	f000 8089 	beq.w	800863a <HAL_TIM_ConfigClockSource+0x1de>
 8008528:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800852c:	f200 808e 	bhi.w	800864c <HAL_TIM_ConfigClockSource+0x1f0>
 8008530:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008534:	d03e      	beq.n	80085b4 <HAL_TIM_ConfigClockSource+0x158>
 8008536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800853a:	f200 8087 	bhi.w	800864c <HAL_TIM_ConfigClockSource+0x1f0>
 800853e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008542:	f000 8086 	beq.w	8008652 <HAL_TIM_ConfigClockSource+0x1f6>
 8008546:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800854a:	d87f      	bhi.n	800864c <HAL_TIM_ConfigClockSource+0x1f0>
 800854c:	2b70      	cmp	r3, #112	@ 0x70
 800854e:	d01a      	beq.n	8008586 <HAL_TIM_ConfigClockSource+0x12a>
 8008550:	2b70      	cmp	r3, #112	@ 0x70
 8008552:	d87b      	bhi.n	800864c <HAL_TIM_ConfigClockSource+0x1f0>
 8008554:	2b60      	cmp	r3, #96	@ 0x60
 8008556:	d050      	beq.n	80085fa <HAL_TIM_ConfigClockSource+0x19e>
 8008558:	2b60      	cmp	r3, #96	@ 0x60
 800855a:	d877      	bhi.n	800864c <HAL_TIM_ConfigClockSource+0x1f0>
 800855c:	2b50      	cmp	r3, #80	@ 0x50
 800855e:	d03c      	beq.n	80085da <HAL_TIM_ConfigClockSource+0x17e>
 8008560:	2b50      	cmp	r3, #80	@ 0x50
 8008562:	d873      	bhi.n	800864c <HAL_TIM_ConfigClockSource+0x1f0>
 8008564:	2b40      	cmp	r3, #64	@ 0x40
 8008566:	d058      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x1be>
 8008568:	2b40      	cmp	r3, #64	@ 0x40
 800856a:	d86f      	bhi.n	800864c <HAL_TIM_ConfigClockSource+0x1f0>
 800856c:	2b30      	cmp	r3, #48	@ 0x30
 800856e:	d064      	beq.n	800863a <HAL_TIM_ConfigClockSource+0x1de>
 8008570:	2b30      	cmp	r3, #48	@ 0x30
 8008572:	d86b      	bhi.n	800864c <HAL_TIM_ConfigClockSource+0x1f0>
 8008574:	2b20      	cmp	r3, #32
 8008576:	d060      	beq.n	800863a <HAL_TIM_ConfigClockSource+0x1de>
 8008578:	2b20      	cmp	r3, #32
 800857a:	d867      	bhi.n	800864c <HAL_TIM_ConfigClockSource+0x1f0>
 800857c:	2b00      	cmp	r3, #0
 800857e:	d05c      	beq.n	800863a <HAL_TIM_ConfigClockSource+0x1de>
 8008580:	2b10      	cmp	r3, #16
 8008582:	d05a      	beq.n	800863a <HAL_TIM_ConfigClockSource+0x1de>
 8008584:	e062      	b.n	800864c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008596:	f000 fe8b 	bl	80092b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80085a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	609a      	str	r2, [r3, #8]
      break;
 80085b2:	e04f      	b.n	8008654 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085c4:	f000 fe74 	bl	80092b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	689a      	ldr	r2, [r3, #8]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085d6:	609a      	str	r2, [r3, #8]
      break;
 80085d8:	e03c      	b.n	8008654 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085e6:	461a      	mov	r2, r3
 80085e8:	f000 fde6 	bl	80091b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2150      	movs	r1, #80	@ 0x50
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 fe3f 	bl	8009276 <TIM_ITRx_SetConfig>
      break;
 80085f8:	e02c      	b.n	8008654 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008606:	461a      	mov	r2, r3
 8008608:	f000 fe05 	bl	8009216 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2160      	movs	r1, #96	@ 0x60
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fe2f 	bl	8009276 <TIM_ITRx_SetConfig>
      break;
 8008618:	e01c      	b.n	8008654 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008626:	461a      	mov	r2, r3
 8008628:	f000 fdc6 	bl	80091b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2140      	movs	r1, #64	@ 0x40
 8008632:	4618      	mov	r0, r3
 8008634:	f000 fe1f 	bl	8009276 <TIM_ITRx_SetConfig>
      break;
 8008638:	e00c      	b.n	8008654 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4619      	mov	r1, r3
 8008644:	4610      	mov	r0, r2
 8008646:	f000 fe16 	bl	8009276 <TIM_ITRx_SetConfig>
      break;
 800864a:	e003      	b.n	8008654 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	73fb      	strb	r3, [r7, #15]
      break;
 8008650:	e000      	b.n	8008654 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008652:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008664:	7bfb      	ldrb	r3, [r7, #15]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3710      	adds	r7, #16
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	00100070 	.word	0x00100070
 8008674:	00100060 	.word	0x00100060
 8008678:	00100050 	.word	0x00100050
 800867c:	00100040 	.word	0x00100040
 8008680:	00100030 	.word	0x00100030
 8008684:	00100020 	.word	0x00100020

08008688 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800871c:	bf00      	nop
 800871e:	370c      	adds	r7, #12
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800873c:	b480      	push	{r7}
 800873e:	b087      	sub	sp, #28
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	460b      	mov	r3, r1
 8008746:	607a      	str	r2, [r7, #4]
 8008748:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d101      	bne.n	8008758 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e14a      	b.n	80089ee <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b01      	cmp	r3, #1
 8008762:	f040 80dd 	bne.w	8008920 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008766:	7afb      	ldrb	r3, [r7, #11]
 8008768:	2b1f      	cmp	r3, #31
 800876a:	f200 80d6 	bhi.w	800891a <HAL_TIM_RegisterCallback+0x1de>
 800876e:	a201      	add	r2, pc, #4	@ (adr r2, 8008774 <HAL_TIM_RegisterCallback+0x38>)
 8008770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008774:	080087f5 	.word	0x080087f5
 8008778:	080087fd 	.word	0x080087fd
 800877c:	08008805 	.word	0x08008805
 8008780:	0800880d 	.word	0x0800880d
 8008784:	08008815 	.word	0x08008815
 8008788:	0800881d 	.word	0x0800881d
 800878c:	08008825 	.word	0x08008825
 8008790:	0800882d 	.word	0x0800882d
 8008794:	08008835 	.word	0x08008835
 8008798:	0800883d 	.word	0x0800883d
 800879c:	08008845 	.word	0x08008845
 80087a0:	0800884d 	.word	0x0800884d
 80087a4:	08008855 	.word	0x08008855
 80087a8:	0800885d 	.word	0x0800885d
 80087ac:	08008867 	.word	0x08008867
 80087b0:	08008871 	.word	0x08008871
 80087b4:	0800887b 	.word	0x0800887b
 80087b8:	08008885 	.word	0x08008885
 80087bc:	0800888f 	.word	0x0800888f
 80087c0:	08008899 	.word	0x08008899
 80087c4:	080088a3 	.word	0x080088a3
 80087c8:	080088ad 	.word	0x080088ad
 80087cc:	080088b7 	.word	0x080088b7
 80087d0:	080088c1 	.word	0x080088c1
 80087d4:	080088cb 	.word	0x080088cb
 80087d8:	080088d5 	.word	0x080088d5
 80087dc:	080088df 	.word	0x080088df
 80087e0:	080088e9 	.word	0x080088e9
 80087e4:	080088f3 	.word	0x080088f3
 80087e8:	080088fd 	.word	0x080088fd
 80087ec:	08008907 	.word	0x08008907
 80087f0:	08008911 	.word	0x08008911
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80087fa:	e0f7      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008802:	e0f3      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800880a:	e0ef      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008812:	e0eb      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800881a:	e0e7      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008822:	e0e3      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	687a      	ldr	r2, [r7, #4]
 8008828:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800882a:	e0df      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008832:	e0db      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800883a:	e0d7      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	687a      	ldr	r2, [r7, #4]
 8008840:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008842:	e0d3      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800884a:	e0cf      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008852:	e0cb      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800885a:	e0c7      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008864:	e0c2      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800886e:	e0bd      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008878:	e0b8      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008882:	e0b3      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800888c:	e0ae      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008896:	e0a9      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80088a0:	e0a4      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80088aa:	e09f      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80088b4:	e09a      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80088be:	e095      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80088c8:	e090      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80088d2:	e08b      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80088dc:	e086      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80088e6:	e081      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80088f0:	e07c      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80088fa:	e077      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	687a      	ldr	r2, [r7, #4]
 8008900:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008904:	e072      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800890e:	e06d      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008918:	e068      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	75fb      	strb	r3, [r7, #23]
        break;
 800891e:	e065      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008926:	b2db      	uxtb	r3, r3
 8008928:	2b00      	cmp	r3, #0
 800892a:	d15d      	bne.n	80089e8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800892c:	7afb      	ldrb	r3, [r7, #11]
 800892e:	2b0d      	cmp	r3, #13
 8008930:	d857      	bhi.n	80089e2 <HAL_TIM_RegisterCallback+0x2a6>
 8008932:	a201      	add	r2, pc, #4	@ (adr r2, 8008938 <HAL_TIM_RegisterCallback+0x1fc>)
 8008934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008938:	08008971 	.word	0x08008971
 800893c:	08008979 	.word	0x08008979
 8008940:	08008981 	.word	0x08008981
 8008944:	08008989 	.word	0x08008989
 8008948:	08008991 	.word	0x08008991
 800894c:	08008999 	.word	0x08008999
 8008950:	080089a1 	.word	0x080089a1
 8008954:	080089a9 	.word	0x080089a9
 8008958:	080089b1 	.word	0x080089b1
 800895c:	080089b9 	.word	0x080089b9
 8008960:	080089c1 	.word	0x080089c1
 8008964:	080089c9 	.word	0x080089c9
 8008968:	080089d1 	.word	0x080089d1
 800896c:	080089d9 	.word	0x080089d9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008976:	e039      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800897e:	e035      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008986:	e031      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800898e:	e02d      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008996:	e029      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800899e:	e025      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80089a6:	e021      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80089ae:	e01d      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80089b6:	e019      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80089be:	e015      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80089c6:	e011      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80089ce:	e00d      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80089d6:	e009      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80089e0:	e004      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	75fb      	strb	r3, [r7, #23]
        break;
 80089e6:	e001      	b.n	80089ec <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	371c      	adds	r7, #28
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop

080089fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b085      	sub	sp, #20
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a4c      	ldr	r2, [pc, #304]	@ (8008b40 <TIM_Base_SetConfig+0x144>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d017      	beq.n	8008a44 <TIM_Base_SetConfig+0x48>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a1a:	d013      	beq.n	8008a44 <TIM_Base_SetConfig+0x48>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a49      	ldr	r2, [pc, #292]	@ (8008b44 <TIM_Base_SetConfig+0x148>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d00f      	beq.n	8008a44 <TIM_Base_SetConfig+0x48>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a48      	ldr	r2, [pc, #288]	@ (8008b48 <TIM_Base_SetConfig+0x14c>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d00b      	beq.n	8008a44 <TIM_Base_SetConfig+0x48>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a47      	ldr	r2, [pc, #284]	@ (8008b4c <TIM_Base_SetConfig+0x150>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d007      	beq.n	8008a44 <TIM_Base_SetConfig+0x48>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a46      	ldr	r2, [pc, #280]	@ (8008b50 <TIM_Base_SetConfig+0x154>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d003      	beq.n	8008a44 <TIM_Base_SetConfig+0x48>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a45      	ldr	r2, [pc, #276]	@ (8008b54 <TIM_Base_SetConfig+0x158>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d108      	bne.n	8008a56 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	68fa      	ldr	r2, [r7, #12]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a39      	ldr	r2, [pc, #228]	@ (8008b40 <TIM_Base_SetConfig+0x144>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d023      	beq.n	8008aa6 <TIM_Base_SetConfig+0xaa>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a64:	d01f      	beq.n	8008aa6 <TIM_Base_SetConfig+0xaa>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a36      	ldr	r2, [pc, #216]	@ (8008b44 <TIM_Base_SetConfig+0x148>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d01b      	beq.n	8008aa6 <TIM_Base_SetConfig+0xaa>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a35      	ldr	r2, [pc, #212]	@ (8008b48 <TIM_Base_SetConfig+0x14c>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d017      	beq.n	8008aa6 <TIM_Base_SetConfig+0xaa>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a34      	ldr	r2, [pc, #208]	@ (8008b4c <TIM_Base_SetConfig+0x150>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d013      	beq.n	8008aa6 <TIM_Base_SetConfig+0xaa>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a33      	ldr	r2, [pc, #204]	@ (8008b50 <TIM_Base_SetConfig+0x154>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d00f      	beq.n	8008aa6 <TIM_Base_SetConfig+0xaa>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a33      	ldr	r2, [pc, #204]	@ (8008b58 <TIM_Base_SetConfig+0x15c>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d00b      	beq.n	8008aa6 <TIM_Base_SetConfig+0xaa>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a32      	ldr	r2, [pc, #200]	@ (8008b5c <TIM_Base_SetConfig+0x160>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d007      	beq.n	8008aa6 <TIM_Base_SetConfig+0xaa>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a31      	ldr	r2, [pc, #196]	@ (8008b60 <TIM_Base_SetConfig+0x164>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d003      	beq.n	8008aa6 <TIM_Base_SetConfig+0xaa>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8008b54 <TIM_Base_SetConfig+0x158>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d108      	bne.n	8008ab8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	689a      	ldr	r2, [r3, #8]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a18      	ldr	r2, [pc, #96]	@ (8008b40 <TIM_Base_SetConfig+0x144>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d013      	beq.n	8008b0c <TIM_Base_SetConfig+0x110>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a1a      	ldr	r2, [pc, #104]	@ (8008b50 <TIM_Base_SetConfig+0x154>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d00f      	beq.n	8008b0c <TIM_Base_SetConfig+0x110>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a1a      	ldr	r2, [pc, #104]	@ (8008b58 <TIM_Base_SetConfig+0x15c>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d00b      	beq.n	8008b0c <TIM_Base_SetConfig+0x110>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4a19      	ldr	r2, [pc, #100]	@ (8008b5c <TIM_Base_SetConfig+0x160>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d007      	beq.n	8008b0c <TIM_Base_SetConfig+0x110>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4a18      	ldr	r2, [pc, #96]	@ (8008b60 <TIM_Base_SetConfig+0x164>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d003      	beq.n	8008b0c <TIM_Base_SetConfig+0x110>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	4a13      	ldr	r2, [pc, #76]	@ (8008b54 <TIM_Base_SetConfig+0x158>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d103      	bne.n	8008b14 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	691a      	ldr	r2, [r3, #16]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	d105      	bne.n	8008b32 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	f023 0201 	bic.w	r2, r3, #1
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	611a      	str	r2, [r3, #16]
  }
}
 8008b32:	bf00      	nop
 8008b34:	3714      	adds	r7, #20
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	40012c00 	.word	0x40012c00
 8008b44:	40000400 	.word	0x40000400
 8008b48:	40000800 	.word	0x40000800
 8008b4c:	40000c00 	.word	0x40000c00
 8008b50:	40013400 	.word	0x40013400
 8008b54:	40015000 	.word	0x40015000
 8008b58:	40014000 	.word	0x40014000
 8008b5c:	40014400 	.word	0x40014400
 8008b60:	40014800 	.word	0x40014800

08008b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b087      	sub	sp, #28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6a1b      	ldr	r3, [r3, #32]
 8008b78:	f023 0201 	bic.w	r2, r3, #1
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f023 0303 	bic.w	r3, r3, #3
 8008b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f023 0302 	bic.w	r3, r3, #2
 8008bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	697a      	ldr	r2, [r7, #20]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a30      	ldr	r2, [pc, #192]	@ (8008c80 <TIM_OC1_SetConfig+0x11c>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d013      	beq.n	8008bec <TIM_OC1_SetConfig+0x88>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a2f      	ldr	r2, [pc, #188]	@ (8008c84 <TIM_OC1_SetConfig+0x120>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d00f      	beq.n	8008bec <TIM_OC1_SetConfig+0x88>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a2e      	ldr	r2, [pc, #184]	@ (8008c88 <TIM_OC1_SetConfig+0x124>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d00b      	beq.n	8008bec <TIM_OC1_SetConfig+0x88>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8008c8c <TIM_OC1_SetConfig+0x128>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d007      	beq.n	8008bec <TIM_OC1_SetConfig+0x88>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a2c      	ldr	r2, [pc, #176]	@ (8008c90 <TIM_OC1_SetConfig+0x12c>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d003      	beq.n	8008bec <TIM_OC1_SetConfig+0x88>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a2b      	ldr	r2, [pc, #172]	@ (8008c94 <TIM_OC1_SetConfig+0x130>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d10c      	bne.n	8008c06 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	f023 0308 	bic.w	r3, r3, #8
 8008bf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f023 0304 	bic.w	r3, r3, #4
 8008c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a1d      	ldr	r2, [pc, #116]	@ (8008c80 <TIM_OC1_SetConfig+0x11c>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d013      	beq.n	8008c36 <TIM_OC1_SetConfig+0xd2>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a1c      	ldr	r2, [pc, #112]	@ (8008c84 <TIM_OC1_SetConfig+0x120>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d00f      	beq.n	8008c36 <TIM_OC1_SetConfig+0xd2>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a1b      	ldr	r2, [pc, #108]	@ (8008c88 <TIM_OC1_SetConfig+0x124>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d00b      	beq.n	8008c36 <TIM_OC1_SetConfig+0xd2>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a1a      	ldr	r2, [pc, #104]	@ (8008c8c <TIM_OC1_SetConfig+0x128>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d007      	beq.n	8008c36 <TIM_OC1_SetConfig+0xd2>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a19      	ldr	r2, [pc, #100]	@ (8008c90 <TIM_OC1_SetConfig+0x12c>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d003      	beq.n	8008c36 <TIM_OC1_SetConfig+0xd2>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a18      	ldr	r2, [pc, #96]	@ (8008c94 <TIM_OC1_SetConfig+0x130>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d111      	bne.n	8008c5a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	685a      	ldr	r2, [r3, #4]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	621a      	str	r2, [r3, #32]
}
 8008c74:	bf00      	nop
 8008c76:	371c      	adds	r7, #28
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	40012c00 	.word	0x40012c00
 8008c84:	40013400 	.word	0x40013400
 8008c88:	40014000 	.word	0x40014000
 8008c8c:	40014400 	.word	0x40014400
 8008c90:	40014800 	.word	0x40014800
 8008c94:	40015000 	.word	0x40015000

08008c98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a1b      	ldr	r3, [r3, #32]
 8008cac:	f023 0210 	bic.w	r2, r3, #16
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	021b      	lsls	r3, r3, #8
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	f023 0320 	bic.w	r3, r3, #32
 8008ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	011b      	lsls	r3, r3, #4
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a2c      	ldr	r2, [pc, #176]	@ (8008da8 <TIM_OC2_SetConfig+0x110>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d007      	beq.n	8008d0c <TIM_OC2_SetConfig+0x74>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a2b      	ldr	r2, [pc, #172]	@ (8008dac <TIM_OC2_SetConfig+0x114>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d003      	beq.n	8008d0c <TIM_OC2_SetConfig+0x74>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a2a      	ldr	r2, [pc, #168]	@ (8008db0 <TIM_OC2_SetConfig+0x118>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d10d      	bne.n	8008d28 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	011b      	lsls	r3, r3, #4
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8008da8 <TIM_OC2_SetConfig+0x110>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d013      	beq.n	8008d58 <TIM_OC2_SetConfig+0xc0>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a1e      	ldr	r2, [pc, #120]	@ (8008dac <TIM_OC2_SetConfig+0x114>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d00f      	beq.n	8008d58 <TIM_OC2_SetConfig+0xc0>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8008db4 <TIM_OC2_SetConfig+0x11c>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d00b      	beq.n	8008d58 <TIM_OC2_SetConfig+0xc0>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a1d      	ldr	r2, [pc, #116]	@ (8008db8 <TIM_OC2_SetConfig+0x120>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d007      	beq.n	8008d58 <TIM_OC2_SetConfig+0xc0>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	4a1c      	ldr	r2, [pc, #112]	@ (8008dbc <TIM_OC2_SetConfig+0x124>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d003      	beq.n	8008d58 <TIM_OC2_SetConfig+0xc0>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a17      	ldr	r2, [pc, #92]	@ (8008db0 <TIM_OC2_SetConfig+0x118>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d113      	bne.n	8008d80 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d58:	693b      	ldr	r3, [r7, #16]
 8008d5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	4313      	orrs	r3, r2
 8008d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	693a      	ldr	r2, [r7, #16]
 8008d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	621a      	str	r2, [r3, #32]
}
 8008d9a:	bf00      	nop
 8008d9c:	371c      	adds	r7, #28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	40012c00 	.word	0x40012c00
 8008dac:	40013400 	.word	0x40013400
 8008db0:	40015000 	.word	0x40015000
 8008db4:	40014000 	.word	0x40014000
 8008db8:	40014400 	.word	0x40014400
 8008dbc:	40014800 	.word	0x40014800

08008dc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b087      	sub	sp, #28
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a1b      	ldr	r3, [r3, #32]
 8008dd4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	69db      	ldr	r3, [r3, #28]
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f023 0303 	bic.w	r3, r3, #3
 8008dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68fa      	ldr	r2, [r7, #12]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	021b      	lsls	r3, r3, #8
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8008ecc <TIM_OC3_SetConfig+0x10c>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d007      	beq.n	8008e32 <TIM_OC3_SetConfig+0x72>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a2a      	ldr	r2, [pc, #168]	@ (8008ed0 <TIM_OC3_SetConfig+0x110>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d003      	beq.n	8008e32 <TIM_OC3_SetConfig+0x72>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a29      	ldr	r2, [pc, #164]	@ (8008ed4 <TIM_OC3_SetConfig+0x114>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d10d      	bne.n	8008e4e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	021b      	lsls	r3, r3, #8
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a1e      	ldr	r2, [pc, #120]	@ (8008ecc <TIM_OC3_SetConfig+0x10c>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d013      	beq.n	8008e7e <TIM_OC3_SetConfig+0xbe>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a1d      	ldr	r2, [pc, #116]	@ (8008ed0 <TIM_OC3_SetConfig+0x110>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d00f      	beq.n	8008e7e <TIM_OC3_SetConfig+0xbe>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a1d      	ldr	r2, [pc, #116]	@ (8008ed8 <TIM_OC3_SetConfig+0x118>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d00b      	beq.n	8008e7e <TIM_OC3_SetConfig+0xbe>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a1c      	ldr	r2, [pc, #112]	@ (8008edc <TIM_OC3_SetConfig+0x11c>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d007      	beq.n	8008e7e <TIM_OC3_SetConfig+0xbe>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a1b      	ldr	r2, [pc, #108]	@ (8008ee0 <TIM_OC3_SetConfig+0x120>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d003      	beq.n	8008e7e <TIM_OC3_SetConfig+0xbe>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a16      	ldr	r2, [pc, #88]	@ (8008ed4 <TIM_OC3_SetConfig+0x114>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d113      	bne.n	8008ea6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	695b      	ldr	r3, [r3, #20]
 8008e92:	011b      	lsls	r3, r3, #4
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	699b      	ldr	r3, [r3, #24]
 8008e9e:	011b      	lsls	r3, r3, #4
 8008ea0:	693a      	ldr	r2, [r7, #16]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	685a      	ldr	r2, [r3, #4]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	697a      	ldr	r2, [r7, #20]
 8008ebe:	621a      	str	r2, [r3, #32]
}
 8008ec0:	bf00      	nop
 8008ec2:	371c      	adds	r7, #28
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr
 8008ecc:	40012c00 	.word	0x40012c00
 8008ed0:	40013400 	.word	0x40013400
 8008ed4:	40015000 	.word	0x40015000
 8008ed8:	40014000 	.word	0x40014000
 8008edc:	40014400 	.word	0x40014400
 8008ee0:	40014800 	.word	0x40014800

08008ee4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a1b      	ldr	r3, [r3, #32]
 8008ef8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	69db      	ldr	r3, [r3, #28]
 8008f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	021b      	lsls	r3, r3, #8
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	031b      	lsls	r3, r3, #12
 8008f3a:	697a      	ldr	r2, [r7, #20]
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a2c      	ldr	r2, [pc, #176]	@ (8008ff4 <TIM_OC4_SetConfig+0x110>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d007      	beq.n	8008f58 <TIM_OC4_SetConfig+0x74>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a2b      	ldr	r2, [pc, #172]	@ (8008ff8 <TIM_OC4_SetConfig+0x114>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d003      	beq.n	8008f58 <TIM_OC4_SetConfig+0x74>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a2a      	ldr	r2, [pc, #168]	@ (8008ffc <TIM_OC4_SetConfig+0x118>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d10d      	bne.n	8008f74 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	031b      	lsls	r3, r3, #12
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a1f      	ldr	r2, [pc, #124]	@ (8008ff4 <TIM_OC4_SetConfig+0x110>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d013      	beq.n	8008fa4 <TIM_OC4_SetConfig+0xc0>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ff8 <TIM_OC4_SetConfig+0x114>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d00f      	beq.n	8008fa4 <TIM_OC4_SetConfig+0xc0>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a1e      	ldr	r2, [pc, #120]	@ (8009000 <TIM_OC4_SetConfig+0x11c>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d00b      	beq.n	8008fa4 <TIM_OC4_SetConfig+0xc0>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8009004 <TIM_OC4_SetConfig+0x120>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d007      	beq.n	8008fa4 <TIM_OC4_SetConfig+0xc0>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a1c      	ldr	r2, [pc, #112]	@ (8009008 <TIM_OC4_SetConfig+0x124>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d003      	beq.n	8008fa4 <TIM_OC4_SetConfig+0xc0>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a17      	ldr	r2, [pc, #92]	@ (8008ffc <TIM_OC4_SetConfig+0x118>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d113      	bne.n	8008fcc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008faa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008fb2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	019b      	lsls	r3, r3, #6
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	699b      	ldr	r3, [r3, #24]
 8008fc4:	019b      	lsls	r3, r3, #6
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	621a      	str	r2, [r3, #32]
}
 8008fe6:	bf00      	nop
 8008fe8:	371c      	adds	r7, #28
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	40012c00 	.word	0x40012c00
 8008ff8:	40013400 	.word	0x40013400
 8008ffc:	40015000 	.word	0x40015000
 8009000:	40014000 	.word	0x40014000
 8009004:	40014400 	.word	0x40014400
 8009008:	40014800 	.word	0x40014800

0800900c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800900c:	b480      	push	{r7}
 800900e:	b087      	sub	sp, #28
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6a1b      	ldr	r3, [r3, #32]
 800901a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800903a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800903e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	4313      	orrs	r3, r2
 8009048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009050:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	041b      	lsls	r3, r3, #16
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	4313      	orrs	r3, r2
 800905c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a19      	ldr	r2, [pc, #100]	@ (80090c8 <TIM_OC5_SetConfig+0xbc>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d013      	beq.n	800908e <TIM_OC5_SetConfig+0x82>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	4a18      	ldr	r2, [pc, #96]	@ (80090cc <TIM_OC5_SetConfig+0xc0>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d00f      	beq.n	800908e <TIM_OC5_SetConfig+0x82>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a17      	ldr	r2, [pc, #92]	@ (80090d0 <TIM_OC5_SetConfig+0xc4>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d00b      	beq.n	800908e <TIM_OC5_SetConfig+0x82>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a16      	ldr	r2, [pc, #88]	@ (80090d4 <TIM_OC5_SetConfig+0xc8>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d007      	beq.n	800908e <TIM_OC5_SetConfig+0x82>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a15      	ldr	r2, [pc, #84]	@ (80090d8 <TIM_OC5_SetConfig+0xcc>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d003      	beq.n	800908e <TIM_OC5_SetConfig+0x82>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a14      	ldr	r2, [pc, #80]	@ (80090dc <TIM_OC5_SetConfig+0xd0>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d109      	bne.n	80090a2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009094:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	695b      	ldr	r3, [r3, #20]
 800909a:	021b      	lsls	r3, r3, #8
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	4313      	orrs	r3, r2
 80090a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	693a      	ldr	r2, [r7, #16]
 80090ba:	621a      	str	r2, [r3, #32]
}
 80090bc:	bf00      	nop
 80090be:	371c      	adds	r7, #28
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr
 80090c8:	40012c00 	.word	0x40012c00
 80090cc:	40013400 	.word	0x40013400
 80090d0:	40014000 	.word	0x40014000
 80090d4:	40014400 	.word	0x40014400
 80090d8:	40014800 	.word	0x40014800
 80090dc:	40015000 	.word	0x40015000

080090e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b087      	sub	sp, #28
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6a1b      	ldr	r3, [r3, #32]
 80090ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a1b      	ldr	r3, [r3, #32]
 80090f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800910e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	021b      	lsls	r3, r3, #8
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	4313      	orrs	r3, r2
 800911e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	051b      	lsls	r3, r3, #20
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	4313      	orrs	r3, r2
 8009132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a1a      	ldr	r2, [pc, #104]	@ (80091a0 <TIM_OC6_SetConfig+0xc0>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d013      	beq.n	8009164 <TIM_OC6_SetConfig+0x84>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a19      	ldr	r2, [pc, #100]	@ (80091a4 <TIM_OC6_SetConfig+0xc4>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d00f      	beq.n	8009164 <TIM_OC6_SetConfig+0x84>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a18      	ldr	r2, [pc, #96]	@ (80091a8 <TIM_OC6_SetConfig+0xc8>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d00b      	beq.n	8009164 <TIM_OC6_SetConfig+0x84>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a17      	ldr	r2, [pc, #92]	@ (80091ac <TIM_OC6_SetConfig+0xcc>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d007      	beq.n	8009164 <TIM_OC6_SetConfig+0x84>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a16      	ldr	r2, [pc, #88]	@ (80091b0 <TIM_OC6_SetConfig+0xd0>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d003      	beq.n	8009164 <TIM_OC6_SetConfig+0x84>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4a15      	ldr	r2, [pc, #84]	@ (80091b4 <TIM_OC6_SetConfig+0xd4>)
 8009160:	4293      	cmp	r3, r2
 8009162:	d109      	bne.n	8009178 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800916a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	695b      	ldr	r3, [r3, #20]
 8009170:	029b      	lsls	r3, r3, #10
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	4313      	orrs	r3, r2
 8009176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	697a      	ldr	r2, [r7, #20]
 800917c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	693a      	ldr	r2, [r7, #16]
 8009190:	621a      	str	r2, [r3, #32]
}
 8009192:	bf00      	nop
 8009194:	371c      	adds	r7, #28
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	40012c00 	.word	0x40012c00
 80091a4:	40013400 	.word	0x40013400
 80091a8:	40014000 	.word	0x40014000
 80091ac:	40014400 	.word	0x40014400
 80091b0:	40014800 	.word	0x40014800
 80091b4:	40015000 	.word	0x40015000

080091b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b087      	sub	sp, #28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6a1b      	ldr	r3, [r3, #32]
 80091c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6a1b      	ldr	r3, [r3, #32]
 80091ce:	f023 0201 	bic.w	r2, r3, #1
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	011b      	lsls	r3, r3, #4
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	f023 030a 	bic.w	r3, r3, #10
 80091f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091f6:	697a      	ldr	r2, [r7, #20]
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	621a      	str	r2, [r3, #32]
}
 800920a:	bf00      	nop
 800920c:	371c      	adds	r7, #28
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009216:	b480      	push	{r7}
 8009218:	b087      	sub	sp, #28
 800921a:	af00      	add	r7, sp, #0
 800921c:	60f8      	str	r0, [r7, #12]
 800921e:	60b9      	str	r1, [r7, #8]
 8009220:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6a1b      	ldr	r3, [r3, #32]
 8009226:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6a1b      	ldr	r3, [r3, #32]
 800922c:	f023 0210 	bic.w	r2, r3, #16
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009240:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	031b      	lsls	r3, r3, #12
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	4313      	orrs	r3, r2
 800924a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009252:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	011b      	lsls	r3, r3, #4
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	4313      	orrs	r3, r2
 800925c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	693a      	ldr	r2, [r7, #16]
 8009262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	621a      	str	r2, [r3, #32]
}
 800926a:	bf00      	nop
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009276:	b480      	push	{r7}
 8009278:	b085      	sub	sp, #20
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800928c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009292:	683a      	ldr	r2, [r7, #0]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4313      	orrs	r3, r2
 8009298:	f043 0307 	orr.w	r3, r3, #7
 800929c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	609a      	str	r2, [r3, #8]
}
 80092a4:	bf00      	nop
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b087      	sub	sp, #28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
 80092bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80092ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	021a      	lsls	r2, r3, #8
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	431a      	orrs	r2, r3
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	4313      	orrs	r3, r2
 80092d8:	697a      	ldr	r2, [r7, #20]
 80092da:	4313      	orrs	r3, r2
 80092dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	609a      	str	r2, [r3, #8]
}
 80092e4:	bf00      	nop
 80092e6:	371c      	adds	r7, #28
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b087      	sub	sp, #28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	f003 031f 	and.w	r3, r3, #31
 8009302:	2201      	movs	r2, #1
 8009304:	fa02 f303 	lsl.w	r3, r2, r3
 8009308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6a1a      	ldr	r2, [r3, #32]
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	43db      	mvns	r3, r3
 8009312:	401a      	ands	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6a1a      	ldr	r2, [r3, #32]
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	f003 031f 	and.w	r3, r3, #31
 8009322:	6879      	ldr	r1, [r7, #4]
 8009324:	fa01 f303 	lsl.w	r3, r1, r3
 8009328:	431a      	orrs	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	621a      	str	r2, [r3, #32]
}
 800932e:	bf00      	nop
 8009330:	371c      	adds	r7, #28
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
	...

0800933c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a26      	ldr	r2, [pc, #152]	@ (80093e0 <TIM_ResetCallback+0xa4>)
 8009348:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a25      	ldr	r2, [pc, #148]	@ (80093e4 <TIM_ResetCallback+0xa8>)
 8009350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a24      	ldr	r2, [pc, #144]	@ (80093e8 <TIM_ResetCallback+0xac>)
 8009358:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a23      	ldr	r2, [pc, #140]	@ (80093ec <TIM_ResetCallback+0xb0>)
 8009360:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a22      	ldr	r2, [pc, #136]	@ (80093f0 <TIM_ResetCallback+0xb4>)
 8009368:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a21      	ldr	r2, [pc, #132]	@ (80093f4 <TIM_ResetCallback+0xb8>)
 8009370:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a20      	ldr	r2, [pc, #128]	@ (80093f8 <TIM_ResetCallback+0xbc>)
 8009378:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a1f      	ldr	r2, [pc, #124]	@ (80093fc <TIM_ResetCallback+0xc0>)
 8009380:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a1e      	ldr	r2, [pc, #120]	@ (8009400 <TIM_ResetCallback+0xc4>)
 8009388:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a1d      	ldr	r2, [pc, #116]	@ (8009404 <TIM_ResetCallback+0xc8>)
 8009390:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	4a1c      	ldr	r2, [pc, #112]	@ (8009408 <TIM_ResetCallback+0xcc>)
 8009398:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a1b      	ldr	r2, [pc, #108]	@ (800940c <TIM_ResetCallback+0xd0>)
 80093a0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	4a1a      	ldr	r2, [pc, #104]	@ (8009410 <TIM_ResetCallback+0xd4>)
 80093a8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	4a19      	ldr	r2, [pc, #100]	@ (8009414 <TIM_ResetCallback+0xd8>)
 80093b0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a18      	ldr	r2, [pc, #96]	@ (8009418 <TIM_ResetCallback+0xdc>)
 80093b8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a17      	ldr	r2, [pc, #92]	@ (800941c <TIM_ResetCallback+0xe0>)
 80093c0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a16      	ldr	r2, [pc, #88]	@ (8009420 <TIM_ResetCallback+0xe4>)
 80093c8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a15      	ldr	r2, [pc, #84]	@ (8009424 <TIM_ResetCallback+0xe8>)
 80093d0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr
 80093e0:	08002911 	.word	0x08002911
 80093e4:	08008689 	.word	0x08008689
 80093e8:	08008701 	.word	0x08008701
 80093ec:	08008715 	.word	0x08008715
 80093f0:	080086b1 	.word	0x080086b1
 80093f4:	080086c5 	.word	0x080086c5
 80093f8:	0800869d 	.word	0x0800869d
 80093fc:	080086d9 	.word	0x080086d9
 8009400:	080086ed 	.word	0x080086ed
 8009404:	08008729 	.word	0x08008729
 8009408:	0800967d 	.word	0x0800967d
 800940c:	08009691 	.word	0x08009691
 8009410:	080096a5 	.word	0x080096a5
 8009414:	080096b9 	.word	0x080096b9
 8009418:	080096cd 	.word	0x080096cd
 800941c:	080096e1 	.word	0x080096e1
 8009420:	080096f5 	.word	0x080096f5
 8009424:	08009709 	.word	0x08009709

08009428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009438:	2b01      	cmp	r3, #1
 800943a:	d101      	bne.n	8009440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800943c:	2302      	movs	r3, #2
 800943e:	e074      	b.n	800952a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2202      	movs	r2, #2
 800944c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a34      	ldr	r2, [pc, #208]	@ (8009538 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d009      	beq.n	800947e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a33      	ldr	r2, [pc, #204]	@ (800953c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d004      	beq.n	800947e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a31      	ldr	r2, [pc, #196]	@ (8009540 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d108      	bne.n	8009490 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009484:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	4313      	orrs	r3, r2
 800948e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009496:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800949a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	4313      	orrs	r3, r2
 80094a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a21      	ldr	r2, [pc, #132]	@ (8009538 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d022      	beq.n	80094fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094c0:	d01d      	beq.n	80094fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a1f      	ldr	r2, [pc, #124]	@ (8009544 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d018      	beq.n	80094fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009548 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d013      	beq.n	80094fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a1c      	ldr	r2, [pc, #112]	@ (800954c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d00e      	beq.n	80094fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a15      	ldr	r2, [pc, #84]	@ (800953c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d009      	beq.n	80094fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a18      	ldr	r2, [pc, #96]	@ (8009550 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d004      	beq.n	80094fe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a11      	ldr	r2, [pc, #68]	@ (8009540 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d10c      	bne.n	8009518 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009504:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	68ba      	ldr	r2, [r7, #8]
 800950c:	4313      	orrs	r3, r2
 800950e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68ba      	ldr	r2, [r7, #8]
 8009516:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009528:	2300      	movs	r3, #0
}
 800952a:	4618      	mov	r0, r3
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	40012c00 	.word	0x40012c00
 800953c:	40013400 	.word	0x40013400
 8009540:	40015000 	.word	0x40015000
 8009544:	40000400 	.word	0x40000400
 8009548:	40000800 	.word	0x40000800
 800954c:	40000c00 	.word	0x40000c00
 8009550:	40014000 	.word	0x40014000

08009554 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800955e:	2300      	movs	r3, #0
 8009560:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009568:	2b01      	cmp	r3, #1
 800956a:	d101      	bne.n	8009570 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800956c:	2302      	movs	r3, #2
 800956e:	e078      	b.n	8009662 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2201      	movs	r2, #1
 8009574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	4313      	orrs	r3, r2
 8009584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	4313      	orrs	r3, r2
 8009592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	4313      	orrs	r3, r2
 80095a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4313      	orrs	r3, r2
 80095ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	695b      	ldr	r3, [r3, #20]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d6:	4313      	orrs	r3, r2
 80095d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	041b      	lsls	r3, r3, #16
 80095e6:	4313      	orrs	r3, r2
 80095e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a1c      	ldr	r2, [pc, #112]	@ (8009670 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d009      	beq.n	8009616 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a1b      	ldr	r2, [pc, #108]	@ (8009674 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d004      	beq.n	8009616 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a19      	ldr	r2, [pc, #100]	@ (8009678 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d11c      	bne.n	8009650 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009620:	051b      	lsls	r3, r3, #20
 8009622:	4313      	orrs	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	6a1b      	ldr	r3, [r3, #32]
 8009630:	4313      	orrs	r3, r2
 8009632:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800963e:	4313      	orrs	r3, r2
 8009640:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800964c:	4313      	orrs	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3714      	adds	r7, #20
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	40012c00 	.word	0x40012c00
 8009674:	40013400 	.word	0x40013400
 8009678:	40015000 	.word	0x40015000

0800967c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009698:	bf00      	nop
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80096c0:	bf00      	nop
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d101      	bne.n	800972e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
 800972c:	e050      	b.n	80097d0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009734:	2b00      	cmp	r3, #0
 8009736:	d114      	bne.n	8009762 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 fddb 	bl	800a2fc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800974c:	2b00      	cmp	r3, #0
 800974e:	d103      	bne.n	8009758 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a21      	ldr	r2, [pc, #132]	@ (80097d8 <HAL_UART_Init+0xbc>)
 8009754:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2224      	movs	r2, #36	@ 0x24
 8009766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f022 0201 	bic.w	r2, r2, #1
 8009778:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800977e:	2b00      	cmp	r3, #0
 8009780:	d002      	beq.n	8009788 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f001 f908 	bl	800a998 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 fe09 	bl	800a3a0 <UART_SetConfig>
 800978e:	4603      	mov	r3, r0
 8009790:	2b01      	cmp	r3, #1
 8009792:	d101      	bne.n	8009798 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e01b      	b.n	80097d0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	685a      	ldr	r2, [r3, #4]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80097a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	689a      	ldr	r2, [r3, #8]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80097b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f042 0201 	orr.w	r2, r2, #1
 80097c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f001 f987 	bl	800aadc <UART_CheckIdleState>
 80097ce:	4603      	mov	r3, r0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	08003d39 	.word	0x08003d39

080097dc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80097dc:	b480      	push	{r7}
 80097de:	b087      	sub	sp, #28
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	460b      	mov	r3, r1
 80097e6:	607a      	str	r2, [r7, #4]
 80097e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d109      	bne.n	8009808 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e09c      	b.n	8009942 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800980e:	2b20      	cmp	r3, #32
 8009810:	d16c      	bne.n	80098ec <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009812:	7afb      	ldrb	r3, [r7, #11]
 8009814:	2b0c      	cmp	r3, #12
 8009816:	d85e      	bhi.n	80098d6 <HAL_UART_RegisterCallback+0xfa>
 8009818:	a201      	add	r2, pc, #4	@ (adr r2, 8009820 <HAL_UART_RegisterCallback+0x44>)
 800981a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981e:	bf00      	nop
 8009820:	08009855 	.word	0x08009855
 8009824:	0800985f 	.word	0x0800985f
 8009828:	08009869 	.word	0x08009869
 800982c:	08009873 	.word	0x08009873
 8009830:	0800987d 	.word	0x0800987d
 8009834:	08009887 	.word	0x08009887
 8009838:	08009891 	.word	0x08009891
 800983c:	0800989b 	.word	0x0800989b
 8009840:	080098a5 	.word	0x080098a5
 8009844:	080098af 	.word	0x080098af
 8009848:	080098b9 	.word	0x080098b9
 800984c:	080098c3 	.word	0x080098c3
 8009850:	080098cd 	.word	0x080098cd
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800985c:	e070      	b.n	8009940 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009866:	e06b      	b.n	8009940 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009870:	e066      	b.n	8009940 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800987a:	e061      	b.n	8009940 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009884:	e05c      	b.n	8009940 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800988e:	e057      	b.n	8009940 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009898:	e052      	b.n	8009940 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80098a2:	e04d      	b.n	8009940 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80098ac:	e048      	b.n	8009940 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80098b6:	e043      	b.n	8009940 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80098c0:	e03e      	b.n	8009940 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80098ca:	e039      	b.n	8009940 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80098d4:	e034      	b.n	8009940 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	75fb      	strb	r3, [r7, #23]
        break;
 80098ea:	e029      	b.n	8009940 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d11a      	bne.n	800992c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80098f6:	7afb      	ldrb	r3, [r7, #11]
 80098f8:	2b0b      	cmp	r3, #11
 80098fa:	d002      	beq.n	8009902 <HAL_UART_RegisterCallback+0x126>
 80098fc:	2b0c      	cmp	r3, #12
 80098fe:	d005      	beq.n	800990c <HAL_UART_RegisterCallback+0x130>
 8009900:	e009      	b.n	8009916 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800990a:	e019      	b.n	8009940 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009914:	e014      	b.n	8009940 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800991c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	75fb      	strb	r3, [r7, #23]
        break;
 800992a:	e009      	b.n	8009940 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009932:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009940:	7dfb      	ldrb	r3, [r7, #23]
}
 8009942:	4618      	mov	r0, r3
 8009944:	371c      	adds	r7, #28
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop

08009950 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b08a      	sub	sp, #40	@ 0x28
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	4613      	mov	r3, r2
 800995c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009964:	2b20      	cmp	r3, #32
 8009966:	d167      	bne.n	8009a38 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <HAL_UART_Transmit_DMA+0x24>
 800996e:	88fb      	ldrh	r3, [r7, #6]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d101      	bne.n	8009978 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e060      	b.n	8009a3a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	88fa      	ldrh	r2, [r7, #6]
 8009982:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	88fa      	ldrh	r2, [r7, #6]
 800998a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2221      	movs	r2, #33	@ 0x21
 800999a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d028      	beq.n	80099f8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099aa:	4a26      	ldr	r2, [pc, #152]	@ (8009a44 <HAL_UART_Transmit_DMA+0xf4>)
 80099ac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099b2:	4a25      	ldr	r2, [pc, #148]	@ (8009a48 <HAL_UART_Transmit_DMA+0xf8>)
 80099b4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099ba:	4a24      	ldr	r2, [pc, #144]	@ (8009a4c <HAL_UART_Transmit_DMA+0xfc>)
 80099bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099c2:	2200      	movs	r2, #0
 80099c4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099ce:	4619      	mov	r1, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	3328      	adds	r3, #40	@ 0x28
 80099d6:	461a      	mov	r2, r3
 80099d8:	88fb      	ldrh	r3, [r7, #6]
 80099da:	f7fc f933 	bl	8005c44 <HAL_DMA_Start_IT>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d009      	beq.n	80099f8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2210      	movs	r2, #16
 80099e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2220      	movs	r2, #32
 80099f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e020      	b.n	8009a3a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2240      	movs	r2, #64	@ 0x40
 80099fe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3308      	adds	r3, #8
 8009a06:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	e853 3f00 	ldrex	r3, [r3]
 8009a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3308      	adds	r3, #8
 8009a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a20:	623a      	str	r2, [r7, #32]
 8009a22:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a24:	69f9      	ldr	r1, [r7, #28]
 8009a26:	6a3a      	ldr	r2, [r7, #32]
 8009a28:	e841 2300 	strex	r3, r2, [r1]
 8009a2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d1e5      	bne.n	8009a00 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8009a34:	2300      	movs	r3, #0
 8009a36:	e000      	b.n	8009a3a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009a38:	2302      	movs	r3, #2
  }
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3728      	adds	r7, #40	@ 0x28
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	0800afa7 	.word	0x0800afa7
 8009a48:	0800b045 	.word	0x0800b045
 8009a4c:	0800b1df 	.word	0x0800b1df

08009a50 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b08a      	sub	sp, #40	@ 0x28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a64:	2b20      	cmp	r3, #32
 8009a66:	d137      	bne.n	8009ad8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d002      	beq.n	8009a74 <HAL_UART_Receive_DMA+0x24>
 8009a6e:	88fb      	ldrh	r3, [r7, #6]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d101      	bne.n	8009a78 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e030      	b.n	8009ada <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a18      	ldr	r2, [pc, #96]	@ (8009ae4 <HAL_UART_Receive_DMA+0x94>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d01f      	beq.n	8009ac8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d018      	beq.n	8009ac8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	e853 3f00 	ldrex	r3, [r3]
 8009aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab4:	623b      	str	r3, [r7, #32]
 8009ab6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab8:	69f9      	ldr	r1, [r7, #28]
 8009aba:	6a3a      	ldr	r2, [r7, #32]
 8009abc:	e841 2300 	strex	r3, r2, [r1]
 8009ac0:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ac2:	69bb      	ldr	r3, [r7, #24]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1e6      	bne.n	8009a96 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009ac8:	88fb      	ldrh	r3, [r7, #6]
 8009aca:	461a      	mov	r2, r3
 8009acc:	68b9      	ldr	r1, [r7, #8]
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f001 f91c 	bl	800ad0c <UART_Start_Receive_DMA>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	e000      	b.n	8009ada <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009ad8:	2302      	movs	r3, #2
  }
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3728      	adds	r7, #40	@ 0x28
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	40008000 	.word	0x40008000

08009ae8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b0ba      	sub	sp, #232	@ 0xe8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	69db      	ldr	r3, [r3, #28]
 8009af6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009b0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009b12:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009b16:	4013      	ands	r3, r2
 8009b18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009b1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d11b      	bne.n	8009b5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b28:	f003 0320 	and.w	r3, r3, #32
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d015      	beq.n	8009b5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b34:	f003 0320 	and.w	r3, r3, #32
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d105      	bne.n	8009b48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d009      	beq.n	8009b5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f000 8312 	beq.w	800a176 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	4798      	blx	r3
      }
      return;
 8009b5a:	e30c      	b.n	800a176 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009b5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 8129 	beq.w	8009db8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009b66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b6a:	4b90      	ldr	r3, [pc, #576]	@ (8009dac <HAL_UART_IRQHandler+0x2c4>)
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d106      	bne.n	8009b80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009b72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009b76:	4b8e      	ldr	r3, [pc, #568]	@ (8009db0 <HAL_UART_IRQHandler+0x2c8>)
 8009b78:	4013      	ands	r3, r2
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 811c 	beq.w	8009db8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b84:	f003 0301 	and.w	r3, r3, #1
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d011      	beq.n	8009bb0 <HAL_UART_IRQHandler+0xc8>
 8009b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00b      	beq.n	8009bb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ba6:	f043 0201 	orr.w	r2, r3, #1
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bb4:	f003 0302 	and.w	r3, r3, #2
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d011      	beq.n	8009be0 <HAL_UART_IRQHandler+0xf8>
 8009bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bc0:	f003 0301 	and.w	r3, r3, #1
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00b      	beq.n	8009be0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2202      	movs	r2, #2
 8009bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bd6:	f043 0204 	orr.w	r2, r3, #4
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009be4:	f003 0304 	and.w	r3, r3, #4
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d011      	beq.n	8009c10 <HAL_UART_IRQHandler+0x128>
 8009bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009bf0:	f003 0301 	and.w	r3, r3, #1
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00b      	beq.n	8009c10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2204      	movs	r2, #4
 8009bfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c06:	f043 0202 	orr.w	r2, r3, #2
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c14:	f003 0308 	and.w	r3, r3, #8
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d017      	beq.n	8009c4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c20:	f003 0320 	and.w	r3, r3, #32
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d105      	bne.n	8009c34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009c28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009c2c:	4b5f      	ldr	r3, [pc, #380]	@ (8009dac <HAL_UART_IRQHandler+0x2c4>)
 8009c2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00b      	beq.n	8009c4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2208      	movs	r2, #8
 8009c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c42:	f043 0208 	orr.w	r2, r3, #8
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d012      	beq.n	8009c7e <HAL_UART_IRQHandler+0x196>
 8009c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d00c      	beq.n	8009c7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c74:	f043 0220 	orr.w	r2, r3, #32
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	f000 8278 	beq.w	800a17a <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c8e:	f003 0320 	and.w	r3, r3, #32
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d013      	beq.n	8009cbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c9a:	f003 0320 	and.w	r3, r3, #32
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d105      	bne.n	8009cae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009ca2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d007      	beq.n	8009cbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d003      	beq.n	8009cbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cd2:	2b40      	cmp	r3, #64	@ 0x40
 8009cd4:	d005      	beq.n	8009ce2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009cda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d058      	beq.n	8009d94 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f001 f8f9 	bl	800aeda <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cf2:	2b40      	cmp	r3, #64	@ 0x40
 8009cf4:	d148      	bne.n	8009d88 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	3308      	adds	r3, #8
 8009cfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d04:	e853 3f00 	ldrex	r3, [r3]
 8009d08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	3308      	adds	r3, #8
 8009d1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009d22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009d2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d32:	e841 2300 	strex	r3, r2, [r1]
 8009d36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1d9      	bne.n	8009cf6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d017      	beq.n	8009d7c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d52:	4a18      	ldr	r2, [pc, #96]	@ (8009db4 <HAL_UART_IRQHandler+0x2cc>)
 8009d54:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f7fc f845 	bl	8005dec <HAL_DMA_Abort_IT>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d01f      	beq.n	8009da8 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009d76:	4610      	mov	r0, r2
 8009d78:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d7a:	e015      	b.n	8009da8 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d86:	e00f      	b.n	8009da8 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d92:	e009      	b.n	8009da8 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009da6:	e1e8      	b.n	800a17a <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009da8:	bf00      	nop
    return;
 8009daa:	e1e6      	b.n	800a17a <HAL_UART_IRQHandler+0x692>
 8009dac:	10000001 	.word	0x10000001
 8009db0:	04000120 	.word	0x04000120
 8009db4:	0800b263 	.word	0x0800b263

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	f040 8176 	bne.w	800a0ae <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dc6:	f003 0310 	and.w	r3, r3, #16
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f000 816f 	beq.w	800a0ae <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dd4:	f003 0310 	and.w	r3, r3, #16
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 8168 	beq.w	800a0ae <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2210      	movs	r2, #16
 8009de4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009df0:	2b40      	cmp	r3, #64	@ 0x40
 8009df2:	f040 80dc 	bne.w	8009fae <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f000 80b1 	beq.w	8009f70 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e14:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	f080 80a9 	bcs.w	8009f70 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e24:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0320 	and.w	r3, r3, #32
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f040 8087 	bne.w	8009f4a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e48:	e853 3f00 	ldrex	r3, [r3]
 8009e4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	461a      	mov	r2, r3
 8009e62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009e66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009e6a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009e72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009e76:	e841 2300 	strex	r3, r2, [r1]
 8009e7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009e7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1da      	bne.n	8009e3c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e90:	e853 3f00 	ldrex	r3, [r3]
 8009e94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009e96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e98:	f023 0301 	bic.w	r3, r3, #1
 8009e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	3308      	adds	r3, #8
 8009ea6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009eaa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009eae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009eb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009eb6:	e841 2300 	strex	r3, r2, [r1]
 8009eba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009ebc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1e1      	bne.n	8009e86 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	3308      	adds	r3, #8
 8009ec8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009ecc:	e853 3f00 	ldrex	r3, [r3]
 8009ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009ed2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ed8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3308      	adds	r3, #8
 8009ee2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009ee6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009eec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009eee:	e841 2300 	strex	r3, r2, [r1]
 8009ef2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009ef4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1e3      	bne.n	8009ec2 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2220      	movs	r2, #32
 8009efe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f10:	e853 3f00 	ldrex	r3, [r3]
 8009f14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f18:	f023 0310 	bic.w	r3, r3, #16
 8009f1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	461a      	mov	r2, r3
 8009f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f32:	e841 2300 	strex	r3, r2, [r1]
 8009f36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1e4      	bne.n	8009f08 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fb fef8 	bl	8005d3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2202      	movs	r2, #2
 8009f4e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009f62:	b292      	uxth	r2, r2
 8009f64:	1a8a      	subs	r2, r1, r2
 8009f66:	b292      	uxth	r2, r2
 8009f68:	4611      	mov	r1, r2
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009f6e:	e106      	b.n	800a17e <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	f040 80ff 	bne.w	800a17e <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 0320 	and.w	r3, r3, #32
 8009f8e:	2b20      	cmp	r3, #32
 8009f90:	f040 80f5 	bne.w	800a17e <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2202      	movs	r2, #2
 8009f98:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	4798      	blx	r3
      return;
 8009fac:	e0e7      	b.n	800a17e <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fba:	b29b      	uxth	r3, r3
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009fc8:	b29b      	uxth	r3, r3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f000 80d9 	beq.w	800a182 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8009fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f000 80d4 	beq.w	800a182 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe2:	e853 3f00 	ldrex	r3, [r3]
 8009fe6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009ffc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ffe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a000:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a002:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a004:	e841 2300 	strex	r3, r2, [r1]
 800a008:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a00a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d1e4      	bne.n	8009fda <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	3308      	adds	r3, #8
 800a016:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01a:	e853 3f00 	ldrex	r3, [r3]
 800a01e:	623b      	str	r3, [r7, #32]
   return(result);
 800a020:	6a3b      	ldr	r3, [r7, #32]
 800a022:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a026:	f023 0301 	bic.w	r3, r3, #1
 800a02a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3308      	adds	r3, #8
 800a034:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a038:	633a      	str	r2, [r7, #48]	@ 0x30
 800a03a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a03e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a040:	e841 2300 	strex	r3, r2, [r1]
 800a044:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1e1      	bne.n	800a010 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2220      	movs	r2, #32
 800a050:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2200      	movs	r2, #0
 800a058:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	e853 3f00 	ldrex	r3, [r3]
 800a06c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f023 0310 	bic.w	r3, r3, #16
 800a074:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	461a      	mov	r2, r3
 800a07e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a082:	61fb      	str	r3, [r7, #28]
 800a084:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a086:	69b9      	ldr	r1, [r7, #24]
 800a088:	69fa      	ldr	r2, [r7, #28]
 800a08a:	e841 2300 	strex	r3, r2, [r1]
 800a08e:	617b      	str	r3, [r7, #20]
   return(result);
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1e4      	bne.n	800a060 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2202      	movs	r2, #2
 800a09a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a0a2:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a0a6:	4611      	mov	r1, r2
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a0ac:	e069      	b.n	800a182 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a0ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d010      	beq.n	800a0dc <HAL_UART_IRQHandler+0x5f4>
 800a0ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00a      	beq.n	800a0dc <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a0ce:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0da:	e055      	b.n	800a188 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d014      	beq.n	800a112 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a0e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d105      	bne.n	800a100 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a0f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a0f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d008      	beq.n	800a112 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a104:	2b00      	cmp	r3, #0
 800a106:	d03e      	beq.n	800a186 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	4798      	blx	r3
    }
    return;
 800a110:	e039      	b.n	800a186 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a116:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d009      	beq.n	800a132 <HAL_UART_IRQHandler+0x64a>
 800a11e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a126:	2b00      	cmp	r3, #0
 800a128:	d003      	beq.n	800a132 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f001 f8ad 	bl	800b28a <UART_EndTransmit_IT>
    return;
 800a130:	e02a      	b.n	800a188 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a136:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00b      	beq.n	800a156 <HAL_UART_IRQHandler+0x66e>
 800a13e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a142:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a146:	2b00      	cmp	r3, #0
 800a148:	d005      	beq.n	800a156 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a154:	e018      	b.n	800a188 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a15a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d012      	beq.n	800a188 <HAL_UART_IRQHandler+0x6a0>
 800a162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a166:	2b00      	cmp	r3, #0
 800a168:	da0e      	bge.n	800a188 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a174:	e008      	b.n	800a188 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a176:	bf00      	nop
 800a178:	e006      	b.n	800a188 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a17a:	bf00      	nop
 800a17c:	e004      	b.n	800a188 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a17e:	bf00      	nop
 800a180:	e002      	b.n	800a188 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a182:	bf00      	nop
 800a184:	e000      	b.n	800a188 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a186:	bf00      	nop
  }
}
 800a188:	37e8      	adds	r7, #232	@ 0xe8
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop

0800a190 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a190:	b480      	push	{r7}
 800a192:	b083      	sub	sp, #12
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
 800a23c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a09      	ldr	r2, [pc, #36]	@ (800a268 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d009      	beq.n	800a25c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	695b      	ldr	r3, [r3, #20]
 800a24e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	683a      	ldr	r2, [r7, #0]
 800a258:	430a      	orrs	r2, r1
 800a25a:	615a      	str	r2, [r3, #20]
  }
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr
 800a268:	40008000 	.word	0x40008000

0800a26c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a18      	ldr	r2, [pc, #96]	@ (800a2dc <HAL_UART_EnableReceiverTimeout+0x70>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d027      	beq.n	800a2ce <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a284:	2b20      	cmp	r3, #32
 800a286:	d120      	bne.n	800a2ca <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a28e:	2b01      	cmp	r3, #1
 800a290:	d101      	bne.n	800a296 <HAL_UART_EnableReceiverTimeout+0x2a>
 800a292:	2302      	movs	r3, #2
 800a294:	e01c      	b.n	800a2d0 <HAL_UART_EnableReceiverTimeout+0x64>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2224      	movs	r2, #36	@ 0x24
 800a2a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a2b4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2220      	movs	r2, #32
 800a2ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	e002      	b.n	800a2d0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	e000      	b.n	800a2d0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
  }
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr
 800a2dc:	40008000 	.word	0x40008000

0800a2e0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	370c      	adds	r7, #12
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
	...

0800a2fc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a1a      	ldr	r2, [pc, #104]	@ (800a370 <UART_InitCallbacksToDefault+0x74>)
 800a308:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a19      	ldr	r2, [pc, #100]	@ (800a374 <UART_InitCallbacksToDefault+0x78>)
 800a310:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a18      	ldr	r2, [pc, #96]	@ (800a378 <UART_InitCallbacksToDefault+0x7c>)
 800a318:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a17      	ldr	r2, [pc, #92]	@ (800a37c <UART_InitCallbacksToDefault+0x80>)
 800a320:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a16      	ldr	r2, [pc, #88]	@ (800a380 <UART_InitCallbacksToDefault+0x84>)
 800a328:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a15      	ldr	r2, [pc, #84]	@ (800a384 <UART_InitCallbacksToDefault+0x88>)
 800a330:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a14      	ldr	r2, [pc, #80]	@ (800a388 <UART_InitCallbacksToDefault+0x8c>)
 800a338:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a13      	ldr	r2, [pc, #76]	@ (800a38c <UART_InitCallbacksToDefault+0x90>)
 800a340:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a12      	ldr	r2, [pc, #72]	@ (800a390 <UART_InitCallbacksToDefault+0x94>)
 800a348:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a11      	ldr	r2, [pc, #68]	@ (800a394 <UART_InitCallbacksToDefault+0x98>)
 800a350:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4a10      	ldr	r2, [pc, #64]	@ (800a398 <UART_InitCallbacksToDefault+0x9c>)
 800a358:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a0f      	ldr	r2, [pc, #60]	@ (800a39c <UART_InitCallbacksToDefault+0xa0>)
 800a360:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr
 800a370:	0800a1a5 	.word	0x0800a1a5
 800a374:	0800a191 	.word	0x0800a191
 800a378:	0800a1b9 	.word	0x0800a1b9
 800a37c:	080028fd 	.word	0x080028fd
 800a380:	0800a1cd 	.word	0x0800a1cd
 800a384:	0800a1e1 	.word	0x0800a1e1
 800a388:	0800a1f5 	.word	0x0800a1f5
 800a38c:	0800a209 	.word	0x0800a209
 800a390:	0800b2e5 	.word	0x0800b2e5
 800a394:	0800b2f9 	.word	0x0800b2f9
 800a398:	0800b30d 	.word	0x0800b30d
 800a39c:	0800a21d 	.word	0x0800a21d

0800a3a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3a4:	b08c      	sub	sp, #48	@ 0x30
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	689a      	ldr	r2, [r3, #8]
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	431a      	orrs	r2, r3
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	431a      	orrs	r2, r3
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	69db      	ldr	r3, [r3, #28]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	4baa      	ldr	r3, [pc, #680]	@ (800a678 <UART_SetConfig+0x2d8>)
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	697a      	ldr	r2, [r7, #20]
 800a3d4:	6812      	ldr	r2, [r2, #0]
 800a3d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a3d8:	430b      	orrs	r3, r1
 800a3da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	68da      	ldr	r2, [r3, #12]
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	430a      	orrs	r2, r1
 800a3f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a9f      	ldr	r2, [pc, #636]	@ (800a67c <UART_SetConfig+0x2dc>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d004      	beq.n	800a40c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	6a1b      	ldr	r3, [r3, #32]
 800a406:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a408:	4313      	orrs	r3, r2
 800a40a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a416:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a41a:	697a      	ldr	r2, [r7, #20]
 800a41c:	6812      	ldr	r2, [r2, #0]
 800a41e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a420:	430b      	orrs	r3, r1
 800a422:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a42a:	f023 010f 	bic.w	r1, r3, #15
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	430a      	orrs	r2, r1
 800a438:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a90      	ldr	r2, [pc, #576]	@ (800a680 <UART_SetConfig+0x2e0>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d125      	bne.n	800a490 <UART_SetConfig+0xf0>
 800a444:	4b8f      	ldr	r3, [pc, #572]	@ (800a684 <UART_SetConfig+0x2e4>)
 800a446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a44a:	f003 0303 	and.w	r3, r3, #3
 800a44e:	2b03      	cmp	r3, #3
 800a450:	d81a      	bhi.n	800a488 <UART_SetConfig+0xe8>
 800a452:	a201      	add	r2, pc, #4	@ (adr r2, 800a458 <UART_SetConfig+0xb8>)
 800a454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a458:	0800a469 	.word	0x0800a469
 800a45c:	0800a479 	.word	0x0800a479
 800a460:	0800a471 	.word	0x0800a471
 800a464:	0800a481 	.word	0x0800a481
 800a468:	2301      	movs	r3, #1
 800a46a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a46e:	e116      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a470:	2302      	movs	r3, #2
 800a472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a476:	e112      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a478:	2304      	movs	r3, #4
 800a47a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a47e:	e10e      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a480:	2308      	movs	r3, #8
 800a482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a486:	e10a      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a488:	2310      	movs	r3, #16
 800a48a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a48e:	e106      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	4a7c      	ldr	r2, [pc, #496]	@ (800a688 <UART_SetConfig+0x2e8>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d138      	bne.n	800a50c <UART_SetConfig+0x16c>
 800a49a:	4b7a      	ldr	r3, [pc, #488]	@ (800a684 <UART_SetConfig+0x2e4>)
 800a49c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4a0:	f003 030c 	and.w	r3, r3, #12
 800a4a4:	2b0c      	cmp	r3, #12
 800a4a6:	d82d      	bhi.n	800a504 <UART_SetConfig+0x164>
 800a4a8:	a201      	add	r2, pc, #4	@ (adr r2, 800a4b0 <UART_SetConfig+0x110>)
 800a4aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ae:	bf00      	nop
 800a4b0:	0800a4e5 	.word	0x0800a4e5
 800a4b4:	0800a505 	.word	0x0800a505
 800a4b8:	0800a505 	.word	0x0800a505
 800a4bc:	0800a505 	.word	0x0800a505
 800a4c0:	0800a4f5 	.word	0x0800a4f5
 800a4c4:	0800a505 	.word	0x0800a505
 800a4c8:	0800a505 	.word	0x0800a505
 800a4cc:	0800a505 	.word	0x0800a505
 800a4d0:	0800a4ed 	.word	0x0800a4ed
 800a4d4:	0800a505 	.word	0x0800a505
 800a4d8:	0800a505 	.word	0x0800a505
 800a4dc:	0800a505 	.word	0x0800a505
 800a4e0:	0800a4fd 	.word	0x0800a4fd
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4ea:	e0d8      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4f2:	e0d4      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a4f4:	2304      	movs	r3, #4
 800a4f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4fa:	e0d0      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a4fc:	2308      	movs	r3, #8
 800a4fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a502:	e0cc      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a504:	2310      	movs	r3, #16
 800a506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a50a:	e0c8      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a5e      	ldr	r2, [pc, #376]	@ (800a68c <UART_SetConfig+0x2ec>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d125      	bne.n	800a562 <UART_SetConfig+0x1c2>
 800a516:	4b5b      	ldr	r3, [pc, #364]	@ (800a684 <UART_SetConfig+0x2e4>)
 800a518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a51c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a520:	2b30      	cmp	r3, #48	@ 0x30
 800a522:	d016      	beq.n	800a552 <UART_SetConfig+0x1b2>
 800a524:	2b30      	cmp	r3, #48	@ 0x30
 800a526:	d818      	bhi.n	800a55a <UART_SetConfig+0x1ba>
 800a528:	2b20      	cmp	r3, #32
 800a52a:	d00a      	beq.n	800a542 <UART_SetConfig+0x1a2>
 800a52c:	2b20      	cmp	r3, #32
 800a52e:	d814      	bhi.n	800a55a <UART_SetConfig+0x1ba>
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <UART_SetConfig+0x19a>
 800a534:	2b10      	cmp	r3, #16
 800a536:	d008      	beq.n	800a54a <UART_SetConfig+0x1aa>
 800a538:	e00f      	b.n	800a55a <UART_SetConfig+0x1ba>
 800a53a:	2300      	movs	r3, #0
 800a53c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a540:	e0ad      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a542:	2302      	movs	r3, #2
 800a544:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a548:	e0a9      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a54a:	2304      	movs	r3, #4
 800a54c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a550:	e0a5      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a552:	2308      	movs	r3, #8
 800a554:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a558:	e0a1      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a55a:	2310      	movs	r3, #16
 800a55c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a560:	e09d      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a4a      	ldr	r2, [pc, #296]	@ (800a690 <UART_SetConfig+0x2f0>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d125      	bne.n	800a5b8 <UART_SetConfig+0x218>
 800a56c:	4b45      	ldr	r3, [pc, #276]	@ (800a684 <UART_SetConfig+0x2e4>)
 800a56e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a572:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a576:	2bc0      	cmp	r3, #192	@ 0xc0
 800a578:	d016      	beq.n	800a5a8 <UART_SetConfig+0x208>
 800a57a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a57c:	d818      	bhi.n	800a5b0 <UART_SetConfig+0x210>
 800a57e:	2b80      	cmp	r3, #128	@ 0x80
 800a580:	d00a      	beq.n	800a598 <UART_SetConfig+0x1f8>
 800a582:	2b80      	cmp	r3, #128	@ 0x80
 800a584:	d814      	bhi.n	800a5b0 <UART_SetConfig+0x210>
 800a586:	2b00      	cmp	r3, #0
 800a588:	d002      	beq.n	800a590 <UART_SetConfig+0x1f0>
 800a58a:	2b40      	cmp	r3, #64	@ 0x40
 800a58c:	d008      	beq.n	800a5a0 <UART_SetConfig+0x200>
 800a58e:	e00f      	b.n	800a5b0 <UART_SetConfig+0x210>
 800a590:	2300      	movs	r3, #0
 800a592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a596:	e082      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a598:	2302      	movs	r3, #2
 800a59a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a59e:	e07e      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a5a0:	2304      	movs	r3, #4
 800a5a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5a6:	e07a      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a5a8:	2308      	movs	r3, #8
 800a5aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5ae:	e076      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a5b0:	2310      	movs	r3, #16
 800a5b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5b6:	e072      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a35      	ldr	r2, [pc, #212]	@ (800a694 <UART_SetConfig+0x2f4>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d12a      	bne.n	800a618 <UART_SetConfig+0x278>
 800a5c2:	4b30      	ldr	r3, [pc, #192]	@ (800a684 <UART_SetConfig+0x2e4>)
 800a5c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5d0:	d01a      	beq.n	800a608 <UART_SetConfig+0x268>
 800a5d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a5d6:	d81b      	bhi.n	800a610 <UART_SetConfig+0x270>
 800a5d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5dc:	d00c      	beq.n	800a5f8 <UART_SetConfig+0x258>
 800a5de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5e2:	d815      	bhi.n	800a610 <UART_SetConfig+0x270>
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d003      	beq.n	800a5f0 <UART_SetConfig+0x250>
 800a5e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5ec:	d008      	beq.n	800a600 <UART_SetConfig+0x260>
 800a5ee:	e00f      	b.n	800a610 <UART_SetConfig+0x270>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5f6:	e052      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a5f8:	2302      	movs	r3, #2
 800a5fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5fe:	e04e      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a600:	2304      	movs	r3, #4
 800a602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a606:	e04a      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a608:	2308      	movs	r3, #8
 800a60a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a60e:	e046      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a610:	2310      	movs	r3, #16
 800a612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a616:	e042      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a17      	ldr	r2, [pc, #92]	@ (800a67c <UART_SetConfig+0x2dc>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d13a      	bne.n	800a698 <UART_SetConfig+0x2f8>
 800a622:	4b18      	ldr	r3, [pc, #96]	@ (800a684 <UART_SetConfig+0x2e4>)
 800a624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a628:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a62c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a630:	d01a      	beq.n	800a668 <UART_SetConfig+0x2c8>
 800a632:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a636:	d81b      	bhi.n	800a670 <UART_SetConfig+0x2d0>
 800a638:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a63c:	d00c      	beq.n	800a658 <UART_SetConfig+0x2b8>
 800a63e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a642:	d815      	bhi.n	800a670 <UART_SetConfig+0x2d0>
 800a644:	2b00      	cmp	r3, #0
 800a646:	d003      	beq.n	800a650 <UART_SetConfig+0x2b0>
 800a648:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a64c:	d008      	beq.n	800a660 <UART_SetConfig+0x2c0>
 800a64e:	e00f      	b.n	800a670 <UART_SetConfig+0x2d0>
 800a650:	2300      	movs	r3, #0
 800a652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a656:	e022      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a658:	2302      	movs	r3, #2
 800a65a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a65e:	e01e      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a660:	2304      	movs	r3, #4
 800a662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a666:	e01a      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a668:	2308      	movs	r3, #8
 800a66a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a66e:	e016      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a670:	2310      	movs	r3, #16
 800a672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a676:	e012      	b.n	800a69e <UART_SetConfig+0x2fe>
 800a678:	cfff69f3 	.word	0xcfff69f3
 800a67c:	40008000 	.word	0x40008000
 800a680:	40013800 	.word	0x40013800
 800a684:	40021000 	.word	0x40021000
 800a688:	40004400 	.word	0x40004400
 800a68c:	40004800 	.word	0x40004800
 800a690:	40004c00 	.word	0x40004c00
 800a694:	40005000 	.word	0x40005000
 800a698:	2310      	movs	r3, #16
 800a69a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4aae      	ldr	r2, [pc, #696]	@ (800a95c <UART_SetConfig+0x5bc>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	f040 8097 	bne.w	800a7d8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a6aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a6ae:	2b08      	cmp	r3, #8
 800a6b0:	d823      	bhi.n	800a6fa <UART_SetConfig+0x35a>
 800a6b2:	a201      	add	r2, pc, #4	@ (adr r2, 800a6b8 <UART_SetConfig+0x318>)
 800a6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b8:	0800a6dd 	.word	0x0800a6dd
 800a6bc:	0800a6fb 	.word	0x0800a6fb
 800a6c0:	0800a6e5 	.word	0x0800a6e5
 800a6c4:	0800a6fb 	.word	0x0800a6fb
 800a6c8:	0800a6eb 	.word	0x0800a6eb
 800a6cc:	0800a6fb 	.word	0x0800a6fb
 800a6d0:	0800a6fb 	.word	0x0800a6fb
 800a6d4:	0800a6fb 	.word	0x0800a6fb
 800a6d8:	0800a6f3 	.word	0x0800a6f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6dc:	f7fc fc76 	bl	8006fcc <HAL_RCC_GetPCLK1Freq>
 800a6e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a6e2:	e010      	b.n	800a706 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6e4:	4b9e      	ldr	r3, [pc, #632]	@ (800a960 <UART_SetConfig+0x5c0>)
 800a6e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a6e8:	e00d      	b.n	800a706 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6ea:	f7fc fc01 	bl	8006ef0 <HAL_RCC_GetSysClockFreq>
 800a6ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a6f0:	e009      	b.n	800a706 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a6f8:	e005      	b.n	800a706 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a704:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 8130 	beq.w	800a96e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a712:	4a94      	ldr	r2, [pc, #592]	@ (800a964 <UART_SetConfig+0x5c4>)
 800a714:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a718:	461a      	mov	r2, r3
 800a71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a71c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a720:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	685a      	ldr	r2, [r3, #4]
 800a726:	4613      	mov	r3, r2
 800a728:	005b      	lsls	r3, r3, #1
 800a72a:	4413      	add	r3, r2
 800a72c:	69ba      	ldr	r2, [r7, #24]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d305      	bcc.n	800a73e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a738:	69ba      	ldr	r2, [r7, #24]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d903      	bls.n	800a746 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a744:	e113      	b.n	800a96e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a748:	2200      	movs	r2, #0
 800a74a:	60bb      	str	r3, [r7, #8]
 800a74c:	60fa      	str	r2, [r7, #12]
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a752:	4a84      	ldr	r2, [pc, #528]	@ (800a964 <UART_SetConfig+0x5c4>)
 800a754:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a758:	b29b      	uxth	r3, r3
 800a75a:	2200      	movs	r2, #0
 800a75c:	603b      	str	r3, [r7, #0]
 800a75e:	607a      	str	r2, [r7, #4]
 800a760:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a764:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a768:	f7f6 f994 	bl	8000a94 <__aeabi_uldivmod>
 800a76c:	4602      	mov	r2, r0
 800a76e:	460b      	mov	r3, r1
 800a770:	4610      	mov	r0, r2
 800a772:	4619      	mov	r1, r3
 800a774:	f04f 0200 	mov.w	r2, #0
 800a778:	f04f 0300 	mov.w	r3, #0
 800a77c:	020b      	lsls	r3, r1, #8
 800a77e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a782:	0202      	lsls	r2, r0, #8
 800a784:	6979      	ldr	r1, [r7, #20]
 800a786:	6849      	ldr	r1, [r1, #4]
 800a788:	0849      	lsrs	r1, r1, #1
 800a78a:	2000      	movs	r0, #0
 800a78c:	460c      	mov	r4, r1
 800a78e:	4605      	mov	r5, r0
 800a790:	eb12 0804 	adds.w	r8, r2, r4
 800a794:	eb43 0905 	adc.w	r9, r3, r5
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	469a      	mov	sl, r3
 800a7a0:	4693      	mov	fp, r2
 800a7a2:	4652      	mov	r2, sl
 800a7a4:	465b      	mov	r3, fp
 800a7a6:	4640      	mov	r0, r8
 800a7a8:	4649      	mov	r1, r9
 800a7aa:	f7f6 f973 	bl	8000a94 <__aeabi_uldivmod>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	460b      	mov	r3, r1
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a7b6:	6a3b      	ldr	r3, [r7, #32]
 800a7b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a7bc:	d308      	bcc.n	800a7d0 <UART_SetConfig+0x430>
 800a7be:	6a3b      	ldr	r3, [r7, #32]
 800a7c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7c4:	d204      	bcs.n	800a7d0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	6a3a      	ldr	r2, [r7, #32]
 800a7cc:	60da      	str	r2, [r3, #12]
 800a7ce:	e0ce      	b.n	800a96e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a7d6:	e0ca      	b.n	800a96e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	69db      	ldr	r3, [r3, #28]
 800a7dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7e0:	d166      	bne.n	800a8b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a7e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a7e6:	2b08      	cmp	r3, #8
 800a7e8:	d827      	bhi.n	800a83a <UART_SetConfig+0x49a>
 800a7ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a7f0 <UART_SetConfig+0x450>)
 800a7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f0:	0800a815 	.word	0x0800a815
 800a7f4:	0800a81d 	.word	0x0800a81d
 800a7f8:	0800a825 	.word	0x0800a825
 800a7fc:	0800a83b 	.word	0x0800a83b
 800a800:	0800a82b 	.word	0x0800a82b
 800a804:	0800a83b 	.word	0x0800a83b
 800a808:	0800a83b 	.word	0x0800a83b
 800a80c:	0800a83b 	.word	0x0800a83b
 800a810:	0800a833 	.word	0x0800a833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a814:	f7fc fbda 	bl	8006fcc <HAL_RCC_GetPCLK1Freq>
 800a818:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a81a:	e014      	b.n	800a846 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a81c:	f7fc fbec 	bl	8006ff8 <HAL_RCC_GetPCLK2Freq>
 800a820:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a822:	e010      	b.n	800a846 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a824:	4b4e      	ldr	r3, [pc, #312]	@ (800a960 <UART_SetConfig+0x5c0>)
 800a826:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a828:	e00d      	b.n	800a846 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a82a:	f7fc fb61 	bl	8006ef0 <HAL_RCC_GetSysClockFreq>
 800a82e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a830:	e009      	b.n	800a846 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a836:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a838:	e005      	b.n	800a846 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a83a:	2300      	movs	r3, #0
 800a83c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a844:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f000 8090 	beq.w	800a96e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a852:	4a44      	ldr	r2, [pc, #272]	@ (800a964 <UART_SetConfig+0x5c4>)
 800a854:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a858:	461a      	mov	r2, r3
 800a85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a85c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a860:	005a      	lsls	r2, r3, #1
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	085b      	lsrs	r3, r3, #1
 800a868:	441a      	add	r2, r3
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a872:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a874:	6a3b      	ldr	r3, [r7, #32]
 800a876:	2b0f      	cmp	r3, #15
 800a878:	d916      	bls.n	800a8a8 <UART_SetConfig+0x508>
 800a87a:	6a3b      	ldr	r3, [r7, #32]
 800a87c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a880:	d212      	bcs.n	800a8a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a882:	6a3b      	ldr	r3, [r7, #32]
 800a884:	b29b      	uxth	r3, r3
 800a886:	f023 030f 	bic.w	r3, r3, #15
 800a88a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a88c:	6a3b      	ldr	r3, [r7, #32]
 800a88e:	085b      	lsrs	r3, r3, #1
 800a890:	b29b      	uxth	r3, r3
 800a892:	f003 0307 	and.w	r3, r3, #7
 800a896:	b29a      	uxth	r2, r3
 800a898:	8bfb      	ldrh	r3, [r7, #30]
 800a89a:	4313      	orrs	r3, r2
 800a89c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	8bfa      	ldrh	r2, [r7, #30]
 800a8a4:	60da      	str	r2, [r3, #12]
 800a8a6:	e062      	b.n	800a96e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a8ae:	e05e      	b.n	800a96e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a8b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a8b4:	2b08      	cmp	r3, #8
 800a8b6:	d828      	bhi.n	800a90a <UART_SetConfig+0x56a>
 800a8b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a8c0 <UART_SetConfig+0x520>)
 800a8ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8be:	bf00      	nop
 800a8c0:	0800a8e5 	.word	0x0800a8e5
 800a8c4:	0800a8ed 	.word	0x0800a8ed
 800a8c8:	0800a8f5 	.word	0x0800a8f5
 800a8cc:	0800a90b 	.word	0x0800a90b
 800a8d0:	0800a8fb 	.word	0x0800a8fb
 800a8d4:	0800a90b 	.word	0x0800a90b
 800a8d8:	0800a90b 	.word	0x0800a90b
 800a8dc:	0800a90b 	.word	0x0800a90b
 800a8e0:	0800a903 	.word	0x0800a903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8e4:	f7fc fb72 	bl	8006fcc <HAL_RCC_GetPCLK1Freq>
 800a8e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a8ea:	e014      	b.n	800a916 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8ec:	f7fc fb84 	bl	8006ff8 <HAL_RCC_GetPCLK2Freq>
 800a8f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a8f2:	e010      	b.n	800a916 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8f4:	4b1a      	ldr	r3, [pc, #104]	@ (800a960 <UART_SetConfig+0x5c0>)
 800a8f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a8f8:	e00d      	b.n	800a916 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8fa:	f7fc faf9 	bl	8006ef0 <HAL_RCC_GetSysClockFreq>
 800a8fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a900:	e009      	b.n	800a916 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a906:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a908:	e005      	b.n	800a916 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a90a:	2300      	movs	r3, #0
 800a90c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a914:	bf00      	nop
    }

    if (pclk != 0U)
 800a916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d028      	beq.n	800a96e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a920:	4a10      	ldr	r2, [pc, #64]	@ (800a964 <UART_SetConfig+0x5c4>)
 800a922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a926:	461a      	mov	r2, r3
 800a928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	085b      	lsrs	r3, r3, #1
 800a934:	441a      	add	r2, r3
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a93e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a940:	6a3b      	ldr	r3, [r7, #32]
 800a942:	2b0f      	cmp	r3, #15
 800a944:	d910      	bls.n	800a968 <UART_SetConfig+0x5c8>
 800a946:	6a3b      	ldr	r3, [r7, #32]
 800a948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a94c:	d20c      	bcs.n	800a968 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a94e:	6a3b      	ldr	r3, [r7, #32]
 800a950:	b29a      	uxth	r2, r3
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	60da      	str	r2, [r3, #12]
 800a958:	e009      	b.n	800a96e <UART_SetConfig+0x5ce>
 800a95a:	bf00      	nop
 800a95c:	40008000 	.word	0x40008000
 800a960:	00f42400 	.word	0x00f42400
 800a964:	0800c2c0 	.word	0x0800c2c0
      }
      else
      {
        ret = HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2201      	movs	r2, #1
 800a972:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2201      	movs	r2, #1
 800a97a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	2200      	movs	r2, #0
 800a982:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	2200      	movs	r2, #0
 800a988:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a98a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3730      	adds	r7, #48	@ 0x30
 800a992:	46bd      	mov	sp, r7
 800a994:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a998:	b480      	push	{r7}
 800a99a:	b083      	sub	sp, #12
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9a4:	f003 0308 	and.w	r3, r3, #8
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d00a      	beq.n	800a9c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	430a      	orrs	r2, r1
 800a9c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9c6:	f003 0301 	and.w	r3, r3, #1
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00a      	beq.n	800a9e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	430a      	orrs	r2, r1
 800a9e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9e8:	f003 0302 	and.w	r3, r3, #2
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00a      	beq.n	800aa06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	430a      	orrs	r2, r1
 800aa04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa0a:	f003 0304 	and.w	r3, r3, #4
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00a      	beq.n	800aa28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	430a      	orrs	r2, r1
 800aa26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa2c:	f003 0310 	and.w	r3, r3, #16
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d00a      	beq.n	800aa4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	430a      	orrs	r2, r1
 800aa48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa4e:	f003 0320 	and.w	r3, r3, #32
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00a      	beq.n	800aa6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	430a      	orrs	r2, r1
 800aa6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d01a      	beq.n	800aaae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	430a      	orrs	r2, r1
 800aa8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa96:	d10a      	bne.n	800aaae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	430a      	orrs	r2, r1
 800aaac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00a      	beq.n	800aad0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	430a      	orrs	r2, r1
 800aace:	605a      	str	r2, [r3, #4]
  }
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b098      	sub	sp, #96	@ 0x60
 800aae0:	af02      	add	r7, sp, #8
 800aae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aaec:	f7f9 fa6e 	bl	8003fcc <HAL_GetTick>
 800aaf0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f003 0308 	and.w	r3, r3, #8
 800aafc:	2b08      	cmp	r3, #8
 800aafe:	d12f      	bne.n	800ab60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 f88e 	bl	800ac30 <UART_WaitOnFlagUntilTimeout>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d022      	beq.n	800ab60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab22:	e853 3f00 	ldrex	r3, [r3]
 800ab26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab2e:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	461a      	mov	r2, r3
 800ab36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab38:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab40:	e841 2300 	strex	r3, r2, [r1]
 800ab44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d1e6      	bne.n	800ab1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2220      	movs	r2, #32
 800ab50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	e063      	b.n	800ac28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f003 0304 	and.w	r3, r3, #4
 800ab6a:	2b04      	cmp	r3, #4
 800ab6c:	d149      	bne.n	800ac02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab6e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab72:	9300      	str	r3, [sp, #0]
 800ab74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab76:	2200      	movs	r2, #0
 800ab78:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 f857 	bl	800ac30 <UART_WaitOnFlagUntilTimeout>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d03c      	beq.n	800ac02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab90:	e853 3f00 	ldrex	r3, [r3]
 800ab94:	623b      	str	r3, [r7, #32]
   return(result);
 800ab96:	6a3b      	ldr	r3, [r7, #32]
 800ab98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	461a      	mov	r2, r3
 800aba4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aba6:	633b      	str	r3, [r7, #48]	@ 0x30
 800aba8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abae:	e841 2300 	strex	r3, r2, [r1]
 800abb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800abb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d1e6      	bne.n	800ab88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	3308      	adds	r3, #8
 800abc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	e853 3f00 	ldrex	r3, [r3]
 800abc8:	60fb      	str	r3, [r7, #12]
   return(result);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f023 0301 	bic.w	r3, r3, #1
 800abd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	3308      	adds	r3, #8
 800abd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800abda:	61fa      	str	r2, [r7, #28]
 800abdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abde:	69b9      	ldr	r1, [r7, #24]
 800abe0:	69fa      	ldr	r2, [r7, #28]
 800abe2:	e841 2300 	strex	r3, r2, [r1]
 800abe6:	617b      	str	r3, [r7, #20]
   return(result);
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1e5      	bne.n	800abba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2220      	movs	r2, #32
 800abf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abfe:	2303      	movs	r3, #3
 800ac00:	e012      	b.n	800ac28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2220      	movs	r2, #32
 800ac06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2220      	movs	r2, #32
 800ac0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2200      	movs	r2, #0
 800ac16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac26:	2300      	movs	r3, #0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3758      	adds	r7, #88	@ 0x58
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	603b      	str	r3, [r7, #0]
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac40:	e04f      	b.n	800ace2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac48:	d04b      	beq.n	800ace2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac4a:	f7f9 f9bf 	bl	8003fcc <HAL_GetTick>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	1ad3      	subs	r3, r2, r3
 800ac54:	69ba      	ldr	r2, [r7, #24]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d302      	bcc.n	800ac60 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac5a:	69bb      	ldr	r3, [r7, #24]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d101      	bne.n	800ac64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac60:	2303      	movs	r3, #3
 800ac62:	e04e      	b.n	800ad02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f003 0304 	and.w	r3, r3, #4
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d037      	beq.n	800ace2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	2b80      	cmp	r3, #128	@ 0x80
 800ac76:	d034      	beq.n	800ace2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	2b40      	cmp	r3, #64	@ 0x40
 800ac7c:	d031      	beq.n	800ace2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	69db      	ldr	r3, [r3, #28]
 800ac84:	f003 0308 	and.w	r3, r3, #8
 800ac88:	2b08      	cmp	r3, #8
 800ac8a:	d110      	bne.n	800acae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2208      	movs	r2, #8
 800ac92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac94:	68f8      	ldr	r0, [r7, #12]
 800ac96:	f000 f920 	bl	800aeda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2208      	movs	r2, #8
 800ac9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2200      	movs	r2, #0
 800aca6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	e029      	b.n	800ad02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	69db      	ldr	r3, [r3, #28]
 800acb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800acb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acbc:	d111      	bne.n	800ace2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800acc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f000 f906 	bl	800aeda <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2220      	movs	r2, #32
 800acd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800acde:	2303      	movs	r3, #3
 800ace0:	e00f      	b.n	800ad02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	69da      	ldr	r2, [r3, #28]
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	4013      	ands	r3, r2
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	429a      	cmp	r2, r3
 800acf0:	bf0c      	ite	eq
 800acf2:	2301      	moveq	r3, #1
 800acf4:	2300      	movne	r3, #0
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	461a      	mov	r2, r3
 800acfa:	79fb      	ldrb	r3, [r7, #7]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d0a0      	beq.n	800ac42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
	...

0800ad0c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b096      	sub	sp, #88	@ 0x58
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	60b9      	str	r1, [r7, #8]
 800ad16:	4613      	mov	r3, r2
 800ad18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	68ba      	ldr	r2, [r7, #8]
 800ad1e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	88fa      	ldrh	r2, [r7, #6]
 800ad24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2222      	movs	r2, #34	@ 0x22
 800ad34:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d02d      	beq.n	800ad9e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad48:	4a40      	ldr	r2, [pc, #256]	@ (800ae4c <UART_Start_Receive_DMA+0x140>)
 800ad4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad52:	4a3f      	ldr	r2, [pc, #252]	@ (800ae50 <UART_Start_Receive_DMA+0x144>)
 800ad54:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad5c:	4a3d      	ldr	r2, [pc, #244]	@ (800ae54 <UART_Start_Receive_DMA+0x148>)
 800ad5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad66:	2200      	movs	r2, #0
 800ad68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	3324      	adds	r3, #36	@ 0x24
 800ad76:	4619      	mov	r1, r3
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	88fb      	ldrh	r3, [r7, #6]
 800ad80:	f7fa ff60 	bl	8005c44 <HAL_DMA_Start_IT>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d009      	beq.n	800ad9e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	2210      	movs	r2, #16
 800ad8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2220      	movs	r2, #32
 800ad96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e051      	b.n	800ae42 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d018      	beq.n	800add8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adae:	e853 3f00 	ldrex	r3, [r3]
 800adb2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800adb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800adba:	657b      	str	r3, [r7, #84]	@ 0x54
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	461a      	mov	r2, r3
 800adc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800adc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adc6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800adca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adcc:	e841 2300 	strex	r3, r2, [r1]
 800add0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800add2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800add4:	2b00      	cmp	r3, #0
 800add6:	d1e6      	bne.n	800ada6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	3308      	adds	r3, #8
 800adde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ade0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade2:	e853 3f00 	ldrex	r3, [r3]
 800ade6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ade8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adea:	f043 0301 	orr.w	r3, r3, #1
 800adee:	653b      	str	r3, [r7, #80]	@ 0x50
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	3308      	adds	r3, #8
 800adf6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800adf8:	637a      	str	r2, [r7, #52]	@ 0x34
 800adfa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800adfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae00:	e841 2300 	strex	r3, r2, [r1]
 800ae04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ae06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d1e5      	bne.n	800add8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	3308      	adds	r3, #8
 800ae12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	e853 3f00 	ldrex	r3, [r3]
 800ae1a:	613b      	str	r3, [r7, #16]
   return(result);
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	3308      	adds	r3, #8
 800ae2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae2c:	623a      	str	r2, [r7, #32]
 800ae2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae30:	69f9      	ldr	r1, [r7, #28]
 800ae32:	6a3a      	ldr	r2, [r7, #32]
 800ae34:	e841 2300 	strex	r3, r2, [r1]
 800ae38:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d1e5      	bne.n	800ae0c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3758      	adds	r7, #88	@ 0x58
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	0800b065 	.word	0x0800b065
 800ae50:	0800b199 	.word	0x0800b199
 800ae54:	0800b1df 	.word	0x0800b1df

0800ae58 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b08f      	sub	sp, #60	@ 0x3c
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae66:	6a3b      	ldr	r3, [r7, #32]
 800ae68:	e853 3f00 	ldrex	r3, [r3]
 800ae6c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ae74:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae80:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae86:	e841 2300 	strex	r3, r2, [r1]
 800ae8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d1e6      	bne.n	800ae60 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	3308      	adds	r3, #8
 800ae98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	e853 3f00 	ldrex	r3, [r3]
 800aea0:	60bb      	str	r3, [r7, #8]
   return(result);
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aea8:	633b      	str	r3, [r7, #48]	@ 0x30
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	3308      	adds	r3, #8
 800aeb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aeb2:	61ba      	str	r2, [r7, #24]
 800aeb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb6:	6979      	ldr	r1, [r7, #20]
 800aeb8:	69ba      	ldr	r2, [r7, #24]
 800aeba:	e841 2300 	strex	r3, r2, [r1]
 800aebe:	613b      	str	r3, [r7, #16]
   return(result);
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1e5      	bne.n	800ae92 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2220      	movs	r2, #32
 800aeca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800aece:	bf00      	nop
 800aed0:	373c      	adds	r7, #60	@ 0x3c
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr

0800aeda <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aeda:	b480      	push	{r7}
 800aedc:	b095      	sub	sp, #84	@ 0x54
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeea:	e853 3f00 	ldrex	r3, [r3]
 800aeee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aef2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	461a      	mov	r2, r3
 800aefe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af00:	643b      	str	r3, [r7, #64]	@ 0x40
 800af02:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af04:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af08:	e841 2300 	strex	r3, r2, [r1]
 800af0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af10:	2b00      	cmp	r3, #0
 800af12:	d1e6      	bne.n	800aee2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	3308      	adds	r3, #8
 800af1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1c:	6a3b      	ldr	r3, [r7, #32]
 800af1e:	e853 3f00 	ldrex	r3, [r3]
 800af22:	61fb      	str	r3, [r7, #28]
   return(result);
 800af24:	69fb      	ldr	r3, [r7, #28]
 800af26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af2a:	f023 0301 	bic.w	r3, r3, #1
 800af2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	3308      	adds	r3, #8
 800af36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af40:	e841 2300 	strex	r3, r2, [r1]
 800af44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1e3      	bne.n	800af14 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af50:	2b01      	cmp	r3, #1
 800af52:	d118      	bne.n	800af86 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	e853 3f00 	ldrex	r3, [r3]
 800af60:	60bb      	str	r3, [r7, #8]
   return(result);
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	f023 0310 	bic.w	r3, r3, #16
 800af68:	647b      	str	r3, [r7, #68]	@ 0x44
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	461a      	mov	r2, r3
 800af70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af72:	61bb      	str	r3, [r7, #24]
 800af74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af76:	6979      	ldr	r1, [r7, #20]
 800af78:	69ba      	ldr	r2, [r7, #24]
 800af7a:	e841 2300 	strex	r3, r2, [r1]
 800af7e:	613b      	str	r3, [r7, #16]
   return(result);
 800af80:	693b      	ldr	r3, [r7, #16]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1e6      	bne.n	800af54 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2220      	movs	r2, #32
 800af8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2200      	movs	r2, #0
 800af92:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2200      	movs	r2, #0
 800af98:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800af9a:	bf00      	nop
 800af9c:	3754      	adds	r7, #84	@ 0x54
 800af9e:	46bd      	mov	sp, r7
 800afa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa4:	4770      	bx	lr

0800afa6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b090      	sub	sp, #64	@ 0x40
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afb2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f003 0320 	and.w	r3, r3, #32
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d137      	bne.n	800b032 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800afc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afc4:	2200      	movs	r2, #0
 800afc6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800afca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	3308      	adds	r3, #8
 800afd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd4:	e853 3f00 	ldrex	r3, [r3]
 800afd8:	623b      	str	r3, [r7, #32]
   return(result);
 800afda:	6a3b      	ldr	r3, [r7, #32]
 800afdc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800afe0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800afe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	3308      	adds	r3, #8
 800afe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800afea:	633a      	str	r2, [r7, #48]	@ 0x30
 800afec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aff0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aff2:	e841 2300 	strex	r3, r2, [r1]
 800aff6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1e5      	bne.n	800afca <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800affe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	e853 3f00 	ldrex	r3, [r3]
 800b00a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b012:	637b      	str	r3, [r7, #52]	@ 0x34
 800b014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	461a      	mov	r2, r3
 800b01a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b01c:	61fb      	str	r3, [r7, #28]
 800b01e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b020:	69b9      	ldr	r1, [r7, #24]
 800b022:	69fa      	ldr	r2, [r7, #28]
 800b024:	e841 2300 	strex	r3, r2, [r1]
 800b028:	617b      	str	r3, [r7, #20]
   return(result);
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d1e6      	bne.n	800affe <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b030:	e004      	b.n	800b03c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800b032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b034:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b038:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b03a:	4798      	blx	r3
}
 800b03c:	bf00      	nop
 800b03e:	3740      	adds	r7, #64	@ 0x40
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b050:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b05c:	bf00      	nop
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b09c      	sub	sp, #112	@ 0x70
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b070:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 0320 	and.w	r3, r3, #32
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d171      	bne.n	800b164 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b080:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b082:	2200      	movs	r2, #0
 800b084:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b088:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b090:	e853 3f00 	ldrex	r3, [r3]
 800b094:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b098:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b09c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b09e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b0a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b0a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b0ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b0ae:	e841 2300 	strex	r3, r2, [r1]
 800b0b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b0b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1e6      	bne.n	800b088 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	3308      	adds	r3, #8
 800b0c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0c4:	e853 3f00 	ldrex	r3, [r3]
 800b0c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0cc:	f023 0301 	bic.w	r3, r3, #1
 800b0d0:	667b      	str	r3, [r7, #100]	@ 0x64
 800b0d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	3308      	adds	r3, #8
 800b0d8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b0da:	647a      	str	r2, [r7, #68]	@ 0x44
 800b0dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0e2:	e841 2300 	strex	r3, r2, [r1]
 800b0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b0e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1e5      	bne.n	800b0ba <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	3308      	adds	r3, #8
 800b0f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f8:	e853 3f00 	ldrex	r3, [r3]
 800b0fc:	623b      	str	r3, [r7, #32]
   return(result);
 800b0fe:	6a3b      	ldr	r3, [r7, #32]
 800b100:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b104:	663b      	str	r3, [r7, #96]	@ 0x60
 800b106:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3308      	adds	r3, #8
 800b10c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b10e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b110:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b112:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b114:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b116:	e841 2300 	strex	r3, r2, [r1]
 800b11a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1e5      	bne.n	800b0ee <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b122:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b124:	2220      	movs	r2, #32
 800b126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b12a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b12c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b12e:	2b01      	cmp	r3, #1
 800b130:	d118      	bne.n	800b164 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	e853 3f00 	ldrex	r3, [r3]
 800b13e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	f023 0310 	bic.w	r3, r3, #16
 800b146:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	461a      	mov	r2, r3
 800b14e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b150:	61fb      	str	r3, [r7, #28]
 800b152:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b154:	69b9      	ldr	r1, [r7, #24]
 800b156:	69fa      	ldr	r2, [r7, #28]
 800b158:	e841 2300 	strex	r3, r2, [r1]
 800b15c:	617b      	str	r3, [r7, #20]
   return(result);
 800b15e:	697b      	ldr	r3, [r7, #20]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1e6      	bne.n	800b132 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b164:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b166:	2200      	movs	r2, #0
 800b168:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b16a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b16c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d109      	bne.n	800b186 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b172:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b174:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b178:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b17a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b17e:	4611      	mov	r1, r2
 800b180:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b182:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b184:	e004      	b.n	800b190 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b188:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b18c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b18e:	4798      	blx	r3
}
 800b190:	bf00      	nop
 800b192:	3770      	adds	r7, #112	@ 0x70
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1a4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d10b      	bne.n	800b1cc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b1ba:	68fa      	ldr	r2, [r7, #12]
 800b1bc:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b1c0:	0852      	lsrs	r2, r2, #1
 800b1c2:	b292      	uxth	r2, r2
 800b1c4:	4611      	mov	r1, r2
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b1ca:	e004      	b.n	800b1d6 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	4798      	blx	r3
}
 800b1d6:	bf00      	nop
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b1de:	b580      	push	{r7, lr}
 800b1e0:	b086      	sub	sp, #24
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ea:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1f2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1fa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b206:	2b80      	cmp	r3, #128	@ 0x80
 800b208:	d109      	bne.n	800b21e <UART_DMAError+0x40>
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	2b21      	cmp	r3, #33	@ 0x21
 800b20e:	d106      	bne.n	800b21e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	2200      	movs	r2, #0
 800b214:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b218:	6978      	ldr	r0, [r7, #20]
 800b21a:	f7ff fe1d 	bl	800ae58 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b228:	2b40      	cmp	r3, #64	@ 0x40
 800b22a:	d109      	bne.n	800b240 <UART_DMAError+0x62>
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2b22      	cmp	r3, #34	@ 0x22
 800b230:	d106      	bne.n	800b240 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	2200      	movs	r2, #0
 800b236:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b23a:	6978      	ldr	r0, [r7, #20]
 800b23c:	f7ff fe4d 	bl	800aeda <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b246:	f043 0210 	orr.w	r2, r3, #16
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b256:	6978      	ldr	r0, [r7, #20]
 800b258:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b25a:	bf00      	nop
 800b25c:	3718      	adds	r7, #24
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b084      	sub	sp, #16
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b26e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2200      	movs	r2, #0
 800b274:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b27e:	68f8      	ldr	r0, [r7, #12]
 800b280:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b282:	bf00      	nop
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}

0800b28a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b28a:	b580      	push	{r7, lr}
 800b28c:	b088      	sub	sp, #32
 800b28e:	af00      	add	r7, sp, #0
 800b290:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	e853 3f00 	ldrex	r3, [r3]
 800b29e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b2a6:	61fb      	str	r3, [r7, #28]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	69fb      	ldr	r3, [r7, #28]
 800b2b0:	61bb      	str	r3, [r7, #24]
 800b2b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b4:	6979      	ldr	r1, [r7, #20]
 800b2b6:	69ba      	ldr	r2, [r7, #24]
 800b2b8:	e841 2300 	strex	r3, r2, [r1]
 800b2bc:	613b      	str	r3, [r7, #16]
   return(result);
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1e6      	bne.n	800b292 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2220      	movs	r2, #32
 800b2c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2dc:	bf00      	nop
 800b2de:	3720      	adds	r7, #32
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b2ec:	bf00      	nop
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b314:	bf00      	nop
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b320:	b480      	push	{r7}
 800b322:	b085      	sub	sp, #20
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d101      	bne.n	800b336 <HAL_UARTEx_DisableFifoMode+0x16>
 800b332:	2302      	movs	r3, #2
 800b334:	e027      	b.n	800b386 <HAL_UARTEx_DisableFifoMode+0x66>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2201      	movs	r2, #1
 800b33a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2224      	movs	r2, #36	@ 0x24
 800b342:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f022 0201 	bic.w	r2, r2, #1
 800b35c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b364:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2220      	movs	r2, #32
 800b378:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3714      	adds	r7, #20
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr

0800b392 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b392:	b580      	push	{r7, lr}
 800b394:	b084      	sub	sp, #16
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
 800b39a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d101      	bne.n	800b3aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b3a6:	2302      	movs	r3, #2
 800b3a8:	e02d      	b.n	800b406 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2224      	movs	r2, #36	@ 0x24
 800b3b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f022 0201 	bic.w	r2, r2, #1
 800b3d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	430a      	orrs	r2, r1
 800b3e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f000 f850 	bl	800b48c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3710      	adds	r7, #16
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b40e:	b580      	push	{r7, lr}
 800b410:	b084      	sub	sp, #16
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
 800b416:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b41e:	2b01      	cmp	r3, #1
 800b420:	d101      	bne.n	800b426 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b422:	2302      	movs	r3, #2
 800b424:	e02d      	b.n	800b482 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2201      	movs	r2, #1
 800b42a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2224      	movs	r2, #36	@ 0x24
 800b432:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f022 0201 	bic.w	r2, r2, #1
 800b44c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	683a      	ldr	r2, [r7, #0]
 800b45e:	430a      	orrs	r2, r1
 800b460:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f812 	bl	800b48c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2220      	movs	r2, #32
 800b474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
	...

0800b48c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d108      	bne.n	800b4ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b4ac:	e031      	b.n	800b512 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b4ae:	2308      	movs	r3, #8
 800b4b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b4b2:	2308      	movs	r3, #8
 800b4b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	0e5b      	lsrs	r3, r3, #25
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	f003 0307 	and.w	r3, r3, #7
 800b4c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	689b      	ldr	r3, [r3, #8]
 800b4cc:	0f5b      	lsrs	r3, r3, #29
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	f003 0307 	and.w	r3, r3, #7
 800b4d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4d6:	7bbb      	ldrb	r3, [r7, #14]
 800b4d8:	7b3a      	ldrb	r2, [r7, #12]
 800b4da:	4911      	ldr	r1, [pc, #68]	@ (800b520 <UARTEx_SetNbDataToProcess+0x94>)
 800b4dc:	5c8a      	ldrb	r2, [r1, r2]
 800b4de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b4e2:	7b3a      	ldrb	r2, [r7, #12]
 800b4e4:	490f      	ldr	r1, [pc, #60]	@ (800b524 <UARTEx_SetNbDataToProcess+0x98>)
 800b4e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b4e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b4f4:	7bfb      	ldrb	r3, [r7, #15]
 800b4f6:	7b7a      	ldrb	r2, [r7, #13]
 800b4f8:	4909      	ldr	r1, [pc, #36]	@ (800b520 <UARTEx_SetNbDataToProcess+0x94>)
 800b4fa:	5c8a      	ldrb	r2, [r1, r2]
 800b4fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b500:	7b7a      	ldrb	r2, [r7, #13]
 800b502:	4908      	ldr	r1, [pc, #32]	@ (800b524 <UARTEx_SetNbDataToProcess+0x98>)
 800b504:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b506:	fb93 f3f2 	sdiv	r3, r3, r2
 800b50a:	b29a      	uxth	r2, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b512:	bf00      	nop
 800b514:	3714      	adds	r7, #20
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	0800c2d8 	.word	0x0800c2d8
 800b524:	0800c2e0 	.word	0x0800c2e0

0800b528 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	60f8      	str	r0, [r7, #12]
 800b530:	607b      	str	r3, [r7, #4]
 800b532:	460b      	mov	r3, r1
 800b534:	817b      	strh	r3, [r7, #10]
 800b536:	4613      	mov	r3, r2
 800b538:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	897a      	ldrh	r2, [r7, #10]
 800b53e:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	893a      	ldrh	r2, [r7, #8]
 800b544:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	605a      	str	r2, [r3, #4]
}
 800b54c:	bf00      	nop
 800b54e:	3714      	adds	r7, #20
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <malloc>:
 800b558:	4b02      	ldr	r3, [pc, #8]	@ (800b564 <malloc+0xc>)
 800b55a:	4601      	mov	r1, r0
 800b55c:	6818      	ldr	r0, [r3, #0]
 800b55e:	f000 b825 	b.w	800b5ac <_malloc_r>
 800b562:	bf00      	nop
 800b564:	20000364 	.word	0x20000364

0800b568 <sbrk_aligned>:
 800b568:	b570      	push	{r4, r5, r6, lr}
 800b56a:	4e0f      	ldr	r6, [pc, #60]	@ (800b5a8 <sbrk_aligned+0x40>)
 800b56c:	460c      	mov	r4, r1
 800b56e:	6831      	ldr	r1, [r6, #0]
 800b570:	4605      	mov	r5, r0
 800b572:	b911      	cbnz	r1, 800b57a <sbrk_aligned+0x12>
 800b574:	f000 f8ae 	bl	800b6d4 <_sbrk_r>
 800b578:	6030      	str	r0, [r6, #0]
 800b57a:	4621      	mov	r1, r4
 800b57c:	4628      	mov	r0, r5
 800b57e:	f000 f8a9 	bl	800b6d4 <_sbrk_r>
 800b582:	1c43      	adds	r3, r0, #1
 800b584:	d103      	bne.n	800b58e <sbrk_aligned+0x26>
 800b586:	f04f 34ff 	mov.w	r4, #4294967295
 800b58a:	4620      	mov	r0, r4
 800b58c:	bd70      	pop	{r4, r5, r6, pc}
 800b58e:	1cc4      	adds	r4, r0, #3
 800b590:	f024 0403 	bic.w	r4, r4, #3
 800b594:	42a0      	cmp	r0, r4
 800b596:	d0f8      	beq.n	800b58a <sbrk_aligned+0x22>
 800b598:	1a21      	subs	r1, r4, r0
 800b59a:	4628      	mov	r0, r5
 800b59c:	f000 f89a 	bl	800b6d4 <_sbrk_r>
 800b5a0:	3001      	adds	r0, #1
 800b5a2:	d1f2      	bne.n	800b58a <sbrk_aligned+0x22>
 800b5a4:	e7ef      	b.n	800b586 <sbrk_aligned+0x1e>
 800b5a6:	bf00      	nop
 800b5a8:	20001d5c 	.word	0x20001d5c

0800b5ac <_malloc_r>:
 800b5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5b0:	1ccd      	adds	r5, r1, #3
 800b5b2:	f025 0503 	bic.w	r5, r5, #3
 800b5b6:	3508      	adds	r5, #8
 800b5b8:	2d0c      	cmp	r5, #12
 800b5ba:	bf38      	it	cc
 800b5bc:	250c      	movcc	r5, #12
 800b5be:	2d00      	cmp	r5, #0
 800b5c0:	4606      	mov	r6, r0
 800b5c2:	db01      	blt.n	800b5c8 <_malloc_r+0x1c>
 800b5c4:	42a9      	cmp	r1, r5
 800b5c6:	d904      	bls.n	800b5d2 <_malloc_r+0x26>
 800b5c8:	230c      	movs	r3, #12
 800b5ca:	6033      	str	r3, [r6, #0]
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b6a8 <_malloc_r+0xfc>
 800b5d6:	f000 f869 	bl	800b6ac <__malloc_lock>
 800b5da:	f8d8 3000 	ldr.w	r3, [r8]
 800b5de:	461c      	mov	r4, r3
 800b5e0:	bb44      	cbnz	r4, 800b634 <_malloc_r+0x88>
 800b5e2:	4629      	mov	r1, r5
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	f7ff ffbf 	bl	800b568 <sbrk_aligned>
 800b5ea:	1c43      	adds	r3, r0, #1
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	d158      	bne.n	800b6a2 <_malloc_r+0xf6>
 800b5f0:	f8d8 4000 	ldr.w	r4, [r8]
 800b5f4:	4627      	mov	r7, r4
 800b5f6:	2f00      	cmp	r7, #0
 800b5f8:	d143      	bne.n	800b682 <_malloc_r+0xd6>
 800b5fa:	2c00      	cmp	r4, #0
 800b5fc:	d04b      	beq.n	800b696 <_malloc_r+0xea>
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	4639      	mov	r1, r7
 800b602:	4630      	mov	r0, r6
 800b604:	eb04 0903 	add.w	r9, r4, r3
 800b608:	f000 f864 	bl	800b6d4 <_sbrk_r>
 800b60c:	4581      	cmp	r9, r0
 800b60e:	d142      	bne.n	800b696 <_malloc_r+0xea>
 800b610:	6821      	ldr	r1, [r4, #0]
 800b612:	1a6d      	subs	r5, r5, r1
 800b614:	4629      	mov	r1, r5
 800b616:	4630      	mov	r0, r6
 800b618:	f7ff ffa6 	bl	800b568 <sbrk_aligned>
 800b61c:	3001      	adds	r0, #1
 800b61e:	d03a      	beq.n	800b696 <_malloc_r+0xea>
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	442b      	add	r3, r5
 800b624:	6023      	str	r3, [r4, #0]
 800b626:	f8d8 3000 	ldr.w	r3, [r8]
 800b62a:	685a      	ldr	r2, [r3, #4]
 800b62c:	bb62      	cbnz	r2, 800b688 <_malloc_r+0xdc>
 800b62e:	f8c8 7000 	str.w	r7, [r8]
 800b632:	e00f      	b.n	800b654 <_malloc_r+0xa8>
 800b634:	6822      	ldr	r2, [r4, #0]
 800b636:	1b52      	subs	r2, r2, r5
 800b638:	d420      	bmi.n	800b67c <_malloc_r+0xd0>
 800b63a:	2a0b      	cmp	r2, #11
 800b63c:	d917      	bls.n	800b66e <_malloc_r+0xc2>
 800b63e:	1961      	adds	r1, r4, r5
 800b640:	42a3      	cmp	r3, r4
 800b642:	6025      	str	r5, [r4, #0]
 800b644:	bf18      	it	ne
 800b646:	6059      	strne	r1, [r3, #4]
 800b648:	6863      	ldr	r3, [r4, #4]
 800b64a:	bf08      	it	eq
 800b64c:	f8c8 1000 	streq.w	r1, [r8]
 800b650:	5162      	str	r2, [r4, r5]
 800b652:	604b      	str	r3, [r1, #4]
 800b654:	4630      	mov	r0, r6
 800b656:	f000 f82f 	bl	800b6b8 <__malloc_unlock>
 800b65a:	f104 000b 	add.w	r0, r4, #11
 800b65e:	1d23      	adds	r3, r4, #4
 800b660:	f020 0007 	bic.w	r0, r0, #7
 800b664:	1ac2      	subs	r2, r0, r3
 800b666:	bf1c      	itt	ne
 800b668:	1a1b      	subne	r3, r3, r0
 800b66a:	50a3      	strne	r3, [r4, r2]
 800b66c:	e7af      	b.n	800b5ce <_malloc_r+0x22>
 800b66e:	6862      	ldr	r2, [r4, #4]
 800b670:	42a3      	cmp	r3, r4
 800b672:	bf0c      	ite	eq
 800b674:	f8c8 2000 	streq.w	r2, [r8]
 800b678:	605a      	strne	r2, [r3, #4]
 800b67a:	e7eb      	b.n	800b654 <_malloc_r+0xa8>
 800b67c:	4623      	mov	r3, r4
 800b67e:	6864      	ldr	r4, [r4, #4]
 800b680:	e7ae      	b.n	800b5e0 <_malloc_r+0x34>
 800b682:	463c      	mov	r4, r7
 800b684:	687f      	ldr	r7, [r7, #4]
 800b686:	e7b6      	b.n	800b5f6 <_malloc_r+0x4a>
 800b688:	461a      	mov	r2, r3
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	42a3      	cmp	r3, r4
 800b68e:	d1fb      	bne.n	800b688 <_malloc_r+0xdc>
 800b690:	2300      	movs	r3, #0
 800b692:	6053      	str	r3, [r2, #4]
 800b694:	e7de      	b.n	800b654 <_malloc_r+0xa8>
 800b696:	230c      	movs	r3, #12
 800b698:	6033      	str	r3, [r6, #0]
 800b69a:	4630      	mov	r0, r6
 800b69c:	f000 f80c 	bl	800b6b8 <__malloc_unlock>
 800b6a0:	e794      	b.n	800b5cc <_malloc_r+0x20>
 800b6a2:	6005      	str	r5, [r0, #0]
 800b6a4:	e7d6      	b.n	800b654 <_malloc_r+0xa8>
 800b6a6:	bf00      	nop
 800b6a8:	20001d60 	.word	0x20001d60

0800b6ac <__malloc_lock>:
 800b6ac:	4801      	ldr	r0, [pc, #4]	@ (800b6b4 <__malloc_lock+0x8>)
 800b6ae:	f000 b84b 	b.w	800b748 <__retarget_lock_acquire_recursive>
 800b6b2:	bf00      	nop
 800b6b4:	20001ea0 	.word	0x20001ea0

0800b6b8 <__malloc_unlock>:
 800b6b8:	4801      	ldr	r0, [pc, #4]	@ (800b6c0 <__malloc_unlock+0x8>)
 800b6ba:	f000 b846 	b.w	800b74a <__retarget_lock_release_recursive>
 800b6be:	bf00      	nop
 800b6c0:	20001ea0 	.word	0x20001ea0

0800b6c4 <memset>:
 800b6c4:	4402      	add	r2, r0
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d100      	bne.n	800b6ce <memset+0xa>
 800b6cc:	4770      	bx	lr
 800b6ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b6d2:	e7f9      	b.n	800b6c8 <memset+0x4>

0800b6d4 <_sbrk_r>:
 800b6d4:	b538      	push	{r3, r4, r5, lr}
 800b6d6:	4d06      	ldr	r5, [pc, #24]	@ (800b6f0 <_sbrk_r+0x1c>)
 800b6d8:	2300      	movs	r3, #0
 800b6da:	4604      	mov	r4, r0
 800b6dc:	4608      	mov	r0, r1
 800b6de:	602b      	str	r3, [r5, #0]
 800b6e0:	f7f7 fe34 	bl	800334c <_sbrk>
 800b6e4:	1c43      	adds	r3, r0, #1
 800b6e6:	d102      	bne.n	800b6ee <_sbrk_r+0x1a>
 800b6e8:	682b      	ldr	r3, [r5, #0]
 800b6ea:	b103      	cbz	r3, 800b6ee <_sbrk_r+0x1a>
 800b6ec:	6023      	str	r3, [r4, #0]
 800b6ee:	bd38      	pop	{r3, r4, r5, pc}
 800b6f0:	20001e9c 	.word	0x20001e9c

0800b6f4 <__errno>:
 800b6f4:	4b01      	ldr	r3, [pc, #4]	@ (800b6fc <__errno+0x8>)
 800b6f6:	6818      	ldr	r0, [r3, #0]
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	20000364 	.word	0x20000364

0800b700 <__libc_init_array>:
 800b700:	b570      	push	{r4, r5, r6, lr}
 800b702:	4d0d      	ldr	r5, [pc, #52]	@ (800b738 <__libc_init_array+0x38>)
 800b704:	4c0d      	ldr	r4, [pc, #52]	@ (800b73c <__libc_init_array+0x3c>)
 800b706:	1b64      	subs	r4, r4, r5
 800b708:	10a4      	asrs	r4, r4, #2
 800b70a:	2600      	movs	r6, #0
 800b70c:	42a6      	cmp	r6, r4
 800b70e:	d109      	bne.n	800b724 <__libc_init_array+0x24>
 800b710:	4d0b      	ldr	r5, [pc, #44]	@ (800b740 <__libc_init_array+0x40>)
 800b712:	4c0c      	ldr	r4, [pc, #48]	@ (800b744 <__libc_init_array+0x44>)
 800b714:	f000 fd9c 	bl	800c250 <_init>
 800b718:	1b64      	subs	r4, r4, r5
 800b71a:	10a4      	asrs	r4, r4, #2
 800b71c:	2600      	movs	r6, #0
 800b71e:	42a6      	cmp	r6, r4
 800b720:	d105      	bne.n	800b72e <__libc_init_array+0x2e>
 800b722:	bd70      	pop	{r4, r5, r6, pc}
 800b724:	f855 3b04 	ldr.w	r3, [r5], #4
 800b728:	4798      	blx	r3
 800b72a:	3601      	adds	r6, #1
 800b72c:	e7ee      	b.n	800b70c <__libc_init_array+0xc>
 800b72e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b732:	4798      	blx	r3
 800b734:	3601      	adds	r6, #1
 800b736:	e7f2      	b.n	800b71e <__libc_init_array+0x1e>
 800b738:	0800c6c0 	.word	0x0800c6c0
 800b73c:	0800c6c0 	.word	0x0800c6c0
 800b740:	0800c6c0 	.word	0x0800c6c0
 800b744:	0800c6c4 	.word	0x0800c6c4

0800b748 <__retarget_lock_acquire_recursive>:
 800b748:	4770      	bx	lr

0800b74a <__retarget_lock_release_recursive>:
 800b74a:	4770      	bx	lr

0800b74c <memcpy>:
 800b74c:	440a      	add	r2, r1
 800b74e:	4291      	cmp	r1, r2
 800b750:	f100 33ff 	add.w	r3, r0, #4294967295
 800b754:	d100      	bne.n	800b758 <memcpy+0xc>
 800b756:	4770      	bx	lr
 800b758:	b510      	push	{r4, lr}
 800b75a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b75e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b762:	4291      	cmp	r1, r2
 800b764:	d1f9      	bne.n	800b75a <memcpy+0xe>
 800b766:	bd10      	pop	{r4, pc}

0800b768 <cosf>:
 800b768:	ee10 3a10 	vmov	r3, s0
 800b76c:	b507      	push	{r0, r1, r2, lr}
 800b76e:	4a1e      	ldr	r2, [pc, #120]	@ (800b7e8 <cosf+0x80>)
 800b770:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b774:	4293      	cmp	r3, r2
 800b776:	d806      	bhi.n	800b786 <cosf+0x1e>
 800b778:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800b7ec <cosf+0x84>
 800b77c:	b003      	add	sp, #12
 800b77e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b782:	f000 b87b 	b.w	800b87c <__kernel_cosf>
 800b786:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b78a:	d304      	bcc.n	800b796 <cosf+0x2e>
 800b78c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b790:	b003      	add	sp, #12
 800b792:	f85d fb04 	ldr.w	pc, [sp], #4
 800b796:	4668      	mov	r0, sp
 800b798:	f000 f910 	bl	800b9bc <__ieee754_rem_pio2f>
 800b79c:	f000 0003 	and.w	r0, r0, #3
 800b7a0:	2801      	cmp	r0, #1
 800b7a2:	d009      	beq.n	800b7b8 <cosf+0x50>
 800b7a4:	2802      	cmp	r0, #2
 800b7a6:	d010      	beq.n	800b7ca <cosf+0x62>
 800b7a8:	b9b0      	cbnz	r0, 800b7d8 <cosf+0x70>
 800b7aa:	eddd 0a01 	vldr	s1, [sp, #4]
 800b7ae:	ed9d 0a00 	vldr	s0, [sp]
 800b7b2:	f000 f863 	bl	800b87c <__kernel_cosf>
 800b7b6:	e7eb      	b.n	800b790 <cosf+0x28>
 800b7b8:	eddd 0a01 	vldr	s1, [sp, #4]
 800b7bc:	ed9d 0a00 	vldr	s0, [sp]
 800b7c0:	f000 f8b4 	bl	800b92c <__kernel_sinf>
 800b7c4:	eeb1 0a40 	vneg.f32	s0, s0
 800b7c8:	e7e2      	b.n	800b790 <cosf+0x28>
 800b7ca:	eddd 0a01 	vldr	s1, [sp, #4]
 800b7ce:	ed9d 0a00 	vldr	s0, [sp]
 800b7d2:	f000 f853 	bl	800b87c <__kernel_cosf>
 800b7d6:	e7f5      	b.n	800b7c4 <cosf+0x5c>
 800b7d8:	eddd 0a01 	vldr	s1, [sp, #4]
 800b7dc:	ed9d 0a00 	vldr	s0, [sp]
 800b7e0:	2001      	movs	r0, #1
 800b7e2:	f000 f8a3 	bl	800b92c <__kernel_sinf>
 800b7e6:	e7d3      	b.n	800b790 <cosf+0x28>
 800b7e8:	3f490fd8 	.word	0x3f490fd8
 800b7ec:	00000000 	.word	0x00000000

0800b7f0 <sinf>:
 800b7f0:	ee10 3a10 	vmov	r3, s0
 800b7f4:	b507      	push	{r0, r1, r2, lr}
 800b7f6:	4a1f      	ldr	r2, [pc, #124]	@ (800b874 <sinf+0x84>)
 800b7f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	d807      	bhi.n	800b810 <sinf+0x20>
 800b800:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b878 <sinf+0x88>
 800b804:	2000      	movs	r0, #0
 800b806:	b003      	add	sp, #12
 800b808:	f85d eb04 	ldr.w	lr, [sp], #4
 800b80c:	f000 b88e 	b.w	800b92c <__kernel_sinf>
 800b810:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b814:	d304      	bcc.n	800b820 <sinf+0x30>
 800b816:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b81a:	b003      	add	sp, #12
 800b81c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b820:	4668      	mov	r0, sp
 800b822:	f000 f8cb 	bl	800b9bc <__ieee754_rem_pio2f>
 800b826:	f000 0003 	and.w	r0, r0, #3
 800b82a:	2801      	cmp	r0, #1
 800b82c:	d00a      	beq.n	800b844 <sinf+0x54>
 800b82e:	2802      	cmp	r0, #2
 800b830:	d00f      	beq.n	800b852 <sinf+0x62>
 800b832:	b9c0      	cbnz	r0, 800b866 <sinf+0x76>
 800b834:	eddd 0a01 	vldr	s1, [sp, #4]
 800b838:	ed9d 0a00 	vldr	s0, [sp]
 800b83c:	2001      	movs	r0, #1
 800b83e:	f000 f875 	bl	800b92c <__kernel_sinf>
 800b842:	e7ea      	b.n	800b81a <sinf+0x2a>
 800b844:	eddd 0a01 	vldr	s1, [sp, #4]
 800b848:	ed9d 0a00 	vldr	s0, [sp]
 800b84c:	f000 f816 	bl	800b87c <__kernel_cosf>
 800b850:	e7e3      	b.n	800b81a <sinf+0x2a>
 800b852:	eddd 0a01 	vldr	s1, [sp, #4]
 800b856:	ed9d 0a00 	vldr	s0, [sp]
 800b85a:	2001      	movs	r0, #1
 800b85c:	f000 f866 	bl	800b92c <__kernel_sinf>
 800b860:	eeb1 0a40 	vneg.f32	s0, s0
 800b864:	e7d9      	b.n	800b81a <sinf+0x2a>
 800b866:	eddd 0a01 	vldr	s1, [sp, #4]
 800b86a:	ed9d 0a00 	vldr	s0, [sp]
 800b86e:	f000 f805 	bl	800b87c <__kernel_cosf>
 800b872:	e7f5      	b.n	800b860 <sinf+0x70>
 800b874:	3f490fd8 	.word	0x3f490fd8
 800b878:	00000000 	.word	0x00000000

0800b87c <__kernel_cosf>:
 800b87c:	ee10 3a10 	vmov	r3, s0
 800b880:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b884:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b888:	eef0 6a40 	vmov.f32	s13, s0
 800b88c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b890:	d204      	bcs.n	800b89c <__kernel_cosf+0x20>
 800b892:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b896:	ee17 2a90 	vmov	r2, s15
 800b89a:	b342      	cbz	r2, 800b8ee <__kernel_cosf+0x72>
 800b89c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b8a0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b90c <__kernel_cosf+0x90>
 800b8a4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b910 <__kernel_cosf+0x94>
 800b8a8:	4a1a      	ldr	r2, [pc, #104]	@ (800b914 <__kernel_cosf+0x98>)
 800b8aa:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b918 <__kernel_cosf+0x9c>
 800b8b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b8b8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b91c <__kernel_cosf+0xa0>
 800b8bc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b8c0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b920 <__kernel_cosf+0xa4>
 800b8c4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b8c8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b924 <__kernel_cosf+0xa8>
 800b8cc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b8d0:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b8d4:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b8d8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b8dc:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b8e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8e4:	d804      	bhi.n	800b8f0 <__kernel_cosf+0x74>
 800b8e6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b8ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b8ee:	4770      	bx	lr
 800b8f0:	4a0d      	ldr	r2, [pc, #52]	@ (800b928 <__kernel_cosf+0xac>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	bf9a      	itte	ls
 800b8f6:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b8fa:	ee07 3a10 	vmovls	s14, r3
 800b8fe:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b902:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b906:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b90a:	e7ec      	b.n	800b8e6 <__kernel_cosf+0x6a>
 800b90c:	ad47d74e 	.word	0xad47d74e
 800b910:	310f74f6 	.word	0x310f74f6
 800b914:	3e999999 	.word	0x3e999999
 800b918:	b493f27c 	.word	0xb493f27c
 800b91c:	37d00d01 	.word	0x37d00d01
 800b920:	bab60b61 	.word	0xbab60b61
 800b924:	3d2aaaab 	.word	0x3d2aaaab
 800b928:	3f480000 	.word	0x3f480000

0800b92c <__kernel_sinf>:
 800b92c:	ee10 3a10 	vmov	r3, s0
 800b930:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b934:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b938:	d204      	bcs.n	800b944 <__kernel_sinf+0x18>
 800b93a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b93e:	ee17 3a90 	vmov	r3, s15
 800b942:	b35b      	cbz	r3, 800b99c <__kernel_sinf+0x70>
 800b944:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b948:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b9a0 <__kernel_sinf+0x74>
 800b94c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b9a4 <__kernel_sinf+0x78>
 800b950:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b954:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b9a8 <__kernel_sinf+0x7c>
 800b958:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b95c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b9ac <__kernel_sinf+0x80>
 800b960:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b964:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b9b0 <__kernel_sinf+0x84>
 800b968:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b96c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b970:	b930      	cbnz	r0, 800b980 <__kernel_sinf+0x54>
 800b972:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b9b4 <__kernel_sinf+0x88>
 800b976:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b97a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b97e:	4770      	bx	lr
 800b980:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b984:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b988:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b98c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b990:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b9b8 <__kernel_sinf+0x8c>
 800b994:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b998:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	2f2ec9d3 	.word	0x2f2ec9d3
 800b9a4:	b2d72f34 	.word	0xb2d72f34
 800b9a8:	3638ef1b 	.word	0x3638ef1b
 800b9ac:	b9500d01 	.word	0xb9500d01
 800b9b0:	3c088889 	.word	0x3c088889
 800b9b4:	be2aaaab 	.word	0xbe2aaaab
 800b9b8:	3e2aaaab 	.word	0x3e2aaaab

0800b9bc <__ieee754_rem_pio2f>:
 800b9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9be:	ee10 6a10 	vmov	r6, s0
 800b9c2:	4b88      	ldr	r3, [pc, #544]	@ (800bbe4 <__ieee754_rem_pio2f+0x228>)
 800b9c4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b9c8:	429d      	cmp	r5, r3
 800b9ca:	b087      	sub	sp, #28
 800b9cc:	4604      	mov	r4, r0
 800b9ce:	d805      	bhi.n	800b9dc <__ieee754_rem_pio2f+0x20>
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	ed80 0a00 	vstr	s0, [r0]
 800b9d6:	6043      	str	r3, [r0, #4]
 800b9d8:	2000      	movs	r0, #0
 800b9da:	e022      	b.n	800ba22 <__ieee754_rem_pio2f+0x66>
 800b9dc:	4b82      	ldr	r3, [pc, #520]	@ (800bbe8 <__ieee754_rem_pio2f+0x22c>)
 800b9de:	429d      	cmp	r5, r3
 800b9e0:	d83a      	bhi.n	800ba58 <__ieee754_rem_pio2f+0x9c>
 800b9e2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b9e6:	2e00      	cmp	r6, #0
 800b9e8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800bbec <__ieee754_rem_pio2f+0x230>
 800b9ec:	4a80      	ldr	r2, [pc, #512]	@ (800bbf0 <__ieee754_rem_pio2f+0x234>)
 800b9ee:	f023 030f 	bic.w	r3, r3, #15
 800b9f2:	dd18      	ble.n	800ba26 <__ieee754_rem_pio2f+0x6a>
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b9fa:	bf09      	itett	eq
 800b9fc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800bbf4 <__ieee754_rem_pio2f+0x238>
 800ba00:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800bbf8 <__ieee754_rem_pio2f+0x23c>
 800ba04:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800bbfc <__ieee754_rem_pio2f+0x240>
 800ba08:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800ba0c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800ba10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba14:	ed80 7a00 	vstr	s14, [r0]
 800ba18:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ba1c:	edc0 7a01 	vstr	s15, [r0, #4]
 800ba20:	2001      	movs	r0, #1
 800ba22:	b007      	add	sp, #28
 800ba24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba26:	4293      	cmp	r3, r2
 800ba28:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ba2c:	bf09      	itett	eq
 800ba2e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800bbf4 <__ieee754_rem_pio2f+0x238>
 800ba32:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800bbf8 <__ieee754_rem_pio2f+0x23c>
 800ba36:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800bbfc <__ieee754_rem_pio2f+0x240>
 800ba3a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800ba3e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ba42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba46:	ed80 7a00 	vstr	s14, [r0]
 800ba4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba4e:	edc0 7a01 	vstr	s15, [r0, #4]
 800ba52:	f04f 30ff 	mov.w	r0, #4294967295
 800ba56:	e7e4      	b.n	800ba22 <__ieee754_rem_pio2f+0x66>
 800ba58:	4b69      	ldr	r3, [pc, #420]	@ (800bc00 <__ieee754_rem_pio2f+0x244>)
 800ba5a:	429d      	cmp	r5, r3
 800ba5c:	d873      	bhi.n	800bb46 <__ieee754_rem_pio2f+0x18a>
 800ba5e:	f000 f8dd 	bl	800bc1c <fabsf>
 800ba62:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800bc04 <__ieee754_rem_pio2f+0x248>
 800ba66:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ba6a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ba6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba76:	ee17 0a90 	vmov	r0, s15
 800ba7a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bbec <__ieee754_rem_pio2f+0x230>
 800ba7e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ba82:	281f      	cmp	r0, #31
 800ba84:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bbf8 <__ieee754_rem_pio2f+0x23c>
 800ba88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba8c:	eeb1 6a47 	vneg.f32	s12, s14
 800ba90:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ba94:	ee16 1a90 	vmov	r1, s13
 800ba98:	dc09      	bgt.n	800baae <__ieee754_rem_pio2f+0xf2>
 800ba9a:	4a5b      	ldr	r2, [pc, #364]	@ (800bc08 <__ieee754_rem_pio2f+0x24c>)
 800ba9c:	1e47      	subs	r7, r0, #1
 800ba9e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800baa2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800baa6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800baaa:	4293      	cmp	r3, r2
 800baac:	d107      	bne.n	800babe <__ieee754_rem_pio2f+0x102>
 800baae:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800bab2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800bab6:	2a08      	cmp	r2, #8
 800bab8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800babc:	dc14      	bgt.n	800bae8 <__ieee754_rem_pio2f+0x12c>
 800babe:	6021      	str	r1, [r4, #0]
 800bac0:	ed94 7a00 	vldr	s14, [r4]
 800bac4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bac8:	2e00      	cmp	r6, #0
 800baca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bace:	ed84 0a01 	vstr	s0, [r4, #4]
 800bad2:	daa6      	bge.n	800ba22 <__ieee754_rem_pio2f+0x66>
 800bad4:	eeb1 7a47 	vneg.f32	s14, s14
 800bad8:	eeb1 0a40 	vneg.f32	s0, s0
 800badc:	ed84 7a00 	vstr	s14, [r4]
 800bae0:	ed84 0a01 	vstr	s0, [r4, #4]
 800bae4:	4240      	negs	r0, r0
 800bae6:	e79c      	b.n	800ba22 <__ieee754_rem_pio2f+0x66>
 800bae8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800bbf4 <__ieee754_rem_pio2f+0x238>
 800baec:	eef0 6a40 	vmov.f32	s13, s0
 800baf0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800baf4:	ee70 7a66 	vsub.f32	s15, s0, s13
 800baf8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bafc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800bbfc <__ieee754_rem_pio2f+0x240>
 800bb00:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800bb04:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800bb08:	ee15 2a90 	vmov	r2, s11
 800bb0c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bb10:	1a5b      	subs	r3, r3, r1
 800bb12:	2b19      	cmp	r3, #25
 800bb14:	dc04      	bgt.n	800bb20 <__ieee754_rem_pio2f+0x164>
 800bb16:	edc4 5a00 	vstr	s11, [r4]
 800bb1a:	eeb0 0a66 	vmov.f32	s0, s13
 800bb1e:	e7cf      	b.n	800bac0 <__ieee754_rem_pio2f+0x104>
 800bb20:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800bc0c <__ieee754_rem_pio2f+0x250>
 800bb24:	eeb0 0a66 	vmov.f32	s0, s13
 800bb28:	eea6 0a25 	vfma.f32	s0, s12, s11
 800bb2c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bb30:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800bc10 <__ieee754_rem_pio2f+0x254>
 800bb34:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bb38:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800bb3c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bb40:	ed84 7a00 	vstr	s14, [r4]
 800bb44:	e7bc      	b.n	800bac0 <__ieee754_rem_pio2f+0x104>
 800bb46:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800bb4a:	d306      	bcc.n	800bb5a <__ieee754_rem_pio2f+0x19e>
 800bb4c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bb50:	edc0 7a01 	vstr	s15, [r0, #4]
 800bb54:	edc0 7a00 	vstr	s15, [r0]
 800bb58:	e73e      	b.n	800b9d8 <__ieee754_rem_pio2f+0x1c>
 800bb5a:	15ea      	asrs	r2, r5, #23
 800bb5c:	3a86      	subs	r2, #134	@ 0x86
 800bb5e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800bb62:	ee07 3a90 	vmov	s15, r3
 800bb66:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bb6a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800bc14 <__ieee754_rem_pio2f+0x258>
 800bb6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bb72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb76:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bb7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bb7e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bb82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bb86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb8a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bb8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bb92:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb9a:	edcd 7a05 	vstr	s15, [sp, #20]
 800bb9e:	d11e      	bne.n	800bbde <__ieee754_rem_pio2f+0x222>
 800bba0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bba8:	bf0c      	ite	eq
 800bbaa:	2301      	moveq	r3, #1
 800bbac:	2302      	movne	r3, #2
 800bbae:	491a      	ldr	r1, [pc, #104]	@ (800bc18 <__ieee754_rem_pio2f+0x25c>)
 800bbb0:	9101      	str	r1, [sp, #4]
 800bbb2:	2102      	movs	r1, #2
 800bbb4:	9100      	str	r1, [sp, #0]
 800bbb6:	a803      	add	r0, sp, #12
 800bbb8:	4621      	mov	r1, r4
 800bbba:	f000 f89d 	bl	800bcf8 <__kernel_rem_pio2f>
 800bbbe:	2e00      	cmp	r6, #0
 800bbc0:	f6bf af2f 	bge.w	800ba22 <__ieee754_rem_pio2f+0x66>
 800bbc4:	edd4 7a00 	vldr	s15, [r4]
 800bbc8:	eef1 7a67 	vneg.f32	s15, s15
 800bbcc:	edc4 7a00 	vstr	s15, [r4]
 800bbd0:	edd4 7a01 	vldr	s15, [r4, #4]
 800bbd4:	eef1 7a67 	vneg.f32	s15, s15
 800bbd8:	edc4 7a01 	vstr	s15, [r4, #4]
 800bbdc:	e782      	b.n	800bae4 <__ieee754_rem_pio2f+0x128>
 800bbde:	2303      	movs	r3, #3
 800bbe0:	e7e5      	b.n	800bbae <__ieee754_rem_pio2f+0x1f2>
 800bbe2:	bf00      	nop
 800bbe4:	3f490fd8 	.word	0x3f490fd8
 800bbe8:	4016cbe3 	.word	0x4016cbe3
 800bbec:	3fc90f80 	.word	0x3fc90f80
 800bbf0:	3fc90fd0 	.word	0x3fc90fd0
 800bbf4:	37354400 	.word	0x37354400
 800bbf8:	37354443 	.word	0x37354443
 800bbfc:	2e85a308 	.word	0x2e85a308
 800bc00:	43490f80 	.word	0x43490f80
 800bc04:	3f22f984 	.word	0x3f22f984
 800bc08:	0800c2e8 	.word	0x0800c2e8
 800bc0c:	2e85a300 	.word	0x2e85a300
 800bc10:	248d3132 	.word	0x248d3132
 800bc14:	43800000 	.word	0x43800000
 800bc18:	0800c368 	.word	0x0800c368

0800bc1c <fabsf>:
 800bc1c:	ee10 3a10 	vmov	r3, s0
 800bc20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc24:	ee00 3a10 	vmov	s0, r3
 800bc28:	4770      	bx	lr
	...

0800bc2c <scalbnf>:
 800bc2c:	ee10 3a10 	vmov	r3, s0
 800bc30:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800bc34:	d02b      	beq.n	800bc8e <scalbnf+0x62>
 800bc36:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bc3a:	d302      	bcc.n	800bc42 <scalbnf+0x16>
 800bc3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bc40:	4770      	bx	lr
 800bc42:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800bc46:	d123      	bne.n	800bc90 <scalbnf+0x64>
 800bc48:	4b24      	ldr	r3, [pc, #144]	@ (800bcdc <scalbnf+0xb0>)
 800bc4a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800bce0 <scalbnf+0xb4>
 800bc4e:	4298      	cmp	r0, r3
 800bc50:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bc54:	db17      	blt.n	800bc86 <scalbnf+0x5a>
 800bc56:	ee10 3a10 	vmov	r3, s0
 800bc5a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bc5e:	3a19      	subs	r2, #25
 800bc60:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bc64:	4288      	cmp	r0, r1
 800bc66:	dd15      	ble.n	800bc94 <scalbnf+0x68>
 800bc68:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800bce4 <scalbnf+0xb8>
 800bc6c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800bce8 <scalbnf+0xbc>
 800bc70:	ee10 3a10 	vmov	r3, s0
 800bc74:	eeb0 7a67 	vmov.f32	s14, s15
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	bfb8      	it	lt
 800bc7c:	eef0 7a66 	vmovlt.f32	s15, s13
 800bc80:	ee27 0a87 	vmul.f32	s0, s15, s14
 800bc84:	4770      	bx	lr
 800bc86:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bcec <scalbnf+0xc0>
 800bc8a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bc8e:	4770      	bx	lr
 800bc90:	0dd2      	lsrs	r2, r2, #23
 800bc92:	e7e5      	b.n	800bc60 <scalbnf+0x34>
 800bc94:	4410      	add	r0, r2
 800bc96:	28fe      	cmp	r0, #254	@ 0xfe
 800bc98:	dce6      	bgt.n	800bc68 <scalbnf+0x3c>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	dd06      	ble.n	800bcac <scalbnf+0x80>
 800bc9e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bca2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bca6:	ee00 3a10 	vmov	s0, r3
 800bcaa:	4770      	bx	lr
 800bcac:	f110 0f16 	cmn.w	r0, #22
 800bcb0:	da09      	bge.n	800bcc6 <scalbnf+0x9a>
 800bcb2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800bcec <scalbnf+0xc0>
 800bcb6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800bcf0 <scalbnf+0xc4>
 800bcba:	ee10 3a10 	vmov	r3, s0
 800bcbe:	eeb0 7a67 	vmov.f32	s14, s15
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	e7d9      	b.n	800bc7a <scalbnf+0x4e>
 800bcc6:	3019      	adds	r0, #25
 800bcc8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bccc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bcd0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800bcf4 <scalbnf+0xc8>
 800bcd4:	ee07 3a90 	vmov	s15, r3
 800bcd8:	e7d7      	b.n	800bc8a <scalbnf+0x5e>
 800bcda:	bf00      	nop
 800bcdc:	ffff3cb0 	.word	0xffff3cb0
 800bce0:	4c000000 	.word	0x4c000000
 800bce4:	7149f2ca 	.word	0x7149f2ca
 800bce8:	f149f2ca 	.word	0xf149f2ca
 800bcec:	0da24260 	.word	0x0da24260
 800bcf0:	8da24260 	.word	0x8da24260
 800bcf4:	33000000 	.word	0x33000000

0800bcf8 <__kernel_rem_pio2f>:
 800bcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfc:	ed2d 8b04 	vpush	{d8-d9}
 800bd00:	b0d9      	sub	sp, #356	@ 0x164
 800bd02:	4690      	mov	r8, r2
 800bd04:	9001      	str	r0, [sp, #4]
 800bd06:	4ab6      	ldr	r2, [pc, #728]	@ (800bfe0 <__kernel_rem_pio2f+0x2e8>)
 800bd08:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800bd0a:	f118 0f04 	cmn.w	r8, #4
 800bd0e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800bd12:	460f      	mov	r7, r1
 800bd14:	f103 3bff 	add.w	fp, r3, #4294967295
 800bd18:	db26      	blt.n	800bd68 <__kernel_rem_pio2f+0x70>
 800bd1a:	f1b8 0203 	subs.w	r2, r8, #3
 800bd1e:	bf48      	it	mi
 800bd20:	f108 0204 	addmi.w	r2, r8, #4
 800bd24:	10d2      	asrs	r2, r2, #3
 800bd26:	1c55      	adds	r5, r2, #1
 800bd28:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bd2a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800bff0 <__kernel_rem_pio2f+0x2f8>
 800bd2e:	00e8      	lsls	r0, r5, #3
 800bd30:	eba2 060b 	sub.w	r6, r2, fp
 800bd34:	9002      	str	r0, [sp, #8]
 800bd36:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800bd3a:	eb0a 0c0b 	add.w	ip, sl, fp
 800bd3e:	ac1c      	add	r4, sp, #112	@ 0x70
 800bd40:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800bd44:	2000      	movs	r0, #0
 800bd46:	4560      	cmp	r0, ip
 800bd48:	dd10      	ble.n	800bd6c <__kernel_rem_pio2f+0x74>
 800bd4a:	a91c      	add	r1, sp, #112	@ 0x70
 800bd4c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800bd50:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800bd54:	2600      	movs	r6, #0
 800bd56:	4556      	cmp	r6, sl
 800bd58:	dc24      	bgt.n	800bda4 <__kernel_rem_pio2f+0xac>
 800bd5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bd5e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800bff0 <__kernel_rem_pio2f+0x2f8>
 800bd62:	4684      	mov	ip, r0
 800bd64:	2400      	movs	r4, #0
 800bd66:	e016      	b.n	800bd96 <__kernel_rem_pio2f+0x9e>
 800bd68:	2200      	movs	r2, #0
 800bd6a:	e7dc      	b.n	800bd26 <__kernel_rem_pio2f+0x2e>
 800bd6c:	42c6      	cmn	r6, r0
 800bd6e:	bf5d      	ittte	pl
 800bd70:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800bd74:	ee07 1a90 	vmovpl	s15, r1
 800bd78:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bd7c:	eef0 7a47 	vmovmi.f32	s15, s14
 800bd80:	ece4 7a01 	vstmia	r4!, {s15}
 800bd84:	3001      	adds	r0, #1
 800bd86:	e7de      	b.n	800bd46 <__kernel_rem_pio2f+0x4e>
 800bd88:	ecfe 6a01 	vldmia	lr!, {s13}
 800bd8c:	ed3c 7a01 	vldmdb	ip!, {s14}
 800bd90:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bd94:	3401      	adds	r4, #1
 800bd96:	455c      	cmp	r4, fp
 800bd98:	ddf6      	ble.n	800bd88 <__kernel_rem_pio2f+0x90>
 800bd9a:	ece9 7a01 	vstmia	r9!, {s15}
 800bd9e:	3601      	adds	r6, #1
 800bda0:	3004      	adds	r0, #4
 800bda2:	e7d8      	b.n	800bd56 <__kernel_rem_pio2f+0x5e>
 800bda4:	a908      	add	r1, sp, #32
 800bda6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bdaa:	9104      	str	r1, [sp, #16]
 800bdac:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bdae:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800bfec <__kernel_rem_pio2f+0x2f4>
 800bdb2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800bfe8 <__kernel_rem_pio2f+0x2f0>
 800bdb6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800bdba:	9203      	str	r2, [sp, #12]
 800bdbc:	4654      	mov	r4, sl
 800bdbe:	00a2      	lsls	r2, r4, #2
 800bdc0:	9205      	str	r2, [sp, #20]
 800bdc2:	aa58      	add	r2, sp, #352	@ 0x160
 800bdc4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800bdc8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800bdcc:	a944      	add	r1, sp, #272	@ 0x110
 800bdce:	aa08      	add	r2, sp, #32
 800bdd0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800bdd4:	4694      	mov	ip, r2
 800bdd6:	4626      	mov	r6, r4
 800bdd8:	2e00      	cmp	r6, #0
 800bdda:	dc4c      	bgt.n	800be76 <__kernel_rem_pio2f+0x17e>
 800bddc:	4628      	mov	r0, r5
 800bdde:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bde2:	f7ff ff23 	bl	800bc2c <scalbnf>
 800bde6:	eeb0 8a40 	vmov.f32	s16, s0
 800bdea:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800bdee:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bdf2:	f000 f9e9 	bl	800c1c8 <floorf>
 800bdf6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800bdfa:	eea0 8a67 	vfms.f32	s16, s0, s15
 800bdfe:	2d00      	cmp	r5, #0
 800be00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be04:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800be08:	ee17 9a90 	vmov	r9, s15
 800be0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be10:	ee38 8a67 	vsub.f32	s16, s16, s15
 800be14:	dd41      	ble.n	800be9a <__kernel_rem_pio2f+0x1a2>
 800be16:	f104 3cff 	add.w	ip, r4, #4294967295
 800be1a:	a908      	add	r1, sp, #32
 800be1c:	f1c5 0e08 	rsb	lr, r5, #8
 800be20:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800be24:	fa46 f00e 	asr.w	r0, r6, lr
 800be28:	4481      	add	r9, r0
 800be2a:	fa00 f00e 	lsl.w	r0, r0, lr
 800be2e:	1a36      	subs	r6, r6, r0
 800be30:	f1c5 0007 	rsb	r0, r5, #7
 800be34:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800be38:	4106      	asrs	r6, r0
 800be3a:	2e00      	cmp	r6, #0
 800be3c:	dd3c      	ble.n	800beb8 <__kernel_rem_pio2f+0x1c0>
 800be3e:	f04f 0e00 	mov.w	lr, #0
 800be42:	f109 0901 	add.w	r9, r9, #1
 800be46:	4670      	mov	r0, lr
 800be48:	4574      	cmp	r4, lr
 800be4a:	dc68      	bgt.n	800bf1e <__kernel_rem_pio2f+0x226>
 800be4c:	2d00      	cmp	r5, #0
 800be4e:	dd03      	ble.n	800be58 <__kernel_rem_pio2f+0x160>
 800be50:	2d01      	cmp	r5, #1
 800be52:	d074      	beq.n	800bf3e <__kernel_rem_pio2f+0x246>
 800be54:	2d02      	cmp	r5, #2
 800be56:	d07d      	beq.n	800bf54 <__kernel_rem_pio2f+0x25c>
 800be58:	2e02      	cmp	r6, #2
 800be5a:	d12d      	bne.n	800beb8 <__kernel_rem_pio2f+0x1c0>
 800be5c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800be60:	ee30 8a48 	vsub.f32	s16, s0, s16
 800be64:	b340      	cbz	r0, 800beb8 <__kernel_rem_pio2f+0x1c0>
 800be66:	4628      	mov	r0, r5
 800be68:	9306      	str	r3, [sp, #24]
 800be6a:	f7ff fedf 	bl	800bc2c <scalbnf>
 800be6e:	9b06      	ldr	r3, [sp, #24]
 800be70:	ee38 8a40 	vsub.f32	s16, s16, s0
 800be74:	e020      	b.n	800beb8 <__kernel_rem_pio2f+0x1c0>
 800be76:	ee60 7a28 	vmul.f32	s15, s0, s17
 800be7a:	3e01      	subs	r6, #1
 800be7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be84:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800be88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800be8c:	ecac 0a01 	vstmia	ip!, {s0}
 800be90:	ed30 0a01 	vldmdb	r0!, {s0}
 800be94:	ee37 0a80 	vadd.f32	s0, s15, s0
 800be98:	e79e      	b.n	800bdd8 <__kernel_rem_pio2f+0xe0>
 800be9a:	d105      	bne.n	800bea8 <__kernel_rem_pio2f+0x1b0>
 800be9c:	1e60      	subs	r0, r4, #1
 800be9e:	a908      	add	r1, sp, #32
 800bea0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800bea4:	11f6      	asrs	r6, r6, #7
 800bea6:	e7c8      	b.n	800be3a <__kernel_rem_pio2f+0x142>
 800bea8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800beac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800beb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beb4:	da31      	bge.n	800bf1a <__kernel_rem_pio2f+0x222>
 800beb6:	2600      	movs	r6, #0
 800beb8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bec0:	f040 8098 	bne.w	800bff4 <__kernel_rem_pio2f+0x2fc>
 800bec4:	1e60      	subs	r0, r4, #1
 800bec6:	2200      	movs	r2, #0
 800bec8:	4550      	cmp	r0, sl
 800beca:	da4b      	bge.n	800bf64 <__kernel_rem_pio2f+0x26c>
 800becc:	2a00      	cmp	r2, #0
 800bece:	d065      	beq.n	800bf9c <__kernel_rem_pio2f+0x2a4>
 800bed0:	3c01      	subs	r4, #1
 800bed2:	ab08      	add	r3, sp, #32
 800bed4:	3d08      	subs	r5, #8
 800bed6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d0f8      	beq.n	800bed0 <__kernel_rem_pio2f+0x1d8>
 800bede:	4628      	mov	r0, r5
 800bee0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bee4:	f7ff fea2 	bl	800bc2c <scalbnf>
 800bee8:	1c63      	adds	r3, r4, #1
 800beea:	aa44      	add	r2, sp, #272	@ 0x110
 800beec:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800bfec <__kernel_rem_pio2f+0x2f4>
 800bef0:	0099      	lsls	r1, r3, #2
 800bef2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bef6:	4623      	mov	r3, r4
 800bef8:	2b00      	cmp	r3, #0
 800befa:	f280 80a9 	bge.w	800c050 <__kernel_rem_pio2f+0x358>
 800befe:	4623      	mov	r3, r4
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	f2c0 80c7 	blt.w	800c094 <__kernel_rem_pio2f+0x39c>
 800bf06:	aa44      	add	r2, sp, #272	@ 0x110
 800bf08:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800bf0c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800bfe4 <__kernel_rem_pio2f+0x2ec>
 800bf10:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800bff0 <__kernel_rem_pio2f+0x2f8>
 800bf14:	2000      	movs	r0, #0
 800bf16:	1ae2      	subs	r2, r4, r3
 800bf18:	e0b1      	b.n	800c07e <__kernel_rem_pio2f+0x386>
 800bf1a:	2602      	movs	r6, #2
 800bf1c:	e78f      	b.n	800be3e <__kernel_rem_pio2f+0x146>
 800bf1e:	f852 1b04 	ldr.w	r1, [r2], #4
 800bf22:	b948      	cbnz	r0, 800bf38 <__kernel_rem_pio2f+0x240>
 800bf24:	b121      	cbz	r1, 800bf30 <__kernel_rem_pio2f+0x238>
 800bf26:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800bf2a:	f842 1c04 	str.w	r1, [r2, #-4]
 800bf2e:	2101      	movs	r1, #1
 800bf30:	f10e 0e01 	add.w	lr, lr, #1
 800bf34:	4608      	mov	r0, r1
 800bf36:	e787      	b.n	800be48 <__kernel_rem_pio2f+0x150>
 800bf38:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800bf3c:	e7f5      	b.n	800bf2a <__kernel_rem_pio2f+0x232>
 800bf3e:	f104 3cff 	add.w	ip, r4, #4294967295
 800bf42:	aa08      	add	r2, sp, #32
 800bf44:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bf48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bf4c:	a908      	add	r1, sp, #32
 800bf4e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800bf52:	e781      	b.n	800be58 <__kernel_rem_pio2f+0x160>
 800bf54:	f104 3cff 	add.w	ip, r4, #4294967295
 800bf58:	aa08      	add	r2, sp, #32
 800bf5a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bf5e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800bf62:	e7f3      	b.n	800bf4c <__kernel_rem_pio2f+0x254>
 800bf64:	a908      	add	r1, sp, #32
 800bf66:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800bf6a:	3801      	subs	r0, #1
 800bf6c:	430a      	orrs	r2, r1
 800bf6e:	e7ab      	b.n	800bec8 <__kernel_rem_pio2f+0x1d0>
 800bf70:	3201      	adds	r2, #1
 800bf72:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800bf76:	2e00      	cmp	r6, #0
 800bf78:	d0fa      	beq.n	800bf70 <__kernel_rem_pio2f+0x278>
 800bf7a:	9905      	ldr	r1, [sp, #20]
 800bf7c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800bf80:	eb0d 0001 	add.w	r0, sp, r1
 800bf84:	18e6      	adds	r6, r4, r3
 800bf86:	a91c      	add	r1, sp, #112	@ 0x70
 800bf88:	f104 0c01 	add.w	ip, r4, #1
 800bf8c:	384c      	subs	r0, #76	@ 0x4c
 800bf8e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800bf92:	4422      	add	r2, r4
 800bf94:	4562      	cmp	r2, ip
 800bf96:	da04      	bge.n	800bfa2 <__kernel_rem_pio2f+0x2aa>
 800bf98:	4614      	mov	r4, r2
 800bf9a:	e710      	b.n	800bdbe <__kernel_rem_pio2f+0xc6>
 800bf9c:	9804      	ldr	r0, [sp, #16]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	e7e7      	b.n	800bf72 <__kernel_rem_pio2f+0x27a>
 800bfa2:	9903      	ldr	r1, [sp, #12]
 800bfa4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bfa8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800bfac:	9105      	str	r1, [sp, #20]
 800bfae:	ee07 1a90 	vmov	s15, r1
 800bfb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfb6:	2400      	movs	r4, #0
 800bfb8:	ece6 7a01 	vstmia	r6!, {s15}
 800bfbc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800bff0 <__kernel_rem_pio2f+0x2f8>
 800bfc0:	46b1      	mov	r9, r6
 800bfc2:	455c      	cmp	r4, fp
 800bfc4:	dd04      	ble.n	800bfd0 <__kernel_rem_pio2f+0x2d8>
 800bfc6:	ece0 7a01 	vstmia	r0!, {s15}
 800bfca:	f10c 0c01 	add.w	ip, ip, #1
 800bfce:	e7e1      	b.n	800bf94 <__kernel_rem_pio2f+0x29c>
 800bfd0:	ecfe 6a01 	vldmia	lr!, {s13}
 800bfd4:	ed39 7a01 	vldmdb	r9!, {s14}
 800bfd8:	3401      	adds	r4, #1
 800bfda:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bfde:	e7f0      	b.n	800bfc2 <__kernel_rem_pio2f+0x2ca>
 800bfe0:	0800c6ac 	.word	0x0800c6ac
 800bfe4:	0800c680 	.word	0x0800c680
 800bfe8:	43800000 	.word	0x43800000
 800bfec:	3b800000 	.word	0x3b800000
 800bff0:	00000000 	.word	0x00000000
 800bff4:	9b02      	ldr	r3, [sp, #8]
 800bff6:	eeb0 0a48 	vmov.f32	s0, s16
 800bffa:	eba3 0008 	sub.w	r0, r3, r8
 800bffe:	f7ff fe15 	bl	800bc2c <scalbnf>
 800c002:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800bfe8 <__kernel_rem_pio2f+0x2f0>
 800c006:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c00e:	db19      	blt.n	800c044 <__kernel_rem_pio2f+0x34c>
 800c010:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800bfec <__kernel_rem_pio2f+0x2f4>
 800c014:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c018:	aa08      	add	r2, sp, #32
 800c01a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c01e:	3508      	adds	r5, #8
 800c020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c024:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c028:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c02c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c030:	ee10 3a10 	vmov	r3, s0
 800c034:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c038:	ee17 3a90 	vmov	r3, s15
 800c03c:	3401      	adds	r4, #1
 800c03e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c042:	e74c      	b.n	800bede <__kernel_rem_pio2f+0x1e6>
 800c044:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c048:	aa08      	add	r2, sp, #32
 800c04a:	ee10 3a10 	vmov	r3, s0
 800c04e:	e7f6      	b.n	800c03e <__kernel_rem_pio2f+0x346>
 800c050:	a808      	add	r0, sp, #32
 800c052:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c056:	9001      	str	r0, [sp, #4]
 800c058:	ee07 0a90 	vmov	s15, r0
 800c05c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c060:	3b01      	subs	r3, #1
 800c062:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c066:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c06a:	ed62 7a01 	vstmdb	r2!, {s15}
 800c06e:	e743      	b.n	800bef8 <__kernel_rem_pio2f+0x200>
 800c070:	ecfc 6a01 	vldmia	ip!, {s13}
 800c074:	ecb5 7a01 	vldmia	r5!, {s14}
 800c078:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c07c:	3001      	adds	r0, #1
 800c07e:	4550      	cmp	r0, sl
 800c080:	dc01      	bgt.n	800c086 <__kernel_rem_pio2f+0x38e>
 800c082:	4290      	cmp	r0, r2
 800c084:	ddf4      	ble.n	800c070 <__kernel_rem_pio2f+0x378>
 800c086:	a858      	add	r0, sp, #352	@ 0x160
 800c088:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c08c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c090:	3b01      	subs	r3, #1
 800c092:	e735      	b.n	800bf00 <__kernel_rem_pio2f+0x208>
 800c094:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c096:	2b02      	cmp	r3, #2
 800c098:	dc09      	bgt.n	800c0ae <__kernel_rem_pio2f+0x3b6>
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	dc27      	bgt.n	800c0ee <__kernel_rem_pio2f+0x3f6>
 800c09e:	d040      	beq.n	800c122 <__kernel_rem_pio2f+0x42a>
 800c0a0:	f009 0007 	and.w	r0, r9, #7
 800c0a4:	b059      	add	sp, #356	@ 0x164
 800c0a6:	ecbd 8b04 	vpop	{d8-d9}
 800c0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ae:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c0b0:	2b03      	cmp	r3, #3
 800c0b2:	d1f5      	bne.n	800c0a0 <__kernel_rem_pio2f+0x3a8>
 800c0b4:	aa30      	add	r2, sp, #192	@ 0xc0
 800c0b6:	1f0b      	subs	r3, r1, #4
 800c0b8:	4413      	add	r3, r2
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	4620      	mov	r0, r4
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	dc50      	bgt.n	800c164 <__kernel_rem_pio2f+0x46c>
 800c0c2:	4622      	mov	r2, r4
 800c0c4:	2a01      	cmp	r2, #1
 800c0c6:	dc5d      	bgt.n	800c184 <__kernel_rem_pio2f+0x48c>
 800c0c8:	ab30      	add	r3, sp, #192	@ 0xc0
 800c0ca:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800bff0 <__kernel_rem_pio2f+0x2f8>
 800c0ce:	440b      	add	r3, r1
 800c0d0:	2c01      	cmp	r4, #1
 800c0d2:	dc67      	bgt.n	800c1a4 <__kernel_rem_pio2f+0x4ac>
 800c0d4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c0d8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c0dc:	2e00      	cmp	r6, #0
 800c0de:	d167      	bne.n	800c1b0 <__kernel_rem_pio2f+0x4b8>
 800c0e0:	edc7 6a00 	vstr	s13, [r7]
 800c0e4:	ed87 7a01 	vstr	s14, [r7, #4]
 800c0e8:	edc7 7a02 	vstr	s15, [r7, #8]
 800c0ec:	e7d8      	b.n	800c0a0 <__kernel_rem_pio2f+0x3a8>
 800c0ee:	ab30      	add	r3, sp, #192	@ 0xc0
 800c0f0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800bff0 <__kernel_rem_pio2f+0x2f8>
 800c0f4:	440b      	add	r3, r1
 800c0f6:	4622      	mov	r2, r4
 800c0f8:	2a00      	cmp	r2, #0
 800c0fa:	da24      	bge.n	800c146 <__kernel_rem_pio2f+0x44e>
 800c0fc:	b34e      	cbz	r6, 800c152 <__kernel_rem_pio2f+0x45a>
 800c0fe:	eef1 7a47 	vneg.f32	s15, s14
 800c102:	edc7 7a00 	vstr	s15, [r7]
 800c106:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800c10a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c10e:	aa31      	add	r2, sp, #196	@ 0xc4
 800c110:	2301      	movs	r3, #1
 800c112:	429c      	cmp	r4, r3
 800c114:	da20      	bge.n	800c158 <__kernel_rem_pio2f+0x460>
 800c116:	b10e      	cbz	r6, 800c11c <__kernel_rem_pio2f+0x424>
 800c118:	eef1 7a67 	vneg.f32	s15, s15
 800c11c:	edc7 7a01 	vstr	s15, [r7, #4]
 800c120:	e7be      	b.n	800c0a0 <__kernel_rem_pio2f+0x3a8>
 800c122:	ab30      	add	r3, sp, #192	@ 0xc0
 800c124:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800bff0 <__kernel_rem_pio2f+0x2f8>
 800c128:	440b      	add	r3, r1
 800c12a:	2c00      	cmp	r4, #0
 800c12c:	da05      	bge.n	800c13a <__kernel_rem_pio2f+0x442>
 800c12e:	b10e      	cbz	r6, 800c134 <__kernel_rem_pio2f+0x43c>
 800c130:	eef1 7a67 	vneg.f32	s15, s15
 800c134:	edc7 7a00 	vstr	s15, [r7]
 800c138:	e7b2      	b.n	800c0a0 <__kernel_rem_pio2f+0x3a8>
 800c13a:	ed33 7a01 	vldmdb	r3!, {s14}
 800c13e:	3c01      	subs	r4, #1
 800c140:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c144:	e7f1      	b.n	800c12a <__kernel_rem_pio2f+0x432>
 800c146:	ed73 7a01 	vldmdb	r3!, {s15}
 800c14a:	3a01      	subs	r2, #1
 800c14c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c150:	e7d2      	b.n	800c0f8 <__kernel_rem_pio2f+0x400>
 800c152:	eef0 7a47 	vmov.f32	s15, s14
 800c156:	e7d4      	b.n	800c102 <__kernel_rem_pio2f+0x40a>
 800c158:	ecb2 7a01 	vldmia	r2!, {s14}
 800c15c:	3301      	adds	r3, #1
 800c15e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c162:	e7d6      	b.n	800c112 <__kernel_rem_pio2f+0x41a>
 800c164:	ed72 7a01 	vldmdb	r2!, {s15}
 800c168:	edd2 6a01 	vldr	s13, [r2, #4]
 800c16c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c170:	3801      	subs	r0, #1
 800c172:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c176:	ed82 7a00 	vstr	s14, [r2]
 800c17a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c17e:	edc2 7a01 	vstr	s15, [r2, #4]
 800c182:	e79c      	b.n	800c0be <__kernel_rem_pio2f+0x3c6>
 800c184:	ed73 7a01 	vldmdb	r3!, {s15}
 800c188:	edd3 6a01 	vldr	s13, [r3, #4]
 800c18c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c190:	3a01      	subs	r2, #1
 800c192:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c196:	ed83 7a00 	vstr	s14, [r3]
 800c19a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c19e:	edc3 7a01 	vstr	s15, [r3, #4]
 800c1a2:	e78f      	b.n	800c0c4 <__kernel_rem_pio2f+0x3cc>
 800c1a4:	ed33 7a01 	vldmdb	r3!, {s14}
 800c1a8:	3c01      	subs	r4, #1
 800c1aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1ae:	e78f      	b.n	800c0d0 <__kernel_rem_pio2f+0x3d8>
 800c1b0:	eef1 6a66 	vneg.f32	s13, s13
 800c1b4:	eeb1 7a47 	vneg.f32	s14, s14
 800c1b8:	edc7 6a00 	vstr	s13, [r7]
 800c1bc:	ed87 7a01 	vstr	s14, [r7, #4]
 800c1c0:	eef1 7a67 	vneg.f32	s15, s15
 800c1c4:	e790      	b.n	800c0e8 <__kernel_rem_pio2f+0x3f0>
 800c1c6:	bf00      	nop

0800c1c8 <floorf>:
 800c1c8:	ee10 3a10 	vmov	r3, s0
 800c1cc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c1d0:	3a7f      	subs	r2, #127	@ 0x7f
 800c1d2:	2a16      	cmp	r2, #22
 800c1d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c1d8:	dc2b      	bgt.n	800c232 <floorf+0x6a>
 800c1da:	2a00      	cmp	r2, #0
 800c1dc:	da12      	bge.n	800c204 <floorf+0x3c>
 800c1de:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c244 <floorf+0x7c>
 800c1e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c1e6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ee:	dd06      	ble.n	800c1fe <floorf+0x36>
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	da24      	bge.n	800c23e <floorf+0x76>
 800c1f4:	2900      	cmp	r1, #0
 800c1f6:	4b14      	ldr	r3, [pc, #80]	@ (800c248 <floorf+0x80>)
 800c1f8:	bf08      	it	eq
 800c1fa:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c1fe:	ee00 3a10 	vmov	s0, r3
 800c202:	4770      	bx	lr
 800c204:	4911      	ldr	r1, [pc, #68]	@ (800c24c <floorf+0x84>)
 800c206:	4111      	asrs	r1, r2
 800c208:	420b      	tst	r3, r1
 800c20a:	d0fa      	beq.n	800c202 <floorf+0x3a>
 800c20c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c244 <floorf+0x7c>
 800c210:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c214:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c21c:	ddef      	ble.n	800c1fe <floorf+0x36>
 800c21e:	2b00      	cmp	r3, #0
 800c220:	bfbe      	ittt	lt
 800c222:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c226:	fa40 f202 	asrlt.w	r2, r0, r2
 800c22a:	189b      	addlt	r3, r3, r2
 800c22c:	ea23 0301 	bic.w	r3, r3, r1
 800c230:	e7e5      	b.n	800c1fe <floorf+0x36>
 800c232:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c236:	d3e4      	bcc.n	800c202 <floorf+0x3a>
 800c238:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c23c:	4770      	bx	lr
 800c23e:	2300      	movs	r3, #0
 800c240:	e7dd      	b.n	800c1fe <floorf+0x36>
 800c242:	bf00      	nop
 800c244:	7149f2ca 	.word	0x7149f2ca
 800c248:	bf800000 	.word	0xbf800000
 800c24c:	007fffff 	.word	0x007fffff

0800c250 <_init>:
 800c250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c252:	bf00      	nop
 800c254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c256:	bc08      	pop	{r3}
 800c258:	469e      	mov	lr, r3
 800c25a:	4770      	bx	lr

0800c25c <_fini>:
 800c25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25e:	bf00      	nop
 800c260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c262:	bc08      	pop	{r3}
 800c264:	469e      	mov	lr, r3
 800c266:	4770      	bx	lr
