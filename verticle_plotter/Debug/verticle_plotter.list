
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff7c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08010154  08010154  00011154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105b4  080105b4  000123f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080105b4  080105b4  000115b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105bc  080105bc  000123f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105bc  080105bc  000115bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080105c0  080105c0  000115c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003f0  20000000  080105c4  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002178  200003f0  080109b4  000123f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002568  080109b4  00012568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000123f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ba6c  00000000  00000000  00012420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053dc  00000000  00000000  0003de8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf8  00000000  00000000  00043268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015c4  00000000  00000000  00044e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d7e8  00000000  00000000  00046424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a7cf  00000000  00000000  00073c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119a44  00000000  00000000  0009e3db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b7e1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d88  00000000  00000000  001b7e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001bfbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200003f0 	.word	0x200003f0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0801013c 	.word	0x0801013c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200003f4 	.word	0x200003f4
 8000214:	0801013c 	.word	0x0801013c

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	e008      	b.n	8000f74 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	4413      	add	r3, r2
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3301      	adds	r3, #1
 8000f72:	61fb      	str	r3, [r7, #28]
 8000f74:	69fa      	ldr	r2, [r7, #28]
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d3f2      	bcc.n	8000f62 <ADC_DMA_Init+0x42>
    }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3724      	adds	r7, #36	@ 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	217f      	movs	r1, #127	@ 0x7f
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f007 fd2f 	bl	80089fc <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6859      	ldr	r1, [r3, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	461a      	mov	r2, r3
 8000fac:	f006 fe18 	bl	8007be0 <HAL_ADC_Start_DMA>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	e012      	b.n	8000ff8 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	617b      	str	r3, [r7, #20]
        samples++;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7b1b      	ldrb	r3, [r3, #12]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d3e7      	bcc.n	8000fd2 <ADC_DMA_GetValue+0x1a>
    }


    // Calculate raw ADC value and convert to voltage
    if (samples > 0) {
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00f      	beq.n	8001028 <ADC_DMA_GetValue+0x70>
        float raw_value = (float)sum / samples;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	ee07 3a90 	vmov	s15, r3
 8001018:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800101c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001020:	edc7 7a02 	vstr	s15, [r7, #8]
        return raw_value;
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	e001      	b.n	800102c <ADC_DMA_GetValue+0x74>
    }

    return 0.0f;
 8001028:	f04f 0300 	mov.w	r3, #0
}
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eeb0 0a67 	vmov.f32	s0, s15
 8001034:	371c      	adds	r7, #28
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <ADC_DMA_GetJoystick>:

    // Compute current using WCS1700 formula
    return 15.1793457908771 * voltage - 24.8674344063837;
}

float ADC_DMA_GetJoystick(ADC_DMA *adc_dma, uint8_t channel_index, float joydata) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	460b      	mov	r3, r1
 800104a:	ed87 0a01 	vstr	s0, [r7, #4]
 800104e:	72fb      	strb	r3, [r7, #11]
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	4619      	mov	r1, r3
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f7ff ffaf 	bl	8000fb8 <ADC_DMA_GetValue>
 800105a:	ed87 0a05 	vstr	s0, [r7, #20]

    return mapf(value, 0.0, adc_dma->adc_resolution, 0.0, joydata);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	edd3 7a05 	vldr	s15, [r3, #20]
 8001064:	ed97 2a01 	vldr	s4, [r7, #4]
 8001068:	eddf 1a08 	vldr	s3, [pc, #32]	@ 800108c <ADC_DMA_GetJoystick+0x4c>
 800106c:	eeb0 1a67 	vmov.f32	s2, s15
 8001070:	eddf 0a06 	vldr	s1, [pc, #24]	@ 800108c <ADC_DMA_GetJoystick+0x4c>
 8001074:	ed97 0a05 	vldr	s0, [r7, #20]
 8001078:	f000 fb54 	bl	8001724 <mapf>
 800107c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001080:	eeb0 0a67 	vmov.f32	s0, s15
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	00000000 	.word	0x00000000

08001090 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	ed87 0a03 	vstr	s0, [r7, #12]
 800109a:	60b8      	str	r0, [r7, #8]
 800109c:	6079      	str	r1, [r7, #4]
  if (_u > _upper_limit) return _upper_limit;
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80010ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	dd01      	ble.n	80010ba <PWM_Satuation+0x2a>
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	e013      	b.n	80010e2 <PWM_Satuation+0x52>
  else if (_u < _lower_limit) return _lower_limit;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80010c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d0:	d501      	bpl.n	80010d6 <PWM_Satuation+0x46>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	e005      	b.n	80010e2 <PWM_Satuation+0x52>
  return (int32_t)_u;
 80010d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80010da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010de:	ee17 3a90 	vmov	r3, s15
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 80010ee:	b480      	push	{r7}
 80010f0:	b087      	sub	sp, #28
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6178      	str	r0, [r7, #20]
 80010f6:	ed87 0a04 	vstr	s0, [r7, #16]
 80010fa:	edc7 0a03 	vstr	s1, [r7, #12]
 80010fe:	ed87 1a02 	vstr	s2, [r7, #8]
 8001102:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	619a      	str	r2, [r3, #24]

}
 8001136:	bf00      	nop
 8001138:	371c      	adds	r7, #28
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	ed87 0a00 	vstr	s0, [r7]
    if (!((controller->u >= controller->u_max && ek > 0) || (controller->u <= -controller->u_max && ek < 0))) {
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	ed93 7a06 	vldr	s14, [r3, #24]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	edd3 7a03 	vldr	s15, [r3, #12]
 800115a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001162:	bfac      	ite	ge
 8001164:	2301      	movge	r3, #1
 8001166:	2300      	movlt	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f083 0301 	eor.w	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10e      	bne.n	8001192 <PID_CONTROLLER_Compute+0x50>
 8001174:	edd7 7a00 	vldr	s15, [r7]
 8001178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001180:	bfcc      	ite	gt
 8001182:	2301      	movgt	r3, #1
 8001184:	2300      	movle	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f083 0301 	eor.w	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d057      	beq.n	8001242 <PID_CONTROLLER_Compute+0x100>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	ed93 7a06 	vldr	s14, [r3, #24]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edd3 7a03 	vldr	s15, [r3, #12]
 800119e:	eef1 7a67 	vneg.f32	s15, s15
 80011a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011aa:	bf94      	ite	ls
 80011ac:	2301      	movls	r3, #1
 80011ae:	2300      	movhi	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f083 0301 	eor.w	r3, r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10e      	bne.n	80011da <PID_CONTROLLER_Compute+0x98>
 80011bc:	edd7 7a00 	vldr	s15, [r7]
 80011c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	bf4c      	ite	mi
 80011ca:	2301      	movmi	r3, #1
 80011cc:	2300      	movpl	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f083 0301 	eor.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d033      	beq.n	8001242 <PID_CONTROLLER_Compute+0x100>
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	ed93 7a06 	vldr	s14, [r3, #24]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	edd3 6a00 	vldr	s13, [r3]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80011ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80011f6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011fa:	edd7 7a00 	vldr	s15, [r7]
 80011fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
                         - ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	ed93 6a00 	vldr	s12, [r3]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	edd3 7a02 	vldr	s15, [r3, #8]
 800120e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001212:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	edd3 7a04 	vldr	s15, [r3, #16]
 800121c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001220:	ee76 6ae7 	vsub.f32	s13, s13, s15
                         + (controller->Kd * controller->ek_2);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 6a02 	vldr	s12, [r3, #8]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001230:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001234:	ee76 7aa7 	vadd.f32	s15, s13, s15
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 8001238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	edc3 7a06 	vstr	s15, [r3, #24]
    }
    controller->ek_2 = controller->ek_1;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691a      	ldr	r2, [r3, #16]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	615a      	str	r2, [r3, #20]
    controller->ek_1 = ek;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	611a      	str	r2, [r3, #16]
    return controller->u;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	ee07 3a90 	vmov	s15, r3
}
 8001258:	eeb0 0a67 	vmov.f32	s0, s15
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	4613      	mov	r3, r2
 8001274:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	88fa      	ldrh	r2, [r7, #6]
 8001280:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3328      	adds	r3, #40	@ 0x28
 8001286:	88fa      	ldrh	r2, [r7, #6]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	4618      	mov	r0, r3
 800128c:	f001 fb02 	bl	8002894 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	8b3a      	ldrh	r2, [r7, #24]
 800129a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80012bc:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d15f      	bne.n	800138a <MDXX_set_range+0xda>
		if (duty == 0) {
 80012ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d6:	d115      	bne.n	8001304 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3310      	adds	r3, #16
 80012dc:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 800145c <MDXX_set_range+0x1ac>
 80012e0:	ed97 0a02 	vldr	s0, [r7, #8]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fbfb 	bl	8002ae0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3328      	adds	r3, #40	@ 0x28
 80012ee:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 800145c <MDXX_set_range+0x1ac>
 80012f2:	ed97 0a02 	vldr	s0, [r7, #8]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f001 fbf2 	bl	8002ae0 <PWM_write_range>
			mdxx->cmd = 0;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 8001302:	e0a6      	b.n	8001452 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001304:	edd7 7a01 	vldr	s15, [r7, #4]
 8001308:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800130c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001310:	dd1a      	ble.n	8001348 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3310      	adds	r3, #16
 8001316:	eddf 0a51 	vldr	s1, [pc, #324]	@ 800145c <MDXX_set_range+0x1ac>
 800131a:	ed97 0a02 	vldr	s0, [r7, #8]
 800131e:	4618      	mov	r0, r3
 8001320:	f001 fbde 	bl	8002ae0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3328      	adds	r3, #40	@ 0x28
 8001328:	edd7 0a01 	vldr	s1, [r7, #4]
 800132c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001330:	4618      	mov	r0, r3
 8001332:	f001 fbd5 	bl	8002ae0 <PWM_write_range>
			mdxx->cmd = duty;
 8001336:	edd7 7a01 	vldr	s15, [r7, #4]
 800133a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133e:	ee17 2a90 	vmov	r2, s15
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001346:	e084      	b.n	8001452 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3310      	adds	r3, #16
 800134c:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001460 <MDXX_set_range+0x1b0>
 8001350:	ed97 0a02 	vldr	s0, [r7, #8]
 8001354:	4618      	mov	r0, r3
 8001356:	f001 fbc3 	bl	8002ae0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3328      	adds	r3, #40	@ 0x28
 800135e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001362:	eef0 7ae7 	vabs.f32	s15, s15
 8001366:	eef0 0a67 	vmov.f32	s1, s15
 800136a:	ed97 0a02 	vldr	s0, [r7, #8]
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fbb6 	bl	8002ae0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001374:	edd7 7a01 	vldr	s15, [r7, #4]
 8001378:	eef0 7ae7 	vabs.f32	s15, s15
 800137c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001380:	ee17 2a90 	vmov	r2, s15
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001388:	e063      	b.n	8001452 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001390:	2b01      	cmp	r3, #1
 8001392:	d15e      	bne.n	8001452 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001394:	edd7 7a01 	vldr	s15, [r7, #4]
 8001398:	eef5 7a40 	vcmp.f32	s15, #0.0
 800139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a0:	d115      	bne.n	80013ce <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013ac:	2200      	movs	r2, #0
 80013ae:	4619      	mov	r1, r3
 80013b0:	f008 fa6a 	bl	8009888 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3328      	adds	r3, #40	@ 0x28
 80013b8:	eddf 0a28 	vldr	s1, [pc, #160]	@ 800145c <MDXX_set_range+0x1ac>
 80013bc:	ed97 0a02 	vldr	s0, [r7, #8]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f001 fb8d 	bl	8002ae0 <PWM_write_range>
			mdxx->cmd = 0;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2200      	movs	r2, #0
 80013ca:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80013cc:	e041      	b.n	8001452 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80013ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	dd1a      	ble.n	8001412 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013e6:	2200      	movs	r2, #0
 80013e8:	4619      	mov	r1, r3
 80013ea:	f008 fa4d 	bl	8009888 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	3328      	adds	r3, #40	@ 0x28
 80013f2:	edd7 0a01 	vldr	s1, [r7, #4]
 80013f6:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 fb70 	bl	8002ae0 <PWM_write_range>
			mdxx->cmd = duty;
 8001400:	edd7 7a01 	vldr	s15, [r7, #4]
 8001404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001408:	ee17 2a90 	vmov	r2, s15
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001410:	e01f      	b.n	8001452 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800141c:	2201      	movs	r2, #1
 800141e:	4619      	mov	r1, r3
 8001420:	f008 fa32 	bl	8009888 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3328      	adds	r3, #40	@ 0x28
 8001428:	edd7 7a01 	vldr	s15, [r7, #4]
 800142c:	eef0 7ae7 	vabs.f32	s15, s15
 8001430:	eef0 0a67 	vmov.f32	s1, s15
 8001434:	ed97 0a02 	vldr	s0, [r7, #8]
 8001438:	4618      	mov	r0, r3
 800143a:	f001 fb51 	bl	8002ae0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800143e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001442:	eef0 7ae7 	vabs.f32	s15, s15
 8001446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800144a:	ee17 2a90 	vmov	r2, s15
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	00000000 	.word	0x00000000
 8001460:	42c80000 	.word	0x42c80000

08001464 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	605a      	str	r2, [r3, #4]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	601a      	str	r2, [r3, #0]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	605a      	str	r2, [r3, #4]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	ed2d 8b02 	vpush	{d8}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	460b      	mov	r3, r1
 80014f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80014f6:	edc7 0a00 	vstr	s1, [r7]
 80014fa:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 80014fc:	897b      	ldrh	r3, [r7, #10]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	b29b      	uxth	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <FIR_init+0x2a>
        numTaps += 1;
 8001508:	897b      	ldrh	r3, [r7, #10]
 800150a:	3301      	adds	r3, #1
 800150c:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	897a      	ldrh	r2, [r7, #10]
 8001512:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 800151a:	897b      	ldrh	r3, [r7, #10]
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4618      	mov	r0, r3
 8001520:	f00d fef6 	bl	800f310 <malloc>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 800152c:	897b      	ldrh	r3, [r7, #10]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4618      	mov	r0, r3
 8001532:	f00d feed 	bl	800f310 <malloc>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 80e0 	beq.w	8001708 <FIR_init+0x224>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80db 	beq.w	8001708 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001552:	2300      	movs	r3, #0
 8001554:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001556:	e00a      	b.n	800156e <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001568:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800156a:	3301      	adds	r3, #1
 800156c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800156e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001570:	897b      	ldrh	r3, [r7, #10]
 8001572:	429a      	cmp	r2, r3
 8001574:	d3f0      	bcc.n	8001558 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001576:	edd7 6a01 	vldr	s13, [r7, #4]
 800157a:	ed97 7a00 	vldr	s14, [r7]
 800157e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001582:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001586:	897b      	ldrh	r3, [r7, #10]
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	b29b      	uxth	r3, r3
 800158c:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 800158e:	2300      	movs	r3, #0
 8001590:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001592:	e077      	b.n	8001684 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001594:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001598:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800159c:	429a      	cmp	r2, r3
 800159e:	d10c      	bne.n	80015ba <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80015b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015b4:	edc3 7a00 	vstr	s15, [r3]
 80015b8:	e02c      	b.n	8001614 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 80015ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80015bc:	8afb      	ldrh	r3, [r7, #22]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 80015c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015c8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001714 <FIR_init+0x230>
 80015cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015d4:	ee07 3a90 	vmov	s15, r3
 80015d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e0:	eeb0 0a67 	vmov.f32	s0, s15
 80015e4:	f00d fffe 	bl	800f5e4 <sinf>
 80015e8:	eef0 6a40 	vmov.f32	s13, s0
 80015ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001718 <FIR_init+0x234>
 80015fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001610:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	ed93 8a00 	vldr	s16, [r3]
 8001624:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001630:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001714 <FIR_init+0x230>
 8001634:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001638:	897b      	ldrh	r3, [r7, #10]
 800163a:	3b01      	subs	r3, #1
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001644:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001648:	eeb0 0a66 	vmov.f32	s0, s13
 800164c:	f00d ff86 	bl	800f55c <cosf>
 8001650:	eef0 7a40 	vmov.f32	s15, s0
 8001654:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800171c <FIR_init+0x238>
 8001658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800165c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001720 <FIR_init+0x23c>
 8001660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001674:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001678:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800167c:	b29b      	uxth	r3, r3
 800167e:	3301      	adds	r3, #1
 8001680:	b29b      	uxth	r3, r3
 8001682:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001684:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001688:	897b      	ldrh	r3, [r7, #10]
 800168a:	429a      	cmp	r2, r3
 800168c:	db82      	blt.n	8001594 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001694:	2300      	movs	r3, #0
 8001696:	83fb      	strh	r3, [r7, #30]
 8001698:	e00f      	b.n	80016ba <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	8bfb      	ldrh	r3, [r7, #30]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	ed97 7a08 	vldr	s14, [r7, #32]
 80016ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b0:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80016b4:	8bfb      	ldrh	r3, [r7, #30]
 80016b6:	3301      	adds	r3, #1
 80016b8:	83fb      	strh	r3, [r7, #30]
 80016ba:	8bfa      	ldrh	r2, [r7, #30]
 80016bc:	897b      	ldrh	r3, [r7, #10]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d3eb      	bcc.n	800169a <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 80016c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80016c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ce:	d01b      	beq.n	8001708 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 80016d0:	2300      	movs	r3, #0
 80016d2:	83bb      	strh	r3, [r7, #28]
 80016d4:	e014      	b.n	8001700 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	8bbb      	ldrh	r3, [r7, #28]
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	edd3 6a00 	vldr	s13, [r3]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	8bbb      	ldrh	r3, [r7, #28]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	ed97 7a08 	vldr	s14, [r7, #32]
 80016f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f6:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 80016fa:	8bbb      	ldrh	r3, [r7, #28]
 80016fc:	3301      	adds	r3, #1
 80016fe:	83bb      	strh	r3, [r7, #28]
 8001700:	8bba      	ldrh	r2, [r7, #28]
 8001702:	897b      	ldrh	r3, [r7, #10]
 8001704:	429a      	cmp	r2, r3
 8001706:	d3e6      	bcc.n	80016d6 <FIR_init+0x1f2>
            }
        }
    }
}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	@ 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	ecbd 8b02 	vpop	{d8}
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40c90fdb 	.word	0x40c90fdb
 8001718:	40490fdb 	.word	0x40490fdb
 800171c:	3eeb851f 	.word	0x3eeb851f
 8001720:	3f0a3d71 	.word	0x3f0a3d71

08001724 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	@ 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	ed87 0a05 	vstr	s0, [r7, #20]
 800172e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001732:	ed87 1a03 	vstr	s2, [r7, #12]
 8001736:	edc7 1a02 	vstr	s3, [r7, #8]
 800173a:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 800173e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001742:	edd7 7a04 	vldr	s15, [r7, #16]
 8001746:	ee77 6a67 	vsub.f32	s13, s14, s15
 800174a:	ed97 7a03 	vldr	s14, [r7, #12]
 800174e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001752:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800175a:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 800175e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001762:	edd7 7a02 	vldr	s15, [r7, #8]
 8001766:	ee37 7a67 	vsub.f32	s14, s14, s15
 800176a:	edd7 7a07 	vldr	s15, [r7, #28]
 800176e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001772:	ed97 7a02 	vldr	s14, [r7, #8]
 8001776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177a:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	ee07 3a90 	vmov	s15, r3
}
 8001784:	eeb0 0a67 	vmov.f32	s0, s15
 8001788:	3724      	adds	r7, #36	@ 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <saturation>:

float saturation(float input, float upper_limit, float lower_limit) {
 8001792:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	ed87 0a03 	vstr	s0, [r7, #12]
 800179e:	edc7 0a02 	vstr	s1, [r7, #8]
 80017a2:	ed87 1a01 	vstr	s2, [r7, #4]
    return fmin(upper_limit, fmax(input, lower_limit));
 80017a6:	68b8      	ldr	r0, [r7, #8]
 80017a8:	f7fe fe9a 	bl	80004e0 <__aeabi_f2d>
 80017ac:	4604      	mov	r4, r0
 80017ae:	460d      	mov	r5, r1
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f7fe fe95 	bl	80004e0 <__aeabi_f2d>
 80017b6:	4680      	mov	r8, r0
 80017b8:	4689      	mov	r9, r1
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7fe fe90 	bl	80004e0 <__aeabi_f2d>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	ec43 2b11 	vmov	d1, r2, r3
 80017c8:	ec49 8b10 	vmov	d0, r8, r9
 80017cc:	f00d ff50 	bl	800f670 <fmax>
 80017d0:	eeb0 7a40 	vmov.f32	s14, s0
 80017d4:	eef0 7a60 	vmov.f32	s15, s1
 80017d8:	eeb0 1a47 	vmov.f32	s2, s14
 80017dc:	eef0 1a67 	vmov.f32	s3, s15
 80017e0:	ec45 4b10 	vmov	d0, r4, r5
 80017e4:	f00d ff6e 	bl	800f6c4 <fmin>
 80017e8:	ec53 2b10 	vmov	r2, r3, d0
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff f9b0 	bl	8000b54 <__aeabi_d2f>
 80017f4:	4603      	mov	r3, r0
 80017f6:	ee07 3a90 	vmov	s15, r3
}
 80017fa:	eeb0 0a67 	vmov.f32	s0, s15
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001808 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800180c:	4b0d      	ldr	r3, [pc, #52]	@ (8001844 <modbus_1t5_Timeout+0x3c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <modbus_1t5_Timeout+0x3c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2200      	movs	r2, #0
 800181e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <modbus_1t5_Timeout+0x3c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <modbus_1t5_Timeout+0x3c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	2000040c 	.word	0x2000040c

08001848 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <modbus_3t5_Timeout+0x1c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2201      	movs	r2, #1
 8001856:	755a      	strb	r2, [r3, #21]

}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	2000040c 	.word	0x2000040c

08001868 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f00b ff33 	bl	800d6dc <HAL_UART_GetError>
 8001876:	4603      	mov	r3, r0
 8001878:	2b20      	cmp	r3, #32
 800187a:	d101      	bne.n	8001880 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 800187c:	f7ff ffc4 	bl	8001808 <modbus_1t5_Timeout>

	}
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001896:	4a2d      	ldr	r2, [pc, #180]	@ (800194c <Modbus_init+0xc4>)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 800189c:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <Modbus_init+0xc4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 80018a4:	4b29      	ldr	r3, [pc, #164]	@ (800194c <Modbus_init+0xc4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 80018ac:	4b27      	ldr	r3, [pc, #156]	@ (800194c <Modbus_init+0xc4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 80018b4:	4b25      	ldr	r3, [pc, #148]	@ (800194c <Modbus_init+0xc4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	7e3a      	ldrb	r2, [r7, #24]
 80018ba:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 80018bc:	4b23      	ldr	r3, [pc, #140]	@ (800194c <Modbus_init+0xc4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	4a21      	ldr	r2, [pc, #132]	@ (8001950 <Modbus_init+0xc8>)
 80018ca:	210e      	movs	r1, #14
 80018cc:	4618      	mov	r0, r3
 80018ce:	f00a f933 	bl	800bb38 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2110      	movs	r1, #16
 80018d8:	4618      	mov	r0, r3
 80018da:	f00b fea9 	bl	800d630 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00b fec0 	bl	800d668 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4a19      	ldr	r2, [pc, #100]	@ (8001954 <Modbus_init+0xcc>)
 80018ee:	2104      	movs	r1, #4
 80018f0:	4618      	mov	r0, r3
 80018f2:	f00b f971 	bl	800cbd8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <Modbus_init+0xc4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80018fc:	4b13      	ldr	r3, [pc, #76]	@ (800194c <Modbus_init+0xc4>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b12      	ldr	r3, [pc, #72]	@ (800194c <Modbus_init+0xc4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001908:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800190c:	4413      	add	r3, r2
 800190e:	3302      	adds	r3, #2
 8001910:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001914:	4619      	mov	r1, r3
 8001916:	f00b fa99 	bl	800ce4c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800191a:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <Modbus_init+0xc4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d10c      	bne.n	8001944 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800192a:	4b08      	ldr	r3, [pc, #32]	@ (800194c <Modbus_init+0xc4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	4618      	mov	r0, r3
 8001932:	f009 f8dd 	bl	800aaf0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001936:	4b05      	ldr	r3, [pc, #20]	@ (800194c <Modbus_init+0xc4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f009 fb2c 	bl	800af9c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000040c 	.word	0x2000040c
 8001950:	08001849 	.word	0x08001849
 8001954:	08001869 	.word	0x08001869

08001958 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001964:	23ff      	movs	r3, #255	@ 0xff
 8001966:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001968:	23ff      	movs	r3, #255	@ 0xff
 800196a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800196c:	e013      	b.n	8001996 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	7bbb      	ldrb	r3, [r7, #14]
 8001978:	4053      	eors	r3, r2
 800197a:	b2db      	uxtb	r3, r3
 800197c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800197e:	4a10      	ldr	r2, [pc, #64]	@ (80019c0 <CRC16+0x68>)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	4413      	add	r3, r2
 8001984:	781a      	ldrb	r2, [r3, #0]
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	4053      	eors	r3, r2
 800198a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <CRC16+0x6c>)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	4413      	add	r3, r2
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001996:	883b      	ldrh	r3, [r7, #0]
 8001998:	1e5a      	subs	r2, r3, #1
 800199a:	803a      	strh	r2, [r7, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e6      	bne.n	800196e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	7bbb      	ldrb	r3, [r7, #14]
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	b29b      	uxth	r3, r3
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	200001e8 	.word	0x200001e8
 80019c4:	200000e8 	.word	0x200000e8

080019c8 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80019ce:	4b7e      	ldr	r3, [pc, #504]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	7ddb      	ldrb	r3, [r3, #23]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d80a      	bhi.n	80019f0 <Modbus_Protocal_Worker+0x28>
 80019da:	a201      	add	r2, pc, #4	@ (adr r2, 80019e0 <Modbus_Protocal_Worker+0x18>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	080019fb 	.word	0x080019fb
 80019e4:	08001b8f 	.word	0x08001b8f
 80019e8:	08001a87 	.word	0x08001a87
 80019ec:	08001acb 	.word	0x08001acb
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80019f0:	4b75      	ldr	r3, [pc, #468]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2201      	movs	r2, #1
 80019f6:	75da      	strb	r2, [r3, #23]
		break;
 80019f8:	e0e1      	b.n	8001bbe <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80019fa:	4b73      	ldr	r3, [pc, #460]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8001a06:	4b70      	ldr	r3, [pc, #448]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001a0e:	f000 f9cd 	bl	8001dac <Modbus_Emission>
 8001a12:	e018      	b.n	8001a46 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001a14:	4b6c      	ldr	r3, [pc, #432]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d00b      	beq.n	8001a46 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001a2e:	4b66      	ldr	r3, [pc, #408]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2200      	movs	r2, #0
 8001a34:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001a36:	4b64      	ldr	r3, [pc, #400]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001a3e:	4b62      	ldr	r3, [pc, #392]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2203      	movs	r2, #3
 8001a44:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001a46:	4b60      	ldr	r3, [pc, #384]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a50:	2b20      	cmp	r3, #32
 8001a52:	f040 80ad 	bne.w	8001bb0 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001a56:	4b5c      	ldr	r3, [pc, #368]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001a60:	4b59      	ldr	r3, [pc, #356]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001a66:	4b58      	ldr	r3, [pc, #352]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b57      	ldr	r3, [pc, #348]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001a72:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001a76:	4413      	add	r3, r2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f00b f9e4 	bl	800ce4c <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001a84:	e094      	b.n	8001bb0 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001a86:	4b50      	ldr	r3, [pc, #320]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	7d1b      	ldrb	r3, [r3, #20]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 8091 	beq.w	8001bb4 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001a92:	4b4d      	ldr	r3, [pc, #308]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	22fe      	movs	r2, #254	@ 0xfe
 8001a98:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001aa4:	4b48      	ldr	r3, [pc, #288]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001ab4:	4b44      	ldr	r3, [pc, #272]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001ab8:	1a8a      	subs	r2, r1, r2
 8001aba:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001abc:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001ac0:	4b41      	ldr	r3, [pc, #260]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001ac8:	e074      	b.n	8001bb4 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001aca:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001ad2:	f113 0f02 	cmn.w	r3, #2
 8001ad6:	d150      	bne.n	8001b7a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2200      	movs	r2, #0
 8001ade:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001ae0:	4b39      	ldr	r3, [pc, #228]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001ae8:	4b37      	ldr	r3, [pc, #220]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001af0:	3b02      	subs	r3, #2
 8001af2:	4619      	mov	r1, r3
 8001af4:	4610      	mov	r0, r2
 8001af6:	f7ff ff2f 	bl	8001958 <CRC16>
 8001afa:	4603      	mov	r3, r0
 8001afc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001afe:	793a      	ldrb	r2, [r7, #4]
 8001b00:	4b31      	ldr	r3, [pc, #196]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b02:	6819      	ldr	r1, [r3, #0]
 8001b04:	4b30      	ldr	r3, [pc, #192]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001b0c:	3b02      	subs	r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d10c      	bne.n	8001b32 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001b18:	797a      	ldrb	r2, [r7, #5]
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001b26:	3b01      	subs	r3, #1
 8001b28:	440b      	add	r3, r1
 8001b2a:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d004      	beq.n	8001b3c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001b32:	4b25      	ldr	r3, [pc, #148]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	22ff      	movs	r2, #255	@ 0xff
 8001b38:	759a      	strb	r2, [r3, #22]
				break;
 8001b3a:	e040      	b.n	8001bbe <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001b3c:	4b22      	ldr	r3, [pc, #136]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001b44:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d113      	bne.n	8001b76 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001b56:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001b5e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001b60:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001b68:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f00d fcca 	bl	800f504 <memcpy>

			//execute command
			Modbus_frame_response();
 8001b70:	f000 f904 	bl	8001d7c <Modbus_frame_response>
 8001b74:	e001      	b.n	8001b7a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001b76:	bf00      	nop
					}
		break;


	}
}
 8001b78:	e021      	b.n	8001bbe <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001b7a:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	7d5b      	ldrb	r3, [r3, #21]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d019      	beq.n	8001bb8 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001b84:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	75da      	strb	r2, [r3, #23]
		break;
 8001b8c:	e014      	b.n	8001bb8 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b98:	2b20      	cmp	r3, #32
 8001b9a:	d10f      	bne.n	8001bbc <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2201      	movs	r2, #1
 8001bac:	75da      	strb	r2, [r3, #23]
		break;
 8001bae:	e005      	b.n	8001bbc <Modbus_Protocal_Worker+0x1f4>
		break;
 8001bb0:	bf00      	nop
 8001bb2:	e004      	b.n	8001bbe <Modbus_Protocal_Worker+0x1f6>
		break;
 8001bb4:	bf00      	nop
 8001bb6:	e002      	b.n	8001bbe <Modbus_Protocal_Worker+0x1f6>
		break;
 8001bb8:	bf00      	nop
 8001bba:	e000      	b.n	8001bbe <Modbus_Protocal_Worker+0x1f6>
		break;
 8001bbc:	bf00      	nop
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2000040c 	.word	0x2000040c

08001bcc <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	7e5b      	ldrb	r3, [r3, #25]
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	7e92      	ldrb	r2, [r2, #26]
 8001be2:	4413      	add	r3, r2
 8001be4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001be6:	88fa      	ldrh	r2, [r7, #6]
 8001be8:	4b17      	ldr	r3, [pc, #92]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d903      	bls.n	8001bfa <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	f000 f8a0 	bl	8001d38 <ModbusErrorReply>
			 return;
 8001bf8:	e023      	b.n	8001c42 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001bfa:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6859      	ldr	r1, [r3, #4]
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	440b      	add	r3, r1
 8001c0a:	7ed2      	ldrb	r2, [r2, #27]
 8001c0c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6859      	ldr	r1, [r3, #4]
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	440b      	add	r3, r1
 8001c1e:	7f12      	ldrb	r2, [r2, #28]
 8001c20:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8001c2a:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001c30:	2208      	movs	r2, #8
 8001c32:	4619      	mov	r1, r3
 8001c34:	f00d fc66 	bl	800f504 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2205      	movs	r2, #5
 8001c3e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2000040c 	.word	0x2000040c

08001c4c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001c52:	4b38      	ldr	r3, [pc, #224]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	7edb      	ldrb	r3, [r3, #27]
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4a35      	ldr	r2, [pc, #212]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	7f12      	ldrb	r2, [r2, #28]
 8001c62:	4413      	add	r3, r2
 8001c64:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001c66:	4b33      	ldr	r3, [pc, #204]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	7e5b      	ldrb	r3, [r3, #25]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	4a30      	ldr	r2, [pc, #192]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	7e92      	ldrb	r2, [r2, #26]
 8001c76:	4413      	add	r3, r2
 8001c78:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <modbusRead1Register+0x3a>
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	2b7d      	cmp	r3, #125	@ 0x7d
 8001c84:	d903      	bls.n	8001c8e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001c86:	2003      	movs	r0, #3
 8001c88:	f000 f856 	bl	8001d38 <ModbusErrorReply>
		 return;
 8001c8c:	e04e      	b.n	8001d2c <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001c8e:	88ba      	ldrh	r2, [r7, #4]
 8001c90:	4b28      	ldr	r3, [pc, #160]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d808      	bhi.n	8001cac <modbusRead1Register+0x60>
 8001c9a:	88ba      	ldrh	r2, [r7, #4]
 8001c9c:	88fb      	ldrh	r3, [r7, #6]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b24      	ldr	r3, [pc, #144]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d903      	bls.n	8001cb4 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001cac:	2002      	movs	r0, #2
 8001cae:	f000 f843 	bl	8001d38 <ModbusErrorReply>
		 return;
 8001cb2:	e03b      	b.n	8001d2c <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	0052      	lsls	r2, r2, #1
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001cce:	2400      	movs	r4, #0
 8001cd0:	e020      	b.n	8001d14 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001cd2:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	88bb      	ldrh	r3, [r7, #4]
 8001cda:	4423      	add	r3, r4
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	18d1      	adds	r1, r2, r3
 8001ce0:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	1c63      	adds	r3, r4, #1
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	7849      	ldrb	r1, [r1, #1]
 8001cea:	4413      	add	r3, r2
 8001cec:	460a      	mov	r2, r1
 8001cee:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	88bb      	ldrh	r3, [r7, #4]
 8001cfa:	4423      	add	r3, r4
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	18d1      	adds	r1, r2, r3
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	0063      	lsls	r3, r4, #1
 8001d06:	3303      	adds	r3, #3
 8001d08:	7809      	ldrb	r1, [r1, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	460a      	mov	r2, r1
 8001d0e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001d12:	3401      	adds	r4, #1
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	429c      	cmp	r4, r3
 8001d18:	dbdb      	blt.n	8001cd2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0052      	lsls	r2, r2, #1
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd90      	pop	{r4, r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2000040c 	.word	0x2000040c

08001d38 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001d42:	4b0d      	ldr	r3, [pc, #52]	@ (8001d78 <ModbusErrorReply+0x40>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	7e1a      	ldrb	r2, [r3, #24]
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <ModbusErrorReply+0x40>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001d56:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <ModbusErrorReply+0x40>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	79fa      	ldrb	r2, [r7, #7]
 8001d5c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001d60:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <ModbusErrorReply+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2202      	movs	r2, #2
 8001d66:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	2000040c 	.word	0x2000040c

08001d7c <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001d80:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <Modbus_frame_response+0x2c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	7e1b      	ldrb	r3, [r3, #24]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d004      	beq.n	8001d94 <Modbus_frame_response+0x18>
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d105      	bne.n	8001d9a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001d8e:	f7ff ff1d 	bl	8001bcc <modbusWrite1Register>
		break;
 8001d92:	e006      	b.n	8001da2 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001d94:	f7ff ff5a 	bl	8001c4c <modbusRead1Register>
		break;
 8001d98:	e003      	b.n	8001da2 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff ffcc 	bl	8001d38 <ModbusErrorReply>
		break;
 8001da0:	bf00      	nop

	}
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	2000040c 	.word	0x2000040c

08001dac <Modbus_Emission>:

void Modbus_Emission()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001db2:	4b38      	ldr	r3, [pc, #224]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d15d      	bne.n	8001e7c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001dc0:	4b34      	ldr	r3, [pc, #208]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b33      	ldr	r3, [pc, #204]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	7812      	ldrb	r2, [r2, #0]
 8001dca:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001dce:	4b31      	ldr	r3, [pc, #196]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001dd6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001de0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001de8:	461a      	mov	r2, r3
 8001dea:	f00d fb8b 	bl	800f504 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001dee:	4b29      	ldr	r3, [pc, #164]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b26      	ldr	r3, [pc, #152]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3203      	adds	r2, #3
 8001dfe:	b292      	uxth	r2, r2
 8001e00:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001e04:	4b23      	ldr	r3, [pc, #140]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001e0c:	4b21      	ldr	r3, [pc, #132]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001e14:	3b02      	subs	r3, #2
 8001e16:	4619      	mov	r1, r3
 8001e18:	4610      	mov	r0, r2
 8001e1a:	f7ff fd9d 	bl	8001958 <CRC16>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001e22:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4b1b      	ldr	r3, [pc, #108]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001e2e:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001e30:	7939      	ldrb	r1, [r7, #4]
 8001e32:	4413      	add	r3, r2
 8001e34:	460a      	mov	r2, r1
 8001e36:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001e3a:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b15      	ldr	r3, [pc, #84]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001e46:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001e48:	7979      	ldrb	r1, [r7, #5]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	460a      	mov	r2, r1
 8001e4e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e5c:	2b20      	cmp	r3, #32
 8001e5e:	d10d      	bne.n	8001e7c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001e60:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001e66:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001e6e:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001e72:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001e76:	461a      	mov	r2, r3
 8001e78:	f00a ff68 	bl	800cd4c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2200      	movs	r2, #0
 8001e82:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001e84:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	755a      	strb	r2, [r3, #21]

}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	2000040c 	.word	0x2000040c

08001e98 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08c      	sub	sp, #48	@ 0x30
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6278      	str	r0, [r7, #36]	@ 0x24
 8001ea0:	ed87 0a08 	vstr	s0, [r7, #32]
 8001ea4:	edc7 0a07 	vstr	s1, [r7, #28]
 8001ea8:	ed87 1a06 	vstr	s2, [r7, #24]
 8001eac:	edc7 1a05 	vstr	s3, [r7, #20]
 8001eb0:	ed87 2a04 	vstr	s4, [r7, #16]
 8001eb4:	edc7 2a03 	vstr	s5, [r7, #12]
 8001eb8:	ed87 3a02 	vstr	s6, [r7, #8]
 8001ebc:	edc7 3a01 	vstr	s7, [r7, #4]
 8001ec0:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec6:	6a3a      	ldr	r2, [r7, #32]
 8001ec8:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8001edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8001eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efe:	2210      	movs	r2, #16
 8001f00:	2100      	movs	r1, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	f00d faba 	bl	800f47c <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	3310      	adds	r3, #16
 8001f0c:	2240      	movs	r2, #64	@ 0x40
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f00d fab3 	bl	800f47c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f1a:	e00c      	b.n	8001f36 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8001f1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f26:	3304      	adds	r3, #4
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	4a79      	ldr	r2, [pc, #484]	@ (8002114 <MotorKalman_Init+0x27c>)
 8001f2e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f32:	3301      	adds	r3, #1
 8001f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	ddef      	ble.n	8001f1c <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001f42:	2240      	movs	r2, #64	@ 0x40
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f00d fa98 	bl	800f47c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f50:	e00d      	b.n	8001f6e <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001f52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f5c:	33be      	adds	r3, #190	@ 0xbe
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001f66:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	ddee      	ble.n	8001f52 <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	33f0      	adds	r3, #240	@ 0xf0
 8001f78:	2210      	movs	r2, #16
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00d fa7d 	bl	800f47c <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001f88:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001f92:	2210      	movs	r2, #16
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f00d fa70 	bl	800f47c <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001fa2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8001fa6:	ed97 0a01 	vldr	s0, [r7, #4]
 8001faa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001fac:	f000 f922 	bl	80021f4 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8001fb0:	ed97 0a00 	vldr	s0, [r7]
 8001fb4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001fb6:	f000 f94d 	bl	8002254 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8001fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbc:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	2104      	movs	r1, #4
 8001fc6:	f00c fce8 	bl	800e99a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd2:	3310      	adds	r3, #16
 8001fd4:	2204      	movs	r2, #4
 8001fd6:	2104      	movs	r1, #4
 8001fd8:	f00c fcdf 	bl	800e99a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001fe8:	2204      	movs	r2, #4
 8001fea:	2104      	movs	r1, #4
 8001fec:	f00c fcd5 	bl	800e99a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff2:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2101      	movs	r1, #1
 8002000:	f00c fccb 	bl	800e99a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 8002004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002006:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8002010:	2201      	movs	r2, #1
 8002012:	2101      	movs	r1, #1
 8002014:	f00c fcc1 	bl	800e99a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8002024:	2201      	movs	r2, #1
 8002026:	2101      	movs	r1, #1
 8002028:	f00c fcb7 	bl	800e99a <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8002038:	2204      	movs	r2, #4
 800203a:	2104      	movs	r1, #4
 800203c:	f00c fcad 	bl	800e99a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 8002040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002042:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 800204c:	2201      	movs	r2, #1
 800204e:	2104      	movs	r1, #4
 8002050:	f00c fca3 	bl	800e99a <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002060:	2201      	movs	r2, #1
 8002062:	2104      	movs	r1, #4
 8002064:	f00c fc99 	bl	800e99a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 800206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002070:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8002074:	2204      	movs	r2, #4
 8002076:	2104      	movs	r1, #4
 8002078:	f00c fc8f 	bl	800e99a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8002088:	2204      	movs	r2, #4
 800208a:	2101      	movs	r1, #1
 800208c:	f00c fc85 	bl	800e99a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8002090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002092:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800209c:	2201      	movs	r2, #1
 800209e:	2101      	movs	r1, #1
 80020a0:	f00c fc7b 	bl	800e99a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 80020a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a6:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 80020aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ac:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 80020b0:	2201      	movs	r2, #1
 80020b2:	2104      	movs	r1, #4
 80020b4:	f00c fc71 	bl	800e99a <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 80020b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020ba:	f000 f82d 	bl	8002118 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	3390      	adds	r3, #144	@ 0x90
 80020c8:	2204      	movs	r2, #4
 80020ca:	2104      	movs	r1, #4
 80020cc:	f00c fc65 	bl	800e99a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	33e0      	adds	r3, #224	@ 0xe0
 80020da:	2201      	movs	r2, #1
 80020dc:	2104      	movs	r1, #4
 80020de:	f00c fc5c 	bl	800e99a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 80020e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80020ee:	2204      	movs	r2, #4
 80020f0:	2104      	movs	r1, #4
 80020f2:	f00c fc52 	bl	800e99a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8002102:	2201      	movs	r2, #1
 8002104:	2104      	movs	r1, #4
 8002106:	f00c fc48 	bl	800e99a <arm_mat_init_f32>
}
 800210a:	bf00      	nop
 800210c:	3730      	adds	r7, #48	@ 0x30
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	42c80000 	.word	0x42c80000

08002118 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 8002154:	4619      	mov	r1, r3
 8002156:	4610      	mov	r0, r2
 8002158:	eeb0 3a64 	vmov.f32	s6, s9
 800215c:	eef0 2a45 	vmov.f32	s5, s10
 8002160:	eeb0 2a65 	vmov.f32	s4, s11
 8002164:	eef0 1a46 	vmov.f32	s3, s12
 8002168:	eeb0 1a66 	vmov.f32	s2, s13
 800216c:	eef0 0a47 	vmov.f32	s1, s14
 8002170:	eeb0 0a67 	vmov.f32	s0, s15
 8002174:	f000 fb26 	bl	80027c4 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800217e:	2240      	movs	r2, #64	@ 0x40
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f00d f97a 	bl	800f47c <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800218e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80021ec <MotorKalman_DiscretizeModel+0xd4>
 8002192:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800219c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80021b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80021c2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80021f0 <MotorKalman_DiscretizeModel+0xd8>
 80021c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80021d6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80021ec <MotorKalman_DiscretizeModel+0xd4>
 80021da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	3c23d70a 	.word	0x3c23d70a
 80021f0:	3dcccccd 	.word	0x3dcccccd

080021f4 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002206:	2240      	movs	r2, #64	@ 0x40
 8002208:	2100      	movs	r1, #0
 800220a:	4618      	mov	r0, r3
 800220c:	f00d f936 	bl	800f47c <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8002210:	edd7 7a00 	vldr	s15, [r7]
 8002214:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 800222c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002234:	d107      	bne.n	8002246 <MotorKalman_SetProcessNoise+0x52>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 800223c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002244:	d002      	beq.n	800224c <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff ff66 	bl	8002118 <MotorKalman_DiscretizeModel>
    }
}
 800224c:	bf00      	nop
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 8002260:	ed97 0a00 	vldr	s0, [r7]
 8002264:	f00d f95c 	bl	800f520 <sqrtf>
 8002268:	eef0 7a40 	vmov.f32	s15, s0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8002282:	b480      	push	{r7}
 8002284:	b087      	sub	sp, #28
 8002286:	af00      	add	r7, sp, #0
 8002288:	60f8      	str	r0, [r7, #12]
 800228a:	60b9      	str	r1, [r7, #8]
 800228c:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	e00c      	b.n	80022ae <matrix_copy+0x2c>
        dst[i] = src[i];
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	441a      	add	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	440b      	add	r3, r1
 80022a4:	6812      	ldr	r2, [r2, #0]
 80022a6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	3301      	adds	r3, #1
 80022ac:	617b      	str	r3, [r7, #20]
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	dbee      	blt.n	8002294 <matrix_copy+0x12>
    }
}
 80022b6:	bf00      	nop
 80022b8:	bf00      	nop
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 80022d0:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 80022d4:	6020      	str	r0, [r4, #0]
 80022d6:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 80022da:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 80022de:	6001      	str	r1, [r0, #0]
 80022e0:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80022e4:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 80022e8:	ed81 0a00 	vstr	s0, [r1]
 80022ec:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80022f0:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 80022f4:	600a      	str	r2, [r1, #0]
 80022f6:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 80022fa:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 80022fe:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002300:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002304:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002308:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2204      	movs	r2, #4
 8002310:	2104      	movs	r1, #4
 8002312:	f00c fb42 	bl	800e99a <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002316:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800231a:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 800231e:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2204      	movs	r2, #4
 8002326:	2104      	movs	r1, #4
 8002328:	f00c fb37 	bl	800e99a <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 800232c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002330:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002334:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2201      	movs	r2, #1
 800233c:	2104      	movs	r1, #4
 800233e:	f00c fb2c 	bl	800e99a <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002342:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002346:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800234a:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2201      	movs	r2, #1
 8002352:	2104      	movs	r1, #4
 8002354:	f00c fb21 	bl	800e99a <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002358:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 800235c:	2240      	movs	r2, #64	@ 0x40
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f00d f88b 	bl	800f47c <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002366:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 800236a:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 800236e:	2204      	movs	r2, #4
 8002370:	2104      	movs	r1, #4
 8002372:	f00c fb12 	bl	800e99a <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002376:	2300      	movs	r3, #0
 8002378:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800237c:	e011      	b.n	80023a2 <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 800237e:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 800238e:	443b      	add	r3, r7
 8002390:	3b6c      	subs	r3, #108	@ 0x6c
 8002392:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002396:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8002398:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800239c:	3301      	adds	r3, #1
 800239e:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 80023a2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	dde9      	ble.n	800237e <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 80023aa:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80023ae:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 80023b2:	2204      	movs	r2, #4
 80023b4:	2104      	movs	r1, #4
 80023b6:	f00c faf0 	bl	800e99a <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 80023ba:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80023be:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80023c2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80023c6:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 80023ca:	ed93 0a00 	vldr	s0, [r3]
 80023ce:	4610      	mov	r0, r2
 80023d0:	f00c feec 	bl	800f1ac <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 80023d4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80023d8:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80023dc:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 80023e0:	2210      	movs	r2, #16
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	f7ff ff4d 	bl	8002282 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 80023e8:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 80023ec:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 80023f0:	2204      	movs	r2, #4
 80023f2:	2104      	movs	r1, #4
 80023f4:	f00c fad1 	bl	800e99a <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 80023f8:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80023fc:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002400:	2204      	movs	r2, #4
 8002402:	2104      	movs	r1, #4
 8002404:	f00c fac9 	bl	800e99a <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002408:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 800240c:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002410:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002414:	4618      	mov	r0, r3
 8002416:	f00c fa85 	bl	800e924 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 800241a:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 800241e:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002422:	2210      	movs	r2, #16
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff2c 	bl	8002282 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 800242a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800242e:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002432:	2302      	movs	r3, #2
 8002434:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002438:	e03a      	b.n	80024b0 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 800243a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002446:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 800244a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800244e:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8002452:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002456:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 800245a:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800245e:	4618      	mov	r0, r3
 8002460:	f00c fe2a 	bl	800f0b8 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8002464:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002468:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800246c:	2210      	movs	r2, #16
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff07 	bl	8002282 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8002474:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002478:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 800247c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002480:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002484:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002488:	4611      	mov	r1, r2
 800248a:	eeb0 0a47 	vmov.f32	s0, s14
 800248e:	4618      	mov	r0, r3
 8002490:	f00c fe8c 	bl	800f1ac <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8002494:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002498:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 800249c:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 80024a0:	4618      	mov	r0, r3
 80024a2:	f00c fa3f 	bl	800e924 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 80024a6:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80024aa:	3301      	adds	r3, #1
 80024ac:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80024b0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80024b4:	2b0a      	cmp	r3, #10
 80024b6:	ddc0      	ble.n	800243a <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 80024b8:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 80024bc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80024c0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80024c4:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 80024c8:	ed93 0a00 	vldr	s0, [r3]
 80024cc:	4610      	mov	r0, r2
 80024ce:	f00c fe6d 	bl	800f1ac <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 80024d2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80024d6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80024da:	461a      	mov	r2, r3
 80024dc:	2300      	movs	r3, #0
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	6053      	str	r3, [r2, #4]
 80024e2:	6093      	str	r3, [r2, #8]
 80024e4:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 80024e6:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80024ea:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 80024ee:	2201      	movs	r2, #1
 80024f0:	2104      	movs	r1, #4
 80024f2:	f00c fa52 	bl	800e99a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 80024f6:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 80024fa:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80024fe:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002502:	4618      	mov	r0, r3
 8002504:	f00c fdd8 	bl	800f0b8 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8002508:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 800250c:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8002510:	2201      	movs	r2, #1
 8002512:	2104      	movs	r1, #4
 8002514:	f00c fa41 	bl	800e99a <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8002518:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800251c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002520:	edd3 7a00 	vldr	s15, [r3]
 8002524:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002528:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800252c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002530:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002534:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002538:	4611      	mov	r1, r2
 800253a:	eeb0 0a47 	vmov.f32	s0, s14
 800253e:	4618      	mov	r0, r3
 8002540:	f00c fe34 	bl	800f1ac <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002544:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002548:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800254c:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002550:	4618      	mov	r0, r3
 8002552:	f00c f9e7 	bl	800e924 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8002556:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800255a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800255e:	4618      	mov	r0, r3
 8002560:	2340      	movs	r3, #64	@ 0x40
 8002562:	461a      	mov	r2, r3
 8002564:	2100      	movs	r1, #0
 8002566:	f00c ff89 	bl	800f47c <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 800256a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800256e:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8002572:	2204      	movs	r2, #4
 8002574:	2104      	movs	r1, #4
 8002576:	f00c fa10 	bl	800e99a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 800257a:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 800257e:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002582:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002586:	4618      	mov	r0, r3
 8002588:	f00c fd96 	bl	800f0b8 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 800258c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002590:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002594:	461a      	mov	r2, r3
 8002596:	2300      	movs	r3, #0
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	6053      	str	r3, [r2, #4]
 800259c:	6093      	str	r3, [r2, #8]
 800259e:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 80025a0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80025a4:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 80025a8:	2201      	movs	r2, #1
 80025aa:	2104      	movs	r1, #4
 80025ac:	f00c f9f5 	bl	800e99a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 80025b0:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 80025b4:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80025b8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80025bc:	4618      	mov	r0, r3
 80025be:	f00c fd7b 	bl	800f0b8 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 80025c2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80025c6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80025ca:	edd3 7a00 	vldr	s15, [r3]
 80025ce:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80025d2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80025d6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80025da:	edd3 7a00 	vldr	s15, [r3]
 80025de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e2:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80025e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025ea:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80025ee:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80025f2:	4611      	mov	r1, r2
 80025f4:	eeb0 0a47 	vmov.f32	s0, s14
 80025f8:	4618      	mov	r0, r3
 80025fa:	f00c fdd7 	bl	800f1ac <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80025fe:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002602:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002606:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800260a:	4618      	mov	r0, r3
 800260c:	f00c f98a 	bl	800e924 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8002610:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002614:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002618:	4618      	mov	r0, r3
 800261a:	2340      	movs	r3, #64	@ 0x40
 800261c:	461a      	mov	r2, r3
 800261e:	2100      	movs	r1, #0
 8002620:	f00c ff2c 	bl	800f47c <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 8002624:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002628:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 800262c:	2204      	movs	r2, #4
 800262e:	2104      	movs	r1, #4
 8002630:	f00c f9b3 	bl	800e99a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 8002634:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8002638:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800263c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002640:	4618      	mov	r0, r3
 8002642:	f00c fd39 	bl	800f0b8 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 8002646:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800264a:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800264e:	461a      	mov	r2, r3
 8002650:	2300      	movs	r3, #0
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	6053      	str	r3, [r2, #4]
 8002656:	6093      	str	r3, [r2, #8]
 8002658:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 800265a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800265e:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8002662:	2201      	movs	r2, #1
 8002664:	2104      	movs	r1, #4
 8002666:	f00c f998 	bl	800e99a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 800266a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800266e:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002672:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002676:	4618      	mov	r0, r3
 8002678:	f00c fd1e 	bl	800f0b8 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 800267c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002680:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002684:	edd3 7a00 	vldr	s15, [r3]
 8002688:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800268c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002690:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002694:	edd3 7a00 	vldr	s15, [r3]
 8002698:	ee27 7a27 	vmul.f32	s14, s14, s15
 800269c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80026a0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80026a4:	edd3 7a00 	vldr	s15, [r3]
 80026a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026ac:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80026b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80026b4:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80026b8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80026bc:	4611      	mov	r1, r2
 80026be:	eeb0 0a47 	vmov.f32	s0, s14
 80026c2:	4618      	mov	r0, r3
 80026c4:	f00c fd72 	bl	800f1ac <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80026c8:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80026cc:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80026d0:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80026d4:	4618      	mov	r0, r3
 80026d6:	f00c f925 	bl	800e924 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 80026da:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80026de:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 80026e2:	4618      	mov	r0, r3
 80026e4:	2340      	movs	r3, #64	@ 0x40
 80026e6:	461a      	mov	r2, r3
 80026e8:	2100      	movs	r1, #0
 80026ea:	f00c fec7 	bl	800f47c <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 80026ee:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80026f2:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80026f6:	2204      	movs	r2, #4
 80026f8:	2104      	movs	r1, #4
 80026fa:	f00c f94e 	bl	800e99a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 80026fe:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002702:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002706:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800270a:	4618      	mov	r0, r3
 800270c:	f00c fcd4 	bl	800f0b8 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8002710:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002714:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8002718:	461a      	mov	r2, r3
 800271a:	2300      	movs	r3, #0
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	6053      	str	r3, [r2, #4]
 8002720:	6093      	str	r3, [r2, #8]
 8002722:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 8002724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002728:	f107 001c 	add.w	r0, r7, #28
 800272c:	2201      	movs	r2, #1
 800272e:	2104      	movs	r1, #4
 8002730:	f00c f933 	bl	800e99a <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 8002734:	f107 021c 	add.w	r2, r7, #28
 8002738:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800273c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002740:	4618      	mov	r0, r3
 8002742:	f00c fcb9 	bl	800f0b8 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 8002746:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800274a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800274e:	edd3 7a00 	vldr	s15, [r3]
 8002752:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002756:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800275a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800275e:	edd3 7a00 	vldr	s15, [r3]
 8002762:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002766:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800276a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800276e:	edd3 7a00 	vldr	s15, [r3]
 8002772:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002776:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800277a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800277e:	edd3 7a00 	vldr	s15, [r3]
 8002782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002786:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80027c0 <discretize_system_with_arm+0x4fc>
 800278a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800278e:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002792:	f107 031c 	add.w	r3, r7, #28
 8002796:	4611      	mov	r1, r2
 8002798:	eeb0 0a47 	vmov.f32	s0, s14
 800279c:	4618      	mov	r0, r3
 800279e:	f00c fd05 	bl	800f1ac <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80027a2:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80027a6:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80027aa:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80027ae:	4618      	mov	r0, r3
 80027b0:	f00c f8b8 	bl	800e924 <arm_mat_add_f32>
}
 80027b4:	bf00      	nop
 80027b6:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd90      	pop	{r4, r7, pc}
 80027be:	bf00      	nop
 80027c0:	42f00000 	.word	0x42f00000

080027c4 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b09e      	sub	sp, #120	@ 0x78
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 80027ce:	edc7 0a08 	vstr	s1, [r7, #32]
 80027d2:	ed87 1a07 	vstr	s2, [r7, #28]
 80027d6:	edc7 1a06 	vstr	s3, [r7, #24]
 80027da:	ed87 2a05 	vstr	s4, [r7, #20]
 80027de:	edc7 2a04 	vstr	s5, [r7, #16]
 80027e2:	ed87 3a03 	vstr	s6, [r7, #12]
 80027e6:	60b8      	str	r0, [r7, #8]
 80027e8:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 80027ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80027ee:	2240      	movs	r2, #64	@ 0x40
 80027f0:	2100      	movs	r1, #0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f00c fe42 	bl	800f47c <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 80027f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 8002806:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800280a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 800280c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002810:	eef1 6a67 	vneg.f32	s13, s15
 8002814:	ed97 7a07 	vldr	s14, [r7, #28]
 8002818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800281c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8002820:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8002824:	ed97 7a07 	vldr	s14, [r7, #28]
 8002828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800282c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 8002830:	edd7 6a04 	vldr	s13, [r7, #16]
 8002834:	ed97 7a07 	vldr	s14, [r7, #28]
 8002838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800283c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 8002840:	edd7 7a05 	vldr	s15, [r7, #20]
 8002844:	eef1 6a67 	vneg.f32	s13, s15
 8002848:	ed97 7a08 	vldr	s14, [r7, #32]
 800284c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002850:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8002854:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002858:	eef1 6a67 	vneg.f32	s13, s15
 800285c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002864:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8002868:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800286c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002874:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8002878:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800287c:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	ed97 0a03 	vldr	s0, [r7, #12]
 8002888:	f7ff fd1c 	bl	80022c4 <discretize_system_with_arm>
}
 800288c:	bf00      	nop
 800288e:	3778      	adds	r7, #120	@ 0x78
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	4613      	mov	r3, r2
 80028a0:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4a0b      	ldr	r2, [pc, #44]	@ (80028d4 <PWM_init+0x40>)
 80028a6:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	88fa      	ldrh	r2, [r7, #6]
 80028b2:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 80028ba:	68b8      	ldr	r0, [r7, #8]
 80028bc:	f008 f8a8 	bl	800aa10 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	4619      	mov	r1, r3
 80028c4:	68b8      	ldr	r0, [r7, #8]
 80028c6:	f008 f9ef 	bl	800aca8 <HAL_TIM_PWM_Start>
}
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	0a21fe80 	.word	0x0a21fe80

080028d8 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 80028d8:	b5b0      	push	{r4, r5, r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80028e4:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80028e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80028ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f4:	d137      	bne.n	8002966 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	889b      	ldrh	r3, [r3, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d105      	bne.n	800290a <PWM_write_duty+0x32>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2200      	movs	r2, #0
 8002906:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8002908:	e0e1      	b.n	8002ace <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	889b      	ldrh	r3, [r3, #4]
 800290e:	2b04      	cmp	r3, #4
 8002910:	d105      	bne.n	800291e <PWM_write_duty+0x46>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	2300      	movs	r3, #0
 800291a:	6393      	str	r3, [r2, #56]	@ 0x38
 800291c:	e0d7      	b.n	8002ace <PWM_write_duty+0x1f6>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	889b      	ldrh	r3, [r3, #4]
 8002922:	2b08      	cmp	r3, #8
 8002924:	d105      	bne.n	8002932 <PWM_write_duty+0x5a>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	2300      	movs	r3, #0
 800292e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002930:	e0cd      	b.n	8002ace <PWM_write_duty+0x1f6>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	889b      	ldrh	r3, [r3, #4]
 8002936:	2b0c      	cmp	r3, #12
 8002938:	d105      	bne.n	8002946 <PWM_write_duty+0x6e>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	2300      	movs	r3, #0
 8002942:	6413      	str	r3, [r2, #64]	@ 0x40
 8002944:	e0c3      	b.n	8002ace <PWM_write_duty+0x1f6>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	889b      	ldrh	r3, [r3, #4]
 800294a:	2b10      	cmp	r3, #16
 800294c:	d105      	bne.n	800295a <PWM_write_duty+0x82>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	2300      	movs	r3, #0
 8002956:	6493      	str	r3, [r2, #72]	@ 0x48
 8002958:	e0b9      	b.n	8002ace <PWM_write_duty+0x1f6>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	2300      	movs	r3, #0
 8002962:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002964:	e0b3      	b.n	8002ace <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002972:	ed97 7a02 	vldr	s14, [r7, #8]
 8002976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800297a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800297e:	ee17 2a90 	vmov	r2, s15
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800298e:	33fe      	adds	r3, #254	@ 0xfe
 8002990:	4a51      	ldr	r2, [pc, #324]	@ (8002ad8 <PWM_write_duty+0x200>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	0bdb      	lsrs	r3, r3, #15
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	ee07 3a90 	vmov	s15, r3
 80029aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	899b      	ldrh	r3, [r3, #12]
 80029b2:	3301      	adds	r3, #1
 80029b4:	ee07 3a90 	vmov	s15, r3
 80029b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80029c0:	ed97 7a02 	vldr	s14, [r7, #8]
 80029c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80029cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029d4:	ee17 3a90 	vmov	r3, s15
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	89db      	ldrh	r3, [r3, #14]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fd6a 	bl	80004bc <__aeabi_i2d>
 80029e8:	4604      	mov	r4, r0
 80029ea:	460d      	mov	r5, r1
 80029ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80029f0:	eef0 7ae7 	vabs.f32	s15, s15
 80029f4:	ee17 0a90 	vmov	r0, s15
 80029f8:	f7fd fd72 	bl	80004e0 <__aeabi_f2d>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4620      	mov	r0, r4
 8002a02:	4629      	mov	r1, r5
 8002a04:	f7fd fdc4 	bl	8000590 <__aeabi_dmul>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	4b31      	ldr	r3, [pc, #196]	@ (8002adc <PWM_write_duty+0x204>)
 8002a16:	f7fd fee5 	bl	80007e4 <__aeabi_ddiv>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4610      	mov	r0, r2
 8002a20:	4619      	mov	r1, r3
 8002a22:	f7fe f877 	bl	8000b14 <__aeabi_d2uiz>
 8002a26:	4603      	mov	r3, r0
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	899a      	ldrh	r2, [r3, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	89da      	ldrh	r2, [r3, #14]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	89da      	ldrh	r2, [r3, #14]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	889b      	ldrh	r3, [r3, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <PWM_write_duty+0x190>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	6952      	ldr	r2, [r2, #20]
 8002a64:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002a66:	e032      	b.n	8002ace <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	889b      	ldrh	r3, [r3, #4]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d106      	bne.n	8002a7e <PWM_write_duty+0x1a6>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002a7c:	e027      	b.n	8002ace <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	889b      	ldrh	r3, [r3, #4]
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d106      	bne.n	8002a94 <PWM_write_duty+0x1bc>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002a92:	e01c      	b.n	8002ace <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	889b      	ldrh	r3, [r3, #4]
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	d106      	bne.n	8002aaa <PWM_write_duty+0x1d2>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002aa8:	e011      	b.n	8002ace <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	889b      	ldrh	r3, [r3, #4]
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d106      	bne.n	8002ac0 <PWM_write_duty+0x1e8>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8002abe:	e006      	b.n	8002ace <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002acc:	e7ff      	b.n	8002ace <PWM_write_duty+0x1f6>
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	80008001 	.word	0x80008001
 8002adc:	40590000 	.word	0x40590000

08002ae0 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8002ae0:	b5b0      	push	{r4, r5, r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002aec:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8002af0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002af4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afc:	d137      	bne.n	8002b6e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	889b      	ldrh	r3, [r3, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d105      	bne.n	8002b12 <PWM_write_range+0x32>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8002b10:	e0e1      	b.n	8002cd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	889b      	ldrh	r3, [r3, #4]
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d105      	bne.n	8002b26 <PWM_write_range+0x46>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	2300      	movs	r3, #0
 8002b22:	6393      	str	r3, [r2, #56]	@ 0x38
 8002b24:	e0d7      	b.n	8002cd6 <PWM_write_range+0x1f6>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	889b      	ldrh	r3, [r3, #4]
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d105      	bne.n	8002b3a <PWM_write_range+0x5a>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	2300      	movs	r3, #0
 8002b36:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002b38:	e0cd      	b.n	8002cd6 <PWM_write_range+0x1f6>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	889b      	ldrh	r3, [r3, #4]
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	d105      	bne.n	8002b4e <PWM_write_range+0x6e>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b4c:	e0c3      	b.n	8002cd6 <PWM_write_range+0x1f6>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	889b      	ldrh	r3, [r3, #4]
 8002b52:	2b10      	cmp	r3, #16
 8002b54:	d105      	bne.n	8002b62 <PWM_write_range+0x82>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b60:	e0b9      	b.n	8002cd6 <PWM_write_range+0x1f6>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002b6c:	e0b3      	b.n	8002cd6 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	ee07 3a90 	vmov	s15, r3
 8002b76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b7a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b86:	ee17 2a90 	vmov	r2, s15
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002b96:	33fe      	adds	r3, #254	@ 0xfe
 8002b98:	4a53      	ldr	r2, [pc, #332]	@ (8002ce8 <PWM_write_range+0x208>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	0bdb      	lsrs	r3, r3, #15
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	ee07 3a90 	vmov	s15, r3
 8002bb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	899b      	ldrh	r3, [r3, #12]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	ee07 3a90 	vmov	s15, r3
 8002bc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bc4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002bc8:	ed97 7a02 	vldr	s14, [r7, #8]
 8002bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002bd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bdc:	ee17 3a90 	vmov	r3, s15
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	89db      	ldrh	r3, [r3, #14]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fd fc66 	bl	80004bc <__aeabi_i2d>
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	460d      	mov	r5, r1
 8002bf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bf8:	eef0 7ae7 	vabs.f32	s15, s15
 8002bfc:	ee17 0a90 	vmov	r0, s15
 8002c00:	f7fd fc6e 	bl	80004e0 <__aeabi_f2d>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4620      	mov	r0, r4
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	f7fd fcc0 	bl	8000590 <__aeabi_dmul>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	a331      	add	r3, pc, #196	@ (adr r3, 8002ce0 <PWM_write_range+0x200>)
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	f7fd fde1 	bl	80007e4 <__aeabi_ddiv>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f7fd ff73 	bl	8000b14 <__aeabi_d2uiz>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	461a      	mov	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	899a      	ldrh	r2, [r3, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	89da      	ldrh	r2, [r3, #14]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	89da      	ldrh	r2, [r3, #14]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	889b      	ldrh	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <PWM_write_range+0x190>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	6952      	ldr	r2, [r2, #20]
 8002c6c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002c6e:	e032      	b.n	8002cd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	889b      	ldrh	r3, [r3, #4]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d106      	bne.n	8002c86 <PWM_write_range+0x1a6>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002c84:	e027      	b.n	8002cd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	889b      	ldrh	r3, [r3, #4]
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d106      	bne.n	8002c9c <PWM_write_range+0x1bc>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002c9a:	e01c      	b.n	8002cd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	889b      	ldrh	r3, [r3, #4]
 8002ca0:	2b0c      	cmp	r3, #12
 8002ca2:	d106      	bne.n	8002cb2 <PWM_write_range+0x1d2>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002cb0:	e011      	b.n	8002cd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	889b      	ldrh	r3, [r3, #4]
 8002cb6:	2b10      	cmp	r3, #16
 8002cb8:	d106      	bne.n	8002cc8 <PWM_write_range+0x1e8>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8002cc6:	e006      	b.n	8002cd6 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002cd4:	e7ff      	b.n	8002cd6 <PWM_write_range+0x1f6>
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	00000000 	.word	0x00000000
 8002ce4:	40efffe0 	.word	0x40efffe0
 8002ce8:	80008001 	.word	0x80008001

08002cec <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6178      	str	r0, [r7, #20]
 8002cf4:	6139      	str	r1, [r7, #16]
 8002cf6:	60fa      	str	r2, [r7, #12]
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	ed87 0a01 	vstr	s0, [r7, #4]
 8002cfe:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8002d4c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	fb93 f2f2 	sdiv	r2, r3, r2
 8002d56:	68f9      	ldr	r1, [r7, #12]
 8002d58:	fb01 f202 	mul.w	r2, r1, r2
 8002d5c:	1a9b      	subs	r3, r3, r2
 8002d5e:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f04f 0200 	mov.w	r2, #0
 8002d80:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8002dba:	213c      	movs	r1, #60	@ 0x3c
 8002dbc:	6938      	ldr	r0, [r7, #16]
 8002dbe:	f008 fa2f 	bl	800b220 <HAL_TIM_Encoder_Start>
}
 8002dc2:	bf00      	nop
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	0000      	movs	r0, r0
 8002dcc:	0000      	movs	r0, r0
	...

08002dd0 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8002dd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	0fda      	lsrs	r2, r3, #31
 8002df8:	4413      	add	r3, r2
 8002dfa:	105b      	asrs	r3, r3, #1
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4293      	cmp	r3, r2
 8002e02:	dd05      	ble.n	8002e10 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	e00e      	b.n	8002e2e <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	0fda      	lsrs	r2, r3, #31
 8002e16:	4413      	add	r3, r2
 8002e18:	105b      	asrs	r3, r3, #1
 8002e1a:	425b      	negs	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4293      	cmp	r3, r2
 8002e22:	da04      	bge.n	8002e2e <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3c:	441a      	add	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	ee07 3a90 	vmov	s15, r3
 8002e50:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a1b      	ldr	r3, [r3, #32]
 8002e58:	ee07 3a90 	vmov	s15, r3
 8002e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e60:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd fb2f 	bl	80004e0 <__aeabi_f2d>
 8002e82:	4604      	mov	r4, r0
 8002e84:	460d      	mov	r5, r1
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	ee07 3a90 	vmov	s15, r3
 8002e8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	ee07 3a90 	vmov	s15, r3
 8002e9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ea2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ea6:	ee17 0a90 	vmov	r0, s15
 8002eaa:	f7fd fb19 	bl	80004e0 <__aeabi_f2d>
 8002eae:	a33c      	add	r3, pc, #240	@ (adr r3, 8002fa0 <QEI_get_diff_count+0x1d0>)
 8002eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb4:	f7fd fb6c 	bl	8000590 <__aeabi_dmul>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4690      	mov	r8, r2
 8002ebe:	4699      	mov	r9, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fd fb0b 	bl	80004e0 <__aeabi_f2d>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4640      	mov	r0, r8
 8002ed0:	4649      	mov	r1, r9
 8002ed2:	f7fd fb5d 	bl	8000590 <__aeabi_dmul>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4620      	mov	r0, r4
 8002edc:	4629      	mov	r1, r5
 8002ede:	f7fd f9a1 	bl	8000224 <__adddf3>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	4619      	mov	r1, r3
 8002eea:	f7fd fe33 	bl	8000b54 <__aeabi_d2f>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd faf1 	bl	80004e0 <__aeabi_f2d>
 8002efe:	4604      	mov	r4, r0
 8002f00:	460d      	mov	r5, r1
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	ee07 3a90 	vmov	s15, r3
 8002f16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f1a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f1e:	ee16 0a90 	vmov	r0, s13
 8002f22:	f7fd fadd 	bl	80004e0 <__aeabi_f2d>
 8002f26:	a31e      	add	r3, pc, #120	@ (adr r3, 8002fa0 <QEI_get_diff_count+0x1d0>)
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	f7fd fb30 	bl	8000590 <__aeabi_dmul>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4690      	mov	r8, r2
 8002f36:	4699      	mov	r9, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd facf 	bl	80004e0 <__aeabi_f2d>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4640      	mov	r0, r8
 8002f48:	4649      	mov	r1, r9
 8002f4a:	f7fd fb21 	bl	8000590 <__aeabi_dmul>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4690      	mov	r8, r2
 8002f54:	4699      	mov	r9, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd fac0 	bl	80004e0 <__aeabi_f2d>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4640      	mov	r0, r8
 8002f66:	4649      	mov	r1, r9
 8002f68:	f7fd fb12 	bl	8000590 <__aeabi_dmul>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4620      	mov	r0, r4
 8002f72:	4629      	mov	r1, r5
 8002f74:	f7fd f956 	bl	8000224 <__adddf3>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	4619      	mov	r1, r3
 8002f80:	f7fd fde8 	bl	8000b54 <__aeabi_d2f>
 8002f84:	4602      	mov	r2, r0
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	605a      	str	r2, [r3, #4]
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f9c:	f3af 8000 	nop.w
 8002fa0:	54442d18 	.word	0x54442d18
 8002fa4:	400921fb 	.word	0x400921fb

08002fa8 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8002fa8:	b5b0      	push	{r4, r5, r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002fb8:	fb02 f303 	mul.w	r3, r2, r3
 8002fbc:	ee07 3a90 	vmov	s15, r3
 8002fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fd fa86 	bl	80004e0 <__aeabi_f2d>
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	4b83      	ldr	r3, [pc, #524]	@ (80031e8 <QEI_compute_data+0x240>)
 8002fda:	f7fd fad9 	bl	8000590 <__aeabi_dmul>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4614      	mov	r4, r2
 8002fe4:	461d      	mov	r5, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	ee07 3a90 	vmov	s15, r3
 8002fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ff2:	ee17 0a90 	vmov	r0, s15
 8002ff6:	f7fd fa73 	bl	80004e0 <__aeabi_f2d>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4620      	mov	r0, r4
 8003000:	4629      	mov	r1, r5
 8003002:	f7fd fbef 	bl	80007e4 <__aeabi_ddiv>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4614      	mov	r4, r2
 800300c:	461d      	mov	r5, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fa64 	bl	80004e0 <__aeabi_f2d>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	4620      	mov	r0, r4
 800301e:	4629      	mov	r1, r5
 8003020:	f7fd fab6 	bl	8000590 <__aeabi_dmul>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	f7fd fd92 	bl	8000b54 <__aeabi_d2f>
 8003030:	4602      	mov	r2, r0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800303c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003040:	ee17 0a90 	vmov	r0, s15
 8003044:	f7fd fa4c 	bl	80004e0 <__aeabi_f2d>
 8003048:	a365      	add	r3, pc, #404	@ (adr r3, 80031e0 <QEI_compute_data+0x238>)
 800304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304e:	f7fd fa9f 	bl	8000590 <__aeabi_dmul>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4614      	mov	r4, r2
 8003058:	461d      	mov	r5, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003066:	ee17 0a90 	vmov	r0, s15
 800306a:	f7fd fa39 	bl	80004e0 <__aeabi_f2d>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4620      	mov	r0, r4
 8003074:	4629      	mov	r1, r5
 8003076:	f7fd fbb5 	bl	80007e4 <__aeabi_ddiv>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4614      	mov	r4, r2
 8003080:	461d      	mov	r5, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fa2a 	bl	80004e0 <__aeabi_f2d>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	4620      	mov	r0, r4
 8003092:	4629      	mov	r1, r5
 8003094:	f7fd fa7c 	bl	8000590 <__aeabi_dmul>
 8003098:	4602      	mov	r2, r0
 800309a:	460b      	mov	r3, r1
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fd58 	bl	8000b54 <__aeabi_d2f>
 80030a4:	4602      	mov	r2, r0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fd fa16 	bl	80004e0 <__aeabi_f2d>
 80030b4:	a34a      	add	r3, pc, #296	@ (adr r3, 80031e0 <QEI_compute_data+0x238>)
 80030b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ba:	f7fd fa69 	bl	8000590 <__aeabi_dmul>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4614      	mov	r4, r2
 80030c4:	461d      	mov	r5, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd fa08 	bl	80004e0 <__aeabi_f2d>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4620      	mov	r0, r4
 80030d6:	4629      	mov	r1, r5
 80030d8:	f7fd fa5a 	bl	8000590 <__aeabi_dmul>
 80030dc:	4602      	mov	r2, r0
 80030de:	460b      	mov	r3, r1
 80030e0:	4614      	mov	r4, r2
 80030e2:	461d      	mov	r5, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1b      	ldr	r3, [r3, #32]
 80030e8:	ee07 3a90 	vmov	s15, r3
 80030ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030f0:	ee17 0a90 	vmov	r0, s15
 80030f4:	f7fd f9f4 	bl	80004e0 <__aeabi_f2d>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4620      	mov	r0, r4
 80030fe:	4629      	mov	r1, r5
 8003100:	f7fd fb70 	bl	80007e4 <__aeabi_ddiv>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4614      	mov	r4, r2
 800310a:	461d      	mov	r5, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003110:	4618      	mov	r0, r3
 8003112:	f7fd f9e5 	bl	80004e0 <__aeabi_f2d>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4620      	mov	r0, r4
 800311c:	4629      	mov	r1, r5
 800311e:	f7fd fa37 	bl	8000590 <__aeabi_dmul>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4610      	mov	r0, r2
 8003128:	4619      	mov	r1, r3
 800312a:	f7fd fd13 	bl	8000b54 <__aeabi_d2f>
 800312e:	4602      	mov	r2, r0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	ed93 7a02 	vldr	s14, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003154:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8003158:	edd7 7a03 	vldr	s15, [r7, #12]
 800315c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003164:	d00a      	beq.n	800317c <QEI_compute_data+0x1d4>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003172:	edd7 7a03 	vldr	s15, [r7, #12]
 8003176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800317a:	e001      	b.n	8003180 <QEI_compute_data+0x1d8>
 800317c:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80031ec <QEI_compute_data+0x244>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	ed93 7a04 	vldr	s14, [r3, #16]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003196:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 800319a:	edd7 7a02 	vldr	s15, [r7, #8]
 800319e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80031a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a6:	d00a      	beq.n	80031be <QEI_compute_data+0x216>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ac:	ee07 3a90 	vmov	s15, r3
 80031b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80031b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031bc:	e001      	b.n	80031c2 <QEI_compute_data+0x21a>
 80031be:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80031ec <QEI_compute_data+0x244>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	615a      	str	r2, [r3, #20]
}
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bdb0      	pop	{r4, r5, r7, pc}
 80031e0:	54442d18 	.word	0x54442d18
 80031e4:	400921fb 	.word	0x400921fb
 80031e8:	404e0000 	.word	0x404e0000
 80031ec:	00000000 	.word	0x00000000

080031f0 <QEI_reset>:

void QEI_reset(QEI *qei) {
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
    // Reset all position and velocity values
    qei->pps = 0;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->rpm = 0;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = 0;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->pulses = 0;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->mmps = 0;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->radpss = 0;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	651a      	str	r2, [r3, #80]	@ 0x50

    // Reset velocity history
    qei->r[NOW] = 0;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	615a      	str	r2, [r3, #20]
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003272:	b580      	push	{r7, lr}
 8003274:	b08e      	sub	sp, #56	@ 0x38
 8003276:	af00      	add	r7, sp, #0
 8003278:	6178      	str	r0, [r7, #20]
 800327a:	ed87 0a04 	vstr	s0, [r7, #16]
 800327e:	edc7 0a03 	vstr	s1, [r7, #12]
 8003282:	ed87 1a02 	vstr	s2, [r7, #8]
 8003286:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2200      	movs	r2, #0
 800328e:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 80032b0:	ed97 7a03 	vldr	s14, [r7, #12]
 80032b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80032b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032bc:	eef0 7ae7 	vabs.f32	s15, s15
 80032c0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 80032c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80032c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80032cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d8:	d503      	bpl.n	80032e2 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	22ff      	movs	r2, #255	@ 0xff
 80032de:	741a      	strb	r2, [r3, #16]
 80032e0:	e002      	b.n	80032e8 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2201      	movs	r2, #1
 80032e6:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 80032e8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80032ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f4:	d006      	beq.n	8003304 <Trapezoidal_Generator+0x92>
 80032f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80032fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003302:	d104      	bne.n	800330e <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	60da      	str	r2, [r3, #12]
        return;
 800330c:	e06f      	b.n	80033ee <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 800330e:	edd7 6a02 	vldr	s13, [r7, #8]
 8003312:	ed97 7a01 	vldr	s14, [r7, #4]
 8003316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800331a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 800331e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003322:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003326:	ee27 7a87 	vmul.f32	s14, s15, s14
 800332a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800332e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003332:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 800333e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003340:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003342:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003346:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800334a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003352:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003356:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800335a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800335e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003362:	db27      	blt.n	80033b4 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003364:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003368:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800336c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003370:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003374:	edd7 6a07 	vldr	s13, [r7, #28]
 8003378:	ed97 7a02 	vldr	s14, [r7, #8]
 800337c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003380:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003388:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 800338a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800338e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 800339c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80033a0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80033a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80033a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	edc3 7a02 	vstr	s15, [r3, #8]
 80033b2:	e018      	b.n	80033e6 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 80033b4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80033b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80033bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80033c0:	eeb0 0a66 	vmov.f32	s0, s13
 80033c4:	f00c f8ac 	bl	800f520 <sqrtf>
 80033c8:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	6a3a      	ldr	r2, [r7, #32]
 80033d0:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	6a3a      	ldr	r2, [r7, #32]
 80033d6:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 80033d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80033dc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	60da      	str	r2, [r3, #12]
}
 80033ee:	3738      	adds	r7, #56	@ 0x38
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 80033f4:	b480      	push	{r7}
 80033f6:	b08d      	sub	sp, #52	@ 0x34
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6178      	str	r0, [r7, #20]
 80033fc:	6139      	str	r1, [r7, #16]
 80033fe:	ed87 0a03 	vstr	s0, [r7, #12]
 8003402:	edc7 0a02 	vstr	s1, [r7, #8]
 8003406:	ed87 1a01 	vstr	s2, [r7, #4]
 800340a:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	edd3 7a03 	vldr	s15, [r3, #12]
 8003414:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8003698 <Trapezoidal_Evaluated+0x2a4>
 8003418:	ee77 7a87 	vadd.f32	s15, s15, s14
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	ed93 7a03 	vldr	s14, [r3, #12]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	edd3 7a03 	vldr	s15, [r3, #12]
 800342e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003436:	f200 811b 	bhi.w	8003670 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	2200      	movs	r2, #0
 800343e:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	7c1b      	ldrb	r3, [r3, #16]
 8003444:	b25b      	sxtb	r3, r3
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800344e:	ed97 7a00 	vldr	s14, [r7]
 8003452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003456:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	ed93 7a00 	vldr	s14, [r3]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	edd3 7a01 	vldr	s15, [r3, #4]
 8003466:	eeb4 7a67 	vcmp.f32	s14, s15
 800346a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346e:	d109      	bne.n	8003484 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	edd3 7a00 	vldr	s15, [r3]
 8003476:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800347a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003482:	e00c      	b.n	800349e <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	7c1b      	ldrb	r3, [r3, #16]
 8003488:	b25b      	sxtb	r3, r3
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003492:	ed97 7a01 	vldr	s14, [r7, #4]
 8003496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800349a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	ed93 7a03 	vldr	s14, [r3, #12]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	edd3 7a00 	vldr	s15, [r3]
 80034aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b2:	d824      	bhi.n	80034fe <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 80034b4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80034b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80034bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80034c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80034d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80034d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80034e8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80034ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034fa:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 80034fc:	e0c6      	b.n	800368c <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	ed93 7a03 	vldr	s14, [r3, #12]
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	edd3 7a01 	vldr	s15, [r3, #4]
 800350a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800350e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003512:	d830      	bhi.n	8003576 <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003514:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003518:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800351c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	edd3 7a00 	vldr	s15, [r3]
 8003526:	ee27 7a27 	vmul.f32	s14, s14, s15
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	edd3 7a00 	vldr	s15, [r3]
 8003530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003534:	ed97 7a03 	vldr	s14, [r7, #12]
 8003538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800353c:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	ed93 7a03 	vldr	s14, [r3, #12]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	edd3 7a00 	vldr	s15, [r3]
 800354c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003550:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003554:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003558:	edd7 7a06 	vldr	s15, [r7, #24]
 800355c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800356a:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	609a      	str	r2, [r3, #8]
}
 8003574:	e08a      	b.n	800368c <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	ed93 7a03 	vldr	s14, [r3, #12]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003582:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800358a:	d900      	bls.n	800358e <Trapezoidal_Evaluated+0x19a>
}
 800358c:	e07e      	b.n	800368c <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 800358e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003592:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003596:	ee27 7a87 	vmul.f32	s14, s15, s14
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	edd3 7a00 	vldr	s15, [r3]
 80035a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	edd3 7a00 	vldr	s15, [r3]
 80035aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80035b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035b6:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	edd3 7a00 	vldr	s15, [r3]
 80035ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d2:	dd11      	ble.n	80035f8 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	edd3 7a00 	vldr	s15, [r3]
 80035e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035e4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80035e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ec:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80035f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	edd3 7a01 	vldr	s15, [r3, #4]
 8003604:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003608:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 800360c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003610:	edd7 7a07 	vldr	s15, [r7, #28]
 8003614:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003618:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800361c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003620:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003624:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003628:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800362c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003630:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003634:	edd7 7a07 	vldr	s15, [r7, #28]
 8003638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800363c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 8003646:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800364a:	edd7 7a07 	vldr	s15, [r7, #28]
 800364e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003652:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8003660:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003664:	eef1 7a67 	vneg.f32	s15, s15
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800366e:	e00d      	b.n	800368c <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	2201      	movs	r2, #1
 8003674:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	68ba      	ldr	r2, [r7, #8]
 800367a:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	609a      	str	r2, [r3, #8]
}
 800368c:	bf00      	nop
 800368e:	3734      	adds	r7, #52	@ 0x34
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	3a83126f 	.word	0x3a83126f

0800369c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b08c      	sub	sp, #48	@ 0x30
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80036a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	605a      	str	r2, [r3, #4]
 80036ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80036ae:	1d3b      	adds	r3, r7, #4
 80036b0:	2220      	movs	r2, #32
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f00b fee1 	bl	800f47c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80036ba:	4b39      	ldr	r3, [pc, #228]	@ (80037a0 <MX_ADC1_Init+0x104>)
 80036bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80036c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80036c2:	4b37      	ldr	r3, [pc, #220]	@ (80037a0 <MX_ADC1_Init+0x104>)
 80036c4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80036c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80036ca:	4b35      	ldr	r3, [pc, #212]	@ (80037a0 <MX_ADC1_Init+0x104>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036d0:	4b33      	ldr	r3, [pc, #204]	@ (80037a0 <MX_ADC1_Init+0x104>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80036d6:	4b32      	ldr	r3, [pc, #200]	@ (80037a0 <MX_ADC1_Init+0x104>)
 80036d8:	2200      	movs	r2, #0
 80036da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80036dc:	4b30      	ldr	r3, [pc, #192]	@ (80037a0 <MX_ADC1_Init+0x104>)
 80036de:	2201      	movs	r2, #1
 80036e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036e2:	4b2f      	ldr	r3, [pc, #188]	@ (80037a0 <MX_ADC1_Init+0x104>)
 80036e4:	2204      	movs	r2, #4
 80036e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80036e8:	4b2d      	ldr	r3, [pc, #180]	@ (80037a0 <MX_ADC1_Init+0x104>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80036ee:	4b2c      	ldr	r3, [pc, #176]	@ (80037a0 <MX_ADC1_Init+0x104>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80036f4:	4b2a      	ldr	r3, [pc, #168]	@ (80037a0 <MX_ADC1_Init+0x104>)
 80036f6:	2202      	movs	r2, #2
 80036f8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80036fa:	4b29      	ldr	r3, [pc, #164]	@ (80037a0 <MX_ADC1_Init+0x104>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003702:	4b27      	ldr	r3, [pc, #156]	@ (80037a0 <MX_ADC1_Init+0x104>)
 8003704:	2200      	movs	r2, #0
 8003706:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003708:	4b25      	ldr	r3, [pc, #148]	@ (80037a0 <MX_ADC1_Init+0x104>)
 800370a:	2200      	movs	r2, #0
 800370c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800370e:	4b24      	ldr	r3, [pc, #144]	@ (80037a0 <MX_ADC1_Init+0x104>)
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003716:	4b22      	ldr	r3, [pc, #136]	@ (80037a0 <MX_ADC1_Init+0x104>)
 8003718:	2200      	movs	r2, #0
 800371a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800371c:	4b20      	ldr	r3, [pc, #128]	@ (80037a0 <MX_ADC1_Init+0x104>)
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003724:	481e      	ldr	r0, [pc, #120]	@ (80037a0 <MX_ADC1_Init+0x104>)
 8003726:	f004 f89f 	bl	8007868 <HAL_ADC_Init>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003730:	f002 f9fe 	bl	8005b30 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003734:	2300      	movs	r3, #0
 8003736:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800373c:	4619      	mov	r1, r3
 800373e:	4818      	ldr	r0, [pc, #96]	@ (80037a0 <MX_ADC1_Init+0x104>)
 8003740:	f005 f9be 	bl	8008ac0 <HAL_ADCEx_MultiModeConfigChannel>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800374a:	f002 f9f1 	bl	8005b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800374e:	4b15      	ldr	r3, [pc, #84]	@ (80037a4 <MX_ADC1_Init+0x108>)
 8003750:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003752:	2306      	movs	r3, #6
 8003754:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8003756:	2307      	movs	r3, #7
 8003758:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800375a:	237f      	movs	r3, #127	@ 0x7f
 800375c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800375e:	2304      	movs	r3, #4
 8003760:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003766:	1d3b      	adds	r3, r7, #4
 8003768:	4619      	mov	r1, r3
 800376a:	480d      	ldr	r0, [pc, #52]	@ (80037a0 <MX_ADC1_Init+0x104>)
 800376c:	f004 fb2a 	bl	8007dc4 <HAL_ADC_ConfigChannel>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003776:	f002 f9db 	bl	8005b30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800377a:	4b0b      	ldr	r3, [pc, #44]	@ (80037a8 <MX_ADC1_Init+0x10c>)
 800377c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800377e:	230c      	movs	r3, #12
 8003780:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003782:	1d3b      	adds	r3, r7, #4
 8003784:	4619      	mov	r1, r3
 8003786:	4806      	ldr	r0, [pc, #24]	@ (80037a0 <MX_ADC1_Init+0x104>)
 8003788:	f004 fb1c 	bl	8007dc4 <HAL_ADC_ConfigChannel>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8003792:	f002 f9cd 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003796:	bf00      	nop
 8003798:	3730      	adds	r7, #48	@ 0x30
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000410 	.word	0x20000410
 80037a4:	19200040 	.word	0x19200040
 80037a8:	1d500080 	.word	0x1d500080

080037ac <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b09e      	sub	sp, #120	@ 0x78
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	605a      	str	r2, [r3, #4]
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	60da      	str	r2, [r3, #12]
 80037c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037c4:	f107 0310 	add.w	r3, r7, #16
 80037c8:	2254      	movs	r2, #84	@ 0x54
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f00b fe55 	bl	800f47c <memset>
  if(adcHandle->Instance==ADC1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037da:	d15e      	bne.n	800389a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80037dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037e0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80037e2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80037e6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037e8:	f107 0310 	add.w	r3, r7, #16
 80037ec:	4618      	mov	r0, r3
 80037ee:	f006 fe5d 	bl	800a4ac <HAL_RCCEx_PeriphCLKConfig>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80037f8:	f002 f99a 	bl	8005b30 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80037fc:	4b29      	ldr	r3, [pc, #164]	@ (80038a4 <HAL_ADC_MspInit+0xf8>)
 80037fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003800:	4a28      	ldr	r2, [pc, #160]	@ (80038a4 <HAL_ADC_MspInit+0xf8>)
 8003802:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003806:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003808:	4b26      	ldr	r3, [pc, #152]	@ (80038a4 <HAL_ADC_MspInit+0xf8>)
 800380a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800380c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003814:	4b23      	ldr	r3, [pc, #140]	@ (80038a4 <HAL_ADC_MspInit+0xf8>)
 8003816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003818:	4a22      	ldr	r2, [pc, #136]	@ (80038a4 <HAL_ADC_MspInit+0xf8>)
 800381a:	f043 0304 	orr.w	r3, r3, #4
 800381e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003820:	4b20      	ldr	r3, [pc, #128]	@ (80038a4 <HAL_ADC_MspInit+0xf8>)
 8003822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800382c:	2303      	movs	r3, #3
 800382e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003830:	2303      	movs	r3, #3
 8003832:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003838:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800383c:	4619      	mov	r1, r3
 800383e:	481a      	ldr	r0, [pc, #104]	@ (80038a8 <HAL_ADC_MspInit+0xfc>)
 8003840:	f005 fe88 	bl	8009554 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003844:	4b19      	ldr	r3, [pc, #100]	@ (80038ac <HAL_ADC_MspInit+0x100>)
 8003846:	4a1a      	ldr	r2, [pc, #104]	@ (80038b0 <HAL_ADC_MspInit+0x104>)
 8003848:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800384a:	4b18      	ldr	r3, [pc, #96]	@ (80038ac <HAL_ADC_MspInit+0x100>)
 800384c:	2205      	movs	r2, #5
 800384e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003850:	4b16      	ldr	r3, [pc, #88]	@ (80038ac <HAL_ADC_MspInit+0x100>)
 8003852:	2200      	movs	r2, #0
 8003854:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003856:	4b15      	ldr	r3, [pc, #84]	@ (80038ac <HAL_ADC_MspInit+0x100>)
 8003858:	2200      	movs	r2, #0
 800385a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800385c:	4b13      	ldr	r3, [pc, #76]	@ (80038ac <HAL_ADC_MspInit+0x100>)
 800385e:	2280      	movs	r2, #128	@ 0x80
 8003860:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003862:	4b12      	ldr	r3, [pc, #72]	@ (80038ac <HAL_ADC_MspInit+0x100>)
 8003864:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003868:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800386a:	4b10      	ldr	r3, [pc, #64]	@ (80038ac <HAL_ADC_MspInit+0x100>)
 800386c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003870:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003872:	4b0e      	ldr	r3, [pc, #56]	@ (80038ac <HAL_ADC_MspInit+0x100>)
 8003874:	2220      	movs	r2, #32
 8003876:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003878:	4b0c      	ldr	r3, [pc, #48]	@ (80038ac <HAL_ADC_MspInit+0x100>)
 800387a:	2200      	movs	r2, #0
 800387c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800387e:	480b      	ldr	r0, [pc, #44]	@ (80038ac <HAL_ADC_MspInit+0x100>)
 8003880:	f005 fb36 	bl	8008ef0 <HAL_DMA_Init>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800388a:	f002 f951 	bl	8005b30 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a06      	ldr	r2, [pc, #24]	@ (80038ac <HAL_ADC_MspInit+0x100>)
 8003892:	655a      	str	r2, [r3, #84]	@ 0x54
 8003894:	4a05      	ldr	r2, [pc, #20]	@ (80038ac <HAL_ADC_MspInit+0x100>)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800389a:	bf00      	nop
 800389c:	3778      	adds	r7, #120	@ 0x78
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40021000 	.word	0x40021000
 80038a8:	48000800 	.word	0x48000800
 80038ac:	2000047c 	.word	0x2000047c
 80038b0:	40020008 	.word	0x40020008

080038b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80038ba:	4b22      	ldr	r3, [pc, #136]	@ (8003944 <MX_DMA_Init+0x90>)
 80038bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038be:	4a21      	ldr	r2, [pc, #132]	@ (8003944 <MX_DMA_Init+0x90>)
 80038c0:	f043 0304 	orr.w	r3, r3, #4
 80038c4:	6493      	str	r3, [r2, #72]	@ 0x48
 80038c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003944 <MX_DMA_Init+0x90>)
 80038c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	607b      	str	r3, [r7, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003944 <MX_DMA_Init+0x90>)
 80038d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003944 <MX_DMA_Init+0x90>)
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80038de:	4b19      	ldr	r3, [pc, #100]	@ (8003944 <MX_DMA_Init+0x90>)
 80038e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80038ea:	2200      	movs	r2, #0
 80038ec:	2100      	movs	r1, #0
 80038ee:	200b      	movs	r0, #11
 80038f0:	f005 fac9 	bl	8008e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80038f4:	200b      	movs	r0, #11
 80038f6:	f005 fae0 	bl	8008eba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80038fa:	2200      	movs	r2, #0
 80038fc:	2100      	movs	r1, #0
 80038fe:	200c      	movs	r0, #12
 8003900:	f005 fac1 	bl	8008e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003904:	200c      	movs	r0, #12
 8003906:	f005 fad8 	bl	8008eba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800390a:	2200      	movs	r2, #0
 800390c:	2100      	movs	r1, #0
 800390e:	200d      	movs	r0, #13
 8003910:	f005 fab9 	bl	8008e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003914:	200d      	movs	r0, #13
 8003916:	f005 fad0 	bl	8008eba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800391a:	2200      	movs	r2, #0
 800391c:	2100      	movs	r1, #0
 800391e:	200e      	movs	r0, #14
 8003920:	f005 fab1 	bl	8008e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003924:	200e      	movs	r0, #14
 8003926:	f005 fac8 	bl	8008eba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800392a:	2200      	movs	r2, #0
 800392c:	2100      	movs	r1, #0
 800392e:	200f      	movs	r0, #15
 8003930:	f005 faa9 	bl	8008e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003934:	200f      	movs	r0, #15
 8003936:	f005 fac0 	bl	8008eba <HAL_NVIC_EnableIRQ>

}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	40021000 	.word	0x40021000

08003948 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	@ 0x28
 800394c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800394e:	f107 0314 	add.w	r3, r7, #20
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	605a      	str	r2, [r3, #4]
 8003958:	609a      	str	r2, [r3, #8]
 800395a:	60da      	str	r2, [r3, #12]
 800395c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800395e:	4b4f      	ldr	r3, [pc, #316]	@ (8003a9c <MX_GPIO_Init+0x154>)
 8003960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003962:	4a4e      	ldr	r2, [pc, #312]	@ (8003a9c <MX_GPIO_Init+0x154>)
 8003964:	f043 0304 	orr.w	r3, r3, #4
 8003968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800396a:	4b4c      	ldr	r3, [pc, #304]	@ (8003a9c <MX_GPIO_Init+0x154>)
 800396c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003976:	4b49      	ldr	r3, [pc, #292]	@ (8003a9c <MX_GPIO_Init+0x154>)
 8003978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397a:	4a48      	ldr	r2, [pc, #288]	@ (8003a9c <MX_GPIO_Init+0x154>)
 800397c:	f043 0320 	orr.w	r3, r3, #32
 8003980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003982:	4b46      	ldr	r3, [pc, #280]	@ (8003a9c <MX_GPIO_Init+0x154>)
 8003984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	60fb      	str	r3, [r7, #12]
 800398c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800398e:	4b43      	ldr	r3, [pc, #268]	@ (8003a9c <MX_GPIO_Init+0x154>)
 8003990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003992:	4a42      	ldr	r2, [pc, #264]	@ (8003a9c <MX_GPIO_Init+0x154>)
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800399a:	4b40      	ldr	r3, [pc, #256]	@ (8003a9c <MX_GPIO_Init+0x154>)
 800399c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a6:	4b3d      	ldr	r3, [pc, #244]	@ (8003a9c <MX_GPIO_Init+0x154>)
 80039a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039aa:	4a3c      	ldr	r2, [pc, #240]	@ (8003a9c <MX_GPIO_Init+0x154>)
 80039ac:	f043 0302 	orr.w	r3, r3, #2
 80039b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039b2:	4b3a      	ldr	r3, [pc, #232]	@ (8003a9c <MX_GPIO_Init+0x154>)
 80039b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	607b      	str	r3, [r7, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 80039be:	2200      	movs	r2, #0
 80039c0:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80039c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039c8:	f005 ff5e 	bl	8009888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80039cc:	2200      	movs	r2, #0
 80039ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039d2:	4833      	ldr	r0, [pc, #204]	@ (8003aa0 <MX_GPIO_Init+0x158>)
 80039d4:	f005 ff58 	bl	8009888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80039d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80039e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80039e8:	f107 0314 	add.w	r3, r7, #20
 80039ec:	4619      	mov	r1, r3
 80039ee:	482c      	ldr	r0, [pc, #176]	@ (8003aa0 <MX_GPIO_Init+0x158>)
 80039f0:	f005 fdb0 	bl	8009554 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 80039f4:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 80039f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039fa:	2301      	movs	r3, #1
 80039fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a02:	2300      	movs	r3, #0
 8003a04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a06:	f107 0314 	add.w	r3, r7, #20
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a10:	f005 fda0 	bl	8009554 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_LIM_Pin LOWER_LIM_Pin UPPER_PHOTO_Pin EMER_Pin
                           PROX_Pin SAVE_Pin */
  GPIO_InitStruct.Pin = UPPER_LIM_Pin|LOWER_LIM_Pin|UPPER_PHOTO_Pin|EMER_Pin
 8003a14:	f241 03b6 	movw	r3, #4278	@ 0x10b6
 8003a18:	617b      	str	r3, [r7, #20]
                          |PROX_Pin|SAVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a22:	f107 0314 	add.w	r3, r7, #20
 8003a26:	4619      	mov	r1, r3
 8003a28:	481e      	ldr	r0, [pc, #120]	@ (8003aa4 <MX_GPIO_Init+0x15c>)
 8003a2a:	f005 fd93 	bl	8009554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a34:	2301      	movs	r3, #1
 8003a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a40:	f107 0314 	add.w	r3, r7, #20
 8003a44:	4619      	mov	r1, r3
 8003a46:	4816      	ldr	r0, [pc, #88]	@ (8003aa0 <MX_GPIO_Init+0x158>)
 8003a48:	f005 fd84 	bl	8009554 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = LOWER_PHOTO_Pin;
 8003a4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a52:	2300      	movs	r3, #0
 8003a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOWER_PHOTO_GPIO_Port, &GPIO_InitStruct);
 8003a5a:	f107 0314 	add.w	r3, r7, #20
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a64:	f005 fd76 	bl	8009554 <HAL_GPIO_Init>

  /*Configure GPIO pins : START_Pin DELETE_Pin RESET_SYS_Pin */
  GPIO_InitStruct.Pin = START_Pin|DELETE_Pin|RESET_SYS_Pin;
 8003a68:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a76:	f107 0314 	add.w	r3, r7, #20
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4808      	ldr	r0, [pc, #32]	@ (8003aa0 <MX_GPIO_Init+0x158>)
 8003a7e:	f005 fd69 	bl	8009554 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003a82:	2200      	movs	r2, #0
 8003a84:	2100      	movs	r1, #0
 8003a86:	2028      	movs	r0, #40	@ 0x28
 8003a88:	f005 f9fd 	bl	8008e86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003a8c:	2028      	movs	r0, #40	@ 0x28
 8003a8e:	f005 fa14 	bl	8008eba <HAL_NVIC_EnableIRQ>

}
 8003a92:	bf00      	nop
 8003a94:	3728      	adds	r7, #40	@ 0x28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	48000800 	.word	0x48000800
 8003aa4:	48000400 	.word	0x48000400

08003aa8 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b096      	sub	sp, #88	@ 0x58
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ab4:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8003abe:	1d3b      	adds	r3, r7, #4
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	f00a ff69 	bl	800e99a <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	f00b fbd9 	bl	800f28e <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4610      	mov	r0, r2
 8003aec:	f00b fbcf 	bl	800f28e <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8003afc:	4619      	mov	r1, r3
 8003afe:	4610      	mov	r0, r2
 8003b00:	f00b fbc5 	bl	800f28e <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8003b10:	4619      	mov	r1, r3
 8003b12:	ed97 0a02 	vldr	s0, [r7, #8]
 8003b16:	4610      	mov	r0, r2
 8003b18:	f00b fb48 	bl	800f1ac <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8003b2e:	461a      	mov	r2, r3
 8003b30:	f00b fac2 	bl	800f0b8 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8003b46:	461a      	mov	r2, r3
 8003b48:	f00a feec 	bl	800e924 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f00b faaa 	bl	800f0b8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8003b76:	461a      	mov	r2, r3
 8003b78:	f00b fa9e 	bl	800f0b8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8003b8e:	461a      	mov	r2, r3
 8003b90:	f00b fa92 	bl	800f0b8 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bac:	4610      	mov	r0, r2
 8003bae:	f00b fafd 	bl	800f1ac <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	f00a fead 	bl	800e924 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f00b fa6b 	bl	800f0b8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f00b fa5f 	bl	800f0b8 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f00a fe89 	bl	800e924 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8003c1e:	4619      	mov	r1, r3
 8003c20:	4610      	mov	r0, r2
 8003c22:	f00a fed2 	bl	800e9ca <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f00b fa3d 	bl	800f0b8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8003c50:	461a      	mov	r2, r3
 8003c52:	f00b fa31 	bl	800f0b8 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8003c68:	461a      	mov	r2, r3
 8003c6a:	f00b fa25 	bl	800f0b8 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8003c80:	461a      	mov	r2, r3
 8003c82:	f00b fac9 	bl	800f218 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f00b fa0d 	bl	800f0b8 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	f00a fe37 	bl	800e924 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f00b f9f5 	bl	800f0b8 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 8003cce:	f107 0310 	add.w	r3, r7, #16
 8003cd2:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	2104      	movs	r1, #4
 8003cda:	f00a fe5e 	bl	800e99a <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8003cea:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003cee:	4619      	mov	r1, r3
 8003cf0:	f00b f9e2 	bl	800f0b8 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8003cfa:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003cfe:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8003d02:	4618      	mov	r0, r3
 8003d04:	f00b fa88 	bl	800f218 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8003d14:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f00b f9cd 	bl	800f0b8 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8003d2e:	ee07 3a90 	vmov	s15, r3
}
 8003d32:	eeb0 0a67 	vmov.f32	s0, s15
 8003d36:	3758      	adds	r7, #88	@ 0x58
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8003d3c:	b5b0      	push	{r4, r5, r7, lr}
 8003d3e:	b0a4      	sub	sp, #144	@ 0x90
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6178      	str	r0, [r7, #20]
 8003d44:	6139      	str	r1, [r7, #16]
 8003d46:	60fa      	str	r2, [r7, #12]
 8003d48:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d4c:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8003d60:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003d64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d84:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003d88:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8003d96:	4bc6      	ldr	r3, [pc, #792]	@ (80040b0 <Kalman_Start+0x374>)
 8003d98:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8003d9c:	461d      	mov	r5, r3
 8003d9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003da0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003daa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003dae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8003db2:	f107 031c 	add.w	r3, r7, #28
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	609a      	str	r2, [r3, #8]
 8003dbe:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003dd0:	e028      	b.n	8003e24 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8003dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4413      	add	r3, r2
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	6979      	ldr	r1, [r7, #20]
 8003de0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003de4:	3314      	adds	r3, #20
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8003dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	3390      	adds	r3, #144	@ 0x90
 8003df4:	443b      	add	r3, r7
 8003df6:	3b64      	subs	r3, #100	@ 0x64
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	6979      	ldr	r1, [r7, #20]
 8003dfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e00:	3398      	adds	r3, #152	@ 0x98
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e0e:	3304      	adds	r3, #4
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8003e1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e1e:	3301      	adds	r3, #1
 8003e20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e28:	2b0f      	cmp	r3, #15
 8003e2a:	ddd2      	ble.n	8003dd2 <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e32:	e03a      	b.n	8003eaa <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8003e34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	3390      	adds	r3, #144	@ 0x90
 8003e3c:	443b      	add	r3, r7
 8003e3e:	3b74      	subs	r3, #116	@ 0x74
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	6979      	ldr	r1, [r7, #20]
 8003e44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8003e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	6979      	ldr	r1, [r7, #20]
 8003e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e60:	3324      	adds	r3, #36	@ 0x24
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8003e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	3390      	adds	r3, #144	@ 0x90
 8003e70:	443b      	add	r3, r7
 8003e72:	3b14      	subs	r3, #20
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	6979      	ldr	r1, [r7, #20]
 8003e78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e7c:	3328      	adds	r3, #40	@ 0x28
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8003e84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	3390      	adds	r3, #144	@ 0x90
 8003e8c:	443b      	add	r3, r7
 8003e8e:	3b24      	subs	r3, #36	@ 0x24
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	6979      	ldr	r1, [r7, #20]
 8003e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e98:	332c      	adds	r3, #44	@ 0x2c
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8003ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	ddc0      	ble.n	8003e34 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	2104      	movs	r1, #4
 8003ebe:	f00a fd6c 	bl	800e99a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	3310      	adds	r3, #16
 8003ecc:	2204      	movs	r2, #4
 8003ece:	2104      	movs	r1, #4
 8003ed0:	f00a fd63 	bl	800e99a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	3350      	adds	r3, #80	@ 0x50
 8003ede:	2204      	movs	r2, #4
 8003ee0:	2104      	movs	r1, #4
 8003ee2:	f00a fd5a 	bl	800e99a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	3390      	adds	r3, #144	@ 0x90
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	2104      	movs	r1, #4
 8003ef4:	f00a fd51 	bl	800e99a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	33a0      	adds	r3, #160	@ 0xa0
 8003f02:	2204      	movs	r2, #4
 8003f04:	2101      	movs	r1, #1
 8003f06:	f00a fd48 	bl	800e99a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	33b0      	adds	r3, #176	@ 0xb0
 8003f14:	2201      	movs	r2, #1
 8003f16:	2104      	movs	r1, #4
 8003f18:	f00a fd3f 	bl	800e99a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	33c8      	adds	r3, #200	@ 0xc8
 8003f26:	2204      	movs	r2, #4
 8003f28:	2104      	movs	r1, #4
 8003f2a:	f00a fd36 	bl	800e99a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	2104      	movs	r1, #4
 8003f3e:	f00a fd2c 	bl	800e99a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8003f4e:	2204      	movs	r2, #4
 8003f50:	2101      	movs	r1, #1
 8003f52:	f00a fd22 	bl	800e99a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003f62:	2204      	movs	r2, #4
 8003f64:	2104      	movs	r1, #4
 8003f66:	f00a fd18 	bl	800e99a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003f76:	2204      	movs	r2, #4
 8003f78:	2104      	movs	r1, #4
 8003f7a:	f00a fd0e 	bl	800e99a <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	2104      	movs	r1, #4
 8003f8e:	f00a fd04 	bl	800e99a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	2104      	movs	r1, #4
 8003fa2:	f00a fcfa 	bl	800e99a <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8003fb2:	2204      	movs	r2, #4
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	f00a fcf0 	bl	800e99a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	2101      	movs	r1, #1
 8003fca:	f00a fce6 	bl	800e99a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8003fda:	2201      	movs	r2, #1
 8003fdc:	2101      	movs	r1, #1
 8003fde:	f00a fcdc 	bl	800e99a <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8003fee:	2201      	movs	r2, #1
 8003ff0:	2104      	movs	r1, #4
 8003ff2:	f00a fcd2 	bl	800e99a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8004002:	2201      	movs	r2, #1
 8004004:	2104      	movs	r1, #4
 8004006:	f00a fcc8 	bl	800e99a <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8004016:	2201      	movs	r2, #1
 8004018:	2101      	movs	r1, #1
 800401a:	f00a fcbe 	bl	800e99a <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800402a:	2201      	movs	r2, #1
 800402c:	2101      	movs	r1, #1
 800402e:	f00a fcb4 	bl	800e99a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800403e:	2201      	movs	r2, #1
 8004040:	2101      	movs	r1, #1
 8004042:	f00a fcaa 	bl	800e99a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004052:	2201      	movs	r2, #1
 8004054:	2104      	movs	r1, #4
 8004056:	f00a fca0 	bl	800e99a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004066:	2201      	movs	r2, #1
 8004068:	2101      	movs	r1, #1
 800406a:	f00a fc96 	bl	800e99a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800407a:	2204      	movs	r2, #4
 800407c:	2104      	movs	r1, #4
 800407e:	f00a fc8c 	bl	800e99a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	33c4      	adds	r3, #196	@ 0xc4
 800408c:	2201      	movs	r2, #1
 800408e:	2101      	movs	r1, #1
 8004090:	f00a fc83 	bl	800e99a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80040a0:	2201      	movs	r2, #1
 80040a2:	2101      	movs	r1, #1
 80040a4:	f00a fc79 	bl	800e99a <arm_mat_init_f32>
}
 80040a8:	bf00      	nop
 80040aa:	3790      	adds	r7, #144	@ 0x90
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bdb0      	pop	{r4, r5, r7, pc}
 80040b0:	08010154 	.word	0x08010154

080040b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80040b8:	f3bf 8f4f 	dsb	sy
}
 80040bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80040be:	4b06      	ldr	r3, [pc, #24]	@ (80040d8 <__NVIC_SystemReset+0x24>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80040c6:	4904      	ldr	r1, [pc, #16]	@ (80040d8 <__NVIC_SystemReset+0x24>)
 80040c8:	4b04      	ldr	r3, [pc, #16]	@ (80040dc <__NVIC_SystemReset+0x28>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80040ce:	f3bf 8f4f 	dsb	sy
}
 80040d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80040d4:	bf00      	nop
 80040d6:	e7fd      	b.n	80040d4 <__NVIC_SystemReset+0x20>
 80040d8:	e000ed00 	.word	0xe000ed00
 80040dc:	05fa0004 	.word	0x05fa0004

080040e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80040e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040e4:	ed2d 8b02 	vpush	{d8}
 80040e8:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80040ea:	f003 f908 	bl	80072fe <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80040ee:	f000 f8e3 	bl	80042b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80040f2:	f7ff fc29 	bl	8003948 <MX_GPIO_Init>
	MX_DMA_Init();
 80040f6:	f7ff fbdd 	bl	80038b4 <MX_DMA_Init>
	MX_ADC1_Init();
 80040fa:	f7ff facf 	bl	800369c <MX_ADC1_Init>
	MX_TIM2_Init();
 80040fe:	f002 fb11 	bl	8006724 <MX_TIM2_Init>
	MX_TIM3_Init();
 8004102:	f002 fb5d 	bl	80067c0 <MX_TIM3_Init>
	MX_TIM4_Init();
 8004106:	f002 fbb1 	bl	800686c <MX_TIM4_Init>
	MX_TIM5_Init();
 800410a:	f002 fc05 	bl	8006918 <MX_TIM5_Init>
	MX_TIM8_Init();
 800410e:	f002 fc51 	bl	80069b4 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8004112:	f002 ff1d 	bl	8006f50 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8004116:	f002 fd15 	bl	8006b44 <MX_TIM16_Init>
	MX_TIM1_Init();
 800411a:	f002 fa6f 	bl	80065fc <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 800411e:	f002 fecd 	bl	8006ebc <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8004122:	f001 fd0b 	bl	8005b3c <plotter_begin>
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8004126:	4b56      	ldr	r3, [pc, #344]	@ (8004280 <main+0x1a0>)
 8004128:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800412c:	4610      	mov	r0, r2
 800412e:	4619      	mov	r1, r3
 8004130:	f7fc fd10 	bl	8000b54 <__aeabi_d2f>
 8004134:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.B, ZGX45RGG_150RPM_Constant.Kt,
 8004136:	4b52      	ldr	r3, [pc, #328]	@ (8004280 <main+0x1a0>)
 8004138:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 800413c:	4610      	mov	r0, r2
 800413e:	4619      	mov	r1, r3
 8004140:	f7fc fd08 	bl	8000b54 <__aeabi_d2f>
 8004144:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.B, ZGX45RGG_150RPM_Constant.Kt,
 8004146:	4b4e      	ldr	r3, [pc, #312]	@ (8004280 <main+0x1a0>)
 8004148:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 800414c:	4610      	mov	r0, r2
 800414e:	4619      	mov	r1, r3
 8004150:	f7fc fd00 	bl	8000b54 <__aeabi_d2f>
 8004154:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 8004156:	4b4a      	ldr	r3, [pc, #296]	@ (8004280 <main+0x1a0>)
 8004158:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 800415c:	4610      	mov	r0, r2
 800415e:	4619      	mov	r1, r3
 8004160:	f7fc fcf8 	bl	8000b54 <__aeabi_d2f>
 8004164:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 8004166:	4b46      	ldr	r3, [pc, #280]	@ (8004280 <main+0x1a0>)
 8004168:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 800416c:	4610      	mov	r0, r2
 800416e:	4619      	mov	r1, r3
 8004170:	f7fc fcf0 	bl	8000b54 <__aeabi_d2f>
 8004174:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.L, 1.0, 0.05);
 8004176:	4b42      	ldr	r3, [pc, #264]	@ (8004280 <main+0x1a0>)
 8004178:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 800417c:	4610      	mov	r0, r2
 800417e:	4619      	mov	r1, r3
 8004180:	f7fc fce8 	bl	8000b54 <__aeabi_d2f>
 8004184:	4603      	mov	r3, r0
 8004186:	ed9f 4a3f 	vldr	s8, [pc, #252]	@ 8004284 <main+0x1a4>
 800418a:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 800418e:	ee03 3a10 	vmov	s6, r3
 8004192:	ee02 9a90 	vmov	s5, r9
 8004196:	ee02 8a10 	vmov	s4, r8
 800419a:	ee01 6a90 	vmov	s3, r6
 800419e:	ee01 5a10 	vmov	s2, r5
 80041a2:	ee00 4a90 	vmov	s1, r4
 80041a6:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8004288 <main+0x1a8>
 80041aa:	4838      	ldr	r0, [pc, #224]	@ (800428c <main+0x1ac>)
 80041ac:	f7fd fe74 	bl	8001e98 <MotorKalman_Init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		plotter_update_sensors();
 80041b0:	f001 ff88 	bl	80060c4 <plotter_update_sensors>

		static uint8_t button_pressed_previous = 0;

		if (b1[0] == 0 && b1[1] == 1  && !revtrajectoryActive) {
 80041b4:	4b36      	ldr	r3, [pc, #216]	@ (8004290 <main+0x1b0>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d14e      	bne.n	800425a <main+0x17a>
 80041bc:	4b34      	ldr	r3, [pc, #208]	@ (8004290 <main+0x1b0>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d14a      	bne.n	800425a <main+0x17a>
 80041c4:	4b33      	ldr	r3, [pc, #204]	@ (8004294 <main+0x1b4>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	f083 0301 	eor.w	r3, r3, #1
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d043      	beq.n	800425a <main+0x17a>
			revEva.t = 0.0f;
 80041d2:	4b31      	ldr	r3, [pc, #196]	@ (8004298 <main+0x1b8>)
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	60da      	str	r2, [r3, #12]
			revEva.isFinised = false;
 80041da:	4b2f      	ldr	r3, [pc, #188]	@ (8004298 <main+0x1b8>)
 80041dc:	2200      	movs	r2, #0
 80041de:	741a      	strb	r2, [r3, #16]

			rev_initial_p = revolute_encoder.rads;
 80041e0:	4b2e      	ldr	r3, [pc, #184]	@ (800429c <main+0x1bc>)
 80041e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e4:	4a2e      	ldr	r2, [pc, #184]	@ (80042a0 <main+0x1c0>)
 80041e6:	6013      	str	r3, [r2, #0]

			rev_target_p = trajectory_sequence[trajectory_sequence_index];
 80041e8:	4b2e      	ldr	r3, [pc, #184]	@ (80042a4 <main+0x1c4>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	4a2e      	ldr	r2, [pc, #184]	@ (80042a8 <main+0x1c8>)
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a2d      	ldr	r2, [pc, #180]	@ (80042ac <main+0x1cc>)
 80041f6:	6013      	str	r3, [r2, #0]

			Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 80041f8:	4b29      	ldr	r3, [pc, #164]	@ (80042a0 <main+0x1c0>)
 80041fa:	ed93 8a00 	vldr	s16, [r3]
 80041fe:	4b2b      	ldr	r3, [pc, #172]	@ (80042ac <main+0x1cc>)
 8004200:	edd3 8a00 	vldr	s17, [r3]
					ZGX45RGG_150RPM_Constant.qd_max,
 8004204:	4b1e      	ldr	r3, [pc, #120]	@ (8004280 <main+0x1a0>)
 8004206:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 800420a:	4610      	mov	r0, r2
 800420c:	4619      	mov	r1, r3
 800420e:	f7fc fca1 	bl	8000b54 <__aeabi_d2f>
 8004212:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.qdd_max);
 8004214:	4b1a      	ldr	r3, [pc, #104]	@ (8004280 <main+0x1a0>)
 8004216:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
			Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 800421a:	4610      	mov	r0, r2
 800421c:	4619      	mov	r1, r3
 800421e:	f7fc fc99 	bl	8000b54 <__aeabi_d2f>
 8004222:	4603      	mov	r3, r0
 8004224:	ee01 3a90 	vmov	s3, r3
 8004228:	ee01 4a10 	vmov	s2, r4
 800422c:	eef0 0a68 	vmov.f32	s1, s17
 8004230:	eeb0 0a48 	vmov.f32	s0, s16
 8004234:	481e      	ldr	r0, [pc, #120]	@ (80042b0 <main+0x1d0>)
 8004236:	f7ff f81c 	bl	8003272 <Trapezoidal_Generator>

			revtrajectoryActive = true;
 800423a:	4b16      	ldr	r3, [pc, #88]	@ (8004294 <main+0x1b4>)
 800423c:	2201      	movs	r2, #1
 800423e:	701a      	strb	r2, [r3, #0]

			trajectory_sequence_index = (trajectory_sequence_index + 1) % 4;
 8004240:	4b18      	ldr	r3, [pc, #96]	@ (80042a4 <main+0x1c4>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	3301      	adds	r3, #1
 8004246:	425a      	negs	r2, r3
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	f002 0203 	and.w	r2, r2, #3
 8004250:	bf58      	it	pl
 8004252:	4253      	negpl	r3, r2
 8004254:	b2da      	uxtb	r2, r3
 8004256:	4b13      	ldr	r3, [pc, #76]	@ (80042a4 <main+0x1c4>)
 8004258:	701a      	strb	r2, [r3, #0]
		}
		b1[0] =  b1[1];
 800425a:	4b0d      	ldr	r3, [pc, #52]	@ (8004290 <main+0x1b0>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	4a0c      	ldr	r2, [pc, #48]	@ (8004290 <main+0x1b0>)
 8004260:	6013      	str	r3, [r2, #0]

		if (b2[0] == 0 && b2[1] == 1) {
 8004262:	4b14      	ldr	r3, [pc, #80]	@ (80042b4 <main+0x1d4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d105      	bne.n	8004276 <main+0x196>
 800426a:	4b12      	ldr	r3, [pc, #72]	@ (80042b4 <main+0x1d4>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <main+0x196>
			NVIC_SystemReset();
 8004272:	f7ff ff1f 	bl	80040b4 <__NVIC_SystemReset>
		}
		b2[0] =  b2[1];
 8004276:	4b0f      	ldr	r3, [pc, #60]	@ (80042b4 <main+0x1d4>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	4a0e      	ldr	r2, [pc, #56]	@ (80042b4 <main+0x1d4>)
 800427c:	6013      	str	r3, [r2, #0]
	while (1) {
 800427e:	e797      	b.n	80041b0 <main+0xd0>
 8004280:	20000000 	.word	0x20000000
 8004284:	3d4ccccd 	.word	0x3d4ccccd
 8004288:	3a83126f 	.word	0x3a83126f
 800428c:	200004dc 	.word	0x200004dc
 8004290:	20001b4c 	.word	0x20001b4c
 8004294:	200008c8 	.word	0x200008c8
 8004298:	200008b4 	.word	0x200008b4
 800429c:	20000a10 	.word	0x20000a10
 80042a0:	200008cc 	.word	0x200008cc
 80042a4:	2000090c 	.word	0x2000090c
 80042a8:	08010194 	.word	0x08010194
 80042ac:	200008d0 	.word	0x200008d0
 80042b0:	200008a0 	.word	0x200008a0
 80042b4:	20001b54 	.word	0x20001b54

080042b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b094      	sub	sp, #80	@ 0x50
 80042bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80042be:	f107 0318 	add.w	r3, r7, #24
 80042c2:	2238      	movs	r2, #56	@ 0x38
 80042c4:	2100      	movs	r1, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f00b f8d8 	bl	800f47c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80042cc:	1d3b      	adds	r3, r7, #4
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	605a      	str	r2, [r3, #4]
 80042d4:	609a      	str	r2, [r3, #8]
 80042d6:	60da      	str	r2, [r3, #12]
 80042d8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80042da:	2000      	movs	r0, #0
 80042dc:	f005 fb04 	bl	80098e8 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80042e0:	2302      	movs	r3, #2
 80042e2:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042e8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80042ea:	2340      	movs	r3, #64	@ 0x40
 80042ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042ee:	2302      	movs	r3, #2
 80042f0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80042f2:	2302      	movs	r3, #2
 80042f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80042f6:	2304      	movs	r3, #4
 80042f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80042fa:	2355      	movs	r3, #85	@ 0x55
 80042fc:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80042fe:	2302      	movs	r3, #2
 8004300:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004302:	2302      	movs	r3, #2
 8004304:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004306:	2302      	movs	r3, #2
 8004308:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800430a:	f107 0318 	add.w	r3, r7, #24
 800430e:	4618      	mov	r0, r3
 8004310:	f005 fb9e 	bl	8009a50 <HAL_RCC_OscConfig>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <SystemClock_Config+0x66>
		Error_Handler();
 800431a:	f001 fc09 	bl	8005b30 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800431e:	230f      	movs	r3, #15
 8004320:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004322:	2303      	movs	r3, #3
 8004324:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800432a:	2300      	movs	r3, #0
 800432c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8004332:	1d3b      	adds	r3, r7, #4
 8004334:	2104      	movs	r1, #4
 8004336:	4618      	mov	r0, r3
 8004338:	f005 fe9c 	bl	800a074 <HAL_RCC_ClockConfig>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <SystemClock_Config+0x8e>
		Error_Handler();
 8004342:	f001 fbf5 	bl	8005b30 <Error_Handler>
	}
}
 8004346:	bf00      	nop
 8004348:	3750      	adds	r7, #80	@ 0x50
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <check_prismatic_limit>:

/* USER CODE BEGIN 4 */
bool check_prismatic_limit() {
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0
	// If this is a valid operation that's supposed to reach the limit,
	// then don't report it as a limit violation
	if (prismatic_state == PP_GOING_TOP_END
 8004354:	4b19      	ldr	r3, [pc, #100]	@ (80043bc <check_prismatic_limit+0x6c>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d007      	beq.n	800436c <check_prismatic_limit+0x1c>
			|| prismatic_state == PP_AT_TOP_END_POSITION
 800435c:	4b17      	ldr	r3, [pc, #92]	@ (80043bc <check_prismatic_limit+0x6c>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <check_prismatic_limit+0x1c>
			|| prismatic_state == PP_AT_BOTTOM_END_POSITION) {
 8004364:	4b15      	ldr	r3, [pc, #84]	@ (80043bc <check_prismatic_limit+0x6c>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d101      	bne.n	8004370 <check_prismatic_limit+0x20>
		return false;
 800436c:	2300      	movs	r3, #0
 800436e:	e01f      	b.n	80043b0 <check_prismatic_limit+0x60>
	}

	// Otherwise, if either condition indicates we're at a limit, report it
	return (prismatic_encoder.mm >= PRISMATIC_MAX_POS || up_photo
 8004370:	4b13      	ldr	r3, [pc, #76]	@ (80043c0 <check_prismatic_limit+0x70>)
 8004372:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
			|| prismatic_encoder.mm <= PRISMATIC_MIN_POS || low_photo);
 8004376:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80043c4 <check_prismatic_limit+0x74>
 800437a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800437e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004382:	da0f      	bge.n	80043a4 <check_prismatic_limit+0x54>
	return (prismatic_encoder.mm >= PRISMATIC_MAX_POS || up_photo
 8004384:	4b10      	ldr	r3, [pc, #64]	@ (80043c8 <check_prismatic_limit+0x78>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10b      	bne.n	80043a4 <check_prismatic_limit+0x54>
			|| prismatic_encoder.mm <= PRISMATIC_MIN_POS || low_photo);
 800438c:	4b0c      	ldr	r3, [pc, #48]	@ (80043c0 <check_prismatic_limit+0x70>)
 800438e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8004392:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800439a:	d903      	bls.n	80043a4 <check_prismatic_limit+0x54>
 800439c:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <check_prismatic_limit+0x7c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <check_prismatic_limit+0x58>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <check_prismatic_limit+0x5a>
 80043a8:	2300      	movs	r3, #0
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	b2db      	uxtb	r3, r3
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	200002ee 	.word	0x200002ee
 80043c0:	200009b4 	.word	0x200009b4
 80043c4:	43960000 	.word	0x43960000
 80043c8:	20001b3c 	.word	0x20001b3c
 80043cc:	20001b40 	.word	0x20001b40

080043d0 <check_revolute_limit>:

bool check_revolute_limit() {
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
	// For homing operations, don't count limits as violations
	if (revolute_state == RP_GOING_HOME) {
 80043d4:	4b11      	ldr	r3, [pc, #68]	@ (800441c <check_revolute_limit+0x4c>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <check_revolute_limit+0x10>
		return false;
 80043dc:	2300      	movs	r3, #0
 80043de:	e017      	b.n	8004410 <check_revolute_limit+0x40>
	}

	// For normal operation, check limits
	return (revolute_encoder.rads >= REVOLUTE_MAX_POS
 80043e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004420 <check_revolute_limit+0x50>)
 80043e2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
			|| revolute_encoder.rads <= REVOLUTE_MIN_POS);
 80043e6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8004424 <check_revolute_limit+0x54>
 80043ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f2:	da07      	bge.n	8004404 <check_revolute_limit+0x34>
 80043f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004420 <check_revolute_limit+0x50>)
 80043f6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80043fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004402:	d801      	bhi.n	8004408 <check_revolute_limit+0x38>
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <check_revolute_limit+0x3a>
 8004408:	2300      	movs	r3, #0
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	b2db      	uxtb	r3, r3
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	200002ef 	.word	0x200002ef
 8004420:	20000a10 	.word	0x20000a10
 8004424:	40c90fdb 	.word	0x40c90fdb

08004428 <is_valid_target>:

bool is_valid_target(float32_t pris_tgt, float32_t rev_tgt) {
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004432:	edc7 0a00 	vstr	s1, [r7]
	// Check if targets are within physical limits
	if (pris_tgt > PRISMATIC_MAX_POS || pris_tgt < PRISMATIC_MIN_POS) {
 8004436:	edd7 7a01 	vldr	s15, [r7, #4]
 800443a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800448c <is_valid_target+0x64>
 800443e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004446:	dc06      	bgt.n	8004456 <is_valid_target+0x2e>
 8004448:	edd7 7a01 	vldr	s15, [r7, #4]
 800444c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004454:	d501      	bpl.n	800445a <is_valid_target+0x32>
		return false;
 8004456:	2300      	movs	r3, #0
 8004458:	e012      	b.n	8004480 <is_valid_target+0x58>
	}

	if (rev_tgt > REVOLUTE_MAX_POS || rev_tgt < REVOLUTE_MIN_POS) {
 800445a:	edd7 7a00 	vldr	s15, [r7]
 800445e:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004490 <is_valid_target+0x68>
 8004462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446a:	dc06      	bgt.n	800447a <is_valid_target+0x52>
 800446c:	edd7 7a00 	vldr	s15, [r7]
 8004470:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004478:	d501      	bpl.n	800447e <is_valid_target+0x56>
		return false;
 800447a:	2300      	movs	r3, #0
 800447c:	e000      	b.n	8004480 <is_valid_target+0x58>
	}

	return true;
 800447e:	2301      	movs	r3, #1
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	43960000 	.word	0x43960000
 8004490:	40c90fdb 	.word	0x40c90fdb

08004494 <plotter_move>:

void plotter_move() {
 8004494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004498:	ed2d 8b02 	vpush	{d8}
 800449c:	af00      	add	r7, sp, #0
	pris_pos[0] = prismatic_encoder.mm;
 800449e:	4ba8      	ldr	r3, [pc, #672]	@ (8004740 <plotter_move+0x2ac>)
 80044a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044a2:	4aa8      	ldr	r2, [pc, #672]	@ (8004744 <plotter_move+0x2b0>)
 80044a4:	6013      	str	r3, [r2, #0]

	pris_pos_error = prismatic_pos - prismatic_encoder.mm;
 80044a6:	4ba8      	ldr	r3, [pc, #672]	@ (8004748 <plotter_move+0x2b4>)
 80044a8:	ed93 7a00 	vldr	s14, [r3]
 80044ac:	4ba4      	ldr	r3, [pc, #656]	@ (8004740 <plotter_move+0x2ac>)
 80044ae:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80044b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044b6:	4ba5      	ldr	r3, [pc, #660]	@ (800474c <plotter_move+0x2b8>)
 80044b8:	edc3 7a00 	vstr	s15, [r3]

	pris_cmd_vx = saturation(
 80044bc:	4ba3      	ldr	r3, [pc, #652]	@ (800474c <plotter_move+0x2b8>)
 80044be:	edd3 7a00 	vldr	s15, [r3]
 80044c2:	eeb0 0a67 	vmov.f32	s0, s15
 80044c6:	48a2      	ldr	r0, [pc, #648]	@ (8004750 <plotter_move+0x2bc>)
 80044c8:	f7fc fe3b 	bl	8001142 <PID_CONTROLLER_Compute>
 80044cc:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid, pris_pos_error),
			ZGX45RGG_400RPM_Constant.sd_max, -ZGX45RGG_400RPM_Constant.sd_max);
 80044d0:	4ba0      	ldr	r3, [pc, #640]	@ (8004754 <plotter_move+0x2c0>)
 80044d2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	pris_cmd_vx = saturation(
 80044d6:	4610      	mov	r0, r2
 80044d8:	4619      	mov	r1, r3
 80044da:	f7fc fb3b 	bl	8000b54 <__aeabi_d2f>
 80044de:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.sd_max, -ZGX45RGG_400RPM_Constant.sd_max);
 80044e0:	4b9c      	ldr	r3, [pc, #624]	@ (8004754 <plotter_move+0x2c0>)
 80044e2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80044e6:	4610      	mov	r0, r2
 80044e8:	4619      	mov	r1, r3
 80044ea:	f7fc fb33 	bl	8000b54 <__aeabi_d2f>
 80044ee:	4603      	mov	r3, r0
	pris_cmd_vx = saturation(
 80044f0:	ee07 3a90 	vmov	s15, r3
 80044f4:	eef1 7a67 	vneg.f32	s15, s15
 80044f8:	eeb0 1a67 	vmov.f32	s2, s15
 80044fc:	ee00 6a90 	vmov	s1, r6
 8004500:	eeb0 0a48 	vmov.f32	s0, s16
 8004504:	f7fd f945 	bl	8001792 <saturation>
 8004508:	eef0 7a40 	vmov.f32	s15, s0
 800450c:	4b92      	ldr	r3, [pc, #584]	@ (8004758 <plotter_move+0x2c4>)
 800450e:	edc3 7a00 	vstr	s15, [r3]

	pris_vel_error = pris_cmd_vx + prismatic_vel - pris_kal_filt;
 8004512:	4b91      	ldr	r3, [pc, #580]	@ (8004758 <plotter_move+0x2c4>)
 8004514:	ed93 7a00 	vldr	s14, [r3]
 8004518:	4b90      	ldr	r3, [pc, #576]	@ (800475c <plotter_move+0x2c8>)
 800451a:	edd3 7a00 	vldr	s15, [r3]
 800451e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004522:	4b8f      	ldr	r3, [pc, #572]	@ (8004760 <plotter_move+0x2cc>)
 8004524:	edd3 7a00 	vldr	s15, [r3]
 8004528:	ee77 7a67 	vsub.f32	s15, s14, s15
 800452c:	4b8d      	ldr	r3, [pc, #564]	@ (8004764 <plotter_move+0x2d0>)
 800452e:	edc3 7a00 	vstr	s15, [r3]

	pris_cmd_ux = PWM_Satuation(
 8004532:	4b8c      	ldr	r3, [pc, #560]	@ (8004764 <plotter_move+0x2d0>)
 8004534:	edd3 7a00 	vldr	s15, [r3]
 8004538:	eeb0 0a67 	vmov.f32	s0, s15
 800453c:	488a      	ldr	r0, [pc, #552]	@ (8004768 <plotter_move+0x2d4>)
 800453e:	f7fc fe00 	bl	8001142 <PID_CONTROLLER_Compute>
 8004542:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid, pris_vel_error),
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8004546:	4b83      	ldr	r3, [pc, #524]	@ (8004754 <plotter_move+0x2c0>)
 8004548:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	pris_cmd_ux = PWM_Satuation(
 800454c:	4610      	mov	r0, r2
 800454e:	4619      	mov	r1, r3
 8004550:	f7fc fab8 	bl	8000ac4 <__aeabi_d2iz>
 8004554:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8004556:	4b7f      	ldr	r3, [pc, #508]	@ (8004754 <plotter_move+0x2c0>)
 8004558:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800455c:	4690      	mov	r8, r2
 800455e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	pris_cmd_ux = PWM_Satuation(
 8004562:	4640      	mov	r0, r8
 8004564:	4649      	mov	r1, r9
 8004566:	f7fc faad 	bl	8000ac4 <__aeabi_d2iz>
 800456a:	4603      	mov	r3, r0
 800456c:	4619      	mov	r1, r3
 800456e:	4630      	mov	r0, r6
 8004570:	eeb0 0a48 	vmov.f32	s0, s16
 8004574:	f7fc fd8c 	bl	8001090 <PWM_Satuation>
 8004578:	ee07 0a90 	vmov	s15, r0
 800457c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004580:	4b7a      	ldr	r3, [pc, #488]	@ (800476c <plotter_move+0x2d8>)
 8004582:	edc3 7a00 	vstr	s15, [r3]

	if (check_prismatic_limit()) {
 8004586:	f7ff fee3 	bl	8004350 <check_prismatic_limit>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00a      	beq.n	80045a6 <plotter_move+0x112>
		MDXX_set_range(&prismatic_motor, 2000, 0);
 8004590:	eddf 0a77 	vldr	s1, [pc, #476]	@ 8004770 <plotter_move+0x2dc>
 8004594:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 8004774 <plotter_move+0x2e0>
 8004598:	4877      	ldr	r0, [pc, #476]	@ (8004778 <plotter_move+0x2e4>)
 800459a:	f7fc fe89 	bl	80012b0 <MDXX_set_range>
		pristrajectoryActive = false;
 800459e:	4b77      	ldr	r3, [pc, #476]	@ (800477c <plotter_move+0x2e8>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	701a      	strb	r2, [r3, #0]
		return;
 80045a4:	e0c7      	b.n	8004736 <plotter_move+0x2a2>
	}

	MDXX_set_range(&prismatic_motor, 2000, pris_cmd_ux);
 80045a6:	4b71      	ldr	r3, [pc, #452]	@ (800476c <plotter_move+0x2d8>)
 80045a8:	edd3 7a00 	vldr	s15, [r3]
 80045ac:	eef0 0a67 	vmov.f32	s1, s15
 80045b0:	ed9f 0a70 	vldr	s0, [pc, #448]	@ 8004774 <plotter_move+0x2e0>
 80045b4:	4870      	ldr	r0, [pc, #448]	@ (8004778 <plotter_move+0x2e4>)
 80045b6:	f7fc fe7b 	bl	80012b0 <MDXX_set_range>

	if (pris_pos[0] - pris_pos[1] > 0) {
 80045ba:	4b62      	ldr	r3, [pc, #392]	@ (8004744 <plotter_move+0x2b0>)
 80045bc:	ed93 7a00 	vldr	s14, [r3]
 80045c0:	4b60      	ldr	r3, [pc, #384]	@ (8004744 <plotter_move+0x2b0>)
 80045c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80045c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d2:	dd03      	ble.n	80045dc <plotter_move+0x148>
		prismatic_state = PP_GO_UP;
 80045d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004780 <plotter_move+0x2ec>)
 80045d6:	2203      	movs	r2, #3
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	e002      	b.n	80045e2 <plotter_move+0x14e>
	} else {
		prismatic_state = PP_GO_DOWN;
 80045dc:	4b68      	ldr	r3, [pc, #416]	@ (8004780 <plotter_move+0x2ec>)
 80045de:	2204      	movs	r2, #4
 80045e0:	701a      	strb	r2, [r3, #0]
	}

/////////////////////////////////////////////////////

	rev_pos[0] = revolute_encoder.rads;
 80045e2:	4b68      	ldr	r3, [pc, #416]	@ (8004784 <plotter_move+0x2f0>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e6:	4a68      	ldr	r2, [pc, #416]	@ (8004788 <plotter_move+0x2f4>)
 80045e8:	6013      	str	r3, [r2, #0]

	rev_pos_error = revolute_pos - revolute_encoder.rads;
 80045ea:	4b68      	ldr	r3, [pc, #416]	@ (800478c <plotter_move+0x2f8>)
 80045ec:	ed93 7a00 	vldr	s14, [r3]
 80045f0:	4b64      	ldr	r3, [pc, #400]	@ (8004784 <plotter_move+0x2f0>)
 80045f2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80045f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045fa:	4b65      	ldr	r3, [pc, #404]	@ (8004790 <plotter_move+0x2fc>)
 80045fc:	edc3 7a00 	vstr	s15, [r3]

	rev_cmd_vx = saturation(
 8004600:	4b63      	ldr	r3, [pc, #396]	@ (8004790 <plotter_move+0x2fc>)
 8004602:	edd3 7a00 	vldr	s15, [r3]
 8004606:	eeb0 0a67 	vmov.f32	s0, s15
 800460a:	4862      	ldr	r0, [pc, #392]	@ (8004794 <plotter_move+0x300>)
 800460c:	f7fc fd99 	bl	8001142 <PID_CONTROLLER_Compute>
 8004610:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid, rev_pos_error),
			ZGX45RGG_150RPM_Constant.qd_max, -ZGX45RGG_150RPM_Constant.qd_max);
 8004614:	4b60      	ldr	r3, [pc, #384]	@ (8004798 <plotter_move+0x304>)
 8004616:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	rev_cmd_vx = saturation(
 800461a:	4610      	mov	r0, r2
 800461c:	4619      	mov	r1, r3
 800461e:	f7fc fa99 	bl	8000b54 <__aeabi_d2f>
 8004622:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.qd_max, -ZGX45RGG_150RPM_Constant.qd_max);
 8004624:	4b5c      	ldr	r3, [pc, #368]	@ (8004798 <plotter_move+0x304>)
 8004626:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800462a:	4610      	mov	r0, r2
 800462c:	4619      	mov	r1, r3
 800462e:	f7fc fa91 	bl	8000b54 <__aeabi_d2f>
 8004632:	4603      	mov	r3, r0
	rev_cmd_vx = saturation(
 8004634:	ee07 3a90 	vmov	s15, r3
 8004638:	eef1 7a67 	vneg.f32	s15, s15
 800463c:	eeb0 1a67 	vmov.f32	s2, s15
 8004640:	ee00 6a90 	vmov	s1, r6
 8004644:	eeb0 0a48 	vmov.f32	s0, s16
 8004648:	f7fd f8a3 	bl	8001792 <saturation>
 800464c:	eef0 7a40 	vmov.f32	s15, s0
 8004650:	4b52      	ldr	r3, [pc, #328]	@ (800479c <plotter_move+0x308>)
 8004652:	edc3 7a00 	vstr	s15, [r3]

	rev_vel_error = rev_cmd_vx + revolute_vel - rev_kal_filt;
 8004656:	4b51      	ldr	r3, [pc, #324]	@ (800479c <plotter_move+0x308>)
 8004658:	ed93 7a00 	vldr	s14, [r3]
 800465c:	4b50      	ldr	r3, [pc, #320]	@ (80047a0 <plotter_move+0x30c>)
 800465e:	edd3 7a00 	vldr	s15, [r3]
 8004662:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004666:	4b4f      	ldr	r3, [pc, #316]	@ (80047a4 <plotter_move+0x310>)
 8004668:	edd3 7a00 	vldr	s15, [r3]
 800466c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004670:	4b4d      	ldr	r3, [pc, #308]	@ (80047a8 <plotter_move+0x314>)
 8004672:	edc3 7a00 	vstr	s15, [r3]

	rev_cmd_ux = PWM_Satuation(
 8004676:	4b4c      	ldr	r3, [pc, #304]	@ (80047a8 <plotter_move+0x314>)
 8004678:	edd3 7a00 	vldr	s15, [r3]
 800467c:	eeb0 0a67 	vmov.f32	s0, s15
 8004680:	484a      	ldr	r0, [pc, #296]	@ (80047ac <plotter_move+0x318>)
 8004682:	f7fc fd5e 	bl	8001142 <PID_CONTROLLER_Compute>
 8004686:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid, rev_vel_error),
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 800468a:	4b43      	ldr	r3, [pc, #268]	@ (8004798 <plotter_move+0x304>)
 800468c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	rev_cmd_ux = PWM_Satuation(
 8004690:	4610      	mov	r0, r2
 8004692:	4619      	mov	r1, r3
 8004694:	f7fc fa16 	bl	8000ac4 <__aeabi_d2iz>
 8004698:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 800469a:	4b3f      	ldr	r3, [pc, #252]	@ (8004798 <plotter_move+0x304>)
 800469c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80046a0:	4614      	mov	r4, r2
 80046a2:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	rev_cmd_ux = PWM_Satuation(
 80046a6:	4620      	mov	r0, r4
 80046a8:	4629      	mov	r1, r5
 80046aa:	f7fc fa0b 	bl	8000ac4 <__aeabi_d2iz>
 80046ae:	4603      	mov	r3, r0
 80046b0:	4619      	mov	r1, r3
 80046b2:	4630      	mov	r0, r6
 80046b4:	eeb0 0a48 	vmov.f32	s0, s16
 80046b8:	f7fc fcea 	bl	8001090 <PWM_Satuation>
 80046bc:	ee07 0a90 	vmov	s15, r0
 80046c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046c4:	4b3a      	ldr	r3, [pc, #232]	@ (80047b0 <plotter_move+0x31c>)
 80046c6:	edc3 7a00 	vstr	s15, [r3]

	if (check_revolute_limit()) {
 80046ca:	f7ff fe81 	bl	80043d0 <check_revolute_limit>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <plotter_move+0x256>
		MDXX_set_range(&revolute_motor, 2000, 0);
 80046d4:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8004770 <plotter_move+0x2dc>
 80046d8:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8004774 <plotter_move+0x2e0>
 80046dc:	4835      	ldr	r0, [pc, #212]	@ (80047b4 <plotter_move+0x320>)
 80046de:	f7fc fde7 	bl	80012b0 <MDXX_set_range>
		revtrajectoryActive = false;
 80046e2:	4b35      	ldr	r3, [pc, #212]	@ (80047b8 <plotter_move+0x324>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
		return;
 80046e8:	e025      	b.n	8004736 <plotter_move+0x2a2>
	}

	MDXX_set_range(&revolute_motor, 2000, rev_cmd_ux);
 80046ea:	4b31      	ldr	r3, [pc, #196]	@ (80047b0 <plotter_move+0x31c>)
 80046ec:	edd3 7a00 	vldr	s15, [r3]
 80046f0:	eef0 0a67 	vmov.f32	s1, s15
 80046f4:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8004774 <plotter_move+0x2e0>
 80046f8:	482e      	ldr	r0, [pc, #184]	@ (80047b4 <plotter_move+0x320>)
 80046fa:	f7fc fdd9 	bl	80012b0 <MDXX_set_range>

	if (rev_pos[0] - rev_pos[1] > 0) {
 80046fe:	4b22      	ldr	r3, [pc, #136]	@ (8004788 <plotter_move+0x2f4>)
 8004700:	ed93 7a00 	vldr	s14, [r3]
 8004704:	4b20      	ldr	r3, [pc, #128]	@ (8004788 <plotter_move+0x2f4>)
 8004706:	edd3 7a01 	vldr	s15, [r3, #4]
 800470a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800470e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004716:	dd03      	ble.n	8004720 <plotter_move+0x28c>
		revolute_state = RP_GO_CLOCKWISE;
 8004718:	4b28      	ldr	r3, [pc, #160]	@ (80047bc <plotter_move+0x328>)
 800471a:	2202      	movs	r2, #2
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e002      	b.n	8004726 <plotter_move+0x292>
	} else {
		revolute_state = RP_GO_COUNTER_CLOCKWISE;
 8004720:	4b26      	ldr	r3, [pc, #152]	@ (80047bc <plotter_move+0x328>)
 8004722:	2203      	movs	r2, #3
 8004724:	701a      	strb	r2, [r3, #0]
	}

	pris_pos[1] = pris_pos[0];
 8004726:	4b07      	ldr	r3, [pc, #28]	@ (8004744 <plotter_move+0x2b0>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a06      	ldr	r2, [pc, #24]	@ (8004744 <plotter_move+0x2b0>)
 800472c:	6053      	str	r3, [r2, #4]
	rev_pos[1] = rev_pos[0];
 800472e:	4b16      	ldr	r3, [pc, #88]	@ (8004788 <plotter_move+0x2f4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a15      	ldr	r2, [pc, #84]	@ (8004788 <plotter_move+0x2f4>)
 8004734:	6053      	str	r3, [r2, #4]
}
 8004736:	46bd      	mov	sp, r7
 8004738:	ecbd 8b02 	vpop	{d8}
 800473c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004740:	200009b4 	.word	0x200009b4
 8004744:	200008fc 	.word	0x200008fc
 8004748:	2000087c 	.word	0x2000087c
 800474c:	20000888 	.word	0x20000888
 8004750:	20000a6c 	.word	0x20000a6c
 8004754:	20000060 	.word	0x20000060
 8004758:	2000089c 	.word	0x2000089c
 800475c:	20000880 	.word	0x20000880
 8004760:	20000890 	.word	0x20000890
 8004764:	2000088c 	.word	0x2000088c
 8004768:	20000a88 	.word	0x20000a88
 800476c:	20000898 	.word	0x20000898
 8004770:	00000000 	.word	0x00000000
 8004774:	44fa0000 	.word	0x44fa0000
 8004778:	2000091c 	.word	0x2000091c
 800477c:	20000870 	.word	0x20000870
 8004780:	200002ee 	.word	0x200002ee
 8004784:	20000a10 	.word	0x20000a10
 8004788:	20000904 	.word	0x20000904
 800478c:	200008d4 	.word	0x200008d4
 8004790:	200008e0 	.word	0x200008e0
 8004794:	20000aa4 	.word	0x20000aa4
 8004798:	20000000 	.word	0x20000000
 800479c:	200008f4 	.word	0x200008f4
 80047a0:	200008d8 	.word	0x200008d8
 80047a4:	200008e8 	.word	0x200008e8
 80047a8:	200008e4 	.word	0x200008e4
 80047ac:	20000ac0 	.word	0x20000ac0
 80047b0:	200008f0 	.word	0x200008f0
 80047b4:	20000968 	.word	0x20000968
 80047b8:	200008c8 	.word	0x200008c8
 80047bc:	200002ef 	.word	0x200002ef

080047c0 <plotter_joymove>:

void plotter_joymove() {
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
	static float32_t pris_joy, rev_joy;

// Prismatic limits check
	if (check_prismatic_limit()) {
 80047c4:	f7ff fdc4 	bl	8004350 <check_prismatic_limit>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d004      	beq.n	80047d8 <plotter_joymove+0x18>
		pris_joy = 0.0f;
 80047ce:	4b7a      	ldr	r3, [pc, #488]	@ (80049b8 <plotter_joymove+0x1f8>)
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	e060      	b.n	800489a <plotter_joymove+0xda>
	} else {
		if (joystick_y > 0.7) {
 80047d8:	4b78      	ldr	r3, [pc, #480]	@ (80049bc <plotter_joymove+0x1fc>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f7fb fe7f 	bl	80004e0 <__aeabi_f2d>
 80047e2:	a36f      	add	r3, pc, #444	@ (adr r3, 80049a0 <plotter_joymove+0x1e0>)
 80047e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e8:	f7fc f962 	bl	8000ab0 <__aeabi_dcmpgt>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d01f      	beq.n	8004832 <plotter_joymove+0x72>
			pris_joy = (joystick_y - 0.7) * 25000.0f;
 80047f2:	4b72      	ldr	r3, [pc, #456]	@ (80049bc <plotter_joymove+0x1fc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fb fe72 	bl	80004e0 <__aeabi_f2d>
 80047fc:	a368      	add	r3, pc, #416	@ (adr r3, 80049a0 <plotter_joymove+0x1e0>)
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	f7fb fd0d 	bl	8000220 <__aeabi_dsub>
 8004806:	4602      	mov	r2, r0
 8004808:	460b      	mov	r3, r1
 800480a:	4610      	mov	r0, r2
 800480c:	4619      	mov	r1, r3
 800480e:	a366      	add	r3, pc, #408	@ (adr r3, 80049a8 <plotter_joymove+0x1e8>)
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	f7fb febc 	bl	8000590 <__aeabi_dmul>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4610      	mov	r0, r2
 800481e:	4619      	mov	r1, r3
 8004820:	f7fc f998 	bl	8000b54 <__aeabi_d2f>
 8004824:	4603      	mov	r3, r0
 8004826:	4a64      	ldr	r2, [pc, #400]	@ (80049b8 <plotter_joymove+0x1f8>)
 8004828:	6013      	str	r3, [r2, #0]
			prismatic_state = PP_GO_UP;
 800482a:	4b65      	ldr	r3, [pc, #404]	@ (80049c0 <plotter_joymove+0x200>)
 800482c:	2203      	movs	r2, #3
 800482e:	701a      	strb	r2, [r3, #0]
 8004830:	e033      	b.n	800489a <plotter_joymove+0xda>
		} else if (joystick_y < -0.7) {
 8004832:	4b62      	ldr	r3, [pc, #392]	@ (80049bc <plotter_joymove+0x1fc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f7fb fe52 	bl	80004e0 <__aeabi_f2d>
 800483c:	a35c      	add	r3, pc, #368	@ (adr r3, 80049b0 <plotter_joymove+0x1f0>)
 800483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004842:	f7fc f917 	bl	8000a74 <__aeabi_dcmplt>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01f      	beq.n	800488c <plotter_joymove+0xcc>
			pris_joy = (joystick_y + 0.7) * 25000.0f;
 800484c:	4b5b      	ldr	r3, [pc, #364]	@ (80049bc <plotter_joymove+0x1fc>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f7fb fe45 	bl	80004e0 <__aeabi_f2d>
 8004856:	a352      	add	r3, pc, #328	@ (adr r3, 80049a0 <plotter_joymove+0x1e0>)
 8004858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485c:	f7fb fce2 	bl	8000224 <__adddf3>
 8004860:	4602      	mov	r2, r0
 8004862:	460b      	mov	r3, r1
 8004864:	4610      	mov	r0, r2
 8004866:	4619      	mov	r1, r3
 8004868:	a34f      	add	r3, pc, #316	@ (adr r3, 80049a8 <plotter_joymove+0x1e8>)
 800486a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800486e:	f7fb fe8f 	bl	8000590 <__aeabi_dmul>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4610      	mov	r0, r2
 8004878:	4619      	mov	r1, r3
 800487a:	f7fc f96b 	bl	8000b54 <__aeabi_d2f>
 800487e:	4603      	mov	r3, r0
 8004880:	4a4d      	ldr	r2, [pc, #308]	@ (80049b8 <plotter_joymove+0x1f8>)
 8004882:	6013      	str	r3, [r2, #0]
			prismatic_state = PP_GO_DOWN;
 8004884:	4b4e      	ldr	r3, [pc, #312]	@ (80049c0 <plotter_joymove+0x200>)
 8004886:	2204      	movs	r2, #4
 8004888:	701a      	strb	r2, [r3, #0]
 800488a:	e006      	b.n	800489a <plotter_joymove+0xda>
		} else {
			pris_joy = 0.0;
 800488c:	4b4a      	ldr	r3, [pc, #296]	@ (80049b8 <plotter_joymove+0x1f8>)
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
			prismatic_state = PP_UNKNOWN;
 8004894:	4b4a      	ldr	r3, [pc, #296]	@ (80049c0 <plotter_joymove+0x200>)
 8004896:	2206      	movs	r2, #6
 8004898:	701a      	strb	r2, [r3, #0]
		}
	}

// Revolute limits check
	if (check_revolute_limit()) {
 800489a:	f7ff fd99 	bl	80043d0 <check_revolute_limit>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d004      	beq.n	80048ae <plotter_joymove+0xee>
		rev_joy = 0.0f;
 80048a4:	4b47      	ldr	r3, [pc, #284]	@ (80049c4 <plotter_joymove+0x204>)
 80048a6:	f04f 0200 	mov.w	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e060      	b.n	8004970 <plotter_joymove+0x1b0>
	} else {
		if (joystick_x > 0.7) {
 80048ae:	4b46      	ldr	r3, [pc, #280]	@ (80049c8 <plotter_joymove+0x208>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fb fe14 	bl	80004e0 <__aeabi_f2d>
 80048b8:	a339      	add	r3, pc, #228	@ (adr r3, 80049a0 <plotter_joymove+0x1e0>)
 80048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048be:	f7fc f8f7 	bl	8000ab0 <__aeabi_dcmpgt>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01f      	beq.n	8004908 <plotter_joymove+0x148>
			rev_joy = (joystick_x - 0.7) * 25000.0f;
 80048c8:	4b3f      	ldr	r3, [pc, #252]	@ (80049c8 <plotter_joymove+0x208>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fb fe07 	bl	80004e0 <__aeabi_f2d>
 80048d2:	a333      	add	r3, pc, #204	@ (adr r3, 80049a0 <plotter_joymove+0x1e0>)
 80048d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d8:	f7fb fca2 	bl	8000220 <__aeabi_dsub>
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4610      	mov	r0, r2
 80048e2:	4619      	mov	r1, r3
 80048e4:	a330      	add	r3, pc, #192	@ (adr r3, 80049a8 <plotter_joymove+0x1e8>)
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	f7fb fe51 	bl	8000590 <__aeabi_dmul>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4610      	mov	r0, r2
 80048f4:	4619      	mov	r1, r3
 80048f6:	f7fc f92d 	bl	8000b54 <__aeabi_d2f>
 80048fa:	4603      	mov	r3, r0
 80048fc:	4a31      	ldr	r2, [pc, #196]	@ (80049c4 <plotter_joymove+0x204>)
 80048fe:	6013      	str	r3, [r2, #0]
			revolute_state = RP_GO_COUNTER_CLOCKWISE;
 8004900:	4b32      	ldr	r3, [pc, #200]	@ (80049cc <plotter_joymove+0x20c>)
 8004902:	2203      	movs	r2, #3
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	e033      	b.n	8004970 <plotter_joymove+0x1b0>
		} else if (joystick_x < -0.7) {
 8004908:	4b2f      	ldr	r3, [pc, #188]	@ (80049c8 <plotter_joymove+0x208>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f7fb fde7 	bl	80004e0 <__aeabi_f2d>
 8004912:	a327      	add	r3, pc, #156	@ (adr r3, 80049b0 <plotter_joymove+0x1f0>)
 8004914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004918:	f7fc f8ac 	bl	8000a74 <__aeabi_dcmplt>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d01f      	beq.n	8004962 <plotter_joymove+0x1a2>
			rev_joy = (joystick_x + 0.7) * 25000.0f;
 8004922:	4b29      	ldr	r3, [pc, #164]	@ (80049c8 <plotter_joymove+0x208>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f7fb fdda 	bl	80004e0 <__aeabi_f2d>
 800492c:	a31c      	add	r3, pc, #112	@ (adr r3, 80049a0 <plotter_joymove+0x1e0>)
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	f7fb fc77 	bl	8000224 <__adddf3>
 8004936:	4602      	mov	r2, r0
 8004938:	460b      	mov	r3, r1
 800493a:	4610      	mov	r0, r2
 800493c:	4619      	mov	r1, r3
 800493e:	a31a      	add	r3, pc, #104	@ (adr r3, 80049a8 <plotter_joymove+0x1e8>)
 8004940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004944:	f7fb fe24 	bl	8000590 <__aeabi_dmul>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4610      	mov	r0, r2
 800494e:	4619      	mov	r1, r3
 8004950:	f7fc f900 	bl	8000b54 <__aeabi_d2f>
 8004954:	4603      	mov	r3, r0
 8004956:	4a1b      	ldr	r2, [pc, #108]	@ (80049c4 <plotter_joymove+0x204>)
 8004958:	6013      	str	r3, [r2, #0]
			revolute_state = RP_GO_CLOCKWISE;
 800495a:	4b1c      	ldr	r3, [pc, #112]	@ (80049cc <plotter_joymove+0x20c>)
 800495c:	2202      	movs	r2, #2
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	e006      	b.n	8004970 <plotter_joymove+0x1b0>
		} else {
			rev_joy = 0.0;
 8004962:	4b18      	ldr	r3, [pc, #96]	@ (80049c4 <plotter_joymove+0x204>)
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	601a      	str	r2, [r3, #0]
			revolute_state = RP_UNKNOWN;
 800496a:	4b18      	ldr	r3, [pc, #96]	@ (80049cc <plotter_joymove+0x20c>)
 800496c:	2205      	movs	r2, #5
 800496e:	701a      	strb	r2, [r3, #0]
		}
	}

	MDXX_set_range(&prismatic_motor, 2000, pris_joy);
 8004970:	4b11      	ldr	r3, [pc, #68]	@ (80049b8 <plotter_joymove+0x1f8>)
 8004972:	edd3 7a00 	vldr	s15, [r3]
 8004976:	eef0 0a67 	vmov.f32	s1, s15
 800497a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80049d0 <plotter_joymove+0x210>
 800497e:	4815      	ldr	r0, [pc, #84]	@ (80049d4 <plotter_joymove+0x214>)
 8004980:	f7fc fc96 	bl	80012b0 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, rev_joy);
 8004984:	4b0f      	ldr	r3, [pc, #60]	@ (80049c4 <plotter_joymove+0x204>)
 8004986:	edd3 7a00 	vldr	s15, [r3]
 800498a:	eef0 0a67 	vmov.f32	s1, s15
 800498e:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80049d0 <plotter_joymove+0x210>
 8004992:	4811      	ldr	r0, [pc, #68]	@ (80049d8 <plotter_joymove+0x218>)
 8004994:	f7fc fc8c 	bl	80012b0 <MDXX_set_range>
}
 8004998:	bf00      	nop
 800499a:	bd80      	pop	{r7, pc}
 800499c:	f3af 8000 	nop.w
 80049a0:	66666666 	.word	0x66666666
 80049a4:	3fe66666 	.word	0x3fe66666
 80049a8:	00000000 	.word	0x00000000
 80049ac:	40d86a00 	.word	0x40d86a00
 80049b0:	66666666 	.word	0x66666666
 80049b4:	bfe66666 	.word	0xbfe66666
 80049b8:	20000910 	.word	0x20000910
 80049bc:	20001b30 	.word	0x20001b30
 80049c0:	200002ee 	.word	0x200002ee
 80049c4:	20000914 	.word	0x20000914
 80049c8:	20001b2c 	.word	0x20001b2c
 80049cc:	200002ef 	.word	0x200002ef
 80049d0:	44fa0000 	.word	0x44fa0000
 80049d4:	2000091c 	.word	0x2000091c
 80049d8:	20000968 	.word	0x20000968

080049dc <plotter_handle_state_transition>:

void plotter_handle_state_transition() {
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
// Save previous state

// Only process base system commands if not in emergency mode
	if (rs_current_state != RS_EMERGENCY_TRIGGED) {
 80049e0:	4b69      	ldr	r3, [pc, #420]	@ (8004b88 <plotter_handle_state_transition+0x1ac>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	2b05      	cmp	r3, #5
 80049e6:	d02a      	beq.n	8004a3e <plotter_handle_state_transition+0x62>
		// Process base system commands
		if (registerFrame[BaseSystem_Status].U16 == 1) {
 80049e8:	4b68      	ldr	r3, [pc, #416]	@ (8004b8c <plotter_handle_state_transition+0x1b0>)
 80049ea:	885b      	ldrh	r3, [r3, #2]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d106      	bne.n	80049fe <plotter_handle_state_transition+0x22>
			// Set Home Command
			rs_current_state = RS_RETURN_TO_HOME;
 80049f0:	4b65      	ldr	r3, [pc, #404]	@ (8004b88 <plotter_handle_state_transition+0x1ac>)
 80049f2:	2204      	movs	r2, #4
 80049f4:	701a      	strb	r2, [r3, #0]
			registerFrame[R_Theta_Status].U16 = 1;
 80049f6:	4b65      	ldr	r3, [pc, #404]	@ (8004b8c <plotter_handle_state_transition+0x1b0>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	841a      	strh	r2, [r3, #32]
 80049fc:	e01f      	b.n	8004a3e <plotter_handle_state_transition+0x62>
		} else if (registerFrame[BaseSystem_Status].U16 == 2) {
 80049fe:	4b63      	ldr	r3, [pc, #396]	@ (8004b8c <plotter_handle_state_transition+0x1b0>)
 8004a00:	885b      	ldrh	r3, [r3, #2]
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d106      	bne.n	8004a14 <plotter_handle_state_transition+0x38>
			// Joystick Mode
			rs_current_state = RS_JOG_MODE;
 8004a06:	4b60      	ldr	r3, [pc, #384]	@ (8004b88 <plotter_handle_state_transition+0x1ac>)
 8004a08:	2201      	movs	r2, #1
 8004a0a:	701a      	strb	r2, [r3, #0]
			registerFrame[R_Theta_Status].U16 = 2;
 8004a0c:	4b5f      	ldr	r3, [pc, #380]	@ (8004b8c <plotter_handle_state_transition+0x1b0>)
 8004a0e:	2202      	movs	r2, #2
 8004a10:	841a      	strh	r2, [r3, #32]
 8004a12:	e014      	b.n	8004a3e <plotter_handle_state_transition+0x62>
		} else if (registerFrame[BaseSystem_Status].U16 == 4) {
 8004a14:	4b5d      	ldr	r3, [pc, #372]	@ (8004b8c <plotter_handle_state_transition+0x1b0>)
 8004a16:	885b      	ldrh	r3, [r3, #2]
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d106      	bne.n	8004a2a <plotter_handle_state_transition+0x4e>
			// Point Mode (Just Receive Input)
			rs_current_state = RS_POINT_MODE;
 8004a1c:	4b5a      	ldr	r3, [pc, #360]	@ (8004b88 <plotter_handle_state_transition+0x1ac>)
 8004a1e:	2202      	movs	r2, #2
 8004a20:	701a      	strb	r2, [r3, #0]
			registerFrame[R_Theta_Status].U16 = 4;
 8004a22:	4b5a      	ldr	r3, [pc, #360]	@ (8004b8c <plotter_handle_state_transition+0x1b0>)
 8004a24:	2204      	movs	r2, #4
 8004a26:	841a      	strh	r2, [r3, #32]
 8004a28:	e009      	b.n	8004a3e <plotter_handle_state_transition+0x62>
		} else if (registerFrame[BaseSystem_Status].U16 == 8) {
 8004a2a:	4b58      	ldr	r3, [pc, #352]	@ (8004b8c <plotter_handle_state_transition+0x1b0>)
 8004a2c:	885b      	ldrh	r3, [r3, #2]
 8004a2e:	2b08      	cmp	r3, #8
 8004a30:	d105      	bne.n	8004a3e <plotter_handle_state_transition+0x62>
			// Go to Point Mode
			rs_current_state = RS_MOVING;
 8004a32:	4b55      	ldr	r3, [pc, #340]	@ (8004b88 <plotter_handle_state_transition+0x1ac>)
 8004a34:	2203      	movs	r2, #3
 8004a36:	701a      	strb	r2, [r3, #0]
			registerFrame[R_Theta_Status].U16 = 8;
 8004a38:	4b54      	ldr	r3, [pc, #336]	@ (8004b8c <plotter_handle_state_transition+0x1b0>)
 8004a3a:	2208      	movs	r2, #8
 8004a3c:	841a      	strh	r2, [r3, #32]
		}
	}

// Handle state entry/exit actions if state has changed
	if (rs_previous_state != rs_current_state) {
 8004a3e:	4b54      	ldr	r3, [pc, #336]	@ (8004b90 <plotter_handle_state_transition+0x1b4>)
 8004a40:	781a      	ldrb	r2, [r3, #0]
 8004a42:	4b51      	ldr	r3, [pc, #324]	@ (8004b88 <plotter_handle_state_transition+0x1ac>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	f000 8098 	beq.w	8004b7c <plotter_handle_state_transition+0x1a0>
		// Exit actions for previous state
		switch (rs_previous_state) {
 8004a4c:	4b50      	ldr	r3, [pc, #320]	@ (8004b90 <plotter_handle_state_transition+0x1b4>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b05      	cmp	r3, #5
 8004a52:	d026      	beq.n	8004aa2 <plotter_handle_state_transition+0xc6>
 8004a54:	2b05      	cmp	r3, #5
 8004a56:	dc28      	bgt.n	8004aaa <plotter_handle_state_transition+0xce>
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d002      	beq.n	8004a62 <plotter_handle_state_transition+0x86>
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d019      	beq.n	8004a94 <plotter_handle_state_transition+0xb8>
			// Exit emergency state
			emer_state = DEFAULT;
			break;

		default:
			break;
 8004a60:	e023      	b.n	8004aaa <plotter_handle_state_transition+0xce>
			joy_state = JOY_IDLE;
 8004a62:	4b4c      	ldr	r3, [pc, #304]	@ (8004b94 <plotter_handle_state_transition+0x1b8>)
 8004a64:	2207      	movs	r2, #7
 8004a66:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, 0);
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004a6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a72:	f004 ff09 	bl	8009888 <HAL_GPIO_WritePin>
			MDXX_set_range(&prismatic_motor, 2000, 0);
 8004a76:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8004b98 <plotter_handle_state_transition+0x1bc>
 8004a7a:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8004b9c <plotter_handle_state_transition+0x1c0>
 8004a7e:	4848      	ldr	r0, [pc, #288]	@ (8004ba0 <plotter_handle_state_transition+0x1c4>)
 8004a80:	f7fc fc16 	bl	80012b0 <MDXX_set_range>
			MDXX_set_range(&revolute_motor, 2000, 0);
 8004a84:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8004b98 <plotter_handle_state_transition+0x1bc>
 8004a88:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8004b9c <plotter_handle_state_transition+0x1c0>
 8004a8c:	4845      	ldr	r0, [pc, #276]	@ (8004ba4 <plotter_handle_state_transition+0x1c8>)
 8004a8e:	f7fc fc0f 	bl	80012b0 <MDXX_set_range>
			break;
 8004a92:	e00b      	b.n	8004aac <plotter_handle_state_transition+0xd0>
			pristrajectoryActive = false;
 8004a94:	4b44      	ldr	r3, [pc, #272]	@ (8004ba8 <plotter_handle_state_transition+0x1cc>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	701a      	strb	r2, [r3, #0]
			revtrajectoryActive = false;
 8004a9a:	4b44      	ldr	r3, [pc, #272]	@ (8004bac <plotter_handle_state_transition+0x1d0>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	701a      	strb	r2, [r3, #0]
			break;
 8004aa0:	e004      	b.n	8004aac <plotter_handle_state_transition+0xd0>
			emer_state = DEFAULT;
 8004aa2:	4b43      	ldr	r3, [pc, #268]	@ (8004bb0 <plotter_handle_state_transition+0x1d4>)
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	701a      	strb	r2, [r3, #0]
			break;
 8004aa8:	e000      	b.n	8004aac <plotter_handle_state_transition+0xd0>
			break;
 8004aaa:	bf00      	nop
		}

		// Entry actions for new state
		switch (rs_current_state) {
 8004aac:	4b36      	ldr	r3, [pc, #216]	@ (8004b88 <plotter_handle_state_transition+0x1ac>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d861      	bhi.n	8004b7a <plotter_handle_state_transition+0x19e>
 8004ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8004abc <plotter_handle_state_transition+0xe0>)
 8004ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004abc:	08004ad1 	.word	0x08004ad1
 8004ac0:	08004b5d 	.word	0x08004b5d
 8004ac4:	08004ae7 	.word	0x08004ae7
 8004ac8:	08004b57 	.word	0x08004b57
 8004acc:	08004b33 	.word	0x08004b33
		case RS_JOG_MODE:
			// Initialize joystick control
			joy_state = A1B1_MODE;
 8004ad0:	4b30      	ldr	r3, [pc, #192]	@ (8004b94 <plotter_handle_state_transition+0x1b8>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, 1);
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004adc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ae0:	f004 fed2 	bl	8009888 <HAL_GPIO_WritePin>
			break;
 8004ae4:	e04a      	b.n	8004b7c <plotter_handle_state_transition+0x1a0>

		case RS_MOVING:
			// Initialize trajectory generator
			pris_initial_p = prismatic_encoder.mm;
 8004ae6:	4b33      	ldr	r3, [pc, #204]	@ (8004bb4 <plotter_handle_state_transition+0x1d8>)
 8004ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aea:	4a33      	ldr	r2, [pc, #204]	@ (8004bb8 <plotter_handle_state_transition+0x1dc>)
 8004aec:	6013      	str	r3, [r2, #0]
			rev_initial_p = revolute_encoder.rads;
 8004aee:	4b33      	ldr	r3, [pc, #204]	@ (8004bbc <plotter_handle_state_transition+0x1e0>)
 8004af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af2:	4a33      	ldr	r2, [pc, #204]	@ (8004bc0 <plotter_handle_state_transition+0x1e4>)
 8004af4:	6013      	str	r3, [r2, #0]
			pris_target_p = registerFrame[Goal_R].U16;
 8004af6:	4b25      	ldr	r3, [pc, #148]	@ (8004b8c <plotter_handle_state_transition+0x1b0>)
 8004af8:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8004afc:	ee07 3a90 	vmov	s15, r3
 8004b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b04:	4b2f      	ldr	r3, [pc, #188]	@ (8004bc4 <plotter_handle_state_transition+0x1e8>)
 8004b06:	edc3 7a00 	vstr	s15, [r3]
			rev_target_p = registerFrame[Goal_Theta].U16;
 8004b0a:	4b20      	ldr	r3, [pc, #128]	@ (8004b8c <plotter_handle_state_transition+0x1b0>)
 8004b0c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8004b10:	ee07 3a90 	vmov	s15, r3
 8004b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b18:	4b2b      	ldr	r3, [pc, #172]	@ (8004bc8 <plotter_handle_state_transition+0x1ec>)
 8004b1a:	edc3 7a00 	vstr	s15, [r3]
			pristrajectoryActive = true;
 8004b1e:	4b22      	ldr	r3, [pc, #136]	@ (8004ba8 <plotter_handle_state_transition+0x1cc>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	701a      	strb	r2, [r3, #0]
			revtrajectoryActive = true;
 8004b24:	4b21      	ldr	r3, [pc, #132]	@ (8004bac <plotter_handle_state_transition+0x1d0>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	701a      	strb	r2, [r3, #0]
			moving_state = MOVING_GO_TO_POINT;
 8004b2a:	4b28      	ldr	r3, [pc, #160]	@ (8004bcc <plotter_handle_state_transition+0x1f0>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	701a      	strb	r2, [r3, #0]
			break;
 8004b30:	e024      	b.n	8004b7c <plotter_handle_state_transition+0x1a0>

		case RS_EMERGENCY_TRIGGED:
			// Enter emergency state
			joy_state = EMERGENCY_MODE;
 8004b32:	4b18      	ldr	r3, [pc, #96]	@ (8004b94 <plotter_handle_state_transition+0x1b8>)
 8004b34:	2202      	movs	r2, #2
 8004b36:	701a      	strb	r2, [r3, #0]
//			registerFrame[R_Theta_Status].U16 = 16;
			// Immediately stop all motors
			MDXX_set_range(&prismatic_motor, 2000, 0);
 8004b38:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8004b98 <plotter_handle_state_transition+0x1bc>
 8004b3c:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8004b9c <plotter_handle_state_transition+0x1c0>
 8004b40:	4817      	ldr	r0, [pc, #92]	@ (8004ba0 <plotter_handle_state_transition+0x1c4>)
 8004b42:	f7fc fbb5 	bl	80012b0 <MDXX_set_range>
			MDXX_set_range(&revolute_motor, 2000, 0);
 8004b46:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8004b98 <plotter_handle_state_transition+0x1bc>
 8004b4a:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8004b9c <plotter_handle_state_transition+0x1c0>
 8004b4e:	4815      	ldr	r0, [pc, #84]	@ (8004ba4 <plotter_handle_state_transition+0x1c8>)
 8004b50:	f7fc fbae 	bl	80012b0 <MDXX_set_range>
			break;
 8004b54:	e012      	b.n	8004b7c <plotter_handle_state_transition+0x1a0>

		case RS_RETURN_TO_HOME:
			// Initialize homing sequence
			plotter_pen_up(); // First ensure pen is up
 8004b56:	f001 fb61 	bl	800621c <plotter_pen_up>
			break;
 8004b5a:	e00f      	b.n	8004b7c <plotter_handle_state_transition+0x1a0>

		case RS_POINT_MODE:
			MDXX_set_range(&prismatic_motor, 2000, 0);
 8004b5c:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8004b98 <plotter_handle_state_transition+0x1bc>
 8004b60:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8004b9c <plotter_handle_state_transition+0x1c0>
 8004b64:	480e      	ldr	r0, [pc, #56]	@ (8004ba0 <plotter_handle_state_transition+0x1c4>)
 8004b66:	f7fc fba3 	bl	80012b0 <MDXX_set_range>
			MDXX_set_range(&revolute_motor, 2000, 0);
 8004b6a:	eddf 0a0b 	vldr	s1, [pc, #44]	@ 8004b98 <plotter_handle_state_transition+0x1bc>
 8004b6e:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8004b9c <plotter_handle_state_transition+0x1c0>
 8004b72:	480c      	ldr	r0, [pc, #48]	@ (8004ba4 <plotter_handle_state_transition+0x1c8>)
 8004b74:	f7fc fb9c 	bl	80012b0 <MDXX_set_range>
			break;
 8004b78:	e000      	b.n	8004b7c <plotter_handle_state_transition+0x1a0>

		default:
			break;
 8004b7a:	bf00      	nop
		}
	}
	rs_previous_state = rs_current_state;
 8004b7c:	4b02      	ldr	r3, [pc, #8]	@ (8004b88 <plotter_handle_state_transition+0x1ac>)
 8004b7e:	781a      	ldrb	r2, [r3, #0]
 8004b80:	4b03      	ldr	r3, [pc, #12]	@ (8004b90 <plotter_handle_state_transition+0x1b4>)
 8004b82:	701a      	strb	r2, [r3, #0]
}
 8004b84:	bf00      	nop
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	200002e8 	.word	0x200002e8
 8004b8c:	2000199c 	.word	0x2000199c
 8004b90:	200002e9 	.word	0x200002e9
 8004b94:	200002ed 	.word	0x200002ed
 8004b98:	00000000 	.word	0x00000000
 8004b9c:	44fa0000 	.word	0x44fa0000
 8004ba0:	2000091c 	.word	0x2000091c
 8004ba4:	20000968 	.word	0x20000968
 8004ba8:	20000870 	.word	0x20000870
 8004bac:	200008c8 	.word	0x200008c8
 8004bb0:	200002f0 	.word	0x200002f0
 8004bb4:	200009b4 	.word	0x200009b4
 8004bb8:	20000874 	.word	0x20000874
 8004bbc:	20000a10 	.word	0x20000a10
 8004bc0:	200008cc 	.word	0x200008cc
 8004bc4:	20000878 	.word	0x20000878
 8004bc8:	200008d0 	.word	0x200008d0
 8004bcc:	200002eb 	.word	0x200002eb

08004bd0 <plotter_process_jog_mode>:

void plotter_process_jog_mode() {
 8004bd0:	b590      	push	{r4, r7, lr}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
// block any joystick actions while in emergency
	if (rs_current_state == RS_EMERGENCY_TRIGGED
 8004bd6:	4b89      	ldr	r3, [pc, #548]	@ (8004dfc <plotter_process_jog_mode+0x22c>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b05      	cmp	r3, #5
 8004bdc:	f000 8227 	beq.w	800502e <plotter_process_jog_mode+0x45e>
			|| joy_state == EMERGENCY_MODE) {
 8004be0:	4b87      	ldr	r3, [pc, #540]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	f000 8222 	beq.w	800502e <plotter_process_jog_mode+0x45e>
		return;
	}

// Handle state transitions for A1B1_MODE
	if (joy_state == A1B1_MODE) {
 8004bea:	4b85      	ldr	r3, [pc, #532]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d127      	bne.n	8004c42 <plotter_process_jog_mode+0x72>
		if (b1[0] == 0 && b1[1] == 1) {
 8004bf2:	4b84      	ldr	r3, [pc, #528]	@ (8004e04 <plotter_process_jog_mode+0x234>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d107      	bne.n	8004c0a <plotter_process_jog_mode+0x3a>
 8004bfa:	4b82      	ldr	r3, [pc, #520]	@ (8004e04 <plotter_process_jog_mode+0x234>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d103      	bne.n	8004c0a <plotter_process_jog_mode+0x3a>
			joy_state = A1B1_SETPOINT;
 8004c02:	4b7f      	ldr	r3, [pc, #508]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004c04:	2203      	movs	r2, #3
 8004c06:	701a      	strb	r2, [r3, #0]
 8004c08:	e036      	b.n	8004c78 <plotter_process_jog_mode+0xa8>
		} else if (b2[0] == 0 && b2[1] == 1) {
 8004c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8004e08 <plotter_process_jog_mode+0x238>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d132      	bne.n	8004c78 <plotter_process_jog_mode+0xa8>
 8004c12:	4b7d      	ldr	r3, [pc, #500]	@ (8004e08 <plotter_process_jog_mode+0x238>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d12e      	bne.n	8004c78 <plotter_process_jog_mode+0xa8>
			joy_state = A1B1_MOVING;
 8004c1a:	4b79      	ldr	r3, [pc, #484]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004c1c:	2204      	movs	r2, #4
 8004c1e:	701a      	strb	r2, [r3, #0]
			moving_state = MOVING_GO_TO_POINT;
 8004c20:	4b7a      	ldr	r3, [pc, #488]	@ (8004e0c <plotter_process_jog_mode+0x23c>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	701a      	strb	r2, [r3, #0]
			if (total_setpoints > 0) {
 8004c26:	4b7a      	ldr	r3, [pc, #488]	@ (8004e10 <plotter_process_jog_mode+0x240>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d024      	beq.n	8004c78 <plotter_process_jog_mode+0xa8>
				joy_state = A1B1_MOVING;
 8004c2e:	4b74      	ldr	r3, [pc, #464]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004c30:	2204      	movs	r2, #4
 8004c32:	701a      	strb	r2, [r3, #0]
				moving_state = MOVING_GO_TO_POINT;
 8004c34:	4b75      	ldr	r3, [pc, #468]	@ (8004e0c <plotter_process_jog_mode+0x23c>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	701a      	strb	r2, [r3, #0]
				move_index = 0;            // start at first point
 8004c3a:	4b76      	ldr	r3, [pc, #472]	@ (8004e14 <plotter_process_jog_mode+0x244>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]
 8004c40:	e01a      	b.n	8004c78 <plotter_process_jog_mode+0xa8>
			}

		}
	}
// Handle transitions back to A1B1_MODE
	else if ((joy_state == A1B1_SETPOINT && b2[0] == 0 && b2[1] == 1)
 8004c42:	4b6f      	ldr	r3, [pc, #444]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d107      	bne.n	8004c5a <plotter_process_jog_mode+0x8a>
 8004c4a:	4b6f      	ldr	r3, [pc, #444]	@ (8004e08 <plotter_process_jog_mode+0x238>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d103      	bne.n	8004c5a <plotter_process_jog_mode+0x8a>
 8004c52:	4b6d      	ldr	r3, [pc, #436]	@ (8004e08 <plotter_process_jog_mode+0x238>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d00b      	beq.n	8004c72 <plotter_process_jog_mode+0xa2>
			|| (joy_state == A1B1_MOVING && b1[0] == 0 && b1[1] == 1)) {
 8004c5a:	4b69      	ldr	r3, [pc, #420]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d10a      	bne.n	8004c78 <plotter_process_jog_mode+0xa8>
 8004c62:	4b68      	ldr	r3, [pc, #416]	@ (8004e04 <plotter_process_jog_mode+0x234>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <plotter_process_jog_mode+0xa8>
 8004c6a:	4b66      	ldr	r3, [pc, #408]	@ (8004e04 <plotter_process_jog_mode+0x234>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d102      	bne.n	8004c78 <plotter_process_jog_mode+0xa8>
		joy_state = A1B1_MODE;
 8004c72:	4b63      	ldr	r3, [pc, #396]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	701a      	strb	r2, [r3, #0]
	}

// Handle state transitions for A2B2_MODE
	if (joy_state == A2B2_MODE) {
 8004c78:	4b61      	ldr	r3, [pc, #388]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d11a      	bne.n	8004cb6 <plotter_process_jog_mode+0xe6>
		if (b1[0] == 0 && b1[1] == 1) {
 8004c80:	4b60      	ldr	r3, [pc, #384]	@ (8004e04 <plotter_process_jog_mode+0x234>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <plotter_process_jog_mode+0xce>
 8004c88:	4b5e      	ldr	r3, [pc, #376]	@ (8004e04 <plotter_process_jog_mode+0x234>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d106      	bne.n	8004c9e <plotter_process_jog_mode+0xce>
			joy_state = A2B2_WRITING;
 8004c90:	4b5b      	ldr	r3, [pc, #364]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004c92:	2205      	movs	r2, #5
 8004c94:	701a      	strb	r2, [r3, #0]
			writing_state = WRITE_IDLE;
 8004c96:	4b60      	ldr	r3, [pc, #384]	@ (8004e18 <plotter_process_jog_mode+0x248>)
 8004c98:	2202      	movs	r2, #2
 8004c9a:	701a      	strb	r2, [r3, #0]
 8004c9c:	e026      	b.n	8004cec <plotter_process_jog_mode+0x11c>
		} else if (b2[0] == 0 && b2[1] == 1) {
 8004c9e:	4b5a      	ldr	r3, [pc, #360]	@ (8004e08 <plotter_process_jog_mode+0x238>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d122      	bne.n	8004cec <plotter_process_jog_mode+0x11c>
 8004ca6:	4b58      	ldr	r3, [pc, #352]	@ (8004e08 <plotter_process_jog_mode+0x238>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d11e      	bne.n	8004cec <plotter_process_jog_mode+0x11c>
			joy_state = A2B2_GOTO_HOME;
 8004cae:	4b54      	ldr	r3, [pc, #336]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004cb0:	2206      	movs	r2, #6
 8004cb2:	701a      	strb	r2, [r3, #0]
 8004cb4:	e01a      	b.n	8004cec <plotter_process_jog_mode+0x11c>
		}
	}
// Handle transitions back to A2B2_MODE
	else if ((joy_state == A2B2_WRITING && b2[0] == 0 && b2[1] == 1)
 8004cb6:	4b52      	ldr	r3, [pc, #328]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	2b05      	cmp	r3, #5
 8004cbc:	d107      	bne.n	8004cce <plotter_process_jog_mode+0xfe>
 8004cbe:	4b52      	ldr	r3, [pc, #328]	@ (8004e08 <plotter_process_jog_mode+0x238>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d103      	bne.n	8004cce <plotter_process_jog_mode+0xfe>
 8004cc6:	4b50      	ldr	r3, [pc, #320]	@ (8004e08 <plotter_process_jog_mode+0x238>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d00b      	beq.n	8004ce6 <plotter_process_jog_mode+0x116>
			|| (joy_state == A2B2_GOTO_HOME && b1[0] == 0 && b1[1] == 1)) {
 8004cce:	4b4c      	ldr	r3, [pc, #304]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b06      	cmp	r3, #6
 8004cd4:	d10a      	bne.n	8004cec <plotter_process_jog_mode+0x11c>
 8004cd6:	4b4b      	ldr	r3, [pc, #300]	@ (8004e04 <plotter_process_jog_mode+0x234>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d106      	bne.n	8004cec <plotter_process_jog_mode+0x11c>
 8004cde:	4b49      	ldr	r3, [pc, #292]	@ (8004e04 <plotter_process_jog_mode+0x234>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d102      	bne.n	8004cec <plotter_process_jog_mode+0x11c>
		joy_state = A2B2_MODE;
 8004ce6:	4b46      	ldr	r3, [pc, #280]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004ce8:	2201      	movs	r2, #1
 8004cea:	701a      	strb	r2, [r3, #0]
	}
	if (b4[0] == 0 && b4[1] == 1) {
 8004cec:	4b4b      	ldr	r3, [pc, #300]	@ (8004e1c <plotter_process_jog_mode+0x24c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d112      	bne.n	8004d1a <plotter_process_jog_mode+0x14a>
 8004cf4:	4b49      	ldr	r3, [pc, #292]	@ (8004e1c <plotter_process_jog_mode+0x24c>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d10e      	bne.n	8004d1a <plotter_process_jog_mode+0x14a>
		if (joy_state == A1B1_MODE) {
 8004cfc:	4b40      	ldr	r3, [pc, #256]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d103      	bne.n	8004d0c <plotter_process_jog_mode+0x13c>
			joy_state = A2B2_MODE;
 8004d04:	4b3e      	ldr	r3, [pc, #248]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	701a      	strb	r2, [r3, #0]
 8004d0a:	e006      	b.n	8004d1a <plotter_process_jog_mode+0x14a>
		} else if (joy_state == A2B2_MODE) {
 8004d0c:	4b3c      	ldr	r3, [pc, #240]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d102      	bne.n	8004d1a <plotter_process_jog_mode+0x14a>
			joy_state = A1B1_MODE;
 8004d14:	4b3a      	ldr	r3, [pc, #232]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
		}
	}

// Execute state-specific actions
	switch (joy_state) {
 8004d1a:	4b39      	ldr	r3, [pc, #228]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	3b03      	subs	r3, #3
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	f200 8175 	bhi.w	8005010 <plotter_process_jog_mode+0x440>
 8004d26:	a201      	add	r2, pc, #4	@ (adr r2, 8004d2c <plotter_process_jog_mode+0x15c>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004ea1 	.word	0x08004ea1
 8004d30:	08004d3d 	.word	0x08004d3d
 8004d34:	0800500b 	.word	0x0800500b
 8004d38:	08005005 	.word	0x08005005
	case A1B1_MOVING:
		if (total_setpoints == 0) {
 8004d3c:	4b34      	ldr	r3, [pc, #208]	@ (8004e10 <plotter_process_jog_mode+0x240>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d102      	bne.n	8004d4a <plotter_process_jog_mode+0x17a>
			joy_state = A1B1_MODE;
 8004d44:	4b2e      	ldr	r3, [pc, #184]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	701a      	strb	r2, [r3, #0]
		}
		static uint8_t current_point = 0;

		// Initialize target for first point if needed
		if (current_point == 0) {
 8004d4a:	4b35      	ldr	r3, [pc, #212]	@ (8004e20 <plotter_process_jog_mode+0x250>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d12f      	bne.n	8004db2 <plotter_process_jog_mode+0x1e2>
			// Get register for first point
			uint16_t r_reg = getPointRegisterR(current_point);
 8004d52:	4b33      	ldr	r3, [pc, #204]	@ (8004e20 <plotter_process_jog_mode+0x250>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fc34 	bl	80055c4 <getPointRegisterR>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	81bb      	strh	r3, [r7, #12]
			uint16_t t_reg = getPointRegisterT(current_point);
 8004d60:	4b2f      	ldr	r3, [pc, #188]	@ (8004e20 <plotter_process_jog_mode+0x250>)
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 fc69 	bl	800563c <getPointRegisterT>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	817b      	strh	r3, [r7, #10]

			// Set targets
			pris_target_p = registerFrame[r_reg].U16;
 8004d6e:	89bb      	ldrh	r3, [r7, #12]
 8004d70:	4a2c      	ldr	r2, [pc, #176]	@ (8004e24 <plotter_process_jog_mode+0x254>)
 8004d72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d76:	ee07 3a90 	vmov	s15, r3
 8004d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8004e28 <plotter_process_jog_mode+0x258>)
 8004d80:	edc3 7a00 	vstr	s15, [r3]
			rev_target_p = registerFrame[t_reg].U16;
 8004d84:	897b      	ldrh	r3, [r7, #10]
 8004d86:	4a27      	ldr	r2, [pc, #156]	@ (8004e24 <plotter_process_jog_mode+0x254>)
 8004d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d8c:	ee07 3a90 	vmov	s15, r3
 8004d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d94:	4b25      	ldr	r3, [pc, #148]	@ (8004e2c <plotter_process_jog_mode+0x25c>)
 8004d96:	edc3 7a00 	vstr	s15, [r3]

			// Send to trajectory control
			plotter_process_moving_mode(pris_target_p, rev_target_p);
 8004d9a:	4b23      	ldr	r3, [pc, #140]	@ (8004e28 <plotter_process_jog_mode+0x258>)
 8004d9c:	edd3 7a00 	vldr	s15, [r3]
 8004da0:	4b22      	ldr	r3, [pc, #136]	@ (8004e2c <plotter_process_jog_mode+0x25c>)
 8004da2:	ed93 7a00 	vldr	s14, [r3]
 8004da6:	eef0 0a47 	vmov.f32	s1, s14
 8004daa:	eeb0 0a67 	vmov.f32	s0, s15
 8004dae:	f000 f98b 	bl	80050c8 <plotter_process_moving_mode>
		}

		// Check if point reached (trajectories complete)
		if (!pristrajectoryActive && !revtrajectoryActive) {
 8004db2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e30 <plotter_process_jog_mode+0x260>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	f083 0301 	eor.w	r3, r3, #1
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8138 	beq.w	8005032 <plotter_process_jog_mode+0x462>
 8004dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8004e34 <plotter_process_jog_mode+0x264>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	f083 0301 	eor.w	r3, r3, #1
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8130 	beq.w	8005032 <plotter_process_jog_mode+0x462>
			// Move to next point
			current_point++;
 8004dd2:	4b13      	ldr	r3, [pc, #76]	@ (8004e20 <plotter_process_jog_mode+0x250>)
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	4b11      	ldr	r3, [pc, #68]	@ (8004e20 <plotter_process_jog_mode+0x250>)
 8004ddc:	701a      	strb	r2, [r3, #0]

			// Check if all points traversed
			if (current_point >= getNumberOfSetPoints()) {
 8004dde:	f000 fc69 	bl	80056b4 <getNumberOfSetPoints>
 8004de2:	4603      	mov	r3, r0
 8004de4:	461a      	mov	r2, r3
 8004de6:	4b0e      	ldr	r3, [pc, #56]	@ (8004e20 <plotter_process_jog_mode+0x250>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d824      	bhi.n	8004e38 <plotter_process_jog_mode+0x268>
				current_point = 0; // Reset for next time
 8004dee:	4b0c      	ldr	r3, [pc, #48]	@ (8004e20 <plotter_process_jog_mode+0x250>)
 8004df0:	2200      	movs	r2, #0
 8004df2:	701a      	strb	r2, [r3, #0]
				joy_state = A1B1_MODE;
 8004df4:	4b02      	ldr	r3, [pc, #8]	@ (8004e00 <plotter_process_jog_mode+0x230>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]

				// Send to trajectory control
				plotter_process_moving_mode(pris_target_p, rev_target_p);
			}
		}
		break;
 8004dfa:	e11a      	b.n	8005032 <plotter_process_jog_mode+0x462>
 8004dfc:	200002e8 	.word	0x200002e8
 8004e00:	200002ed 	.word	0x200002ed
 8004e04:	20001b4c 	.word	0x20001b4c
 8004e08:	20001b54 	.word	0x20001b54
 8004e0c:	200002eb 	.word	0x200002eb
 8004e10:	200008f8 	.word	0x200008f8
 8004e14:	200008f9 	.word	0x200008f9
 8004e18:	200002ec 	.word	0x200002ec
 8004e1c:	20001b64 	.word	0x20001b64
 8004e20:	20000918 	.word	0x20000918
 8004e24:	2000199c 	.word	0x2000199c
 8004e28:	20000878 	.word	0x20000878
 8004e2c:	200008d0 	.word	0x200008d0
 8004e30:	20000870 	.word	0x20000870
 8004e34:	200008c8 	.word	0x200008c8
				moving_state = MOVING_GO_TO_POINT;
 8004e38:	4b81      	ldr	r3, [pc, #516]	@ (8005040 <plotter_process_jog_mode+0x470>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
				uint16_t r_reg = getPointRegisterR(current_point);
 8004e3e:	4b81      	ldr	r3, [pc, #516]	@ (8005044 <plotter_process_jog_mode+0x474>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fbbe 	bl	80055c4 <getPointRegisterR>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	813b      	strh	r3, [r7, #8]
				uint16_t t_reg = getPointRegisterT(current_point);
 8004e4c:	4b7d      	ldr	r3, [pc, #500]	@ (8005044 <plotter_process_jog_mode+0x474>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fbf3 	bl	800563c <getPointRegisterT>
 8004e56:	4603      	mov	r3, r0
 8004e58:	80fb      	strh	r3, [r7, #6]
				pris_target_p = registerFrame[r_reg].U16;
 8004e5a:	893b      	ldrh	r3, [r7, #8]
 8004e5c:	4a7a      	ldr	r2, [pc, #488]	@ (8005048 <plotter_process_jog_mode+0x478>)
 8004e5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6a:	4b78      	ldr	r3, [pc, #480]	@ (800504c <plotter_process_jog_mode+0x47c>)
 8004e6c:	edc3 7a00 	vstr	s15, [r3]
				rev_target_p = registerFrame[t_reg].U16;
 8004e70:	88fb      	ldrh	r3, [r7, #6]
 8004e72:	4a75      	ldr	r2, [pc, #468]	@ (8005048 <plotter_process_jog_mode+0x478>)
 8004e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e78:	ee07 3a90 	vmov	s15, r3
 8004e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e80:	4b73      	ldr	r3, [pc, #460]	@ (8005050 <plotter_process_jog_mode+0x480>)
 8004e82:	edc3 7a00 	vstr	s15, [r3]
				plotter_process_moving_mode(pris_target_p, rev_target_p);
 8004e86:	4b71      	ldr	r3, [pc, #452]	@ (800504c <plotter_process_jog_mode+0x47c>)
 8004e88:	edd3 7a00 	vldr	s15, [r3]
 8004e8c:	4b70      	ldr	r3, [pc, #448]	@ (8005050 <plotter_process_jog_mode+0x480>)
 8004e8e:	ed93 7a00 	vldr	s14, [r3]
 8004e92:	eef0 0a47 	vmov.f32	s1, s14
 8004e96:	eeb0 0a67 	vmov.f32	s0, s15
 8004e9a:	f000 f915 	bl	80050c8 <plotter_process_moving_mode>
		break;
 8004e9e:	e0c8      	b.n	8005032 <plotter_process_jog_mode+0x462>

	case A1B1_SETPOINT:
		plotter_joymove();
 8004ea0:	f7ff fc8e 	bl	80047c0 <plotter_joymove>

		// When b1 is pressed, save the current position
		if (b1[0] == 0 && b1[1] == 1) {
 8004ea4:	4b6b      	ldr	r3, [pc, #428]	@ (8005054 <plotter_process_jog_mode+0x484>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f040 80c4 	bne.w	8005036 <plotter_process_jog_mode+0x466>
 8004eae:	4b69      	ldr	r3, [pc, #420]	@ (8005054 <plotter_process_jog_mode+0x484>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	f040 80bf 	bne.w	8005036 <plotter_process_jog_mode+0x466>
			// Determine which point to set based on current state
			uint16_t r_reg = 0, t_reg = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	80bb      	strh	r3, [r7, #4]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	807b      	strh	r3, [r7, #2]
			uint8_t point_index = 0;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	73fb      	strb	r3, [r7, #15]

			// Convert enum to numerical index
			if (setpoint_state == NO_POINT_SET || setpoint_state == POINT_IDLE)
 8004ec4:	4b64      	ldr	r3, [pc, #400]	@ (8005058 <plotter_process_jog_mode+0x488>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <plotter_process_jog_mode+0x304>
 8004ecc:	4b62      	ldr	r3, [pc, #392]	@ (8005058 <plotter_process_jog_mode+0x488>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b0b      	cmp	r3, #11
 8004ed2:	d102      	bne.n	8004eda <plotter_process_jog_mode+0x30a>
				point_index = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	73fb      	strb	r3, [r7, #15]
 8004ed8:	e00a      	b.n	8004ef0 <plotter_process_jog_mode+0x320>
			else if (setpoint_state == POINT_10_SET) {
 8004eda:	4b5f      	ldr	r3, [pc, #380]	@ (8005058 <plotter_process_jog_mode+0x488>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b0a      	cmp	r3, #10
 8004ee0:	d103      	bne.n	8004eea <plotter_process_jog_mode+0x31a>
				// All points are set, return to A1B1_MODE
				joy_state = A1B1_MODE;
 8004ee2:	4b5e      	ldr	r3, [pc, #376]	@ (800505c <plotter_process_jog_mode+0x48c>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	701a      	strb	r2, [r3, #0]
				return;
 8004ee8:	e0a6      	b.n	8005038 <plotter_process_jog_mode+0x468>
			} else
				point_index = (uint8_t) setpoint_state;
 8004eea:	4b5b      	ldr	r3, [pc, #364]	@ (8005058 <plotter_process_jog_mode+0x488>)
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	73fb      	strb	r3, [r7, #15]

			// Map index to register addresses (using helper function)
			r_reg = getPointRegisterR(point_index);
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fb66 	bl	80055c4 <getPointRegisterR>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	80bb      	strh	r3, [r7, #4]
			t_reg = getPointRegisterT(point_index);
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fb9c 	bl	800563c <getPointRegisterT>
 8004f04:	4603      	mov	r3, r0
 8004f06:	807b      	strh	r3, [r7, #2]

			// Update setpoint state to next value
			switch (setpoint_state) {
 8004f08:	4b53      	ldr	r3, [pc, #332]	@ (8005058 <plotter_process_jog_mode+0x488>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b0b      	cmp	r3, #11
 8004f0e:	d847      	bhi.n	8004fa0 <plotter_process_jog_mode+0x3d0>
 8004f10:	a201      	add	r2, pc, #4	@ (adr r2, 8004f18 <plotter_process_jog_mode+0x348>)
 8004f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f16:	bf00      	nop
 8004f18:	08004f49 	.word	0x08004f49
 8004f1c:	08004f51 	.word	0x08004f51
 8004f20:	08004f59 	.word	0x08004f59
 8004f24:	08004f61 	.word	0x08004f61
 8004f28:	08004f69 	.word	0x08004f69
 8004f2c:	08004f71 	.word	0x08004f71
 8004f30:	08004f79 	.word	0x08004f79
 8004f34:	08004f81 	.word	0x08004f81
 8004f38:	08004f89 	.word	0x08004f89
 8004f3c:	08004f91 	.word	0x08004f91
 8004f40:	08004f99 	.word	0x08004f99
 8004f44:	08004f49 	.word	0x08004f49
			case NO_POINT_SET:
			case POINT_IDLE:
				setpoint_state = POINT_1_SET;
 8004f48:	4b43      	ldr	r3, [pc, #268]	@ (8005058 <plotter_process_jog_mode+0x488>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	701a      	strb	r2, [r3, #0]
				break;
 8004f4e:	e027      	b.n	8004fa0 <plotter_process_jog_mode+0x3d0>
			case POINT_1_SET:
				setpoint_state = POINT_2_SET;
 8004f50:	4b41      	ldr	r3, [pc, #260]	@ (8005058 <plotter_process_jog_mode+0x488>)
 8004f52:	2202      	movs	r2, #2
 8004f54:	701a      	strb	r2, [r3, #0]
				break;
 8004f56:	e023      	b.n	8004fa0 <plotter_process_jog_mode+0x3d0>
			case POINT_2_SET:
				setpoint_state = POINT_3_SET;
 8004f58:	4b3f      	ldr	r3, [pc, #252]	@ (8005058 <plotter_process_jog_mode+0x488>)
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	701a      	strb	r2, [r3, #0]
				break;
 8004f5e:	e01f      	b.n	8004fa0 <plotter_process_jog_mode+0x3d0>
			case POINT_3_SET:
				setpoint_state = POINT_4_SET;
 8004f60:	4b3d      	ldr	r3, [pc, #244]	@ (8005058 <plotter_process_jog_mode+0x488>)
 8004f62:	2204      	movs	r2, #4
 8004f64:	701a      	strb	r2, [r3, #0]
				break;
 8004f66:	e01b      	b.n	8004fa0 <plotter_process_jog_mode+0x3d0>
			case POINT_4_SET:
				setpoint_state = POINT_5_SET;
 8004f68:	4b3b      	ldr	r3, [pc, #236]	@ (8005058 <plotter_process_jog_mode+0x488>)
 8004f6a:	2205      	movs	r2, #5
 8004f6c:	701a      	strb	r2, [r3, #0]
				break;
 8004f6e:	e017      	b.n	8004fa0 <plotter_process_jog_mode+0x3d0>
			case POINT_5_SET:
				setpoint_state = POINT_6_SET;
 8004f70:	4b39      	ldr	r3, [pc, #228]	@ (8005058 <plotter_process_jog_mode+0x488>)
 8004f72:	2206      	movs	r2, #6
 8004f74:	701a      	strb	r2, [r3, #0]
				break;
 8004f76:	e013      	b.n	8004fa0 <plotter_process_jog_mode+0x3d0>
			case POINT_6_SET:
				setpoint_state = POINT_7_SET;
 8004f78:	4b37      	ldr	r3, [pc, #220]	@ (8005058 <plotter_process_jog_mode+0x488>)
 8004f7a:	2207      	movs	r2, #7
 8004f7c:	701a      	strb	r2, [r3, #0]
				break;
 8004f7e:	e00f      	b.n	8004fa0 <plotter_process_jog_mode+0x3d0>
			case POINT_7_SET:
				setpoint_state = POINT_8_SET;
 8004f80:	4b35      	ldr	r3, [pc, #212]	@ (8005058 <plotter_process_jog_mode+0x488>)
 8004f82:	2208      	movs	r2, #8
 8004f84:	701a      	strb	r2, [r3, #0]
				break;
 8004f86:	e00b      	b.n	8004fa0 <plotter_process_jog_mode+0x3d0>
			case POINT_8_SET:
				setpoint_state = POINT_9_SET;
 8004f88:	4b33      	ldr	r3, [pc, #204]	@ (8005058 <plotter_process_jog_mode+0x488>)
 8004f8a:	2209      	movs	r2, #9
 8004f8c:	701a      	strb	r2, [r3, #0]
				break;
 8004f8e:	e007      	b.n	8004fa0 <plotter_process_jog_mode+0x3d0>
			case POINT_9_SET:
				setpoint_state = POINT_10_SET;
 8004f90:	4b31      	ldr	r3, [pc, #196]	@ (8005058 <plotter_process_jog_mode+0x488>)
 8004f92:	220a      	movs	r2, #10
 8004f94:	701a      	strb	r2, [r3, #0]
				break;
 8004f96:	e003      	b.n	8004fa0 <plotter_process_jog_mode+0x3d0>
			case POINT_10_SET:
				// Return to menu if all points set
				joy_state = A1B1_MODE;
 8004f98:	4b30      	ldr	r3, [pc, #192]	@ (800505c <plotter_process_jog_mode+0x48c>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	701a      	strb	r2, [r3, #0]
				break;
 8004f9e:	bf00      	nop
			}

			// Save current position to the registers
			registerFrame[r_reg].U16 = prismatic_encoder.mm * 10.0;
 8004fa0:	4b2f      	ldr	r3, [pc, #188]	@ (8005060 <plotter_process_jog_mode+0x490>)
 8004fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fb fa9b 	bl	80004e0 <__aeabi_f2d>
 8004faa:	f04f 0200 	mov.w	r2, #0
 8004fae:	4b2d      	ldr	r3, [pc, #180]	@ (8005064 <plotter_process_jog_mode+0x494>)
 8004fb0:	f7fb faee 	bl	8000590 <__aeabi_dmul>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	88bc      	ldrh	r4, [r7, #4]
 8004fba:	4610      	mov	r0, r2
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f7fb fda9 	bl	8000b14 <__aeabi_d2uiz>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	4b20      	ldr	r3, [pc, #128]	@ (8005048 <plotter_process_jog_mode+0x478>)
 8004fc8:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			registerFrame[t_reg].U16 = revolute_encoder.rads * 10.0;
 8004fcc:	4b26      	ldr	r3, [pc, #152]	@ (8005068 <plotter_process_jog_mode+0x498>)
 8004fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fb fa85 	bl	80004e0 <__aeabi_f2d>
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	4b22      	ldr	r3, [pc, #136]	@ (8005064 <plotter_process_jog_mode+0x494>)
 8004fdc:	f7fb fad8 	bl	8000590 <__aeabi_dmul>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	887c      	ldrh	r4, [r7, #2]
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	4619      	mov	r1, r3
 8004fea:	f7fb fd93 	bl	8000b14 <__aeabi_d2uiz>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	4b15      	ldr	r3, [pc, #84]	@ (8005048 <plotter_process_jog_mode+0x478>)
 8004ff4:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

			total_setpoints = point_index + 1;
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800506c <plotter_process_jog_mode+0x49c>)
 8005000:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005002:	e018      	b.n	8005036 <plotter_process_jog_mode+0x466>

	case A2B2_GOTO_HOME:
		// Transition to home state
		plotter_process_return_to_home();
 8005004:	f000 f8d0 	bl	80051a8 <plotter_process_return_to_home>
		break;
 8005008:	e016      	b.n	8005038 <plotter_process_jog_mode+0x468>

	case A2B2_WRITING:
		plotter_process_writing_state();
 800500a:	f000 f839 	bl	8005080 <plotter_process_writing_state>
		break;
 800500e:	e013      	b.n	8005038 <plotter_process_jog_mode+0x468>

	default:
		// Stop motors in other states
		MDXX_set_range(&prismatic_motor, 2000, 0);
 8005010:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8005070 <plotter_process_jog_mode+0x4a0>
 8005014:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8005074 <plotter_process_jog_mode+0x4a4>
 8005018:	4817      	ldr	r0, [pc, #92]	@ (8005078 <plotter_process_jog_mode+0x4a8>)
 800501a:	f7fc f949 	bl	80012b0 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, 0);
 800501e:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8005070 <plotter_process_jog_mode+0x4a0>
 8005022:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8005074 <plotter_process_jog_mode+0x4a4>
 8005026:	4815      	ldr	r0, [pc, #84]	@ (800507c <plotter_process_jog_mode+0x4ac>)
 8005028:	f7fc f942 	bl	80012b0 <MDXX_set_range>
		break;
 800502c:	e004      	b.n	8005038 <plotter_process_jog_mode+0x468>
		return;
 800502e:	bf00      	nop
 8005030:	e002      	b.n	8005038 <plotter_process_jog_mode+0x468>
		break;
 8005032:	bf00      	nop
 8005034:	e000      	b.n	8005038 <plotter_process_jog_mode+0x468>
		break;
 8005036:	bf00      	nop
	}
}
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	bd90      	pop	{r4, r7, pc}
 800503e:	bf00      	nop
 8005040:	200002eb 	.word	0x200002eb
 8005044:	20000918 	.word	0x20000918
 8005048:	2000199c 	.word	0x2000199c
 800504c:	20000878 	.word	0x20000878
 8005050:	200008d0 	.word	0x200008d0
 8005054:	20001b4c 	.word	0x20001b4c
 8005058:	200002ea 	.word	0x200002ea
 800505c:	200002ed 	.word	0x200002ed
 8005060:	200009b4 	.word	0x200009b4
 8005064:	40240000 	.word	0x40240000
 8005068:	20000a10 	.word	0x20000a10
 800506c:	200008f8 	.word	0x200008f8
 8005070:	00000000 	.word	0x00000000
 8005074:	44fa0000 	.word	0x44fa0000
 8005078:	2000091c 	.word	0x2000091c
 800507c:	20000968 	.word	0x20000968

08005080 <plotter_process_writing_state>:

void plotter_process_writing_state() {
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
// Do nothing in writing state

// Reset motors to ensure safety
	MDXX_set_range(&prismatic_motor, 2000, 0);
 8005084:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 80050b0 <plotter_process_writing_state+0x30>
 8005088:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 80050b4 <plotter_process_writing_state+0x34>
 800508c:	480a      	ldr	r0, [pc, #40]	@ (80050b8 <plotter_process_writing_state+0x38>)
 800508e:	f7fc f90f 	bl	80012b0 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8005092:	eddf 0a07 	vldr	s1, [pc, #28]	@ 80050b0 <plotter_process_writing_state+0x30>
 8005096:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80050b4 <plotter_process_writing_state+0x34>
 800509a:	4808      	ldr	r0, [pc, #32]	@ (80050bc <plotter_process_writing_state+0x3c>)
 800509c:	f7fc f908 	bl	80012b0 <MDXX_set_range>

	writing_state = WRITE_IDLE;
 80050a0:	4b07      	ldr	r3, [pc, #28]	@ (80050c0 <plotter_process_writing_state+0x40>)
 80050a2:	2202      	movs	r2, #2
 80050a4:	701a      	strb	r2, [r3, #0]
	joy_state = A2B2_MODE;
 80050a6:	4b07      	ldr	r3, [pc, #28]	@ (80050c4 <plotter_process_writing_state+0x44>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	701a      	strb	r2, [r3, #0]
}
 80050ac:	bf00      	nop
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	00000000 	.word	0x00000000
 80050b4:	44fa0000 	.word	0x44fa0000
 80050b8:	2000091c 	.word	0x2000091c
 80050bc:	20000968 	.word	0x20000968
 80050c0:	200002ec 	.word	0x200002ec
 80050c4:	200002ed 	.word	0x200002ed

080050c8 <plotter_process_moving_mode>:

void plotter_process_moving_mode(float32_t target_p_pris,
		float32_t target_p_rev) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80050d2:	edc7 0a00 	vstr	s1, [r7]
// Process moving through points using MovingThroghPointState
	switch (moving_state) {
 80050d6:	4b2c      	ldr	r3, [pc, #176]	@ (8005188 <plotter_process_moving_mode+0xc0>)
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d850      	bhi.n	8005180 <plotter_process_moving_mode+0xb8>
 80050de:	a201      	add	r2, pc, #4	@ (adr r2, 80050e4 <plotter_process_moving_mode+0x1c>)
 80050e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e4:	080050f9 	.word	0x080050f9
 80050e8:	08005129 	.word	0x08005129
 80050ec:	0800513d 	.word	0x0800513d
 80050f0:	08005151 	.word	0x08005151
 80050f4:	08005159 	.word	0x08005159
	case MOVING_GO_TO_POINT:
		plotter_process_trajectory_control(target_p_pris, target_p_rev);
 80050f8:	edd7 0a00 	vldr	s1, [r7]
 80050fc:	ed97 0a01 	vldr	s0, [r7, #4]
 8005100:	f000 f90a 	bl	8005318 <plotter_process_trajectory_control>

		if (!pristrajectoryActive && !revtrajectoryActive) {
 8005104:	4b21      	ldr	r3, [pc, #132]	@ (800518c <plotter_process_moving_mode+0xc4>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	f083 0301 	eor.w	r3, r3, #1
 800510c:	b2db      	uxtb	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d031      	beq.n	8005176 <plotter_process_moving_mode+0xae>
 8005112:	4b1f      	ldr	r3, [pc, #124]	@ (8005190 <plotter_process_moving_mode+0xc8>)
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	f083 0301 	eor.w	r3, r3, #1
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d02a      	beq.n	8005176 <plotter_process_moving_mode+0xae>
			moving_state = MOVING_DOWN;
 8005120:	4b19      	ldr	r3, [pc, #100]	@ (8005188 <plotter_process_moving_mode+0xc0>)
 8005122:	2201      	movs	r2, #1
 8005124:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005126:	e026      	b.n	8005176 <plotter_process_moving_mode+0xae>

	case MOVING_DOWN:
		// Lower pen at target position
		plotter_pen_down();
 8005128:	f001 f888 	bl	800623c <plotter_pen_down>
		// Wait for pen to complete movement
		if (servo_state == PEN_DOWN) {
 800512c:	4b19      	ldr	r3, [pc, #100]	@ (8005194 <plotter_process_moving_mode+0xcc>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d122      	bne.n	800517a <plotter_process_moving_mode+0xb2>
			moving_state = MOVING_UP;
 8005134:	4b14      	ldr	r3, [pc, #80]	@ (8005188 <plotter_process_moving_mode+0xc0>)
 8005136:	2202      	movs	r2, #2
 8005138:	701a      	strb	r2, [r3, #0]
		}
		break;
 800513a:	e01e      	b.n	800517a <plotter_process_moving_mode+0xb2>

	case MOVING_UP:
		// Raise pen after touching point
		plotter_pen_up();
 800513c:	f001 f86e 	bl	800621c <plotter_pen_up>
		// Wait for pen to complete movement
		if (servo_state == PEN_UP) {
 8005140:	4b14      	ldr	r3, [pc, #80]	@ (8005194 <plotter_process_moving_mode+0xcc>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b02      	cmp	r3, #2
 8005146:	d11a      	bne.n	800517e <plotter_process_moving_mode+0xb6>
			moving_state = MOVING_COMPLETE;
 8005148:	4b0f      	ldr	r3, [pc, #60]	@ (8005188 <plotter_process_moving_mode+0xc0>)
 800514a:	2203      	movs	r2, #3
 800514c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800514e:	e016      	b.n	800517e <plotter_process_moving_mode+0xb6>

	case MOVING_COMPLETE:
		moving_state = MOVING_IDLE;
 8005150:	4b0d      	ldr	r3, [pc, #52]	@ (8005188 <plotter_process_moving_mode+0xc0>)
 8005152:	2204      	movs	r2, #4
 8005154:	701a      	strb	r2, [r3, #0]
		break;
 8005156:	e013      	b.n	8005180 <plotter_process_moving_mode+0xb8>

	case MOVING_IDLE:
		// Stop motors
		MDXX_set_range(&prismatic_motor, 2000, 0);
 8005158:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8005198 <plotter_process_moving_mode+0xd0>
 800515c:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800519c <plotter_process_moving_mode+0xd4>
 8005160:	480f      	ldr	r0, [pc, #60]	@ (80051a0 <plotter_process_moving_mode+0xd8>)
 8005162:	f7fc f8a5 	bl	80012b0 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, 0);
 8005166:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8005198 <plotter_process_moving_mode+0xd0>
 800516a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800519c <plotter_process_moving_mode+0xd4>
 800516e:	480d      	ldr	r0, [pc, #52]	@ (80051a4 <plotter_process_moving_mode+0xdc>)
 8005170:	f7fc f89e 	bl	80012b0 <MDXX_set_range>
		break;
 8005174:	e004      	b.n	8005180 <plotter_process_moving_mode+0xb8>
		break;
 8005176:	bf00      	nop
 8005178:	e002      	b.n	8005180 <plotter_process_moving_mode+0xb8>
		break;
 800517a:	bf00      	nop
 800517c:	e000      	b.n	8005180 <plotter_process_moving_mode+0xb8>
		break;
 800517e:	bf00      	nop
	}
}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	200002eb 	.word	0x200002eb
 800518c:	20000870 	.word	0x20000870
 8005190:	200008c8 	.word	0x200008c8
 8005194:	2000091a 	.word	0x2000091a
 8005198:	00000000 	.word	0x00000000
 800519c:	44fa0000 	.word	0x44fa0000
 80051a0:	2000091c 	.word	0x2000091c
 80051a4:	20000968 	.word	0x20000968

080051a8 <plotter_process_return_to_home>:

void plotter_process_return_to_home() {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
// First ensure pen is up
	if (servo_state != PEN_UP) {
 80051ac:	4b3b      	ldr	r3, [pc, #236]	@ (800529c <plotter_process_return_to_home+0xf4>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d001      	beq.n	80051b8 <plotter_process_return_to_home+0x10>
		plotter_pen_up();
 80051b4:	f001 f832 	bl	800621c <plotter_pen_up>
//		return;
	}

// Home revolute axis first
	if (revolute_state != RP_AT_HOME_POSITION) {
 80051b8:	4b39      	ldr	r3, [pc, #228]	@ (80052a0 <plotter_process_return_to_home+0xf8>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d018      	beq.n	80051f2 <plotter_process_return_to_home+0x4a>
		revolute_state = RP_GOING_HOME;
 80051c0:	4b37      	ldr	r3, [pc, #220]	@ (80052a0 <plotter_process_return_to_home+0xf8>)
 80051c2:	2201      	movs	r2, #1
 80051c4:	701a      	strb	r2, [r3, #0]

		// Move revolute axis until proximity sensor triggered
		MDXX_set_range(&revolute_motor, 2000, 1000);
 80051c6:	eddf 0a37 	vldr	s1, [pc, #220]	@ 80052a4 <plotter_process_return_to_home+0xfc>
 80051ca:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 80052a8 <plotter_process_return_to_home+0x100>
 80051ce:	4837      	ldr	r0, [pc, #220]	@ (80052ac <plotter_process_return_to_home+0x104>)
 80051d0:	f7fc f86e 	bl	80012b0 <MDXX_set_range>

		// Check if home reached
		if (prox) {
 80051d4:	4b36      	ldr	r3, [pc, #216]	@ (80052b0 <plotter_process_return_to_home+0x108>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d026      	beq.n	800522a <plotter_process_return_to_home+0x82>
			revolute_state = RP_AT_HOME_POSITION;
 80051dc:	4b30      	ldr	r3, [pc, #192]	@ (80052a0 <plotter_process_return_to_home+0xf8>)
 80051de:	2200      	movs	r2, #0
 80051e0:	701a      	strb	r2, [r3, #0]
			MDXX_set_range(&revolute_motor, 2000, 0);
 80051e2:	eddf 0a34 	vldr	s1, [pc, #208]	@ 80052b4 <plotter_process_return_to_home+0x10c>
 80051e6:	ed9f 0a30 	vldr	s0, [pc, #192]	@ 80052a8 <plotter_process_return_to_home+0x100>
 80051ea:	4830      	ldr	r0, [pc, #192]	@ (80052ac <plotter_process_return_to_home+0x104>)
 80051ec:	f7fc f860 	bl	80012b0 <MDXX_set_range>
 80051f0:	e01b      	b.n	800522a <plotter_process_return_to_home+0x82>
		}
	}
// Then home prismatic axis if revolute is done
	else if (prismatic_state != PP_AT_TOP_END_POSITION) {
 80051f2:	4b31      	ldr	r3, [pc, #196]	@ (80052b8 <plotter_process_return_to_home+0x110>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d017      	beq.n	800522a <plotter_process_return_to_home+0x82>
		prismatic_state = PP_GOING_TOP_END;
 80051fa:	4b2f      	ldr	r3, [pc, #188]	@ (80052b8 <plotter_process_return_to_home+0x110>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	701a      	strb	r2, [r3, #0]

		// Move prismatic upward
		MDXX_set_range(&prismatic_motor, 2000, 1000);
 8005200:	eddf 0a28 	vldr	s1, [pc, #160]	@ 80052a4 <plotter_process_return_to_home+0xfc>
 8005204:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 80052a8 <plotter_process_return_to_home+0x100>
 8005208:	482c      	ldr	r0, [pc, #176]	@ (80052bc <plotter_process_return_to_home+0x114>)
 800520a:	f7fc f851 	bl	80012b0 <MDXX_set_range>

		// Check if top position reached
		if (up_photo) {
 800520e:	4b2c      	ldr	r3, [pc, #176]	@ (80052c0 <plotter_process_return_to_home+0x118>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d009      	beq.n	800522a <plotter_process_return_to_home+0x82>
			prismatic_state = PP_AT_TOP_END_POSITION;
 8005216:	4b28      	ldr	r3, [pc, #160]	@ (80052b8 <plotter_process_return_to_home+0x110>)
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]
			MDXX_set_range(&prismatic_motor, 2000, 0);
 800521c:	eddf 0a25 	vldr	s1, [pc, #148]	@ 80052b4 <plotter_process_return_to_home+0x10c>
 8005220:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 80052a8 <plotter_process_return_to_home+0x100>
 8005224:	4825      	ldr	r0, [pc, #148]	@ (80052bc <plotter_process_return_to_home+0x114>)
 8005226:	f7fc f843 	bl	80012b0 <MDXX_set_range>
		}
	}
// Both axes homed
	if (prismatic_state == PP_AT_TOP_END_POSITION&&revolute_state == RP_AT_HOME_POSITION) {
 800522a:	4b23      	ldr	r3, [pc, #140]	@ (80052b8 <plotter_process_return_to_home+0x110>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d131      	bne.n	8005296 <plotter_process_return_to_home+0xee>
 8005232:	4b1b      	ldr	r3, [pc, #108]	@ (80052a0 <plotter_process_return_to_home+0xf8>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d12d      	bne.n	8005296 <plotter_process_return_to_home+0xee>
		plotter_reset();
 800523a:	f000 ff35 	bl	80060a8 <plotter_reset>

		pris_pos[0] = 0.0;
 800523e:	4b21      	ldr	r3, [pc, #132]	@ (80052c4 <plotter_process_return_to_home+0x11c>)
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
		pris_pos[1] = 0.0;
 8005246:	4b1f      	ldr	r3, [pc, #124]	@ (80052c4 <plotter_process_return_to_home+0x11c>)
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	605a      	str	r2, [r3, #4]

		rev_pos[0] = 0.0;
 800524e:	4b1e      	ldr	r3, [pc, #120]	@ (80052c8 <plotter_process_return_to_home+0x120>)
 8005250:	f04f 0200 	mov.w	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
		rev_pos[1] = 0.0;
 8005256:	4b1c      	ldr	r3, [pc, #112]	@ (80052c8 <plotter_process_return_to_home+0x120>)
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	605a      	str	r2, [r3, #4]

		pristrajectoryActive = false;
 800525e:	4b1b      	ldr	r3, [pc, #108]	@ (80052cc <plotter_process_return_to_home+0x124>)
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
		revtrajectoryActive = false;
 8005264:	4b1a      	ldr	r3, [pc, #104]	@ (80052d0 <plotter_process_return_to_home+0x128>)
 8005266:	2200      	movs	r2, #0
 8005268:	701a      	strb	r2, [r3, #0]

		pris_target_p = 0.0f;
 800526a:	4b1a      	ldr	r3, [pc, #104]	@ (80052d4 <plotter_process_return_to_home+0x12c>)
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
		rev_target_p = 0.0f;
 8005272:	4b19      	ldr	r3, [pc, #100]	@ (80052d8 <plotter_process_return_to_home+0x130>)
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	601a      	str	r2, [r3, #0]

		if (joy_state == A2B2_GOTO_HOME) {
 800527a:	4b18      	ldr	r3, [pc, #96]	@ (80052dc <plotter_process_return_to_home+0x134>)
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b06      	cmp	r3, #6
 8005280:	d106      	bne.n	8005290 <plotter_process_return_to_home+0xe8>
			joy_state = A2B2_MODE;
 8005282:	4b16      	ldr	r3, [pc, #88]	@ (80052dc <plotter_process_return_to_home+0x134>)
 8005284:	2201      	movs	r2, #1
 8005286:	701a      	strb	r2, [r3, #0]
			rs_current_state = RS_JOG_MODE;
 8005288:	4b15      	ldr	r3, [pc, #84]	@ (80052e0 <plotter_process_return_to_home+0x138>)
 800528a:	2201      	movs	r2, #1
 800528c:	701a      	strb	r2, [r3, #0]
		} else {
			rs_current_state = RS_IDLE;
		}
	}
}
 800528e:	e002      	b.n	8005296 <plotter_process_return_to_home+0xee>
			rs_current_state = RS_IDLE;
 8005290:	4b13      	ldr	r3, [pc, #76]	@ (80052e0 <plotter_process_return_to_home+0x138>)
 8005292:	2200      	movs	r2, #0
 8005294:	701a      	strb	r2, [r3, #0]
}
 8005296:	bf00      	nop
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	2000091a 	.word	0x2000091a
 80052a0:	200002ef 	.word	0x200002ef
 80052a4:	447a0000 	.word	0x447a0000
 80052a8:	44fa0000 	.word	0x44fa0000
 80052ac:	20000968 	.word	0x20000968
 80052b0:	20001b34 	.word	0x20001b34
 80052b4:	00000000 	.word	0x00000000
 80052b8:	200002ee 	.word	0x200002ee
 80052bc:	2000091c 	.word	0x2000091c
 80052c0:	20001b3c 	.word	0x20001b3c
 80052c4:	200008fc 	.word	0x200008fc
 80052c8:	20000904 	.word	0x20000904
 80052cc:	20000870 	.word	0x20000870
 80052d0:	200008c8 	.word	0x200008c8
 80052d4:	20000878 	.word	0x20000878
 80052d8:	200008d0 	.word	0x200008d0
 80052dc:	200002ed 	.word	0x200002ed
 80052e0:	200002e8 	.word	0x200002e8

080052e4 <plotter_process_emergency>:

void plotter_process_emergency() {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
// Emergency stop - immediately cut power to motors
	MDXX_set_range(&prismatic_motor, 2000, 0);
 80052e8:	eddf 0a07 	vldr	s1, [pc, #28]	@ 8005308 <plotter_process_emergency+0x24>
 80052ec:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800530c <plotter_process_emergency+0x28>
 80052f0:	4807      	ldr	r0, [pc, #28]	@ (8005310 <plotter_process_emergency+0x2c>)
 80052f2:	f7fb ffdd 	bl	80012b0 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 80052f6:	eddf 0a04 	vldr	s1, [pc, #16]	@ 8005308 <plotter_process_emergency+0x24>
 80052fa:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 800530c <plotter_process_emergency+0x28>
 80052fe:	4805      	ldr	r0, [pc, #20]	@ (8005314 <plotter_process_emergency+0x30>)
 8005300:	f7fb ffd6 	bl	80012b0 <MDXX_set_range>
// Exit emergency mode only if button pressed and emergency switch released
//	if (joy_state == EMERGENCY_MODE && b1 && !emer) {
//		rs_current_state = RS_RETURN_TO_HOME;
//		emer_state = DEFAULT;
//	}
}
 8005304:	bf00      	nop
 8005306:	bd80      	pop	{r7, pc}
 8005308:	00000000 	.word	0x00000000
 800530c:	44fa0000 	.word	0x44fa0000
 8005310:	2000091c 	.word	0x2000091c
 8005314:	20000968 	.word	0x20000968

08005318 <plotter_process_trajectory_control>:

void plotter_process_trajectory_control(float32_t pris_tgt, float32_t rev_tgt) {
 8005318:	b590      	push	{r4, r7, lr}
 800531a:	ed2d 8b02 	vpush	{d8}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	ed87 0a01 	vstr	s0, [r7, #4]
 8005326:	edc7 0a00 	vstr	s1, [r7]
	if (!is_valid_target(pris_tgt, rev_tgt)) {
 800532a:	edd7 0a00 	vldr	s1, [r7]
 800532e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005332:	f7ff f879 	bl	8004428 <is_valid_target>
 8005336:	4603      	mov	r3, r0
 8005338:	f083 0301 	eor.w	r3, r3, #1
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d006      	beq.n	8005350 <plotter_process_trajectory_control+0x38>
		// If target is invalid, don't start trajectory
		pristrajectoryActive = false;
 8005342:	4b38      	ldr	r3, [pc, #224]	@ (8005424 <plotter_process_trajectory_control+0x10c>)
 8005344:	2200      	movs	r2, #0
 8005346:	701a      	strb	r2, [r3, #0]
		revtrajectoryActive = false;
 8005348:	4b37      	ldr	r3, [pc, #220]	@ (8005428 <plotter_process_trajectory_control+0x110>)
 800534a:	2200      	movs	r2, #0
 800534c:	701a      	strb	r2, [r3, #0]
		return;
 800534e:	e063      	b.n	8005418 <plotter_process_trajectory_control+0x100>
	}

// Setup target points
	pris_target_p = pris_tgt;
 8005350:	4a36      	ldr	r2, [pc, #216]	@ (800542c <plotter_process_trajectory_control+0x114>)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6013      	str	r3, [r2, #0]
	rev_target_p = rev_tgt;
 8005356:	4a36      	ldr	r2, [pc, #216]	@ (8005430 <plotter_process_trajectory_control+0x118>)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	6013      	str	r3, [r2, #0]

// Set initial positions from current encoder readings
	pris_initial_p = prismatic_encoder.mm;
 800535c:	4b35      	ldr	r3, [pc, #212]	@ (8005434 <plotter_process_trajectory_control+0x11c>)
 800535e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005360:	4a35      	ldr	r2, [pc, #212]	@ (8005438 <plotter_process_trajectory_control+0x120>)
 8005362:	6013      	str	r3, [r2, #0]
	rev_initial_p = revolute_encoder.rads;
 8005364:	4b35      	ldr	r3, [pc, #212]	@ (800543c <plotter_process_trajectory_control+0x124>)
 8005366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005368:	4a35      	ldr	r2, [pc, #212]	@ (8005440 <plotter_process_trajectory_control+0x128>)
 800536a:	6013      	str	r3, [r2, #0]

// Reset trajectory timers
	prisEva.t = 0.0f;
 800536c:	4b35      	ldr	r3, [pc, #212]	@ (8005444 <plotter_process_trajectory_control+0x12c>)
 800536e:	f04f 0200 	mov.w	r2, #0
 8005372:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 8005374:	4b33      	ldr	r3, [pc, #204]	@ (8005444 <plotter_process_trajectory_control+0x12c>)
 8005376:	2200      	movs	r2, #0
 8005378:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 800537a:	4b33      	ldr	r3, [pc, #204]	@ (8005448 <plotter_process_trajectory_control+0x130>)
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 8005382:	4b31      	ldr	r3, [pc, #196]	@ (8005448 <plotter_process_trajectory_control+0x130>)
 8005384:	2200      	movs	r2, #0
 8005386:	741a      	strb	r2, [r3, #16]

// Generate prismatic trajectory
	Trapezoidal_Generator(&prisGen, pris_initial_p, pris_target_p,
 8005388:	4b2b      	ldr	r3, [pc, #172]	@ (8005438 <plotter_process_trajectory_control+0x120>)
 800538a:	ed93 8a00 	vldr	s16, [r3]
 800538e:	4b27      	ldr	r3, [pc, #156]	@ (800542c <plotter_process_trajectory_control+0x114>)
 8005390:	edd3 8a00 	vldr	s17, [r3]
			ZGX45RGG_400RPM_Constant.sd_max, ZGX45RGG_400RPM_Constant.sdd_max);
 8005394:	4b2d      	ldr	r3, [pc, #180]	@ (800544c <plotter_process_trajectory_control+0x134>)
 8005396:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	Trapezoidal_Generator(&prisGen, pris_initial_p, pris_target_p,
 800539a:	4610      	mov	r0, r2
 800539c:	4619      	mov	r1, r3
 800539e:	f7fb fbd9 	bl	8000b54 <__aeabi_d2f>
 80053a2:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.sd_max, ZGX45RGG_400RPM_Constant.sdd_max);
 80053a4:	4b29      	ldr	r3, [pc, #164]	@ (800544c <plotter_process_trajectory_control+0x134>)
 80053a6:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
	Trapezoidal_Generator(&prisGen, pris_initial_p, pris_target_p,
 80053aa:	4610      	mov	r0, r2
 80053ac:	4619      	mov	r1, r3
 80053ae:	f7fb fbd1 	bl	8000b54 <__aeabi_d2f>
 80053b2:	4603      	mov	r3, r0
 80053b4:	ee01 3a90 	vmov	s3, r3
 80053b8:	ee01 4a10 	vmov	s2, r4
 80053bc:	eef0 0a68 	vmov.f32	s1, s17
 80053c0:	eeb0 0a48 	vmov.f32	s0, s16
 80053c4:	4822      	ldr	r0, [pc, #136]	@ (8005450 <plotter_process_trajectory_control+0x138>)
 80053c6:	f7fd ff54 	bl	8003272 <Trapezoidal_Generator>

// Generate revolute trajectory
	Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 80053ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005440 <plotter_process_trajectory_control+0x128>)
 80053cc:	ed93 8a00 	vldr	s16, [r3]
 80053d0:	4b17      	ldr	r3, [pc, #92]	@ (8005430 <plotter_process_trajectory_control+0x118>)
 80053d2:	edd3 8a00 	vldr	s17, [r3]
			ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qdd_max);
 80053d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005454 <plotter_process_trajectory_control+0x13c>)
 80053d8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 80053dc:	4610      	mov	r0, r2
 80053de:	4619      	mov	r1, r3
 80053e0:	f7fb fbb8 	bl	8000b54 <__aeabi_d2f>
 80053e4:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qdd_max);
 80053e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005454 <plotter_process_trajectory_control+0x13c>)
 80053e8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
	Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 80053ec:	4610      	mov	r0, r2
 80053ee:	4619      	mov	r1, r3
 80053f0:	f7fb fbb0 	bl	8000b54 <__aeabi_d2f>
 80053f4:	4603      	mov	r3, r0
 80053f6:	ee01 3a90 	vmov	s3, r3
 80053fa:	ee01 4a10 	vmov	s2, r4
 80053fe:	eef0 0a68 	vmov.f32	s1, s17
 8005402:	eeb0 0a48 	vmov.f32	s0, s16
 8005406:	4814      	ldr	r0, [pc, #80]	@ (8005458 <plotter_process_trajectory_control+0x140>)
 8005408:	f7fd ff33 	bl	8003272 <Trapezoidal_Generator>

// Activate trajectories
	pristrajectoryActive = true;
 800540c:	4b05      	ldr	r3, [pc, #20]	@ (8005424 <plotter_process_trajectory_control+0x10c>)
 800540e:	2201      	movs	r2, #1
 8005410:	701a      	strb	r2, [r3, #0]
	revtrajectoryActive = true;
 8005412:	4b05      	ldr	r3, [pc, #20]	@ (8005428 <plotter_process_trajectory_control+0x110>)
 8005414:	2201      	movs	r2, #1
 8005416:	701a      	strb	r2, [r3, #0]
}
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	ecbd 8b02 	vpop	{d8}
 8005420:	bd90      	pop	{r4, r7, pc}
 8005422:	bf00      	nop
 8005424:	20000870 	.word	0x20000870
 8005428:	200008c8 	.word	0x200008c8
 800542c:	20000878 	.word	0x20000878
 8005430:	200008d0 	.word	0x200008d0
 8005434:	200009b4 	.word	0x200009b4
 8005438:	20000874 	.word	0x20000874
 800543c:	20000a10 	.word	0x20000a10
 8005440:	200008cc 	.word	0x200008cc
 8005444:	2000085c 	.word	0x2000085c
 8005448:	200008b4 	.word	0x200008b4
 800544c:	20000060 	.word	0x20000060
 8005450:	20000848 	.word	0x20000848
 8005454:	20000000 	.word	0x20000000
 8005458:	200008a0 	.word	0x200008a0

0800545c <plotter_update_trajectories>:

void plotter_update_trajectories() {
 800545c:	b598      	push	{r3, r4, r7, lr}
 800545e:	ed2d 8b02 	vpush	{d8}
 8005462:	af00      	add	r7, sp, #0
// Evaluate prismatic trajectory
	if (pristrajectoryActive) {
 8005464:	4b43      	ldr	r3, [pc, #268]	@ (8005574 <plotter_update_trajectories+0x118>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d037      	beq.n	80054dc <plotter_update_trajectories+0x80>
		Trapezoidal_Evaluated(&prisGen, &prisEva, pris_initial_p, pris_target_p,
 800546c:	4b42      	ldr	r3, [pc, #264]	@ (8005578 <plotter_update_trajectories+0x11c>)
 800546e:	ed93 8a00 	vldr	s16, [r3]
 8005472:	4b42      	ldr	r3, [pc, #264]	@ (800557c <plotter_update_trajectories+0x120>)
 8005474:	edd3 8a00 	vldr	s17, [r3]
				ZGX45RGG_400RPM_Constant.sd_max,
 8005478:	4b41      	ldr	r3, [pc, #260]	@ (8005580 <plotter_update_trajectories+0x124>)
 800547a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		Trapezoidal_Evaluated(&prisGen, &prisEva, pris_initial_p, pris_target_p,
 800547e:	4610      	mov	r0, r2
 8005480:	4619      	mov	r1, r3
 8005482:	f7fb fb67 	bl	8000b54 <__aeabi_d2f>
 8005486:	4604      	mov	r4, r0
				ZGX45RGG_400RPM_Constant.sdd_max);
 8005488:	4b3d      	ldr	r3, [pc, #244]	@ (8005580 <plotter_update_trajectories+0x124>)
 800548a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
		Trapezoidal_Evaluated(&prisGen, &prisEva, pris_initial_p, pris_target_p,
 800548e:	4610      	mov	r0, r2
 8005490:	4619      	mov	r1, r3
 8005492:	f7fb fb5f 	bl	8000b54 <__aeabi_d2f>
 8005496:	4603      	mov	r3, r0
 8005498:	ee01 3a90 	vmov	s3, r3
 800549c:	ee01 4a10 	vmov	s2, r4
 80054a0:	eef0 0a68 	vmov.f32	s1, s17
 80054a4:	eeb0 0a48 	vmov.f32	s0, s16
 80054a8:	4936      	ldr	r1, [pc, #216]	@ (8005584 <plotter_update_trajectories+0x128>)
 80054aa:	4837      	ldr	r0, [pc, #220]	@ (8005588 <plotter_update_trajectories+0x12c>)
 80054ac:	f7fd ffa2 	bl	80033f4 <Trapezoidal_Evaluated>

		// Update reference signals
		prismatic_pos = prisEva.setposition;
 80054b0:	4b34      	ldr	r3, [pc, #208]	@ (8005584 <plotter_update_trajectories+0x128>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a35      	ldr	r2, [pc, #212]	@ (800558c <plotter_update_trajectories+0x130>)
 80054b6:	6013      	str	r3, [r2, #0]
		prismatic_vel = prisEva.setvelocity;
 80054b8:	4b32      	ldr	r3, [pc, #200]	@ (8005584 <plotter_update_trajectories+0x128>)
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	4a34      	ldr	r2, [pc, #208]	@ (8005590 <plotter_update_trajectories+0x134>)
 80054be:	6013      	str	r3, [r2, #0]
		prismatic_accel = prisEva.setacceleration;
 80054c0:	4b30      	ldr	r3, [pc, #192]	@ (8005584 <plotter_update_trajectories+0x128>)
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	4a33      	ldr	r2, [pc, #204]	@ (8005594 <plotter_update_trajectories+0x138>)
 80054c6:	6013      	str	r3, [r2, #0]

		// Check if trajectory is complete
		if (prisEva.isFinised) {
 80054c8:	4b2e      	ldr	r3, [pc, #184]	@ (8005584 <plotter_update_trajectories+0x128>)
 80054ca:	7c1b      	ldrb	r3, [r3, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <plotter_update_trajectories+0x80>
			pristrajectoryActive = false;
 80054d0:	4b28      	ldr	r3, [pc, #160]	@ (8005574 <plotter_update_trajectories+0x118>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	701a      	strb	r2, [r3, #0]
			prismatic_state = PP_TARGET_REACH;
 80054d6:	4b30      	ldr	r3, [pc, #192]	@ (8005598 <plotter_update_trajectories+0x13c>)
 80054d8:	2205      	movs	r2, #5
 80054da:	701a      	strb	r2, [r3, #0]
		}
	}

// Evaluate revolute trajectory
	if (revtrajectoryActive) {
 80054dc:	4b2f      	ldr	r3, [pc, #188]	@ (800559c <plotter_update_trajectories+0x140>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d037      	beq.n	8005554 <plotter_update_trajectories+0xf8>
		Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 80054e4:	4b2e      	ldr	r3, [pc, #184]	@ (80055a0 <plotter_update_trajectories+0x144>)
 80054e6:	ed93 8a00 	vldr	s16, [r3]
 80054ea:	4b2e      	ldr	r3, [pc, #184]	@ (80055a4 <plotter_update_trajectories+0x148>)
 80054ec:	edd3 8a00 	vldr	s17, [r3]
				ZGX45RGG_150RPM_Constant.qd_max,
 80054f0:	4b2d      	ldr	r3, [pc, #180]	@ (80055a8 <plotter_update_trajectories+0x14c>)
 80054f2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
		Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 80054f6:	4610      	mov	r0, r2
 80054f8:	4619      	mov	r1, r3
 80054fa:	f7fb fb2b 	bl	8000b54 <__aeabi_d2f>
 80054fe:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.qdd_max);
 8005500:	4b29      	ldr	r3, [pc, #164]	@ (80055a8 <plotter_update_trajectories+0x14c>)
 8005502:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
		Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 8005506:	4610      	mov	r0, r2
 8005508:	4619      	mov	r1, r3
 800550a:	f7fb fb23 	bl	8000b54 <__aeabi_d2f>
 800550e:	4603      	mov	r3, r0
 8005510:	ee01 3a90 	vmov	s3, r3
 8005514:	ee01 4a10 	vmov	s2, r4
 8005518:	eef0 0a68 	vmov.f32	s1, s17
 800551c:	eeb0 0a48 	vmov.f32	s0, s16
 8005520:	4922      	ldr	r1, [pc, #136]	@ (80055ac <plotter_update_trajectories+0x150>)
 8005522:	4823      	ldr	r0, [pc, #140]	@ (80055b0 <plotter_update_trajectories+0x154>)
 8005524:	f7fd ff66 	bl	80033f4 <Trapezoidal_Evaluated>

		// Update reference signals
		revolute_pos = revEva.setposition;
 8005528:	4b20      	ldr	r3, [pc, #128]	@ (80055ac <plotter_update_trajectories+0x150>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a21      	ldr	r2, [pc, #132]	@ (80055b4 <plotter_update_trajectories+0x158>)
 800552e:	6013      	str	r3, [r2, #0]
		revolute_vel = revEva.setvelocity;
 8005530:	4b1e      	ldr	r3, [pc, #120]	@ (80055ac <plotter_update_trajectories+0x150>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	4a20      	ldr	r2, [pc, #128]	@ (80055b8 <plotter_update_trajectories+0x15c>)
 8005536:	6013      	str	r3, [r2, #0]
		revolute_accel = revEva.setacceleration;
 8005538:	4b1c      	ldr	r3, [pc, #112]	@ (80055ac <plotter_update_trajectories+0x150>)
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	4a1f      	ldr	r2, [pc, #124]	@ (80055bc <plotter_update_trajectories+0x160>)
 800553e:	6013      	str	r3, [r2, #0]

		// Check if trajectory is complete
		if (revEva.isFinised) {
 8005540:	4b1a      	ldr	r3, [pc, #104]	@ (80055ac <plotter_update_trajectories+0x150>)
 8005542:	7c1b      	ldrb	r3, [r3, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <plotter_update_trajectories+0xf8>
			revtrajectoryActive = false;
 8005548:	4b14      	ldr	r3, [pc, #80]	@ (800559c <plotter_update_trajectories+0x140>)
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
			revolute_state = RP_TARGET_REACH;
 800554e:	4b1c      	ldr	r3, [pc, #112]	@ (80055c0 <plotter_update_trajectories+0x164>)
 8005550:	2204      	movs	r2, #4
 8005552:	701a      	strb	r2, [r3, #0]
		}
	}

// If trajectories are active, apply motion control
	if (pristrajectoryActive || revtrajectoryActive) {
 8005554:	4b07      	ldr	r3, [pc, #28]	@ (8005574 <plotter_update_trajectories+0x118>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d103      	bne.n	8005564 <plotter_update_trajectories+0x108>
 800555c:	4b0f      	ldr	r3, [pc, #60]	@ (800559c <plotter_update_trajectories+0x140>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <plotter_update_trajectories+0x10c>
		plotter_move();
 8005564:	f7fe ff96 	bl	8004494 <plotter_move>
	}
}
 8005568:	bf00      	nop
 800556a:	46bd      	mov	sp, r7
 800556c:	ecbd 8b02 	vpop	{d8}
 8005570:	bd98      	pop	{r3, r4, r7, pc}
 8005572:	bf00      	nop
 8005574:	20000870 	.word	0x20000870
 8005578:	20000874 	.word	0x20000874
 800557c:	20000878 	.word	0x20000878
 8005580:	20000060 	.word	0x20000060
 8005584:	2000085c 	.word	0x2000085c
 8005588:	20000848 	.word	0x20000848
 800558c:	2000087c 	.word	0x2000087c
 8005590:	20000880 	.word	0x20000880
 8005594:	20000884 	.word	0x20000884
 8005598:	200002ee 	.word	0x200002ee
 800559c:	200008c8 	.word	0x200008c8
 80055a0:	200008cc 	.word	0x200008cc
 80055a4:	200008d0 	.word	0x200008d0
 80055a8:	20000000 	.word	0x20000000
 80055ac:	200008b4 	.word	0x200008b4
 80055b0:	200008a0 	.word	0x200008a0
 80055b4:	200008d4 	.word	0x200008d4
 80055b8:	200008d8 	.word	0x200008d8
 80055bc:	200008dc 	.word	0x200008dc
 80055c0:	200002ef 	.word	0x200002ef

080055c4 <getPointRegisterR>:

uint16_t getPointRegisterR(uint8_t point_index) {
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	4603      	mov	r3, r0
 80055cc:	71fb      	strb	r3, [r7, #7]
	switch (point_index) {
 80055ce:	79fb      	ldrb	r3, [r7, #7]
 80055d0:	2b09      	cmp	r3, #9
 80055d2:	d82b      	bhi.n	800562c <getPointRegisterR+0x68>
 80055d4:	a201      	add	r2, pc, #4	@ (adr r2, 80055dc <getPointRegisterR+0x18>)
 80055d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055da:	bf00      	nop
 80055dc:	08005605 	.word	0x08005605
 80055e0:	08005609 	.word	0x08005609
 80055e4:	0800560d 	.word	0x0800560d
 80055e8:	08005611 	.word	0x08005611
 80055ec:	08005615 	.word	0x08005615
 80055f0:	08005619 	.word	0x08005619
 80055f4:	0800561d 	.word	0x0800561d
 80055f8:	08005621 	.word	0x08005621
 80055fc:	08005625 	.word	0x08005625
 8005600:	08005629 	.word	0x08005629
	case 0:
		return Target_PosR_1;
 8005604:	2320      	movs	r3, #32
 8005606:	e012      	b.n	800562e <getPointRegisterR+0x6a>
	case 1:
		return Target_PosR_2;
 8005608:	2322      	movs	r3, #34	@ 0x22
 800560a:	e010      	b.n	800562e <getPointRegisterR+0x6a>
	case 2:
		return Target_PosR_3;
 800560c:	2324      	movs	r3, #36	@ 0x24
 800560e:	e00e      	b.n	800562e <getPointRegisterR+0x6a>
	case 3:
		return Target_PosR_4;
 8005610:	2326      	movs	r3, #38	@ 0x26
 8005612:	e00c      	b.n	800562e <getPointRegisterR+0x6a>
	case 4:
		return Target_PosR_5;
 8005614:	2328      	movs	r3, #40	@ 0x28
 8005616:	e00a      	b.n	800562e <getPointRegisterR+0x6a>
	case 5:
		return Target_PosR_6;
 8005618:	2330      	movs	r3, #48	@ 0x30
 800561a:	e008      	b.n	800562e <getPointRegisterR+0x6a>
	case 6:
		return Target_PosR_7;
 800561c:	2332      	movs	r3, #50	@ 0x32
 800561e:	e006      	b.n	800562e <getPointRegisterR+0x6a>
	case 7:
		return Target_PosR_8;
 8005620:	2334      	movs	r3, #52	@ 0x34
 8005622:	e004      	b.n	800562e <getPointRegisterR+0x6a>
	case 8:
		return Target_PosR_9;
 8005624:	2336      	movs	r3, #54	@ 0x36
 8005626:	e002      	b.n	800562e <getPointRegisterR+0x6a>
	case 9:
		return Target_PosR_10;
 8005628:	2338      	movs	r3, #56	@ 0x38
 800562a:	e000      	b.n	800562e <getPointRegisterR+0x6a>
	default:
		return Target_PosR_1;
 800562c:	2320      	movs	r3, #32
	}
}
 800562e:	4618      	mov	r0, r3
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop

0800563c <getPointRegisterT>:

uint16_t getPointRegisterT(uint8_t point_index) {
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	4603      	mov	r3, r0
 8005644:	71fb      	strb	r3, [r7, #7]
	switch (point_index) {
 8005646:	79fb      	ldrb	r3, [r7, #7]
 8005648:	2b09      	cmp	r3, #9
 800564a:	d82b      	bhi.n	80056a4 <getPointRegisterT+0x68>
 800564c:	a201      	add	r2, pc, #4	@ (adr r2, 8005654 <getPointRegisterT+0x18>)
 800564e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005652:	bf00      	nop
 8005654:	0800567d 	.word	0x0800567d
 8005658:	08005681 	.word	0x08005681
 800565c:	08005685 	.word	0x08005685
 8005660:	08005689 	.word	0x08005689
 8005664:	0800568d 	.word	0x0800568d
 8005668:	08005691 	.word	0x08005691
 800566c:	08005695 	.word	0x08005695
 8005670:	08005699 	.word	0x08005699
 8005674:	0800569d 	.word	0x0800569d
 8005678:	080056a1 	.word	0x080056a1
	case 0:
		return Target_PosT_1;
 800567c:	2321      	movs	r3, #33	@ 0x21
 800567e:	e012      	b.n	80056a6 <getPointRegisterT+0x6a>
	case 1:
		return Target_PosT_2;
 8005680:	2323      	movs	r3, #35	@ 0x23
 8005682:	e010      	b.n	80056a6 <getPointRegisterT+0x6a>
	case 2:
		return Target_PosT_3;
 8005684:	2325      	movs	r3, #37	@ 0x25
 8005686:	e00e      	b.n	80056a6 <getPointRegisterT+0x6a>
	case 3:
		return Target_PosT_4;
 8005688:	2327      	movs	r3, #39	@ 0x27
 800568a:	e00c      	b.n	80056a6 <getPointRegisterT+0x6a>
	case 4:
		return Target_PosT_5;
 800568c:	2329      	movs	r3, #41	@ 0x29
 800568e:	e00a      	b.n	80056a6 <getPointRegisterT+0x6a>
	case 5:
		return Target_PosT_6;
 8005690:	2331      	movs	r3, #49	@ 0x31
 8005692:	e008      	b.n	80056a6 <getPointRegisterT+0x6a>
	case 6:
		return Target_PosT_7;
 8005694:	2333      	movs	r3, #51	@ 0x33
 8005696:	e006      	b.n	80056a6 <getPointRegisterT+0x6a>
	case 7:
		return Target_PosT_8;
 8005698:	2335      	movs	r3, #53	@ 0x35
 800569a:	e004      	b.n	80056a6 <getPointRegisterT+0x6a>
	case 8:
		return Target_PosT_9;
 800569c:	2337      	movs	r3, #55	@ 0x37
 800569e:	e002      	b.n	80056a6 <getPointRegisterT+0x6a>
	case 9:
		return Target_PosT_10;
 80056a0:	2339      	movs	r3, #57	@ 0x39
 80056a2:	e000      	b.n	80056a6 <getPointRegisterT+0x6a>
	default:
		return Target_PosT_1;
 80056a4:	2321      	movs	r3, #33	@ 0x21
	}
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	370c      	adds	r7, #12
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop

080056b4 <getNumberOfSetPoints>:

uint8_t getNumberOfSetPoints() {
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
	switch (setpoint_state) {
 80056b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005730 <getNumberOfSetPoints+0x7c>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b0b      	cmp	r3, #11
 80056be:	d831      	bhi.n	8005724 <getNumberOfSetPoints+0x70>
 80056c0:	a201      	add	r2, pc, #4	@ (adr r2, 80056c8 <getNumberOfSetPoints+0x14>)
 80056c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c6:	bf00      	nop
 80056c8:	080056f9 	.word	0x080056f9
 80056cc:	080056fd 	.word	0x080056fd
 80056d0:	08005701 	.word	0x08005701
 80056d4:	08005705 	.word	0x08005705
 80056d8:	08005709 	.word	0x08005709
 80056dc:	0800570d 	.word	0x0800570d
 80056e0:	08005711 	.word	0x08005711
 80056e4:	08005715 	.word	0x08005715
 80056e8:	08005719 	.word	0x08005719
 80056ec:	0800571d 	.word	0x0800571d
 80056f0:	08005721 	.word	0x08005721
 80056f4:	080056f9 	.word	0x080056f9
	case NO_POINT_SET:
	case POINT_IDLE:
		return 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	e014      	b.n	8005726 <getNumberOfSetPoints+0x72>
	case POINT_1_SET:
		return 1;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e012      	b.n	8005726 <getNumberOfSetPoints+0x72>
	case POINT_2_SET:
		return 2;
 8005700:	2302      	movs	r3, #2
 8005702:	e010      	b.n	8005726 <getNumberOfSetPoints+0x72>
	case POINT_3_SET:
		return 3;
 8005704:	2303      	movs	r3, #3
 8005706:	e00e      	b.n	8005726 <getNumberOfSetPoints+0x72>
	case POINT_4_SET:
		return 4;
 8005708:	2304      	movs	r3, #4
 800570a:	e00c      	b.n	8005726 <getNumberOfSetPoints+0x72>
	case POINT_5_SET:
		return 5;
 800570c:	2305      	movs	r3, #5
 800570e:	e00a      	b.n	8005726 <getNumberOfSetPoints+0x72>
	case POINT_6_SET:
		return 6;
 8005710:	2306      	movs	r3, #6
 8005712:	e008      	b.n	8005726 <getNumberOfSetPoints+0x72>
	case POINT_7_SET:
		return 7;
 8005714:	2307      	movs	r3, #7
 8005716:	e006      	b.n	8005726 <getNumberOfSetPoints+0x72>
	case POINT_8_SET:
		return 8;
 8005718:	2308      	movs	r3, #8
 800571a:	e004      	b.n	8005726 <getNumberOfSetPoints+0x72>
	case POINT_9_SET:
		return 9;
 800571c:	2309      	movs	r3, #9
 800571e:	e002      	b.n	8005726 <getNumberOfSetPoints+0x72>
	case POINT_10_SET:
		return 10;
 8005720:	230a      	movs	r3, #10
 8005722:	e000      	b.n	8005726 <getNumberOfSetPoints+0x72>
	default:
		return 0;
 8005724:	2300      	movs	r3, #0
	}
}
 8005726:	4618      	mov	r0, r3
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	200002ea 	.word	0x200002ea

08005734 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EMER_Pin) {
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	2b10      	cmp	r3, #16
 8005742:	d105      	bne.n	8005750 <HAL_GPIO_EXTI_Callback+0x1c>
		rs_current_state = RS_EMERGENCY_TRIGGED;
 8005744:	4b05      	ldr	r3, [pc, #20]	@ (800575c <HAL_GPIO_EXTI_Callback+0x28>)
 8005746:	2205      	movs	r2, #5
 8005748:	701a      	strb	r2, [r3, #0]
		emer_state = PUSHED;
 800574a:	4b05      	ldr	r3, [pc, #20]	@ (8005760 <HAL_GPIO_EXTI_Callback+0x2c>)
 800574c:	2200      	movs	r2, #0
 800574e:	701a      	strb	r2, [r3, #0]
	}
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	200002e8 	.word	0x200002e8
 8005760:	200002f0 	.word	0x200002f0

08005764 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {

	}
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <HAL_TIM_PeriodElapsedCallback>:
//
//		MDXX_set_range(&revolute_motor, 2000, rev_cmd_ux);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a86      	ldr	r2, [pc, #536]	@ (800599c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8005784:	4293      	cmp	r3, r2
 8005786:	f040 81c0 	bne.w	8005b0a <HAL_TIM_PeriodElapsedCallback+0x392>
		Modbus_Protocal_Worker();
 800578a:	f7fc f91d 	bl	80019c8 <Modbus_Protocal_Worker>

		QEI_get_diff_count(&prismatic_encoder);
 800578e:	4884      	ldr	r0, [pc, #528]	@ (80059a0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005790:	f7fd fb1e 	bl	8002dd0 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8005794:	4882      	ldr	r0, [pc, #520]	@ (80059a0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005796:	f7fd fc07 	bl	8002fa8 <QEI_compute_data>

		pris_vin = pris_cmd_ux * ZGX45RGG_400RPM_Constant.V_max
 800579a:	4b82      	ldr	r3, [pc, #520]	@ (80059a4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fa fe9e 	bl	80004e0 <__aeabi_f2d>
 80057a4:	4b80      	ldr	r3, [pc, #512]	@ (80059a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80057a6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80057aa:	f7fa fef1 	bl	8000590 <__aeabi_dmul>
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	4610      	mov	r0, r2
 80057b4:	4619      	mov	r1, r3
				/ ZGX45RGG_400RPM_Constant.U_max;
 80057b6:	4b7c      	ldr	r3, [pc, #496]	@ (80059a8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80057b8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80057bc:	f7fb f812 	bl	80007e4 <__aeabi_ddiv>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4610      	mov	r0, r2
 80057c6:	4619      	mov	r1, r3
 80057c8:	f7fb f9c4 	bl	8000b54 <__aeabi_d2f>
 80057cc:	4603      	mov	r3, r0
		pris_vin = pris_cmd_ux * ZGX45RGG_400RPM_Constant.V_max
 80057ce:	4a77      	ldr	r2, [pc, #476]	@ (80059ac <HAL_TIM_PeriodElapsedCallback+0x234>)
 80057d0:	6013      	str	r3, [r2, #0]

		pris_kal_filt = SteadyStateKalmanFilter(&prismatic_kalman, pris_vin,
 80057d2:	4b76      	ldr	r3, [pc, #472]	@ (80059ac <HAL_TIM_PeriodElapsedCallback+0x234>)
 80057d4:	edd3 7a00 	vldr	s15, [r3]
 80057d8:	4b71      	ldr	r3, [pc, #452]	@ (80059a0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80057da:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80057de:	eef0 0a47 	vmov.f32	s1, s14
 80057e2:	eeb0 0a67 	vmov.f32	s0, s15
 80057e6:	4872      	ldr	r0, [pc, #456]	@ (80059b0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80057e8:	f7fe f95e 	bl	8003aa8 <SteadyStateKalmanFilter>
 80057ec:	ee10 3a10 	vmov	r3, s0
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fa fe75 	bl	80004e0 <__aeabi_f2d>
				prismatic_encoder.rads)
				* Disturbance_Constant.prismatic_pulley_radius;
 80057f6:	4b6f      	ldr	r3, [pc, #444]	@ (80059b4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80057f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057fc:	f7fa fec8 	bl	8000590 <__aeabi_dmul>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4610      	mov	r0, r2
 8005806:	4619      	mov	r1, r3
 8005808:	f7fb f9a4 	bl	8000b54 <__aeabi_d2f>
 800580c:	4603      	mov	r3, r0
		pris_kal_filt = SteadyStateKalmanFilter(&prismatic_kalman, pris_vin,
 800580e:	4a6a      	ldr	r2, [pc, #424]	@ (80059b8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005810:	6013      	str	r3, [r2, #0]

		QEI_get_diff_count(&revolute_encoder);
 8005812:	486a      	ldr	r0, [pc, #424]	@ (80059bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005814:	f7fd fadc 	bl	8002dd0 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8005818:	4868      	ldr	r0, [pc, #416]	@ (80059bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 800581a:	f7fd fbc5 	bl	8002fa8 <QEI_compute_data>

		rev_vin = rev_cmd_ux * ZGX45RGG_150RPM_Constant.V_max
 800581e:	4b68      	ldr	r3, [pc, #416]	@ (80059c0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4618      	mov	r0, r3
 8005824:	f7fa fe5c 	bl	80004e0 <__aeabi_f2d>
 8005828:	4b66      	ldr	r3, [pc, #408]	@ (80059c4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800582a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800582e:	f7fa feaf 	bl	8000590 <__aeabi_dmul>
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	4610      	mov	r0, r2
 8005838:	4619      	mov	r1, r3
				/ ZGX45RGG_150RPM_Constant.U_max;
 800583a:	4b62      	ldr	r3, [pc, #392]	@ (80059c4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800583c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005840:	f7fa ffd0 	bl	80007e4 <__aeabi_ddiv>
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4610      	mov	r0, r2
 800584a:	4619      	mov	r1, r3
 800584c:	f7fb f982 	bl	8000b54 <__aeabi_d2f>
 8005850:	4603      	mov	r3, r0
		rev_vin = rev_cmd_ux * ZGX45RGG_150RPM_Constant.V_max
 8005852:	4a5d      	ldr	r2, [pc, #372]	@ (80059c8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8005854:	6013      	str	r3, [r2, #0]

		rev_kal_filt = SteadyStateKalmanFilter(&revolute_kalman, rev_vin,
 8005856:	4b5c      	ldr	r3, [pc, #368]	@ (80059c8 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8005858:	edd3 7a00 	vldr	s15, [r3]
 800585c:	4b57      	ldr	r3, [pc, #348]	@ (80059bc <HAL_TIM_PeriodElapsedCallback+0x244>)
 800585e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8005862:	eef0 0a47 	vmov.f32	s1, s14
 8005866:	eeb0 0a67 	vmov.f32	s0, s15
 800586a:	4858      	ldr	r0, [pc, #352]	@ (80059cc <HAL_TIM_PeriodElapsedCallback+0x254>)
 800586c:	f7fe f91c 	bl	8003aa8 <SteadyStateKalmanFilter>
 8005870:	eef0 7a40 	vmov.f32	s15, s0
 8005874:	4b56      	ldr	r3, [pc, #344]	@ (80059d0 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8005876:	edc3 7a00 	vstr	s15, [r3]
				revolute_encoder.rads);

		// Heartbeat and pen commands
		registerFrame[Heartbeat_Protocol].U16 = 22881;
 800587a:	4b56      	ldr	r3, [pc, #344]	@ (80059d4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800587c:	f645 1261 	movw	r2, #22881	@ 0x5961
 8005880:	801a      	strh	r2, [r3, #0]

		if (registerFrame[Servo_UP].U16 == 1) {
 8005882:	4b54      	ldr	r3, [pc, #336]	@ (80059d4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8005884:	891b      	ldrh	r3, [r3, #8]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d102      	bne.n	8005890 <HAL_TIM_PeriodElapsedCallback+0x118>
			plotter_pen_up();
 800588a:	f000 fcc7 	bl	800621c <plotter_pen_up>
 800588e:	e005      	b.n	800589c <HAL_TIM_PeriodElapsedCallback+0x124>
		} else if (registerFrame[Servo_Down].U16 == 1) {
 8005890:	4b50      	ldr	r3, [pc, #320]	@ (80059d4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8005892:	895b      	ldrh	r3, [r3, #10]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_TIM_PeriodElapsedCallback+0x124>
			plotter_pen_down();
 8005898:	f000 fcd0 	bl	800623c <plotter_pen_down>
		}

		// Update limit switch status
		if (servo_state == PEN_UP) {
 800589c:	4b4e      	ldr	r3, [pc, #312]	@ (80059d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d103      	bne.n	80058ac <HAL_TIM_PeriodElapsedCallback+0x134>
			registerFrame[LimitSwitch_Status].U16 = 1;
 80058a4:	4b4b      	ldr	r3, [pc, #300]	@ (80059d4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80058a6:	2201      	movs	r2, #1
 80058a8:	80da      	strh	r2, [r3, #6]
 80058aa:	e006      	b.n	80058ba <HAL_TIM_PeriodElapsedCallback+0x142>
		} else if (servo_state == PEN_DOWN) {
 80058ac:	4b4a      	ldr	r3, [pc, #296]	@ (80059d8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d102      	bne.n	80058ba <HAL_TIM_PeriodElapsedCallback+0x142>
			registerFrame[LimitSwitch_Status].U16 = 2;
 80058b4:	4b47      	ldr	r3, [pc, #284]	@ (80059d4 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80058b6:	2202      	movs	r2, #2
 80058b8:	80da      	strh	r2, [r3, #6]
		}

		if (pristrajectoryActive || revtrajectoryActive) {
 80058ba:	4b48      	ldr	r3, [pc, #288]	@ (80059dc <HAL_TIM_PeriodElapsedCallback+0x264>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d103      	bne.n	80058ca <HAL_TIM_PeriodElapsedCallback+0x152>
 80058c2:	4b47      	ldr	r3, [pc, #284]	@ (80059e0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <HAL_TIM_PeriodElapsedCallback+0x156>
			plotter_update_trajectories();
 80058ca:	f7ff fdc7 	bl	800545c <plotter_update_trajectories>
		}

		plotter_handle_state_transition();
 80058ce:	f7ff f885 	bl	80049dc <plotter_handle_state_transition>
//			pristrajectoryActive = false;
//			revtrajectoryActive = false;
//			rs_current_state = RS_EMERGENCY_TRIGGED;
//		}

		switch (rs_current_state) {
 80058d2:	4b44      	ldr	r3, [pc, #272]	@ (80059e4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	2b04      	cmp	r3, #4
 80058da:	d850      	bhi.n	800597e <HAL_TIM_PeriodElapsedCallback+0x206>
 80058dc:	a201      	add	r2, pc, #4	@ (adr r2, 80058e4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80058de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e2:	bf00      	nop
 80058e4:	080058f9 	.word	0x080058f9
 80058e8:	080058ff 	.word	0x080058ff
 80058ec:	0800591d 	.word	0x0800591d
 80058f0:	08005973 	.word	0x08005973
 80058f4:	08005979 	.word	0x08005979
		case RS_JOG_MODE:
			plotter_process_jog_mode();
 80058f8:	f7ff f96a 	bl	8004bd0 <plotter_process_jog_mode>
			b1[1]==b1[0];
			b2[1]==b2[0];
			b3[1]==b3[0];
			b4[1]==b4[0];
			break;
 80058fc:	e083      	b.n	8005a06 <HAL_TIM_PeriodElapsedCallback+0x28e>

		case RS_POINT_MODE:
			MDXX_set_range(&prismatic_motor, 2000, 0);
 80058fe:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 80059e8 <HAL_TIM_PeriodElapsedCallback+0x270>
 8005902:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 80059ec <HAL_TIM_PeriodElapsedCallback+0x274>
 8005906:	483a      	ldr	r0, [pc, #232]	@ (80059f0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8005908:	f7fb fcd2 	bl	80012b0 <MDXX_set_range>
			MDXX_set_range(&revolute_motor, 2000, 0);
 800590c:	eddf 0a36 	vldr	s1, [pc, #216]	@ 80059e8 <HAL_TIM_PeriodElapsedCallback+0x270>
 8005910:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 80059ec <HAL_TIM_PeriodElapsedCallback+0x274>
 8005914:	4837      	ldr	r0, [pc, #220]	@ (80059f4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8005916:	f7fb fccb 	bl	80012b0 <MDXX_set_range>
			break;
 800591a:	e074      	b.n	8005a06 <HAL_TIM_PeriodElapsedCallback+0x28e>

		case RS_MOVING:
			static bool point_initialized = false;
			if (!point_initialized) {
 800591c:	4b36      	ldr	r3, [pc, #216]	@ (80059f8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	f083 0301 	eor.w	r3, r3, #1
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00e      	beq.n	8005948 <HAL_TIM_PeriodElapsedCallback+0x1d0>
				plotter_process_moving_mode(pris_target_p, rev_target_p);
 800592a:	4b34      	ldr	r3, [pc, #208]	@ (80059fc <HAL_TIM_PeriodElapsedCallback+0x284>)
 800592c:	edd3 7a00 	vldr	s15, [r3]
 8005930:	4b33      	ldr	r3, [pc, #204]	@ (8005a00 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8005932:	ed93 7a00 	vldr	s14, [r3]
 8005936:	eef0 0a47 	vmov.f32	s1, s14
 800593a:	eeb0 0a67 	vmov.f32	s0, s15
 800593e:	f7ff fbc3 	bl	80050c8 <plotter_process_moving_mode>
				point_initialized = true;
 8005942:	4b2d      	ldr	r3, [pc, #180]	@ (80059f8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8005944:	2201      	movs	r2, #1
 8005946:	701a      	strb	r2, [r3, #0]
			}

			if (!pristrajectoryActive && !revtrajectoryActive) {
 8005948:	4b24      	ldr	r3, [pc, #144]	@ (80059dc <HAL_TIM_PeriodElapsedCallback+0x264>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	f083 0301 	eor.w	r3, r3, #1
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d056      	beq.n	8005a04 <HAL_TIM_PeriodElapsedCallback+0x28c>
 8005956:	4b22      	ldr	r3, [pc, #136]	@ (80059e0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	f083 0301 	eor.w	r3, r3, #1
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d04f      	beq.n	8005a04 <HAL_TIM_PeriodElapsedCallback+0x28c>
				point_initialized = false;
 8005964:	4b24      	ldr	r3, [pc, #144]	@ (80059f8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]
				rs_current_state = RS_IDLE;
 800596a:	4b1e      	ldr	r3, [pc, #120]	@ (80059e4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800596c:	2200      	movs	r2, #0
 800596e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005970:	e048      	b.n	8005a04 <HAL_TIM_PeriodElapsedCallback+0x28c>

		case RS_RETURN_TO_HOME:
			plotter_process_return_to_home();
 8005972:	f7ff fc19 	bl	80051a8 <plotter_process_return_to_home>
			break;
 8005976:	e046      	b.n	8005a06 <HAL_TIM_PeriodElapsedCallback+0x28e>

		case RS_EMERGENCY_TRIGGED:
			plotter_process_emergency();
 8005978:	f7ff fcb4 	bl	80052e4 <plotter_process_emergency>
			break;
 800597c:	e043      	b.n	8005a06 <HAL_TIM_PeriodElapsedCallback+0x28e>

		case RS_IDLE:
		default:
			MDXX_set_range(&prismatic_motor, 2000, 0);
 800597e:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 80059e8 <HAL_TIM_PeriodElapsedCallback+0x270>
 8005982:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 80059ec <HAL_TIM_PeriodElapsedCallback+0x274>
 8005986:	481a      	ldr	r0, [pc, #104]	@ (80059f0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8005988:	f7fb fc92 	bl	80012b0 <MDXX_set_range>
			MDXX_set_range(&revolute_motor, 2000, 0);
 800598c:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80059e8 <HAL_TIM_PeriodElapsedCallback+0x270>
 8005990:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 80059ec <HAL_TIM_PeriodElapsedCallback+0x274>
 8005994:	4817      	ldr	r0, [pc, #92]	@ (80059f4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8005996:	f7fb fc8b 	bl	80012b0 <MDXX_set_range>
			break;
 800599a:	e034      	b.n	8005a06 <HAL_TIM_PeriodElapsedCallback+0x28e>
 800599c:	20001c3c 	.word	0x20001c3c
 80059a0:	200009b4 	.word	0x200009b4
 80059a4:	20000898 	.word	0x20000898
 80059a8:	20000060 	.word	0x20000060
 80059ac:	20000894 	.word	0x20000894
 80059b0:	20000d74 	.word	0x20000d74
 80059b4:	200000c0 	.word	0x200000c0
 80059b8:	20000890 	.word	0x20000890
 80059bc:	20000a10 	.word	0x20000a10
 80059c0:	200008f0 	.word	0x200008f0
 80059c4:	20000000 	.word	0x20000000
 80059c8:	200008ec 	.word	0x200008ec
 80059cc:	200010f4 	.word	0x200010f4
 80059d0:	200008e8 	.word	0x200008e8
 80059d4:	2000199c 	.word	0x2000199c
 80059d8:	2000091a 	.word	0x2000091a
 80059dc:	20000870 	.word	0x20000870
 80059e0:	200008c8 	.word	0x200008c8
 80059e4:	200002e8 	.word	0x200002e8
 80059e8:	00000000 	.word	0x00000000
 80059ec:	44fa0000 	.word	0x44fa0000
 80059f0:	2000091c 	.word	0x2000091c
 80059f4:	20000968 	.word	0x20000968
 80059f8:	20000919 	.word	0x20000919
 80059fc:	20000878 	.word	0x20000878
 8005a00:	200008d0 	.word	0x200008d0
			break;
 8005a04:	bf00      	nop
		}

		registerFrame[R_Axis_Actual_Position].U16 = prismatic_encoder.mm * 10.0;
 8005a06:	4b43      	ldr	r3, [pc, #268]	@ (8005b14 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8005a08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fa fd68 	bl	80004e0 <__aeabi_f2d>
 8005a10:	f04f 0200 	mov.w	r2, #0
 8005a14:	4b40      	ldr	r3, [pc, #256]	@ (8005b18 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8005a16:	f7fa fdbb 	bl	8000590 <__aeabi_dmul>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4610      	mov	r0, r2
 8005a20:	4619      	mov	r1, r3
 8005a22:	f7fb f877 	bl	8000b14 <__aeabi_d2uiz>
 8005a26:	4603      	mov	r3, r0
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	4b3c      	ldr	r3, [pc, #240]	@ (8005b1c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8005a2c:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[Theta_Axis_Actual_Position].U16 = revolute_encoder.rads
 8005a2e:	4b3c      	ldr	r3, [pc, #240]	@ (8005b20 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8005a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fa fd54 	bl	80004e0 <__aeabi_f2d>
				* 10.0;
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	4b36      	ldr	r3, [pc, #216]	@ (8005b18 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8005a3e:	f7fa fda7 	bl	8000590 <__aeabi_dmul>
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
		registerFrame[Theta_Axis_Actual_Position].U16 = revolute_encoder.rads
 8005a46:	4610      	mov	r0, r2
 8005a48:	4619      	mov	r1, r3
 8005a4a:	f7fb f863 	bl	8000b14 <__aeabi_d2uiz>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	4b32      	ldr	r3, [pc, #200]	@ (8005b1c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8005a54:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[R_Axis_Actual_Speed].U16 = pris_kal_filt * 10.0;
 8005a56:	4b33      	ldr	r3, [pc, #204]	@ (8005b24 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fa fd40 	bl	80004e0 <__aeabi_f2d>
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	4b2c      	ldr	r3, [pc, #176]	@ (8005b18 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8005a66:	f7fa fd93 	bl	8000590 <__aeabi_dmul>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4610      	mov	r0, r2
 8005a70:	4619      	mov	r1, r3
 8005a72:	f7fb f84f 	bl	8000b14 <__aeabi_d2uiz>
 8005a76:	4603      	mov	r3, r0
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	4b28      	ldr	r3, [pc, #160]	@ (8005b1c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8005a7c:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[Theta_Axis_Actual_Speed].U16 = rev_kal_filt * 10.0;
 8005a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8005b28 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fa fd2c 	bl	80004e0 <__aeabi_f2d>
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	4b22      	ldr	r3, [pc, #136]	@ (8005b18 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8005a8e:	f7fa fd7f 	bl	8000590 <__aeabi_dmul>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	4610      	mov	r0, r2
 8005a98:	4619      	mov	r1, r3
 8005a9a:	f7fb f83b 	bl	8000b14 <__aeabi_d2uiz>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8005b1c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8005aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
		registerFrame[R_Axis_Acceleration].U16 = prismatic_encoder.mmpss * 10.0;
 8005aa6:	4b1b      	ldr	r3, [pc, #108]	@ (8005b14 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8005aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fa fd18 	bl	80004e0 <__aeabi_f2d>
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	4b18      	ldr	r3, [pc, #96]	@ (8005b18 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8005ab6:	f7fa fd6b 	bl	8000590 <__aeabi_dmul>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4610      	mov	r0, r2
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	f7fb f827 	bl	8000b14 <__aeabi_d2uiz>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	4b14      	ldr	r3, [pc, #80]	@ (8005b1c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8005acc:	855a      	strh	r2, [r3, #42]	@ 0x2a
		registerFrame[Theta_Axis_Acceleration].U16 = revolute_encoder.radpss
 8005ace:	4b14      	ldr	r3, [pc, #80]	@ (8005b20 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8005ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fa fd04 	bl	80004e0 <__aeabi_f2d>
				* 10.0;
 8005ad8:	f04f 0200 	mov.w	r2, #0
 8005adc:	4b0e      	ldr	r3, [pc, #56]	@ (8005b18 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8005ade:	f7fa fd57 	bl	8000590 <__aeabi_dmul>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
		registerFrame[Theta_Axis_Acceleration].U16 = revolute_encoder.radpss
 8005ae6:	4610      	mov	r0, r2
 8005ae8:	4619      	mov	r1, r3
 8005aea:	f7fb f813 	bl	8000b14 <__aeabi_d2uiz>
 8005aee:	4603      	mov	r3, r0
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	4b0a      	ldr	r3, [pc, #40]	@ (8005b1c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8005af4:	859a      	strh	r2, [r3, #44]	@ 0x2c

		if (rs_current_state == RS_IDLE) {
 8005af6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b2c <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d105      	bne.n	8005b0a <HAL_TIM_PeriodElapsedCallback+0x392>
			// If move is done, reset status registers
			registerFrame[BaseSystem_Status].U16 = 0;
 8005afe:	4b07      	ldr	r3, [pc, #28]	@ (8005b1c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	805a      	strh	r2, [r3, #2]
			registerFrame[R_Theta_Status].U16 = 0;
 8005b04:	4b05      	ldr	r3, [pc, #20]	@ (8005b1c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	841a      	strh	r2, [r3, #32]
		}
	}
}
 8005b0a:	bf00      	nop
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	200009b4 	.word	0x200009b4
 8005b18:	40240000 	.word	0x40240000
 8005b1c:	2000199c 	.word	0x2000199c
 8005b20:	20000a10 	.word	0x20000a10
 8005b24:	20000890 	.word	0x20000890
 8005b28:	200008e8 	.word	0x200008e8
 8005b2c:	200002e8 	.word	0x200002e8

08005b30 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005b34:	b672      	cpsid	i
}
 8005b36:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005b38:	bf00      	nop
 8005b3a:	e7fd      	b.n	8005b38 <Error_Handler+0x8>

08005b3c <plotter_begin>:
int prox, emer, up_photo, low_photo, up_lim, low_lim;
int b1[2];
int b2[2];
int b3[2];
int b4[2];
void plotter_begin() {
 8005b3c:	b590      	push	{r4, r7, lr}
 8005b3e:	ed2d 8b02 	vpush	{d8}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8005b46:	2100      	movs	r1, #0
 8005b48:	48c8      	ldr	r0, [pc, #800]	@ (8005e6c <plotter_begin+0x330>)
 8005b4a:	f000 fb87 	bl	800625c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8005b4e:	eddf 2ac8 	vldr	s5, [pc, #800]	@ 8005e70 <plotter_begin+0x334>
 8005b52:	ed9f 2ac8 	vldr	s4, [pc, #800]	@ 8005e74 <plotter_begin+0x338>
 8005b56:	eddf 1ac8 	vldr	s3, [pc, #800]	@ 8005e78 <plotter_begin+0x33c>
 8005b5a:	ed9f 1ac7 	vldr	s2, [pc, #796]	@ 8005e78 <plotter_begin+0x33c>
 8005b5e:	eddf 0ac7 	vldr	s1, [pc, #796]	@ 8005e7c <plotter_begin+0x340>
 8005b62:	ed9f 0ac3 	vldr	s0, [pc, #780]	@ 8005e70 <plotter_begin+0x334>
 8005b66:	48c1      	ldr	r0, [pc, #772]	@ (8005e6c <plotter_begin+0x330>)
 8005b68:	f000 fbd6 	bl	8006318 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8005b6c:	2102      	movs	r1, #2
 8005b6e:	48c4      	ldr	r0, [pc, #784]	@ (8005e80 <plotter_begin+0x344>)
 8005b70:	f000 fb74 	bl	800625c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8005b74:	ed9f 3abe 	vldr	s6, [pc, #760]	@ 8005e70 <plotter_begin+0x334>
 8005b78:	eddf 2abe 	vldr	s5, [pc, #760]	@ 8005e74 <plotter_begin+0x338>
 8005b7c:	ed9f 2abe 	vldr	s4, [pc, #760]	@ 8005e78 <plotter_begin+0x33c>
 8005b80:	eddf 1abd 	vldr	s3, [pc, #756]	@ 8005e78 <plotter_begin+0x33c>
 8005b84:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005b88:	eddf 0abc 	vldr	s1, [pc, #752]	@ 8005e7c <plotter_begin+0x340>
 8005b8c:	ed9f 0ab8 	vldr	s0, [pc, #736]	@ 8005e70 <plotter_begin+0x334>
 8005b90:	48bb      	ldr	r0, [pc, #748]	@ (8005e80 <plotter_begin+0x344>)
 8005b92:	f000 fbec 	bl	800636e <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8005b96:	2100      	movs	r1, #0
 8005b98:	48ba      	ldr	r0, [pc, #744]	@ (8005e84 <plotter_begin+0x348>)
 8005b9a:	f000 fb5f 	bl	800625c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8005b9e:	eef3 2a09 	vmov.f32	s5, #57	@ 0x41c80000  25.0
 8005ba2:	eebb 2a09 	vmov.f32	s4, #185	@ 0xc1c80000 -25.0
 8005ba6:	eddf 1ab4 	vldr	s3, [pc, #720]	@ 8005e78 <plotter_begin+0x33c>
 8005baa:	ed9f 1ab3 	vldr	s2, [pc, #716]	@ 8005e78 <plotter_begin+0x33c>
 8005bae:	eddf 0ab3 	vldr	s1, [pc, #716]	@ 8005e7c <plotter_begin+0x340>
 8005bb2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005bb6:	48b3      	ldr	r0, [pc, #716]	@ (8005e84 <plotter_begin+0x348>)
 8005bb8:	f000 fbae 	bl	8006318 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8005bbc:	2102      	movs	r1, #2
 8005bbe:	48b2      	ldr	r0, [pc, #712]	@ (8005e88 <plotter_begin+0x34c>)
 8005bc0:	f000 fb4c 	bl	800625c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8005bc4:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8005bc8:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8005bcc:	ed9f 2aaa 	vldr	s4, [pc, #680]	@ 8005e78 <plotter_begin+0x33c>
 8005bd0:	eddf 1aa9 	vldr	s3, [pc, #676]	@ 8005e78 <plotter_begin+0x33c>
 8005bd4:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005bd8:	eddf 0aa8 	vldr	s1, [pc, #672]	@ 8005e7c <plotter_begin+0x340>
 8005bdc:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005be0:	48a9      	ldr	r0, [pc, #676]	@ (8005e88 <plotter_begin+0x34c>)
 8005be2:	f000 fbc4 	bl	800636e <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8005be6:	2100      	movs	r1, #0
 8005be8:	48a8      	ldr	r0, [pc, #672]	@ (8005e8c <plotter_begin+0x350>)
 8005bea:	f000 fb37 	bl	800625c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005bee:	4ba8      	ldr	r3, [pc, #672]	@ (8005e90 <plotter_begin+0x354>)
 8005bf0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005bf4:	4610      	mov	r0, r2
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	f7fa ffac 	bl	8000b54 <__aeabi_d2f>
 8005bfc:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8005bfe:	4ba4      	ldr	r3, [pc, #656]	@ (8005e90 <plotter_begin+0x354>)
 8005c00:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005c04:	4610      	mov	r0, r2
 8005c06:	4619      	mov	r1, r3
 8005c08:	f7fa ffa4 	bl	8000b54 <__aeabi_d2f>
 8005c0c:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8005c16:	4b9e      	ldr	r3, [pc, #632]	@ (8005e90 <plotter_begin+0x354>)
 8005c18:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	4619      	mov	r1, r3
 8005c20:	f7fa ff98 	bl	8000b54 <__aeabi_d2f>
 8005c24:	4603      	mov	r3, r0
 8005c26:	ee02 3a90 	vmov	s5, r3
 8005c2a:	eeb0 2a48 	vmov.f32	s4, s16
 8005c2e:	eddf 1a92 	vldr	s3, [pc, #584]	@ 8005e78 <plotter_begin+0x33c>
 8005c32:	ed9f 1a91 	vldr	s2, [pc, #580]	@ 8005e78 <plotter_begin+0x33c>
 8005c36:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8005e7c <plotter_begin+0x340>
 8005c3a:	ee00 4a10 	vmov	s0, r4
 8005c3e:	4893      	ldr	r0, [pc, #588]	@ (8005e8c <plotter_begin+0x350>)
 8005c40:	f000 fb6a 	bl	8006318 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8005c44:	2102      	movs	r1, #2
 8005c46:	4893      	ldr	r0, [pc, #588]	@ (8005e94 <plotter_begin+0x358>)
 8005c48:	f000 fb08 	bl	800625c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005c4c:	4b90      	ldr	r3, [pc, #576]	@ (8005e90 <plotter_begin+0x354>)
 8005c4e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005c52:	4610      	mov	r0, r2
 8005c54:	4619      	mov	r1, r3
 8005c56:	f7fa ff7d 	bl	8000b54 <__aeabi_d2f>
 8005c5a:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8005c5c:	4b8c      	ldr	r3, [pc, #560]	@ (8005e90 <plotter_begin+0x354>)
 8005c5e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005c62:	4610      	mov	r0, r2
 8005c64:	4619      	mov	r1, r3
 8005c66:	f7fa ff75 	bl	8000b54 <__aeabi_d2f>
 8005c6a:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005c6c:	ee07 3a90 	vmov	s15, r3
 8005c70:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8005c74:	4b86      	ldr	r3, [pc, #536]	@ (8005e90 <plotter_begin+0x354>)
 8005c76:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	f7fa ff69 	bl	8000b54 <__aeabi_d2f>
 8005c82:	4603      	mov	r3, r0
 8005c84:	ee03 3a10 	vmov	s6, r3
 8005c88:	eef0 2a48 	vmov.f32	s5, s16
 8005c8c:	ed9f 2a7a 	vldr	s4, [pc, #488]	@ 8005e78 <plotter_begin+0x33c>
 8005c90:	eddf 1a79 	vldr	s3, [pc, #484]	@ 8005e78 <plotter_begin+0x33c>
 8005c94:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005c98:	eddf 0a78 	vldr	s1, [pc, #480]	@ 8005e7c <plotter_begin+0x340>
 8005c9c:	ee00 4a10 	vmov	s0, r4
 8005ca0:	487c      	ldr	r0, [pc, #496]	@ (8005e94 <plotter_begin+0x358>)
 8005ca2:	f000 fb64 	bl	800636e <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	487b      	ldr	r0, [pc, #492]	@ (8005e98 <plotter_begin+0x35c>)
 8005caa:	f000 fad7 	bl	800625c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005cae:	4b7b      	ldr	r3, [pc, #492]	@ (8005e9c <plotter_begin+0x360>)
 8005cb0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	f7fa ff4c 	bl	8000b54 <__aeabi_d2f>
 8005cbc:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8005cbe:	4b77      	ldr	r3, [pc, #476]	@ (8005e9c <plotter_begin+0x360>)
 8005cc0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	f7fa ff44 	bl	8000b54 <__aeabi_d2f>
 8005ccc:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005cce:	ee07 3a90 	vmov	s15, r3
 8005cd2:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 8005cd6:	4b71      	ldr	r3, [pc, #452]	@ (8005e9c <plotter_begin+0x360>)
 8005cd8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005cdc:	4610      	mov	r0, r2
 8005cde:	4619      	mov	r1, r3
 8005ce0:	f7fa ff38 	bl	8000b54 <__aeabi_d2f>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	ee02 3a90 	vmov	s5, r3
 8005cea:	eeb0 2a48 	vmov.f32	s4, s16
 8005cee:	eddf 1a62 	vldr	s3, [pc, #392]	@ 8005e78 <plotter_begin+0x33c>
 8005cf2:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8005e78 <plotter_begin+0x33c>
 8005cf6:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8005e7c <plotter_begin+0x340>
 8005cfa:	ee00 4a10 	vmov	s0, r4
 8005cfe:	4866      	ldr	r0, [pc, #408]	@ (8005e98 <plotter_begin+0x35c>)
 8005d00:	f000 fb0a 	bl	8006318 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 8005d04:	2102      	movs	r1, #2
 8005d06:	4866      	ldr	r0, [pc, #408]	@ (8005ea0 <plotter_begin+0x364>)
 8005d08:	f000 faa8 	bl	800625c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005d0c:	4b63      	ldr	r3, [pc, #396]	@ (8005e9c <plotter_begin+0x360>)
 8005d0e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005d12:	4610      	mov	r0, r2
 8005d14:	4619      	mov	r1, r3
 8005d16:	f7fa ff1d 	bl	8000b54 <__aeabi_d2f>
 8005d1a:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8005d1c:	4b5f      	ldr	r3, [pc, #380]	@ (8005e9c <plotter_begin+0x360>)
 8005d1e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8005d22:	4610      	mov	r0, r2
 8005d24:	4619      	mov	r1, r3
 8005d26:	f7fa ff15 	bl	8000b54 <__aeabi_d2f>
 8005d2a:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005d2c:	ee07 3a90 	vmov	s15, r3
 8005d30:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8005d34:	4b59      	ldr	r3, [pc, #356]	@ (8005e9c <plotter_begin+0x360>)
 8005d36:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	f7fa ff09 	bl	8000b54 <__aeabi_d2f>
 8005d42:	4603      	mov	r3, r0
 8005d44:	ee03 3a10 	vmov	s6, r3
 8005d48:	eef0 2a48 	vmov.f32	s5, s16
 8005d4c:	ed9f 2a4a 	vldr	s4, [pc, #296]	@ 8005e78 <plotter_begin+0x33c>
 8005d50:	eddf 1a49 	vldr	s3, [pc, #292]	@ 8005e78 <plotter_begin+0x33c>
 8005d54:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005d58:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8005e7c <plotter_begin+0x340>
 8005d5c:	ee00 4a10 	vmov	s0, r4
 8005d60:	484f      	ldr	r0, [pc, #316]	@ (8005ea0 <plotter_begin+0x364>)
 8005d62:	f000 fb04 	bl	800636e <SIGNAL_config_square>

	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8005d66:	4b4a      	ldr	r3, [pc, #296]	@ (8005e90 <plotter_begin+0x354>)
 8005d68:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius;
 8005d6c:	4b4d      	ldr	r3, [pc, #308]	@ (8005ea4 <plotter_begin+0x368>)
 8005d6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d72:	f7fa fc0d 	bl	8000590 <__aeabi_dmul>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8005d7a:	4945      	ldr	r1, [pc, #276]	@ (8005e90 <plotter_begin+0x354>)
 8005d7c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 0.5;
 8005d80:	4b43      	ldr	r3, [pc, #268]	@ (8005e90 <plotter_begin+0x354>)
 8005d82:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8005d86:	f04f 0200 	mov.w	r2, #0
 8005d8a:	4b47      	ldr	r3, [pc, #284]	@ (8005ea8 <plotter_begin+0x36c>)
 8005d8c:	f7fa fc00 	bl	8000590 <__aeabi_dmul>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	493e      	ldr	r1, [pc, #248]	@ (8005e90 <plotter_begin+0x354>)
 8005d96:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0);
 8005d9a:	4b42      	ldr	r3, [pc, #264]	@ (8005ea4 <plotter_begin+0x368>)
 8005d9c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	f7fa fa3e 	bl	8000224 <__adddf3>
 8005da8:	4602      	mov	r2, r0
 8005daa:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8005dac:	4610      	mov	r0, r2
 8005dae:	4619      	mov	r1, r3
 8005db0:	f7fa fed0 	bl	8000b54 <__aeabi_d2f>
 8005db4:	4603      	mov	r3, r0
 8005db6:	ee00 3a90 	vmov	s1, r3
 8005dba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005dbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005dc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005dc6:	4939      	ldr	r1, [pc, #228]	@ (8005eac <plotter_begin+0x370>)
 8005dc8:	4839      	ldr	r0, [pc, #228]	@ (8005eb0 <plotter_begin+0x374>)
 8005dca:	f7fc ff8f 	bl	8002cec <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8005dce:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8005e78 <plotter_begin+0x33c>
 8005dd2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005dd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005dda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005dde:	4935      	ldr	r1, [pc, #212]	@ (8005eb4 <plotter_begin+0x378>)
 8005de0:	4835      	ldr	r0, [pc, #212]	@ (8005eb8 <plotter_begin+0x37c>)
 8005de2:	f7fc ff83 	bl	8002cec <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8005de6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005df0:	2204      	movs	r2, #4
 8005df2:	4932      	ldr	r1, [pc, #200]	@ (8005ebc <plotter_begin+0x380>)
 8005df4:	4832      	ldr	r0, [pc, #200]	@ (8005ec0 <plotter_begin+0x384>)
 8005df6:	f7fb fa36 	bl	8001266 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8005dfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	4b30      	ldr	r3, [pc, #192]	@ (8005ec4 <plotter_begin+0x388>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	492d      	ldr	r1, [pc, #180]	@ (8005ebc <plotter_begin+0x380>)
 8005e06:	4830      	ldr	r0, [pc, #192]	@ (8005ec8 <plotter_begin+0x38c>)
 8005e08:	f7fb fa2d 	bl	8001266 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8005e0c:	220c      	movs	r2, #12
 8005e0e:	492f      	ldr	r1, [pc, #188]	@ (8005ecc <plotter_begin+0x390>)
 8005e10:	482f      	ldr	r0, [pc, #188]	@ (8005ed0 <plotter_begin+0x394>)
 8005e12:	f7fc fd3f 	bl	8002894 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8005e16:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8005e78 <plotter_begin+0x33c>
 8005e1a:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8005ee4 <plotter_begin+0x3a8>
 8005e1e:	4828      	ldr	r0, [pc, #160]	@ (8005ec0 <plotter_begin+0x384>)
 8005e20:	f7fb fa46 	bl	80012b0 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8005e24:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8005e78 <plotter_begin+0x33c>
 8005e28:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8005ee4 <plotter_begin+0x3a8>
 8005e2c:	4826      	ldr	r0, [pc, #152]	@ (8005ec8 <plotter_begin+0x38c>)
 8005e2e:	f7fb fa3f 	bl	80012b0 <MDXX_set_range>
	plotter_pen_up();
 8005e32:	f000 f9f3 	bl	800621c <plotter_pen_up>

	PID_CONTROLLER_Init(&prismatic_position_pid, 25, 1e-9, 0,
			ZGX45RGG_400RPM_Constant.qd_max);
 8005e36:	4b16      	ldr	r3, [pc, #88]	@ (8005e90 <plotter_begin+0x354>)
 8005e38:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&prismatic_position_pid, 25, 1e-9, 0,
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	4619      	mov	r1, r3
 8005e40:	f7fa fe88 	bl	8000b54 <__aeabi_d2f>
 8005e44:	4603      	mov	r3, r0
 8005e46:	ee01 3a90 	vmov	s3, r3
 8005e4a:	ed9f 1a0b 	vldr	s2, [pc, #44]	@ 8005e78 <plotter_begin+0x33c>
 8005e4e:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8005ed4 <plotter_begin+0x398>
 8005e52:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005e56:	4820      	ldr	r0, [pc, #128]	@ (8005ed8 <plotter_begin+0x39c>)
 8005e58:	f7fb f949 	bl	80010ee <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 2000, 80, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8005e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e90 <plotter_begin+0x354>)
 8005e5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 2000, 80, 0,
 8005e62:	4610      	mov	r0, r2
 8005e64:	4619      	mov	r1, r3
 8005e66:	f7fa fe75 	bl	8000b54 <__aeabi_d2f>
 8005e6a:	e03d      	b.n	8005ee8 <plotter_begin+0x3ac>
 8005e6c:	20000b24 	.word	0x20000b24
 8005e70:	477fff00 	.word	0x477fff00
 8005e74:	c77fff00 	.word	0xc77fff00
 8005e78:	00000000 	.word	0x00000000
 8005e7c:	3dcccccd 	.word	0x3dcccccd
 8005e80:	20000b68 	.word	0x20000b68
 8005e84:	20000bac 	.word	0x20000bac
 8005e88:	20000bf0 	.word	0x20000bf0
 8005e8c:	20000c34 	.word	0x20000c34
 8005e90:	20000060 	.word	0x20000060
 8005e94:	20000c78 	.word	0x20000c78
 8005e98:	20000cbc 	.word	0x20000cbc
 8005e9c:	20000000 	.word	0x20000000
 8005ea0:	20000d00 	.word	0x20000d00
 8005ea4:	200000c0 	.word	0x200000c0
 8005ea8:	3fe00000 	.word	0x3fe00000
 8005eac:	20001dd4 	.word	0x20001dd4
 8005eb0:	200009b4 	.word	0x200009b4
 8005eb4:	20001d08 	.word	0x20001d08
 8005eb8:	20000a10 	.word	0x20000a10
 8005ebc:	20001f6c 	.word	0x20001f6c
 8005ec0:	2000091c 	.word	0x2000091c
 8005ec4:	48000800 	.word	0x48000800
 8005ec8:	20000968 	.word	0x20000968
 8005ecc:	20001b70 	.word	0x20001b70
 8005ed0:	20000af4 	.word	0x20000af4
 8005ed4:	3089705f 	.word	0x3089705f
 8005ed8:	20000a6c 	.word	0x20000a6c
 8005edc:	00000000 	.word	0x00000000
 8005ee0:	42a00000 	.word	0x42a00000
 8005ee4:	44fa0000 	.word	0x44fa0000
 8005ee8:	4603      	mov	r3, r0
 8005eea:	ee01 3a90 	vmov	s3, r3
 8005eee:	ed1f 1a05 	vldr	s2, [pc, #-20]	@ 8005edc <plotter_begin+0x3a0>
 8005ef2:	ed5f 0a05 	vldr	s1, [pc, #-20]	@ 8005ee0 <plotter_begin+0x3a4>
 8005ef6:	ed1f 0a05 	vldr	s0, [pc, #-20]	@ 8005ee4 <plotter_begin+0x3a8>
 8005efa:	4847      	ldr	r0, [pc, #284]	@ (8006018 <plotter_begin+0x4dc>)
 8005efc:	f7fb f8f7 	bl	80010ee <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 25, 1e-9, 0,
			ZGX45RGG_150RPM_Constant.qd_max);
 8005f00:	4b46      	ldr	r3, [pc, #280]	@ (800601c <plotter_begin+0x4e0>)
 8005f02:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 25, 1e-9, 0,
 8005f06:	4610      	mov	r0, r2
 8005f08:	4619      	mov	r1, r3
 8005f0a:	f7fa fe23 	bl	8000b54 <__aeabi_d2f>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	ee01 3a90 	vmov	s3, r3
 8005f14:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 8006020 <plotter_begin+0x4e4>
 8005f18:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8006024 <plotter_begin+0x4e8>
 8005f1c:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005f20:	4841      	ldr	r0, [pc, #260]	@ (8006028 <plotter_begin+0x4ec>)
 8005f22:	f7fb f8e4 	bl	80010ee <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 80, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 8005f26:	4b3d      	ldr	r3, [pc, #244]	@ (800601c <plotter_begin+0x4e0>)
 8005f28:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 80, 0,
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	4619      	mov	r1, r3
 8005f30:	f7fa fe10 	bl	8000b54 <__aeabi_d2f>
 8005f34:	4603      	mov	r3, r0
 8005f36:	ee01 3a90 	vmov	s3, r3
 8005f3a:	ed9f 1a39 	vldr	s2, [pc, #228]	@ 8006020 <plotter_begin+0x4e4>
 8005f3e:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 800602c <plotter_begin+0x4f0>
 8005f42:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8006030 <plotter_begin+0x4f4>
 8005f46:	483b      	ldr	r0, [pc, #236]	@ (8006034 <plotter_begin+0x4f8>)
 8005f48:	f7fb f8d1 	bl	80010ee <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8005f4c:	4933      	ldr	r1, [pc, #204]	@ (800601c <plotter_begin+0x4e0>)
 8005f4e:	483a      	ldr	r0, [pc, #232]	@ (8006038 <plotter_begin+0x4fc>)
 8005f50:	f7fb fa88 	bl	8001464 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8005f54:	4939      	ldr	r1, [pc, #228]	@ (800603c <plotter_begin+0x500>)
 8005f56:	483a      	ldr	r0, [pc, #232]	@ (8006040 <plotter_begin+0x504>)
 8005f58:	f7fb faa4 	bl	80014a4 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8005f5c:	4a39      	ldr	r2, [pc, #228]	@ (8006044 <plotter_begin+0x508>)
 8005f5e:	492f      	ldr	r1, [pc, #188]	@ (800601c <plotter_begin+0x4e0>)
 8005f60:	4839      	ldr	r0, [pc, #228]	@ (8006048 <plotter_begin+0x50c>)
 8005f62:	f7fb fa8d 	bl	8001480 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8005f66:	4a37      	ldr	r2, [pc, #220]	@ (8006044 <plotter_begin+0x508>)
 8005f68:	4934      	ldr	r1, [pc, #208]	@ (800603c <plotter_begin+0x500>)
 8005f6a:	4838      	ldr	r0, [pc, #224]	@ (800604c <plotter_begin+0x510>)
 8005f6c:	f7fb faa8 	bl	80014c0 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE,
 8005f70:	2304      	movs	r3, #4
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8006050 <plotter_begin+0x514>
 8005f78:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8006054 <plotter_begin+0x518>
 8005f7c:	2328      	movs	r3, #40	@ 0x28
 8005f7e:	4a36      	ldr	r2, [pc, #216]	@ (8006058 <plotter_begin+0x51c>)
 8005f80:	4936      	ldr	r1, [pc, #216]	@ (800605c <plotter_begin+0x520>)
 8005f82:	4837      	ldr	r0, [pc, #220]	@ (8006060 <plotter_begin+0x524>)
 8005f84:	f7fa ffcc 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, 3.3f, 4095.0f);
	ADC_DMA_Start(&adc_dma);
 8005f88:	4835      	ldr	r0, [pc, #212]	@ (8006060 <plotter_begin+0x524>)
 8005f8a:	f7fa fffe 	bl	8000f8a <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8005f8e:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8006064 <plotter_begin+0x528>
 8005f92:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005f96:	211f      	movs	r1, #31
 8005f98:	4833      	ldr	r0, [pc, #204]	@ (8006068 <plotter_begin+0x52c>)
 8005f9a:	f7fb faa3 	bl	80014e4 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8005f9e:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8006064 <plotter_begin+0x528>
 8005fa2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005fa6:	211f      	movs	r1, #31
 8005fa8:	4830      	ldr	r0, [pc, #192]	@ (800606c <plotter_begin+0x530>)
 8005faa:	f7fb fa9b 	bl	80014e4 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8005fae:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8006064 <plotter_begin+0x528>
 8005fb2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005fb6:	211f      	movs	r1, #31
 8005fb8:	482d      	ldr	r0, [pc, #180]	@ (8006070 <plotter_begin+0x534>)
 8005fba:	f7fb fa93 	bl	80014e4 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8005fbe:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8006064 <plotter_begin+0x528>
 8005fc2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8005fc6:	211f      	movs	r1, #31
 8005fc8:	482a      	ldr	r0, [pc, #168]	@ (8006074 <plotter_begin+0x538>)
 8005fca:	f7fb fa8b 	bl	80014e4 <FIR_init>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8005fce:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8006078 <plotter_begin+0x53c>
 8005fd2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005fd6:	4a29      	ldr	r2, [pc, #164]	@ (800607c <plotter_begin+0x540>)
 8005fd8:	4929      	ldr	r1, [pc, #164]	@ (8006080 <plotter_begin+0x544>)
 8005fda:	482a      	ldr	r0, [pc, #168]	@ (8006084 <plotter_begin+0x548>)
 8005fdc:	f7fd feae 	bl	8003d3c <Kalman_Start>
	REVOLUTE_R);
	Kalman_Start(&prismatic_kalman, prismatic_A, prismatic_B, PRISMATIC_Q,
 8005fe0:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8006078 <plotter_begin+0x53c>
 8005fe4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005fe8:	4a27      	ldr	r2, [pc, #156]	@ (8006088 <plotter_begin+0x54c>)
 8005fea:	4928      	ldr	r1, [pc, #160]	@ (800608c <plotter_begin+0x550>)
 8005fec:	4828      	ldr	r0, [pc, #160]	@ (8006090 <plotter_begin+0x554>)
 8005fee:	f7fd fea5 	bl	8003d3c <Kalman_Start>
	PRISMATIC_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8005ff2:	23c8      	movs	r3, #200	@ 0xc8
 8005ff4:	9301      	str	r3, [sp, #4]
 8005ff6:	2315      	movs	r3, #21
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	4b26      	ldr	r3, [pc, #152]	@ (8006094 <plotter_begin+0x558>)
 8005ffc:	4a26      	ldr	r2, [pc, #152]	@ (8006098 <plotter_begin+0x55c>)
 8005ffe:	4927      	ldr	r1, [pc, #156]	@ (800609c <plotter_begin+0x560>)
 8006000:	4827      	ldr	r0, [pc, #156]	@ (80060a0 <plotter_begin+0x564>)
 8006002:	f7fb fc41 	bl	8001888 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8006006:	4827      	ldr	r0, [pc, #156]	@ (80060a4 <plotter_begin+0x568>)
 8006008:	f004 fd72 	bl	800aaf0 <HAL_TIM_Base_Start_IT>
}
 800600c:	bf00      	nop
 800600e:	3704      	adds	r7, #4
 8006010:	46bd      	mov	sp, r7
 8006012:	ecbd 8b02 	vpop	{d8}
 8006016:	bd90      	pop	{r4, r7, pc}
 8006018:	20000a88 	.word	0x20000a88
 800601c:	20000000 	.word	0x20000000
 8006020:	00000000 	.word	0x00000000
 8006024:	3089705f 	.word	0x3089705f
 8006028:	20000aa4 	.word	0x20000aa4
 800602c:	42a00000 	.word	0x42a00000
 8006030:	44fa0000 	.word	0x44fa0000
 8006034:	20000ac0 	.word	0x20000ac0
 8006038:	20000ae8 	.word	0x20000ae8
 800603c:	20000060 	.word	0x20000060
 8006040:	20000adc 	.word	0x20000adc
 8006044:	200000c0 	.word	0x200000c0
 8006048:	20000aec 	.word	0x20000aec
 800604c:	20000ae0 	.word	0x20000ae0
 8006050:	457ff000 	.word	0x457ff000
 8006054:	40533333 	.word	0x40533333
 8006058:	20001474 	.word	0x20001474
 800605c:	20000410 	.word	0x20000410
 8006060:	20000b0c 	.word	0x20000b0c
 8006064:	447a0000 	.word	0x447a0000
 8006068:	20000d50 	.word	0x20000d50
 800606c:	20000d44 	.word	0x20000d44
 8006070:	20000d68 	.word	0x20000d68
 8006074:	20000d5c 	.word	0x20000d5c
 8006078:	3d4ccccd 	.word	0x3d4ccccd
 800607c:	20000384 	.word	0x20000384
 8006080:	20000344 	.word	0x20000344
 8006084:	200010f4 	.word	0x200010f4
 8006088:	20000334 	.word	0x20000334
 800608c:	200002f4 	.word	0x200002f4
 8006090:	20000d74 	.word	0x20000d74
 8006094:	2000199c 	.word	0x2000199c
 8006098:	20002038 	.word	0x20002038
 800609c:	200021d0 	.word	0x200021d0
 80060a0:	200014c4 	.word	0x200014c4
 80060a4:	20001c3c 	.word	0x20001c3c

080060a8 <plotter_reset>:

void plotter_reset() {
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 80060ac:	4803      	ldr	r0, [pc, #12]	@ (80060bc <plotter_reset+0x14>)
 80060ae:	f7fd f89f 	bl	80031f0 <QEI_reset>
	QEI_reset(&revolute_encoder);
 80060b2:	4803      	ldr	r0, [pc, #12]	@ (80060c0 <plotter_reset+0x18>)
 80060b4:	f7fd f89c 	bl	80031f0 <QEI_reset>
}
 80060b8:	bf00      	nop
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	200009b4 	.word	0x200009b4
 80060c0:	20000a10 	.word	0x20000a10

080060c4 <plotter_update_sensors>:

void plotter_update_sensors() {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_X_CHANNEL, 1.0);
 80060c8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80060cc:	2106      	movs	r1, #6
 80060ce:	4841      	ldr	r0, [pc, #260]	@ (80061d4 <plotter_update_sensors+0x110>)
 80060d0:	f7fa ffb6 	bl	8001040 <ADC_DMA_GetJoystick>
 80060d4:	eef0 7a40 	vmov.f32	s15, s0
 80060d8:	4b3f      	ldr	r3, [pc, #252]	@ (80061d8 <plotter_update_sensors+0x114>)
 80060da:	edc3 7a00 	vstr	s15, [r3]
	joystick_y = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_Y_CHANNEL, 1.0);
 80060de:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80060e2:	2107      	movs	r1, #7
 80060e4:	483b      	ldr	r0, [pc, #236]	@ (80061d4 <plotter_update_sensors+0x110>)
 80060e6:	f7fa ffab 	bl	8001040 <ADC_DMA_GetJoystick>
 80060ea:	eef0 7a40 	vmov.f32	s15, s0
 80060ee:	4b3b      	ldr	r3, [pc, #236]	@ (80061dc <plotter_update_sensors+0x118>)
 80060f0:	edc3 7a00 	vstr	s15, [r3]

	b1[0] = !HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 80060f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80060f8:	4839      	ldr	r0, [pc, #228]	@ (80061e0 <plotter_update_sensors+0x11c>)
 80060fa:	f003 fbad 	bl	8009858 <HAL_GPIO_ReadPin>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	bf0c      	ite	eq
 8006104:	2301      	moveq	r3, #1
 8006106:	2300      	movne	r3, #0
 8006108:	b2db      	uxtb	r3, r3
 800610a:	461a      	mov	r2, r3
 800610c:	4b35      	ldr	r3, [pc, #212]	@ (80061e4 <plotter_update_sensors+0x120>)
 800610e:	601a      	str	r2, [r3, #0]
	b2[0] = !HAL_GPIO_ReadPin(SAVE_GPIO_Port, SAVE_Pin);
 8006110:	2180      	movs	r1, #128	@ 0x80
 8006112:	4835      	ldr	r0, [pc, #212]	@ (80061e8 <plotter_update_sensors+0x124>)
 8006114:	f003 fba0 	bl	8009858 <HAL_GPIO_ReadPin>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	bf0c      	ite	eq
 800611e:	2301      	moveq	r3, #1
 8006120:	2300      	movne	r3, #0
 8006122:	b2db      	uxtb	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	4b31      	ldr	r3, [pc, #196]	@ (80061ec <plotter_update_sensors+0x128>)
 8006128:	601a      	str	r2, [r3, #0]
	b3[0] = !HAL_GPIO_ReadPin(DELETE_GPIO_Port, DELETE_Pin);
 800612a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800612e:	482c      	ldr	r0, [pc, #176]	@ (80061e0 <plotter_update_sensors+0x11c>)
 8006130:	f003 fb92 	bl	8009858 <HAL_GPIO_ReadPin>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	bf0c      	ite	eq
 800613a:	2301      	moveq	r3, #1
 800613c:	2300      	movne	r3, #0
 800613e:	b2db      	uxtb	r3, r3
 8006140:	461a      	mov	r2, r3
 8006142:	4b2b      	ldr	r3, [pc, #172]	@ (80061f0 <plotter_update_sensors+0x12c>)
 8006144:	601a      	str	r2, [r3, #0]
	b4[0] = !HAL_GPIO_ReadPin(RESET_SYS_GPIO_Port, RESET_SYS_Pin);
 8006146:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800614a:	4825      	ldr	r0, [pc, #148]	@ (80061e0 <plotter_update_sensors+0x11c>)
 800614c:	f003 fb84 	bl	8009858 <HAL_GPIO_ReadPin>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	bf0c      	ite	eq
 8006156:	2301      	moveq	r3, #1
 8006158:	2300      	movne	r3, #0
 800615a:	b2db      	uxtb	r3, r3
 800615c:	461a      	mov	r2, r3
 800615e:	4b25      	ldr	r3, [pc, #148]	@ (80061f4 <plotter_update_sensors+0x130>)
 8006160:	601a      	str	r2, [r3, #0]
//	up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
//	low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
//	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
//	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);

	emer = !HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8006162:	2110      	movs	r1, #16
 8006164:	4820      	ldr	r0, [pc, #128]	@ (80061e8 <plotter_update_sensors+0x124>)
 8006166:	f003 fb77 	bl	8009858 <HAL_GPIO_ReadPin>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	bf0c      	ite	eq
 8006170:	2301      	moveq	r3, #1
 8006172:	2300      	movne	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	4b1f      	ldr	r3, [pc, #124]	@ (80061f8 <plotter_update_sensors+0x134>)
 800617a:	601a      	str	r2, [r3, #0]

	if (up_lim) {
 800617c:	4b1f      	ldr	r3, [pc, #124]	@ (80061fc <plotter_update_sensors+0x138>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <plotter_update_sensors+0xc8>
		servo_state = PEN_UP;
 8006184:	4b1e      	ldr	r3, [pc, #120]	@ (8006200 <plotter_update_sensors+0x13c>)
 8006186:	2202      	movs	r2, #2
 8006188:	701a      	strb	r2, [r3, #0]
 800618a:	e00a      	b.n	80061a2 <plotter_update_sensors+0xde>
	} else if (low_lim) {
 800618c:	4b1d      	ldr	r3, [pc, #116]	@ (8006204 <plotter_update_sensors+0x140>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <plotter_update_sensors+0xd8>
		servo_state = PEN_DOWN;
 8006194:	4b1a      	ldr	r3, [pc, #104]	@ (8006200 <plotter_update_sensors+0x13c>)
 8006196:	2201      	movs	r2, #1
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	e002      	b.n	80061a2 <plotter_update_sensors+0xde>
	} else {
		servo_state = PEN_IDLE;
 800619c:	4b18      	ldr	r3, [pc, #96]	@ (8006200 <plotter_update_sensors+0x13c>)
 800619e:	2200      	movs	r2, #0
 80061a0:	701a      	strb	r2, [r3, #0]
	}

	if (up_photo) {
 80061a2:	4b19      	ldr	r3, [pc, #100]	@ (8006208 <plotter_update_sensors+0x144>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <plotter_update_sensors+0xee>
		prismatic_state = PP_AT_TOP_END_POSITION;
 80061aa:	4b18      	ldr	r3, [pc, #96]	@ (800620c <plotter_update_sensors+0x148>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	e006      	b.n	80061c0 <plotter_update_sensors+0xfc>
	} else if (low_photo) {
 80061b2:	4b17      	ldr	r3, [pc, #92]	@ (8006210 <plotter_update_sensors+0x14c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <plotter_update_sensors+0xfc>
		prismatic_state = PP_AT_BOTTOM_END_POSITION;
 80061ba:	4b14      	ldr	r3, [pc, #80]	@ (800620c <plotter_update_sensors+0x148>)
 80061bc:	2202      	movs	r2, #2
 80061be:	701a      	strb	r2, [r3, #0]
	}

	if (prox) {
 80061c0:	4b14      	ldr	r3, [pc, #80]	@ (8006214 <plotter_update_sensors+0x150>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <plotter_update_sensors+0x10a>
		revolute_state = RP_AT_HOME_POSITION;
 80061c8:	4b13      	ldr	r3, [pc, #76]	@ (8006218 <plotter_update_sensors+0x154>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	701a      	strb	r2, [r3, #0]
	}

//    prismatic_current = ADC_DMA_ComputeCurrent(&adc_dma, PRISMATIC_CURRENT_CHANNEL, PRISMATIC_CURRENT_OFFSET);
//    revolute_current = ADC_DMA_ComputeCurrent(&adc_dma, REVOLUTE_CURRENT_CHANNEL, REVOLUTE_CURRENT_OFFSET);
}
 80061ce:	bf00      	nop
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000b0c 	.word	0x20000b0c
 80061d8:	20001b2c 	.word	0x20001b2c
 80061dc:	20001b30 	.word	0x20001b30
 80061e0:	48000800 	.word	0x48000800
 80061e4:	20001b4c 	.word	0x20001b4c
 80061e8:	48000400 	.word	0x48000400
 80061ec:	20001b54 	.word	0x20001b54
 80061f0:	20001b5c 	.word	0x20001b5c
 80061f4:	20001b64 	.word	0x20001b64
 80061f8:	20001b38 	.word	0x20001b38
 80061fc:	20001b44 	.word	0x20001b44
 8006200:	2000091a 	.word	0x2000091a
 8006204:	20001b48 	.word	0x20001b48
 8006208:	20001b3c 	.word	0x20001b3c
 800620c:	200002ee 	.word	0x200002ee
 8006210:	20001b40 	.word	0x20001b40
 8006214:	20001b34 	.word	0x20001b34
 8006218:	200002ef 	.word	0x200002ef

0800621c <plotter_pen_up>:

void plotter_pen_up() {
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8006220:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8006224:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8006234 <plotter_pen_up+0x18>
 8006228:	4803      	ldr	r0, [pc, #12]	@ (8006238 <plotter_pen_up+0x1c>)
 800622a:	f7fc fb55 	bl	80028d8 <PWM_write_duty>
}
 800622e:	bf00      	nop
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	42480000 	.word	0x42480000
 8006238:	20000af4 	.word	0x20000af4

0800623c <plotter_pen_down>:

void plotter_pen_down() {
 800623c:	b580      	push	{r7, lr}
 800623e:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 8006240:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8006244:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8006254 <plotter_pen_down+0x18>
 8006248:	4803      	ldr	r0, [pc, #12]	@ (8006258 <plotter_pen_down+0x1c>)
 800624a:	f7fc fb45 	bl	80028d8 <PWM_write_duty>
}
 800624e:	bf00      	nop
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	42480000 	.word	0x42480000
 8006258:	20000af4 	.word	0x20000af4

0800625c <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	460b      	mov	r3, r1
 8006266:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	78fa      	ldrb	r2, [r7, #3]
 800626c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8006274:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800627c:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a1b      	ldr	r2, [pc, #108]	@ (8006310 <SIGNAL_init+0xb4>)
 80062a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80062aa:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 80062ac:	78fb      	ldrb	r3, [r7, #3]
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d828      	bhi.n	8006304 <SIGNAL_init+0xa8>
 80062b2:	a201      	add	r2, pc, #4	@ (adr r2, 80062b8 <SIGNAL_init+0x5c>)
 80062b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b8:	08006303 	.word	0x08006303
 80062bc:	080062c9 	.word	0x080062c9
 80062c0:	080062e7 	.word	0x080062e7
 80062c4:	080062f1 	.word	0x080062f1
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80062d4:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a0e      	ldr	r2, [pc, #56]	@ (8006314 <SIGNAL_init+0xb8>)
 80062da:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80062e2:	621a      	str	r2, [r3, #32]
            break;
 80062e4:	e00e      	b.n	8006304 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80062ec:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 80062ee:	e009      	b.n	8006304 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80062fe:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8006300:	e000      	b.n	8006304 <SIGNAL_init+0xa8>
            break;
 8006302:	bf00      	nop
    }
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr
 8006310:	bf800000 	.word	0xbf800000
 8006314:	41200000 	.word	0x41200000

08006318 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8006318:	b480      	push	{r7}
 800631a:	b089      	sub	sp, #36	@ 0x24
 800631c:	af00      	add	r7, sp, #0
 800631e:	61f8      	str	r0, [r7, #28]
 8006320:	ed87 0a06 	vstr	s0, [r7, #24]
 8006324:	edc7 0a05 	vstr	s1, [r7, #20]
 8006328:	ed87 1a04 	vstr	s2, [r7, #16]
 800632c:	edc7 1a03 	vstr	s3, [r7, #12]
 8006330:	ed87 2a02 	vstr	s4, [r7, #8]
 8006334:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	2200      	movs	r2, #0
 800633c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8006362:	bf00      	nop
 8006364:	3724      	adds	r7, #36	@ 0x24
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 800636e:	b480      	push	{r7}
 8006370:	b089      	sub	sp, #36	@ 0x24
 8006372:	af00      	add	r7, sp, #0
 8006374:	61f8      	str	r0, [r7, #28]
 8006376:	ed87 0a06 	vstr	s0, [r7, #24]
 800637a:	edc7 0a05 	vstr	s1, [r7, #20]
 800637e:	ed87 1a04 	vstr	s2, [r7, #16]
 8006382:	edc7 1a03 	vstr	s3, [r7, #12]
 8006386:	ed87 2a02 	vstr	s4, [r7, #8]
 800638a:	edc7 2a01 	vstr	s5, [r7, #4]
 800638e:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	2202      	movs	r2, #2
 8006396:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80063c2:	bf00      	nop
 80063c4:	3724      	adds	r7, #36	@ 0x24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
	...

080063d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006414 <HAL_MspInit+0x44>)
 80063d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063da:	4a0e      	ldr	r2, [pc, #56]	@ (8006414 <HAL_MspInit+0x44>)
 80063dc:	f043 0301 	orr.w	r3, r3, #1
 80063e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80063e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006414 <HAL_MspInit+0x44>)
 80063e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	607b      	str	r3, [r7, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063ee:	4b09      	ldr	r3, [pc, #36]	@ (8006414 <HAL_MspInit+0x44>)
 80063f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f2:	4a08      	ldr	r2, [pc, #32]	@ (8006414 <HAL_MspInit+0x44>)
 80063f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80063fa:	4b06      	ldr	r3, [pc, #24]	@ (8006414 <HAL_MspInit+0x44>)
 80063fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006402:	603b      	str	r3, [r7, #0]
 8006404:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8006406:	f003 fb13 	bl	8009a30 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800640a:	bf00      	nop
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	40021000 	.word	0x40021000

08006418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006418:	b480      	push	{r7}
 800641a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800641c:	bf00      	nop
 800641e:	e7fd      	b.n	800641c <NMI_Handler+0x4>

08006420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006424:	bf00      	nop
 8006426:	e7fd      	b.n	8006424 <HardFault_Handler+0x4>

08006428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800642c:	bf00      	nop
 800642e:	e7fd      	b.n	800642c <MemManage_Handler+0x4>

08006430 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006434:	bf00      	nop
 8006436:	e7fd      	b.n	8006434 <BusFault_Handler+0x4>

08006438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800643c:	bf00      	nop
 800643e:	e7fd      	b.n	800643c <UsageFault_Handler+0x4>

08006440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006440:	b480      	push	{r7}
 8006442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800644e:	b480      	push	{r7}
 8006450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006452:	bf00      	nop
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800645c:	b480      	push	{r7}
 800645e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006460:	bf00      	nop
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800646e:	f000 ff99 	bl	80073a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006472:	bf00      	nop
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800647c:	4802      	ldr	r0, [pc, #8]	@ (8006488 <DMA1_Channel1_IRQHandler+0x10>)
 800647e:	f002 ff1a 	bl	80092b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006482:	bf00      	nop
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	2000047c 	.word	0x2000047c

0800648c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8006490:	4802      	ldr	r0, [pc, #8]	@ (800649c <DMA1_Channel2_IRQHandler+0x10>)
 8006492:	f002 ff10 	bl	80092b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006496:	bf00      	nop
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	2000235c 	.word	0x2000235c

080064a0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80064a4:	4802      	ldr	r0, [pc, #8]	@ (80064b0 <DMA1_Channel3_IRQHandler+0x10>)
 80064a6:	f002 ff06 	bl	80092b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80064aa:	bf00      	nop
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	200023bc 	.word	0x200023bc

080064b4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80064b8:	4802      	ldr	r0, [pc, #8]	@ (80064c4 <DMA1_Channel4_IRQHandler+0x10>)
 80064ba:	f002 fefc 	bl	80092b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80064be:	bf00      	nop
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	2000229c 	.word	0x2000229c

080064c8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80064cc:	4802      	ldr	r0, [pc, #8]	@ (80064d8 <DMA1_Channel5_IRQHandler+0x10>)
 80064ce:	f002 fef2 	bl	80092b6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80064d2:	bf00      	nop
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	200022fc 	.word	0x200022fc

080064dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80064e0:	4803      	ldr	r0, [pc, #12]	@ (80064f0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80064e2:	f004 ff2b 	bl	800b33c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80064e6:	4803      	ldr	r0, [pc, #12]	@ (80064f4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80064e8:	f004 ff28 	bl	800b33c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80064ec:	bf00      	nop
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	20001b70 	.word	0x20001b70
 80064f4:	20002038 	.word	0x20002038

080064f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80064fc:	4802      	ldr	r0, [pc, #8]	@ (8006508 <TIM2_IRQHandler+0x10>)
 80064fe:	f004 ff1d 	bl	800b33c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006502:	bf00      	nop
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	20001c3c 	.word	0x20001c3c

0800650c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006510:	4802      	ldr	r0, [pc, #8]	@ (800651c <TIM3_IRQHandler+0x10>)
 8006512:	f004 ff13 	bl	800b33c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006516:	bf00      	nop
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20001d08 	.word	0x20001d08

08006520 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006524:	4802      	ldr	r0, [pc, #8]	@ (8006530 <TIM4_IRQHandler+0x10>)
 8006526:	f004 ff09 	bl	800b33c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800652a:	bf00      	nop
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20001dd4 	.word	0x20001dd4

08006534 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006538:	4802      	ldr	r0, [pc, #8]	@ (8006544 <USART2_IRQHandler+0x10>)
 800653a:	f006 fcd3 	bl	800cee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800653e:	bf00      	nop
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	200021d0 	.word	0x200021d0

08006548 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800654c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8006550:	f003 f9b2 	bl	80098b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006554:	bf00      	nop
 8006556:	bd80      	pop	{r7, pc}

08006558 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800655c:	4802      	ldr	r0, [pc, #8]	@ (8006568 <LPUART1_IRQHandler+0x10>)
 800655e:	f006 fcc1 	bl	800cee4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8006562:	bf00      	nop
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	20002104 	.word	0x20002104

0800656c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006574:	4a14      	ldr	r2, [pc, #80]	@ (80065c8 <_sbrk+0x5c>)
 8006576:	4b15      	ldr	r3, [pc, #84]	@ (80065cc <_sbrk+0x60>)
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006580:	4b13      	ldr	r3, [pc, #76]	@ (80065d0 <_sbrk+0x64>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d102      	bne.n	800658e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006588:	4b11      	ldr	r3, [pc, #68]	@ (80065d0 <_sbrk+0x64>)
 800658a:	4a12      	ldr	r2, [pc, #72]	@ (80065d4 <_sbrk+0x68>)
 800658c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800658e:	4b10      	ldr	r3, [pc, #64]	@ (80065d0 <_sbrk+0x64>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4413      	add	r3, r2
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	429a      	cmp	r2, r3
 800659a:	d207      	bcs.n	80065ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800659c:	f008 ff86 	bl	800f4ac <__errno>
 80065a0:	4603      	mov	r3, r0
 80065a2:	220c      	movs	r2, #12
 80065a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80065a6:	f04f 33ff 	mov.w	r3, #4294967295
 80065aa:	e009      	b.n	80065c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80065ac:	4b08      	ldr	r3, [pc, #32]	@ (80065d0 <_sbrk+0x64>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80065b2:	4b07      	ldr	r3, [pc, #28]	@ (80065d0 <_sbrk+0x64>)
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4413      	add	r3, r2
 80065ba:	4a05      	ldr	r2, [pc, #20]	@ (80065d0 <_sbrk+0x64>)
 80065bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80065be:	68fb      	ldr	r3, [r7, #12]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20020000 	.word	0x20020000
 80065cc:	00000400 	.word	0x00000400
 80065d0:	20001b6c 	.word	0x20001b6c
 80065d4:	20002568 	.word	0x20002568

080065d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80065d8:	b480      	push	{r7}
 80065da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80065dc:	4b06      	ldr	r3, [pc, #24]	@ (80065f8 <SystemInit+0x20>)
 80065de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e2:	4a05      	ldr	r2, [pc, #20]	@ (80065f8 <SystemInit+0x20>)
 80065e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80065e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80065ec:	bf00      	nop
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	e000ed00 	.word	0xe000ed00

080065fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b098      	sub	sp, #96	@ 0x60
 8006600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006602:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	605a      	str	r2, [r3, #4]
 800660c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800660e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	605a      	str	r2, [r3, #4]
 8006618:	609a      	str	r2, [r3, #8]
 800661a:	60da      	str	r2, [r3, #12]
 800661c:	611a      	str	r2, [r3, #16]
 800661e:	615a      	str	r2, [r3, #20]
 8006620:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006622:	1d3b      	adds	r3, r7, #4
 8006624:	2234      	movs	r2, #52	@ 0x34
 8006626:	2100      	movs	r1, #0
 8006628:	4618      	mov	r0, r3
 800662a:	f008 ff27 	bl	800f47c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800662e:	4b3b      	ldr	r3, [pc, #236]	@ (800671c <MX_TIM1_Init+0x120>)
 8006630:	4a3b      	ldr	r2, [pc, #236]	@ (8006720 <MX_TIM1_Init+0x124>)
 8006632:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006634:	4b39      	ldr	r3, [pc, #228]	@ (800671c <MX_TIM1_Init+0x120>)
 8006636:	2200      	movs	r2, #0
 8006638:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800663a:	4b38      	ldr	r3, [pc, #224]	@ (800671c <MX_TIM1_Init+0x120>)
 800663c:	2200      	movs	r2, #0
 800663e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006640:	4b36      	ldr	r3, [pc, #216]	@ (800671c <MX_TIM1_Init+0x120>)
 8006642:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006646:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006648:	4b34      	ldr	r3, [pc, #208]	@ (800671c <MX_TIM1_Init+0x120>)
 800664a:	2200      	movs	r2, #0
 800664c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800664e:	4b33      	ldr	r3, [pc, #204]	@ (800671c <MX_TIM1_Init+0x120>)
 8006650:	2200      	movs	r2, #0
 8006652:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006654:	4b31      	ldr	r3, [pc, #196]	@ (800671c <MX_TIM1_Init+0x120>)
 8006656:	2200      	movs	r2, #0
 8006658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800665a:	4830      	ldr	r0, [pc, #192]	@ (800671c <MX_TIM1_Init+0x120>)
 800665c:	f004 fac0 	bl	800abe0 <HAL_TIM_PWM_Init>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8006666:	f7ff fa63 	bl	8005b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800666a:	2300      	movs	r3, #0
 800666c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800666e:	2300      	movs	r3, #0
 8006670:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006672:	2300      	movs	r3, #0
 8006674:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006676:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800667a:	4619      	mov	r1, r3
 800667c:	4827      	ldr	r0, [pc, #156]	@ (800671c <MX_TIM1_Init+0x120>)
 800667e:	f006 f8d1 	bl	800c824 <HAL_TIMEx_MasterConfigSynchronization>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8006688:	f7ff fa52 	bl	8005b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800668c:	2360      	movs	r3, #96	@ 0x60
 800668e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006694:	2300      	movs	r3, #0
 8006696:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006698:	2300      	movs	r3, #0
 800669a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800669c:	2300      	movs	r3, #0
 800669e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80066a0:	2300      	movs	r3, #0
 80066a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80066a4:	2300      	movs	r3, #0
 80066a6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80066a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80066ac:	220c      	movs	r2, #12
 80066ae:	4619      	mov	r1, r3
 80066b0:	481a      	ldr	r0, [pc, #104]	@ (800671c <MX_TIM1_Init+0x120>)
 80066b2:	f004 ffbd 	bl	800b630 <HAL_TIM_PWM_ConfigChannel>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80066bc:	f7ff fa38 	bl	8005b30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80066c0:	2300      	movs	r3, #0
 80066c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80066c8:	2300      	movs	r3, #0
 80066ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80066cc:	2300      	movs	r3, #0
 80066ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80066d0:	2300      	movs	r3, #0
 80066d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80066d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80066d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80066da:	2300      	movs	r3, #0
 80066dc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80066de:	2300      	movs	r3, #0
 80066e0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80066e2:	2300      	movs	r3, #0
 80066e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80066e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80066ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80066f0:	2300      	movs	r3, #0
 80066f2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80066f4:	2300      	movs	r3, #0
 80066f6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80066f8:	1d3b      	adds	r3, r7, #4
 80066fa:	4619      	mov	r1, r3
 80066fc:	4807      	ldr	r0, [pc, #28]	@ (800671c <MX_TIM1_Init+0x120>)
 80066fe:	f006 f927 	bl	800c950 <HAL_TIMEx_ConfigBreakDeadTime>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8006708:	f7ff fa12 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800670c:	4803      	ldr	r0, [pc, #12]	@ (800671c <MX_TIM1_Init+0x120>)
 800670e:	f000 fb5b 	bl	8006dc8 <HAL_TIM_MspPostInit>

}
 8006712:	bf00      	nop
 8006714:	3760      	adds	r7, #96	@ 0x60
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	20001b70 	.word	0x20001b70
 8006720:	40012c00 	.word	0x40012c00

08006724 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800672a:	f107 0310 	add.w	r3, r7, #16
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	605a      	str	r2, [r3, #4]
 8006734:	609a      	str	r2, [r3, #8]
 8006736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006738:	1d3b      	adds	r3, r7, #4
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	605a      	str	r2, [r3, #4]
 8006740:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006742:	4b1e      	ldr	r3, [pc, #120]	@ (80067bc <MX_TIM2_Init+0x98>)
 8006744:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8006748:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800674a:	4b1c      	ldr	r3, [pc, #112]	@ (80067bc <MX_TIM2_Init+0x98>)
 800674c:	22a9      	movs	r2, #169	@ 0xa9
 800674e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006750:	4b1a      	ldr	r3, [pc, #104]	@ (80067bc <MX_TIM2_Init+0x98>)
 8006752:	2200      	movs	r2, #0
 8006754:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8006756:	4b19      	ldr	r3, [pc, #100]	@ (80067bc <MX_TIM2_Init+0x98>)
 8006758:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800675c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800675e:	4b17      	ldr	r3, [pc, #92]	@ (80067bc <MX_TIM2_Init+0x98>)
 8006760:	2200      	movs	r2, #0
 8006762:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006764:	4b15      	ldr	r3, [pc, #84]	@ (80067bc <MX_TIM2_Init+0x98>)
 8006766:	2200      	movs	r2, #0
 8006768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800676a:	4814      	ldr	r0, [pc, #80]	@ (80067bc <MX_TIM2_Init+0x98>)
 800676c:	f004 f8ec 	bl	800a948 <HAL_TIM_Base_Init>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006776:	f7ff f9db 	bl	8005b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800677a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800677e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006780:	f107 0310 	add.w	r3, r7, #16
 8006784:	4619      	mov	r1, r3
 8006786:	480d      	ldr	r0, [pc, #52]	@ (80067bc <MX_TIM2_Init+0x98>)
 8006788:	f005 f866 	bl	800b858 <HAL_TIM_ConfigClockSource>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006792:	f7ff f9cd 	bl	8005b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006796:	2300      	movs	r3, #0
 8006798:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800679a:	2300      	movs	r3, #0
 800679c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800679e:	1d3b      	adds	r3, r7, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4806      	ldr	r0, [pc, #24]	@ (80067bc <MX_TIM2_Init+0x98>)
 80067a4:	f006 f83e 	bl	800c824 <HAL_TIMEx_MasterConfigSynchronization>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80067ae:	f7ff f9bf 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80067b2:	bf00      	nop
 80067b4:	3720      	adds	r7, #32
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	20001c3c 	.word	0x20001c3c

080067c0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b08c      	sub	sp, #48	@ 0x30
 80067c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80067c6:	f107 030c 	add.w	r3, r7, #12
 80067ca:	2224      	movs	r2, #36	@ 0x24
 80067cc:	2100      	movs	r1, #0
 80067ce:	4618      	mov	r0, r3
 80067d0:	f008 fe54 	bl	800f47c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067d4:	463b      	mov	r3, r7
 80067d6:	2200      	movs	r2, #0
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	605a      	str	r2, [r3, #4]
 80067dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80067de:	4b21      	ldr	r3, [pc, #132]	@ (8006864 <MX_TIM3_Init+0xa4>)
 80067e0:	4a21      	ldr	r2, [pc, #132]	@ (8006868 <MX_TIM3_Init+0xa8>)
 80067e2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80067e4:	4b1f      	ldr	r3, [pc, #124]	@ (8006864 <MX_TIM3_Init+0xa4>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067ea:	4b1e      	ldr	r3, [pc, #120]	@ (8006864 <MX_TIM3_Init+0xa4>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80067f0:	4b1c      	ldr	r3, [pc, #112]	@ (8006864 <MX_TIM3_Init+0xa4>)
 80067f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80067f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067f8:	4b1a      	ldr	r3, [pc, #104]	@ (8006864 <MX_TIM3_Init+0xa4>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067fe:	4b19      	ldr	r3, [pc, #100]	@ (8006864 <MX_TIM3_Init+0xa4>)
 8006800:	2200      	movs	r2, #0
 8006802:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006804:	2303      	movs	r3, #3
 8006806:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006808:	2300      	movs	r3, #0
 800680a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800680c:	2301      	movs	r3, #1
 800680e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006810:	2300      	movs	r3, #0
 8006812:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006814:	2300      	movs	r3, #0
 8006816:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006818:	2300      	movs	r3, #0
 800681a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800681c:	2301      	movs	r3, #1
 800681e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006820:	2300      	movs	r3, #0
 8006822:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8006828:	f107 030c 	add.w	r3, r7, #12
 800682c:	4619      	mov	r1, r3
 800682e:	480d      	ldr	r0, [pc, #52]	@ (8006864 <MX_TIM3_Init+0xa4>)
 8006830:	f004 fc42 	bl	800b0b8 <HAL_TIM_Encoder_Init>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800683a:	f7ff f979 	bl	8005b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800683e:	2300      	movs	r3, #0
 8006840:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006842:	2300      	movs	r3, #0
 8006844:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006846:	463b      	mov	r3, r7
 8006848:	4619      	mov	r1, r3
 800684a:	4806      	ldr	r0, [pc, #24]	@ (8006864 <MX_TIM3_Init+0xa4>)
 800684c:	f005 ffea 	bl	800c824 <HAL_TIMEx_MasterConfigSynchronization>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8006856:	f7ff f96b 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800685a:	bf00      	nop
 800685c:	3730      	adds	r7, #48	@ 0x30
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	20001d08 	.word	0x20001d08
 8006868:	40000400 	.word	0x40000400

0800686c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08c      	sub	sp, #48	@ 0x30
 8006870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006872:	f107 030c 	add.w	r3, r7, #12
 8006876:	2224      	movs	r2, #36	@ 0x24
 8006878:	2100      	movs	r1, #0
 800687a:	4618      	mov	r0, r3
 800687c:	f008 fdfe 	bl	800f47c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006880:	463b      	mov	r3, r7
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	605a      	str	r2, [r3, #4]
 8006888:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800688a:	4b21      	ldr	r3, [pc, #132]	@ (8006910 <MX_TIM4_Init+0xa4>)
 800688c:	4a21      	ldr	r2, [pc, #132]	@ (8006914 <MX_TIM4_Init+0xa8>)
 800688e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006890:	4b1f      	ldr	r3, [pc, #124]	@ (8006910 <MX_TIM4_Init+0xa4>)
 8006892:	2200      	movs	r2, #0
 8006894:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006896:	4b1e      	ldr	r3, [pc, #120]	@ (8006910 <MX_TIM4_Init+0xa4>)
 8006898:	2200      	movs	r2, #0
 800689a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800689c:	4b1c      	ldr	r3, [pc, #112]	@ (8006910 <MX_TIM4_Init+0xa4>)
 800689e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80068a2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006910 <MX_TIM4_Init+0xa4>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068aa:	4b19      	ldr	r3, [pc, #100]	@ (8006910 <MX_TIM4_Init+0xa4>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80068b0:	2303      	movs	r3, #3
 80068b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80068b4:	2300      	movs	r3, #0
 80068b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80068b8:	2301      	movs	r3, #1
 80068ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80068bc:	2300      	movs	r3, #0
 80068be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80068c0:	2300      	movs	r3, #0
 80068c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80068c4:	2300      	movs	r3, #0
 80068c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80068c8:	2301      	movs	r3, #1
 80068ca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80068cc:	2300      	movs	r3, #0
 80068ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80068d0:	2300      	movs	r3, #0
 80068d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80068d4:	f107 030c 	add.w	r3, r7, #12
 80068d8:	4619      	mov	r1, r3
 80068da:	480d      	ldr	r0, [pc, #52]	@ (8006910 <MX_TIM4_Init+0xa4>)
 80068dc:	f004 fbec 	bl	800b0b8 <HAL_TIM_Encoder_Init>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80068e6:	f7ff f923 	bl	8005b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068ea:	2300      	movs	r3, #0
 80068ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80068f2:	463b      	mov	r3, r7
 80068f4:	4619      	mov	r1, r3
 80068f6:	4806      	ldr	r0, [pc, #24]	@ (8006910 <MX_TIM4_Init+0xa4>)
 80068f8:	f005 ff94 	bl	800c824 <HAL_TIMEx_MasterConfigSynchronization>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8006902:	f7ff f915 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8006906:	bf00      	nop
 8006908:	3730      	adds	r7, #48	@ 0x30
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	20001dd4 	.word	0x20001dd4
 8006914:	40000800 	.word	0x40000800

08006918 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800691e:	f107 0310 	add.w	r3, r7, #16
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	605a      	str	r2, [r3, #4]
 8006928:	609a      	str	r2, [r3, #8]
 800692a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800692c:	1d3b      	adds	r3, r7, #4
 800692e:	2200      	movs	r2, #0
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	605a      	str	r2, [r3, #4]
 8006934:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8006936:	4b1d      	ldr	r3, [pc, #116]	@ (80069ac <MX_TIM5_Init+0x94>)
 8006938:	4a1d      	ldr	r2, [pc, #116]	@ (80069b0 <MX_TIM5_Init+0x98>)
 800693a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 800693c:	4b1b      	ldr	r3, [pc, #108]	@ (80069ac <MX_TIM5_Init+0x94>)
 800693e:	22a9      	movs	r2, #169	@ 0xa9
 8006940:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006942:	4b1a      	ldr	r3, [pc, #104]	@ (80069ac <MX_TIM5_Init+0x94>)
 8006944:	2200      	movs	r2, #0
 8006946:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8006948:	4b18      	ldr	r3, [pc, #96]	@ (80069ac <MX_TIM5_Init+0x94>)
 800694a:	f04f 32ff 	mov.w	r2, #4294967295
 800694e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006950:	4b16      	ldr	r3, [pc, #88]	@ (80069ac <MX_TIM5_Init+0x94>)
 8006952:	2200      	movs	r2, #0
 8006954:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006956:	4b15      	ldr	r3, [pc, #84]	@ (80069ac <MX_TIM5_Init+0x94>)
 8006958:	2200      	movs	r2, #0
 800695a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800695c:	4813      	ldr	r0, [pc, #76]	@ (80069ac <MX_TIM5_Init+0x94>)
 800695e:	f003 fff3 	bl	800a948 <HAL_TIM_Base_Init>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8006968:	f7ff f8e2 	bl	8005b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800696c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006970:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8006972:	f107 0310 	add.w	r3, r7, #16
 8006976:	4619      	mov	r1, r3
 8006978:	480c      	ldr	r0, [pc, #48]	@ (80069ac <MX_TIM5_Init+0x94>)
 800697a:	f004 ff6d 	bl	800b858 <HAL_TIM_ConfigClockSource>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8006984:	f7ff f8d4 	bl	8005b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006988:	2300      	movs	r3, #0
 800698a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006990:	1d3b      	adds	r3, r7, #4
 8006992:	4619      	mov	r1, r3
 8006994:	4805      	ldr	r0, [pc, #20]	@ (80069ac <MX_TIM5_Init+0x94>)
 8006996:	f005 ff45 	bl	800c824 <HAL_TIMEx_MasterConfigSynchronization>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80069a0:	f7ff f8c6 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80069a4:	bf00      	nop
 80069a6:	3720      	adds	r7, #32
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20001ea0 	.word	0x20001ea0
 80069b0:	40000c00 	.word	0x40000c00

080069b4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b09c      	sub	sp, #112	@ 0x70
 80069b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80069ba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	605a      	str	r2, [r3, #4]
 80069c4:	609a      	str	r2, [r3, #8]
 80069c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80069c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80069cc:	2200      	movs	r2, #0
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	605a      	str	r2, [r3, #4]
 80069d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80069d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80069d8:	2200      	movs	r2, #0
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	605a      	str	r2, [r3, #4]
 80069de:	609a      	str	r2, [r3, #8]
 80069e0:	60da      	str	r2, [r3, #12]
 80069e2:	611a      	str	r2, [r3, #16]
 80069e4:	615a      	str	r2, [r3, #20]
 80069e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80069e8:	1d3b      	adds	r3, r7, #4
 80069ea:	2234      	movs	r2, #52	@ 0x34
 80069ec:	2100      	movs	r1, #0
 80069ee:	4618      	mov	r0, r3
 80069f0:	f008 fd44 	bl	800f47c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80069f4:	4b51      	ldr	r3, [pc, #324]	@ (8006b3c <MX_TIM8_Init+0x188>)
 80069f6:	4a52      	ldr	r2, [pc, #328]	@ (8006b40 <MX_TIM8_Init+0x18c>)
 80069f8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80069fa:	4b50      	ldr	r3, [pc, #320]	@ (8006b3c <MX_TIM8_Init+0x188>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a00:	4b4e      	ldr	r3, [pc, #312]	@ (8006b3c <MX_TIM8_Init+0x188>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006a06:	4b4d      	ldr	r3, [pc, #308]	@ (8006b3c <MX_TIM8_Init+0x188>)
 8006a08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a0c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a0e:	4b4b      	ldr	r3, [pc, #300]	@ (8006b3c <MX_TIM8_Init+0x188>)
 8006a10:	2200      	movs	r2, #0
 8006a12:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006a14:	4b49      	ldr	r3, [pc, #292]	@ (8006b3c <MX_TIM8_Init+0x188>)
 8006a16:	2200      	movs	r2, #0
 8006a18:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a1a:	4b48      	ldr	r3, [pc, #288]	@ (8006b3c <MX_TIM8_Init+0x188>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8006a20:	4846      	ldr	r0, [pc, #280]	@ (8006b3c <MX_TIM8_Init+0x188>)
 8006a22:	f003 ff91 	bl	800a948 <HAL_TIM_Base_Init>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8006a2c:	f7ff f880 	bl	8005b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006a30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a34:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8006a36:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	483f      	ldr	r0, [pc, #252]	@ (8006b3c <MX_TIM8_Init+0x188>)
 8006a3e:	f004 ff0b 	bl	800b858 <HAL_TIM_ConfigClockSource>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8006a48:	f7ff f872 	bl	8005b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8006a4c:	483b      	ldr	r0, [pc, #236]	@ (8006b3c <MX_TIM8_Init+0x188>)
 8006a4e:	f004 f8c7 	bl	800abe0 <HAL_TIM_PWM_Init>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8006a58:	f7ff f86a 	bl	8005b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006a60:	2300      	movs	r3, #0
 8006a62:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006a64:	2300      	movs	r3, #0
 8006a66:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8006a68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4833      	ldr	r0, [pc, #204]	@ (8006b3c <MX_TIM8_Init+0x188>)
 8006a70:	f005 fed8 	bl	800c824 <HAL_TIMEx_MasterConfigSynchronization>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8006a7a:	f7ff f859 	bl	8005b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006a7e:	2360      	movs	r3, #96	@ 0x60
 8006a80:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006a86:	2300      	movs	r3, #0
 8006a88:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006a92:	2300      	movs	r3, #0
 8006a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006a96:	2300      	movs	r3, #0
 8006a98:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006a9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	4826      	ldr	r0, [pc, #152]	@ (8006b3c <MX_TIM8_Init+0x188>)
 8006aa4:	f004 fdc4 	bl	800b630 <HAL_TIM_PWM_ConfigChannel>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8006aae:	f7ff f83f 	bl	8005b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006ab2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006ab6:	2204      	movs	r2, #4
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4820      	ldr	r0, [pc, #128]	@ (8006b3c <MX_TIM8_Init+0x188>)
 8006abc:	f004 fdb8 	bl	800b630 <HAL_TIM_PWM_ConfigChannel>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8006ac6:	f7ff f833 	bl	8005b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8006aca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8006ace:	2208      	movs	r2, #8
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	481a      	ldr	r0, [pc, #104]	@ (8006b3c <MX_TIM8_Init+0x188>)
 8006ad4:	f004 fdac 	bl	800b630 <HAL_TIM_PWM_ConfigChannel>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8006ade:	f7ff f827 	bl	8005b30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006aee:	2300      	movs	r3, #0
 8006af0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006af2:	2300      	movs	r3, #0
 8006af4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006af6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006afa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8006b00:	2300      	movs	r3, #0
 8006b02:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006b04:	2300      	movs	r3, #0
 8006b06:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006b08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006b12:	2300      	movs	r3, #0
 8006b14:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006b16:	2300      	movs	r3, #0
 8006b18:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8006b1a:	1d3b      	adds	r3, r7, #4
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4807      	ldr	r0, [pc, #28]	@ (8006b3c <MX_TIM8_Init+0x188>)
 8006b20:	f005 ff16 	bl	800c950 <HAL_TIMEx_ConfigBreakDeadTime>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 8006b2a:	f7ff f801 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8006b2e:	4803      	ldr	r0, [pc, #12]	@ (8006b3c <MX_TIM8_Init+0x188>)
 8006b30:	f000 f94a 	bl	8006dc8 <HAL_TIM_MspPostInit>

}
 8006b34:	bf00      	nop
 8006b36:	3770      	adds	r7, #112	@ 0x70
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	20001f6c 	.word	0x20001f6c
 8006b40:	40013400 	.word	0x40013400

08006b44 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006b48:	4b14      	ldr	r3, [pc, #80]	@ (8006b9c <MX_TIM16_Init+0x58>)
 8006b4a:	4a15      	ldr	r2, [pc, #84]	@ (8006ba0 <MX_TIM16_Init+0x5c>)
 8006b4c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8006b4e:	4b13      	ldr	r3, [pc, #76]	@ (8006b9c <MX_TIM16_Init+0x58>)
 8006b50:	22a9      	movs	r2, #169	@ 0xa9
 8006b52:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b54:	4b11      	ldr	r3, [pc, #68]	@ (8006b9c <MX_TIM16_Init+0x58>)
 8006b56:	2200      	movs	r2, #0
 8006b58:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8006b5a:	4b10      	ldr	r3, [pc, #64]	@ (8006b9c <MX_TIM16_Init+0x58>)
 8006b5c:	f240 4279 	movw	r2, #1145	@ 0x479
 8006b60:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b62:	4b0e      	ldr	r3, [pc, #56]	@ (8006b9c <MX_TIM16_Init+0x58>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006b68:	4b0c      	ldr	r3, [pc, #48]	@ (8006b9c <MX_TIM16_Init+0x58>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006b9c <MX_TIM16_Init+0x58>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006b74:	4809      	ldr	r0, [pc, #36]	@ (8006b9c <MX_TIM16_Init+0x58>)
 8006b76:	f003 fee7 	bl	800a948 <HAL_TIM_Base_Init>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8006b80:	f7fe ffd6 	bl	8005b30 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8006b84:	2108      	movs	r1, #8
 8006b86:	4805      	ldr	r0, [pc, #20]	@ (8006b9c <MX_TIM16_Init+0x58>)
 8006b88:	f004 f9a0 	bl	800aecc <HAL_TIM_OnePulse_Init>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8006b92:	f7fe ffcd 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8006b96:	bf00      	nop
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20002038 	.word	0x20002038
 8006ba0:	40014400 	.word	0x40014400

08006ba4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8006be8 <HAL_TIM_PWM_MspInit+0x44>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d113      	bne.n	8006bde <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006bec <HAL_TIM_PWM_MspInit+0x48>)
 8006bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bba:	4a0c      	ldr	r2, [pc, #48]	@ (8006bec <HAL_TIM_PWM_MspInit+0x48>)
 8006bbc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006bc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8006bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006bec <HAL_TIM_PWM_MspInit+0x48>)
 8006bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bca:	60fb      	str	r3, [r7, #12]
 8006bcc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	2019      	movs	r0, #25
 8006bd4:	f002 f957 	bl	8008e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006bd8:	2019      	movs	r0, #25
 8006bda:	f002 f96e 	bl	8008eba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8006bde:	bf00      	nop
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	40012c00 	.word	0x40012c00
 8006bec:	40021000 	.word	0x40021000

08006bf0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c00:	d114      	bne.n	8006c2c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006c02:	4b2b      	ldr	r3, [pc, #172]	@ (8006cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8006c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c06:	4a2a      	ldr	r2, [pc, #168]	@ (8006cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8006c08:	f043 0301 	orr.w	r3, r3, #1
 8006c0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c0e:	4b28      	ldr	r3, [pc, #160]	@ (8006cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8006c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	201c      	movs	r0, #28
 8006c20:	f002 f931 	bl	8008e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006c24:	201c      	movs	r0, #28
 8006c26:	f002 f948 	bl	8008eba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8006c2a:	e03c      	b.n	8006ca6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a20      	ldr	r2, [pc, #128]	@ (8006cb4 <HAL_TIM_Base_MspInit+0xc4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d10c      	bne.n	8006c50 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006c36:	4b1e      	ldr	r3, [pc, #120]	@ (8006cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8006c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c3a:	4a1d      	ldr	r2, [pc, #116]	@ (8006cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8006c3c:	f043 0308 	orr.w	r3, r3, #8
 8006c40:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c42:	4b1b      	ldr	r3, [pc, #108]	@ (8006cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8006c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	613b      	str	r3, [r7, #16]
 8006c4c:	693b      	ldr	r3, [r7, #16]
}
 8006c4e:	e02a      	b.n	8006ca6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a18      	ldr	r2, [pc, #96]	@ (8006cb8 <HAL_TIM_Base_MspInit+0xc8>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d10c      	bne.n	8006c74 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006c5a:	4b15      	ldr	r3, [pc, #84]	@ (8006cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8006c5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c5e:	4a14      	ldr	r2, [pc, #80]	@ (8006cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8006c60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006c64:	6613      	str	r3, [r2, #96]	@ 0x60
 8006c66:	4b12      	ldr	r3, [pc, #72]	@ (8006cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8006c68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	68fb      	ldr	r3, [r7, #12]
}
 8006c72:	e018      	b.n	8006ca6 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a10      	ldr	r2, [pc, #64]	@ (8006cbc <HAL_TIM_Base_MspInit+0xcc>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d113      	bne.n	8006ca6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8006c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c82:	4a0b      	ldr	r2, [pc, #44]	@ (8006cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8006c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c88:	6613      	str	r3, [r2, #96]	@ 0x60
 8006c8a:	4b09      	ldr	r3, [pc, #36]	@ (8006cb0 <HAL_TIM_Base_MspInit+0xc0>)
 8006c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c92:	60bb      	str	r3, [r7, #8]
 8006c94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006c96:	2200      	movs	r2, #0
 8006c98:	2100      	movs	r1, #0
 8006c9a:	2019      	movs	r0, #25
 8006c9c:	f002 f8f3 	bl	8008e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006ca0:	2019      	movs	r0, #25
 8006ca2:	f002 f90a 	bl	8008eba <HAL_NVIC_EnableIRQ>
}
 8006ca6:	bf00      	nop
 8006ca8:	3718      	adds	r7, #24
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	40000c00 	.word	0x40000c00
 8006cb8:	40013400 	.word	0x40013400
 8006cbc:	40014400 	.word	0x40014400

08006cc0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08c      	sub	sp, #48	@ 0x30
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cc8:	f107 031c 	add.w	r3, r7, #28
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	605a      	str	r2, [r3, #4]
 8006cd2:	609a      	str	r2, [r3, #8]
 8006cd4:	60da      	str	r2, [r3, #12]
 8006cd6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a37      	ldr	r2, [pc, #220]	@ (8006dbc <HAL_TIM_Encoder_MspInit+0xfc>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d131      	bne.n	8006d46 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006ce2:	4b37      	ldr	r3, [pc, #220]	@ (8006dc0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ce6:	4a36      	ldr	r2, [pc, #216]	@ (8006dc0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006ce8:	f043 0302 	orr.w	r3, r3, #2
 8006cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8006cee:	4b34      	ldr	r3, [pc, #208]	@ (8006dc0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	61bb      	str	r3, [r7, #24]
 8006cf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cfa:	4b31      	ldr	r3, [pc, #196]	@ (8006dc0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cfe:	4a30      	ldr	r2, [pc, #192]	@ (8006dc0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006d00:	f043 0301 	orr.w	r3, r3, #1
 8006d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d06:	4b2e      	ldr	r3, [pc, #184]	@ (8006dc0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006d12:	23c0      	movs	r3, #192	@ 0xc0
 8006d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d16:	2302      	movs	r3, #2
 8006d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006d22:	2302      	movs	r3, #2
 8006d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d26:	f107 031c 	add.w	r3, r7, #28
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006d30:	f002 fc10 	bl	8009554 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006d34:	2200      	movs	r2, #0
 8006d36:	2100      	movs	r1, #0
 8006d38:	201d      	movs	r0, #29
 8006d3a:	f002 f8a4 	bl	8008e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006d3e:	201d      	movs	r0, #29
 8006d40:	f002 f8bb 	bl	8008eba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8006d44:	e036      	b.n	8006db4 <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM4)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006dc4 <HAL_TIM_Encoder_MspInit+0x104>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d131      	bne.n	8006db4 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006d50:	4b1b      	ldr	r3, [pc, #108]	@ (8006dc0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d54:	4a1a      	ldr	r2, [pc, #104]	@ (8006dc0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006d56:	f043 0304 	orr.w	r3, r3, #4
 8006d5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d5c:	4b18      	ldr	r3, [pc, #96]	@ (8006dc0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	613b      	str	r3, [r7, #16]
 8006d66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d68:	4b15      	ldr	r3, [pc, #84]	@ (8006dc0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d6c:	4a14      	ldr	r2, [pc, #80]	@ (8006dc0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006d6e:	f043 0301 	orr.w	r3, r3, #1
 8006d72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d74:	4b12      	ldr	r3, [pc, #72]	@ (8006dc0 <HAL_TIM_Encoder_MspInit+0x100>)
 8006d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	60fb      	str	r3, [r7, #12]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006d80:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d86:	2302      	movs	r3, #2
 8006d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8006d92:	230a      	movs	r3, #10
 8006d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d96:	f107 031c 	add.w	r3, r7, #28
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006da0:	f002 fbd8 	bl	8009554 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8006da4:	2200      	movs	r2, #0
 8006da6:	2100      	movs	r1, #0
 8006da8:	201e      	movs	r0, #30
 8006daa:	f002 f86c 	bl	8008e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006dae:	201e      	movs	r0, #30
 8006db0:	f002 f883 	bl	8008eba <HAL_NVIC_EnableIRQ>
}
 8006db4:	bf00      	nop
 8006db6:	3730      	adds	r7, #48	@ 0x30
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	40000400 	.word	0x40000400
 8006dc0:	40021000 	.word	0x40021000
 8006dc4:	40000800 	.word	0x40000800

08006dc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08a      	sub	sp, #40	@ 0x28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dd0:	f107 0314 	add.w	r3, r7, #20
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	605a      	str	r2, [r3, #4]
 8006dda:	609a      	str	r2, [r3, #8]
 8006ddc:	60da      	str	r2, [r3, #12]
 8006dde:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a30      	ldr	r2, [pc, #192]	@ (8006ea8 <HAL_TIM_MspPostInit+0xe0>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d11c      	bne.n	8006e24 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006dea:	4b30      	ldr	r3, [pc, #192]	@ (8006eac <HAL_TIM_MspPostInit+0xe4>)
 8006dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dee:	4a2f      	ldr	r2, [pc, #188]	@ (8006eac <HAL_TIM_MspPostInit+0xe4>)
 8006df0:	f043 0304 	orr.w	r3, r3, #4
 8006df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006df6:	4b2d      	ldr	r3, [pc, #180]	@ (8006eac <HAL_TIM_MspPostInit+0xe4>)
 8006df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dfa:	f003 0304 	and.w	r3, r3, #4
 8006dfe:	613b      	str	r3, [r7, #16]
 8006e00:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006e02:	2308      	movs	r3, #8
 8006e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e06:	2302      	movs	r3, #2
 8006e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8006e12:	2302      	movs	r3, #2
 8006e14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e16:	f107 0314 	add.w	r3, r7, #20
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	4824      	ldr	r0, [pc, #144]	@ (8006eb0 <HAL_TIM_MspPostInit+0xe8>)
 8006e1e:	f002 fb99 	bl	8009554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8006e22:	e03d      	b.n	8006ea0 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM8)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a22      	ldr	r2, [pc, #136]	@ (8006eb4 <HAL_TIM_MspPostInit+0xec>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d138      	bne.n	8006ea0 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8006eac <HAL_TIM_MspPostInit+0xe4>)
 8006e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e32:	4a1e      	ldr	r2, [pc, #120]	@ (8006eac <HAL_TIM_MspPostInit+0xe4>)
 8006e34:	f043 0304 	orr.w	r3, r3, #4
 8006e38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8006eac <HAL_TIM_MspPostInit+0xe4>)
 8006e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e3e:	f003 0304 	and.w	r3, r3, #4
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e46:	4b19      	ldr	r3, [pc, #100]	@ (8006eac <HAL_TIM_MspPostInit+0xe4>)
 8006e48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e4a:	4a18      	ldr	r2, [pc, #96]	@ (8006eac <HAL_TIM_MspPostInit+0xe4>)
 8006e4c:	f043 0302 	orr.w	r3, r3, #2
 8006e50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e52:	4b16      	ldr	r3, [pc, #88]	@ (8006eac <HAL_TIM_MspPostInit+0xe4>)
 8006e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e56:	f003 0302 	and.w	r3, r3, #2
 8006e5a:	60bb      	str	r3, [r7, #8]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006e5e:	23c0      	movs	r3, #192	@ 0xc0
 8006e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e62:	2302      	movs	r3, #2
 8006e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8006e6e:	2304      	movs	r3, #4
 8006e70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e72:	f107 0314 	add.w	r3, r7, #20
 8006e76:	4619      	mov	r1, r3
 8006e78:	480d      	ldr	r0, [pc, #52]	@ (8006eb0 <HAL_TIM_MspPostInit+0xe8>)
 8006e7a:	f002 fb6b 	bl	8009554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006e7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e84:	2302      	movs	r3, #2
 8006e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8006e90:	230a      	movs	r3, #10
 8006e92:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e94:	f107 0314 	add.w	r3, r7, #20
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4807      	ldr	r0, [pc, #28]	@ (8006eb8 <HAL_TIM_MspPostInit+0xf0>)
 8006e9c:	f002 fb5a 	bl	8009554 <HAL_GPIO_Init>
}
 8006ea0:	bf00      	nop
 8006ea2:	3728      	adds	r7, #40	@ 0x28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	40012c00 	.word	0x40012c00
 8006eac:	40021000 	.word	0x40021000
 8006eb0:	48000800 	.word	0x48000800
 8006eb4:	40013400 	.word	0x40013400
 8006eb8:	48000400 	.word	0x48000400

08006ebc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006ec0:	4b20      	ldr	r3, [pc, #128]	@ (8006f44 <MX_LPUART1_UART_Init+0x88>)
 8006ec2:	4a21      	ldr	r2, [pc, #132]	@ (8006f48 <MX_LPUART1_UART_Init+0x8c>)
 8006ec4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8006ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8006f44 <MX_LPUART1_UART_Init+0x88>)
 8006ec8:	4a20      	ldr	r2, [pc, #128]	@ (8006f4c <MX_LPUART1_UART_Init+0x90>)
 8006eca:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8006f44 <MX_LPUART1_UART_Init+0x88>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8006f44 <MX_LPUART1_UART_Init+0x88>)
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8006f44 <MX_LPUART1_UART_Init+0x88>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006ede:	4b19      	ldr	r3, [pc, #100]	@ (8006f44 <MX_LPUART1_UART_Init+0x88>)
 8006ee0:	220c      	movs	r2, #12
 8006ee2:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006ee4:	4b17      	ldr	r3, [pc, #92]	@ (8006f44 <MX_LPUART1_UART_Init+0x88>)
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006eea:	4b16      	ldr	r3, [pc, #88]	@ (8006f44 <MX_LPUART1_UART_Init+0x88>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006ef0:	4b14      	ldr	r3, [pc, #80]	@ (8006f44 <MX_LPUART1_UART_Init+0x88>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006ef6:	4b13      	ldr	r3, [pc, #76]	@ (8006f44 <MX_LPUART1_UART_Init+0x88>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006efc:	4811      	ldr	r0, [pc, #68]	@ (8006f44 <MX_LPUART1_UART_Init+0x88>)
 8006efe:	f005 fe0b 	bl	800cb18 <HAL_UART_Init>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8006f08:	f7fe fe12 	bl	8005b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	480d      	ldr	r0, [pc, #52]	@ (8006f44 <MX_LPUART1_UART_Init+0x88>)
 8006f10:	f007 fc3d 	bl	800e78e <HAL_UARTEx_SetTxFifoThreshold>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8006f1a:	f7fe fe09 	bl	8005b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f1e:	2100      	movs	r1, #0
 8006f20:	4808      	ldr	r0, [pc, #32]	@ (8006f44 <MX_LPUART1_UART_Init+0x88>)
 8006f22:	f007 fc72 	bl	800e80a <HAL_UARTEx_SetRxFifoThreshold>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8006f2c:	f7fe fe00 	bl	8005b30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8006f30:	4804      	ldr	r0, [pc, #16]	@ (8006f44 <MX_LPUART1_UART_Init+0x88>)
 8006f32:	f007 fbf3 	bl	800e71c <HAL_UARTEx_DisableFifoMode>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8006f3c:	f7fe fdf8 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006f40:	bf00      	nop
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	20002104 	.word	0x20002104
 8006f48:	40008000 	.word	0x40008000
 8006f4c:	001e8480 	.word	0x001e8480

08006f50 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006f54:	4b23      	ldr	r3, [pc, #140]	@ (8006fe4 <MX_USART2_UART_Init+0x94>)
 8006f56:	4a24      	ldr	r2, [pc, #144]	@ (8006fe8 <MX_USART2_UART_Init+0x98>)
 8006f58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8006f5a:	4b22      	ldr	r3, [pc, #136]	@ (8006fe4 <MX_USART2_UART_Init+0x94>)
 8006f5c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8006f60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8006f62:	4b20      	ldr	r3, [pc, #128]	@ (8006fe4 <MX_USART2_UART_Init+0x94>)
 8006f64:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006f68:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8006fe4 <MX_USART2_UART_Init+0x94>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8006f70:	4b1c      	ldr	r3, [pc, #112]	@ (8006fe4 <MX_USART2_UART_Init+0x94>)
 8006f72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006f76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006f78:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe4 <MX_USART2_UART_Init+0x94>)
 8006f7a:	220c      	movs	r2, #12
 8006f7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f7e:	4b19      	ldr	r3, [pc, #100]	@ (8006fe4 <MX_USART2_UART_Init+0x94>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f84:	4b17      	ldr	r3, [pc, #92]	@ (8006fe4 <MX_USART2_UART_Init+0x94>)
 8006f86:	2200      	movs	r2, #0
 8006f88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f8a:	4b16      	ldr	r3, [pc, #88]	@ (8006fe4 <MX_USART2_UART_Init+0x94>)
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006f90:	4b14      	ldr	r3, [pc, #80]	@ (8006fe4 <MX_USART2_UART_Init+0x94>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f96:	4b13      	ldr	r3, [pc, #76]	@ (8006fe4 <MX_USART2_UART_Init+0x94>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006f9c:	4811      	ldr	r0, [pc, #68]	@ (8006fe4 <MX_USART2_UART_Init+0x94>)
 8006f9e:	f005 fdbb 	bl	800cb18 <HAL_UART_Init>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8006fa8:	f7fe fdc2 	bl	8005b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006fac:	2100      	movs	r1, #0
 8006fae:	480d      	ldr	r0, [pc, #52]	@ (8006fe4 <MX_USART2_UART_Init+0x94>)
 8006fb0:	f007 fbed 	bl	800e78e <HAL_UARTEx_SetTxFifoThreshold>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d001      	beq.n	8006fbe <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8006fba:	f7fe fdb9 	bl	8005b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006fbe:	2100      	movs	r1, #0
 8006fc0:	4808      	ldr	r0, [pc, #32]	@ (8006fe4 <MX_USART2_UART_Init+0x94>)
 8006fc2:	f007 fc22 	bl	800e80a <HAL_UARTEx_SetRxFifoThreshold>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d001      	beq.n	8006fd0 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8006fcc:	f7fe fdb0 	bl	8005b30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006fd0:	4804      	ldr	r0, [pc, #16]	@ (8006fe4 <MX_USART2_UART_Init+0x94>)
 8006fd2:	f007 fba3 	bl	800e71c <HAL_UARTEx_DisableFifoMode>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8006fdc:	f7fe fda8 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006fe0:	bf00      	nop
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	200021d0 	.word	0x200021d0
 8006fe8:	40004400 	.word	0x40004400

08006fec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b0a0      	sub	sp, #128	@ 0x80
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ff4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	605a      	str	r2, [r3, #4]
 8006ffe:	609a      	str	r2, [r3, #8]
 8007000:	60da      	str	r2, [r3, #12]
 8007002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007004:	f107 0318 	add.w	r3, r7, #24
 8007008:	2254      	movs	r2, #84	@ 0x54
 800700a:	2100      	movs	r1, #0
 800700c:	4618      	mov	r0, r3
 800700e:	f008 fa35 	bl	800f47c <memset>
  if(uartHandle->Instance==LPUART1)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a99      	ldr	r2, [pc, #612]	@ (800727c <HAL_UART_MspInit+0x290>)
 8007018:	4293      	cmp	r3, r2
 800701a:	f040 8093 	bne.w	8007144 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800701e:	2320      	movs	r3, #32
 8007020:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007022:	2300      	movs	r3, #0
 8007024:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007026:	f107 0318 	add.w	r3, r7, #24
 800702a:	4618      	mov	r0, r3
 800702c:	f003 fa3e 	bl	800a4ac <HAL_RCCEx_PeriphCLKConfig>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8007036:	f7fe fd7b 	bl	8005b30 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800703a:	4b91      	ldr	r3, [pc, #580]	@ (8007280 <HAL_UART_MspInit+0x294>)
 800703c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800703e:	4a90      	ldr	r2, [pc, #576]	@ (8007280 <HAL_UART_MspInit+0x294>)
 8007040:	f043 0301 	orr.w	r3, r3, #1
 8007044:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8007046:	4b8e      	ldr	r3, [pc, #568]	@ (8007280 <HAL_UART_MspInit+0x294>)
 8007048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007052:	4b8b      	ldr	r3, [pc, #556]	@ (8007280 <HAL_UART_MspInit+0x294>)
 8007054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007056:	4a8a      	ldr	r2, [pc, #552]	@ (8007280 <HAL_UART_MspInit+0x294>)
 8007058:	f043 0302 	orr.w	r3, r3, #2
 800705c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800705e:	4b88      	ldr	r3, [pc, #544]	@ (8007280 <HAL_UART_MspInit+0x294>)
 8007060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	613b      	str	r3, [r7, #16]
 8007068:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800706a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800706e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007070:	2302      	movs	r3, #2
 8007072:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007074:	2300      	movs	r3, #0
 8007076:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007078:	2300      	movs	r3, #0
 800707a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800707c:	2308      	movs	r3, #8
 800707e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007080:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8007084:	4619      	mov	r1, r3
 8007086:	487f      	ldr	r0, [pc, #508]	@ (8007284 <HAL_UART_MspInit+0x298>)
 8007088:	f002 fa64 	bl	8009554 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 800708c:	4b7e      	ldr	r3, [pc, #504]	@ (8007288 <HAL_UART_MspInit+0x29c>)
 800708e:	4a7f      	ldr	r2, [pc, #508]	@ (800728c <HAL_UART_MspInit+0x2a0>)
 8007090:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8007092:	4b7d      	ldr	r3, [pc, #500]	@ (8007288 <HAL_UART_MspInit+0x29c>)
 8007094:	2222      	movs	r2, #34	@ 0x22
 8007096:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007098:	4b7b      	ldr	r3, [pc, #492]	@ (8007288 <HAL_UART_MspInit+0x29c>)
 800709a:	2200      	movs	r2, #0
 800709c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800709e:	4b7a      	ldr	r3, [pc, #488]	@ (8007288 <HAL_UART_MspInit+0x29c>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80070a4:	4b78      	ldr	r3, [pc, #480]	@ (8007288 <HAL_UART_MspInit+0x29c>)
 80070a6:	2280      	movs	r2, #128	@ 0x80
 80070a8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070aa:	4b77      	ldr	r3, [pc, #476]	@ (8007288 <HAL_UART_MspInit+0x29c>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80070b0:	4b75      	ldr	r3, [pc, #468]	@ (8007288 <HAL_UART_MspInit+0x29c>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80070b6:	4b74      	ldr	r3, [pc, #464]	@ (8007288 <HAL_UART_MspInit+0x29c>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80070bc:	4b72      	ldr	r3, [pc, #456]	@ (8007288 <HAL_UART_MspInit+0x29c>)
 80070be:	2200      	movs	r2, #0
 80070c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80070c2:	4871      	ldr	r0, [pc, #452]	@ (8007288 <HAL_UART_MspInit+0x29c>)
 80070c4:	f001 ff14 	bl	8008ef0 <HAL_DMA_Init>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80070ce:	f7fe fd2f 	bl	8005b30 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a6c      	ldr	r2, [pc, #432]	@ (8007288 <HAL_UART_MspInit+0x29c>)
 80070d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80070da:	4a6b      	ldr	r2, [pc, #428]	@ (8007288 <HAL_UART_MspInit+0x29c>)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 80070e0:	4b6b      	ldr	r3, [pc, #428]	@ (8007290 <HAL_UART_MspInit+0x2a4>)
 80070e2:	4a6c      	ldr	r2, [pc, #432]	@ (8007294 <HAL_UART_MspInit+0x2a8>)
 80070e4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80070e6:	4b6a      	ldr	r3, [pc, #424]	@ (8007290 <HAL_UART_MspInit+0x2a4>)
 80070e8:	2223      	movs	r2, #35	@ 0x23
 80070ea:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070ec:	4b68      	ldr	r3, [pc, #416]	@ (8007290 <HAL_UART_MspInit+0x2a4>)
 80070ee:	2210      	movs	r2, #16
 80070f0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070f2:	4b67      	ldr	r3, [pc, #412]	@ (8007290 <HAL_UART_MspInit+0x2a4>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80070f8:	4b65      	ldr	r3, [pc, #404]	@ (8007290 <HAL_UART_MspInit+0x2a4>)
 80070fa:	2280      	movs	r2, #128	@ 0x80
 80070fc:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80070fe:	4b64      	ldr	r3, [pc, #400]	@ (8007290 <HAL_UART_MspInit+0x2a4>)
 8007100:	2200      	movs	r2, #0
 8007102:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007104:	4b62      	ldr	r3, [pc, #392]	@ (8007290 <HAL_UART_MspInit+0x2a4>)
 8007106:	2200      	movs	r2, #0
 8007108:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800710a:	4b61      	ldr	r3, [pc, #388]	@ (8007290 <HAL_UART_MspInit+0x2a4>)
 800710c:	2200      	movs	r2, #0
 800710e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007110:	4b5f      	ldr	r3, [pc, #380]	@ (8007290 <HAL_UART_MspInit+0x2a4>)
 8007112:	2200      	movs	r2, #0
 8007114:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8007116:	485e      	ldr	r0, [pc, #376]	@ (8007290 <HAL_UART_MspInit+0x2a4>)
 8007118:	f001 feea 	bl	8008ef0 <HAL_DMA_Init>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8007122:	f7fe fd05 	bl	8005b30 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a59      	ldr	r2, [pc, #356]	@ (8007290 <HAL_UART_MspInit+0x2a4>)
 800712a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800712c:	4a58      	ldr	r2, [pc, #352]	@ (8007290 <HAL_UART_MspInit+0x2a4>)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8007132:	2200      	movs	r2, #0
 8007134:	2100      	movs	r1, #0
 8007136:	205b      	movs	r0, #91	@ 0x5b
 8007138:	f001 fea5 	bl	8008e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800713c:	205b      	movs	r0, #91	@ 0x5b
 800713e:	f001 febc 	bl	8008eba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007142:	e097      	b.n	8007274 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a53      	ldr	r2, [pc, #332]	@ (8007298 <HAL_UART_MspInit+0x2ac>)
 800714a:	4293      	cmp	r3, r2
 800714c:	f040 8092 	bne.w	8007274 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8007150:	2302      	movs	r3, #2
 8007152:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8007154:	2300      	movs	r3, #0
 8007156:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007158:	f107 0318 	add.w	r3, r7, #24
 800715c:	4618      	mov	r0, r3
 800715e:	f003 f9a5 	bl	800a4ac <HAL_RCCEx_PeriphCLKConfig>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <HAL_UART_MspInit+0x180>
      Error_Handler();
 8007168:	f7fe fce2 	bl	8005b30 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800716c:	4b44      	ldr	r3, [pc, #272]	@ (8007280 <HAL_UART_MspInit+0x294>)
 800716e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007170:	4a43      	ldr	r2, [pc, #268]	@ (8007280 <HAL_UART_MspInit+0x294>)
 8007172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007176:	6593      	str	r3, [r2, #88]	@ 0x58
 8007178:	4b41      	ldr	r3, [pc, #260]	@ (8007280 <HAL_UART_MspInit+0x294>)
 800717a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800717c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007180:	60fb      	str	r3, [r7, #12]
 8007182:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007184:	4b3e      	ldr	r3, [pc, #248]	@ (8007280 <HAL_UART_MspInit+0x294>)
 8007186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007188:	4a3d      	ldr	r2, [pc, #244]	@ (8007280 <HAL_UART_MspInit+0x294>)
 800718a:	f043 0301 	orr.w	r3, r3, #1
 800718e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007190:	4b3b      	ldr	r3, [pc, #236]	@ (8007280 <HAL_UART_MspInit+0x294>)
 8007192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	60bb      	str	r3, [r7, #8]
 800719a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800719c:	230c      	movs	r3, #12
 800719e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071a0:	2302      	movs	r3, #2
 80071a2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a4:	2300      	movs	r3, #0
 80071a6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071a8:	2300      	movs	r3, #0
 80071aa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80071ac:	2307      	movs	r3, #7
 80071ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071b0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80071b4:	4619      	mov	r1, r3
 80071b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80071ba:	f002 f9cb 	bl	8009554 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80071be:	4b37      	ldr	r3, [pc, #220]	@ (800729c <HAL_UART_MspInit+0x2b0>)
 80071c0:	4a37      	ldr	r2, [pc, #220]	@ (80072a0 <HAL_UART_MspInit+0x2b4>)
 80071c2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80071c4:	4b35      	ldr	r3, [pc, #212]	@ (800729c <HAL_UART_MspInit+0x2b0>)
 80071c6:	221a      	movs	r2, #26
 80071c8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80071ca:	4b34      	ldr	r3, [pc, #208]	@ (800729c <HAL_UART_MspInit+0x2b0>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80071d0:	4b32      	ldr	r3, [pc, #200]	@ (800729c <HAL_UART_MspInit+0x2b0>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80071d6:	4b31      	ldr	r3, [pc, #196]	@ (800729c <HAL_UART_MspInit+0x2b0>)
 80071d8:	2280      	movs	r2, #128	@ 0x80
 80071da:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80071dc:	4b2f      	ldr	r3, [pc, #188]	@ (800729c <HAL_UART_MspInit+0x2b0>)
 80071de:	2200      	movs	r2, #0
 80071e0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80071e2:	4b2e      	ldr	r3, [pc, #184]	@ (800729c <HAL_UART_MspInit+0x2b0>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80071e8:	4b2c      	ldr	r3, [pc, #176]	@ (800729c <HAL_UART_MspInit+0x2b0>)
 80071ea:	2200      	movs	r2, #0
 80071ec:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80071ee:	4b2b      	ldr	r3, [pc, #172]	@ (800729c <HAL_UART_MspInit+0x2b0>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80071f4:	4829      	ldr	r0, [pc, #164]	@ (800729c <HAL_UART_MspInit+0x2b0>)
 80071f6:	f001 fe7b 	bl	8008ef0 <HAL_DMA_Init>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d001      	beq.n	8007204 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8007200:	f7fe fc96 	bl	8005b30 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a25      	ldr	r2, [pc, #148]	@ (800729c <HAL_UART_MspInit+0x2b0>)
 8007208:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800720c:	4a23      	ldr	r2, [pc, #140]	@ (800729c <HAL_UART_MspInit+0x2b0>)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8007212:	4b24      	ldr	r3, [pc, #144]	@ (80072a4 <HAL_UART_MspInit+0x2b8>)
 8007214:	4a24      	ldr	r2, [pc, #144]	@ (80072a8 <HAL_UART_MspInit+0x2bc>)
 8007216:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8007218:	4b22      	ldr	r3, [pc, #136]	@ (80072a4 <HAL_UART_MspInit+0x2b8>)
 800721a:	221b      	movs	r2, #27
 800721c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800721e:	4b21      	ldr	r3, [pc, #132]	@ (80072a4 <HAL_UART_MspInit+0x2b8>)
 8007220:	2210      	movs	r2, #16
 8007222:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007224:	4b1f      	ldr	r3, [pc, #124]	@ (80072a4 <HAL_UART_MspInit+0x2b8>)
 8007226:	2200      	movs	r2, #0
 8007228:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800722a:	4b1e      	ldr	r3, [pc, #120]	@ (80072a4 <HAL_UART_MspInit+0x2b8>)
 800722c:	2280      	movs	r2, #128	@ 0x80
 800722e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007230:	4b1c      	ldr	r3, [pc, #112]	@ (80072a4 <HAL_UART_MspInit+0x2b8>)
 8007232:	2200      	movs	r2, #0
 8007234:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007236:	4b1b      	ldr	r3, [pc, #108]	@ (80072a4 <HAL_UART_MspInit+0x2b8>)
 8007238:	2200      	movs	r2, #0
 800723a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800723c:	4b19      	ldr	r3, [pc, #100]	@ (80072a4 <HAL_UART_MspInit+0x2b8>)
 800723e:	2200      	movs	r2, #0
 8007240:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007242:	4b18      	ldr	r3, [pc, #96]	@ (80072a4 <HAL_UART_MspInit+0x2b8>)
 8007244:	2200      	movs	r2, #0
 8007246:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007248:	4816      	ldr	r0, [pc, #88]	@ (80072a4 <HAL_UART_MspInit+0x2b8>)
 800724a:	f001 fe51 	bl	8008ef0 <HAL_DMA_Init>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8007254:	f7fe fc6c 	bl	8005b30 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a12      	ldr	r2, [pc, #72]	@ (80072a4 <HAL_UART_MspInit+0x2b8>)
 800725c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800725e:	4a11      	ldr	r2, [pc, #68]	@ (80072a4 <HAL_UART_MspInit+0x2b8>)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007264:	2200      	movs	r2, #0
 8007266:	2100      	movs	r1, #0
 8007268:	2026      	movs	r0, #38	@ 0x26
 800726a:	f001 fe0c 	bl	8008e86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800726e:	2026      	movs	r0, #38	@ 0x26
 8007270:	f001 fe23 	bl	8008eba <HAL_NVIC_EnableIRQ>
}
 8007274:	bf00      	nop
 8007276:	3780      	adds	r7, #128	@ 0x80
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	40008000 	.word	0x40008000
 8007280:	40021000 	.word	0x40021000
 8007284:	48000400 	.word	0x48000400
 8007288:	2000229c 	.word	0x2000229c
 800728c:	40020044 	.word	0x40020044
 8007290:	200022fc 	.word	0x200022fc
 8007294:	40020058 	.word	0x40020058
 8007298:	40004400 	.word	0x40004400
 800729c:	2000235c 	.word	0x2000235c
 80072a0:	4002001c 	.word	0x4002001c
 80072a4:	200023bc 	.word	0x200023bc
 80072a8:	40020030 	.word	0x40020030

080072ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80072ac:	480d      	ldr	r0, [pc, #52]	@ (80072e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80072ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80072b0:	f7ff f992 	bl	80065d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80072b4:	480c      	ldr	r0, [pc, #48]	@ (80072e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80072b6:	490d      	ldr	r1, [pc, #52]	@ (80072ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80072b8:	4a0d      	ldr	r2, [pc, #52]	@ (80072f0 <LoopForever+0xe>)
  movs r3, #0
 80072ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80072bc:	e002      	b.n	80072c4 <LoopCopyDataInit>

080072be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80072be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80072c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80072c2:	3304      	adds	r3, #4

080072c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80072c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80072c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80072c8:	d3f9      	bcc.n	80072be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80072ca:	4a0a      	ldr	r2, [pc, #40]	@ (80072f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80072cc:	4c0a      	ldr	r4, [pc, #40]	@ (80072f8 <LoopForever+0x16>)
  movs r3, #0
 80072ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80072d0:	e001      	b.n	80072d6 <LoopFillZerobss>

080072d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80072d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80072d4:	3204      	adds	r2, #4

080072d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80072d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80072d8:	d3fb      	bcc.n	80072d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80072da:	f008 f8ed 	bl	800f4b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80072de:	f7fc feff 	bl	80040e0 <main>

080072e2 <LoopForever>:

LoopForever:
    b LoopForever
 80072e2:	e7fe      	b.n	80072e2 <LoopForever>
  ldr   r0, =_estack
 80072e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80072e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80072ec:	200003f0 	.word	0x200003f0
  ldr r2, =_sidata
 80072f0:	080105c4 	.word	0x080105c4
  ldr r2, =_sbss
 80072f4:	200003f0 	.word	0x200003f0
  ldr r4, =_ebss
 80072f8:	20002568 	.word	0x20002568

080072fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80072fc:	e7fe      	b.n	80072fc <ADC1_2_IRQHandler>

080072fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b082      	sub	sp, #8
 8007302:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007308:	2003      	movs	r0, #3
 800730a:	f001 fdb1 	bl	8008e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800730e:	2000      	movs	r0, #0
 8007310:	f000 f80e 	bl	8007330 <HAL_InitTick>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d002      	beq.n	8007320 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	71fb      	strb	r3, [r7, #7]
 800731e:	e001      	b.n	8007324 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007320:	f7ff f856 	bl	80063d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007324:	79fb      	ldrb	r3, [r7, #7]

}
 8007326:	4618      	mov	r0, r3
 8007328:	3708      	adds	r7, #8
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
	...

08007330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800733c:	4b16      	ldr	r3, [pc, #88]	@ (8007398 <HAL_InitTick+0x68>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d022      	beq.n	800738a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007344:	4b15      	ldr	r3, [pc, #84]	@ (800739c <HAL_InitTick+0x6c>)
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	4b13      	ldr	r3, [pc, #76]	@ (8007398 <HAL_InitTick+0x68>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8007350:	fbb1 f3f3 	udiv	r3, r1, r3
 8007354:	fbb2 f3f3 	udiv	r3, r2, r3
 8007358:	4618      	mov	r0, r3
 800735a:	f001 fdbc 	bl	8008ed6 <HAL_SYSTICK_Config>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10f      	bne.n	8007384 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b0f      	cmp	r3, #15
 8007368:	d809      	bhi.n	800737e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800736a:	2200      	movs	r2, #0
 800736c:	6879      	ldr	r1, [r7, #4]
 800736e:	f04f 30ff 	mov.w	r0, #4294967295
 8007372:	f001 fd88 	bl	8008e86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007376:	4a0a      	ldr	r2, [pc, #40]	@ (80073a0 <HAL_InitTick+0x70>)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6013      	str	r3, [r2, #0]
 800737c:	e007      	b.n	800738e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	73fb      	strb	r3, [r7, #15]
 8007382:	e004      	b.n	800738e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	73fb      	strb	r3, [r7, #15]
 8007388:	e001      	b.n	800738e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800738e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	2000039c 	.word	0x2000039c
 800739c:	20000394 	.word	0x20000394
 80073a0:	20000398 	.word	0x20000398

080073a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80073a4:	b480      	push	{r7}
 80073a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80073a8:	4b05      	ldr	r3, [pc, #20]	@ (80073c0 <HAL_IncTick+0x1c>)
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	4b05      	ldr	r3, [pc, #20]	@ (80073c4 <HAL_IncTick+0x20>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4413      	add	r3, r2
 80073b2:	4a03      	ldr	r2, [pc, #12]	@ (80073c0 <HAL_IncTick+0x1c>)
 80073b4:	6013      	str	r3, [r2, #0]
}
 80073b6:	bf00      	nop
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr
 80073c0:	2000241c 	.word	0x2000241c
 80073c4:	2000039c 	.word	0x2000039c

080073c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80073c8:	b480      	push	{r7}
 80073ca:	af00      	add	r7, sp, #0
  return uwTick;
 80073cc:	4b03      	ldr	r3, [pc, #12]	@ (80073dc <HAL_GetTick+0x14>)
 80073ce:	681b      	ldr	r3, [r3, #0]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	2000241c 	.word	0x2000241c

080073e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	609a      	str	r2, [r3, #8]
}
 80073fa:	bf00      	nop
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007406:	b480      	push	{r7}
 8007408:	b083      	sub	sp, #12
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	609a      	str	r2, [r3, #8]
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007448:	b480      	push	{r7}
 800744a:	b087      	sub	sp, #28
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	60b9      	str	r1, [r7, #8]
 8007452:	607a      	str	r2, [r7, #4]
 8007454:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3360      	adds	r3, #96	@ 0x60
 800745a:	461a      	mov	r2, r3
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	4413      	add	r3, r2
 8007462:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	4b08      	ldr	r3, [pc, #32]	@ (800748c <LL_ADC_SetOffset+0x44>)
 800746a:	4013      	ands	r3, r2
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	4313      	orrs	r3, r2
 8007478:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8007480:	bf00      	nop
 8007482:	371c      	adds	r7, #28
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	03fff000 	.word	0x03fff000

08007490 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3360      	adds	r3, #96	@ 0x60
 800749e:	461a      	mov	r2, r3
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3360      	adds	r3, #96	@ 0x60
 80074cc:	461a      	mov	r2, r3
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	431a      	orrs	r2, r3
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80074e6:	bf00      	nop
 80074e8:	371c      	adds	r7, #28
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b087      	sub	sp, #28
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	60b9      	str	r1, [r7, #8]
 80074fc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	3360      	adds	r3, #96	@ 0x60
 8007502:	461a      	mov	r2, r3
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	431a      	orrs	r2, r3
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800751c:	bf00      	nop
 800751e:	371c      	adds	r7, #28
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007528:	b480      	push	{r7}
 800752a:	b087      	sub	sp, #28
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	3360      	adds	r3, #96	@ 0x60
 8007538:	461a      	mov	r2, r3
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	431a      	orrs	r2, r3
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8007552:	bf00      	nop
 8007554:	371c      	adds	r7, #28
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
 8007564:	6078      	str	r0, [r7, #4]
 8007566:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	431a      	orrs	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	615a      	str	r2, [r3, #20]
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007598:	2301      	movs	r3, #1
 800759a:	e000      	b.n	800759e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	370c      	adds	r7, #12
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b087      	sub	sp, #28
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	60f8      	str	r0, [r7, #12]
 80075b2:	60b9      	str	r1, [r7, #8]
 80075b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3330      	adds	r3, #48	@ 0x30
 80075ba:	461a      	mov	r2, r3
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	0a1b      	lsrs	r3, r3, #8
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	f003 030c 	and.w	r3, r3, #12
 80075c6:	4413      	add	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	f003 031f 	and.w	r3, r3, #31
 80075d4:	211f      	movs	r1, #31
 80075d6:	fa01 f303 	lsl.w	r3, r1, r3
 80075da:	43db      	mvns	r3, r3
 80075dc:	401a      	ands	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	0e9b      	lsrs	r3, r3, #26
 80075e2:	f003 011f 	and.w	r1, r3, #31
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	f003 031f 	and.w	r3, r3, #31
 80075ec:	fa01 f303 	lsl.w	r3, r1, r3
 80075f0:	431a      	orrs	r2, r3
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80075f6:	bf00      	nop
 80075f8:	371c      	adds	r7, #28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007602:	b480      	push	{r7}
 8007604:	b087      	sub	sp, #28
 8007606:	af00      	add	r7, sp, #0
 8007608:	60f8      	str	r0, [r7, #12]
 800760a:	60b9      	str	r1, [r7, #8]
 800760c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3314      	adds	r3, #20
 8007612:	461a      	mov	r2, r3
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	0e5b      	lsrs	r3, r3, #25
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	4413      	add	r3, r2
 8007620:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	0d1b      	lsrs	r3, r3, #20
 800762a:	f003 031f 	and.w	r3, r3, #31
 800762e:	2107      	movs	r1, #7
 8007630:	fa01 f303 	lsl.w	r3, r1, r3
 8007634:	43db      	mvns	r3, r3
 8007636:	401a      	ands	r2, r3
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	0d1b      	lsrs	r3, r3, #20
 800763c:	f003 031f 	and.w	r3, r3, #31
 8007640:	6879      	ldr	r1, [r7, #4]
 8007642:	fa01 f303 	lsl.w	r3, r1, r3
 8007646:	431a      	orrs	r2, r3
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800764c:	bf00      	nop
 800764e:	371c      	adds	r7, #28
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007670:	43db      	mvns	r3, r3
 8007672:	401a      	ands	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f003 0318 	and.w	r3, r3, #24
 800767a:	4908      	ldr	r1, [pc, #32]	@ (800769c <LL_ADC_SetChannelSingleDiff+0x44>)
 800767c:	40d9      	lsrs	r1, r3
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	400b      	ands	r3, r1
 8007682:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007686:	431a      	orrs	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800768e:	bf00      	nop
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	0007ffff 	.word	0x0007ffff

080076a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f003 031f 	and.w	r3, r3, #31
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80076cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	6093      	str	r3, [r2, #8]
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80076f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80076f4:	d101      	bne.n	80076fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e000      	b.n	80076fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8007718:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800771c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007740:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007744:	d101      	bne.n	800774a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007746:	2301      	movs	r3, #1
 8007748:	e000      	b.n	800774c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007768:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800776c:	f043 0201 	orr.w	r2, r3, #1
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007790:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007794:	f043 0202 	orr.w	r2, r3, #2
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d101      	bne.n	80077c0 <LL_ADC_IsEnabled+0x18>
 80077bc:	2301      	movs	r3, #1
 80077be:	e000      	b.n	80077c2 <LL_ADC_IsEnabled+0x1a>
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80077ce:	b480      	push	{r7}
 80077d0:	b083      	sub	sp, #12
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d101      	bne.n	80077e6 <LL_ADC_IsDisableOngoing+0x18>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <LL_ADC_IsDisableOngoing+0x1a>
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007804:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007808:	f043 0204 	orr.w	r2, r3, #4
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f003 0304 	and.w	r3, r3, #4
 800782c:	2b04      	cmp	r3, #4
 800782e:	d101      	bne.n	8007834 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007830:	2301      	movs	r3, #1
 8007832:	e000      	b.n	8007836 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f003 0308 	and.w	r3, r3, #8
 8007852:	2b08      	cmp	r3, #8
 8007854:	d101      	bne.n	800785a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007856:	2301      	movs	r3, #1
 8007858:	e000      	b.n	800785c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800785a:	2300      	movs	r3, #0
}
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007868:	b590      	push	{r4, r7, lr}
 800786a:	b089      	sub	sp, #36	@ 0x24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007870:	2300      	movs	r3, #0
 8007872:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8007874:	2300      	movs	r3, #0
 8007876:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e1a9      	b.n	8007bd6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800788c:	2b00      	cmp	r3, #0
 800788e:	d109      	bne.n	80078a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7fb ff8b 	bl	80037ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7ff ff19 	bl	80076e0 <LL_ADC_IsDeepPowerDownEnabled>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d004      	beq.n	80078be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7ff feff 	bl	80076bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7ff ff34 	bl	8007730 <LL_ADC_IsInternalRegulatorEnabled>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d115      	bne.n	80078fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7ff ff18 	bl	8007708 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80078d8:	4b9c      	ldr	r3, [pc, #624]	@ (8007b4c <HAL_ADC_Init+0x2e4>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	099b      	lsrs	r3, r3, #6
 80078de:	4a9c      	ldr	r2, [pc, #624]	@ (8007b50 <HAL_ADC_Init+0x2e8>)
 80078e0:	fba2 2303 	umull	r2, r3, r2, r3
 80078e4:	099b      	lsrs	r3, r3, #6
 80078e6:	3301      	adds	r3, #1
 80078e8:	005b      	lsls	r3, r3, #1
 80078ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80078ec:	e002      	b.n	80078f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1f9      	bne.n	80078ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff ff16 	bl	8007730 <LL_ADC_IsInternalRegulatorEnabled>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10d      	bne.n	8007926 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800790e:	f043 0210 	orr.w	r2, r3, #16
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800791a:	f043 0201 	orr.w	r2, r3, #1
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff ff76 	bl	800781c <LL_ADC_REG_IsConversionOngoing>
 8007930:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007936:	f003 0310 	and.w	r3, r3, #16
 800793a:	2b00      	cmp	r3, #0
 800793c:	f040 8142 	bne.w	8007bc4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	2b00      	cmp	r3, #0
 8007944:	f040 813e 	bne.w	8007bc4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800794c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8007950:	f043 0202 	orr.w	r2, r3, #2
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4618      	mov	r0, r3
 800795e:	f7ff ff23 	bl	80077a8 <LL_ADC_IsEnabled>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d141      	bne.n	80079ec <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007970:	d004      	beq.n	800797c <HAL_ADC_Init+0x114>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a77      	ldr	r2, [pc, #476]	@ (8007b54 <HAL_ADC_Init+0x2ec>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d10f      	bne.n	800799c <HAL_ADC_Init+0x134>
 800797c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007980:	f7ff ff12 	bl	80077a8 <LL_ADC_IsEnabled>
 8007984:	4604      	mov	r4, r0
 8007986:	4873      	ldr	r0, [pc, #460]	@ (8007b54 <HAL_ADC_Init+0x2ec>)
 8007988:	f7ff ff0e 	bl	80077a8 <LL_ADC_IsEnabled>
 800798c:	4603      	mov	r3, r0
 800798e:	4323      	orrs	r3, r4
 8007990:	2b00      	cmp	r3, #0
 8007992:	bf0c      	ite	eq
 8007994:	2301      	moveq	r3, #1
 8007996:	2300      	movne	r3, #0
 8007998:	b2db      	uxtb	r3, r3
 800799a:	e012      	b.n	80079c2 <HAL_ADC_Init+0x15a>
 800799c:	486e      	ldr	r0, [pc, #440]	@ (8007b58 <HAL_ADC_Init+0x2f0>)
 800799e:	f7ff ff03 	bl	80077a8 <LL_ADC_IsEnabled>
 80079a2:	4604      	mov	r4, r0
 80079a4:	486d      	ldr	r0, [pc, #436]	@ (8007b5c <HAL_ADC_Init+0x2f4>)
 80079a6:	f7ff feff 	bl	80077a8 <LL_ADC_IsEnabled>
 80079aa:	4603      	mov	r3, r0
 80079ac:	431c      	orrs	r4, r3
 80079ae:	486c      	ldr	r0, [pc, #432]	@ (8007b60 <HAL_ADC_Init+0x2f8>)
 80079b0:	f7ff fefa 	bl	80077a8 <LL_ADC_IsEnabled>
 80079b4:	4603      	mov	r3, r0
 80079b6:	4323      	orrs	r3, r4
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	bf0c      	ite	eq
 80079bc:	2301      	moveq	r3, #1
 80079be:	2300      	movne	r3, #0
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d012      	beq.n	80079ec <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079ce:	d004      	beq.n	80079da <HAL_ADC_Init+0x172>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a5f      	ldr	r2, [pc, #380]	@ (8007b54 <HAL_ADC_Init+0x2ec>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d101      	bne.n	80079de <HAL_ADC_Init+0x176>
 80079da:	4a62      	ldr	r2, [pc, #392]	@ (8007b64 <HAL_ADC_Init+0x2fc>)
 80079dc:	e000      	b.n	80079e0 <HAL_ADC_Init+0x178>
 80079de:	4a62      	ldr	r2, [pc, #392]	@ (8007b68 <HAL_ADC_Init+0x300>)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	4619      	mov	r1, r3
 80079e6:	4610      	mov	r0, r2
 80079e8:	f7ff fcfa 	bl	80073e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	7f5b      	ldrb	r3, [r3, #29]
 80079f0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80079f6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80079fc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8007a02:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007a0a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d106      	bne.n	8007a28 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	045b      	lsls	r3, r3, #17
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d009      	beq.n	8007a44 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a34:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a3c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68da      	ldr	r2, [r3, #12]
 8007a4a:	4b48      	ldr	r3, [pc, #288]	@ (8007b6c <HAL_ADC_Init+0x304>)
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6812      	ldr	r2, [r2, #0]
 8007a52:	69b9      	ldr	r1, [r7, #24]
 8007a54:	430b      	orrs	r3, r1
 8007a56:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7ff fee5 	bl	8007842 <LL_ADC_INJ_IsConversionOngoing>
 8007a78:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d17f      	bne.n	8007b80 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d17c      	bne.n	8007b80 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007a8a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a92:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8007a94:	4313      	orrs	r3, r2
 8007a96:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007aa2:	f023 0302 	bic.w	r3, r3, #2
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	6812      	ldr	r2, [r2, #0]
 8007aaa:	69b9      	ldr	r1, [r7, #24]
 8007aac:	430b      	orrs	r3, r1
 8007aae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	691b      	ldr	r3, [r3, #16]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d017      	beq.n	8007ae8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	691a      	ldr	r2, [r3, #16]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007ac6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007ad0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007ad4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6911      	ldr	r1, [r2, #16]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	6812      	ldr	r2, [r2, #0]
 8007ae0:	430b      	orrs	r3, r1
 8007ae2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8007ae6:	e013      	b.n	8007b10 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691a      	ldr	r2, [r3, #16]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007af6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	6812      	ldr	r2, [r2, #0]
 8007b04:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8007b08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007b0c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d12a      	bne.n	8007b70 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007b24:	f023 0304 	bic.w	r3, r3, #4
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8007b2c:	687a      	ldr	r2, [r7, #4]
 8007b2e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007b30:	4311      	orrs	r1, r2
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007b36:	4311      	orrs	r1, r2
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007b3c:	430a      	orrs	r2, r1
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f042 0201 	orr.w	r2, r2, #1
 8007b48:	611a      	str	r2, [r3, #16]
 8007b4a:	e019      	b.n	8007b80 <HAL_ADC_Init+0x318>
 8007b4c:	20000394 	.word	0x20000394
 8007b50:	053e2d63 	.word	0x053e2d63
 8007b54:	50000100 	.word	0x50000100
 8007b58:	50000400 	.word	0x50000400
 8007b5c:	50000500 	.word	0x50000500
 8007b60:	50000600 	.word	0x50000600
 8007b64:	50000300 	.word	0x50000300
 8007b68:	50000700 	.word	0x50000700
 8007b6c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691a      	ldr	r2, [r3, #16]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f022 0201 	bic.w	r2, r2, #1
 8007b7e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d10c      	bne.n	8007ba2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8e:	f023 010f 	bic.w	r1, r3, #15
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	1e5a      	subs	r2, r3, #1
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	430a      	orrs	r2, r1
 8007b9e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007ba0:	e007      	b.n	8007bb2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f022 020f 	bic.w	r2, r2, #15
 8007bb0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bb6:	f023 0303 	bic.w	r3, r3, #3
 8007bba:	f043 0201 	orr.w	r2, r3, #1
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007bc2:	e007      	b.n	8007bd4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bc8:	f043 0210 	orr.w	r2, r3, #16
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007bd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3724      	adds	r7, #36	@ 0x24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd90      	pop	{r4, r7, pc}
 8007bde:	bf00      	nop

08007be0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007bf4:	d004      	beq.n	8007c00 <HAL_ADC_Start_DMA+0x20>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a5a      	ldr	r2, [pc, #360]	@ (8007d64 <HAL_ADC_Start_DMA+0x184>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d101      	bne.n	8007c04 <HAL_ADC_Start_DMA+0x24>
 8007c00:	4b59      	ldr	r3, [pc, #356]	@ (8007d68 <HAL_ADC_Start_DMA+0x188>)
 8007c02:	e000      	b.n	8007c06 <HAL_ADC_Start_DMA+0x26>
 8007c04:	4b59      	ldr	r3, [pc, #356]	@ (8007d6c <HAL_ADC_Start_DMA+0x18c>)
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7ff fd4a 	bl	80076a0 <LL_ADC_GetMultimode>
 8007c0c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7ff fe02 	bl	800781c <LL_ADC_REG_IsConversionOngoing>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f040 809b 	bne.w	8007d56 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d101      	bne.n	8007c2e <HAL_ADC_Start_DMA+0x4e>
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	e096      	b.n	8007d5c <HAL_ADC_Start_DMA+0x17c>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a4d      	ldr	r2, [pc, #308]	@ (8007d70 <HAL_ADC_Start_DMA+0x190>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d008      	beq.n	8007c52 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d005      	beq.n	8007c52 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	2b05      	cmp	r3, #5
 8007c4a:	d002      	beq.n	8007c52 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	2b09      	cmp	r3, #9
 8007c50:	d17a      	bne.n	8007d48 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f000 fcf6 	bl	8008644 <ADC_Enable>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d16d      	bne.n	8007d3e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c66:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007c6a:	f023 0301 	bic.w	r3, r3, #1
 8007c6e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a3a      	ldr	r2, [pc, #232]	@ (8007d64 <HAL_ADC_Start_DMA+0x184>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d009      	beq.n	8007c94 <HAL_ADC_Start_DMA+0xb4>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a3b      	ldr	r2, [pc, #236]	@ (8007d74 <HAL_ADC_Start_DMA+0x194>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d002      	beq.n	8007c90 <HAL_ADC_Start_DMA+0xb0>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	e003      	b.n	8007c98 <HAL_ADC_Start_DMA+0xb8>
 8007c90:	4b39      	ldr	r3, [pc, #228]	@ (8007d78 <HAL_ADC_Start_DMA+0x198>)
 8007c92:	e001      	b.n	8007c98 <HAL_ADC_Start_DMA+0xb8>
 8007c94:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8007c98:	68fa      	ldr	r2, [r7, #12]
 8007c9a:	6812      	ldr	r2, [r2, #0]
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d002      	beq.n	8007ca6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d105      	bne.n	8007cb2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007caa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d006      	beq.n	8007ccc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cc2:	f023 0206 	bic.w	r2, r3, #6
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	661a      	str	r2, [r3, #96]	@ 0x60
 8007cca:	e002      	b.n	8007cd2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cd6:	4a29      	ldr	r2, [pc, #164]	@ (8007d7c <HAL_ADC_Start_DMA+0x19c>)
 8007cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cde:	4a28      	ldr	r2, [pc, #160]	@ (8007d80 <HAL_ADC_Start_DMA+0x1a0>)
 8007ce0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ce6:	4a27      	ldr	r2, [pc, #156]	@ (8007d84 <HAL_ADC_Start_DMA+0x1a4>)
 8007ce8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	221c      	movs	r2, #28
 8007cf0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685a      	ldr	r2, [r3, #4]
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f042 0210 	orr.w	r2, r2, #16
 8007d08:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68da      	ldr	r2, [r3, #12]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f042 0201 	orr.w	r2, r2, #1
 8007d18:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3340      	adds	r3, #64	@ 0x40
 8007d24:	4619      	mov	r1, r3
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f001 f989 	bl	8009040 <HAL_DMA_Start_IT>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7ff fd5c 	bl	80077f4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007d3c:	e00d      	b.n	8007d5a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8007d46:	e008      	b.n	8007d5a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8007d54:	e001      	b.n	8007d5a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007d56:	2302      	movs	r3, #2
 8007d58:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	50000100 	.word	0x50000100
 8007d68:	50000300 	.word	0x50000300
 8007d6c:	50000700 	.word	0x50000700
 8007d70:	50000600 	.word	0x50000600
 8007d74:	50000500 	.word	0x50000500
 8007d78:	50000400 	.word	0x50000400
 8007d7c:	0800882f 	.word	0x0800882f
 8007d80:	08008907 	.word	0x08008907
 8007d84:	08008923 	.word	0x08008923

08007d88 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007d90:	bf00      	nop
 8007d92:	370c      	adds	r7, #12
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007da4:	bf00      	nop
 8007da6:	370c      	adds	r7, #12
 8007da8:	46bd      	mov	sp, r7
 8007daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dae:	4770      	bx	lr

08007db0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b0b6      	sub	sp, #216	@ 0xd8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d102      	bne.n	8007de8 <HAL_ADC_ConfigChannel+0x24>
 8007de2:	2302      	movs	r3, #2
 8007de4:	f000 bc13 	b.w	800860e <HAL_ADC_ConfigChannel+0x84a>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7ff fd11 	bl	800781c <LL_ADC_REG_IsConversionOngoing>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f040 83f3 	bne.w	80085e8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6818      	ldr	r0, [r3, #0]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	6859      	ldr	r1, [r3, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f7ff fbcb 	bl	80075aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7ff fcff 	bl	800781c <LL_ADC_REG_IsConversionOngoing>
 8007e1e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7ff fd0b 	bl	8007842 <LL_ADC_INJ_IsConversionOngoing>
 8007e2c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007e30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f040 81d9 	bne.w	80081ec <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007e3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f040 81d4 	bne.w	80081ec <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e4c:	d10f      	bne.n	8007e6e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6818      	ldr	r0, [r3, #0]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2200      	movs	r2, #0
 8007e58:	4619      	mov	r1, r3
 8007e5a:	f7ff fbd2 	bl	8007602 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7ff fb79 	bl	800755e <LL_ADC_SetSamplingTimeCommonConfig>
 8007e6c:	e00e      	b.n	8007e8c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6818      	ldr	r0, [r3, #0]
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	6819      	ldr	r1, [r3, #0]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	f7ff fbc1 	bl	8007602 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2100      	movs	r1, #0
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7ff fb69 	bl	800755e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	695a      	ldr	r2, [r3, #20]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	08db      	lsrs	r3, r3, #3
 8007e98:	f003 0303 	and.w	r3, r3, #3
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d022      	beq.n	8007ef4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	6919      	ldr	r1, [r3, #16]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ebe:	f7ff fac3 	bl	8007448 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6818      	ldr	r0, [r3, #0]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	6919      	ldr	r1, [r3, #16]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f7ff fb0f 	bl	80074f2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6818      	ldr	r0, [r3, #0]
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d102      	bne.n	8007eea <HAL_ADC_ConfigChannel+0x126>
 8007ee4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ee8:	e000      	b.n	8007eec <HAL_ADC_ConfigChannel+0x128>
 8007eea:	2300      	movs	r3, #0
 8007eec:	461a      	mov	r2, r3
 8007eee:	f7ff fb1b 	bl	8007528 <LL_ADC_SetOffsetSaturation>
 8007ef2:	e17b      	b.n	80081ec <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7ff fac8 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007f00:	4603      	mov	r3, r0
 8007f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10a      	bne.n	8007f20 <HAL_ADC_ConfigChannel+0x15c>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2100      	movs	r1, #0
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7ff fabd 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007f16:	4603      	mov	r3, r0
 8007f18:	0e9b      	lsrs	r3, r3, #26
 8007f1a:	f003 021f 	and.w	r2, r3, #31
 8007f1e:	e01e      	b.n	8007f5e <HAL_ADC_ConfigChannel+0x19a>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2100      	movs	r1, #0
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7ff fab2 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007f36:	fa93 f3a3 	rbit	r3, r3
 8007f3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007f3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007f42:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007f46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d101      	bne.n	8007f52 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8007f4e:	2320      	movs	r3, #32
 8007f50:	e004      	b.n	8007f5c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8007f52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007f56:	fab3 f383 	clz	r3, r3
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d105      	bne.n	8007f76 <HAL_ADC_ConfigChannel+0x1b2>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	0e9b      	lsrs	r3, r3, #26
 8007f70:	f003 031f 	and.w	r3, r3, #31
 8007f74:	e018      	b.n	8007fa8 <HAL_ADC_ConfigChannel+0x1e4>
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007f82:	fa93 f3a3 	rbit	r3, r3
 8007f86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8007f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8007f92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8007f9a:	2320      	movs	r3, #32
 8007f9c:	e004      	b.n	8007fa8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8007f9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007fa2:	fab3 f383 	clz	r3, r3
 8007fa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d106      	bne.n	8007fba <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff fa81 	bl	80074bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2101      	movs	r1, #1
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7ff fa65 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10a      	bne.n	8007fe6 <HAL_ADC_ConfigChannel+0x222>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff fa5a 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	0e9b      	lsrs	r3, r3, #26
 8007fe0:	f003 021f 	and.w	r2, r3, #31
 8007fe4:	e01e      	b.n	8008024 <HAL_ADC_ConfigChannel+0x260>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2101      	movs	r1, #1
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff fa4f 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ff8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007ffc:	fa93 f3a3 	rbit	r3, r3
 8008000:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8008004:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008008:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800800c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8008014:	2320      	movs	r3, #32
 8008016:	e004      	b.n	8008022 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8008018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800801c:	fab3 f383 	clz	r3, r3
 8008020:	b2db      	uxtb	r3, r3
 8008022:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800802c:	2b00      	cmp	r3, #0
 800802e:	d105      	bne.n	800803c <HAL_ADC_ConfigChannel+0x278>
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	0e9b      	lsrs	r3, r3, #26
 8008036:	f003 031f 	and.w	r3, r3, #31
 800803a:	e018      	b.n	800806e <HAL_ADC_ConfigChannel+0x2aa>
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008044:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008048:	fa93 f3a3 	rbit	r3, r3
 800804c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8008050:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008054:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8008058:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8008060:	2320      	movs	r3, #32
 8008062:	e004      	b.n	800806e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8008064:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008068:	fab3 f383 	clz	r3, r3
 800806c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800806e:	429a      	cmp	r2, r3
 8008070:	d106      	bne.n	8008080 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2200      	movs	r2, #0
 8008078:	2101      	movs	r1, #1
 800807a:	4618      	mov	r0, r3
 800807c:	f7ff fa1e 	bl	80074bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2102      	movs	r1, #2
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff fa02 	bl	8007490 <LL_ADC_GetOffsetChannel>
 800808c:	4603      	mov	r3, r0
 800808e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008092:	2b00      	cmp	r3, #0
 8008094:	d10a      	bne.n	80080ac <HAL_ADC_ConfigChannel+0x2e8>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2102      	movs	r1, #2
 800809c:	4618      	mov	r0, r3
 800809e:	f7ff f9f7 	bl	8007490 <LL_ADC_GetOffsetChannel>
 80080a2:	4603      	mov	r3, r0
 80080a4:	0e9b      	lsrs	r3, r3, #26
 80080a6:	f003 021f 	and.w	r2, r3, #31
 80080aa:	e01e      	b.n	80080ea <HAL_ADC_ConfigChannel+0x326>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2102      	movs	r1, #2
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff f9ec 	bl	8007490 <LL_ADC_GetOffsetChannel>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080c2:	fa93 f3a3 	rbit	r3, r3
 80080c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80080ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80080ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80080d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80080da:	2320      	movs	r3, #32
 80080dc:	e004      	b.n	80080e8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80080de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80080e2:	fab3 f383 	clz	r3, r3
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d105      	bne.n	8008102 <HAL_ADC_ConfigChannel+0x33e>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	0e9b      	lsrs	r3, r3, #26
 80080fc:	f003 031f 	and.w	r3, r3, #31
 8008100:	e016      	b.n	8008130 <HAL_ADC_ConfigChannel+0x36c>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800810a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800810e:	fa93 f3a3 	rbit	r3, r3
 8008112:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8008114:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008116:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800811a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8008122:	2320      	movs	r3, #32
 8008124:	e004      	b.n	8008130 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8008126:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800812a:	fab3 f383 	clz	r3, r3
 800812e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008130:	429a      	cmp	r2, r3
 8008132:	d106      	bne.n	8008142 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2200      	movs	r2, #0
 800813a:	2102      	movs	r1, #2
 800813c:	4618      	mov	r0, r3
 800813e:	f7ff f9bd 	bl	80074bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2103      	movs	r1, #3
 8008148:	4618      	mov	r0, r3
 800814a:	f7ff f9a1 	bl	8007490 <LL_ADC_GetOffsetChannel>
 800814e:	4603      	mov	r3, r0
 8008150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10a      	bne.n	800816e <HAL_ADC_ConfigChannel+0x3aa>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2103      	movs	r1, #3
 800815e:	4618      	mov	r0, r3
 8008160:	f7ff f996 	bl	8007490 <LL_ADC_GetOffsetChannel>
 8008164:	4603      	mov	r3, r0
 8008166:	0e9b      	lsrs	r3, r3, #26
 8008168:	f003 021f 	and.w	r2, r3, #31
 800816c:	e017      	b.n	800819e <HAL_ADC_ConfigChannel+0x3da>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2103      	movs	r1, #3
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff f98b 	bl	8007490 <LL_ADC_GetOffsetChannel>
 800817a:	4603      	mov	r3, r0
 800817c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800817e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008180:	fa93 f3a3 	rbit	r3, r3
 8008184:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8008186:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008188:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800818a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8008190:	2320      	movs	r3, #32
 8008192:	e003      	b.n	800819c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8008194:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008196:	fab3 f383 	clz	r3, r3
 800819a:	b2db      	uxtb	r3, r3
 800819c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d105      	bne.n	80081b6 <HAL_ADC_ConfigChannel+0x3f2>
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	0e9b      	lsrs	r3, r3, #26
 80081b0:	f003 031f 	and.w	r3, r3, #31
 80081b4:	e011      	b.n	80081da <HAL_ADC_ConfigChannel+0x416>
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80081be:	fa93 f3a3 	rbit	r3, r3
 80081c2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80081c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80081c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d101      	bne.n	80081d2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80081ce:	2320      	movs	r3, #32
 80081d0:	e003      	b.n	80081da <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80081d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081d4:	fab3 f383 	clz	r3, r3
 80081d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80081da:	429a      	cmp	r2, r3
 80081dc:	d106      	bne.n	80081ec <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2200      	movs	r2, #0
 80081e4:	2103      	movs	r1, #3
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7ff f968 	bl	80074bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7ff fad9 	bl	80077a8 <LL_ADC_IsEnabled>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f040 813d 	bne.w	8008478 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6818      	ldr	r0, [r3, #0]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	6819      	ldr	r1, [r3, #0]
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	461a      	mov	r2, r3
 800820c:	f7ff fa24 	bl	8007658 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	4aa2      	ldr	r2, [pc, #648]	@ (80084a0 <HAL_ADC_ConfigChannel+0x6dc>)
 8008216:	4293      	cmp	r3, r2
 8008218:	f040 812e 	bne.w	8008478 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10b      	bne.n	8008244 <HAL_ADC_ConfigChannel+0x480>
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	0e9b      	lsrs	r3, r3, #26
 8008232:	3301      	adds	r3, #1
 8008234:	f003 031f 	and.w	r3, r3, #31
 8008238:	2b09      	cmp	r3, #9
 800823a:	bf94      	ite	ls
 800823c:	2301      	movls	r3, #1
 800823e:	2300      	movhi	r3, #0
 8008240:	b2db      	uxtb	r3, r3
 8008242:	e019      	b.n	8008278 <HAL_ADC_ConfigChannel+0x4b4>
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800824a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800824c:	fa93 f3a3 	rbit	r3, r3
 8008250:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8008252:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008254:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8008256:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008258:	2b00      	cmp	r3, #0
 800825a:	d101      	bne.n	8008260 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800825c:	2320      	movs	r3, #32
 800825e:	e003      	b.n	8008268 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8008260:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008262:	fab3 f383 	clz	r3, r3
 8008266:	b2db      	uxtb	r3, r3
 8008268:	3301      	adds	r3, #1
 800826a:	f003 031f 	and.w	r3, r3, #31
 800826e:	2b09      	cmp	r3, #9
 8008270:	bf94      	ite	ls
 8008272:	2301      	movls	r3, #1
 8008274:	2300      	movhi	r3, #0
 8008276:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008278:	2b00      	cmp	r3, #0
 800827a:	d079      	beq.n	8008370 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008284:	2b00      	cmp	r3, #0
 8008286:	d107      	bne.n	8008298 <HAL_ADC_ConfigChannel+0x4d4>
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	0e9b      	lsrs	r3, r3, #26
 800828e:	3301      	adds	r3, #1
 8008290:	069b      	lsls	r3, r3, #26
 8008292:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008296:	e015      	b.n	80082c4 <HAL_ADC_ConfigChannel+0x500>
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800829e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082a0:	fa93 f3a3 	rbit	r3, r3
 80082a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80082a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082a8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80082aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80082b0:	2320      	movs	r3, #32
 80082b2:	e003      	b.n	80082bc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80082b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082b6:	fab3 f383 	clz	r3, r3
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	3301      	adds	r3, #1
 80082be:	069b      	lsls	r3, r3, #26
 80082c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d109      	bne.n	80082e4 <HAL_ADC_ConfigChannel+0x520>
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	0e9b      	lsrs	r3, r3, #26
 80082d6:	3301      	adds	r3, #1
 80082d8:	f003 031f 	and.w	r3, r3, #31
 80082dc:	2101      	movs	r1, #1
 80082de:	fa01 f303 	lsl.w	r3, r1, r3
 80082e2:	e017      	b.n	8008314 <HAL_ADC_ConfigChannel+0x550>
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082ec:	fa93 f3a3 	rbit	r3, r3
 80082f0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80082f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80082f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d101      	bne.n	8008300 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80082fc:	2320      	movs	r3, #32
 80082fe:	e003      	b.n	8008308 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8008300:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008302:	fab3 f383 	clz	r3, r3
 8008306:	b2db      	uxtb	r3, r3
 8008308:	3301      	adds	r3, #1
 800830a:	f003 031f 	and.w	r3, r3, #31
 800830e:	2101      	movs	r1, #1
 8008310:	fa01 f303 	lsl.w	r3, r1, r3
 8008314:	ea42 0103 	orr.w	r1, r2, r3
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10a      	bne.n	800833a <HAL_ADC_ConfigChannel+0x576>
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	0e9b      	lsrs	r3, r3, #26
 800832a:	3301      	adds	r3, #1
 800832c:	f003 021f 	and.w	r2, r3, #31
 8008330:	4613      	mov	r3, r2
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	4413      	add	r3, r2
 8008336:	051b      	lsls	r3, r3, #20
 8008338:	e018      	b.n	800836c <HAL_ADC_ConfigChannel+0x5a8>
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008342:	fa93 f3a3 	rbit	r3, r3
 8008346:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8008348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800834a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800834c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8008352:	2320      	movs	r3, #32
 8008354:	e003      	b.n	800835e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8008356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008358:	fab3 f383 	clz	r3, r3
 800835c:	b2db      	uxtb	r3, r3
 800835e:	3301      	adds	r3, #1
 8008360:	f003 021f 	and.w	r2, r3, #31
 8008364:	4613      	mov	r3, r2
 8008366:	005b      	lsls	r3, r3, #1
 8008368:	4413      	add	r3, r2
 800836a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800836c:	430b      	orrs	r3, r1
 800836e:	e07e      	b.n	800846e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008378:	2b00      	cmp	r3, #0
 800837a:	d107      	bne.n	800838c <HAL_ADC_ConfigChannel+0x5c8>
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	0e9b      	lsrs	r3, r3, #26
 8008382:	3301      	adds	r3, #1
 8008384:	069b      	lsls	r3, r3, #26
 8008386:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800838a:	e015      	b.n	80083b8 <HAL_ADC_ConfigChannel+0x5f4>
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008394:	fa93 f3a3 	rbit	r3, r3
 8008398:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800839a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800839e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d101      	bne.n	80083a8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80083a4:	2320      	movs	r3, #32
 80083a6:	e003      	b.n	80083b0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80083a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083aa:	fab3 f383 	clz	r3, r3
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	3301      	adds	r3, #1
 80083b2:	069b      	lsls	r3, r3, #26
 80083b4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d109      	bne.n	80083d8 <HAL_ADC_ConfigChannel+0x614>
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	0e9b      	lsrs	r3, r3, #26
 80083ca:	3301      	adds	r3, #1
 80083cc:	f003 031f 	and.w	r3, r3, #31
 80083d0:	2101      	movs	r1, #1
 80083d2:	fa01 f303 	lsl.w	r3, r1, r3
 80083d6:	e017      	b.n	8008408 <HAL_ADC_ConfigChannel+0x644>
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	fa93 f3a3 	rbit	r3, r3
 80083e4:	61fb      	str	r3, [r7, #28]
  return result;
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80083ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80083f0:	2320      	movs	r3, #32
 80083f2:	e003      	b.n	80083fc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80083f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f6:	fab3 f383 	clz	r3, r3
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	3301      	adds	r3, #1
 80083fe:	f003 031f 	and.w	r3, r3, #31
 8008402:	2101      	movs	r1, #1
 8008404:	fa01 f303 	lsl.w	r3, r1, r3
 8008408:	ea42 0103 	orr.w	r1, r2, r3
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10d      	bne.n	8008434 <HAL_ADC_ConfigChannel+0x670>
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	0e9b      	lsrs	r3, r3, #26
 800841e:	3301      	adds	r3, #1
 8008420:	f003 021f 	and.w	r2, r3, #31
 8008424:	4613      	mov	r3, r2
 8008426:	005b      	lsls	r3, r3, #1
 8008428:	4413      	add	r3, r2
 800842a:	3b1e      	subs	r3, #30
 800842c:	051b      	lsls	r3, r3, #20
 800842e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008432:	e01b      	b.n	800846c <HAL_ADC_ConfigChannel+0x6a8>
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	fa93 f3a3 	rbit	r3, r3
 8008440:	613b      	str	r3, [r7, #16]
  return result;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800844c:	2320      	movs	r3, #32
 800844e:	e003      	b.n	8008458 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	fab3 f383 	clz	r3, r3
 8008456:	b2db      	uxtb	r3, r3
 8008458:	3301      	adds	r3, #1
 800845a:	f003 021f 	and.w	r2, r3, #31
 800845e:	4613      	mov	r3, r2
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	4413      	add	r3, r2
 8008464:	3b1e      	subs	r3, #30
 8008466:	051b      	lsls	r3, r3, #20
 8008468:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800846c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800846e:	683a      	ldr	r2, [r7, #0]
 8008470:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008472:	4619      	mov	r1, r3
 8008474:	f7ff f8c5 	bl	8007602 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	4b09      	ldr	r3, [pc, #36]	@ (80084a4 <HAL_ADC_ConfigChannel+0x6e0>)
 800847e:	4013      	ands	r3, r2
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 80be 	beq.w	8008602 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800848e:	d004      	beq.n	800849a <HAL_ADC_ConfigChannel+0x6d6>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a04      	ldr	r2, [pc, #16]	@ (80084a8 <HAL_ADC_ConfigChannel+0x6e4>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d10a      	bne.n	80084b0 <HAL_ADC_ConfigChannel+0x6ec>
 800849a:	4b04      	ldr	r3, [pc, #16]	@ (80084ac <HAL_ADC_ConfigChannel+0x6e8>)
 800849c:	e009      	b.n	80084b2 <HAL_ADC_ConfigChannel+0x6ee>
 800849e:	bf00      	nop
 80084a0:	407f0000 	.word	0x407f0000
 80084a4:	80080000 	.word	0x80080000
 80084a8:	50000100 	.word	0x50000100
 80084ac:	50000300 	.word	0x50000300
 80084b0:	4b59      	ldr	r3, [pc, #356]	@ (8008618 <HAL_ADC_ConfigChannel+0x854>)
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe ffba 	bl	800742c <LL_ADC_GetCommonPathInternalCh>
 80084b8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a56      	ldr	r2, [pc, #344]	@ (800861c <HAL_ADC_ConfigChannel+0x858>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d004      	beq.n	80084d0 <HAL_ADC_ConfigChannel+0x70c>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a55      	ldr	r2, [pc, #340]	@ (8008620 <HAL_ADC_ConfigChannel+0x85c>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d13a      	bne.n	8008546 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80084d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80084d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d134      	bne.n	8008546 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084e4:	d005      	beq.n	80084f2 <HAL_ADC_ConfigChannel+0x72e>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a4e      	ldr	r2, [pc, #312]	@ (8008624 <HAL_ADC_ConfigChannel+0x860>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	f040 8085 	bne.w	80085fc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084fa:	d004      	beq.n	8008506 <HAL_ADC_ConfigChannel+0x742>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a49      	ldr	r2, [pc, #292]	@ (8008628 <HAL_ADC_ConfigChannel+0x864>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d101      	bne.n	800850a <HAL_ADC_ConfigChannel+0x746>
 8008506:	4a49      	ldr	r2, [pc, #292]	@ (800862c <HAL_ADC_ConfigChannel+0x868>)
 8008508:	e000      	b.n	800850c <HAL_ADC_ConfigChannel+0x748>
 800850a:	4a43      	ldr	r2, [pc, #268]	@ (8008618 <HAL_ADC_ConfigChannel+0x854>)
 800850c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008510:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008514:	4619      	mov	r1, r3
 8008516:	4610      	mov	r0, r2
 8008518:	f7fe ff75 	bl	8007406 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800851c:	4b44      	ldr	r3, [pc, #272]	@ (8008630 <HAL_ADC_ConfigChannel+0x86c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	099b      	lsrs	r3, r3, #6
 8008522:	4a44      	ldr	r2, [pc, #272]	@ (8008634 <HAL_ADC_ConfigChannel+0x870>)
 8008524:	fba2 2303 	umull	r2, r3, r2, r3
 8008528:	099b      	lsrs	r3, r3, #6
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	4613      	mov	r3, r2
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	4413      	add	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8008536:	e002      	b.n	800853e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	3b01      	subs	r3, #1
 800853c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1f9      	bne.n	8008538 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008544:	e05a      	b.n	80085fc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a3b      	ldr	r2, [pc, #236]	@ (8008638 <HAL_ADC_ConfigChannel+0x874>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d125      	bne.n	800859c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008550:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008554:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d11f      	bne.n	800859c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a31      	ldr	r2, [pc, #196]	@ (8008628 <HAL_ADC_ConfigChannel+0x864>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d104      	bne.n	8008570 <HAL_ADC_ConfigChannel+0x7ac>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a34      	ldr	r2, [pc, #208]	@ (800863c <HAL_ADC_ConfigChannel+0x878>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d047      	beq.n	8008600 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008578:	d004      	beq.n	8008584 <HAL_ADC_ConfigChannel+0x7c0>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a2a      	ldr	r2, [pc, #168]	@ (8008628 <HAL_ADC_ConfigChannel+0x864>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d101      	bne.n	8008588 <HAL_ADC_ConfigChannel+0x7c4>
 8008584:	4a29      	ldr	r2, [pc, #164]	@ (800862c <HAL_ADC_ConfigChannel+0x868>)
 8008586:	e000      	b.n	800858a <HAL_ADC_ConfigChannel+0x7c6>
 8008588:	4a23      	ldr	r2, [pc, #140]	@ (8008618 <HAL_ADC_ConfigChannel+0x854>)
 800858a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800858e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008592:	4619      	mov	r1, r3
 8008594:	4610      	mov	r0, r2
 8008596:	f7fe ff36 	bl	8007406 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800859a:	e031      	b.n	8008600 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a27      	ldr	r2, [pc, #156]	@ (8008640 <HAL_ADC_ConfigChannel+0x87c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d12d      	bne.n	8008602 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80085a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80085aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d127      	bne.n	8008602 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a1c      	ldr	r2, [pc, #112]	@ (8008628 <HAL_ADC_ConfigChannel+0x864>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d022      	beq.n	8008602 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80085c4:	d004      	beq.n	80085d0 <HAL_ADC_ConfigChannel+0x80c>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a17      	ldr	r2, [pc, #92]	@ (8008628 <HAL_ADC_ConfigChannel+0x864>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d101      	bne.n	80085d4 <HAL_ADC_ConfigChannel+0x810>
 80085d0:	4a16      	ldr	r2, [pc, #88]	@ (800862c <HAL_ADC_ConfigChannel+0x868>)
 80085d2:	e000      	b.n	80085d6 <HAL_ADC_ConfigChannel+0x812>
 80085d4:	4a10      	ldr	r2, [pc, #64]	@ (8008618 <HAL_ADC_ConfigChannel+0x854>)
 80085d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80085da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80085de:	4619      	mov	r1, r3
 80085e0:	4610      	mov	r0, r2
 80085e2:	f7fe ff10 	bl	8007406 <LL_ADC_SetCommonPathInternalCh>
 80085e6:	e00c      	b.n	8008602 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085ec:	f043 0220 	orr.w	r2, r3, #32
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80085fa:	e002      	b.n	8008602 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80085fc:	bf00      	nop
 80085fe:	e000      	b.n	8008602 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008600:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800860a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800860e:	4618      	mov	r0, r3
 8008610:	37d8      	adds	r7, #216	@ 0xd8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	50000700 	.word	0x50000700
 800861c:	c3210000 	.word	0xc3210000
 8008620:	90c00010 	.word	0x90c00010
 8008624:	50000600 	.word	0x50000600
 8008628:	50000100 	.word	0x50000100
 800862c:	50000300 	.word	0x50000300
 8008630:	20000394 	.word	0x20000394
 8008634:	053e2d63 	.word	0x053e2d63
 8008638:	c7520000 	.word	0xc7520000
 800863c:	50000500 	.word	0x50000500
 8008640:	cb840000 	.word	0xcb840000

08008644 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800864c:	2300      	movs	r3, #0
 800864e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4618      	mov	r0, r3
 8008656:	f7ff f8a7 	bl	80077a8 <LL_ADC_IsEnabled>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d176      	bne.n	800874e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	689a      	ldr	r2, [r3, #8]
 8008666:	4b3c      	ldr	r3, [pc, #240]	@ (8008758 <ADC_Enable+0x114>)
 8008668:	4013      	ands	r3, r2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00d      	beq.n	800868a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008672:	f043 0210 	orr.w	r2, r3, #16
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800867e:	f043 0201 	orr.w	r2, r3, #1
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	e062      	b.n	8008750 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff f862 	bl	8007758 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800869c:	d004      	beq.n	80086a8 <ADC_Enable+0x64>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a2e      	ldr	r2, [pc, #184]	@ (800875c <ADC_Enable+0x118>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d101      	bne.n	80086ac <ADC_Enable+0x68>
 80086a8:	4b2d      	ldr	r3, [pc, #180]	@ (8008760 <ADC_Enable+0x11c>)
 80086aa:	e000      	b.n	80086ae <ADC_Enable+0x6a>
 80086ac:	4b2d      	ldr	r3, [pc, #180]	@ (8008764 <ADC_Enable+0x120>)
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7fe febc 	bl	800742c <LL_ADC_GetCommonPathInternalCh>
 80086b4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80086b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d013      	beq.n	80086e6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80086be:	4b2a      	ldr	r3, [pc, #168]	@ (8008768 <ADC_Enable+0x124>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	099b      	lsrs	r3, r3, #6
 80086c4:	4a29      	ldr	r2, [pc, #164]	@ (800876c <ADC_Enable+0x128>)
 80086c6:	fba2 2303 	umull	r2, r3, r2, r3
 80086ca:	099b      	lsrs	r3, r3, #6
 80086cc:	1c5a      	adds	r2, r3, #1
 80086ce:	4613      	mov	r3, r2
 80086d0:	005b      	lsls	r3, r3, #1
 80086d2:	4413      	add	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80086d8:	e002      	b.n	80086e0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	3b01      	subs	r3, #1
 80086de:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1f9      	bne.n	80086da <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80086e6:	f7fe fe6f 	bl	80073c8 <HAL_GetTick>
 80086ea:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80086ec:	e028      	b.n	8008740 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff f858 	bl	80077a8 <LL_ADC_IsEnabled>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d104      	bne.n	8008708 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4618      	mov	r0, r3
 8008704:	f7ff f828 	bl	8007758 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008708:	f7fe fe5e 	bl	80073c8 <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	2b02      	cmp	r3, #2
 8008714:	d914      	bls.n	8008740 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b01      	cmp	r3, #1
 8008722:	d00d      	beq.n	8008740 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008728:	f043 0210 	orr.w	r2, r3, #16
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008734:	f043 0201 	orr.w	r2, r3, #1
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e007      	b.n	8008750 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 0301 	and.w	r3, r3, #1
 800874a:	2b01      	cmp	r3, #1
 800874c:	d1cf      	bne.n	80086ee <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	8000003f 	.word	0x8000003f
 800875c:	50000100 	.word	0x50000100
 8008760:	50000300 	.word	0x50000300
 8008764:	50000700 	.word	0x50000700
 8008768:	20000394 	.word	0x20000394
 800876c:	053e2d63 	.word	0x053e2d63

08008770 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4618      	mov	r0, r3
 800877e:	f7ff f826 	bl	80077ce <LL_ADC_IsDisableOngoing>
 8008782:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4618      	mov	r0, r3
 800878a:	f7ff f80d 	bl	80077a8 <LL_ADC_IsEnabled>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d047      	beq.n	8008824 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d144      	bne.n	8008824 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f003 030d 	and.w	r3, r3, #13
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d10c      	bne.n	80087c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7fe ffe7 	bl	8007780 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2203      	movs	r2, #3
 80087b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80087ba:	f7fe fe05 	bl	80073c8 <HAL_GetTick>
 80087be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80087c0:	e029      	b.n	8008816 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087c6:	f043 0210 	orr.w	r2, r3, #16
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80087d2:	f043 0201 	orr.w	r2, r3, #1
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e023      	b.n	8008826 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80087de:	f7fe fdf3 	bl	80073c8 <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d914      	bls.n	8008816 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00d      	beq.n	8008816 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087fe:	f043 0210 	orr.w	r2, r3, #16
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800880a:	f043 0201 	orr.w	r2, r3, #1
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e007      	b.n	8008826 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1dc      	bne.n	80087de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b084      	sub	sp, #16
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800883a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008840:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008844:	2b00      	cmp	r3, #0
 8008846:	d14b      	bne.n	80088e0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800884c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0308 	and.w	r3, r3, #8
 800885e:	2b00      	cmp	r3, #0
 8008860:	d021      	beq.n	80088a6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4618      	mov	r0, r3
 8008868:	f7fe fe8c 	bl	8007584 <LL_ADC_REG_IsTriggerSourceSWStart>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d032      	beq.n	80088d8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800887c:	2b00      	cmp	r3, #0
 800887e:	d12b      	bne.n	80088d8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008884:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008890:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008894:	2b00      	cmp	r3, #0
 8008896:	d11f      	bne.n	80088d8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800889c:	f043 0201 	orr.w	r2, r3, #1
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80088a4:	e018      	b.n	80088d8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	f003 0302 	and.w	r3, r3, #2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d111      	bne.n	80088d8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d105      	bne.n	80088d8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088d0:	f043 0201 	orr.w	r2, r3, #1
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f7ff fa55 	bl	8007d88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80088de:	e00e      	b.n	80088fe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088e4:	f003 0310 	and.w	r3, r3, #16
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d003      	beq.n	80088f4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80088ec:	68f8      	ldr	r0, [r7, #12]
 80088ee:	f7ff fa5f 	bl	8007db0 <HAL_ADC_ErrorCallback>
}
 80088f2:	e004      	b.n	80088fe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	4798      	blx	r3
}
 80088fe:	bf00      	nop
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008912:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f7ff fa41 	bl	8007d9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800891a:	bf00      	nop
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800892e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008934:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008940:	f043 0204 	orr.w	r2, r3, #4
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	f7ff fa31 	bl	8007db0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800894e:	bf00      	nop
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <LL_ADC_IsEnabled>:
{
 8008956:	b480      	push	{r7}
 8008958:	b083      	sub	sp, #12
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b01      	cmp	r3, #1
 8008968:	d101      	bne.n	800896e <LL_ADC_IsEnabled+0x18>
 800896a:	2301      	movs	r3, #1
 800896c:	e000      	b.n	8008970 <LL_ADC_IsEnabled+0x1a>
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <LL_ADC_StartCalibration>:
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800898e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008998:	4313      	orrs	r3, r2
 800899a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	609a      	str	r2, [r3, #8]
}
 80089a2:	bf00      	nop
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <LL_ADC_IsCalibrationOnGoing>:
{
 80089ae:	b480      	push	{r7}
 80089b0:	b083      	sub	sp, #12
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089c2:	d101      	bne.n	80089c8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80089c4:	2301      	movs	r3, #1
 80089c6:	e000      	b.n	80089ca <LL_ADC_IsCalibrationOnGoing+0x1c>
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80089d6:	b480      	push	{r7}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	f003 0304 	and.w	r3, r3, #4
 80089e6:	2b04      	cmp	r3, #4
 80089e8:	d101      	bne.n	80089ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80089ea:	2301      	movs	r3, #1
 80089ec:	e000      	b.n	80089f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d101      	bne.n	8008a18 <HAL_ADCEx_Calibration_Start+0x1c>
 8008a14:	2302      	movs	r3, #2
 8008a16:	e04d      	b.n	8008ab4 <HAL_ADCEx_Calibration_Start+0xb8>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7ff fea5 	bl	8008770 <ADC_Disable>
 8008a26:	4603      	mov	r3, r0
 8008a28:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d136      	bne.n	8008a9e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a34:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008a38:	f023 0302 	bic.w	r3, r3, #2
 8008a3c:	f043 0202 	orr.w	r2, r3, #2
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7ff ff96 	bl	800897c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008a50:	e014      	b.n	8008a7c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	3301      	adds	r3, #1
 8008a56:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	4a18      	ldr	r2, [pc, #96]	@ (8008abc <HAL_ADCEx_Calibration_Start+0xc0>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d90d      	bls.n	8008a7c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a64:	f023 0312 	bic.w	r3, r3, #18
 8008a68:	f043 0210 	orr.w	r2, r3, #16
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e01b      	b.n	8008ab4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7ff ff94 	bl	80089ae <LL_ADC_IsCalibrationOnGoing>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d1e2      	bne.n	8008a52 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a90:	f023 0303 	bic.w	r3, r3, #3
 8008a94:	f043 0201 	orr.w	r2, r3, #1
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008a9c:	e005      	b.n	8008aaa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aa2:	f043 0210 	orr.w	r2, r3, #16
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	0004de01 	.word	0x0004de01

08008ac0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8008ac0:	b590      	push	{r4, r7, lr}
 8008ac2:	b0a1      	sub	sp, #132	@ 0x84
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d101      	bne.n	8008ade <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008ada:	2302      	movs	r3, #2
 8008adc:	e0e7      	b.n	8008cae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8008aea:	2300      	movs	r3, #0
 8008aec:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008af6:	d102      	bne.n	8008afe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008af8:	4b6f      	ldr	r3, [pc, #444]	@ (8008cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008afa:	60bb      	str	r3, [r7, #8]
 8008afc:	e009      	b.n	8008b12 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a6e      	ldr	r2, [pc, #440]	@ (8008cbc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d102      	bne.n	8008b0e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8008b08:	4b6d      	ldr	r3, [pc, #436]	@ (8008cc0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008b0a:	60bb      	str	r3, [r7, #8]
 8008b0c:	e001      	b.n	8008b12 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10b      	bne.n	8008b30 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b1c:	f043 0220 	orr.w	r2, r3, #32
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e0be      	b.n	8008cae <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7ff ff4f 	bl	80089d6 <LL_ADC_REG_IsConversionOngoing>
 8008b38:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7ff ff49 	bl	80089d6 <LL_ADC_REG_IsConversionOngoing>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f040 80a0 	bne.w	8008c8c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8008b4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	f040 809c 	bne.w	8008c8c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b5c:	d004      	beq.n	8008b68 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a55      	ldr	r2, [pc, #340]	@ (8008cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d101      	bne.n	8008b6c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8008b68:	4b56      	ldr	r3, [pc, #344]	@ (8008cc4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008b6a:	e000      	b.n	8008b6e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8008b6c:	4b56      	ldr	r3, [pc, #344]	@ (8008cc8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8008b6e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d04b      	beq.n	8008c10 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008b78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	6859      	ldr	r1, [r3, #4]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008b8a:	035b      	lsls	r3, r3, #13
 8008b8c:	430b      	orrs	r3, r1
 8008b8e:	431a      	orrs	r2, r3
 8008b90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008b92:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b9c:	d004      	beq.n	8008ba8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a45      	ldr	r2, [pc, #276]	@ (8008cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d10f      	bne.n	8008bc8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8008ba8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8008bac:	f7ff fed3 	bl	8008956 <LL_ADC_IsEnabled>
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	4841      	ldr	r0, [pc, #260]	@ (8008cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008bb4:	f7ff fecf 	bl	8008956 <LL_ADC_IsEnabled>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	4323      	orrs	r3, r4
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	bf0c      	ite	eq
 8008bc0:	2301      	moveq	r3, #1
 8008bc2:	2300      	movne	r3, #0
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	e012      	b.n	8008bee <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8008bc8:	483c      	ldr	r0, [pc, #240]	@ (8008cbc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008bca:	f7ff fec4 	bl	8008956 <LL_ADC_IsEnabled>
 8008bce:	4604      	mov	r4, r0
 8008bd0:	483b      	ldr	r0, [pc, #236]	@ (8008cc0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008bd2:	f7ff fec0 	bl	8008956 <LL_ADC_IsEnabled>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	431c      	orrs	r4, r3
 8008bda:	483c      	ldr	r0, [pc, #240]	@ (8008ccc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008bdc:	f7ff febb 	bl	8008956 <LL_ADC_IsEnabled>
 8008be0:	4603      	mov	r3, r0
 8008be2:	4323      	orrs	r3, r4
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	bf0c      	ite	eq
 8008be8:	2301      	moveq	r3, #1
 8008bea:	2300      	movne	r3, #0
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d056      	beq.n	8008ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008bf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8008bfa:	f023 030f 	bic.w	r3, r3, #15
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	6811      	ldr	r1, [r2, #0]
 8008c02:	683a      	ldr	r2, [r7, #0]
 8008c04:	6892      	ldr	r2, [r2, #8]
 8008c06:	430a      	orrs	r2, r1
 8008c08:	431a      	orrs	r2, r3
 8008c0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c0c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008c0e:	e047      	b.n	8008ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008c10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008c18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c1a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c24:	d004      	beq.n	8008c30 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a23      	ldr	r2, [pc, #140]	@ (8008cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d10f      	bne.n	8008c50 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8008c30:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8008c34:	f7ff fe8f 	bl	8008956 <LL_ADC_IsEnabled>
 8008c38:	4604      	mov	r4, r0
 8008c3a:	481f      	ldr	r0, [pc, #124]	@ (8008cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008c3c:	f7ff fe8b 	bl	8008956 <LL_ADC_IsEnabled>
 8008c40:	4603      	mov	r3, r0
 8008c42:	4323      	orrs	r3, r4
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	bf0c      	ite	eq
 8008c48:	2301      	moveq	r3, #1
 8008c4a:	2300      	movne	r3, #0
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	e012      	b.n	8008c76 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8008c50:	481a      	ldr	r0, [pc, #104]	@ (8008cbc <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008c52:	f7ff fe80 	bl	8008956 <LL_ADC_IsEnabled>
 8008c56:	4604      	mov	r4, r0
 8008c58:	4819      	ldr	r0, [pc, #100]	@ (8008cc0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008c5a:	f7ff fe7c 	bl	8008956 <LL_ADC_IsEnabled>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	431c      	orrs	r4, r3
 8008c62:	481a      	ldr	r0, [pc, #104]	@ (8008ccc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008c64:	f7ff fe77 	bl	8008956 <LL_ADC_IsEnabled>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	4323      	orrs	r3, r4
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	bf0c      	ite	eq
 8008c70:	2301      	moveq	r3, #1
 8008c72:	2300      	movne	r3, #0
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d012      	beq.n	8008ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008c7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8008c82:	f023 030f 	bic.w	r3, r3, #15
 8008c86:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8008c88:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008c8a:	e009      	b.n	8008ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c90:	f043 0220 	orr.w	r2, r3, #32
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8008c98:	2301      	movs	r3, #1
 8008c9a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8008c9e:	e000      	b.n	8008ca2 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008ca0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8008caa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3784      	adds	r7, #132	@ 0x84
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd90      	pop	{r4, r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	50000100 	.word	0x50000100
 8008cbc:	50000400 	.word	0x50000400
 8008cc0:	50000500 	.word	0x50000500
 8008cc4:	50000300 	.word	0x50000300
 8008cc8:	50000700 	.word	0x50000700
 8008ccc:	50000600 	.word	0x50000600

08008cd0 <__NVIC_SetPriorityGrouping>:
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f003 0307 	and.w	r3, r3, #7
 8008cde:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8008d14 <__NVIC_SetPriorityGrouping+0x44>)
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008cec:	4013      	ands	r3, r2
 8008cee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008d02:	4a04      	ldr	r2, [pc, #16]	@ (8008d14 <__NVIC_SetPriorityGrouping+0x44>)
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	60d3      	str	r3, [r2, #12]
}
 8008d08:	bf00      	nop
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr
 8008d14:	e000ed00 	.word	0xe000ed00

08008d18 <__NVIC_GetPriorityGrouping>:
{
 8008d18:	b480      	push	{r7}
 8008d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008d1c:	4b04      	ldr	r3, [pc, #16]	@ (8008d30 <__NVIC_GetPriorityGrouping+0x18>)
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	0a1b      	lsrs	r3, r3, #8
 8008d22:	f003 0307 	and.w	r3, r3, #7
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr
 8008d30:	e000ed00 	.word	0xe000ed00

08008d34 <__NVIC_EnableIRQ>:
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	db0b      	blt.n	8008d5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008d46:	79fb      	ldrb	r3, [r7, #7]
 8008d48:	f003 021f 	and.w	r2, r3, #31
 8008d4c:	4907      	ldr	r1, [pc, #28]	@ (8008d6c <__NVIC_EnableIRQ+0x38>)
 8008d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d52:	095b      	lsrs	r3, r3, #5
 8008d54:	2001      	movs	r0, #1
 8008d56:	fa00 f202 	lsl.w	r2, r0, r2
 8008d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008d5e:	bf00      	nop
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	e000e100 	.word	0xe000e100

08008d70 <__NVIC_SetPriority>:
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	6039      	str	r1, [r7, #0]
 8008d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	db0a      	blt.n	8008d9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	490c      	ldr	r1, [pc, #48]	@ (8008dbc <__NVIC_SetPriority+0x4c>)
 8008d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d8e:	0112      	lsls	r2, r2, #4
 8008d90:	b2d2      	uxtb	r2, r2
 8008d92:	440b      	add	r3, r1
 8008d94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008d98:	e00a      	b.n	8008db0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	b2da      	uxtb	r2, r3
 8008d9e:	4908      	ldr	r1, [pc, #32]	@ (8008dc0 <__NVIC_SetPriority+0x50>)
 8008da0:	79fb      	ldrb	r3, [r7, #7]
 8008da2:	f003 030f 	and.w	r3, r3, #15
 8008da6:	3b04      	subs	r3, #4
 8008da8:	0112      	lsls	r2, r2, #4
 8008daa:	b2d2      	uxtb	r2, r2
 8008dac:	440b      	add	r3, r1
 8008dae:	761a      	strb	r2, [r3, #24]
}
 8008db0:	bf00      	nop
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	e000e100 	.word	0xe000e100
 8008dc0:	e000ed00 	.word	0xe000ed00

08008dc4 <NVIC_EncodePriority>:
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b089      	sub	sp, #36	@ 0x24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f003 0307 	and.w	r3, r3, #7
 8008dd6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	f1c3 0307 	rsb	r3, r3, #7
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	bf28      	it	cs
 8008de2:	2304      	movcs	r3, #4
 8008de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	3304      	adds	r3, #4
 8008dea:	2b06      	cmp	r3, #6
 8008dec:	d902      	bls.n	8008df4 <NVIC_EncodePriority+0x30>
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	3b03      	subs	r3, #3
 8008df2:	e000      	b.n	8008df6 <NVIC_EncodePriority+0x32>
 8008df4:	2300      	movs	r3, #0
 8008df6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008df8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008e02:	43da      	mvns	r2, r3
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	401a      	ands	r2, r3
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	fa01 f303 	lsl.w	r3, r1, r3
 8008e16:	43d9      	mvns	r1, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e1c:	4313      	orrs	r3, r2
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3724      	adds	r7, #36	@ 0x24
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
	...

08008e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e3c:	d301      	bcc.n	8008e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e00f      	b.n	8008e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008e42:	4a0a      	ldr	r2, [pc, #40]	@ (8008e6c <SysTick_Config+0x40>)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	3b01      	subs	r3, #1
 8008e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008e4a:	210f      	movs	r1, #15
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e50:	f7ff ff8e 	bl	8008d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008e54:	4b05      	ldr	r3, [pc, #20]	@ (8008e6c <SysTick_Config+0x40>)
 8008e56:	2200      	movs	r2, #0
 8008e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008e5a:	4b04      	ldr	r3, [pc, #16]	@ (8008e6c <SysTick_Config+0x40>)
 8008e5c:	2207      	movs	r2, #7
 8008e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	e000e010 	.word	0xe000e010

08008e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7ff ff29 	bl	8008cd0 <__NVIC_SetPriorityGrouping>
}
 8008e7e:	bf00      	nop
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b086      	sub	sp, #24
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	60b9      	str	r1, [r7, #8]
 8008e90:	607a      	str	r2, [r7, #4]
 8008e92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008e94:	f7ff ff40 	bl	8008d18 <__NVIC_GetPriorityGrouping>
 8008e98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	68b9      	ldr	r1, [r7, #8]
 8008e9e:	6978      	ldr	r0, [r7, #20]
 8008ea0:	f7ff ff90 	bl	8008dc4 <NVIC_EncodePriority>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008eaa:	4611      	mov	r1, r2
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7ff ff5f 	bl	8008d70 <__NVIC_SetPriority>
}
 8008eb2:	bf00      	nop
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b082      	sub	sp, #8
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7ff ff33 	bl	8008d34 <__NVIC_EnableIRQ>
}
 8008ece:	bf00      	nop
 8008ed0:	3708      	adds	r7, #8
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bd80      	pop	{r7, pc}

08008ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008ed6:	b580      	push	{r7, lr}
 8008ed8:	b082      	sub	sp, #8
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7ff ffa4 	bl	8008e2c <SysTick_Config>
 8008ee4:	4603      	mov	r3, r0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e08d      	b.n	800901e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	4b47      	ldr	r3, [pc, #284]	@ (8009028 <HAL_DMA_Init+0x138>)
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d80f      	bhi.n	8008f2e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	461a      	mov	r2, r3
 8008f14:	4b45      	ldr	r3, [pc, #276]	@ (800902c <HAL_DMA_Init+0x13c>)
 8008f16:	4413      	add	r3, r2
 8008f18:	4a45      	ldr	r2, [pc, #276]	@ (8009030 <HAL_DMA_Init+0x140>)
 8008f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f1e:	091b      	lsrs	r3, r3, #4
 8008f20:	009a      	lsls	r2, r3, #2
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a42      	ldr	r2, [pc, #264]	@ (8009034 <HAL_DMA_Init+0x144>)
 8008f2a:	641a      	str	r2, [r3, #64]	@ 0x40
 8008f2c:	e00e      	b.n	8008f4c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	461a      	mov	r2, r3
 8008f34:	4b40      	ldr	r3, [pc, #256]	@ (8009038 <HAL_DMA_Init+0x148>)
 8008f36:	4413      	add	r3, r2
 8008f38:	4a3d      	ldr	r2, [pc, #244]	@ (8009030 <HAL_DMA_Init+0x140>)
 8008f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f3e:	091b      	lsrs	r3, r3, #4
 8008f40:	009a      	lsls	r2, r3, #2
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a3c      	ldr	r2, [pc, #240]	@ (800903c <HAL_DMA_Init+0x14c>)
 8008f4a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2202      	movs	r2, #2
 8008f50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f66:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008f70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	699b      	ldr	r3, [r3, #24]
 8008f82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008f88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008f90:	68fa      	ldr	r2, [r7, #12]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fa76 	bl	8009490 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008fac:	d102      	bne.n	8008fb4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fbc:	b2d2      	uxtb	r2, r2
 8008fbe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008fc8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d010      	beq.n	8008ff4 <HAL_DMA_Init+0x104>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	2b04      	cmp	r3, #4
 8008fd8:	d80c      	bhi.n	8008ff4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fa96 	bl	800950c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008ff0:	605a      	str	r2, [r3, #4]
 8008ff2:	e008      	b.n	8009006 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	40020407 	.word	0x40020407
 800902c:	bffdfff8 	.word	0xbffdfff8
 8009030:	cccccccd 	.word	0xcccccccd
 8009034:	40020000 	.word	0x40020000
 8009038:	bffdfbf8 	.word	0xbffdfbf8
 800903c:	40020400 	.word	0x40020400

08009040 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
 800904c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800904e:	2300      	movs	r3, #0
 8009050:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009058:	2b01      	cmp	r3, #1
 800905a:	d101      	bne.n	8009060 <HAL_DMA_Start_IT+0x20>
 800905c:	2302      	movs	r3, #2
 800905e:	e066      	b.n	800912e <HAL_DMA_Start_IT+0xee>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800906e:	b2db      	uxtb	r3, r3
 8009070:	2b01      	cmp	r3, #1
 8009072:	d155      	bne.n	8009120 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2202      	movs	r2, #2
 8009078:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2200      	movs	r2, #0
 8009080:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f022 0201 	bic.w	r2, r2, #1
 8009090:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	68b9      	ldr	r1, [r7, #8]
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f000 f9bb 	bl	8009414 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d008      	beq.n	80090b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f042 020e 	orr.w	r2, r2, #14
 80090b4:	601a      	str	r2, [r3, #0]
 80090b6:	e00f      	b.n	80090d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f022 0204 	bic.w	r2, r2, #4
 80090c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f042 020a 	orr.w	r2, r2, #10
 80090d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d007      	beq.n	80090f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80090f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80090f4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d007      	beq.n	800910e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009108:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800910c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f042 0201 	orr.w	r2, r2, #1
 800911c:	601a      	str	r2, [r3, #0]
 800911e:	e005      	b.n	800912c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009128:	2302      	movs	r3, #2
 800912a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800912c:	7dfb      	ldrb	r3, [r7, #23]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3718      	adds	r7, #24
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009136:	b480      	push	{r7}
 8009138:	b085      	sub	sp, #20
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b02      	cmp	r3, #2
 800914c:	d005      	beq.n	800915a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2204      	movs	r2, #4
 8009152:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	73fb      	strb	r3, [r7, #15]
 8009158:	e037      	b.n	80091ca <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f022 020e 	bic.w	r2, r2, #14
 8009168:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009174:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009178:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f022 0201 	bic.w	r2, r2, #1
 8009188:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800918e:	f003 021f 	and.w	r2, r3, #31
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009196:	2101      	movs	r1, #1
 8009198:	fa01 f202 	lsl.w	r2, r1, r2
 800919c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80091a6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00c      	beq.n	80091ca <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80091be:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80091c8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80091da:	7bfb      	ldrb	r3, [r7, #15]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80091fa:	b2db      	uxtb	r3, r3
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d00d      	beq.n	800921c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2204      	movs	r2, #4
 8009204:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	73fb      	strb	r3, [r7, #15]
 800921a:	e047      	b.n	80092ac <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f022 020e 	bic.w	r2, r2, #14
 800922a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f022 0201 	bic.w	r2, r2, #1
 800923a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009246:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800924a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009250:	f003 021f 	and.w	r2, r3, #31
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009258:	2101      	movs	r1, #1
 800925a:	fa01 f202 	lsl.w	r2, r1, r2
 800925e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009268:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00c      	beq.n	800928c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800927c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009280:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800928a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d003      	beq.n	80092ac <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	4798      	blx	r3
    }
  }
  return status;
 80092ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3710      	adds	r7, #16
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b084      	sub	sp, #16
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092d2:	f003 031f 	and.w	r3, r3, #31
 80092d6:	2204      	movs	r2, #4
 80092d8:	409a      	lsls	r2, r3
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	4013      	ands	r3, r2
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d026      	beq.n	8009330 <HAL_DMA_IRQHandler+0x7a>
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	f003 0304 	and.w	r3, r3, #4
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d021      	beq.n	8009330 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 0320 	and.w	r3, r3, #32
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d107      	bne.n	800930a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f022 0204 	bic.w	r2, r2, #4
 8009308:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800930e:	f003 021f 	and.w	r2, r3, #31
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009316:	2104      	movs	r1, #4
 8009318:	fa01 f202 	lsl.w	r2, r1, r2
 800931c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009322:	2b00      	cmp	r3, #0
 8009324:	d071      	beq.n	800940a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800932e:	e06c      	b.n	800940a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009334:	f003 031f 	and.w	r3, r3, #31
 8009338:	2202      	movs	r2, #2
 800933a:	409a      	lsls	r2, r3
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	4013      	ands	r3, r2
 8009340:	2b00      	cmp	r3, #0
 8009342:	d02e      	beq.n	80093a2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	f003 0302 	and.w	r3, r3, #2
 800934a:	2b00      	cmp	r3, #0
 800934c:	d029      	beq.n	80093a2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f003 0320 	and.w	r3, r3, #32
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10b      	bne.n	8009374 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f022 020a 	bic.w	r2, r2, #10
 800936a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009378:	f003 021f 	and.w	r2, r3, #31
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009380:	2102      	movs	r1, #2
 8009382:	fa01 f202 	lsl.w	r2, r1, r2
 8009386:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009394:	2b00      	cmp	r3, #0
 8009396:	d038      	beq.n	800940a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80093a0:	e033      	b.n	800940a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093a6:	f003 031f 	and.w	r3, r3, #31
 80093aa:	2208      	movs	r2, #8
 80093ac:	409a      	lsls	r2, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4013      	ands	r3, r2
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d02a      	beq.n	800940c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	f003 0308 	and.w	r3, r3, #8
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d025      	beq.n	800940c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f022 020e 	bic.w	r2, r2, #14
 80093ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093d4:	f003 021f 	and.w	r2, r3, #31
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093dc:	2101      	movs	r1, #1
 80093de:	fa01 f202 	lsl.w	r2, r1, r2
 80093e2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d004      	beq.n	800940c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800940a:	bf00      	nop
 800940c:	bf00      	nop
}
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800942a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009430:	2b00      	cmp	r3, #0
 8009432:	d004      	beq.n	800943e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800943c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009442:	f003 021f 	and.w	r2, r3, #31
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800944a:	2101      	movs	r1, #1
 800944c:	fa01 f202 	lsl.w	r2, r1, r2
 8009450:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	683a      	ldr	r2, [r7, #0]
 8009458:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	2b10      	cmp	r3, #16
 8009460:	d108      	bne.n	8009474 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009472:	e007      	b.n	8009484 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	60da      	str	r2, [r3, #12]
}
 8009484:	bf00      	nop
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009490:	b480      	push	{r7}
 8009492:	b087      	sub	sp, #28
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	461a      	mov	r2, r3
 800949e:	4b16      	ldr	r3, [pc, #88]	@ (80094f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d802      	bhi.n	80094aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80094a4:	4b15      	ldr	r3, [pc, #84]	@ (80094fc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80094a6:	617b      	str	r3, [r7, #20]
 80094a8:	e001      	b.n	80094ae <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80094aa:	4b15      	ldr	r3, [pc, #84]	@ (8009500 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80094ac:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	3b08      	subs	r3, #8
 80094ba:	4a12      	ldr	r2, [pc, #72]	@ (8009504 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80094bc:	fba2 2303 	umull	r2, r3, r2, r3
 80094c0:	091b      	lsrs	r3, r3, #4
 80094c2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094c8:	089b      	lsrs	r3, r3, #2
 80094ca:	009a      	lsls	r2, r3, #2
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	4413      	add	r3, r2
 80094d0:	461a      	mov	r2, r3
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4a0b      	ldr	r2, [pc, #44]	@ (8009508 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80094da:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f003 031f 	and.w	r3, r3, #31
 80094e2:	2201      	movs	r2, #1
 80094e4:	409a      	lsls	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80094ea:	bf00      	nop
 80094ec:	371c      	adds	r7, #28
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	40020407 	.word	0x40020407
 80094fc:	40020800 	.word	0x40020800
 8009500:	40020820 	.word	0x40020820
 8009504:	cccccccd 	.word	0xcccccccd
 8009508:	40020880 	.word	0x40020880

0800950c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685b      	ldr	r3, [r3, #4]
 8009518:	b2db      	uxtb	r3, r3
 800951a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	4b0b      	ldr	r3, [pc, #44]	@ (800954c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009520:	4413      	add	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	461a      	mov	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a08      	ldr	r2, [pc, #32]	@ (8009550 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800952e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	3b01      	subs	r3, #1
 8009534:	f003 031f 	and.w	r3, r3, #31
 8009538:	2201      	movs	r2, #1
 800953a:	409a      	lsls	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8009540:	bf00      	nop
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr
 800954c:	1000823f 	.word	0x1000823f
 8009550:	40020940 	.word	0x40020940

08009554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009554:	b480      	push	{r7}
 8009556:	b087      	sub	sp, #28
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800955e:	2300      	movs	r3, #0
 8009560:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009562:	e15a      	b.n	800981a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	2101      	movs	r1, #1
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	fa01 f303 	lsl.w	r3, r1, r3
 8009570:	4013      	ands	r3, r2
 8009572:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2b00      	cmp	r3, #0
 8009578:	f000 814c 	beq.w	8009814 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	f003 0303 	and.w	r3, r3, #3
 8009584:	2b01      	cmp	r3, #1
 8009586:	d005      	beq.n	8009594 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009590:	2b02      	cmp	r3, #2
 8009592:	d130      	bne.n	80095f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	689b      	ldr	r3, [r3, #8]
 8009598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	005b      	lsls	r3, r3, #1
 800959e:	2203      	movs	r2, #3
 80095a0:	fa02 f303 	lsl.w	r3, r2, r3
 80095a4:	43db      	mvns	r3, r3
 80095a6:	693a      	ldr	r2, [r7, #16]
 80095a8:	4013      	ands	r3, r2
 80095aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	68da      	ldr	r2, [r3, #12]
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	005b      	lsls	r3, r3, #1
 80095b4:	fa02 f303 	lsl.w	r3, r2, r3
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80095ca:	2201      	movs	r2, #1
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	fa02 f303 	lsl.w	r3, r2, r3
 80095d2:	43db      	mvns	r3, r3
 80095d4:	693a      	ldr	r2, [r7, #16]
 80095d6:	4013      	ands	r3, r2
 80095d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	091b      	lsrs	r3, r3, #4
 80095e0:	f003 0201 	and.w	r2, r3, #1
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	fa02 f303 	lsl.w	r3, r2, r3
 80095ea:	693a      	ldr	r2, [r7, #16]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	f003 0303 	and.w	r3, r3, #3
 80095fe:	2b03      	cmp	r3, #3
 8009600:	d017      	beq.n	8009632 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	005b      	lsls	r3, r3, #1
 800960c:	2203      	movs	r2, #3
 800960e:	fa02 f303 	lsl.w	r3, r2, r3
 8009612:	43db      	mvns	r3, r3
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	4013      	ands	r3, r2
 8009618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	689a      	ldr	r2, [r3, #8]
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	fa02 f303 	lsl.w	r3, r2, r3
 8009626:	693a      	ldr	r2, [r7, #16]
 8009628:	4313      	orrs	r3, r2
 800962a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	f003 0303 	and.w	r3, r3, #3
 800963a:	2b02      	cmp	r3, #2
 800963c:	d123      	bne.n	8009686 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	08da      	lsrs	r2, r3, #3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	3208      	adds	r2, #8
 8009646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800964a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	f003 0307 	and.w	r3, r3, #7
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	220f      	movs	r2, #15
 8009656:	fa02 f303 	lsl.w	r3, r2, r3
 800965a:	43db      	mvns	r3, r3
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	4013      	ands	r3, r2
 8009660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	691a      	ldr	r2, [r3, #16]
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	f003 0307 	and.w	r3, r3, #7
 800966c:	009b      	lsls	r3, r3, #2
 800966e:	fa02 f303 	lsl.w	r3, r2, r3
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	4313      	orrs	r3, r2
 8009676:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	08da      	lsrs	r2, r3, #3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	3208      	adds	r2, #8
 8009680:	6939      	ldr	r1, [r7, #16]
 8009682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	005b      	lsls	r3, r3, #1
 8009690:	2203      	movs	r2, #3
 8009692:	fa02 f303 	lsl.w	r3, r2, r3
 8009696:	43db      	mvns	r3, r3
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	4013      	ands	r3, r2
 800969c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	f003 0203 	and.w	r2, r3, #3
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	005b      	lsls	r3, r3, #1
 80096aa:	fa02 f303 	lsl.w	r3, r2, r3
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f000 80a6 	beq.w	8009814 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096c8:	4b5b      	ldr	r3, [pc, #364]	@ (8009838 <HAL_GPIO_Init+0x2e4>)
 80096ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096cc:	4a5a      	ldr	r2, [pc, #360]	@ (8009838 <HAL_GPIO_Init+0x2e4>)
 80096ce:	f043 0301 	orr.w	r3, r3, #1
 80096d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80096d4:	4b58      	ldr	r3, [pc, #352]	@ (8009838 <HAL_GPIO_Init+0x2e4>)
 80096d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096d8:	f003 0301 	and.w	r3, r3, #1
 80096dc:	60bb      	str	r3, [r7, #8]
 80096de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80096e0:	4a56      	ldr	r2, [pc, #344]	@ (800983c <HAL_GPIO_Init+0x2e8>)
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	089b      	lsrs	r3, r3, #2
 80096e6:	3302      	adds	r3, #2
 80096e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f003 0303 	and.w	r3, r3, #3
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	220f      	movs	r2, #15
 80096f8:	fa02 f303 	lsl.w	r3, r2, r3
 80096fc:	43db      	mvns	r3, r3
 80096fe:	693a      	ldr	r2, [r7, #16]
 8009700:	4013      	ands	r3, r2
 8009702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800970a:	d01f      	beq.n	800974c <HAL_GPIO_Init+0x1f8>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a4c      	ldr	r2, [pc, #304]	@ (8009840 <HAL_GPIO_Init+0x2ec>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d019      	beq.n	8009748 <HAL_GPIO_Init+0x1f4>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a4b      	ldr	r2, [pc, #300]	@ (8009844 <HAL_GPIO_Init+0x2f0>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d013      	beq.n	8009744 <HAL_GPIO_Init+0x1f0>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a4a      	ldr	r2, [pc, #296]	@ (8009848 <HAL_GPIO_Init+0x2f4>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d00d      	beq.n	8009740 <HAL_GPIO_Init+0x1ec>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	4a49      	ldr	r2, [pc, #292]	@ (800984c <HAL_GPIO_Init+0x2f8>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d007      	beq.n	800973c <HAL_GPIO_Init+0x1e8>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	4a48      	ldr	r2, [pc, #288]	@ (8009850 <HAL_GPIO_Init+0x2fc>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d101      	bne.n	8009738 <HAL_GPIO_Init+0x1e4>
 8009734:	2305      	movs	r3, #5
 8009736:	e00a      	b.n	800974e <HAL_GPIO_Init+0x1fa>
 8009738:	2306      	movs	r3, #6
 800973a:	e008      	b.n	800974e <HAL_GPIO_Init+0x1fa>
 800973c:	2304      	movs	r3, #4
 800973e:	e006      	b.n	800974e <HAL_GPIO_Init+0x1fa>
 8009740:	2303      	movs	r3, #3
 8009742:	e004      	b.n	800974e <HAL_GPIO_Init+0x1fa>
 8009744:	2302      	movs	r3, #2
 8009746:	e002      	b.n	800974e <HAL_GPIO_Init+0x1fa>
 8009748:	2301      	movs	r3, #1
 800974a:	e000      	b.n	800974e <HAL_GPIO_Init+0x1fa>
 800974c:	2300      	movs	r3, #0
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	f002 0203 	and.w	r2, r2, #3
 8009754:	0092      	lsls	r2, r2, #2
 8009756:	4093      	lsls	r3, r2
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	4313      	orrs	r3, r2
 800975c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800975e:	4937      	ldr	r1, [pc, #220]	@ (800983c <HAL_GPIO_Init+0x2e8>)
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	089b      	lsrs	r3, r3, #2
 8009764:	3302      	adds	r3, #2
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800976c:	4b39      	ldr	r3, [pc, #228]	@ (8009854 <HAL_GPIO_Init+0x300>)
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	43db      	mvns	r3, r3
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	4013      	ands	r3, r2
 800977a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009784:	2b00      	cmp	r3, #0
 8009786:	d003      	beq.n	8009790 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4313      	orrs	r3, r2
 800978e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009790:	4a30      	ldr	r2, [pc, #192]	@ (8009854 <HAL_GPIO_Init+0x300>)
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009796:	4b2f      	ldr	r3, [pc, #188]	@ (8009854 <HAL_GPIO_Init+0x300>)
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	43db      	mvns	r3, r3
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	4013      	ands	r3, r2
 80097a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d003      	beq.n	80097ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80097ba:	4a26      	ldr	r2, [pc, #152]	@ (8009854 <HAL_GPIO_Init+0x300>)
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80097c0:	4b24      	ldr	r3, [pc, #144]	@ (8009854 <HAL_GPIO_Init+0x300>)
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	43db      	mvns	r3, r3
 80097ca:	693a      	ldr	r2, [r7, #16]
 80097cc:	4013      	ands	r3, r2
 80097ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80097dc:	693a      	ldr	r2, [r7, #16]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80097e4:	4a1b      	ldr	r2, [pc, #108]	@ (8009854 <HAL_GPIO_Init+0x300>)
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80097ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009854 <HAL_GPIO_Init+0x300>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	43db      	mvns	r3, r3
 80097f4:	693a      	ldr	r2, [r7, #16]
 80097f6:	4013      	ands	r3, r2
 80097f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009802:	2b00      	cmp	r3, #0
 8009804:	d003      	beq.n	800980e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	4313      	orrs	r3, r2
 800980c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800980e:	4a11      	ldr	r2, [pc, #68]	@ (8009854 <HAL_GPIO_Init+0x300>)
 8009810:	693b      	ldr	r3, [r7, #16]
 8009812:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	3301      	adds	r3, #1
 8009818:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	fa22 f303 	lsr.w	r3, r2, r3
 8009824:	2b00      	cmp	r3, #0
 8009826:	f47f ae9d 	bne.w	8009564 <HAL_GPIO_Init+0x10>
  }
}
 800982a:	bf00      	nop
 800982c:	bf00      	nop
 800982e:	371c      	adds	r7, #28
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr
 8009838:	40021000 	.word	0x40021000
 800983c:	40010000 	.word	0x40010000
 8009840:	48000400 	.word	0x48000400
 8009844:	48000800 	.word	0x48000800
 8009848:	48000c00 	.word	0x48000c00
 800984c:	48001000 	.word	0x48001000
 8009850:	48001400 	.word	0x48001400
 8009854:	40010400 	.word	0x40010400

08009858 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	691a      	ldr	r2, [r3, #16]
 8009868:	887b      	ldrh	r3, [r7, #2]
 800986a:	4013      	ands	r3, r2
 800986c:	2b00      	cmp	r3, #0
 800986e:	d002      	beq.n	8009876 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009870:	2301      	movs	r3, #1
 8009872:	73fb      	strb	r3, [r7, #15]
 8009874:	e001      	b.n	800987a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009876:	2300      	movs	r3, #0
 8009878:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800987a:	7bfb      	ldrb	r3, [r7, #15]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3714      	adds	r7, #20
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr

08009888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	807b      	strh	r3, [r7, #2]
 8009894:	4613      	mov	r3, r2
 8009896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009898:	787b      	ldrb	r3, [r7, #1]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800989e:	887a      	ldrh	r2, [r7, #2]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80098a4:	e002      	b.n	80098ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80098a6:	887a      	ldrh	r2, [r7, #2]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	4603      	mov	r3, r0
 80098c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80098c2:	4b08      	ldr	r3, [pc, #32]	@ (80098e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80098c4:	695a      	ldr	r2, [r3, #20]
 80098c6:	88fb      	ldrh	r3, [r7, #6]
 80098c8:	4013      	ands	r3, r2
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d006      	beq.n	80098dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80098ce:	4a05      	ldr	r2, [pc, #20]	@ (80098e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80098d0:	88fb      	ldrh	r3, [r7, #6]
 80098d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80098d4:	88fb      	ldrh	r3, [r7, #6]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7fb ff2c 	bl	8005734 <HAL_GPIO_EXTI_Callback>
  }
}
 80098dc:	bf00      	nop
 80098de:	3708      	adds	r7, #8
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	40010400 	.word	0x40010400

080098e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d141      	bne.n	800997a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80098f6:	4b4b      	ldr	r3, [pc, #300]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80098fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009902:	d131      	bne.n	8009968 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009904:	4b47      	ldr	r3, [pc, #284]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009906:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800990a:	4a46      	ldr	r2, [pc, #280]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800990c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009910:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009914:	4b43      	ldr	r3, [pc, #268]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800991c:	4a41      	ldr	r2, [pc, #260]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800991e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009922:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009924:	4b40      	ldr	r3, [pc, #256]	@ (8009a28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2232      	movs	r2, #50	@ 0x32
 800992a:	fb02 f303 	mul.w	r3, r2, r3
 800992e:	4a3f      	ldr	r2, [pc, #252]	@ (8009a2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009930:	fba2 2303 	umull	r2, r3, r2, r3
 8009934:	0c9b      	lsrs	r3, r3, #18
 8009936:	3301      	adds	r3, #1
 8009938:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800993a:	e002      	b.n	8009942 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	3b01      	subs	r3, #1
 8009940:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009942:	4b38      	ldr	r3, [pc, #224]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800994a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800994e:	d102      	bne.n	8009956 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1f2      	bne.n	800993c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009956:	4b33      	ldr	r3, [pc, #204]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009958:	695b      	ldr	r3, [r3, #20]
 800995a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800995e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009962:	d158      	bne.n	8009a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009964:	2303      	movs	r3, #3
 8009966:	e057      	b.n	8009a18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009968:	4b2e      	ldr	r3, [pc, #184]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800996a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800996e:	4a2d      	ldr	r2, [pc, #180]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009974:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009978:	e04d      	b.n	8009a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009980:	d141      	bne.n	8009a06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009982:	4b28      	ldr	r3, [pc, #160]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800998a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800998e:	d131      	bne.n	80099f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009990:	4b24      	ldr	r3, [pc, #144]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009996:	4a23      	ldr	r2, [pc, #140]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009998:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800999c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80099a0:	4b20      	ldr	r3, [pc, #128]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80099a8:	4a1e      	ldr	r2, [pc, #120]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80099ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80099b0:	4b1d      	ldr	r3, [pc, #116]	@ (8009a28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2232      	movs	r2, #50	@ 0x32
 80099b6:	fb02 f303 	mul.w	r3, r2, r3
 80099ba:	4a1c      	ldr	r2, [pc, #112]	@ (8009a2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80099bc:	fba2 2303 	umull	r2, r3, r2, r3
 80099c0:	0c9b      	lsrs	r3, r3, #18
 80099c2:	3301      	adds	r3, #1
 80099c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80099c6:	e002      	b.n	80099ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80099ce:	4b15      	ldr	r3, [pc, #84]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099da:	d102      	bne.n	80099e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d1f2      	bne.n	80099c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80099e2:	4b10      	ldr	r3, [pc, #64]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099e4:	695b      	ldr	r3, [r3, #20]
 80099e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80099ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099ee:	d112      	bne.n	8009a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e011      	b.n	8009a18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80099f4:	4b0b      	ldr	r3, [pc, #44]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099fa:	4a0a      	ldr	r2, [pc, #40]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80099fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009a04:	e007      	b.n	8009a16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009a06:	4b07      	ldr	r3, [pc, #28]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009a0e:	4a05      	ldr	r2, [pc, #20]	@ (8009a24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a10:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009a14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009a16:	2300      	movs	r3, #0
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3714      	adds	r7, #20
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	40007000 	.word	0x40007000
 8009a28:	20000394 	.word	0x20000394
 8009a2c:	431bde83 	.word	0x431bde83

08009a30 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009a30:	b480      	push	{r7}
 8009a32:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009a34:	4b05      	ldr	r3, [pc, #20]	@ (8009a4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	4a04      	ldr	r2, [pc, #16]	@ (8009a4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009a3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009a3e:	6093      	str	r3, [r2, #8]
}
 8009a40:	bf00      	nop
 8009a42:	46bd      	mov	sp, r7
 8009a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	40007000 	.word	0x40007000

08009a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b088      	sub	sp, #32
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d101      	bne.n	8009a62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e2fe      	b.n	800a060 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 0301 	and.w	r3, r3, #1
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d075      	beq.n	8009b5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a6e:	4b97      	ldr	r3, [pc, #604]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	f003 030c 	and.w	r3, r3, #12
 8009a76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009a78:	4b94      	ldr	r3, [pc, #592]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009a7a:	68db      	ldr	r3, [r3, #12]
 8009a7c:	f003 0303 	and.w	r3, r3, #3
 8009a80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	2b0c      	cmp	r3, #12
 8009a86:	d102      	bne.n	8009a8e <HAL_RCC_OscConfig+0x3e>
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	2b03      	cmp	r3, #3
 8009a8c:	d002      	beq.n	8009a94 <HAL_RCC_OscConfig+0x44>
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	2b08      	cmp	r3, #8
 8009a92:	d10b      	bne.n	8009aac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a94:	4b8d      	ldr	r3, [pc, #564]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d05b      	beq.n	8009b58 <HAL_RCC_OscConfig+0x108>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d157      	bne.n	8009b58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e2d9      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ab4:	d106      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x74>
 8009ab6:	4b85      	ldr	r3, [pc, #532]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a84      	ldr	r2, [pc, #528]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ac0:	6013      	str	r3, [r2, #0]
 8009ac2:	e01d      	b.n	8009b00 <HAL_RCC_OscConfig+0xb0>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009acc:	d10c      	bne.n	8009ae8 <HAL_RCC_OscConfig+0x98>
 8009ace:	4b7f      	ldr	r3, [pc, #508]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a7e      	ldr	r2, [pc, #504]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009ad8:	6013      	str	r3, [r2, #0]
 8009ada:	4b7c      	ldr	r3, [pc, #496]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a7b      	ldr	r2, [pc, #492]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	e00b      	b.n	8009b00 <HAL_RCC_OscConfig+0xb0>
 8009ae8:	4b78      	ldr	r3, [pc, #480]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a77      	ldr	r2, [pc, #476]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009af2:	6013      	str	r3, [r2, #0]
 8009af4:	4b75      	ldr	r3, [pc, #468]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a74      	ldr	r2, [pc, #464]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d013      	beq.n	8009b30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b08:	f7fd fc5e 	bl	80073c8 <HAL_GetTick>
 8009b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009b0e:	e008      	b.n	8009b22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b10:	f7fd fc5a 	bl	80073c8 <HAL_GetTick>
 8009b14:	4602      	mov	r2, r0
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	1ad3      	subs	r3, r2, r3
 8009b1a:	2b64      	cmp	r3, #100	@ 0x64
 8009b1c:	d901      	bls.n	8009b22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e29e      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009b22:	4b6a      	ldr	r3, [pc, #424]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d0f0      	beq.n	8009b10 <HAL_RCC_OscConfig+0xc0>
 8009b2e:	e014      	b.n	8009b5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b30:	f7fd fc4a 	bl	80073c8 <HAL_GetTick>
 8009b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009b36:	e008      	b.n	8009b4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b38:	f7fd fc46 	bl	80073c8 <HAL_GetTick>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	1ad3      	subs	r3, r2, r3
 8009b42:	2b64      	cmp	r3, #100	@ 0x64
 8009b44:	d901      	bls.n	8009b4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e28a      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009b4a:	4b60      	ldr	r3, [pc, #384]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1f0      	bne.n	8009b38 <HAL_RCC_OscConfig+0xe8>
 8009b56:	e000      	b.n	8009b5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d075      	beq.n	8009c52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b66:	4b59      	ldr	r3, [pc, #356]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	f003 030c 	and.w	r3, r3, #12
 8009b6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009b70:	4b56      	ldr	r3, [pc, #344]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	f003 0303 	and.w	r3, r3, #3
 8009b78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	2b0c      	cmp	r3, #12
 8009b7e:	d102      	bne.n	8009b86 <HAL_RCC_OscConfig+0x136>
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d002      	beq.n	8009b8c <HAL_RCC_OscConfig+0x13c>
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	2b04      	cmp	r3, #4
 8009b8a:	d11f      	bne.n	8009bcc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b8c:	4b4f      	ldr	r3, [pc, #316]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d005      	beq.n	8009ba4 <HAL_RCC_OscConfig+0x154>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d101      	bne.n	8009ba4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e25d      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ba4:	4b49      	ldr	r3, [pc, #292]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	061b      	lsls	r3, r3, #24
 8009bb2:	4946      	ldr	r1, [pc, #280]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009bb8:	4b45      	ldr	r3, [pc, #276]	@ (8009cd0 <HAL_RCC_OscConfig+0x280>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7fd fbb7 	bl	8007330 <HAL_InitTick>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d043      	beq.n	8009c50 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e249      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d023      	beq.n	8009c1c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009bd4:	4b3d      	ldr	r3, [pc, #244]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a3c      	ldr	r2, [pc, #240]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009be0:	f7fd fbf2 	bl	80073c8 <HAL_GetTick>
 8009be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009be6:	e008      	b.n	8009bfa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009be8:	f7fd fbee 	bl	80073c8 <HAL_GetTick>
 8009bec:	4602      	mov	r2, r0
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d901      	bls.n	8009bfa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	e232      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009bfa:	4b34      	ldr	r3, [pc, #208]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d0f0      	beq.n	8009be8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c06:	4b31      	ldr	r3, [pc, #196]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	061b      	lsls	r3, r3, #24
 8009c14:	492d      	ldr	r1, [pc, #180]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c16:	4313      	orrs	r3, r2
 8009c18:	604b      	str	r3, [r1, #4]
 8009c1a:	e01a      	b.n	8009c52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a2a      	ldr	r2, [pc, #168]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c28:	f7fd fbce 	bl	80073c8 <HAL_GetTick>
 8009c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009c2e:	e008      	b.n	8009c42 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c30:	f7fd fbca 	bl	80073c8 <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d901      	bls.n	8009c42 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e20e      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009c42:	4b22      	ldr	r3, [pc, #136]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1f0      	bne.n	8009c30 <HAL_RCC_OscConfig+0x1e0>
 8009c4e:	e000      	b.n	8009c52 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 0308 	and.w	r3, r3, #8
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d041      	beq.n	8009ce2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d01c      	beq.n	8009ca0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c66:	4b19      	ldr	r3, [pc, #100]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c6c:	4a17      	ldr	r2, [pc, #92]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c6e:	f043 0301 	orr.w	r3, r3, #1
 8009c72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c76:	f7fd fba7 	bl	80073c8 <HAL_GetTick>
 8009c7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009c7c:	e008      	b.n	8009c90 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c7e:	f7fd fba3 	bl	80073c8 <HAL_GetTick>
 8009c82:	4602      	mov	r2, r0
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	1ad3      	subs	r3, r2, r3
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	d901      	bls.n	8009c90 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009c8c:	2303      	movs	r3, #3
 8009c8e:	e1e7      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009c90:	4b0e      	ldr	r3, [pc, #56]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c96:	f003 0302 	and.w	r3, r3, #2
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d0ef      	beq.n	8009c7e <HAL_RCC_OscConfig+0x22e>
 8009c9e:	e020      	b.n	8009ce2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009ca2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ca6:	4a09      	ldr	r2, [pc, #36]	@ (8009ccc <HAL_RCC_OscConfig+0x27c>)
 8009ca8:	f023 0301 	bic.w	r3, r3, #1
 8009cac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cb0:	f7fd fb8a 	bl	80073c8 <HAL_GetTick>
 8009cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009cb6:	e00d      	b.n	8009cd4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009cb8:	f7fd fb86 	bl	80073c8 <HAL_GetTick>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	1ad3      	subs	r3, r2, r3
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d906      	bls.n	8009cd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	e1ca      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
 8009cca:	bf00      	nop
 8009ccc:	40021000 	.word	0x40021000
 8009cd0:	20000398 	.word	0x20000398
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009cd4:	4b8c      	ldr	r3, [pc, #560]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009cda:	f003 0302 	and.w	r3, r3, #2
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1ea      	bne.n	8009cb8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0304 	and.w	r3, r3, #4
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f000 80a6 	beq.w	8009e3c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009cf4:	4b84      	ldr	r3, [pc, #528]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <HAL_RCC_OscConfig+0x2b4>
 8009d00:	2301      	movs	r3, #1
 8009d02:	e000      	b.n	8009d06 <HAL_RCC_OscConfig+0x2b6>
 8009d04:	2300      	movs	r3, #0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00d      	beq.n	8009d26 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d0e:	4a7e      	ldr	r2, [pc, #504]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d14:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d16:	4b7c      	ldr	r3, [pc, #496]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009d1e:	60fb      	str	r3, [r7, #12]
 8009d20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009d22:	2301      	movs	r3, #1
 8009d24:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d26:	4b79      	ldr	r3, [pc, #484]	@ (8009f0c <HAL_RCC_OscConfig+0x4bc>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d118      	bne.n	8009d64 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009d32:	4b76      	ldr	r3, [pc, #472]	@ (8009f0c <HAL_RCC_OscConfig+0x4bc>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a75      	ldr	r2, [pc, #468]	@ (8009f0c <HAL_RCC_OscConfig+0x4bc>)
 8009d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d3e:	f7fd fb43 	bl	80073c8 <HAL_GetTick>
 8009d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d44:	e008      	b.n	8009d58 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d46:	f7fd fb3f 	bl	80073c8 <HAL_GetTick>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	d901      	bls.n	8009d58 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009d54:	2303      	movs	r3, #3
 8009d56:	e183      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009d58:	4b6c      	ldr	r3, [pc, #432]	@ (8009f0c <HAL_RCC_OscConfig+0x4bc>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d0f0      	beq.n	8009d46 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d108      	bne.n	8009d7e <HAL_RCC_OscConfig+0x32e>
 8009d6c:	4b66      	ldr	r3, [pc, #408]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d72:	4a65      	ldr	r2, [pc, #404]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009d74:	f043 0301 	orr.w	r3, r3, #1
 8009d78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009d7c:	e024      	b.n	8009dc8 <HAL_RCC_OscConfig+0x378>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	2b05      	cmp	r3, #5
 8009d84:	d110      	bne.n	8009da8 <HAL_RCC_OscConfig+0x358>
 8009d86:	4b60      	ldr	r3, [pc, #384]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d8c:	4a5e      	ldr	r2, [pc, #376]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009d8e:	f043 0304 	orr.w	r3, r3, #4
 8009d92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009d96:	4b5c      	ldr	r3, [pc, #368]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d9c:	4a5a      	ldr	r2, [pc, #360]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009d9e:	f043 0301 	orr.w	r3, r3, #1
 8009da2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009da6:	e00f      	b.n	8009dc8 <HAL_RCC_OscConfig+0x378>
 8009da8:	4b57      	ldr	r3, [pc, #348]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dae:	4a56      	ldr	r2, [pc, #344]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009db0:	f023 0301 	bic.w	r3, r3, #1
 8009db4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009db8:	4b53      	ldr	r3, [pc, #332]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009dbe:	4a52      	ldr	r2, [pc, #328]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009dc0:	f023 0304 	bic.w	r3, r3, #4
 8009dc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d016      	beq.n	8009dfe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dd0:	f7fd fafa 	bl	80073c8 <HAL_GetTick>
 8009dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009dd6:	e00a      	b.n	8009dee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dd8:	f7fd faf6 	bl	80073c8 <HAL_GetTick>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	1ad3      	subs	r3, r2, r3
 8009de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d901      	bls.n	8009dee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009dea:	2303      	movs	r3, #3
 8009dec:	e138      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009dee:	4b46      	ldr	r3, [pc, #280]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009df4:	f003 0302 	and.w	r3, r3, #2
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d0ed      	beq.n	8009dd8 <HAL_RCC_OscConfig+0x388>
 8009dfc:	e015      	b.n	8009e2a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dfe:	f7fd fae3 	bl	80073c8 <HAL_GetTick>
 8009e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009e04:	e00a      	b.n	8009e1c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e06:	f7fd fadf 	bl	80073c8 <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d901      	bls.n	8009e1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e121      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009e1c:	4b3a      	ldr	r3, [pc, #232]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e22:	f003 0302 	and.w	r3, r3, #2
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1ed      	bne.n	8009e06 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009e2a:	7ffb      	ldrb	r3, [r7, #31]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d105      	bne.n	8009e3c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009e30:	4b35      	ldr	r3, [pc, #212]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e34:	4a34      	ldr	r2, [pc, #208]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e3a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f003 0320 	and.w	r3, r3, #32
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d03c      	beq.n	8009ec2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	699b      	ldr	r3, [r3, #24]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d01c      	beq.n	8009e8a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009e50:	4b2d      	ldr	r3, [pc, #180]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009e56:	4a2c      	ldr	r2, [pc, #176]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009e58:	f043 0301 	orr.w	r3, r3, #1
 8009e5c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e60:	f7fd fab2 	bl	80073c8 <HAL_GetTick>
 8009e64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009e66:	e008      	b.n	8009e7a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e68:	f7fd faae 	bl	80073c8 <HAL_GetTick>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d901      	bls.n	8009e7a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009e76:	2303      	movs	r3, #3
 8009e78:	e0f2      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009e7a:	4b23      	ldr	r3, [pc, #140]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009e7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009e80:	f003 0302 	and.w	r3, r3, #2
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d0ef      	beq.n	8009e68 <HAL_RCC_OscConfig+0x418>
 8009e88:	e01b      	b.n	8009ec2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009e90:	4a1d      	ldr	r2, [pc, #116]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009e92:	f023 0301 	bic.w	r3, r3, #1
 8009e96:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e9a:	f7fd fa95 	bl	80073c8 <HAL_GetTick>
 8009e9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009ea0:	e008      	b.n	8009eb4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009ea2:	f7fd fa91 	bl	80073c8 <HAL_GetTick>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	1ad3      	subs	r3, r2, r3
 8009eac:	2b02      	cmp	r3, #2
 8009eae:	d901      	bls.n	8009eb4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e0d5      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009eb4:	4b14      	ldr	r3, [pc, #80]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009eb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009eba:	f003 0302 	and.w	r3, r3, #2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1ef      	bne.n	8009ea2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	69db      	ldr	r3, [r3, #28]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f000 80c9 	beq.w	800a05e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	f003 030c 	and.w	r3, r3, #12
 8009ed4:	2b0c      	cmp	r3, #12
 8009ed6:	f000 8083 	beq.w	8009fe0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	69db      	ldr	r3, [r3, #28]
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d15e      	bne.n	8009fa0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ee2:	4b09      	ldr	r3, [pc, #36]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a08      	ldr	r2, [pc, #32]	@ (8009f08 <HAL_RCC_OscConfig+0x4b8>)
 8009ee8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eee:	f7fd fa6b 	bl	80073c8 <HAL_GetTick>
 8009ef2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009ef4:	e00c      	b.n	8009f10 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ef6:	f7fd fa67 	bl	80073c8 <HAL_GetTick>
 8009efa:	4602      	mov	r2, r0
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d905      	bls.n	8009f10 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009f04:	2303      	movs	r3, #3
 8009f06:	e0ab      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
 8009f08:	40021000 	.word	0x40021000
 8009f0c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f10:	4b55      	ldr	r3, [pc, #340]	@ (800a068 <HAL_RCC_OscConfig+0x618>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1ec      	bne.n	8009ef6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f1c:	4b52      	ldr	r3, [pc, #328]	@ (800a068 <HAL_RCC_OscConfig+0x618>)
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	4b52      	ldr	r3, [pc, #328]	@ (800a06c <HAL_RCC_OscConfig+0x61c>)
 8009f22:	4013      	ands	r3, r2
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	6a11      	ldr	r1, [r2, #32]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009f2c:	3a01      	subs	r2, #1
 8009f2e:	0112      	lsls	r2, r2, #4
 8009f30:	4311      	orrs	r1, r2
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009f36:	0212      	lsls	r2, r2, #8
 8009f38:	4311      	orrs	r1, r2
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009f3e:	0852      	lsrs	r2, r2, #1
 8009f40:	3a01      	subs	r2, #1
 8009f42:	0552      	lsls	r2, r2, #21
 8009f44:	4311      	orrs	r1, r2
 8009f46:	687a      	ldr	r2, [r7, #4]
 8009f48:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009f4a:	0852      	lsrs	r2, r2, #1
 8009f4c:	3a01      	subs	r2, #1
 8009f4e:	0652      	lsls	r2, r2, #25
 8009f50:	4311      	orrs	r1, r2
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009f56:	06d2      	lsls	r2, r2, #27
 8009f58:	430a      	orrs	r2, r1
 8009f5a:	4943      	ldr	r1, [pc, #268]	@ (800a068 <HAL_RCC_OscConfig+0x618>)
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f60:	4b41      	ldr	r3, [pc, #260]	@ (800a068 <HAL_RCC_OscConfig+0x618>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a40      	ldr	r2, [pc, #256]	@ (800a068 <HAL_RCC_OscConfig+0x618>)
 8009f66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009f6a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009f6c:	4b3e      	ldr	r3, [pc, #248]	@ (800a068 <HAL_RCC_OscConfig+0x618>)
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	4a3d      	ldr	r2, [pc, #244]	@ (800a068 <HAL_RCC_OscConfig+0x618>)
 8009f72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009f76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f78:	f7fd fa26 	bl	80073c8 <HAL_GetTick>
 8009f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f7e:	e008      	b.n	8009f92 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f80:	f7fd fa22 	bl	80073c8 <HAL_GetTick>
 8009f84:	4602      	mov	r2, r0
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	2b02      	cmp	r3, #2
 8009f8c:	d901      	bls.n	8009f92 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	e066      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f92:	4b35      	ldr	r3, [pc, #212]	@ (800a068 <HAL_RCC_OscConfig+0x618>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d0f0      	beq.n	8009f80 <HAL_RCC_OscConfig+0x530>
 8009f9e:	e05e      	b.n	800a05e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fa0:	4b31      	ldr	r3, [pc, #196]	@ (800a068 <HAL_RCC_OscConfig+0x618>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a30      	ldr	r2, [pc, #192]	@ (800a068 <HAL_RCC_OscConfig+0x618>)
 8009fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fac:	f7fd fa0c 	bl	80073c8 <HAL_GetTick>
 8009fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009fb2:	e008      	b.n	8009fc6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fb4:	f7fd fa08 	bl	80073c8 <HAL_GetTick>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d901      	bls.n	8009fc6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	e04c      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009fc6:	4b28      	ldr	r3, [pc, #160]	@ (800a068 <HAL_RCC_OscConfig+0x618>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1f0      	bne.n	8009fb4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009fd2:	4b25      	ldr	r3, [pc, #148]	@ (800a068 <HAL_RCC_OscConfig+0x618>)
 8009fd4:	68da      	ldr	r2, [r3, #12]
 8009fd6:	4924      	ldr	r1, [pc, #144]	@ (800a068 <HAL_RCC_OscConfig+0x618>)
 8009fd8:	4b25      	ldr	r3, [pc, #148]	@ (800a070 <HAL_RCC_OscConfig+0x620>)
 8009fda:	4013      	ands	r3, r2
 8009fdc:	60cb      	str	r3, [r1, #12]
 8009fde:	e03e      	b.n	800a05e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	69db      	ldr	r3, [r3, #28]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d101      	bne.n	8009fec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e039      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009fec:	4b1e      	ldr	r3, [pc, #120]	@ (800a068 <HAL_RCC_OscConfig+0x618>)
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f003 0203 	and.w	r2, r3, #3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a1b      	ldr	r3, [r3, #32]
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	d12c      	bne.n	800a05a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a00a:	3b01      	subs	r3, #1
 800a00c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a00e:	429a      	cmp	r2, r3
 800a010:	d123      	bne.n	800a05a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a01c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a01e:	429a      	cmp	r2, r3
 800a020:	d11b      	bne.n	800a05a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a02c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a02e:	429a      	cmp	r2, r3
 800a030:	d113      	bne.n	800a05a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a03c:	085b      	lsrs	r3, r3, #1
 800a03e:	3b01      	subs	r3, #1
 800a040:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a042:	429a      	cmp	r2, r3
 800a044:	d109      	bne.n	800a05a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a050:	085b      	lsrs	r3, r3, #1
 800a052:	3b01      	subs	r3, #1
 800a054:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a056:	429a      	cmp	r2, r3
 800a058:	d001      	beq.n	800a05e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e000      	b.n	800a060 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	3720      	adds	r7, #32
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	40021000 	.word	0x40021000
 800a06c:	019f800c 	.word	0x019f800c
 800a070:	feeefffc 	.word	0xfeeefffc

0800a074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b086      	sub	sp, #24
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a07e:	2300      	movs	r3, #0
 800a080:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e11e      	b.n	800a2ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a08c:	4b91      	ldr	r3, [pc, #580]	@ (800a2d4 <HAL_RCC_ClockConfig+0x260>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 030f 	and.w	r3, r3, #15
 800a094:	683a      	ldr	r2, [r7, #0]
 800a096:	429a      	cmp	r2, r3
 800a098:	d910      	bls.n	800a0bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a09a:	4b8e      	ldr	r3, [pc, #568]	@ (800a2d4 <HAL_RCC_ClockConfig+0x260>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f023 020f 	bic.w	r2, r3, #15
 800a0a2:	498c      	ldr	r1, [pc, #560]	@ (800a2d4 <HAL_RCC_ClockConfig+0x260>)
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a0aa:	4b8a      	ldr	r3, [pc, #552]	@ (800a2d4 <HAL_RCC_ClockConfig+0x260>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f003 030f 	and.w	r3, r3, #15
 800a0b2:	683a      	ldr	r2, [r7, #0]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d001      	beq.n	800a0bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e106      	b.n	800a2ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 0301 	and.w	r3, r3, #1
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d073      	beq.n	800a1b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	2b03      	cmp	r3, #3
 800a0ce:	d129      	bne.n	800a124 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a0d0:	4b81      	ldr	r3, [pc, #516]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d101      	bne.n	800a0e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	e0f4      	b.n	800a2ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a0e0:	f000 f99e 	bl	800a420 <RCC_GetSysClockFreqFromPLLSource>
 800a0e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	4a7c      	ldr	r2, [pc, #496]	@ (800a2dc <HAL_RCC_ClockConfig+0x268>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d93f      	bls.n	800a16e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a0ee:	4b7a      	ldr	r3, [pc, #488]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d009      	beq.n	800a10e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a102:	2b00      	cmp	r3, #0
 800a104:	d033      	beq.n	800a16e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d12f      	bne.n	800a16e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a10e:	4b72      	ldr	r3, [pc, #456]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a116:	4a70      	ldr	r2, [pc, #448]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a11c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a11e:	2380      	movs	r3, #128	@ 0x80
 800a120:	617b      	str	r3, [r7, #20]
 800a122:	e024      	b.n	800a16e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	2b02      	cmp	r3, #2
 800a12a:	d107      	bne.n	800a13c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a12c:	4b6a      	ldr	r3, [pc, #424]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d109      	bne.n	800a14c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e0c6      	b.n	800a2ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a13c:	4b66      	ldr	r3, [pc, #408]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a144:	2b00      	cmp	r3, #0
 800a146:	d101      	bne.n	800a14c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	e0be      	b.n	800a2ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a14c:	f000 f8ce 	bl	800a2ec <HAL_RCC_GetSysClockFreq>
 800a150:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	4a61      	ldr	r2, [pc, #388]	@ (800a2dc <HAL_RCC_ClockConfig+0x268>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d909      	bls.n	800a16e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a15a:	4b5f      	ldr	r3, [pc, #380]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a162:	4a5d      	ldr	r2, [pc, #372]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a168:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a16a:	2380      	movs	r3, #128	@ 0x80
 800a16c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a16e:	4b5a      	ldr	r3, [pc, #360]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	f023 0203 	bic.w	r2, r3, #3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	4957      	ldr	r1, [pc, #348]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a17c:	4313      	orrs	r3, r2
 800a17e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a180:	f7fd f922 	bl	80073c8 <HAL_GetTick>
 800a184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a186:	e00a      	b.n	800a19e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a188:	f7fd f91e 	bl	80073c8 <HAL_GetTick>
 800a18c:	4602      	mov	r2, r0
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	1ad3      	subs	r3, r2, r3
 800a192:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a196:	4293      	cmp	r3, r2
 800a198:	d901      	bls.n	800a19e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e095      	b.n	800a2ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a19e:	4b4e      	ldr	r3, [pc, #312]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	f003 020c 	and.w	r2, r3, #12
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d1eb      	bne.n	800a188 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 0302 	and.w	r3, r3, #2
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d023      	beq.n	800a204 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 0304 	and.w	r3, r3, #4
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d005      	beq.n	800a1d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a1c8:	4b43      	ldr	r3, [pc, #268]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	4a42      	ldr	r2, [pc, #264]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a1ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a1d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 0308 	and.w	r3, r3, #8
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d007      	beq.n	800a1f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a1e0:	4b3d      	ldr	r3, [pc, #244]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a1e8:	4a3b      	ldr	r2, [pc, #236]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a1ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a1ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1f0:	4b39      	ldr	r3, [pc, #228]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	4936      	ldr	r1, [pc, #216]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a1fe:	4313      	orrs	r3, r2
 800a200:	608b      	str	r3, [r1, #8]
 800a202:	e008      	b.n	800a216 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	2b80      	cmp	r3, #128	@ 0x80
 800a208:	d105      	bne.n	800a216 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a20a:	4b33      	ldr	r3, [pc, #204]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	4a32      	ldr	r2, [pc, #200]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a210:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a214:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a216:	4b2f      	ldr	r3, [pc, #188]	@ (800a2d4 <HAL_RCC_ClockConfig+0x260>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f003 030f 	and.w	r3, r3, #15
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	429a      	cmp	r2, r3
 800a222:	d21d      	bcs.n	800a260 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a224:	4b2b      	ldr	r3, [pc, #172]	@ (800a2d4 <HAL_RCC_ClockConfig+0x260>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f023 020f 	bic.w	r2, r3, #15
 800a22c:	4929      	ldr	r1, [pc, #164]	@ (800a2d4 <HAL_RCC_ClockConfig+0x260>)
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	4313      	orrs	r3, r2
 800a232:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a234:	f7fd f8c8 	bl	80073c8 <HAL_GetTick>
 800a238:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a23a:	e00a      	b.n	800a252 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a23c:	f7fd f8c4 	bl	80073c8 <HAL_GetTick>
 800a240:	4602      	mov	r2, r0
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d901      	bls.n	800a252 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a24e:	2303      	movs	r3, #3
 800a250:	e03b      	b.n	800a2ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a252:	4b20      	ldr	r3, [pc, #128]	@ (800a2d4 <HAL_RCC_ClockConfig+0x260>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 030f 	and.w	r3, r3, #15
 800a25a:	683a      	ldr	r2, [r7, #0]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d1ed      	bne.n	800a23c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 0304 	and.w	r3, r3, #4
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d008      	beq.n	800a27e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a26c:	4b1a      	ldr	r3, [pc, #104]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	4917      	ldr	r1, [pc, #92]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a27a:	4313      	orrs	r3, r2
 800a27c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f003 0308 	and.w	r3, r3, #8
 800a286:	2b00      	cmp	r3, #0
 800a288:	d009      	beq.n	800a29e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a28a:	4b13      	ldr	r3, [pc, #76]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	691b      	ldr	r3, [r3, #16]
 800a296:	00db      	lsls	r3, r3, #3
 800a298:	490f      	ldr	r1, [pc, #60]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a29a:	4313      	orrs	r3, r2
 800a29c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a29e:	f000 f825 	bl	800a2ec <HAL_RCC_GetSysClockFreq>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a2d8 <HAL_RCC_ClockConfig+0x264>)
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	091b      	lsrs	r3, r3, #4
 800a2aa:	f003 030f 	and.w	r3, r3, #15
 800a2ae:	490c      	ldr	r1, [pc, #48]	@ (800a2e0 <HAL_RCC_ClockConfig+0x26c>)
 800a2b0:	5ccb      	ldrb	r3, [r1, r3]
 800a2b2:	f003 031f 	and.w	r3, r3, #31
 800a2b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ba:	4a0a      	ldr	r2, [pc, #40]	@ (800a2e4 <HAL_RCC_ClockConfig+0x270>)
 800a2bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a2be:	4b0a      	ldr	r3, [pc, #40]	@ (800a2e8 <HAL_RCC_ClockConfig+0x274>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7fd f834 	bl	8007330 <HAL_InitTick>
 800a2c8:	4603      	mov	r3, r0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop
 800a2d4:	40022000 	.word	0x40022000
 800a2d8:	40021000 	.word	0x40021000
 800a2dc:	04c4b400 	.word	0x04c4b400
 800a2e0:	080101a4 	.word	0x080101a4
 800a2e4:	20000394 	.word	0x20000394
 800a2e8:	20000398 	.word	0x20000398

0800a2ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b087      	sub	sp, #28
 800a2f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a2f2:	4b2c      	ldr	r3, [pc, #176]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	f003 030c 	and.w	r3, r3, #12
 800a2fa:	2b04      	cmp	r3, #4
 800a2fc:	d102      	bne.n	800a304 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a2fe:	4b2a      	ldr	r3, [pc, #168]	@ (800a3a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a300:	613b      	str	r3, [r7, #16]
 800a302:	e047      	b.n	800a394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a304:	4b27      	ldr	r3, [pc, #156]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	f003 030c 	and.w	r3, r3, #12
 800a30c:	2b08      	cmp	r3, #8
 800a30e:	d102      	bne.n	800a316 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a310:	4b26      	ldr	r3, [pc, #152]	@ (800a3ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800a312:	613b      	str	r3, [r7, #16]
 800a314:	e03e      	b.n	800a394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a316:	4b23      	ldr	r3, [pc, #140]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	f003 030c 	and.w	r3, r3, #12
 800a31e:	2b0c      	cmp	r3, #12
 800a320:	d136      	bne.n	800a390 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a322:	4b20      	ldr	r3, [pc, #128]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	f003 0303 	and.w	r3, r3, #3
 800a32a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a32c:	4b1d      	ldr	r3, [pc, #116]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	091b      	lsrs	r3, r3, #4
 800a332:	f003 030f 	and.w	r3, r3, #15
 800a336:	3301      	adds	r3, #1
 800a338:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2b03      	cmp	r3, #3
 800a33e:	d10c      	bne.n	800a35a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a340:	4a1a      	ldr	r2, [pc, #104]	@ (800a3ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	fbb2 f3f3 	udiv	r3, r2, r3
 800a348:	4a16      	ldr	r2, [pc, #88]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a34a:	68d2      	ldr	r2, [r2, #12]
 800a34c:	0a12      	lsrs	r2, r2, #8
 800a34e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a352:	fb02 f303 	mul.w	r3, r2, r3
 800a356:	617b      	str	r3, [r7, #20]
      break;
 800a358:	e00c      	b.n	800a374 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a35a:	4a13      	ldr	r2, [pc, #76]	@ (800a3a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a362:	4a10      	ldr	r2, [pc, #64]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a364:	68d2      	ldr	r2, [r2, #12]
 800a366:	0a12      	lsrs	r2, r2, #8
 800a368:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a36c:	fb02 f303 	mul.w	r3, r2, r3
 800a370:	617b      	str	r3, [r7, #20]
      break;
 800a372:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a374:	4b0b      	ldr	r3, [pc, #44]	@ (800a3a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	0e5b      	lsrs	r3, r3, #25
 800a37a:	f003 0303 	and.w	r3, r3, #3
 800a37e:	3301      	adds	r3, #1
 800a380:	005b      	lsls	r3, r3, #1
 800a382:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a384:	697a      	ldr	r2, [r7, #20]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	fbb2 f3f3 	udiv	r3, r2, r3
 800a38c:	613b      	str	r3, [r7, #16]
 800a38e:	e001      	b.n	800a394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a390:	2300      	movs	r3, #0
 800a392:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a394:	693b      	ldr	r3, [r7, #16]
}
 800a396:	4618      	mov	r0, r3
 800a398:	371c      	adds	r7, #28
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	40021000 	.word	0x40021000
 800a3a8:	00f42400 	.word	0x00f42400
 800a3ac:	016e3600 	.word	0x016e3600

0800a3b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a3b4:	4b03      	ldr	r3, [pc, #12]	@ (800a3c4 <HAL_RCC_GetHCLKFreq+0x14>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	20000394 	.word	0x20000394

0800a3c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a3cc:	f7ff fff0 	bl	800a3b0 <HAL_RCC_GetHCLKFreq>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	4b06      	ldr	r3, [pc, #24]	@ (800a3ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	0a1b      	lsrs	r3, r3, #8
 800a3d8:	f003 0307 	and.w	r3, r3, #7
 800a3dc:	4904      	ldr	r1, [pc, #16]	@ (800a3f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a3de:	5ccb      	ldrb	r3, [r1, r3]
 800a3e0:	f003 031f 	and.w	r3, r3, #31
 800a3e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	40021000 	.word	0x40021000
 800a3f0:	080101b4 	.word	0x080101b4

0800a3f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a3f8:	f7ff ffda 	bl	800a3b0 <HAL_RCC_GetHCLKFreq>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	4b06      	ldr	r3, [pc, #24]	@ (800a418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	0adb      	lsrs	r3, r3, #11
 800a404:	f003 0307 	and.w	r3, r3, #7
 800a408:	4904      	ldr	r1, [pc, #16]	@ (800a41c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a40a:	5ccb      	ldrb	r3, [r1, r3]
 800a40c:	f003 031f 	and.w	r3, r3, #31
 800a410:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a414:	4618      	mov	r0, r3
 800a416:	bd80      	pop	{r7, pc}
 800a418:	40021000 	.word	0x40021000
 800a41c:	080101b4 	.word	0x080101b4

0800a420 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a420:	b480      	push	{r7}
 800a422:	b087      	sub	sp, #28
 800a424:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a426:	4b1e      	ldr	r3, [pc, #120]	@ (800a4a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a428:	68db      	ldr	r3, [r3, #12]
 800a42a:	f003 0303 	and.w	r3, r3, #3
 800a42e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a430:	4b1b      	ldr	r3, [pc, #108]	@ (800a4a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	091b      	lsrs	r3, r3, #4
 800a436:	f003 030f 	and.w	r3, r3, #15
 800a43a:	3301      	adds	r3, #1
 800a43c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	2b03      	cmp	r3, #3
 800a442:	d10c      	bne.n	800a45e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a444:	4a17      	ldr	r2, [pc, #92]	@ (800a4a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	fbb2 f3f3 	udiv	r3, r2, r3
 800a44c:	4a14      	ldr	r2, [pc, #80]	@ (800a4a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a44e:	68d2      	ldr	r2, [r2, #12]
 800a450:	0a12      	lsrs	r2, r2, #8
 800a452:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a456:	fb02 f303 	mul.w	r3, r2, r3
 800a45a:	617b      	str	r3, [r7, #20]
    break;
 800a45c:	e00c      	b.n	800a478 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a45e:	4a12      	ldr	r2, [pc, #72]	@ (800a4a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	fbb2 f3f3 	udiv	r3, r2, r3
 800a466:	4a0e      	ldr	r2, [pc, #56]	@ (800a4a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a468:	68d2      	ldr	r2, [r2, #12]
 800a46a:	0a12      	lsrs	r2, r2, #8
 800a46c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a470:	fb02 f303 	mul.w	r3, r2, r3
 800a474:	617b      	str	r3, [r7, #20]
    break;
 800a476:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a478:	4b09      	ldr	r3, [pc, #36]	@ (800a4a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	0e5b      	lsrs	r3, r3, #25
 800a47e:	f003 0303 	and.w	r3, r3, #3
 800a482:	3301      	adds	r3, #1
 800a484:	005b      	lsls	r3, r3, #1
 800a486:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a488:	697a      	ldr	r2, [r7, #20]
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a490:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a492:	687b      	ldr	r3, [r7, #4]
}
 800a494:	4618      	mov	r0, r3
 800a496:	371c      	adds	r7, #28
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr
 800a4a0:	40021000 	.word	0x40021000
 800a4a4:	016e3600 	.word	0x016e3600
 800a4a8:	00f42400 	.word	0x00f42400

0800a4ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	f000 8098 	beq.w	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a4ce:	4b43      	ldr	r3, [pc, #268]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10d      	bne.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a4da:	4b40      	ldr	r3, [pc, #256]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4de:	4a3f      	ldr	r2, [pc, #252]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a4e4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a4e6:	4b3d      	ldr	r3, [pc, #244]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a4e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a4ee:	60bb      	str	r3, [r7, #8]
 800a4f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a4f6:	4b3a      	ldr	r3, [pc, #232]	@ (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a39      	ldr	r2, [pc, #228]	@ (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a4fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a500:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a502:	f7fc ff61 	bl	80073c8 <HAL_GetTick>
 800a506:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a508:	e009      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a50a:	f7fc ff5d 	bl	80073c8 <HAL_GetTick>
 800a50e:	4602      	mov	r2, r0
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	1ad3      	subs	r3, r2, r3
 800a514:	2b02      	cmp	r3, #2
 800a516:	d902      	bls.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a518:	2303      	movs	r3, #3
 800a51a:	74fb      	strb	r3, [r7, #19]
        break;
 800a51c:	e005      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a51e:	4b30      	ldr	r3, [pc, #192]	@ (800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a526:	2b00      	cmp	r3, #0
 800a528:	d0ef      	beq.n	800a50a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a52a:	7cfb      	ldrb	r3, [r7, #19]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d159      	bne.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a530:	4b2a      	ldr	r3, [pc, #168]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a536:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a53a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d01e      	beq.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d019      	beq.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a54c:	4b23      	ldr	r3, [pc, #140]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a54e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a556:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a558:	4b20      	ldr	r3, [pc, #128]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a55a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a55e:	4a1f      	ldr	r2, [pc, #124]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a568:	4b1c      	ldr	r3, [pc, #112]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a56a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a56e:	4a1b      	ldr	r2, [pc, #108]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a570:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a574:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a578:	4a18      	ldr	r2, [pc, #96]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	f003 0301 	and.w	r3, r3, #1
 800a586:	2b00      	cmp	r3, #0
 800a588:	d016      	beq.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a58a:	f7fc ff1d 	bl	80073c8 <HAL_GetTick>
 800a58e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a590:	e00b      	b.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a592:	f7fc ff19 	bl	80073c8 <HAL_GetTick>
 800a596:	4602      	mov	r2, r0
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	1ad3      	subs	r3, r2, r3
 800a59c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d902      	bls.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	74fb      	strb	r3, [r7, #19]
            break;
 800a5a8:	e006      	b.n	800a5b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a5aa:	4b0c      	ldr	r3, [pc, #48]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5b0:	f003 0302 	and.w	r3, r3, #2
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d0ec      	beq.n	800a592 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a5b8:	7cfb      	ldrb	r3, [r7, #19]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d10b      	bne.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a5be:	4b07      	ldr	r3, [pc, #28]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5cc:	4903      	ldr	r1, [pc, #12]	@ (800a5dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a5d4:	e008      	b.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a5d6:	7cfb      	ldrb	r3, [r7, #19]
 800a5d8:	74bb      	strb	r3, [r7, #18]
 800a5da:	e005      	b.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a5dc:	40021000 	.word	0x40021000
 800a5e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5e4:	7cfb      	ldrb	r3, [r7, #19]
 800a5e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a5e8:	7c7b      	ldrb	r3, [r7, #17]
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d105      	bne.n	800a5fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a5ee:	4ba7      	ldr	r3, [pc, #668]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5f2:	4aa6      	ldr	r2, [pc, #664]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a5f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a5f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f003 0301 	and.w	r3, r3, #1
 800a602:	2b00      	cmp	r3, #0
 800a604:	d00a      	beq.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a606:	4ba1      	ldr	r3, [pc, #644]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a60c:	f023 0203 	bic.w	r2, r3, #3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	499d      	ldr	r1, [pc, #628]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a616:	4313      	orrs	r3, r2
 800a618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f003 0302 	and.w	r3, r3, #2
 800a624:	2b00      	cmp	r3, #0
 800a626:	d00a      	beq.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a628:	4b98      	ldr	r3, [pc, #608]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a62a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a62e:	f023 020c 	bic.w	r2, r3, #12
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	4995      	ldr	r1, [pc, #596]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a638:	4313      	orrs	r3, r2
 800a63a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f003 0304 	and.w	r3, r3, #4
 800a646:	2b00      	cmp	r3, #0
 800a648:	d00a      	beq.n	800a660 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a64a:	4b90      	ldr	r3, [pc, #576]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a64c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a650:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	498c      	ldr	r1, [pc, #560]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a65a:	4313      	orrs	r3, r2
 800a65c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 0308 	and.w	r3, r3, #8
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d00a      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a66c:	4b87      	ldr	r3, [pc, #540]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a66e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a672:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	4984      	ldr	r1, [pc, #528]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a67c:	4313      	orrs	r3, r2
 800a67e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f003 0310 	and.w	r3, r3, #16
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00a      	beq.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a68e:	4b7f      	ldr	r3, [pc, #508]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a694:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	695b      	ldr	r3, [r3, #20]
 800a69c:	497b      	ldr	r1, [pc, #492]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f003 0320 	and.w	r3, r3, #32
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d00a      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a6b0:	4b76      	ldr	r3, [pc, #472]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	4973      	ldr	r1, [pc, #460]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d00a      	beq.n	800a6e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a6d2:	4b6e      	ldr	r3, [pc, #440]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	69db      	ldr	r3, [r3, #28]
 800a6e0:	496a      	ldr	r1, [pc, #424]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00a      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a6f4:	4b65      	ldr	r3, [pc, #404]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a1b      	ldr	r3, [r3, #32]
 800a702:	4962      	ldr	r1, [pc, #392]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a704:	4313      	orrs	r3, r2
 800a706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00a      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a716:	4b5d      	ldr	r3, [pc, #372]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a71c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a724:	4959      	ldr	r1, [pc, #356]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a726:	4313      	orrs	r3, r2
 800a728:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00a      	beq.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a738:	4b54      	ldr	r3, [pc, #336]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a73a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a73e:	f023 0203 	bic.w	r2, r3, #3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a746:	4951      	ldr	r1, [pc, #324]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a748:	4313      	orrs	r3, r2
 800a74a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a756:	2b00      	cmp	r3, #0
 800a758:	d00a      	beq.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a75a:	4b4c      	ldr	r3, [pc, #304]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a760:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a768:	4948      	ldr	r1, [pc, #288]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a76a:	4313      	orrs	r3, r2
 800a76c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d015      	beq.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a77c:	4b43      	ldr	r3, [pc, #268]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a77e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a782:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a78a:	4940      	ldr	r1, [pc, #256]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a78c:	4313      	orrs	r3, r2
 800a78e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a796:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a79a:	d105      	bne.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a79c:	4b3b      	ldr	r3, [pc, #236]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	4a3a      	ldr	r2, [pc, #232]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7a6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d015      	beq.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a7b4:	4b35      	ldr	r3, [pc, #212]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7c2:	4932      	ldr	r1, [pc, #200]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a7d2:	d105      	bne.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a7d4:	4b2d      	ldr	r3, [pc, #180]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	4a2c      	ldr	r2, [pc, #176]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7de:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d015      	beq.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a7ec:	4b27      	ldr	r3, [pc, #156]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7fa:	4924      	ldr	r1, [pc, #144]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a806:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a80a:	d105      	bne.n	800a818 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a80c:	4b1f      	ldr	r3, [pc, #124]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	4a1e      	ldr	r2, [pc, #120]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a812:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a816:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a820:	2b00      	cmp	r3, #0
 800a822:	d015      	beq.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a824:	4b19      	ldr	r3, [pc, #100]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a82a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a832:	4916      	ldr	r1, [pc, #88]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a834:	4313      	orrs	r3, r2
 800a836:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a83e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a842:	d105      	bne.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a844:	4b11      	ldr	r3, [pc, #68]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	4a10      	ldr	r2, [pc, #64]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a84a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a84e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d019      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a85c:	4b0b      	ldr	r3, [pc, #44]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a85e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a862:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a86a:	4908      	ldr	r1, [pc, #32]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a86c:	4313      	orrs	r3, r2
 800a86e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a876:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a87a:	d109      	bne.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a87c:	4b03      	ldr	r3, [pc, #12]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a87e:	68db      	ldr	r3, [r3, #12]
 800a880:	4a02      	ldr	r2, [pc, #8]	@ (800a88c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a882:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a886:	60d3      	str	r3, [r2, #12]
 800a888:	e002      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a88a:	bf00      	nop
 800a88c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d015      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a89c:	4b29      	ldr	r3, [pc, #164]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a89e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8aa:	4926      	ldr	r1, [pc, #152]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8ba:	d105      	bne.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a8bc:	4b21      	ldr	r3, [pc, #132]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	4a20      	ldr	r2, [pc, #128]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a8c6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d015      	beq.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a8d4:	4b1b      	ldr	r3, [pc, #108]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8da:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8e2:	4918      	ldr	r1, [pc, #96]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8f2:	d105      	bne.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a8f4:	4b13      	ldr	r3, [pc, #76]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	4a12      	ldr	r2, [pc, #72]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a8fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a8fe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d015      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a90c:	4b0d      	ldr	r3, [pc, #52]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a90e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a912:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a91a:	490a      	ldr	r1, [pc, #40]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a91c:	4313      	orrs	r3, r2
 800a91e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a926:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a92a:	d105      	bne.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a92c:	4b05      	ldr	r3, [pc, #20]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	4a04      	ldr	r2, [pc, #16]	@ (800a944 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a932:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a936:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a938:	7cbb      	ldrb	r3, [r7, #18]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3718      	adds	r7, #24
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	40021000 	.word	0x40021000

0800a948 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d101      	bne.n	800a95a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e054      	b.n	800aa04 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a960:	b2db      	uxtb	r3, r3
 800a962:	2b00      	cmp	r3, #0
 800a964:	d111      	bne.n	800a98a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2200      	movs	r2, #0
 800a96a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f001 fee2 	bl	800c738 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d102      	bne.n	800a982 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a23      	ldr	r2, [pc, #140]	@ (800aa0c <HAL_TIM_Base_Init+0xc4>)
 800a980:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2202      	movs	r2, #2
 800a98e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	3304      	adds	r3, #4
 800a99a:	4619      	mov	r1, r3
 800a99c:	4610      	mov	r0, r2
 800a99e:	f001 fa2b 	bl	800bdf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}
 800aa0c:	08006bf1 	.word	0x08006bf1

0800aa10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d001      	beq.n	800aa28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	e04c      	b.n	800aac2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a26      	ldr	r2, [pc, #152]	@ (800aad0 <HAL_TIM_Base_Start+0xc0>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d022      	beq.n	800aa80 <HAL_TIM_Base_Start+0x70>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa42:	d01d      	beq.n	800aa80 <HAL_TIM_Base_Start+0x70>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a22      	ldr	r2, [pc, #136]	@ (800aad4 <HAL_TIM_Base_Start+0xc4>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d018      	beq.n	800aa80 <HAL_TIM_Base_Start+0x70>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4a21      	ldr	r2, [pc, #132]	@ (800aad8 <HAL_TIM_Base_Start+0xc8>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d013      	beq.n	800aa80 <HAL_TIM_Base_Start+0x70>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a1f      	ldr	r2, [pc, #124]	@ (800aadc <HAL_TIM_Base_Start+0xcc>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d00e      	beq.n	800aa80 <HAL_TIM_Base_Start+0x70>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a1e      	ldr	r2, [pc, #120]	@ (800aae0 <HAL_TIM_Base_Start+0xd0>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d009      	beq.n	800aa80 <HAL_TIM_Base_Start+0x70>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a1c      	ldr	r2, [pc, #112]	@ (800aae4 <HAL_TIM_Base_Start+0xd4>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d004      	beq.n	800aa80 <HAL_TIM_Base_Start+0x70>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a1b      	ldr	r2, [pc, #108]	@ (800aae8 <HAL_TIM_Base_Start+0xd8>)
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d115      	bne.n	800aaac <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	689a      	ldr	r2, [r3, #8]
 800aa86:	4b19      	ldr	r3, [pc, #100]	@ (800aaec <HAL_TIM_Base_Start+0xdc>)
 800aa88:	4013      	ands	r3, r2
 800aa8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2b06      	cmp	r3, #6
 800aa90:	d015      	beq.n	800aabe <HAL_TIM_Base_Start+0xae>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa98:	d011      	beq.n	800aabe <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f042 0201 	orr.w	r2, r2, #1
 800aaa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaaa:	e008      	b.n	800aabe <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	681a      	ldr	r2, [r3, #0]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f042 0201 	orr.w	r2, r2, #1
 800aaba:	601a      	str	r2, [r3, #0]
 800aabc:	e000      	b.n	800aac0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aabe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aac0:	2300      	movs	r3, #0
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3714      	adds	r7, #20
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	40012c00 	.word	0x40012c00
 800aad4:	40000400 	.word	0x40000400
 800aad8:	40000800 	.word	0x40000800
 800aadc:	40000c00 	.word	0x40000c00
 800aae0:	40013400 	.word	0x40013400
 800aae4:	40014000 	.word	0x40014000
 800aae8:	40015000 	.word	0x40015000
 800aaec:	00010007 	.word	0x00010007

0800aaf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b085      	sub	sp, #20
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d001      	beq.n	800ab08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e054      	b.n	800abb2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	68da      	ldr	r2, [r3, #12]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f042 0201 	orr.w	r2, r2, #1
 800ab1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a26      	ldr	r2, [pc, #152]	@ (800abc0 <HAL_TIM_Base_Start_IT+0xd0>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d022      	beq.n	800ab70 <HAL_TIM_Base_Start_IT+0x80>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab32:	d01d      	beq.n	800ab70 <HAL_TIM_Base_Start_IT+0x80>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a22      	ldr	r2, [pc, #136]	@ (800abc4 <HAL_TIM_Base_Start_IT+0xd4>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d018      	beq.n	800ab70 <HAL_TIM_Base_Start_IT+0x80>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a21      	ldr	r2, [pc, #132]	@ (800abc8 <HAL_TIM_Base_Start_IT+0xd8>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d013      	beq.n	800ab70 <HAL_TIM_Base_Start_IT+0x80>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a1f      	ldr	r2, [pc, #124]	@ (800abcc <HAL_TIM_Base_Start_IT+0xdc>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d00e      	beq.n	800ab70 <HAL_TIM_Base_Start_IT+0x80>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a1e      	ldr	r2, [pc, #120]	@ (800abd0 <HAL_TIM_Base_Start_IT+0xe0>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d009      	beq.n	800ab70 <HAL_TIM_Base_Start_IT+0x80>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a1c      	ldr	r2, [pc, #112]	@ (800abd4 <HAL_TIM_Base_Start_IT+0xe4>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d004      	beq.n	800ab70 <HAL_TIM_Base_Start_IT+0x80>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a1b      	ldr	r2, [pc, #108]	@ (800abd8 <HAL_TIM_Base_Start_IT+0xe8>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d115      	bne.n	800ab9c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	689a      	ldr	r2, [r3, #8]
 800ab76:	4b19      	ldr	r3, [pc, #100]	@ (800abdc <HAL_TIM_Base_Start_IT+0xec>)
 800ab78:	4013      	ands	r3, r2
 800ab7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2b06      	cmp	r3, #6
 800ab80:	d015      	beq.n	800abae <HAL_TIM_Base_Start_IT+0xbe>
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab88:	d011      	beq.n	800abae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f042 0201 	orr.w	r2, r2, #1
 800ab98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab9a:	e008      	b.n	800abae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	681a      	ldr	r2, [r3, #0]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	f042 0201 	orr.w	r2, r2, #1
 800abaa:	601a      	str	r2, [r3, #0]
 800abac:	e000      	b.n	800abb0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	40012c00 	.word	0x40012c00
 800abc4:	40000400 	.word	0x40000400
 800abc8:	40000800 	.word	0x40000800
 800abcc:	40000c00 	.word	0x40000c00
 800abd0:	40013400 	.word	0x40013400
 800abd4:	40014000 	.word	0x40014000
 800abd8:	40015000 	.word	0x40015000
 800abdc:	00010007 	.word	0x00010007

0800abe0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d101      	bne.n	800abf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e054      	b.n	800ac9c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d111      	bne.n	800ac22 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f001 fd96 	bl	800c738 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d102      	bne.n	800ac1a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4a23      	ldr	r2, [pc, #140]	@ (800aca4 <HAL_TIM_PWM_Init+0xc4>)
 800ac18:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2202      	movs	r2, #2
 800ac26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	3304      	adds	r3, #4
 800ac32:	4619      	mov	r1, r3
 800ac34:	4610      	mov	r0, r2
 800ac36:	f001 f8df 	bl	800bdf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2201      	movs	r2, #1
 800ac46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2201      	movs	r2, #1
 800ac76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2201      	movs	r2, #1
 800ac7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2201      	movs	r2, #1
 800ac86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2201      	movs	r2, #1
 800ac8e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ac9a:	2300      	movs	r3, #0
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	08006ba5 	.word	0x08006ba5

0800aca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d109      	bne.n	800accc <HAL_TIM_PWM_Start+0x24>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	bf14      	ite	ne
 800acc4:	2301      	movne	r3, #1
 800acc6:	2300      	moveq	r3, #0
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	e03c      	b.n	800ad46 <HAL_TIM_PWM_Start+0x9e>
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	2b04      	cmp	r3, #4
 800acd0:	d109      	bne.n	800ace6 <HAL_TIM_PWM_Start+0x3e>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	2b01      	cmp	r3, #1
 800acdc:	bf14      	ite	ne
 800acde:	2301      	movne	r3, #1
 800ace0:	2300      	moveq	r3, #0
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	e02f      	b.n	800ad46 <HAL_TIM_PWM_Start+0x9e>
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	2b08      	cmp	r3, #8
 800acea:	d109      	bne.n	800ad00 <HAL_TIM_PWM_Start+0x58>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	bf14      	ite	ne
 800acf8:	2301      	movne	r3, #1
 800acfa:	2300      	moveq	r3, #0
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	e022      	b.n	800ad46 <HAL_TIM_PWM_Start+0x9e>
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2b0c      	cmp	r3, #12
 800ad04:	d109      	bne.n	800ad1a <HAL_TIM_PWM_Start+0x72>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	bf14      	ite	ne
 800ad12:	2301      	movne	r3, #1
 800ad14:	2300      	moveq	r3, #0
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	e015      	b.n	800ad46 <HAL_TIM_PWM_Start+0x9e>
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	2b10      	cmp	r3, #16
 800ad1e:	d109      	bne.n	800ad34 <HAL_TIM_PWM_Start+0x8c>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	bf14      	ite	ne
 800ad2c:	2301      	movne	r3, #1
 800ad2e:	2300      	moveq	r3, #0
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	e008      	b.n	800ad46 <HAL_TIM_PWM_Start+0x9e>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	bf14      	ite	ne
 800ad40:	2301      	movne	r3, #1
 800ad42:	2300      	moveq	r3, #0
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	e0a6      	b.n	800ae9c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d104      	bne.n	800ad5e <HAL_TIM_PWM_Start+0xb6>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2202      	movs	r2, #2
 800ad58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad5c:	e023      	b.n	800ada6 <HAL_TIM_PWM_Start+0xfe>
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	2b04      	cmp	r3, #4
 800ad62:	d104      	bne.n	800ad6e <HAL_TIM_PWM_Start+0xc6>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2202      	movs	r2, #2
 800ad68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad6c:	e01b      	b.n	800ada6 <HAL_TIM_PWM_Start+0xfe>
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	2b08      	cmp	r3, #8
 800ad72:	d104      	bne.n	800ad7e <HAL_TIM_PWM_Start+0xd6>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2202      	movs	r2, #2
 800ad78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad7c:	e013      	b.n	800ada6 <HAL_TIM_PWM_Start+0xfe>
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	2b0c      	cmp	r3, #12
 800ad82:	d104      	bne.n	800ad8e <HAL_TIM_PWM_Start+0xe6>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2202      	movs	r2, #2
 800ad88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ad8c:	e00b      	b.n	800ada6 <HAL_TIM_PWM_Start+0xfe>
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	2b10      	cmp	r3, #16
 800ad92:	d104      	bne.n	800ad9e <HAL_TIM_PWM_Start+0xf6>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2202      	movs	r2, #2
 800ad98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad9c:	e003      	b.n	800ada6 <HAL_TIM_PWM_Start+0xfe>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2202      	movs	r2, #2
 800ada2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2201      	movs	r2, #1
 800adac:	6839      	ldr	r1, [r7, #0]
 800adae:	4618      	mov	r0, r3
 800adb0:	f001 fc9c 	bl	800c6ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a3a      	ldr	r2, [pc, #232]	@ (800aea4 <HAL_TIM_PWM_Start+0x1fc>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d018      	beq.n	800adf0 <HAL_TIM_PWM_Start+0x148>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a39      	ldr	r2, [pc, #228]	@ (800aea8 <HAL_TIM_PWM_Start+0x200>)
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d013      	beq.n	800adf0 <HAL_TIM_PWM_Start+0x148>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a37      	ldr	r2, [pc, #220]	@ (800aeac <HAL_TIM_PWM_Start+0x204>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d00e      	beq.n	800adf0 <HAL_TIM_PWM_Start+0x148>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a36      	ldr	r2, [pc, #216]	@ (800aeb0 <HAL_TIM_PWM_Start+0x208>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d009      	beq.n	800adf0 <HAL_TIM_PWM_Start+0x148>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a34      	ldr	r2, [pc, #208]	@ (800aeb4 <HAL_TIM_PWM_Start+0x20c>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d004      	beq.n	800adf0 <HAL_TIM_PWM_Start+0x148>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a33      	ldr	r2, [pc, #204]	@ (800aeb8 <HAL_TIM_PWM_Start+0x210>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d101      	bne.n	800adf4 <HAL_TIM_PWM_Start+0x14c>
 800adf0:	2301      	movs	r3, #1
 800adf2:	e000      	b.n	800adf6 <HAL_TIM_PWM_Start+0x14e>
 800adf4:	2300      	movs	r3, #0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d007      	beq.n	800ae0a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ae08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a25      	ldr	r2, [pc, #148]	@ (800aea4 <HAL_TIM_PWM_Start+0x1fc>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d022      	beq.n	800ae5a <HAL_TIM_PWM_Start+0x1b2>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae1c:	d01d      	beq.n	800ae5a <HAL_TIM_PWM_Start+0x1b2>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a26      	ldr	r2, [pc, #152]	@ (800aebc <HAL_TIM_PWM_Start+0x214>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d018      	beq.n	800ae5a <HAL_TIM_PWM_Start+0x1b2>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a24      	ldr	r2, [pc, #144]	@ (800aec0 <HAL_TIM_PWM_Start+0x218>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d013      	beq.n	800ae5a <HAL_TIM_PWM_Start+0x1b2>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a23      	ldr	r2, [pc, #140]	@ (800aec4 <HAL_TIM_PWM_Start+0x21c>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d00e      	beq.n	800ae5a <HAL_TIM_PWM_Start+0x1b2>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a19      	ldr	r2, [pc, #100]	@ (800aea8 <HAL_TIM_PWM_Start+0x200>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d009      	beq.n	800ae5a <HAL_TIM_PWM_Start+0x1b2>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a18      	ldr	r2, [pc, #96]	@ (800aeac <HAL_TIM_PWM_Start+0x204>)
 800ae4c:	4293      	cmp	r3, r2
 800ae4e:	d004      	beq.n	800ae5a <HAL_TIM_PWM_Start+0x1b2>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a18      	ldr	r2, [pc, #96]	@ (800aeb8 <HAL_TIM_PWM_Start+0x210>)
 800ae56:	4293      	cmp	r3, r2
 800ae58:	d115      	bne.n	800ae86 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	689a      	ldr	r2, [r3, #8]
 800ae60:	4b19      	ldr	r3, [pc, #100]	@ (800aec8 <HAL_TIM_PWM_Start+0x220>)
 800ae62:	4013      	ands	r3, r2
 800ae64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	2b06      	cmp	r3, #6
 800ae6a:	d015      	beq.n	800ae98 <HAL_TIM_PWM_Start+0x1f0>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae72:	d011      	beq.n	800ae98 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f042 0201 	orr.w	r2, r2, #1
 800ae82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae84:	e008      	b.n	800ae98 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f042 0201 	orr.w	r2, r2, #1
 800ae94:	601a      	str	r2, [r3, #0]
 800ae96:	e000      	b.n	800ae9a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3710      	adds	r7, #16
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}
 800aea4:	40012c00 	.word	0x40012c00
 800aea8:	40013400 	.word	0x40013400
 800aeac:	40014000 	.word	0x40014000
 800aeb0:	40014400 	.word	0x40014400
 800aeb4:	40014800 	.word	0x40014800
 800aeb8:	40015000 	.word	0x40015000
 800aebc:	40000400 	.word	0x40000400
 800aec0:	40000800 	.word	0x40000800
 800aec4:	40000c00 	.word	0x40000c00
 800aec8:	00010007 	.word	0x00010007

0800aecc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d101      	bne.n	800aee0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	e04c      	b.n	800af7a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d111      	bne.n	800af10 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f001 fc1f 	bl	800c738 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d102      	bne.n	800af08 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a1f      	ldr	r2, [pc, #124]	@ (800af84 <HAL_TIM_OnePulse_Init+0xb8>)
 800af06:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2202      	movs	r2, #2
 800af14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	3304      	adds	r3, #4
 800af20:	4619      	mov	r1, r3
 800af22:	4610      	mov	r0, r2
 800af24:	f000 ff68 	bl	800bdf8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f022 0208 	bic.w	r2, r2, #8
 800af36:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	6819      	ldr	r1, [r3, #0]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	430a      	orrs	r2, r1
 800af46:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3708      	adds	r7, #8
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	0800af89 	.word	0x0800af89

0800af88 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800af90:	bf00      	nop
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
 800afa4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800afac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800afb4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800afbc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800afc4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800afc6:	7bfb      	ldrb	r3, [r7, #15]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d108      	bne.n	800afde <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800afcc:	7bbb      	ldrb	r3, [r7, #14]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d105      	bne.n	800afde <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800afd2:	7b7b      	ldrb	r3, [r7, #13]
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d102      	bne.n	800afde <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800afd8:	7b3b      	ldrb	r3, [r7, #12]
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d001      	beq.n	800afe2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	e059      	b.n	800b096 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2202      	movs	r2, #2
 800afe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2202      	movs	r2, #2
 800afee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2202      	movs	r2, #2
 800aff6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2202      	movs	r2, #2
 800affe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	68da      	ldr	r2, [r3, #12]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f042 0202 	orr.w	r2, r2, #2
 800b010:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	68da      	ldr	r2, [r3, #12]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f042 0204 	orr.w	r2, r2, #4
 800b020:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2201      	movs	r2, #1
 800b028:	2100      	movs	r1, #0
 800b02a:	4618      	mov	r0, r3
 800b02c:	f001 fb5e 	bl	800c6ec <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2201      	movs	r2, #1
 800b036:	2104      	movs	r1, #4
 800b038:	4618      	mov	r0, r3
 800b03a:	f001 fb57 	bl	800c6ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a17      	ldr	r2, [pc, #92]	@ (800b0a0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d018      	beq.n	800b07a <HAL_TIM_OnePulse_Start_IT+0xde>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a15      	ldr	r2, [pc, #84]	@ (800b0a4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d013      	beq.n	800b07a <HAL_TIM_OnePulse_Start_IT+0xde>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a14      	ldr	r2, [pc, #80]	@ (800b0a8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d00e      	beq.n	800b07a <HAL_TIM_OnePulse_Start_IT+0xde>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a12      	ldr	r2, [pc, #72]	@ (800b0ac <HAL_TIM_OnePulse_Start_IT+0x110>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d009      	beq.n	800b07a <HAL_TIM_OnePulse_Start_IT+0xde>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a11      	ldr	r2, [pc, #68]	@ (800b0b0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d004      	beq.n	800b07a <HAL_TIM_OnePulse_Start_IT+0xde>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a0f      	ldr	r2, [pc, #60]	@ (800b0b4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d101      	bne.n	800b07e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800b07a:	2301      	movs	r3, #1
 800b07c:	e000      	b.n	800b080 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800b07e:	2300      	movs	r3, #0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d007      	beq.n	800b094 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b092:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800b094:	2300      	movs	r3, #0
}
 800b096:	4618      	mov	r0, r3
 800b098:	3710      	adds	r7, #16
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	40012c00 	.word	0x40012c00
 800b0a4:	40013400 	.word	0x40013400
 800b0a8:	40014000 	.word	0x40014000
 800b0ac:	40014400 	.word	0x40014400
 800b0b0:	40014800 	.word	0x40014800
 800b0b4:	40015000 	.word	0x40015000

0800b0b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d101      	bne.n	800b0cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e0a2      	b.n	800b212 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d111      	bne.n	800b0fc <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f001 fb29 	bl	800c738 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d102      	bne.n	800b0f4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4a4a      	ldr	r2, [pc, #296]	@ (800b21c <HAL_TIM_Encoder_Init+0x164>)
 800b0f2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2202      	movs	r2, #2
 800b100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	6812      	ldr	r2, [r2, #0]
 800b10e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800b112:	f023 0307 	bic.w	r3, r3, #7
 800b116:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681a      	ldr	r2, [r3, #0]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	3304      	adds	r3, #4
 800b120:	4619      	mov	r1, r3
 800b122:	4610      	mov	r0, r2
 800b124:	f000 fe68 	bl	800bdf8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	699b      	ldr	r3, [r3, #24]
 800b136:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	6a1b      	ldr	r3, [r3, #32]
 800b13e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	697a      	ldr	r2, [r7, #20]
 800b146:	4313      	orrs	r3, r2
 800b148:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b150:	f023 0303 	bic.w	r3, r3, #3
 800b154:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	689a      	ldr	r2, [r3, #8]
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	699b      	ldr	r3, [r3, #24]
 800b15e:	021b      	lsls	r3, r3, #8
 800b160:	4313      	orrs	r3, r2
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	4313      	orrs	r3, r2
 800b166:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800b16e:	f023 030c 	bic.w	r3, r3, #12
 800b172:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b17a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b17e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	68da      	ldr	r2, [r3, #12]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	69db      	ldr	r3, [r3, #28]
 800b188:	021b      	lsls	r3, r3, #8
 800b18a:	4313      	orrs	r3, r2
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	4313      	orrs	r3, r2
 800b190:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	011a      	lsls	r2, r3, #4
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	6a1b      	ldr	r3, [r3, #32]
 800b19c:	031b      	lsls	r3, r3, #12
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b1ac:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b1b4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	685a      	ldr	r2, [r3, #4]
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	695b      	ldr	r3, [r3, #20]
 800b1be:	011b      	lsls	r3, r3, #4
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	697a      	ldr	r2, [r7, #20]
 800b1ce:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	3718      	adds	r7, #24
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	08006cc1 	.word	0x08006cc1

0800b220 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b230:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b238:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b240:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b248:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d110      	bne.n	800b272 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b250:	7bfb      	ldrb	r3, [r7, #15]
 800b252:	2b01      	cmp	r3, #1
 800b254:	d102      	bne.n	800b25c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b256:	7b7b      	ldrb	r3, [r7, #13]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d001      	beq.n	800b260 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	e069      	b.n	800b334 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2202      	movs	r2, #2
 800b264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2202      	movs	r2, #2
 800b26c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b270:	e031      	b.n	800b2d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	2b04      	cmp	r3, #4
 800b276:	d110      	bne.n	800b29a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b278:	7bbb      	ldrb	r3, [r7, #14]
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d102      	bne.n	800b284 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b27e:	7b3b      	ldrb	r3, [r7, #12]
 800b280:	2b01      	cmp	r3, #1
 800b282:	d001      	beq.n	800b288 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b284:	2301      	movs	r3, #1
 800b286:	e055      	b.n	800b334 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2202      	movs	r2, #2
 800b28c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2202      	movs	r2, #2
 800b294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b298:	e01d      	b.n	800b2d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b29a:	7bfb      	ldrb	r3, [r7, #15]
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d108      	bne.n	800b2b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b2a0:	7bbb      	ldrb	r3, [r7, #14]
 800b2a2:	2b01      	cmp	r3, #1
 800b2a4:	d105      	bne.n	800b2b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b2a6:	7b7b      	ldrb	r3, [r7, #13]
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d102      	bne.n	800b2b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b2ac:	7b3b      	ldrb	r3, [r7, #12]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d001      	beq.n	800b2b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e03e      	b.n	800b334 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2202      	movs	r2, #2
 800b2ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2202      	movs	r2, #2
 800b2c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2202      	movs	r2, #2
 800b2ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2202      	movs	r2, #2
 800b2d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d003      	beq.n	800b2e4 <HAL_TIM_Encoder_Start+0xc4>
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	2b04      	cmp	r3, #4
 800b2e0:	d008      	beq.n	800b2f4 <HAL_TIM_Encoder_Start+0xd4>
 800b2e2:	e00f      	b.n	800b304 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	2201      	movs	r2, #1
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f001 f9fd 	bl	800c6ec <TIM_CCxChannelCmd>
      break;
 800b2f2:	e016      	b.n	800b322 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	2104      	movs	r1, #4
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f001 f9f5 	bl	800c6ec <TIM_CCxChannelCmd>
      break;
 800b302:	e00e      	b.n	800b322 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2201      	movs	r2, #1
 800b30a:	2100      	movs	r1, #0
 800b30c:	4618      	mov	r0, r3
 800b30e:	f001 f9ed 	bl	800c6ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2201      	movs	r2, #1
 800b318:	2104      	movs	r1, #4
 800b31a:	4618      	mov	r0, r3
 800b31c:	f001 f9e6 	bl	800c6ec <TIM_CCxChannelCmd>
      break;
 800b320:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f042 0201 	orr.w	r2, r2, #1
 800b330:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b332:	2300      	movs	r3, #0
}
 800b334:	4618      	mov	r0, r3
 800b336:	3710      	adds	r7, #16
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}

0800b33c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	f003 0302 	and.w	r3, r3, #2
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d026      	beq.n	800b3ac <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	f003 0302 	and.w	r3, r3, #2
 800b364:	2b00      	cmp	r3, #0
 800b366:	d021      	beq.n	800b3ac <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f06f 0202 	mvn.w	r2, #2
 800b370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2201      	movs	r2, #1
 800b376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	699b      	ldr	r3, [r3, #24]
 800b37e:	f003 0303 	and.w	r3, r3, #3
 800b382:	2b00      	cmp	r3, #0
 800b384:	d005      	beq.n	800b392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	4798      	blx	r3
 800b390:	e009      	b.n	800b3a6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	f003 0304 	and.w	r3, r3, #4
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d026      	beq.n	800b404 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f003 0304 	and.w	r3, r3, #4
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d021      	beq.n	800b404 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f06f 0204 	mvn.w	r2, #4
 800b3c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2202      	movs	r2, #2
 800b3ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	699b      	ldr	r3, [r3, #24]
 800b3d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d005      	beq.n	800b3ea <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	4798      	blx	r3
 800b3e8:	e009      	b.n	800b3fe <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	f003 0308 	and.w	r3, r3, #8
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d026      	beq.n	800b45c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f003 0308 	and.w	r3, r3, #8
 800b414:	2b00      	cmp	r3, #0
 800b416:	d021      	beq.n	800b45c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f06f 0208 	mvn.w	r2, #8
 800b420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2204      	movs	r2, #4
 800b426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	69db      	ldr	r3, [r3, #28]
 800b42e:	f003 0303 	and.w	r3, r3, #3
 800b432:	2b00      	cmp	r3, #0
 800b434:	d005      	beq.n	800b442 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	4798      	blx	r3
 800b440:	e009      	b.n	800b456 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b448:	6878      	ldr	r0, [r7, #4]
 800b44a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	f003 0310 	and.w	r3, r3, #16
 800b462:	2b00      	cmp	r3, #0
 800b464:	d026      	beq.n	800b4b4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	f003 0310 	and.w	r3, r3, #16
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d021      	beq.n	800b4b4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f06f 0210 	mvn.w	r2, #16
 800b478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2208      	movs	r2, #8
 800b47e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	69db      	ldr	r3, [r3, #28]
 800b486:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d005      	beq.n	800b49a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	4798      	blx	r3
 800b498:	e009      	b.n	800b4ae <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	f003 0301 	and.w	r3, r3, #1
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00e      	beq.n	800b4dc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f003 0301 	and.w	r3, r3, #1
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d009      	beq.n	800b4dc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f06f 0201 	mvn.w	r2, #1
 800b4d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d104      	bne.n	800b4f0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d00e      	beq.n	800b50e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d009      	beq.n	800b50e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00e      	beq.n	800b536 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d009      	beq.n	800b536 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b52a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00e      	beq.n	800b55e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b546:	2b00      	cmp	r3, #0
 800b548:	d009      	beq.n	800b55e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b552:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	f003 0320 	and.w	r3, r3, #32
 800b564:	2b00      	cmp	r3, #0
 800b566:	d00e      	beq.n	800b586 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f003 0320 	and.w	r3, r3, #32
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d009      	beq.n	800b586 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f06f 0220 	mvn.w	r2, #32
 800b57a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00e      	beq.n	800b5ae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b596:	2b00      	cmp	r3, #0
 800b598:	d009      	beq.n	800b5ae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b5a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00e      	beq.n	800b5d6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d009      	beq.n	800b5d6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b5ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00e      	beq.n	800b5fe <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d009      	beq.n	800b5fe <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b5f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00e      	beq.n	800b626 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d009      	beq.n	800b626 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800b61a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b626:	bf00      	nop
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
	...

0800b630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b63c:	2300      	movs	r3, #0
 800b63e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b646:	2b01      	cmp	r3, #1
 800b648:	d101      	bne.n	800b64e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b64a:	2302      	movs	r3, #2
 800b64c:	e0ff      	b.n	800b84e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2201      	movs	r2, #1
 800b652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2b14      	cmp	r3, #20
 800b65a:	f200 80f0 	bhi.w	800b83e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b65e:	a201      	add	r2, pc, #4	@ (adr r2, 800b664 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b664:	0800b6b9 	.word	0x0800b6b9
 800b668:	0800b83f 	.word	0x0800b83f
 800b66c:	0800b83f 	.word	0x0800b83f
 800b670:	0800b83f 	.word	0x0800b83f
 800b674:	0800b6f9 	.word	0x0800b6f9
 800b678:	0800b83f 	.word	0x0800b83f
 800b67c:	0800b83f 	.word	0x0800b83f
 800b680:	0800b83f 	.word	0x0800b83f
 800b684:	0800b73b 	.word	0x0800b73b
 800b688:	0800b83f 	.word	0x0800b83f
 800b68c:	0800b83f 	.word	0x0800b83f
 800b690:	0800b83f 	.word	0x0800b83f
 800b694:	0800b77b 	.word	0x0800b77b
 800b698:	0800b83f 	.word	0x0800b83f
 800b69c:	0800b83f 	.word	0x0800b83f
 800b6a0:	0800b83f 	.word	0x0800b83f
 800b6a4:	0800b7bd 	.word	0x0800b7bd
 800b6a8:	0800b83f 	.word	0x0800b83f
 800b6ac:	0800b83f 	.word	0x0800b83f
 800b6b0:	0800b83f 	.word	0x0800b83f
 800b6b4:	0800b7fd 	.word	0x0800b7fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	68b9      	ldr	r1, [r7, #8]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f000 fc4e 	bl	800bf60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	699a      	ldr	r2, [r3, #24]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f042 0208 	orr.w	r2, r2, #8
 800b6d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	699a      	ldr	r2, [r3, #24]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f022 0204 	bic.w	r2, r2, #4
 800b6e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	6999      	ldr	r1, [r3, #24]
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	691a      	ldr	r2, [r3, #16]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	430a      	orrs	r2, r1
 800b6f4:	619a      	str	r2, [r3, #24]
      break;
 800b6f6:	e0a5      	b.n	800b844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	68b9      	ldr	r1, [r7, #8]
 800b6fe:	4618      	mov	r0, r3
 800b700:	f000 fcc8 	bl	800c094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	699a      	ldr	r2, [r3, #24]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	699a      	ldr	r2, [r3, #24]
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	6999      	ldr	r1, [r3, #24]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	691b      	ldr	r3, [r3, #16]
 800b72e:	021a      	lsls	r2, r3, #8
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	430a      	orrs	r2, r1
 800b736:	619a      	str	r2, [r3, #24]
      break;
 800b738:	e084      	b.n	800b844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	68b9      	ldr	r1, [r7, #8]
 800b740:	4618      	mov	r0, r3
 800b742:	f000 fd3b 	bl	800c1bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	69da      	ldr	r2, [r3, #28]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f042 0208 	orr.w	r2, r2, #8
 800b754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	69da      	ldr	r2, [r3, #28]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f022 0204 	bic.w	r2, r2, #4
 800b764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	69d9      	ldr	r1, [r3, #28]
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	691a      	ldr	r2, [r3, #16]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	430a      	orrs	r2, r1
 800b776:	61da      	str	r2, [r3, #28]
      break;
 800b778:	e064      	b.n	800b844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	68b9      	ldr	r1, [r7, #8]
 800b780:	4618      	mov	r0, r3
 800b782:	f000 fdad 	bl	800c2e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	69da      	ldr	r2, [r3, #28]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	69da      	ldr	r2, [r3, #28]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b7a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	69d9      	ldr	r1, [r3, #28]
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	691b      	ldr	r3, [r3, #16]
 800b7b0:	021a      	lsls	r2, r3, #8
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	430a      	orrs	r2, r1
 800b7b8:	61da      	str	r2, [r3, #28]
      break;
 800b7ba:	e043      	b.n	800b844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	68b9      	ldr	r1, [r7, #8]
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f000 fe20 	bl	800c408 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f042 0208 	orr.w	r2, r2, #8
 800b7d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f022 0204 	bic.w	r2, r2, #4
 800b7e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	691a      	ldr	r2, [r3, #16]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	430a      	orrs	r2, r1
 800b7f8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b7fa:	e023      	b.n	800b844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	68b9      	ldr	r1, [r7, #8]
 800b802:	4618      	mov	r0, r3
 800b804:	f000 fe6a 	bl	800c4dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b816:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b826:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	691b      	ldr	r3, [r3, #16]
 800b832:	021a      	lsls	r2, r3, #8
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	430a      	orrs	r2, r1
 800b83a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b83c:	e002      	b.n	800b844 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	75fb      	strb	r3, [r7, #23]
      break;
 800b842:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2200      	movs	r2, #0
 800b848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b84c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3718      	adds	r7, #24
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop

0800b858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b862:	2300      	movs	r3, #0
 800b864:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d101      	bne.n	800b874 <HAL_TIM_ConfigClockSource+0x1c>
 800b870:	2302      	movs	r3, #2
 800b872:	e0f6      	b.n	800ba62 <HAL_TIM_ConfigClockSource+0x20a>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2202      	movs	r2, #2
 800b880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b892:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b89e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	68ba      	ldr	r2, [r7, #8]
 800b8a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a6f      	ldr	r2, [pc, #444]	@ (800ba6c <HAL_TIM_ConfigClockSource+0x214>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	f000 80c1 	beq.w	800ba36 <HAL_TIM_ConfigClockSource+0x1de>
 800b8b4:	4a6d      	ldr	r2, [pc, #436]	@ (800ba6c <HAL_TIM_ConfigClockSource+0x214>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	f200 80c6 	bhi.w	800ba48 <HAL_TIM_ConfigClockSource+0x1f0>
 800b8bc:	4a6c      	ldr	r2, [pc, #432]	@ (800ba70 <HAL_TIM_ConfigClockSource+0x218>)
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	f000 80b9 	beq.w	800ba36 <HAL_TIM_ConfigClockSource+0x1de>
 800b8c4:	4a6a      	ldr	r2, [pc, #424]	@ (800ba70 <HAL_TIM_ConfigClockSource+0x218>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	f200 80be 	bhi.w	800ba48 <HAL_TIM_ConfigClockSource+0x1f0>
 800b8cc:	4a69      	ldr	r2, [pc, #420]	@ (800ba74 <HAL_TIM_ConfigClockSource+0x21c>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	f000 80b1 	beq.w	800ba36 <HAL_TIM_ConfigClockSource+0x1de>
 800b8d4:	4a67      	ldr	r2, [pc, #412]	@ (800ba74 <HAL_TIM_ConfigClockSource+0x21c>)
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	f200 80b6 	bhi.w	800ba48 <HAL_TIM_ConfigClockSource+0x1f0>
 800b8dc:	4a66      	ldr	r2, [pc, #408]	@ (800ba78 <HAL_TIM_ConfigClockSource+0x220>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	f000 80a9 	beq.w	800ba36 <HAL_TIM_ConfigClockSource+0x1de>
 800b8e4:	4a64      	ldr	r2, [pc, #400]	@ (800ba78 <HAL_TIM_ConfigClockSource+0x220>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	f200 80ae 	bhi.w	800ba48 <HAL_TIM_ConfigClockSource+0x1f0>
 800b8ec:	4a63      	ldr	r2, [pc, #396]	@ (800ba7c <HAL_TIM_ConfigClockSource+0x224>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	f000 80a1 	beq.w	800ba36 <HAL_TIM_ConfigClockSource+0x1de>
 800b8f4:	4a61      	ldr	r2, [pc, #388]	@ (800ba7c <HAL_TIM_ConfigClockSource+0x224>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	f200 80a6 	bhi.w	800ba48 <HAL_TIM_ConfigClockSource+0x1f0>
 800b8fc:	4a60      	ldr	r2, [pc, #384]	@ (800ba80 <HAL_TIM_ConfigClockSource+0x228>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	f000 8099 	beq.w	800ba36 <HAL_TIM_ConfigClockSource+0x1de>
 800b904:	4a5e      	ldr	r2, [pc, #376]	@ (800ba80 <HAL_TIM_ConfigClockSource+0x228>)
 800b906:	4293      	cmp	r3, r2
 800b908:	f200 809e 	bhi.w	800ba48 <HAL_TIM_ConfigClockSource+0x1f0>
 800b90c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b910:	f000 8091 	beq.w	800ba36 <HAL_TIM_ConfigClockSource+0x1de>
 800b914:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b918:	f200 8096 	bhi.w	800ba48 <HAL_TIM_ConfigClockSource+0x1f0>
 800b91c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b920:	f000 8089 	beq.w	800ba36 <HAL_TIM_ConfigClockSource+0x1de>
 800b924:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b928:	f200 808e 	bhi.w	800ba48 <HAL_TIM_ConfigClockSource+0x1f0>
 800b92c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b930:	d03e      	beq.n	800b9b0 <HAL_TIM_ConfigClockSource+0x158>
 800b932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b936:	f200 8087 	bhi.w	800ba48 <HAL_TIM_ConfigClockSource+0x1f0>
 800b93a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b93e:	f000 8086 	beq.w	800ba4e <HAL_TIM_ConfigClockSource+0x1f6>
 800b942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b946:	d87f      	bhi.n	800ba48 <HAL_TIM_ConfigClockSource+0x1f0>
 800b948:	2b70      	cmp	r3, #112	@ 0x70
 800b94a:	d01a      	beq.n	800b982 <HAL_TIM_ConfigClockSource+0x12a>
 800b94c:	2b70      	cmp	r3, #112	@ 0x70
 800b94e:	d87b      	bhi.n	800ba48 <HAL_TIM_ConfigClockSource+0x1f0>
 800b950:	2b60      	cmp	r3, #96	@ 0x60
 800b952:	d050      	beq.n	800b9f6 <HAL_TIM_ConfigClockSource+0x19e>
 800b954:	2b60      	cmp	r3, #96	@ 0x60
 800b956:	d877      	bhi.n	800ba48 <HAL_TIM_ConfigClockSource+0x1f0>
 800b958:	2b50      	cmp	r3, #80	@ 0x50
 800b95a:	d03c      	beq.n	800b9d6 <HAL_TIM_ConfigClockSource+0x17e>
 800b95c:	2b50      	cmp	r3, #80	@ 0x50
 800b95e:	d873      	bhi.n	800ba48 <HAL_TIM_ConfigClockSource+0x1f0>
 800b960:	2b40      	cmp	r3, #64	@ 0x40
 800b962:	d058      	beq.n	800ba16 <HAL_TIM_ConfigClockSource+0x1be>
 800b964:	2b40      	cmp	r3, #64	@ 0x40
 800b966:	d86f      	bhi.n	800ba48 <HAL_TIM_ConfigClockSource+0x1f0>
 800b968:	2b30      	cmp	r3, #48	@ 0x30
 800b96a:	d064      	beq.n	800ba36 <HAL_TIM_ConfigClockSource+0x1de>
 800b96c:	2b30      	cmp	r3, #48	@ 0x30
 800b96e:	d86b      	bhi.n	800ba48 <HAL_TIM_ConfigClockSource+0x1f0>
 800b970:	2b20      	cmp	r3, #32
 800b972:	d060      	beq.n	800ba36 <HAL_TIM_ConfigClockSource+0x1de>
 800b974:	2b20      	cmp	r3, #32
 800b976:	d867      	bhi.n	800ba48 <HAL_TIM_ConfigClockSource+0x1f0>
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d05c      	beq.n	800ba36 <HAL_TIM_ConfigClockSource+0x1de>
 800b97c:	2b10      	cmp	r3, #16
 800b97e:	d05a      	beq.n	800ba36 <HAL_TIM_ConfigClockSource+0x1de>
 800b980:	e062      	b.n	800ba48 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b992:	f000 fe8b 	bl	800c6ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b9a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	609a      	str	r2, [r3, #8]
      break;
 800b9ae:	e04f      	b.n	800ba50 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b9c0:	f000 fe74 	bl	800c6ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	689a      	ldr	r2, [r3, #8]
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b9d2:	609a      	str	r2, [r3, #8]
      break;
 800b9d4:	e03c      	b.n	800ba50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	f000 fde6 	bl	800c5b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2150      	movs	r1, #80	@ 0x50
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f000 fe3f 	bl	800c672 <TIM_ITRx_SetConfig>
      break;
 800b9f4:	e02c      	b.n	800ba50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ba02:	461a      	mov	r2, r3
 800ba04:	f000 fe05 	bl	800c612 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	2160      	movs	r1, #96	@ 0x60
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f000 fe2f 	bl	800c672 <TIM_ITRx_SetConfig>
      break;
 800ba14:	e01c      	b.n	800ba50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ba22:	461a      	mov	r2, r3
 800ba24:	f000 fdc6 	bl	800c5b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	2140      	movs	r1, #64	@ 0x40
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f000 fe1f 	bl	800c672 <TIM_ITRx_SetConfig>
      break;
 800ba34:	e00c      	b.n	800ba50 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4619      	mov	r1, r3
 800ba40:	4610      	mov	r0, r2
 800ba42:	f000 fe16 	bl	800c672 <TIM_ITRx_SetConfig>
      break;
 800ba46:	e003      	b.n	800ba50 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba4c:	e000      	b.n	800ba50 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800ba4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2201      	movs	r2, #1
 800ba54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ba60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3710      	adds	r7, #16
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	00100070 	.word	0x00100070
 800ba70:	00100060 	.word	0x00100060
 800ba74:	00100050 	.word	0x00100050
 800ba78:	00100040 	.word	0x00100040
 800ba7c:	00100030 	.word	0x00100030
 800ba80:	00100020 	.word	0x00100020

0800ba84 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800ba8c:	bf00      	nop
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800baa0:	bf00      	nop
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bab4:	bf00      	nop
 800bab6:	370c      	adds	r7, #12
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800bac8:	bf00      	nop
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b083      	sub	sp, #12
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800badc:	bf00      	nop
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800baf0:	bf00      	nop
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bb04:	bf00      	nop
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr

0800bb10 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800bb18:	bf00      	nop
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800bb2c:	bf00      	nop
 800bb2e:	370c      	adds	r7, #12
 800bb30:	46bd      	mov	sp, r7
 800bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb36:	4770      	bx	lr

0800bb38 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b087      	sub	sp, #28
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	60f8      	str	r0, [r7, #12]
 800bb40:	460b      	mov	r3, r1
 800bb42:	607a      	str	r2, [r7, #4]
 800bb44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800bb46:	2300      	movs	r3, #0
 800bb48:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d101      	bne.n	800bb54 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	e14a      	b.n	800bdea <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	f040 80dd 	bne.w	800bd1c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800bb62:	7afb      	ldrb	r3, [r7, #11]
 800bb64:	2b1f      	cmp	r3, #31
 800bb66:	f200 80d6 	bhi.w	800bd16 <HAL_TIM_RegisterCallback+0x1de>
 800bb6a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb70 <HAL_TIM_RegisterCallback+0x38>)
 800bb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb70:	0800bbf1 	.word	0x0800bbf1
 800bb74:	0800bbf9 	.word	0x0800bbf9
 800bb78:	0800bc01 	.word	0x0800bc01
 800bb7c:	0800bc09 	.word	0x0800bc09
 800bb80:	0800bc11 	.word	0x0800bc11
 800bb84:	0800bc19 	.word	0x0800bc19
 800bb88:	0800bc21 	.word	0x0800bc21
 800bb8c:	0800bc29 	.word	0x0800bc29
 800bb90:	0800bc31 	.word	0x0800bc31
 800bb94:	0800bc39 	.word	0x0800bc39
 800bb98:	0800bc41 	.word	0x0800bc41
 800bb9c:	0800bc49 	.word	0x0800bc49
 800bba0:	0800bc51 	.word	0x0800bc51
 800bba4:	0800bc59 	.word	0x0800bc59
 800bba8:	0800bc63 	.word	0x0800bc63
 800bbac:	0800bc6d 	.word	0x0800bc6d
 800bbb0:	0800bc77 	.word	0x0800bc77
 800bbb4:	0800bc81 	.word	0x0800bc81
 800bbb8:	0800bc8b 	.word	0x0800bc8b
 800bbbc:	0800bc95 	.word	0x0800bc95
 800bbc0:	0800bc9f 	.word	0x0800bc9f
 800bbc4:	0800bca9 	.word	0x0800bca9
 800bbc8:	0800bcb3 	.word	0x0800bcb3
 800bbcc:	0800bcbd 	.word	0x0800bcbd
 800bbd0:	0800bcc7 	.word	0x0800bcc7
 800bbd4:	0800bcd1 	.word	0x0800bcd1
 800bbd8:	0800bcdb 	.word	0x0800bcdb
 800bbdc:	0800bce5 	.word	0x0800bce5
 800bbe0:	0800bcef 	.word	0x0800bcef
 800bbe4:	0800bcf9 	.word	0x0800bcf9
 800bbe8:	0800bd03 	.word	0x0800bd03
 800bbec:	0800bd0d 	.word	0x0800bd0d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800bbf6:	e0f7      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800bbfe:	e0f3      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800bc06:	e0ef      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800bc0e:	e0eb      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800bc16:	e0e7      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800bc1e:	e0e3      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800bc26:	e0df      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800bc2e:	e0db      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800bc36:	e0d7      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800bc3e:	e0d3      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800bc46:	e0cf      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800bc4e:	e0cb      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800bc56:	e0c7      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800bc60:	e0c2      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800bc6a:	e0bd      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800bc74:	e0b8      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800bc7e:	e0b3      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800bc88:	e0ae      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800bc92:	e0a9      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800bc9c:	e0a4      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800bca6:	e09f      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800bcb0:	e09a      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800bcba:	e095      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800bcc4:	e090      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800bcce:	e08b      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800bcd8:	e086      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800bce2:	e081      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800bcec:	e07c      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	687a      	ldr	r2, [r7, #4]
 800bcf2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800bcf6:	e077      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800bd00:	e072      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800bd0a:	e06d      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800bd14:	e068      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800bd16:	2301      	movs	r3, #1
 800bd18:	75fb      	strb	r3, [r7, #23]
        break;
 800bd1a:	e065      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd22:	b2db      	uxtb	r3, r3
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d15d      	bne.n	800bde4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800bd28:	7afb      	ldrb	r3, [r7, #11]
 800bd2a:	2b0d      	cmp	r3, #13
 800bd2c:	d857      	bhi.n	800bdde <HAL_TIM_RegisterCallback+0x2a6>
 800bd2e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd34 <HAL_TIM_RegisterCallback+0x1fc>)
 800bd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd34:	0800bd6d 	.word	0x0800bd6d
 800bd38:	0800bd75 	.word	0x0800bd75
 800bd3c:	0800bd7d 	.word	0x0800bd7d
 800bd40:	0800bd85 	.word	0x0800bd85
 800bd44:	0800bd8d 	.word	0x0800bd8d
 800bd48:	0800bd95 	.word	0x0800bd95
 800bd4c:	0800bd9d 	.word	0x0800bd9d
 800bd50:	0800bda5 	.word	0x0800bda5
 800bd54:	0800bdad 	.word	0x0800bdad
 800bd58:	0800bdb5 	.word	0x0800bdb5
 800bd5c:	0800bdbd 	.word	0x0800bdbd
 800bd60:	0800bdc5 	.word	0x0800bdc5
 800bd64:	0800bdcd 	.word	0x0800bdcd
 800bd68:	0800bdd5 	.word	0x0800bdd5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800bd72:	e039      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800bd7a:	e035      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800bd82:	e031      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800bd8a:	e02d      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800bd92:	e029      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	687a      	ldr	r2, [r7, #4]
 800bd98:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800bd9a:	e025      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800bda2:	e021      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800bdaa:	e01d      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800bdb2:	e019      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800bdba:	e015      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800bdc2:	e011      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800bdca:	e00d      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800bdd2:	e009      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800bddc:	e004      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	75fb      	strb	r3, [r7, #23]
        break;
 800bde2:	e001      	b.n	800bde8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800bde4:	2301      	movs	r3, #1
 800bde6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800bde8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	371c      	adds	r7, #28
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr
 800bdf6:	bf00      	nop

0800bdf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	4a4c      	ldr	r2, [pc, #304]	@ (800bf3c <TIM_Base_SetConfig+0x144>)
 800be0c:	4293      	cmp	r3, r2
 800be0e:	d017      	beq.n	800be40 <TIM_Base_SetConfig+0x48>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be16:	d013      	beq.n	800be40 <TIM_Base_SetConfig+0x48>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	4a49      	ldr	r2, [pc, #292]	@ (800bf40 <TIM_Base_SetConfig+0x148>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d00f      	beq.n	800be40 <TIM_Base_SetConfig+0x48>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	4a48      	ldr	r2, [pc, #288]	@ (800bf44 <TIM_Base_SetConfig+0x14c>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d00b      	beq.n	800be40 <TIM_Base_SetConfig+0x48>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	4a47      	ldr	r2, [pc, #284]	@ (800bf48 <TIM_Base_SetConfig+0x150>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d007      	beq.n	800be40 <TIM_Base_SetConfig+0x48>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4a46      	ldr	r2, [pc, #280]	@ (800bf4c <TIM_Base_SetConfig+0x154>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d003      	beq.n	800be40 <TIM_Base_SetConfig+0x48>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4a45      	ldr	r2, [pc, #276]	@ (800bf50 <TIM_Base_SetConfig+0x158>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d108      	bne.n	800be52 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	68fa      	ldr	r2, [r7, #12]
 800be4e:	4313      	orrs	r3, r2
 800be50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	4a39      	ldr	r2, [pc, #228]	@ (800bf3c <TIM_Base_SetConfig+0x144>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d023      	beq.n	800bea2 <TIM_Base_SetConfig+0xaa>
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be60:	d01f      	beq.n	800bea2 <TIM_Base_SetConfig+0xaa>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4a36      	ldr	r2, [pc, #216]	@ (800bf40 <TIM_Base_SetConfig+0x148>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d01b      	beq.n	800bea2 <TIM_Base_SetConfig+0xaa>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4a35      	ldr	r2, [pc, #212]	@ (800bf44 <TIM_Base_SetConfig+0x14c>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d017      	beq.n	800bea2 <TIM_Base_SetConfig+0xaa>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	4a34      	ldr	r2, [pc, #208]	@ (800bf48 <TIM_Base_SetConfig+0x150>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d013      	beq.n	800bea2 <TIM_Base_SetConfig+0xaa>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4a33      	ldr	r2, [pc, #204]	@ (800bf4c <TIM_Base_SetConfig+0x154>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d00f      	beq.n	800bea2 <TIM_Base_SetConfig+0xaa>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4a33      	ldr	r2, [pc, #204]	@ (800bf54 <TIM_Base_SetConfig+0x15c>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d00b      	beq.n	800bea2 <TIM_Base_SetConfig+0xaa>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4a32      	ldr	r2, [pc, #200]	@ (800bf58 <TIM_Base_SetConfig+0x160>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d007      	beq.n	800bea2 <TIM_Base_SetConfig+0xaa>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4a31      	ldr	r2, [pc, #196]	@ (800bf5c <TIM_Base_SetConfig+0x164>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d003      	beq.n	800bea2 <TIM_Base_SetConfig+0xaa>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a2c      	ldr	r2, [pc, #176]	@ (800bf50 <TIM_Base_SetConfig+0x158>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d108      	bne.n	800beb4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	68fa      	ldr	r2, [r7, #12]
 800beb0:	4313      	orrs	r3, r2
 800beb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	695b      	ldr	r3, [r3, #20]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	689a      	ldr	r2, [r3, #8]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4a18      	ldr	r2, [pc, #96]	@ (800bf3c <TIM_Base_SetConfig+0x144>)
 800bedc:	4293      	cmp	r3, r2
 800bede:	d013      	beq.n	800bf08 <TIM_Base_SetConfig+0x110>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	4a1a      	ldr	r2, [pc, #104]	@ (800bf4c <TIM_Base_SetConfig+0x154>)
 800bee4:	4293      	cmp	r3, r2
 800bee6:	d00f      	beq.n	800bf08 <TIM_Base_SetConfig+0x110>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	4a1a      	ldr	r2, [pc, #104]	@ (800bf54 <TIM_Base_SetConfig+0x15c>)
 800beec:	4293      	cmp	r3, r2
 800beee:	d00b      	beq.n	800bf08 <TIM_Base_SetConfig+0x110>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4a19      	ldr	r2, [pc, #100]	@ (800bf58 <TIM_Base_SetConfig+0x160>)
 800bef4:	4293      	cmp	r3, r2
 800bef6:	d007      	beq.n	800bf08 <TIM_Base_SetConfig+0x110>
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4a18      	ldr	r2, [pc, #96]	@ (800bf5c <TIM_Base_SetConfig+0x164>)
 800befc:	4293      	cmp	r3, r2
 800befe:	d003      	beq.n	800bf08 <TIM_Base_SetConfig+0x110>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	4a13      	ldr	r2, [pc, #76]	@ (800bf50 <TIM_Base_SetConfig+0x158>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d103      	bne.n	800bf10 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	691a      	ldr	r2, [r3, #16]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	691b      	ldr	r3, [r3, #16]
 800bf1a:	f003 0301 	and.w	r3, r3, #1
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d105      	bne.n	800bf2e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	f023 0201 	bic.w	r2, r3, #1
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	611a      	str	r2, [r3, #16]
  }
}
 800bf2e:	bf00      	nop
 800bf30:	3714      	adds	r7, #20
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	40012c00 	.word	0x40012c00
 800bf40:	40000400 	.word	0x40000400
 800bf44:	40000800 	.word	0x40000800
 800bf48:	40000c00 	.word	0x40000c00
 800bf4c:	40013400 	.word	0x40013400
 800bf50:	40015000 	.word	0x40015000
 800bf54:	40014000 	.word	0x40014000
 800bf58:	40014400 	.word	0x40014400
 800bf5c:	40014800 	.word	0x40014800

0800bf60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b087      	sub	sp, #28
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6a1b      	ldr	r3, [r3, #32]
 800bf6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a1b      	ldr	r3, [r3, #32]
 800bf74:	f023 0201 	bic.w	r2, r3, #1
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	685b      	ldr	r3, [r3, #4]
 800bf80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	699b      	ldr	r3, [r3, #24]
 800bf86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f023 0303 	bic.w	r3, r3, #3
 800bf9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	f023 0302 	bic.w	r3, r3, #2
 800bfac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	697a      	ldr	r2, [r7, #20]
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4a30      	ldr	r2, [pc, #192]	@ (800c07c <TIM_OC1_SetConfig+0x11c>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d013      	beq.n	800bfe8 <TIM_OC1_SetConfig+0x88>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	4a2f      	ldr	r2, [pc, #188]	@ (800c080 <TIM_OC1_SetConfig+0x120>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d00f      	beq.n	800bfe8 <TIM_OC1_SetConfig+0x88>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	4a2e      	ldr	r2, [pc, #184]	@ (800c084 <TIM_OC1_SetConfig+0x124>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d00b      	beq.n	800bfe8 <TIM_OC1_SetConfig+0x88>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	4a2d      	ldr	r2, [pc, #180]	@ (800c088 <TIM_OC1_SetConfig+0x128>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d007      	beq.n	800bfe8 <TIM_OC1_SetConfig+0x88>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	4a2c      	ldr	r2, [pc, #176]	@ (800c08c <TIM_OC1_SetConfig+0x12c>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d003      	beq.n	800bfe8 <TIM_OC1_SetConfig+0x88>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	4a2b      	ldr	r2, [pc, #172]	@ (800c090 <TIM_OC1_SetConfig+0x130>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d10c      	bne.n	800c002 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	f023 0308 	bic.w	r3, r3, #8
 800bfee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	697a      	ldr	r2, [r7, #20]
 800bff6:	4313      	orrs	r3, r2
 800bff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	f023 0304 	bic.w	r3, r3, #4
 800c000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	4a1d      	ldr	r2, [pc, #116]	@ (800c07c <TIM_OC1_SetConfig+0x11c>)
 800c006:	4293      	cmp	r3, r2
 800c008:	d013      	beq.n	800c032 <TIM_OC1_SetConfig+0xd2>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4a1c      	ldr	r2, [pc, #112]	@ (800c080 <TIM_OC1_SetConfig+0x120>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d00f      	beq.n	800c032 <TIM_OC1_SetConfig+0xd2>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	4a1b      	ldr	r2, [pc, #108]	@ (800c084 <TIM_OC1_SetConfig+0x124>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d00b      	beq.n	800c032 <TIM_OC1_SetConfig+0xd2>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4a1a      	ldr	r2, [pc, #104]	@ (800c088 <TIM_OC1_SetConfig+0x128>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d007      	beq.n	800c032 <TIM_OC1_SetConfig+0xd2>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4a19      	ldr	r2, [pc, #100]	@ (800c08c <TIM_OC1_SetConfig+0x12c>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d003      	beq.n	800c032 <TIM_OC1_SetConfig+0xd2>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4a18      	ldr	r2, [pc, #96]	@ (800c090 <TIM_OC1_SetConfig+0x130>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d111      	bne.n	800c056 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	693a      	ldr	r2, [r7, #16]
 800c048:	4313      	orrs	r3, r2
 800c04a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	699b      	ldr	r3, [r3, #24]
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	4313      	orrs	r3, r2
 800c054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	693a      	ldr	r2, [r7, #16]
 800c05a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	685a      	ldr	r2, [r3, #4]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	697a      	ldr	r2, [r7, #20]
 800c06e:	621a      	str	r2, [r3, #32]
}
 800c070:	bf00      	nop
 800c072:	371c      	adds	r7, #28
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr
 800c07c:	40012c00 	.word	0x40012c00
 800c080:	40013400 	.word	0x40013400
 800c084:	40014000 	.word	0x40014000
 800c088:	40014400 	.word	0x40014400
 800c08c:	40014800 	.word	0x40014800
 800c090:	40015000 	.word	0x40015000

0800c094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c094:	b480      	push	{r7}
 800c096:	b087      	sub	sp, #28
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a1b      	ldr	r3, [r3, #32]
 800c0a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6a1b      	ldr	r3, [r3, #32]
 800c0a8:	f023 0210 	bic.w	r2, r3, #16
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	699b      	ldr	r3, [r3, #24]
 800c0ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c0c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c0ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	021b      	lsls	r3, r3, #8
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	f023 0320 	bic.w	r3, r3, #32
 800c0e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	011b      	lsls	r3, r3, #4
 800c0ea:	697a      	ldr	r2, [r7, #20]
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a2c      	ldr	r2, [pc, #176]	@ (800c1a4 <TIM_OC2_SetConfig+0x110>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d007      	beq.n	800c108 <TIM_OC2_SetConfig+0x74>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a2b      	ldr	r2, [pc, #172]	@ (800c1a8 <TIM_OC2_SetConfig+0x114>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d003      	beq.n	800c108 <TIM_OC2_SetConfig+0x74>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4a2a      	ldr	r2, [pc, #168]	@ (800c1ac <TIM_OC2_SetConfig+0x118>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d10d      	bne.n	800c124 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c10e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	68db      	ldr	r3, [r3, #12]
 800c114:	011b      	lsls	r3, r3, #4
 800c116:	697a      	ldr	r2, [r7, #20]
 800c118:	4313      	orrs	r3, r2
 800c11a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c122:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a1f      	ldr	r2, [pc, #124]	@ (800c1a4 <TIM_OC2_SetConfig+0x110>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d013      	beq.n	800c154 <TIM_OC2_SetConfig+0xc0>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4a1e      	ldr	r2, [pc, #120]	@ (800c1a8 <TIM_OC2_SetConfig+0x114>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d00f      	beq.n	800c154 <TIM_OC2_SetConfig+0xc0>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4a1e      	ldr	r2, [pc, #120]	@ (800c1b0 <TIM_OC2_SetConfig+0x11c>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d00b      	beq.n	800c154 <TIM_OC2_SetConfig+0xc0>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4a1d      	ldr	r2, [pc, #116]	@ (800c1b4 <TIM_OC2_SetConfig+0x120>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d007      	beq.n	800c154 <TIM_OC2_SetConfig+0xc0>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4a1c      	ldr	r2, [pc, #112]	@ (800c1b8 <TIM_OC2_SetConfig+0x124>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d003      	beq.n	800c154 <TIM_OC2_SetConfig+0xc0>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4a17      	ldr	r2, [pc, #92]	@ (800c1ac <TIM_OC2_SetConfig+0x118>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d113      	bne.n	800c17c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c15a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c162:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	695b      	ldr	r3, [r3, #20]
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	693a      	ldr	r2, [r7, #16]
 800c16c:	4313      	orrs	r3, r2
 800c16e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	699b      	ldr	r3, [r3, #24]
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	693a      	ldr	r2, [r7, #16]
 800c178:	4313      	orrs	r3, r2
 800c17a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	693a      	ldr	r2, [r7, #16]
 800c180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	68fa      	ldr	r2, [r7, #12]
 800c186:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	697a      	ldr	r2, [r7, #20]
 800c194:	621a      	str	r2, [r3, #32]
}
 800c196:	bf00      	nop
 800c198:	371c      	adds	r7, #28
 800c19a:	46bd      	mov	sp, r7
 800c19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a0:	4770      	bx	lr
 800c1a2:	bf00      	nop
 800c1a4:	40012c00 	.word	0x40012c00
 800c1a8:	40013400 	.word	0x40013400
 800c1ac:	40015000 	.word	0x40015000
 800c1b0:	40014000 	.word	0x40014000
 800c1b4:	40014400 	.word	0x40014400
 800c1b8:	40014800 	.word	0x40014800

0800c1bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b087      	sub	sp, #28
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6a1b      	ldr	r3, [r3, #32]
 800c1ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a1b      	ldr	r3, [r3, #32]
 800c1d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	685b      	ldr	r3, [r3, #4]
 800c1dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	69db      	ldr	r3, [r3, #28]
 800c1e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c1ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f023 0303 	bic.w	r3, r3, #3
 800c1f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	68fa      	ldr	r2, [r7, #12]
 800c1fe:	4313      	orrs	r3, r2
 800c200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	021b      	lsls	r3, r3, #8
 800c210:	697a      	ldr	r2, [r7, #20]
 800c212:	4313      	orrs	r3, r2
 800c214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	4a2b      	ldr	r2, [pc, #172]	@ (800c2c8 <TIM_OC3_SetConfig+0x10c>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d007      	beq.n	800c22e <TIM_OC3_SetConfig+0x72>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	4a2a      	ldr	r2, [pc, #168]	@ (800c2cc <TIM_OC3_SetConfig+0x110>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d003      	beq.n	800c22e <TIM_OC3_SetConfig+0x72>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	4a29      	ldr	r2, [pc, #164]	@ (800c2d0 <TIM_OC3_SetConfig+0x114>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d10d      	bne.n	800c24a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c234:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	021b      	lsls	r3, r3, #8
 800c23c:	697a      	ldr	r2, [r7, #20]
 800c23e:	4313      	orrs	r3, r2
 800c240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4a1e      	ldr	r2, [pc, #120]	@ (800c2c8 <TIM_OC3_SetConfig+0x10c>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d013      	beq.n	800c27a <TIM_OC3_SetConfig+0xbe>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4a1d      	ldr	r2, [pc, #116]	@ (800c2cc <TIM_OC3_SetConfig+0x110>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d00f      	beq.n	800c27a <TIM_OC3_SetConfig+0xbe>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4a1d      	ldr	r2, [pc, #116]	@ (800c2d4 <TIM_OC3_SetConfig+0x118>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d00b      	beq.n	800c27a <TIM_OC3_SetConfig+0xbe>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	4a1c      	ldr	r2, [pc, #112]	@ (800c2d8 <TIM_OC3_SetConfig+0x11c>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d007      	beq.n	800c27a <TIM_OC3_SetConfig+0xbe>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4a1b      	ldr	r2, [pc, #108]	@ (800c2dc <TIM_OC3_SetConfig+0x120>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d003      	beq.n	800c27a <TIM_OC3_SetConfig+0xbe>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a16      	ldr	r2, [pc, #88]	@ (800c2d0 <TIM_OC3_SetConfig+0x114>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d113      	bne.n	800c2a2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	695b      	ldr	r3, [r3, #20]
 800c28e:	011b      	lsls	r3, r3, #4
 800c290:	693a      	ldr	r2, [r7, #16]
 800c292:	4313      	orrs	r3, r2
 800c294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	699b      	ldr	r3, [r3, #24]
 800c29a:	011b      	lsls	r3, r3, #4
 800c29c:	693a      	ldr	r2, [r7, #16]
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	693a      	ldr	r2, [r7, #16]
 800c2a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	685a      	ldr	r2, [r3, #4]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	697a      	ldr	r2, [r7, #20]
 800c2ba:	621a      	str	r2, [r3, #32]
}
 800c2bc:	bf00      	nop
 800c2be:	371c      	adds	r7, #28
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr
 800c2c8:	40012c00 	.word	0x40012c00
 800c2cc:	40013400 	.word	0x40013400
 800c2d0:	40015000 	.word	0x40015000
 800c2d4:	40014000 	.word	0x40014000
 800c2d8:	40014400 	.word	0x40014400
 800c2dc:	40014800 	.word	0x40014800

0800c2e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b087      	sub	sp, #28
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6a1b      	ldr	r3, [r3, #32]
 800c2ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6a1b      	ldr	r3, [r3, #32]
 800c2f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	69db      	ldr	r3, [r3, #28]
 800c306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c30e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c31a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	021b      	lsls	r3, r3, #8
 800c322:	68fa      	ldr	r2, [r7, #12]
 800c324:	4313      	orrs	r3, r2
 800c326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c32e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	031b      	lsls	r3, r3, #12
 800c336:	697a      	ldr	r2, [r7, #20]
 800c338:	4313      	orrs	r3, r2
 800c33a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	4a2c      	ldr	r2, [pc, #176]	@ (800c3f0 <TIM_OC4_SetConfig+0x110>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d007      	beq.n	800c354 <TIM_OC4_SetConfig+0x74>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4a2b      	ldr	r2, [pc, #172]	@ (800c3f4 <TIM_OC4_SetConfig+0x114>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d003      	beq.n	800c354 <TIM_OC4_SetConfig+0x74>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4a2a      	ldr	r2, [pc, #168]	@ (800c3f8 <TIM_OC4_SetConfig+0x118>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d10d      	bne.n	800c370 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c35a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	031b      	lsls	r3, r3, #12
 800c362:	697a      	ldr	r2, [r7, #20]
 800c364:	4313      	orrs	r3, r2
 800c366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c36e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4a1f      	ldr	r2, [pc, #124]	@ (800c3f0 <TIM_OC4_SetConfig+0x110>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d013      	beq.n	800c3a0 <TIM_OC4_SetConfig+0xc0>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4a1e      	ldr	r2, [pc, #120]	@ (800c3f4 <TIM_OC4_SetConfig+0x114>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d00f      	beq.n	800c3a0 <TIM_OC4_SetConfig+0xc0>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4a1e      	ldr	r2, [pc, #120]	@ (800c3fc <TIM_OC4_SetConfig+0x11c>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d00b      	beq.n	800c3a0 <TIM_OC4_SetConfig+0xc0>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4a1d      	ldr	r2, [pc, #116]	@ (800c400 <TIM_OC4_SetConfig+0x120>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d007      	beq.n	800c3a0 <TIM_OC4_SetConfig+0xc0>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a1c      	ldr	r2, [pc, #112]	@ (800c404 <TIM_OC4_SetConfig+0x124>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d003      	beq.n	800c3a0 <TIM_OC4_SetConfig+0xc0>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4a17      	ldr	r2, [pc, #92]	@ (800c3f8 <TIM_OC4_SetConfig+0x118>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d113      	bne.n	800c3c8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c3a0:	693b      	ldr	r3, [r7, #16]
 800c3a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c3a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c3ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	695b      	ldr	r3, [r3, #20]
 800c3b4:	019b      	lsls	r3, r3, #6
 800c3b6:	693a      	ldr	r2, [r7, #16]
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	699b      	ldr	r3, [r3, #24]
 800c3c0:	019b      	lsls	r3, r3, #6
 800c3c2:	693a      	ldr	r2, [r7, #16]
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	693a      	ldr	r2, [r7, #16]
 800c3cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	68fa      	ldr	r2, [r7, #12]
 800c3d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	685a      	ldr	r2, [r3, #4]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	697a      	ldr	r2, [r7, #20]
 800c3e0:	621a      	str	r2, [r3, #32]
}
 800c3e2:	bf00      	nop
 800c3e4:	371c      	adds	r7, #28
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop
 800c3f0:	40012c00 	.word	0x40012c00
 800c3f4:	40013400 	.word	0x40013400
 800c3f8:	40015000 	.word	0x40015000
 800c3fc:	40014000 	.word	0x40014000
 800c400:	40014400 	.word	0x40014400
 800c404:	40014800 	.word	0x40014800

0800c408 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c408:	b480      	push	{r7}
 800c40a:	b087      	sub	sp, #28
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a1b      	ldr	r3, [r3, #32]
 800c416:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6a1b      	ldr	r3, [r3, #32]
 800c41c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c43a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	68fa      	ldr	r2, [r7, #12]
 800c442:	4313      	orrs	r3, r2
 800c444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c44c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	041b      	lsls	r3, r3, #16
 800c454:	693a      	ldr	r2, [r7, #16]
 800c456:	4313      	orrs	r3, r2
 800c458:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4a19      	ldr	r2, [pc, #100]	@ (800c4c4 <TIM_OC5_SetConfig+0xbc>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d013      	beq.n	800c48a <TIM_OC5_SetConfig+0x82>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4a18      	ldr	r2, [pc, #96]	@ (800c4c8 <TIM_OC5_SetConfig+0xc0>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d00f      	beq.n	800c48a <TIM_OC5_SetConfig+0x82>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4a17      	ldr	r2, [pc, #92]	@ (800c4cc <TIM_OC5_SetConfig+0xc4>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d00b      	beq.n	800c48a <TIM_OC5_SetConfig+0x82>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	4a16      	ldr	r2, [pc, #88]	@ (800c4d0 <TIM_OC5_SetConfig+0xc8>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d007      	beq.n	800c48a <TIM_OC5_SetConfig+0x82>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4a15      	ldr	r2, [pc, #84]	@ (800c4d4 <TIM_OC5_SetConfig+0xcc>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d003      	beq.n	800c48a <TIM_OC5_SetConfig+0x82>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	4a14      	ldr	r2, [pc, #80]	@ (800c4d8 <TIM_OC5_SetConfig+0xd0>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d109      	bne.n	800c49e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c490:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	695b      	ldr	r3, [r3, #20]
 800c496:	021b      	lsls	r3, r3, #8
 800c498:	697a      	ldr	r2, [r7, #20]
 800c49a:	4313      	orrs	r3, r2
 800c49c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	697a      	ldr	r2, [r7, #20]
 800c4a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	68fa      	ldr	r2, [r7, #12]
 800c4a8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	685a      	ldr	r2, [r3, #4]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	693a      	ldr	r2, [r7, #16]
 800c4b6:	621a      	str	r2, [r3, #32]
}
 800c4b8:	bf00      	nop
 800c4ba:	371c      	adds	r7, #28
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr
 800c4c4:	40012c00 	.word	0x40012c00
 800c4c8:	40013400 	.word	0x40013400
 800c4cc:	40014000 	.word	0x40014000
 800c4d0:	40014400 	.word	0x40014400
 800c4d4:	40014800 	.word	0x40014800
 800c4d8:	40015000 	.word	0x40015000

0800c4dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b087      	sub	sp, #28
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6a1b      	ldr	r3, [r3, #32]
 800c4ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6a1b      	ldr	r3, [r3, #32]
 800c4f0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c50a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c50e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	021b      	lsls	r3, r3, #8
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	4313      	orrs	r3, r2
 800c51a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	051b      	lsls	r3, r3, #20
 800c52a:	693a      	ldr	r2, [r7, #16]
 800c52c:	4313      	orrs	r3, r2
 800c52e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4a1a      	ldr	r2, [pc, #104]	@ (800c59c <TIM_OC6_SetConfig+0xc0>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d013      	beq.n	800c560 <TIM_OC6_SetConfig+0x84>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4a19      	ldr	r2, [pc, #100]	@ (800c5a0 <TIM_OC6_SetConfig+0xc4>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d00f      	beq.n	800c560 <TIM_OC6_SetConfig+0x84>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4a18      	ldr	r2, [pc, #96]	@ (800c5a4 <TIM_OC6_SetConfig+0xc8>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d00b      	beq.n	800c560 <TIM_OC6_SetConfig+0x84>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	4a17      	ldr	r2, [pc, #92]	@ (800c5a8 <TIM_OC6_SetConfig+0xcc>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d007      	beq.n	800c560 <TIM_OC6_SetConfig+0x84>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	4a16      	ldr	r2, [pc, #88]	@ (800c5ac <TIM_OC6_SetConfig+0xd0>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d003      	beq.n	800c560 <TIM_OC6_SetConfig+0x84>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	4a15      	ldr	r2, [pc, #84]	@ (800c5b0 <TIM_OC6_SetConfig+0xd4>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d109      	bne.n	800c574 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c566:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	695b      	ldr	r3, [r3, #20]
 800c56c:	029b      	lsls	r3, r3, #10
 800c56e:	697a      	ldr	r2, [r7, #20]
 800c570:	4313      	orrs	r3, r2
 800c572:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	697a      	ldr	r2, [r7, #20]
 800c578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	685a      	ldr	r2, [r3, #4]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	693a      	ldr	r2, [r7, #16]
 800c58c:	621a      	str	r2, [r3, #32]
}
 800c58e:	bf00      	nop
 800c590:	371c      	adds	r7, #28
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr
 800c59a:	bf00      	nop
 800c59c:	40012c00 	.word	0x40012c00
 800c5a0:	40013400 	.word	0x40013400
 800c5a4:	40014000 	.word	0x40014000
 800c5a8:	40014400 	.word	0x40014400
 800c5ac:	40014800 	.word	0x40014800
 800c5b0:	40015000 	.word	0x40015000

0800c5b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b087      	sub	sp, #28
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6a1b      	ldr	r3, [r3, #32]
 800c5c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	6a1b      	ldr	r3, [r3, #32]
 800c5ca:	f023 0201 	bic.w	r2, r3, #1
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	699b      	ldr	r3, [r3, #24]
 800c5d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5d8:	693b      	ldr	r3, [r7, #16]
 800c5da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c5de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	011b      	lsls	r3, r3, #4
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	f023 030a 	bic.w	r3, r3, #10
 800c5f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c5f2:	697a      	ldr	r2, [r7, #20]
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	4313      	orrs	r3, r2
 800c5f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	693a      	ldr	r2, [r7, #16]
 800c5fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	697a      	ldr	r2, [r7, #20]
 800c604:	621a      	str	r2, [r3, #32]
}
 800c606:	bf00      	nop
 800c608:	371c      	adds	r7, #28
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr

0800c612 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c612:	b480      	push	{r7}
 800c614:	b087      	sub	sp, #28
 800c616:	af00      	add	r7, sp, #0
 800c618:	60f8      	str	r0, [r7, #12]
 800c61a:	60b9      	str	r1, [r7, #8]
 800c61c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	6a1b      	ldr	r3, [r3, #32]
 800c622:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6a1b      	ldr	r3, [r3, #32]
 800c628:	f023 0210 	bic.w	r2, r3, #16
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	699b      	ldr	r3, [r3, #24]
 800c634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c63c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	031b      	lsls	r3, r3, #12
 800c642:	693a      	ldr	r2, [r7, #16]
 800c644:	4313      	orrs	r3, r2
 800c646:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c64e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	011b      	lsls	r3, r3, #4
 800c654:	697a      	ldr	r2, [r7, #20]
 800c656:	4313      	orrs	r3, r2
 800c658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	693a      	ldr	r2, [r7, #16]
 800c65e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	621a      	str	r2, [r3, #32]
}
 800c666:	bf00      	nop
 800c668:	371c      	adds	r7, #28
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr

0800c672 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c672:	b480      	push	{r7}
 800c674:	b085      	sub	sp, #20
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
 800c67a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	689b      	ldr	r3, [r3, #8]
 800c680:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c688:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c68c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c68e:	683a      	ldr	r2, [r7, #0]
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	4313      	orrs	r3, r2
 800c694:	f043 0307 	orr.w	r3, r3, #7
 800c698:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	68fa      	ldr	r2, [r7, #12]
 800c69e:	609a      	str	r2, [r3, #8]
}
 800c6a0:	bf00      	nop
 800c6a2:	3714      	adds	r7, #20
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr

0800c6ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b087      	sub	sp, #28
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	607a      	str	r2, [r7, #4]
 800c6b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c6c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	021a      	lsls	r2, r3, #8
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	431a      	orrs	r2, r3
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	4313      	orrs	r3, r2
 800c6d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	697a      	ldr	r2, [r7, #20]
 800c6de:	609a      	str	r2, [r3, #8]
}
 800c6e0:	bf00      	nop
 800c6e2:	371c      	adds	r7, #28
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ea:	4770      	bx	lr

0800c6ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b087      	sub	sp, #28
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	f003 031f 	and.w	r3, r3, #31
 800c6fe:	2201      	movs	r2, #1
 800c700:	fa02 f303 	lsl.w	r3, r2, r3
 800c704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6a1a      	ldr	r2, [r3, #32]
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	43db      	mvns	r3, r3
 800c70e:	401a      	ands	r2, r3
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6a1a      	ldr	r2, [r3, #32]
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	f003 031f 	and.w	r3, r3, #31
 800c71e:	6879      	ldr	r1, [r7, #4]
 800c720:	fa01 f303 	lsl.w	r3, r1, r3
 800c724:	431a      	orrs	r2, r3
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	621a      	str	r2, [r3, #32]
}
 800c72a:	bf00      	nop
 800c72c:	371c      	adds	r7, #28
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr
	...

0800c738 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4a26      	ldr	r2, [pc, #152]	@ (800c7dc <TIM_ResetCallback+0xa4>)
 800c744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4a25      	ldr	r2, [pc, #148]	@ (800c7e0 <TIM_ResetCallback+0xa8>)
 800c74c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4a24      	ldr	r2, [pc, #144]	@ (800c7e4 <TIM_ResetCallback+0xac>)
 800c754:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	4a23      	ldr	r2, [pc, #140]	@ (800c7e8 <TIM_ResetCallback+0xb0>)
 800c75c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4a22      	ldr	r2, [pc, #136]	@ (800c7ec <TIM_ResetCallback+0xb4>)
 800c764:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	4a21      	ldr	r2, [pc, #132]	@ (800c7f0 <TIM_ResetCallback+0xb8>)
 800c76c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	4a20      	ldr	r2, [pc, #128]	@ (800c7f4 <TIM_ResetCallback+0xbc>)
 800c774:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	4a1f      	ldr	r2, [pc, #124]	@ (800c7f8 <TIM_ResetCallback+0xc0>)
 800c77c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4a1e      	ldr	r2, [pc, #120]	@ (800c7fc <TIM_ResetCallback+0xc4>)
 800c784:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4a1d      	ldr	r2, [pc, #116]	@ (800c800 <TIM_ResetCallback+0xc8>)
 800c78c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	4a1c      	ldr	r2, [pc, #112]	@ (800c804 <TIM_ResetCallback+0xcc>)
 800c794:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4a1b      	ldr	r2, [pc, #108]	@ (800c808 <TIM_ResetCallback+0xd0>)
 800c79c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a1a      	ldr	r2, [pc, #104]	@ (800c80c <TIM_ResetCallback+0xd4>)
 800c7a4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a19      	ldr	r2, [pc, #100]	@ (800c810 <TIM_ResetCallback+0xd8>)
 800c7ac:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4a18      	ldr	r2, [pc, #96]	@ (800c814 <TIM_ResetCallback+0xdc>)
 800c7b4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4a17      	ldr	r2, [pc, #92]	@ (800c818 <TIM_ResetCallback+0xe0>)
 800c7bc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a16      	ldr	r2, [pc, #88]	@ (800c81c <TIM_ResetCallback+0xe4>)
 800c7c4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4a15      	ldr	r2, [pc, #84]	@ (800c820 <TIM_ResetCallback+0xe8>)
 800c7cc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800c7d0:	bf00      	nop
 800c7d2:	370c      	adds	r7, #12
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr
 800c7dc:	08005779 	.word	0x08005779
 800c7e0:	0800ba85 	.word	0x0800ba85
 800c7e4:	0800bafd 	.word	0x0800bafd
 800c7e8:	0800bb11 	.word	0x0800bb11
 800c7ec:	0800baad 	.word	0x0800baad
 800c7f0:	0800bac1 	.word	0x0800bac1
 800c7f4:	0800ba99 	.word	0x0800ba99
 800c7f8:	0800bad5 	.word	0x0800bad5
 800c7fc:	0800bae9 	.word	0x0800bae9
 800c800:	0800bb25 	.word	0x0800bb25
 800c804:	0800ca79 	.word	0x0800ca79
 800c808:	0800ca8d 	.word	0x0800ca8d
 800c80c:	0800caa1 	.word	0x0800caa1
 800c810:	0800cab5 	.word	0x0800cab5
 800c814:	0800cac9 	.word	0x0800cac9
 800c818:	0800cadd 	.word	0x0800cadd
 800c81c:	0800caf1 	.word	0x0800caf1
 800c820:	0800cb05 	.word	0x0800cb05

0800c824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c824:	b480      	push	{r7}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c834:	2b01      	cmp	r3, #1
 800c836:	d101      	bne.n	800c83c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c838:	2302      	movs	r3, #2
 800c83a:	e074      	b.n	800c926 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2201      	movs	r2, #1
 800c840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2202      	movs	r2, #2
 800c848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a34      	ldr	r2, [pc, #208]	@ (800c934 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d009      	beq.n	800c87a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4a33      	ldr	r2, [pc, #204]	@ (800c938 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d004      	beq.n	800c87a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4a31      	ldr	r2, [pc, #196]	@ (800c93c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d108      	bne.n	800c88c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c880:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	685b      	ldr	r3, [r3, #4]
 800c886:	68fa      	ldr	r2, [r7, #12]
 800c888:	4313      	orrs	r3, r2
 800c88a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68fa      	ldr	r2, [r7, #12]
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a21      	ldr	r2, [pc, #132]	@ (800c934 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d022      	beq.n	800c8fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8bc:	d01d      	beq.n	800c8fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a1f      	ldr	r2, [pc, #124]	@ (800c940 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d018      	beq.n	800c8fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c944 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d013      	beq.n	800c8fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a1c      	ldr	r2, [pc, #112]	@ (800c948 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d00e      	beq.n	800c8fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a15      	ldr	r2, [pc, #84]	@ (800c938 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d009      	beq.n	800c8fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a18      	ldr	r2, [pc, #96]	@ (800c94c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d004      	beq.n	800c8fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a11      	ldr	r2, [pc, #68]	@ (800c93c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d10c      	bne.n	800c914 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	68ba      	ldr	r2, [r7, #8]
 800c908:	4313      	orrs	r3, r2
 800c90a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	68ba      	ldr	r2, [r7, #8]
 800c912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2201      	movs	r2, #1
 800c918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2200      	movs	r2, #0
 800c920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c924:	2300      	movs	r3, #0
}
 800c926:	4618      	mov	r0, r3
 800c928:	3714      	adds	r7, #20
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	40012c00 	.word	0x40012c00
 800c938:	40013400 	.word	0x40013400
 800c93c:	40015000 	.word	0x40015000
 800c940:	40000400 	.word	0x40000400
 800c944:	40000800 	.word	0x40000800
 800c948:	40000c00 	.word	0x40000c00
 800c94c:	40014000 	.word	0x40014000

0800c950 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c950:	b480      	push	{r7}
 800c952:	b085      	sub	sp, #20
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c95a:	2300      	movs	r3, #0
 800c95c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c964:	2b01      	cmp	r3, #1
 800c966:	d101      	bne.n	800c96c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c968:	2302      	movs	r3, #2
 800c96a:	e078      	b.n	800ca5e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2201      	movs	r2, #1
 800c970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	68db      	ldr	r3, [r3, #12]
 800c97e:	4313      	orrs	r3, r2
 800c980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	689b      	ldr	r3, [r3, #8]
 800c98c:	4313      	orrs	r3, r2
 800c98e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	4313      	orrs	r3, r2
 800c99c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	695b      	ldr	r3, [r3, #20]
 800c9c4:	4313      	orrs	r3, r2
 800c9c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c9ce:	683b      	ldr	r3, [r7, #0]
 800c9d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	699b      	ldr	r3, [r3, #24]
 800c9e0:	041b      	lsls	r3, r3, #16
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	69db      	ldr	r3, [r3, #28]
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a1c      	ldr	r2, [pc, #112]	@ (800ca6c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d009      	beq.n	800ca12 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4a1b      	ldr	r2, [pc, #108]	@ (800ca70 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d004      	beq.n	800ca12 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a19      	ldr	r2, [pc, #100]	@ (800ca74 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d11c      	bne.n	800ca4c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca1c:	051b      	lsls	r3, r3, #20
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	6a1b      	ldr	r3, [r3, #32]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2200      	movs	r2, #0
 800ca58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ca5c:	2300      	movs	r3, #0
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3714      	adds	r7, #20
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop
 800ca6c:	40012c00 	.word	0x40012c00
 800ca70:	40013400 	.word	0x40013400
 800ca74:	40015000 	.word	0x40015000

0800ca78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b083      	sub	sp, #12
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca80:	bf00      	nop
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr

0800ca8c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ca8c:	b480      	push	{r7}
 800ca8e:	b083      	sub	sp, #12
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800ca94:	bf00      	nop
 800ca96:	370c      	adds	r7, #12
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9e:	4770      	bx	lr

0800caa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800caa8:	bf00      	nop
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cabc:	bf00      	nop
 800cabe:	370c      	adds	r7, #12
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cad0:	bf00      	nop
 800cad2:	370c      	adds	r7, #12
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr

0800cadc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cae4:	bf00      	nop
 800cae6:	370c      	adds	r7, #12
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800caf8:	bf00      	nop
 800cafa:	370c      	adds	r7, #12
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr

0800cb04 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cb0c:	bf00      	nop
 800cb0e:	370c      	adds	r7, #12
 800cb10:	46bd      	mov	sp, r7
 800cb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb16:	4770      	bx	lr

0800cb18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d101      	bne.n	800cb2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb26:	2301      	movs	r3, #1
 800cb28:	e050      	b.n	800cbcc <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d114      	bne.n	800cb5e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2200      	movs	r2, #0
 800cb38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 fddb 	bl	800d6f8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d103      	bne.n	800cb54 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a21      	ldr	r2, [pc, #132]	@ (800cbd4 <HAL_UART_Init+0xbc>)
 800cb50:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2224      	movs	r2, #36	@ 0x24
 800cb62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f022 0201 	bic.w	r2, r2, #1
 800cb74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d002      	beq.n	800cb84 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f001 f908 	bl	800dd94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f000 fe09 	bl	800d79c <UART_SetConfig>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d101      	bne.n	800cb94 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800cb90:	2301      	movs	r3, #1
 800cb92:	e01b      	b.n	800cbcc <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	685a      	ldr	r2, [r3, #4]
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cba2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	689a      	ldr	r2, [r3, #8]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cbb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f042 0201 	orr.w	r2, r2, #1
 800cbc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f001 f987 	bl	800ded8 <UART_CheckIdleState>
 800cbca:	4603      	mov	r3, r0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3708      	adds	r7, #8
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	08006fed 	.word	0x08006fed

0800cbd8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b087      	sub	sp, #28
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	607a      	str	r2, [r7, #4]
 800cbe4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d109      	bne.n	800cc04 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cbf6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800cc00:	2301      	movs	r3, #1
 800cc02:	e09c      	b.n	800cd3e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc0a:	2b20      	cmp	r3, #32
 800cc0c:	d16c      	bne.n	800cce8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800cc0e:	7afb      	ldrb	r3, [r7, #11]
 800cc10:	2b0c      	cmp	r3, #12
 800cc12:	d85e      	bhi.n	800ccd2 <HAL_UART_RegisterCallback+0xfa>
 800cc14:	a201      	add	r2, pc, #4	@ (adr r2, 800cc1c <HAL_UART_RegisterCallback+0x44>)
 800cc16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc1a:	bf00      	nop
 800cc1c:	0800cc51 	.word	0x0800cc51
 800cc20:	0800cc5b 	.word	0x0800cc5b
 800cc24:	0800cc65 	.word	0x0800cc65
 800cc28:	0800cc6f 	.word	0x0800cc6f
 800cc2c:	0800cc79 	.word	0x0800cc79
 800cc30:	0800cc83 	.word	0x0800cc83
 800cc34:	0800cc8d 	.word	0x0800cc8d
 800cc38:	0800cc97 	.word	0x0800cc97
 800cc3c:	0800cca1 	.word	0x0800cca1
 800cc40:	0800ccab 	.word	0x0800ccab
 800cc44:	0800ccb5 	.word	0x0800ccb5
 800cc48:	0800ccbf 	.word	0x0800ccbf
 800cc4c:	0800ccc9 	.word	0x0800ccc9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	687a      	ldr	r2, [r7, #4]
 800cc54:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800cc58:	e070      	b.n	800cd3c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800cc62:	e06b      	b.n	800cd3c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800cc6c:	e066      	b.n	800cd3c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800cc76:	e061      	b.n	800cd3c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	687a      	ldr	r2, [r7, #4]
 800cc7c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800cc80:	e05c      	b.n	800cd3c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800cc8a:	e057      	b.n	800cd3c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800cc94:	e052      	b.n	800cd3c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800cc9e:	e04d      	b.n	800cd3c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	687a      	ldr	r2, [r7, #4]
 800cca4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800cca8:	e048      	b.n	800cd3c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800ccb2:	e043      	b.n	800cd3c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800ccbc:	e03e      	b.n	800cd3c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800ccc6:	e039      	b.n	800cd3c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800ccd0:	e034      	b.n	800cd3c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccd8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800cce2:	2301      	movs	r3, #1
 800cce4:	75fb      	strb	r3, [r7, #23]
        break;
 800cce6:	e029      	b.n	800cd3c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d11a      	bne.n	800cd28 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800ccf2:	7afb      	ldrb	r3, [r7, #11]
 800ccf4:	2b0b      	cmp	r3, #11
 800ccf6:	d002      	beq.n	800ccfe <HAL_UART_RegisterCallback+0x126>
 800ccf8:	2b0c      	cmp	r3, #12
 800ccfa:	d005      	beq.n	800cd08 <HAL_UART_RegisterCallback+0x130>
 800ccfc:	e009      	b.n	800cd12 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800cd06:	e019      	b.n	800cd3c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800cd10:	e014      	b.n	800cd3c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd18:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800cd22:	2301      	movs	r3, #1
 800cd24:	75fb      	strb	r3, [r7, #23]
        break;
 800cd26:	e009      	b.n	800cd3c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800cd3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	371c      	adds	r7, #28
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr
 800cd4a:	bf00      	nop

0800cd4c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b08a      	sub	sp, #40	@ 0x28
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	4613      	mov	r3, r2
 800cd58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd60:	2b20      	cmp	r3, #32
 800cd62:	d167      	bne.n	800ce34 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d002      	beq.n	800cd70 <HAL_UART_Transmit_DMA+0x24>
 800cd6a:	88fb      	ldrh	r3, [r7, #6]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d101      	bne.n	800cd74 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800cd70:	2301      	movs	r3, #1
 800cd72:	e060      	b.n	800ce36 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	68ba      	ldr	r2, [r7, #8]
 800cd78:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	88fa      	ldrh	r2, [r7, #6]
 800cd7e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	88fa      	ldrh	r2, [r7, #6]
 800cd86:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2221      	movs	r2, #33	@ 0x21
 800cd96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d028      	beq.n	800cdf4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cda6:	4a26      	ldr	r2, [pc, #152]	@ (800ce40 <HAL_UART_Transmit_DMA+0xf4>)
 800cda8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cdae:	4a25      	ldr	r2, [pc, #148]	@ (800ce44 <HAL_UART_Transmit_DMA+0xf8>)
 800cdb0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cdb6:	4a24      	ldr	r2, [pc, #144]	@ (800ce48 <HAL_UART_Transmit_DMA+0xfc>)
 800cdb8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdca:	4619      	mov	r1, r3
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	3328      	adds	r3, #40	@ 0x28
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	88fb      	ldrh	r3, [r7, #6]
 800cdd6:	f7fc f933 	bl	8009040 <HAL_DMA_Start_IT>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d009      	beq.n	800cdf4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2210      	movs	r2, #16
 800cde4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	2220      	movs	r2, #32
 800cdec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	e020      	b.n	800ce36 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2240      	movs	r2, #64	@ 0x40
 800cdfa:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	3308      	adds	r3, #8
 800ce02:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	e853 3f00 	ldrex	r3, [r3]
 800ce0a:	613b      	str	r3, [r7, #16]
   return(result);
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce12:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	3308      	adds	r3, #8
 800ce1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce1c:	623a      	str	r2, [r7, #32]
 800ce1e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce20:	69f9      	ldr	r1, [r7, #28]
 800ce22:	6a3a      	ldr	r2, [r7, #32]
 800ce24:	e841 2300 	strex	r3, r2, [r1]
 800ce28:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce2a:	69bb      	ldr	r3, [r7, #24]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d1e5      	bne.n	800cdfc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ce30:	2300      	movs	r3, #0
 800ce32:	e000      	b.n	800ce36 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ce34:	2302      	movs	r3, #2
  }
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3728      	adds	r7, #40	@ 0x28
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	0800e3a3 	.word	0x0800e3a3
 800ce44:	0800e441 	.word	0x0800e441
 800ce48:	0800e5db 	.word	0x0800e5db

0800ce4c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b08a      	sub	sp, #40	@ 0x28
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	60f8      	str	r0, [r7, #12]
 800ce54:	60b9      	str	r1, [r7, #8]
 800ce56:	4613      	mov	r3, r2
 800ce58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ce60:	2b20      	cmp	r3, #32
 800ce62:	d137      	bne.n	800ced4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d002      	beq.n	800ce70 <HAL_UART_Receive_DMA+0x24>
 800ce6a:	88fb      	ldrh	r3, [r7, #6]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d101      	bne.n	800ce74 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ce70:	2301      	movs	r3, #1
 800ce72:	e030      	b.n	800ced6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2200      	movs	r2, #0
 800ce78:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4a18      	ldr	r2, [pc, #96]	@ (800cee0 <HAL_UART_Receive_DMA+0x94>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d01f      	beq.n	800cec4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d018      	beq.n	800cec4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	e853 3f00 	ldrex	r3, [r3]
 800ce9e:	613b      	str	r3, [r7, #16]
   return(result);
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cea6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	461a      	mov	r2, r3
 800ceae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb0:	623b      	str	r3, [r7, #32]
 800ceb2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb4:	69f9      	ldr	r1, [r7, #28]
 800ceb6:	6a3a      	ldr	r2, [r7, #32]
 800ceb8:	e841 2300 	strex	r3, r2, [r1]
 800cebc:	61bb      	str	r3, [r7, #24]
   return(result);
 800cebe:	69bb      	ldr	r3, [r7, #24]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1e6      	bne.n	800ce92 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cec4:	88fb      	ldrh	r3, [r7, #6]
 800cec6:	461a      	mov	r2, r3
 800cec8:	68b9      	ldr	r1, [r7, #8]
 800ceca:	68f8      	ldr	r0, [r7, #12]
 800cecc:	f001 f91c 	bl	800e108 <UART_Start_Receive_DMA>
 800ced0:	4603      	mov	r3, r0
 800ced2:	e000      	b.n	800ced6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ced4:	2302      	movs	r3, #2
  }
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3728      	adds	r7, #40	@ 0x28
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	bf00      	nop
 800cee0:	40008000 	.word	0x40008000

0800cee4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b0ba      	sub	sp, #232	@ 0xe8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	69db      	ldr	r3, [r3, #28]
 800cef2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	689b      	ldr	r3, [r3, #8]
 800cf06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cf0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800cf0e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800cf12:	4013      	ands	r3, r2
 800cf14:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800cf18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d11b      	bne.n	800cf58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cf20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf24:	f003 0320 	and.w	r3, r3, #32
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d015      	beq.n	800cf58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cf2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf30:	f003 0320 	and.w	r3, r3, #32
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d105      	bne.n	800cf44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cf38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d009      	beq.n	800cf58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f000 8312 	beq.w	800d572 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	4798      	blx	r3
      }
      return;
 800cf56:	e30c      	b.n	800d572 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cf58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	f000 8129 	beq.w	800d1b4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cf62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800cf66:	4b90      	ldr	r3, [pc, #576]	@ (800d1a8 <HAL_UART_IRQHandler+0x2c4>)
 800cf68:	4013      	ands	r3, r2
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d106      	bne.n	800cf7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cf6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800cf72:	4b8e      	ldr	r3, [pc, #568]	@ (800d1ac <HAL_UART_IRQHandler+0x2c8>)
 800cf74:	4013      	ands	r3, r2
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	f000 811c 	beq.w	800d1b4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cf7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf80:	f003 0301 	and.w	r3, r3, #1
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d011      	beq.n	800cfac <HAL_UART_IRQHandler+0xc8>
 800cf88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d00b      	beq.n	800cfac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfa2:	f043 0201 	orr.w	r2, r3, #1
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cfac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfb0:	f003 0302 	and.w	r3, r3, #2
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d011      	beq.n	800cfdc <HAL_UART_IRQHandler+0xf8>
 800cfb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cfbc:	f003 0301 	and.w	r3, r3, #1
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d00b      	beq.n	800cfdc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	2202      	movs	r2, #2
 800cfca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cfd2:	f043 0204 	orr.w	r2, r3, #4
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cfdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cfe0:	f003 0304 	and.w	r3, r3, #4
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d011      	beq.n	800d00c <HAL_UART_IRQHandler+0x128>
 800cfe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cfec:	f003 0301 	and.w	r3, r3, #1
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d00b      	beq.n	800d00c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	2204      	movs	r2, #4
 800cffa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d002:	f043 0202 	orr.w	r2, r3, #2
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d00c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d010:	f003 0308 	and.w	r3, r3, #8
 800d014:	2b00      	cmp	r3, #0
 800d016:	d017      	beq.n	800d048 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d01c:	f003 0320 	and.w	r3, r3, #32
 800d020:	2b00      	cmp	r3, #0
 800d022:	d105      	bne.n	800d030 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d024:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d028:	4b5f      	ldr	r3, [pc, #380]	@ (800d1a8 <HAL_UART_IRQHandler+0x2c4>)
 800d02a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d00b      	beq.n	800d048 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2208      	movs	r2, #8
 800d036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d03e:	f043 0208 	orr.w	r2, r3, #8
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d04c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d050:	2b00      	cmp	r3, #0
 800d052:	d012      	beq.n	800d07a <HAL_UART_IRQHandler+0x196>
 800d054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d058:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d00c      	beq.n	800d07a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d068:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d070:	f043 0220 	orr.w	r2, r3, #32
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d080:	2b00      	cmp	r3, #0
 800d082:	f000 8278 	beq.w	800d576 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d08a:	f003 0320 	and.w	r3, r3, #32
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d013      	beq.n	800d0ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d096:	f003 0320 	and.w	r3, r3, #32
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d105      	bne.n	800d0aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d09e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d007      	beq.n	800d0ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d003      	beq.n	800d0ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d0c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	689b      	ldr	r3, [r3, #8]
 800d0ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0ce:	2b40      	cmp	r3, #64	@ 0x40
 800d0d0:	d005      	beq.n	800d0de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d0d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d0d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d058      	beq.n	800d190 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f001 f8f9 	bl	800e2d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0ee:	2b40      	cmp	r3, #64	@ 0x40
 800d0f0:	d148      	bne.n	800d184 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	3308      	adds	r3, #8
 800d0f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d100:	e853 3f00 	ldrex	r3, [r3]
 800d104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d108:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d10c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d110:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	3308      	adds	r3, #8
 800d11a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d11e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d126:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d12a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d12e:	e841 2300 	strex	r3, r2, [r1]
 800d132:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d1d9      	bne.n	800d0f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d144:	2b00      	cmp	r3, #0
 800d146:	d017      	beq.n	800d178 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d14e:	4a18      	ldr	r2, [pc, #96]	@ (800d1b0 <HAL_UART_IRQHandler+0x2cc>)
 800d150:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d158:	4618      	mov	r0, r3
 800d15a:	f7fc f845 	bl	80091e8 <HAL_DMA_Abort_IT>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d01f      	beq.n	800d1a4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800d172:	4610      	mov	r0, r2
 800d174:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d176:	e015      	b.n	800d1a4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d182:	e00f      	b.n	800d1a4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d18a:	6878      	ldr	r0, [r7, #4]
 800d18c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d18e:	e009      	b.n	800d1a4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2200      	movs	r2, #0
 800d19e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800d1a2:	e1e8      	b.n	800d576 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1a4:	bf00      	nop
    return;
 800d1a6:	e1e6      	b.n	800d576 <HAL_UART_IRQHandler+0x692>
 800d1a8:	10000001 	.word	0x10000001
 800d1ac:	04000120 	.word	0x04000120
 800d1b0:	0800e65f 	.word	0x0800e65f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	f040 8176 	bne.w	800d4aa <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d1be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d1c2:	f003 0310 	and.w	r3, r3, #16
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	f000 816f 	beq.w	800d4aa <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d1cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1d0:	f003 0310 	and.w	r3, r3, #16
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	f000 8168 	beq.w	800d4aa <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	2210      	movs	r2, #16
 800d1e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1ec:	2b40      	cmp	r3, #64	@ 0x40
 800d1ee:	f040 80dc 	bne.w	800d3aa <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	685b      	ldr	r3, [r3, #4]
 800d1fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d200:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d204:	2b00      	cmp	r3, #0
 800d206:	f000 80b1 	beq.w	800d36c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d210:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d214:	429a      	cmp	r2, r3
 800d216:	f080 80a9 	bcs.w	800d36c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d220:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f003 0320 	and.w	r3, r3, #32
 800d232:	2b00      	cmp	r3, #0
 800d234:	f040 8087 	bne.w	800d346 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d240:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d244:	e853 3f00 	ldrex	r3, [r3]
 800d248:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d24c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d254:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	461a      	mov	r2, r3
 800d25e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d262:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d266:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d26a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d26e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d272:	e841 2300 	strex	r3, r2, [r1]
 800d276:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d27a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d1da      	bne.n	800d238 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	3308      	adds	r3, #8
 800d288:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d28a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d28c:	e853 3f00 	ldrex	r3, [r3]
 800d290:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d292:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d294:	f023 0301 	bic.w	r3, r3, #1
 800d298:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	3308      	adds	r3, #8
 800d2a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d2a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d2aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d2ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d2b2:	e841 2300 	strex	r3, r2, [r1]
 800d2b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d2b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d1e1      	bne.n	800d282 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	3308      	adds	r3, #8
 800d2c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d2c8:	e853 3f00 	ldrex	r3, [r3]
 800d2cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d2ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d2d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	3308      	adds	r3, #8
 800d2de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d2e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d2e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d2e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d2ea:	e841 2300 	strex	r3, r2, [r1]
 800d2ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d2f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d1e3      	bne.n	800d2be <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2220      	movs	r2, #32
 800d2fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2200      	movs	r2, #0
 800d302:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d30a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d30c:	e853 3f00 	ldrex	r3, [r3]
 800d310:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d312:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d314:	f023 0310 	bic.w	r3, r3, #16
 800d318:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	461a      	mov	r2, r3
 800d322:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d326:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d328:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d32a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d32c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d32e:	e841 2300 	strex	r3, r2, [r1]
 800d332:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d336:	2b00      	cmp	r3, #0
 800d338:	d1e4      	bne.n	800d304 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d340:	4618      	mov	r0, r3
 800d342:	f7fb fef8 	bl	8009136 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2202      	movs	r2, #2
 800d34a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d352:	687a      	ldr	r2, [r7, #4]
 800d354:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800d35e:	b292      	uxth	r2, r2
 800d360:	1a8a      	subs	r2, r1, r2
 800d362:	b292      	uxth	r2, r2
 800d364:	4611      	mov	r1, r2
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800d36a:	e106      	b.n	800d57a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800d372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d376:	429a      	cmp	r2, r3
 800d378:	f040 80ff 	bne.w	800d57a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f003 0320 	and.w	r3, r3, #32
 800d38a:	2b20      	cmp	r3, #32
 800d38c:	f040 80f5 	bne.w	800d57a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2202      	movs	r2, #2
 800d394:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800d3a2:	4611      	mov	r1, r2
 800d3a4:	6878      	ldr	r0, [r7, #4]
 800d3a6:	4798      	blx	r3
      return;
 800d3a8:	e0e7      	b.n	800d57a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	1ad3      	subs	r3, r2, r3
 800d3ba:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	f000 80d9 	beq.w	800d57e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800d3cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f000 80d4 	beq.w	800d57e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3de:	e853 3f00 	ldrex	r3, [r3]
 800d3e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d3e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d3ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d3f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d3fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d400:	e841 2300 	strex	r3, r2, [r1]
 800d404:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d1e4      	bne.n	800d3d6 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	3308      	adds	r3, #8
 800d412:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d416:	e853 3f00 	ldrex	r3, [r3]
 800d41a:	623b      	str	r3, [r7, #32]
   return(result);
 800d41c:	6a3b      	ldr	r3, [r7, #32]
 800d41e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d422:	f023 0301 	bic.w	r3, r3, #1
 800d426:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	3308      	adds	r3, #8
 800d430:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d434:	633a      	str	r2, [r7, #48]	@ 0x30
 800d436:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d438:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d43a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d43c:	e841 2300 	strex	r3, r2, [r1]
 800d440:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d444:	2b00      	cmp	r3, #0
 800d446:	d1e1      	bne.n	800d40c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2220      	movs	r2, #32
 800d44c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2200      	movs	r2, #0
 800d454:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2200      	movs	r2, #0
 800d45a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	e853 3f00 	ldrex	r3, [r3]
 800d468:	60fb      	str	r3, [r7, #12]
   return(result);
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f023 0310 	bic.w	r3, r3, #16
 800d470:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	461a      	mov	r2, r3
 800d47a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d47e:	61fb      	str	r3, [r7, #28]
 800d480:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d482:	69b9      	ldr	r1, [r7, #24]
 800d484:	69fa      	ldr	r2, [r7, #28]
 800d486:	e841 2300 	strex	r3, r2, [r1]
 800d48a:	617b      	str	r3, [r7, #20]
   return(result);
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d1e4      	bne.n	800d45c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2202      	movs	r2, #2
 800d496:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d49e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800d4a2:	4611      	mov	r1, r2
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d4a8:	e069      	b.n	800d57e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d4aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d010      	beq.n	800d4d8 <HAL_UART_IRQHandler+0x5f4>
 800d4b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d4ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d00a      	beq.n	800d4d8 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800d4ca:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4d6:	e055      	b.n	800d584 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d4d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d014      	beq.n	800d50e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d4e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d105      	bne.n	800d4fc <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d4f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d4f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d008      	beq.n	800d50e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d500:	2b00      	cmp	r3, #0
 800d502:	d03e      	beq.n	800d582 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	4798      	blx	r3
    }
    return;
 800d50c:	e039      	b.n	800d582 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d50e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d516:	2b00      	cmp	r3, #0
 800d518:	d009      	beq.n	800d52e <HAL_UART_IRQHandler+0x64a>
 800d51a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d51e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d522:	2b00      	cmp	r3, #0
 800d524:	d003      	beq.n	800d52e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f001 f8ad 	bl	800e686 <UART_EndTransmit_IT>
    return;
 800d52c:	e02a      	b.n	800d584 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d52e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d532:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00b      	beq.n	800d552 <HAL_UART_IRQHandler+0x66e>
 800d53a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d53e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d542:	2b00      	cmp	r3, #0
 800d544:	d005      	beq.n	800d552 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d550:	e018      	b.n	800d584 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d556:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d012      	beq.n	800d584 <HAL_UART_IRQHandler+0x6a0>
 800d55e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d562:	2b00      	cmp	r3, #0
 800d564:	da0e      	bge.n	800d584 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d570:	e008      	b.n	800d584 <HAL_UART_IRQHandler+0x6a0>
      return;
 800d572:	bf00      	nop
 800d574:	e006      	b.n	800d584 <HAL_UART_IRQHandler+0x6a0>
    return;
 800d576:	bf00      	nop
 800d578:	e004      	b.n	800d584 <HAL_UART_IRQHandler+0x6a0>
      return;
 800d57a:	bf00      	nop
 800d57c:	e002      	b.n	800d584 <HAL_UART_IRQHandler+0x6a0>
      return;
 800d57e:	bf00      	nop
 800d580:	e000      	b.n	800d584 <HAL_UART_IRQHandler+0x6a0>
    return;
 800d582:	bf00      	nop
  }
}
 800d584:	37e8      	adds	r7, #232	@ 0xe8
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop

0800d58c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d594:	bf00      	nop
 800d596:	370c      	adds	r7, #12
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr

0800d5a0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b083      	sub	sp, #12
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d5a8:	bf00      	nop
 800d5aa:	370c      	adds	r7, #12
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr

0800d5b4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d5bc:	bf00      	nop
 800d5be:	370c      	adds	r7, #12
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d5d0:	bf00      	nop
 800d5d2:	370c      	adds	r7, #12
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b083      	sub	sp, #12
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800d5e4:	bf00      	nop
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800d5f8:	bf00      	nop
 800d5fa:	370c      	adds	r7, #12
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d60c:	bf00      	nop
 800d60e:	370c      	adds	r7, #12
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr

0800d618 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d618:	b480      	push	{r7}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	460b      	mov	r3, r1
 800d622:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d624:	bf00      	nop
 800d626:	370c      	adds	r7, #12
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800d630:	b480      	push	{r7}
 800d632:	b083      	sub	sp, #12
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	4a09      	ldr	r2, [pc, #36]	@ (800d664 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d009      	beq.n	800d658 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	695b      	ldr	r3, [r3, #20]
 800d64a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	683a      	ldr	r2, [r7, #0]
 800d654:	430a      	orrs	r2, r1
 800d656:	615a      	str	r2, [r3, #20]
  }
}
 800d658:	bf00      	nop
 800d65a:	370c      	adds	r7, #12
 800d65c:	46bd      	mov	sp, r7
 800d65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d662:	4770      	bx	lr
 800d664:	40008000 	.word	0x40008000

0800d668 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4a18      	ldr	r2, [pc, #96]	@ (800d6d8 <HAL_UART_EnableReceiverTimeout+0x70>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d027      	beq.n	800d6ca <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d680:	2b20      	cmp	r3, #32
 800d682:	d120      	bne.n	800d6c6 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d68a:	2b01      	cmp	r3, #1
 800d68c:	d101      	bne.n	800d692 <HAL_UART_EnableReceiverTimeout+0x2a>
 800d68e:	2302      	movs	r3, #2
 800d690:	e01c      	b.n	800d6cc <HAL_UART_EnableReceiverTimeout+0x64>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2201      	movs	r2, #1
 800d696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2224      	movs	r2, #36	@ 0x24
 800d69e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	685a      	ldr	r2, [r3, #4]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800d6b0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2220      	movs	r2, #32
 800d6b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	e002      	b.n	800d6cc <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800d6c6:	2302      	movs	r3, #2
 800d6c8:	e000      	b.n	800d6cc <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800d6ca:	2301      	movs	r3, #1
  }
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	370c      	adds	r7, #12
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr
 800d6d8:	40008000 	.word	0x40008000

0800d6dc <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	370c      	adds	r7, #12
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr
	...

0800d6f8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	4a1a      	ldr	r2, [pc, #104]	@ (800d76c <UART_InitCallbacksToDefault+0x74>)
 800d704:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	4a19      	ldr	r2, [pc, #100]	@ (800d770 <UART_InitCallbacksToDefault+0x78>)
 800d70c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	4a18      	ldr	r2, [pc, #96]	@ (800d774 <UART_InitCallbacksToDefault+0x7c>)
 800d714:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	4a17      	ldr	r2, [pc, #92]	@ (800d778 <UART_InitCallbacksToDefault+0x80>)
 800d71c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	4a16      	ldr	r2, [pc, #88]	@ (800d77c <UART_InitCallbacksToDefault+0x84>)
 800d724:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	4a15      	ldr	r2, [pc, #84]	@ (800d780 <UART_InitCallbacksToDefault+0x88>)
 800d72c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	4a14      	ldr	r2, [pc, #80]	@ (800d784 <UART_InitCallbacksToDefault+0x8c>)
 800d734:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	4a13      	ldr	r2, [pc, #76]	@ (800d788 <UART_InitCallbacksToDefault+0x90>)
 800d73c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	4a12      	ldr	r2, [pc, #72]	@ (800d78c <UART_InitCallbacksToDefault+0x94>)
 800d744:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	4a11      	ldr	r2, [pc, #68]	@ (800d790 <UART_InitCallbacksToDefault+0x98>)
 800d74c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	4a10      	ldr	r2, [pc, #64]	@ (800d794 <UART_InitCallbacksToDefault+0x9c>)
 800d754:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	4a0f      	ldr	r2, [pc, #60]	@ (800d798 <UART_InitCallbacksToDefault+0xa0>)
 800d75c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800d760:	bf00      	nop
 800d762:	370c      	adds	r7, #12
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr
 800d76c:	0800d5a1 	.word	0x0800d5a1
 800d770:	0800d58d 	.word	0x0800d58d
 800d774:	0800d5b5 	.word	0x0800d5b5
 800d778:	08005765 	.word	0x08005765
 800d77c:	0800d5c9 	.word	0x0800d5c9
 800d780:	0800d5dd 	.word	0x0800d5dd
 800d784:	0800d5f1 	.word	0x0800d5f1
 800d788:	0800d605 	.word	0x0800d605
 800d78c:	0800e6e1 	.word	0x0800e6e1
 800d790:	0800e6f5 	.word	0x0800e6f5
 800d794:	0800e709 	.word	0x0800e709
 800d798:	0800d619 	.word	0x0800d619

0800d79c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d79c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7a0:	b08c      	sub	sp, #48	@ 0x30
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	689a      	ldr	r2, [r3, #8]
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	691b      	ldr	r3, [r3, #16]
 800d7b4:	431a      	orrs	r2, r3
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	695b      	ldr	r3, [r3, #20]
 800d7ba:	431a      	orrs	r2, r3
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	69db      	ldr	r3, [r3, #28]
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	681a      	ldr	r2, [r3, #0]
 800d7ca:	4baa      	ldr	r3, [pc, #680]	@ (800da74 <UART_SetConfig+0x2d8>)
 800d7cc:	4013      	ands	r3, r2
 800d7ce:	697a      	ldr	r2, [r7, #20]
 800d7d0:	6812      	ldr	r2, [r2, #0]
 800d7d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d7d4:	430b      	orrs	r3, r1
 800d7d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	68da      	ldr	r2, [r3, #12]
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	430a      	orrs	r2, r1
 800d7ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	699b      	ldr	r3, [r3, #24]
 800d7f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a9f      	ldr	r2, [pc, #636]	@ (800da78 <UART_SetConfig+0x2dc>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d004      	beq.n	800d808 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	6a1b      	ldr	r3, [r3, #32]
 800d802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d804:	4313      	orrs	r3, r2
 800d806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	689b      	ldr	r3, [r3, #8]
 800d80e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d812:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d816:	697a      	ldr	r2, [r7, #20]
 800d818:	6812      	ldr	r2, [r2, #0]
 800d81a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d81c:	430b      	orrs	r3, r1
 800d81e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d826:	f023 010f 	bic.w	r1, r3, #15
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	430a      	orrs	r2, r1
 800d834:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	4a90      	ldr	r2, [pc, #576]	@ (800da7c <UART_SetConfig+0x2e0>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d125      	bne.n	800d88c <UART_SetConfig+0xf0>
 800d840:	4b8f      	ldr	r3, [pc, #572]	@ (800da80 <UART_SetConfig+0x2e4>)
 800d842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d846:	f003 0303 	and.w	r3, r3, #3
 800d84a:	2b03      	cmp	r3, #3
 800d84c:	d81a      	bhi.n	800d884 <UART_SetConfig+0xe8>
 800d84e:	a201      	add	r2, pc, #4	@ (adr r2, 800d854 <UART_SetConfig+0xb8>)
 800d850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d854:	0800d865 	.word	0x0800d865
 800d858:	0800d875 	.word	0x0800d875
 800d85c:	0800d86d 	.word	0x0800d86d
 800d860:	0800d87d 	.word	0x0800d87d
 800d864:	2301      	movs	r3, #1
 800d866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d86a:	e116      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d86c:	2302      	movs	r3, #2
 800d86e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d872:	e112      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d874:	2304      	movs	r3, #4
 800d876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d87a:	e10e      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d87c:	2308      	movs	r3, #8
 800d87e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d882:	e10a      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d884:	2310      	movs	r3, #16
 800d886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d88a:	e106      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4a7c      	ldr	r2, [pc, #496]	@ (800da84 <UART_SetConfig+0x2e8>)
 800d892:	4293      	cmp	r3, r2
 800d894:	d138      	bne.n	800d908 <UART_SetConfig+0x16c>
 800d896:	4b7a      	ldr	r3, [pc, #488]	@ (800da80 <UART_SetConfig+0x2e4>)
 800d898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d89c:	f003 030c 	and.w	r3, r3, #12
 800d8a0:	2b0c      	cmp	r3, #12
 800d8a2:	d82d      	bhi.n	800d900 <UART_SetConfig+0x164>
 800d8a4:	a201      	add	r2, pc, #4	@ (adr r2, 800d8ac <UART_SetConfig+0x110>)
 800d8a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8aa:	bf00      	nop
 800d8ac:	0800d8e1 	.word	0x0800d8e1
 800d8b0:	0800d901 	.word	0x0800d901
 800d8b4:	0800d901 	.word	0x0800d901
 800d8b8:	0800d901 	.word	0x0800d901
 800d8bc:	0800d8f1 	.word	0x0800d8f1
 800d8c0:	0800d901 	.word	0x0800d901
 800d8c4:	0800d901 	.word	0x0800d901
 800d8c8:	0800d901 	.word	0x0800d901
 800d8cc:	0800d8e9 	.word	0x0800d8e9
 800d8d0:	0800d901 	.word	0x0800d901
 800d8d4:	0800d901 	.word	0x0800d901
 800d8d8:	0800d901 	.word	0x0800d901
 800d8dc:	0800d8f9 	.word	0x0800d8f9
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d8e6:	e0d8      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d8e8:	2302      	movs	r3, #2
 800d8ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d8ee:	e0d4      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d8f0:	2304      	movs	r3, #4
 800d8f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d8f6:	e0d0      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d8f8:	2308      	movs	r3, #8
 800d8fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d8fe:	e0cc      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d900:	2310      	movs	r3, #16
 800d902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d906:	e0c8      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	4a5e      	ldr	r2, [pc, #376]	@ (800da88 <UART_SetConfig+0x2ec>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d125      	bne.n	800d95e <UART_SetConfig+0x1c2>
 800d912:	4b5b      	ldr	r3, [pc, #364]	@ (800da80 <UART_SetConfig+0x2e4>)
 800d914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d918:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800d91c:	2b30      	cmp	r3, #48	@ 0x30
 800d91e:	d016      	beq.n	800d94e <UART_SetConfig+0x1b2>
 800d920:	2b30      	cmp	r3, #48	@ 0x30
 800d922:	d818      	bhi.n	800d956 <UART_SetConfig+0x1ba>
 800d924:	2b20      	cmp	r3, #32
 800d926:	d00a      	beq.n	800d93e <UART_SetConfig+0x1a2>
 800d928:	2b20      	cmp	r3, #32
 800d92a:	d814      	bhi.n	800d956 <UART_SetConfig+0x1ba>
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d002      	beq.n	800d936 <UART_SetConfig+0x19a>
 800d930:	2b10      	cmp	r3, #16
 800d932:	d008      	beq.n	800d946 <UART_SetConfig+0x1aa>
 800d934:	e00f      	b.n	800d956 <UART_SetConfig+0x1ba>
 800d936:	2300      	movs	r3, #0
 800d938:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d93c:	e0ad      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d93e:	2302      	movs	r3, #2
 800d940:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d944:	e0a9      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d946:	2304      	movs	r3, #4
 800d948:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d94c:	e0a5      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d94e:	2308      	movs	r3, #8
 800d950:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d954:	e0a1      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d956:	2310      	movs	r3, #16
 800d958:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d95c:	e09d      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	4a4a      	ldr	r2, [pc, #296]	@ (800da8c <UART_SetConfig+0x2f0>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d125      	bne.n	800d9b4 <UART_SetConfig+0x218>
 800d968:	4b45      	ldr	r3, [pc, #276]	@ (800da80 <UART_SetConfig+0x2e4>)
 800d96a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d96e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d972:	2bc0      	cmp	r3, #192	@ 0xc0
 800d974:	d016      	beq.n	800d9a4 <UART_SetConfig+0x208>
 800d976:	2bc0      	cmp	r3, #192	@ 0xc0
 800d978:	d818      	bhi.n	800d9ac <UART_SetConfig+0x210>
 800d97a:	2b80      	cmp	r3, #128	@ 0x80
 800d97c:	d00a      	beq.n	800d994 <UART_SetConfig+0x1f8>
 800d97e:	2b80      	cmp	r3, #128	@ 0x80
 800d980:	d814      	bhi.n	800d9ac <UART_SetConfig+0x210>
 800d982:	2b00      	cmp	r3, #0
 800d984:	d002      	beq.n	800d98c <UART_SetConfig+0x1f0>
 800d986:	2b40      	cmp	r3, #64	@ 0x40
 800d988:	d008      	beq.n	800d99c <UART_SetConfig+0x200>
 800d98a:	e00f      	b.n	800d9ac <UART_SetConfig+0x210>
 800d98c:	2300      	movs	r3, #0
 800d98e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d992:	e082      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d994:	2302      	movs	r3, #2
 800d996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d99a:	e07e      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d99c:	2304      	movs	r3, #4
 800d99e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d9a2:	e07a      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d9a4:	2308      	movs	r3, #8
 800d9a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d9aa:	e076      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d9ac:	2310      	movs	r3, #16
 800d9ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d9b2:	e072      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a35      	ldr	r2, [pc, #212]	@ (800da90 <UART_SetConfig+0x2f4>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d12a      	bne.n	800da14 <UART_SetConfig+0x278>
 800d9be:	4b30      	ldr	r3, [pc, #192]	@ (800da80 <UART_SetConfig+0x2e4>)
 800d9c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d9c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d9c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d9cc:	d01a      	beq.n	800da04 <UART_SetConfig+0x268>
 800d9ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d9d2:	d81b      	bhi.n	800da0c <UART_SetConfig+0x270>
 800d9d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d9d8:	d00c      	beq.n	800d9f4 <UART_SetConfig+0x258>
 800d9da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d9de:	d815      	bhi.n	800da0c <UART_SetConfig+0x270>
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d003      	beq.n	800d9ec <UART_SetConfig+0x250>
 800d9e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d9e8:	d008      	beq.n	800d9fc <UART_SetConfig+0x260>
 800d9ea:	e00f      	b.n	800da0c <UART_SetConfig+0x270>
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d9f2:	e052      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d9f4:	2302      	movs	r3, #2
 800d9f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d9fa:	e04e      	b.n	800da9a <UART_SetConfig+0x2fe>
 800d9fc:	2304      	movs	r3, #4
 800d9fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da02:	e04a      	b.n	800da9a <UART_SetConfig+0x2fe>
 800da04:	2308      	movs	r3, #8
 800da06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da0a:	e046      	b.n	800da9a <UART_SetConfig+0x2fe>
 800da0c:	2310      	movs	r3, #16
 800da0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da12:	e042      	b.n	800da9a <UART_SetConfig+0x2fe>
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	4a17      	ldr	r2, [pc, #92]	@ (800da78 <UART_SetConfig+0x2dc>)
 800da1a:	4293      	cmp	r3, r2
 800da1c:	d13a      	bne.n	800da94 <UART_SetConfig+0x2f8>
 800da1e:	4b18      	ldr	r3, [pc, #96]	@ (800da80 <UART_SetConfig+0x2e4>)
 800da20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800da28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800da2c:	d01a      	beq.n	800da64 <UART_SetConfig+0x2c8>
 800da2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800da32:	d81b      	bhi.n	800da6c <UART_SetConfig+0x2d0>
 800da34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800da38:	d00c      	beq.n	800da54 <UART_SetConfig+0x2b8>
 800da3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800da3e:	d815      	bhi.n	800da6c <UART_SetConfig+0x2d0>
 800da40:	2b00      	cmp	r3, #0
 800da42:	d003      	beq.n	800da4c <UART_SetConfig+0x2b0>
 800da44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da48:	d008      	beq.n	800da5c <UART_SetConfig+0x2c0>
 800da4a:	e00f      	b.n	800da6c <UART_SetConfig+0x2d0>
 800da4c:	2300      	movs	r3, #0
 800da4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da52:	e022      	b.n	800da9a <UART_SetConfig+0x2fe>
 800da54:	2302      	movs	r3, #2
 800da56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da5a:	e01e      	b.n	800da9a <UART_SetConfig+0x2fe>
 800da5c:	2304      	movs	r3, #4
 800da5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da62:	e01a      	b.n	800da9a <UART_SetConfig+0x2fe>
 800da64:	2308      	movs	r3, #8
 800da66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da6a:	e016      	b.n	800da9a <UART_SetConfig+0x2fe>
 800da6c:	2310      	movs	r3, #16
 800da6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800da72:	e012      	b.n	800da9a <UART_SetConfig+0x2fe>
 800da74:	cfff69f3 	.word	0xcfff69f3
 800da78:	40008000 	.word	0x40008000
 800da7c:	40013800 	.word	0x40013800
 800da80:	40021000 	.word	0x40021000
 800da84:	40004400 	.word	0x40004400
 800da88:	40004800 	.word	0x40004800
 800da8c:	40004c00 	.word	0x40004c00
 800da90:	40005000 	.word	0x40005000
 800da94:	2310      	movs	r3, #16
 800da96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4aae      	ldr	r2, [pc, #696]	@ (800dd58 <UART_SetConfig+0x5bc>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	f040 8097 	bne.w	800dbd4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800daa6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800daaa:	2b08      	cmp	r3, #8
 800daac:	d823      	bhi.n	800daf6 <UART_SetConfig+0x35a>
 800daae:	a201      	add	r2, pc, #4	@ (adr r2, 800dab4 <UART_SetConfig+0x318>)
 800dab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab4:	0800dad9 	.word	0x0800dad9
 800dab8:	0800daf7 	.word	0x0800daf7
 800dabc:	0800dae1 	.word	0x0800dae1
 800dac0:	0800daf7 	.word	0x0800daf7
 800dac4:	0800dae7 	.word	0x0800dae7
 800dac8:	0800daf7 	.word	0x0800daf7
 800dacc:	0800daf7 	.word	0x0800daf7
 800dad0:	0800daf7 	.word	0x0800daf7
 800dad4:	0800daef 	.word	0x0800daef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dad8:	f7fc fc76 	bl	800a3c8 <HAL_RCC_GetPCLK1Freq>
 800dadc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dade:	e010      	b.n	800db02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dae0:	4b9e      	ldr	r3, [pc, #632]	@ (800dd5c <UART_SetConfig+0x5c0>)
 800dae2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dae4:	e00d      	b.n	800db02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dae6:	f7fc fc01 	bl	800a2ec <HAL_RCC_GetSysClockFreq>
 800daea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800daec:	e009      	b.n	800db02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800daee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800daf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800daf4:	e005      	b.n	800db02 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800daf6:	2300      	movs	r3, #0
 800daf8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800dafa:	2301      	movs	r3, #1
 800dafc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800db00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800db02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db04:	2b00      	cmp	r3, #0
 800db06:	f000 8130 	beq.w	800dd6a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db0e:	4a94      	ldr	r2, [pc, #592]	@ (800dd60 <UART_SetConfig+0x5c4>)
 800db10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db14:	461a      	mov	r2, r3
 800db16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db18:	fbb3 f3f2 	udiv	r3, r3, r2
 800db1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	685a      	ldr	r2, [r3, #4]
 800db22:	4613      	mov	r3, r2
 800db24:	005b      	lsls	r3, r3, #1
 800db26:	4413      	add	r3, r2
 800db28:	69ba      	ldr	r2, [r7, #24]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d305      	bcc.n	800db3a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800db34:	69ba      	ldr	r2, [r7, #24]
 800db36:	429a      	cmp	r2, r3
 800db38:	d903      	bls.n	800db42 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800db3a:	2301      	movs	r3, #1
 800db3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800db40:	e113      	b.n	800dd6a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db44:	2200      	movs	r2, #0
 800db46:	60bb      	str	r3, [r7, #8]
 800db48:	60fa      	str	r2, [r7, #12]
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db4e:	4a84      	ldr	r2, [pc, #528]	@ (800dd60 <UART_SetConfig+0x5c4>)
 800db50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db54:	b29b      	uxth	r3, r3
 800db56:	2200      	movs	r2, #0
 800db58:	603b      	str	r3, [r7, #0]
 800db5a:	607a      	str	r2, [r7, #4]
 800db5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800db64:	f7f3 f846 	bl	8000bf4 <__aeabi_uldivmod>
 800db68:	4602      	mov	r2, r0
 800db6a:	460b      	mov	r3, r1
 800db6c:	4610      	mov	r0, r2
 800db6e:	4619      	mov	r1, r3
 800db70:	f04f 0200 	mov.w	r2, #0
 800db74:	f04f 0300 	mov.w	r3, #0
 800db78:	020b      	lsls	r3, r1, #8
 800db7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800db7e:	0202      	lsls	r2, r0, #8
 800db80:	6979      	ldr	r1, [r7, #20]
 800db82:	6849      	ldr	r1, [r1, #4]
 800db84:	0849      	lsrs	r1, r1, #1
 800db86:	2000      	movs	r0, #0
 800db88:	460c      	mov	r4, r1
 800db8a:	4605      	mov	r5, r0
 800db8c:	eb12 0804 	adds.w	r8, r2, r4
 800db90:	eb43 0905 	adc.w	r9, r3, r5
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	469a      	mov	sl, r3
 800db9c:	4693      	mov	fp, r2
 800db9e:	4652      	mov	r2, sl
 800dba0:	465b      	mov	r3, fp
 800dba2:	4640      	mov	r0, r8
 800dba4:	4649      	mov	r1, r9
 800dba6:	f7f3 f825 	bl	8000bf4 <__aeabi_uldivmod>
 800dbaa:	4602      	mov	r2, r0
 800dbac:	460b      	mov	r3, r1
 800dbae:	4613      	mov	r3, r2
 800dbb0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dbb2:	6a3b      	ldr	r3, [r7, #32]
 800dbb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dbb8:	d308      	bcc.n	800dbcc <UART_SetConfig+0x430>
 800dbba:	6a3b      	ldr	r3, [r7, #32]
 800dbbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dbc0:	d204      	bcs.n	800dbcc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	6a3a      	ldr	r2, [r7, #32]
 800dbc8:	60da      	str	r2, [r3, #12]
 800dbca:	e0ce      	b.n	800dd6a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800dbcc:	2301      	movs	r3, #1
 800dbce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800dbd2:	e0ca      	b.n	800dd6a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	69db      	ldr	r3, [r3, #28]
 800dbd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dbdc:	d166      	bne.n	800dcac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800dbde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800dbe2:	2b08      	cmp	r3, #8
 800dbe4:	d827      	bhi.n	800dc36 <UART_SetConfig+0x49a>
 800dbe6:	a201      	add	r2, pc, #4	@ (adr r2, 800dbec <UART_SetConfig+0x450>)
 800dbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbec:	0800dc11 	.word	0x0800dc11
 800dbf0:	0800dc19 	.word	0x0800dc19
 800dbf4:	0800dc21 	.word	0x0800dc21
 800dbf8:	0800dc37 	.word	0x0800dc37
 800dbfc:	0800dc27 	.word	0x0800dc27
 800dc00:	0800dc37 	.word	0x0800dc37
 800dc04:	0800dc37 	.word	0x0800dc37
 800dc08:	0800dc37 	.word	0x0800dc37
 800dc0c:	0800dc2f 	.word	0x0800dc2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc10:	f7fc fbda 	bl	800a3c8 <HAL_RCC_GetPCLK1Freq>
 800dc14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dc16:	e014      	b.n	800dc42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc18:	f7fc fbec 	bl	800a3f4 <HAL_RCC_GetPCLK2Freq>
 800dc1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dc1e:	e010      	b.n	800dc42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dc20:	4b4e      	ldr	r3, [pc, #312]	@ (800dd5c <UART_SetConfig+0x5c0>)
 800dc22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dc24:	e00d      	b.n	800dc42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dc26:	f7fc fb61 	bl	800a2ec <HAL_RCC_GetSysClockFreq>
 800dc2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dc2c:	e009      	b.n	800dc42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dc34:	e005      	b.n	800dc42 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800dc36:	2300      	movs	r3, #0
 800dc38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800dc40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	f000 8090 	beq.w	800dd6a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc4e:	4a44      	ldr	r2, [pc, #272]	@ (800dd60 <UART_SetConfig+0x5c4>)
 800dc50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc54:	461a      	mov	r2, r3
 800dc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc58:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc5c:	005a      	lsls	r2, r3, #1
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	085b      	lsrs	r3, r3, #1
 800dc64:	441a      	add	r2, r3
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc70:	6a3b      	ldr	r3, [r7, #32]
 800dc72:	2b0f      	cmp	r3, #15
 800dc74:	d916      	bls.n	800dca4 <UART_SetConfig+0x508>
 800dc76:	6a3b      	ldr	r3, [r7, #32]
 800dc78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc7c:	d212      	bcs.n	800dca4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dc7e:	6a3b      	ldr	r3, [r7, #32]
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	f023 030f 	bic.w	r3, r3, #15
 800dc86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dc88:	6a3b      	ldr	r3, [r7, #32]
 800dc8a:	085b      	lsrs	r3, r3, #1
 800dc8c:	b29b      	uxth	r3, r3
 800dc8e:	f003 0307 	and.w	r3, r3, #7
 800dc92:	b29a      	uxth	r2, r3
 800dc94:	8bfb      	ldrh	r3, [r7, #30]
 800dc96:	4313      	orrs	r3, r2
 800dc98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	8bfa      	ldrh	r2, [r7, #30]
 800dca0:	60da      	str	r2, [r3, #12]
 800dca2:	e062      	b.n	800dd6a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800dca4:	2301      	movs	r3, #1
 800dca6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800dcaa:	e05e      	b.n	800dd6a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dcac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800dcb0:	2b08      	cmp	r3, #8
 800dcb2:	d828      	bhi.n	800dd06 <UART_SetConfig+0x56a>
 800dcb4:	a201      	add	r2, pc, #4	@ (adr r2, 800dcbc <UART_SetConfig+0x520>)
 800dcb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcba:	bf00      	nop
 800dcbc:	0800dce1 	.word	0x0800dce1
 800dcc0:	0800dce9 	.word	0x0800dce9
 800dcc4:	0800dcf1 	.word	0x0800dcf1
 800dcc8:	0800dd07 	.word	0x0800dd07
 800dccc:	0800dcf7 	.word	0x0800dcf7
 800dcd0:	0800dd07 	.word	0x0800dd07
 800dcd4:	0800dd07 	.word	0x0800dd07
 800dcd8:	0800dd07 	.word	0x0800dd07
 800dcdc:	0800dcff 	.word	0x0800dcff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dce0:	f7fc fb72 	bl	800a3c8 <HAL_RCC_GetPCLK1Freq>
 800dce4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dce6:	e014      	b.n	800dd12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dce8:	f7fc fb84 	bl	800a3f4 <HAL_RCC_GetPCLK2Freq>
 800dcec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dcee:	e010      	b.n	800dd12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dcf0:	4b1a      	ldr	r3, [pc, #104]	@ (800dd5c <UART_SetConfig+0x5c0>)
 800dcf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dcf4:	e00d      	b.n	800dd12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dcf6:	f7fc faf9 	bl	800a2ec <HAL_RCC_GetSysClockFreq>
 800dcfa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800dcfc:	e009      	b.n	800dd12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dcfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800dd04:	e005      	b.n	800dd12 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800dd06:	2300      	movs	r3, #0
 800dd08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800dd10:	bf00      	nop
    }

    if (pclk != 0U)
 800dd12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d028      	beq.n	800dd6a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd1c:	4a10      	ldr	r2, [pc, #64]	@ (800dd60 <UART_SetConfig+0x5c4>)
 800dd1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd22:	461a      	mov	r2, r3
 800dd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd26:	fbb3 f2f2 	udiv	r2, r3, r2
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	085b      	lsrs	r3, r3, #1
 800dd30:	441a      	add	r2, r3
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd3c:	6a3b      	ldr	r3, [r7, #32]
 800dd3e:	2b0f      	cmp	r3, #15
 800dd40:	d910      	bls.n	800dd64 <UART_SetConfig+0x5c8>
 800dd42:	6a3b      	ldr	r3, [r7, #32]
 800dd44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd48:	d20c      	bcs.n	800dd64 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dd4a:	6a3b      	ldr	r3, [r7, #32]
 800dd4c:	b29a      	uxth	r2, r3
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	60da      	str	r2, [r3, #12]
 800dd54:	e009      	b.n	800dd6a <UART_SetConfig+0x5ce>
 800dd56:	bf00      	nop
 800dd58:	40008000 	.word	0x40008000
 800dd5c:	00f42400 	.word	0x00f42400
 800dd60:	080101bc 	.word	0x080101bc
      }
      else
      {
        ret = HAL_ERROR;
 800dd64:	2301      	movs	r3, #1
 800dd66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	2201      	movs	r2, #1
 800dd6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	2201      	movs	r2, #1
 800dd76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	2200      	movs	r2, #0
 800dd84:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dd86:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3730      	adds	r7, #48	@ 0x30
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dd94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dda0:	f003 0308 	and.w	r3, r3, #8
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00a      	beq.n	800ddbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	430a      	orrs	r2, r1
 800ddbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddc2:	f003 0301 	and.w	r3, r3, #1
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d00a      	beq.n	800dde0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	430a      	orrs	r2, r1
 800ddde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dde4:	f003 0302 	and.w	r3, r3, #2
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d00a      	beq.n	800de02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	430a      	orrs	r2, r1
 800de00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de06:	f003 0304 	and.w	r3, r3, #4
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00a      	beq.n	800de24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	685b      	ldr	r3, [r3, #4]
 800de14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	430a      	orrs	r2, r1
 800de22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de28:	f003 0310 	and.w	r3, r3, #16
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d00a      	beq.n	800de46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	689b      	ldr	r3, [r3, #8]
 800de36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	430a      	orrs	r2, r1
 800de44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de4a:	f003 0320 	and.w	r3, r3, #32
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d00a      	beq.n	800de68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	689b      	ldr	r3, [r3, #8]
 800de58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	430a      	orrs	r2, r1
 800de66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800de70:	2b00      	cmp	r3, #0
 800de72:	d01a      	beq.n	800deaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	430a      	orrs	r2, r1
 800de88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800de92:	d10a      	bne.n	800deaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	430a      	orrs	r2, r1
 800dea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800deae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00a      	beq.n	800decc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	685b      	ldr	r3, [r3, #4]
 800debc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	430a      	orrs	r2, r1
 800deca:	605a      	str	r2, [r3, #4]
  }
}
 800decc:	bf00      	nop
 800dece:	370c      	adds	r7, #12
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b098      	sub	sp, #96	@ 0x60
 800dedc:	af02      	add	r7, sp, #8
 800dede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2200      	movs	r2, #0
 800dee4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dee8:	f7f9 fa6e 	bl	80073c8 <HAL_GetTick>
 800deec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f003 0308 	and.w	r3, r3, #8
 800def8:	2b08      	cmp	r3, #8
 800defa:	d12f      	bne.n	800df5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800defc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800df00:	9300      	str	r3, [sp, #0]
 800df02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df04:	2200      	movs	r2, #0
 800df06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 f88e 	bl	800e02c <UART_WaitOnFlagUntilTimeout>
 800df10:	4603      	mov	r3, r0
 800df12:	2b00      	cmp	r3, #0
 800df14:	d022      	beq.n	800df5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df1e:	e853 3f00 	ldrex	r3, [r3]
 800df22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800df24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df2a:	653b      	str	r3, [r7, #80]	@ 0x50
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	461a      	mov	r2, r3
 800df32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df34:	647b      	str	r3, [r7, #68]	@ 0x44
 800df36:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800df3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800df3c:	e841 2300 	strex	r3, r2, [r1]
 800df40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800df42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df44:	2b00      	cmp	r3, #0
 800df46:	d1e6      	bne.n	800df16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2220      	movs	r2, #32
 800df4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2200      	movs	r2, #0
 800df54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800df58:	2303      	movs	r3, #3
 800df5a:	e063      	b.n	800e024 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	f003 0304 	and.w	r3, r3, #4
 800df66:	2b04      	cmp	r3, #4
 800df68:	d149      	bne.n	800dffe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800df6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800df6e:	9300      	str	r3, [sp, #0]
 800df70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df72:	2200      	movs	r2, #0
 800df74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 f857 	bl	800e02c <UART_WaitOnFlagUntilTimeout>
 800df7e:	4603      	mov	r3, r0
 800df80:	2b00      	cmp	r3, #0
 800df82:	d03c      	beq.n	800dffe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df8c:	e853 3f00 	ldrex	r3, [r3]
 800df90:	623b      	str	r3, [r7, #32]
   return(result);
 800df92:	6a3b      	ldr	r3, [r7, #32]
 800df94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800df98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	461a      	mov	r2, r3
 800dfa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfa2:	633b      	str	r3, [r7, #48]	@ 0x30
 800dfa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dfa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dfaa:	e841 2300 	strex	r3, r2, [r1]
 800dfae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dfb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d1e6      	bne.n	800df84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	3308      	adds	r3, #8
 800dfbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	e853 3f00 	ldrex	r3, [r3]
 800dfc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	f023 0301 	bic.w	r3, r3, #1
 800dfcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	3308      	adds	r3, #8
 800dfd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dfd6:	61fa      	str	r2, [r7, #28]
 800dfd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfda:	69b9      	ldr	r1, [r7, #24]
 800dfdc:	69fa      	ldr	r2, [r7, #28]
 800dfde:	e841 2300 	strex	r3, r2, [r1]
 800dfe2:	617b      	str	r3, [r7, #20]
   return(result);
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d1e5      	bne.n	800dfb6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2220      	movs	r2, #32
 800dfee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dffa:	2303      	movs	r3, #3
 800dffc:	e012      	b.n	800e024 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2220      	movs	r2, #32
 800e002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	2220      	movs	r2, #32
 800e00a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2200      	movs	r2, #0
 800e012:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2200      	movs	r2, #0
 800e018:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2200      	movs	r2, #0
 800e01e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e022:	2300      	movs	r3, #0
}
 800e024:	4618      	mov	r0, r3
 800e026:	3758      	adds	r7, #88	@ 0x58
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
 800e032:	60f8      	str	r0, [r7, #12]
 800e034:	60b9      	str	r1, [r7, #8]
 800e036:	603b      	str	r3, [r7, #0]
 800e038:	4613      	mov	r3, r2
 800e03a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e03c:	e04f      	b.n	800e0de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e03e:	69bb      	ldr	r3, [r7, #24]
 800e040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e044:	d04b      	beq.n	800e0de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e046:	f7f9 f9bf 	bl	80073c8 <HAL_GetTick>
 800e04a:	4602      	mov	r2, r0
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	1ad3      	subs	r3, r2, r3
 800e050:	69ba      	ldr	r2, [r7, #24]
 800e052:	429a      	cmp	r2, r3
 800e054:	d302      	bcc.n	800e05c <UART_WaitOnFlagUntilTimeout+0x30>
 800e056:	69bb      	ldr	r3, [r7, #24]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d101      	bne.n	800e060 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e05c:	2303      	movs	r3, #3
 800e05e:	e04e      	b.n	800e0fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f003 0304 	and.w	r3, r3, #4
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d037      	beq.n	800e0de <UART_WaitOnFlagUntilTimeout+0xb2>
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	2b80      	cmp	r3, #128	@ 0x80
 800e072:	d034      	beq.n	800e0de <UART_WaitOnFlagUntilTimeout+0xb2>
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	2b40      	cmp	r3, #64	@ 0x40
 800e078:	d031      	beq.n	800e0de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	69db      	ldr	r3, [r3, #28]
 800e080:	f003 0308 	and.w	r3, r3, #8
 800e084:	2b08      	cmp	r3, #8
 800e086:	d110      	bne.n	800e0aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	2208      	movs	r2, #8
 800e08e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e090:	68f8      	ldr	r0, [r7, #12]
 800e092:	f000 f920 	bl	800e2d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2208      	movs	r2, #8
 800e09a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	e029      	b.n	800e0fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	69db      	ldr	r3, [r3, #28]
 800e0b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e0b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e0b8:	d111      	bne.n	800e0de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e0c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e0c4:	68f8      	ldr	r0, [r7, #12]
 800e0c6:	f000 f906 	bl	800e2d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2220      	movs	r2, #32
 800e0ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e0da:	2303      	movs	r3, #3
 800e0dc:	e00f      	b.n	800e0fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	69da      	ldr	r2, [r3, #28]
 800e0e4:	68bb      	ldr	r3, [r7, #8]
 800e0e6:	4013      	ands	r3, r2
 800e0e8:	68ba      	ldr	r2, [r7, #8]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	bf0c      	ite	eq
 800e0ee:	2301      	moveq	r3, #1
 800e0f0:	2300      	movne	r3, #0
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	461a      	mov	r2, r3
 800e0f6:	79fb      	ldrb	r3, [r7, #7]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d0a0      	beq.n	800e03e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e0fc:	2300      	movs	r3, #0
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3710      	adds	r7, #16
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
	...

0800e108 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b096      	sub	sp, #88	@ 0x58
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	4613      	mov	r3, r2
 800e114:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	68ba      	ldr	r2, [r7, #8]
 800e11a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	88fa      	ldrh	r2, [r7, #6]
 800e120:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2200      	movs	r2, #0
 800e128:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2222      	movs	r2, #34	@ 0x22
 800e130:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d02d      	beq.n	800e19a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e144:	4a40      	ldr	r2, [pc, #256]	@ (800e248 <UART_Start_Receive_DMA+0x140>)
 800e146:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e14e:	4a3f      	ldr	r2, [pc, #252]	@ (800e24c <UART_Start_Receive_DMA+0x144>)
 800e150:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e158:	4a3d      	ldr	r2, [pc, #244]	@ (800e250 <UART_Start_Receive_DMA+0x148>)
 800e15a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e162:	2200      	movs	r2, #0
 800e164:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	3324      	adds	r3, #36	@ 0x24
 800e172:	4619      	mov	r1, r3
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e178:	461a      	mov	r2, r3
 800e17a:	88fb      	ldrh	r3, [r7, #6]
 800e17c:	f7fa ff60 	bl	8009040 <HAL_DMA_Start_IT>
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	d009      	beq.n	800e19a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	2210      	movs	r2, #16
 800e18a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	2220      	movs	r2, #32
 800e192:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800e196:	2301      	movs	r3, #1
 800e198:	e051      	b.n	800e23e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	691b      	ldr	r3, [r3, #16]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d018      	beq.n	800e1d4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1aa:	e853 3f00 	ldrex	r3, [r3]
 800e1ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e1b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e1b6:	657b      	str	r3, [r7, #84]	@ 0x54
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	461a      	mov	r2, r3
 800e1be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e1c2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1c4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800e1c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1c8:	e841 2300 	strex	r3, r2, [r1]
 800e1cc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800e1ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d1e6      	bne.n	800e1a2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	3308      	adds	r3, #8
 800e1da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1de:	e853 3f00 	ldrex	r3, [r3]
 800e1e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1e6:	f043 0301 	orr.w	r3, r3, #1
 800e1ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	3308      	adds	r3, #8
 800e1f2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e1f4:	637a      	str	r2, [r7, #52]	@ 0x34
 800e1f6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e1fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e1fc:	e841 2300 	strex	r3, r2, [r1]
 800e200:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800e202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e204:	2b00      	cmp	r3, #0
 800e206:	d1e5      	bne.n	800e1d4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	3308      	adds	r3, #8
 800e20e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	e853 3f00 	ldrex	r3, [r3]
 800e216:	613b      	str	r3, [r7, #16]
   return(result);
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e21e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	3308      	adds	r3, #8
 800e226:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e228:	623a      	str	r2, [r7, #32]
 800e22a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e22c:	69f9      	ldr	r1, [r7, #28]
 800e22e:	6a3a      	ldr	r2, [r7, #32]
 800e230:	e841 2300 	strex	r3, r2, [r1]
 800e234:	61bb      	str	r3, [r7, #24]
   return(result);
 800e236:	69bb      	ldr	r3, [r7, #24]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d1e5      	bne.n	800e208 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800e23c:	2300      	movs	r3, #0
}
 800e23e:	4618      	mov	r0, r3
 800e240:	3758      	adds	r7, #88	@ 0x58
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop
 800e248:	0800e461 	.word	0x0800e461
 800e24c:	0800e595 	.word	0x0800e595
 800e250:	0800e5db 	.word	0x0800e5db

0800e254 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e254:	b480      	push	{r7}
 800e256:	b08f      	sub	sp, #60	@ 0x3c
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e262:	6a3b      	ldr	r3, [r7, #32]
 800e264:	e853 3f00 	ldrex	r3, [r3]
 800e268:	61fb      	str	r3, [r7, #28]
   return(result);
 800e26a:	69fb      	ldr	r3, [r7, #28]
 800e26c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e270:	637b      	str	r3, [r7, #52]	@ 0x34
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	461a      	mov	r2, r3
 800e278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e27a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e27c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e27e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e280:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e282:	e841 2300 	strex	r3, r2, [r1]
 800e286:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d1e6      	bne.n	800e25c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	3308      	adds	r3, #8
 800e294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	e853 3f00 	ldrex	r3, [r3]
 800e29c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800e2a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	3308      	adds	r3, #8
 800e2ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e2ae:	61ba      	str	r2, [r7, #24]
 800e2b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2b2:	6979      	ldr	r1, [r7, #20]
 800e2b4:	69ba      	ldr	r2, [r7, #24]
 800e2b6:	e841 2300 	strex	r3, r2, [r1]
 800e2ba:	613b      	str	r3, [r7, #16]
   return(result);
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1e5      	bne.n	800e28e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2220      	movs	r2, #32
 800e2c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800e2ca:	bf00      	nop
 800e2cc:	373c      	adds	r7, #60	@ 0x3c
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d4:	4770      	bx	lr

0800e2d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e2d6:	b480      	push	{r7}
 800e2d8:	b095      	sub	sp, #84	@ 0x54
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2e6:	e853 3f00 	ldrex	r3, [r3]
 800e2ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e2f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	461a      	mov	r2, r3
 800e2fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2fc:	643b      	str	r3, [r7, #64]	@ 0x40
 800e2fe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e300:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e302:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e304:	e841 2300 	strex	r3, r2, [r1]
 800e308:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d1e6      	bne.n	800e2de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	3308      	adds	r3, #8
 800e316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e318:	6a3b      	ldr	r3, [r7, #32]
 800e31a:	e853 3f00 	ldrex	r3, [r3]
 800e31e:	61fb      	str	r3, [r7, #28]
   return(result);
 800e320:	69fb      	ldr	r3, [r7, #28]
 800e322:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e326:	f023 0301 	bic.w	r3, r3, #1
 800e32a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	3308      	adds	r3, #8
 800e332:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e334:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e336:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e338:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e33a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e33c:	e841 2300 	strex	r3, r2, [r1]
 800e340:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e344:	2b00      	cmp	r3, #0
 800e346:	d1e3      	bne.n	800e310 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	d118      	bne.n	800e382 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	e853 3f00 	ldrex	r3, [r3]
 800e35c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	f023 0310 	bic.w	r3, r3, #16
 800e364:	647b      	str	r3, [r7, #68]	@ 0x44
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	461a      	mov	r2, r3
 800e36c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e36e:	61bb      	str	r3, [r7, #24]
 800e370:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e372:	6979      	ldr	r1, [r7, #20]
 800e374:	69ba      	ldr	r2, [r7, #24]
 800e376:	e841 2300 	strex	r3, r2, [r1]
 800e37a:	613b      	str	r3, [r7, #16]
   return(result);
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d1e6      	bne.n	800e350 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2220      	movs	r2, #32
 800e386:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2200      	movs	r2, #0
 800e38e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2200      	movs	r2, #0
 800e394:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e396:	bf00      	nop
 800e398:	3754      	adds	r7, #84	@ 0x54
 800e39a:	46bd      	mov	sp, r7
 800e39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a0:	4770      	bx	lr

0800e3a2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e3a2:	b580      	push	{r7, lr}
 800e3a4:	b090      	sub	sp, #64	@ 0x40
 800e3a6:	af00      	add	r7, sp, #0
 800e3a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f003 0320 	and.w	r3, r3, #32
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d137      	bne.n	800e42e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800e3be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e3c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	3308      	adds	r3, #8
 800e3cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3d0:	e853 3f00 	ldrex	r3, [r3]
 800e3d4:	623b      	str	r3, [r7, #32]
   return(result);
 800e3d6:	6a3b      	ldr	r3, [r7, #32]
 800e3d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e3dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e3de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	3308      	adds	r3, #8
 800e3e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e3e6:	633a      	str	r2, [r7, #48]	@ 0x30
 800e3e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e3ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e3ee:	e841 2300 	strex	r3, r2, [r1]
 800e3f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d1e5      	bne.n	800e3c6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e3fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	e853 3f00 	ldrex	r3, [r3]
 800e406:	60fb      	str	r3, [r7, #12]
   return(result);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e40e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	461a      	mov	r2, r3
 800e416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e418:	61fb      	str	r3, [r7, #28]
 800e41a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e41c:	69b9      	ldr	r1, [r7, #24]
 800e41e:	69fa      	ldr	r2, [r7, #28]
 800e420:	e841 2300 	strex	r3, r2, [r1]
 800e424:	617b      	str	r3, [r7, #20]
   return(result);
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d1e6      	bne.n	800e3fa <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e42c:	e004      	b.n	800e438 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800e42e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e430:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e434:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e436:	4798      	blx	r3
}
 800e438:	bf00      	nop
 800e43a:	3740      	adds	r7, #64	@ 0x40
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e44c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e454:	68f8      	ldr	r0, [r7, #12]
 800e456:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e458:	bf00      	nop
 800e45a:	3710      	adds	r7, #16
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b09c      	sub	sp, #112	@ 0x70
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e46c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f003 0320 	and.w	r3, r3, #32
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d171      	bne.n	800e560 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800e47c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e47e:	2200      	movs	r2, #0
 800e480:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e48a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e48c:	e853 3f00 	ldrex	r3, [r3]
 800e490:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e494:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e498:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e49a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	461a      	mov	r2, r3
 800e4a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e4a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e4a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e4a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e4aa:	e841 2300 	strex	r3, r2, [r1]
 800e4ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e4b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d1e6      	bne.n	800e484 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	3308      	adds	r3, #8
 800e4bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4c0:	e853 3f00 	ldrex	r3, [r3]
 800e4c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e4c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4c8:	f023 0301 	bic.w	r3, r3, #1
 800e4cc:	667b      	str	r3, [r7, #100]	@ 0x64
 800e4ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	3308      	adds	r3, #8
 800e4d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e4d6:	647a      	str	r2, [r7, #68]	@ 0x44
 800e4d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e4dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e4de:	e841 2300 	strex	r3, r2, [r1]
 800e4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e4e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d1e5      	bne.n	800e4b6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e4ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	3308      	adds	r3, #8
 800e4f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4f4:	e853 3f00 	ldrex	r3, [r3]
 800e4f8:	623b      	str	r3, [r7, #32]
   return(result);
 800e4fa:	6a3b      	ldr	r3, [r7, #32]
 800e4fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e500:	663b      	str	r3, [r7, #96]	@ 0x60
 800e502:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	3308      	adds	r3, #8
 800e508:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e50a:	633a      	str	r2, [r7, #48]	@ 0x30
 800e50c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e50e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e512:	e841 2300 	strex	r3, r2, [r1]
 800e516:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d1e5      	bne.n	800e4ea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e51e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e520:	2220      	movs	r2, #32
 800e522:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e528:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e52a:	2b01      	cmp	r3, #1
 800e52c:	d118      	bne.n	800e560 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e52e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	e853 3f00 	ldrex	r3, [r3]
 800e53a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	f023 0310 	bic.w	r3, r3, #16
 800e542:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	461a      	mov	r2, r3
 800e54a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e54c:	61fb      	str	r3, [r7, #28]
 800e54e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e550:	69b9      	ldr	r1, [r7, #24]
 800e552:	69fa      	ldr	r2, [r7, #28]
 800e554:	e841 2300 	strex	r3, r2, [r1]
 800e558:	617b      	str	r3, [r7, #20]
   return(result);
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d1e6      	bne.n	800e52e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e562:	2200      	movs	r2, #0
 800e564:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e566:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e568:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d109      	bne.n	800e582 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800e56e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e570:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e574:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e576:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e57a:	4611      	mov	r1, r2
 800e57c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e57e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e580:	e004      	b.n	800e58c <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800e582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e584:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e588:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e58a:	4798      	blx	r3
}
 800e58c:	bf00      	nop
 800e58e:	3770      	adds	r7, #112	@ 0x70
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	b084      	sub	sp, #16
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5a0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	d10b      	bne.n	800e5c8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e5b6:	68fa      	ldr	r2, [r7, #12]
 800e5b8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800e5bc:	0852      	lsrs	r2, r2, #1
 800e5be:	b292      	uxth	r2, r2
 800e5c0:	4611      	mov	r1, r2
 800e5c2:	68f8      	ldr	r0, [r7, #12]
 800e5c4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e5c6:	e004      	b.n	800e5d2 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e5ce:	68f8      	ldr	r0, [r7, #12]
 800e5d0:	4798      	blx	r3
}
 800e5d2:	bf00      	nop
 800e5d4:	3710      	adds	r7, #16
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}

0800e5da <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e5da:	b580      	push	{r7, lr}
 800e5dc:	b086      	sub	sp, #24
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5e6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e5ee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e5f6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	689b      	ldr	r3, [r3, #8]
 800e5fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e602:	2b80      	cmp	r3, #128	@ 0x80
 800e604:	d109      	bne.n	800e61a <UART_DMAError+0x40>
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	2b21      	cmp	r3, #33	@ 0x21
 800e60a:	d106      	bne.n	800e61a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	2200      	movs	r2, #0
 800e610:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800e614:	6978      	ldr	r0, [r7, #20]
 800e616:	f7ff fe1d 	bl	800e254 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	689b      	ldr	r3, [r3, #8]
 800e620:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e624:	2b40      	cmp	r3, #64	@ 0x40
 800e626:	d109      	bne.n	800e63c <UART_DMAError+0x62>
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2b22      	cmp	r3, #34	@ 0x22
 800e62c:	d106      	bne.n	800e63c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	2200      	movs	r2, #0
 800e632:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800e636:	6978      	ldr	r0, [r7, #20]
 800e638:	f7ff fe4d 	bl	800e2d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e642:	f043 0210 	orr.w	r2, r3, #16
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e652:	6978      	ldr	r0, [r7, #20]
 800e654:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e656:	bf00      	nop
 800e658:	3718      	adds	r7, #24
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e65e:	b580      	push	{r7, lr}
 800e660:	b084      	sub	sp, #16
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e66a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2200      	movs	r2, #0
 800e670:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e67a:	68f8      	ldr	r0, [r7, #12]
 800e67c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e67e:	bf00      	nop
 800e680:	3710      	adds	r7, #16
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e686:	b580      	push	{r7, lr}
 800e688:	b088      	sub	sp, #32
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	e853 3f00 	ldrex	r3, [r3]
 800e69a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6a2:	61fb      	str	r3, [r7, #28]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	69fb      	ldr	r3, [r7, #28]
 800e6ac:	61bb      	str	r3, [r7, #24]
 800e6ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b0:	6979      	ldr	r1, [r7, #20]
 800e6b2:	69ba      	ldr	r2, [r7, #24]
 800e6b4:	e841 2300 	strex	r3, r2, [r1]
 800e6b8:	613b      	str	r3, [r7, #16]
   return(result);
 800e6ba:	693b      	ldr	r3, [r7, #16]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d1e6      	bne.n	800e68e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2220      	movs	r2, #32
 800e6c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6d8:	bf00      	nop
 800e6da:	3720      	adds	r7, #32
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}

0800e6e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b083      	sub	sp, #12
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e6e8:	bf00      	nop
 800e6ea:	370c      	adds	r7, #12
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f2:	4770      	bx	lr

0800e6f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b083      	sub	sp, #12
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e6fc:	bf00      	nop
 800e6fe:	370c      	adds	r7, #12
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr

0800e708 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e710:	bf00      	nop
 800e712:	370c      	adds	r7, #12
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e71c:	b480      	push	{r7}
 800e71e:	b085      	sub	sp, #20
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e72a:	2b01      	cmp	r3, #1
 800e72c:	d101      	bne.n	800e732 <HAL_UARTEx_DisableFifoMode+0x16>
 800e72e:	2302      	movs	r3, #2
 800e730:	e027      	b.n	800e782 <HAL_UARTEx_DisableFifoMode+0x66>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2201      	movs	r2, #1
 800e736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2224      	movs	r2, #36	@ 0x24
 800e73e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	681a      	ldr	r2, [r3, #0]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f022 0201 	bic.w	r2, r2, #1
 800e758:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e760:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2200      	movs	r2, #0
 800e766:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	68fa      	ldr	r2, [r7, #12]
 800e76e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	2220      	movs	r2, #32
 800e774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2200      	movs	r2, #0
 800e77c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e780:	2300      	movs	r3, #0
}
 800e782:	4618      	mov	r0, r3
 800e784:	3714      	adds	r7, #20
 800e786:	46bd      	mov	sp, r7
 800e788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78c:	4770      	bx	lr

0800e78e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e78e:	b580      	push	{r7, lr}
 800e790:	b084      	sub	sp, #16
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
 800e796:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e79e:	2b01      	cmp	r3, #1
 800e7a0:	d101      	bne.n	800e7a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e7a2:	2302      	movs	r3, #2
 800e7a4:	e02d      	b.n	800e802 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2224      	movs	r2, #36	@ 0x24
 800e7b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	681a      	ldr	r2, [r3, #0]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f022 0201 	bic.w	r2, r2, #1
 800e7cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	689b      	ldr	r3, [r3, #8]
 800e7d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	683a      	ldr	r2, [r7, #0]
 800e7de:	430a      	orrs	r2, r1
 800e7e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 f850 	bl	800e888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	68fa      	ldr	r2, [r7, #12]
 800e7ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2220      	movs	r2, #32
 800e7f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e800:	2300      	movs	r3, #0
}
 800e802:	4618      	mov	r0, r3
 800e804:	3710      	adds	r7, #16
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}

0800e80a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b084      	sub	sp, #16
 800e80e:	af00      	add	r7, sp, #0
 800e810:	6078      	str	r0, [r7, #4]
 800e812:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e81a:	2b01      	cmp	r3, #1
 800e81c:	d101      	bne.n	800e822 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e81e:	2302      	movs	r3, #2
 800e820:	e02d      	b.n	800e87e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2201      	movs	r2, #1
 800e826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2224      	movs	r2, #36	@ 0x24
 800e82e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	f022 0201 	bic.w	r2, r2, #1
 800e848:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	689b      	ldr	r3, [r3, #8]
 800e850:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	683a      	ldr	r2, [r7, #0]
 800e85a:	430a      	orrs	r2, r1
 800e85c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f000 f812 	bl	800e888 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	68fa      	ldr	r2, [r7, #12]
 800e86a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2220      	movs	r2, #32
 800e870:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2200      	movs	r2, #0
 800e878:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e87c:	2300      	movs	r3, #0
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3710      	adds	r7, #16
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
	...

0800e888 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e888:	b480      	push	{r7}
 800e88a:	b085      	sub	sp, #20
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e894:	2b00      	cmp	r3, #0
 800e896:	d108      	bne.n	800e8aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2201      	movs	r2, #1
 800e89c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e8a8:	e031      	b.n	800e90e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e8aa:	2308      	movs	r3, #8
 800e8ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e8ae:	2308      	movs	r3, #8
 800e8b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	689b      	ldr	r3, [r3, #8]
 800e8b8:	0e5b      	lsrs	r3, r3, #25
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	f003 0307 	and.w	r3, r3, #7
 800e8c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	689b      	ldr	r3, [r3, #8]
 800e8c8:	0f5b      	lsrs	r3, r3, #29
 800e8ca:	b2db      	uxtb	r3, r3
 800e8cc:	f003 0307 	and.w	r3, r3, #7
 800e8d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e8d2:	7bbb      	ldrb	r3, [r7, #14]
 800e8d4:	7b3a      	ldrb	r2, [r7, #12]
 800e8d6:	4911      	ldr	r1, [pc, #68]	@ (800e91c <UARTEx_SetNbDataToProcess+0x94>)
 800e8d8:	5c8a      	ldrb	r2, [r1, r2]
 800e8da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e8de:	7b3a      	ldrb	r2, [r7, #12]
 800e8e0:	490f      	ldr	r1, [pc, #60]	@ (800e920 <UARTEx_SetNbDataToProcess+0x98>)
 800e8e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e8e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8e8:	b29a      	uxth	r2, r3
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e8f0:	7bfb      	ldrb	r3, [r7, #15]
 800e8f2:	7b7a      	ldrb	r2, [r7, #13]
 800e8f4:	4909      	ldr	r1, [pc, #36]	@ (800e91c <UARTEx_SetNbDataToProcess+0x94>)
 800e8f6:	5c8a      	ldrb	r2, [r1, r2]
 800e8f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e8fc:	7b7a      	ldrb	r2, [r7, #13]
 800e8fe:	4908      	ldr	r1, [pc, #32]	@ (800e920 <UARTEx_SetNbDataToProcess+0x98>)
 800e900:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e902:	fb93 f3f2 	sdiv	r3, r3, r2
 800e906:	b29a      	uxth	r2, r3
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e90e:	bf00      	nop
 800e910:	3714      	adds	r7, #20
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr
 800e91a:	bf00      	nop
 800e91c:	080101d4 	.word	0x080101d4
 800e920:	080101dc 	.word	0x080101dc

0800e924 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800e924:	b480      	push	{r7}
 800e926:	b08b      	sub	sp, #44	@ 0x2c
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	685b      	ldr	r3, [r3, #4]
 800e93a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	881b      	ldrh	r3, [r3, #0]
 800e946:	461a      	mov	r2, r3
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	885b      	ldrh	r3, [r3, #2]
 800e94c:	fb02 f303 	mul.w	r3, r2, r3
 800e950:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800e952:	697b      	ldr	r3, [r7, #20]
 800e954:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800e956:	e013      	b.n	800e980 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800e958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e95a:	1d1a      	adds	r2, r3, #4
 800e95c:	627a      	str	r2, [r7, #36]	@ 0x24
 800e95e:	ed93 7a00 	vldr	s14, [r3]
 800e962:	6a3b      	ldr	r3, [r7, #32]
 800e964:	1d1a      	adds	r2, r3, #4
 800e966:	623a      	str	r2, [r7, #32]
 800e968:	edd3 7a00 	vldr	s15, [r3]
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	1d1a      	adds	r2, r3, #4
 800e970:	61fa      	str	r2, [r7, #28]
 800e972:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e976:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800e97a:	69bb      	ldr	r3, [r7, #24]
 800e97c:	3b01      	subs	r3, #1
 800e97e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d1e8      	bne.n	800e958 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800e986:	2300      	movs	r3, #0
 800e988:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800e98a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e98e:	4618      	mov	r0, r3
 800e990:	372c      	adds	r7, #44	@ 0x2c
 800e992:	46bd      	mov	sp, r7
 800e994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e998:	4770      	bx	lr

0800e99a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800e99a:	b480      	push	{r7}
 800e99c:	b085      	sub	sp, #20
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	60f8      	str	r0, [r7, #12]
 800e9a2:	607b      	str	r3, [r7, #4]
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	817b      	strh	r3, [r7, #10]
 800e9a8:	4613      	mov	r3, r2
 800e9aa:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	897a      	ldrh	r2, [r7, #10]
 800e9b0:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	893a      	ldrh	r2, [r7, #8]
 800e9b6:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	605a      	str	r2, [r3, #4]
}
 800e9be:	bf00      	nop
 800e9c0:	3714      	adds	r7, #20
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr

0800e9ca <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800e9ca:	b480      	push	{r7}
 800e9cc:	b0bb      	sub	sp, #236	@ 0xec
 800e9ce:	af00      	add	r7, sp, #0
 800e9d0:	6078      	str	r0, [r7, #4]
 800e9d2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	685b      	ldr	r3, [r3, #4]
 800e9d8:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800e9da:	683b      	ldr	r3, [r7, #0]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	881b      	ldrh	r3, [r3, #0]
 800e9e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	885b      	ldrh	r3, [r3, #2]
 800e9ea:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800e9ec:	f04f 0300 	mov.w	r3, #0
 800e9f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e9f4:	f04f 0300 	mov.w	r3, #0
 800e9f8:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800ea00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ea02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800ea06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ea08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800ea0c:	e03b      	b.n	800ea86 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800ea0e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ea10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ea14:	1ad3      	subs	r3, r2, r3
 800ea16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ea1a:	e00c      	b.n	800ea36 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800ea1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea20:	1d1a      	adds	r2, r3, #4
 800ea22:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ea26:	f04f 0200 	mov.w	r2, #0
 800ea2a:	601a      	str	r2, [r3, #0]
        j--;
 800ea2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ea30:	3b01      	subs	r3, #1
 800ea32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ea36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d1ee      	bne.n	800ea1c <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800ea3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea42:	1d1a      	adds	r2, r3, #4
 800ea44:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ea48:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ea4c:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800ea4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ea52:	3b01      	subs	r3, #1
 800ea54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ea58:	e00c      	b.n	800ea74 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800ea5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ea5e:	1d1a      	adds	r2, r3, #4
 800ea60:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ea64:	f04f 0200 	mov.w	r2, #0
 800ea68:	601a      	str	r2, [r3, #0]
        j--;
 800ea6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ea6e:	3b01      	subs	r3, #1
 800ea70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800ea74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d1ee      	bne.n	800ea5a <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800ea7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ea80:	3b01      	subs	r3, #1
 800ea82:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800ea86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d1bf      	bne.n	800ea0e <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800ea8e:	2300      	movs	r3, #0
 800ea90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ea94:	e2c7      	b.n	800f026 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800ea96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ea9a:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	685a      	ldr	r2, [r3, #4]
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	885b      	ldrh	r3, [r3, #2]
 800eaa4:	3301      	adds	r3, #1
 800eaa6:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800eaaa:	fb01 f303 	mul.w	r3, r1, r3
 800eaae:	009b      	lsls	r3, r3, #2
 800eab0:	4413      	add	r3, r2
 800eab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800eab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800eac0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eac4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800eac8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eacc:	3301      	adds	r3, #1
 800eace:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ead2:	e02c      	b.n	800eb2e <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	685a      	ldr	r2, [r3, #4]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	885b      	ldrh	r3, [r3, #2]
 800eadc:	4619      	mov	r1, r3
 800eade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eae2:	fb03 f101 	mul.w	r1, r3, r1
 800eae6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eaea:	440b      	add	r3, r1
 800eaec:	009b      	lsls	r3, r3, #2
 800eaee:	4413      	add	r3, r2
 800eaf0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800eaf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800eafc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800eb00:	eeb0 7ae7 	vabs.f32	s14, s15
 800eb04:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800eb08:	eef0 7ae7 	vabs.f32	s15, s15
 800eb0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb14:	dd06      	ble.n	800eb24 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800eb16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eb1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800eb1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800eb24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eb28:	3301      	adds	r3, #1
 800eb2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800eb2e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800eb32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eb34:	429a      	cmp	r2, r3
 800eb36:	d3cd      	bcc.n	800ead4 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800eb38:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800eb3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eb40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb44:	f000 809b 	beq.w	800ec7e <arm_mat_inverse_f32+0x2b4>
 800eb48:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eb4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eb50:	429a      	cmp	r2, r3
 800eb52:	f000 8094 	beq.w	800ec7e <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	685b      	ldr	r3, [r3, #4]
 800eb5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	885b      	ldrh	r3, [r3, #2]
 800eb6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800eb6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800eb6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eb72:	1ad3      	subs	r3, r2, r3
 800eb74:	64bb      	str	r3, [r7, #72]	@ 0x48
 800eb76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eb7a:	fb03 f202 	mul.w	r2, r3, r2
 800eb7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eb82:	4413      	add	r3, r2
 800eb84:	009b      	lsls	r3, r3, #2
 800eb86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800eb8a:	4413      	add	r3, r2
 800eb8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800eb90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eb92:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800eb96:	fb03 f202 	mul.w	r2, r3, r2
 800eb9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800eb9e:	4413      	add	r3, r2
 800eba0:	009b      	lsls	r3, r3, #2
 800eba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800eba6:	4413      	add	r3, r2
 800eba8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ebac:	2300      	movs	r3, #0
 800ebae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ebb2:	e018      	b.n	800ebe6 <arm_mat_inverse_f32+0x21c>
 800ebb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ebbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ebc0:	1d1a      	adds	r2, r3, #4
 800ebc2:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800ebc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ebca:	6812      	ldr	r2, [r2, #0]
 800ebcc:	601a      	str	r2, [r3, #0]
 800ebce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ebd2:	1d1a      	adds	r2, r3, #4
 800ebd4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800ebd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ebda:	601a      	str	r2, [r3, #0]
 800ebdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ebe0:	3301      	adds	r3, #1
 800ebe2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ebe6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800ebea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebec:	429a      	cmp	r2, r3
 800ebee:	dbe1      	blt.n	800ebb4 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	885b      	ldrh	r3, [r3, #2]
 800ec04:	647b      	str	r3, [r7, #68]	@ 0x44
 800ec06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec08:	643b      	str	r3, [r7, #64]	@ 0x40
 800ec0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ec0e:	fb02 f303 	mul.w	r3, r2, r3
 800ec12:	009b      	lsls	r3, r3, #2
 800ec14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ec18:	4413      	add	r3, r2
 800ec1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ec1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ec24:	fb02 f303 	mul.w	r3, r2, r3
 800ec28:	009b      	lsls	r3, r3, #2
 800ec2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ec2e:	4413      	add	r3, r2
 800ec30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ec34:	2300      	movs	r3, #0
 800ec36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ec3a:	e018      	b.n	800ec6e <arm_mat_inverse_f32+0x2a4>
 800ec3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ec48:	1d1a      	adds	r2, r3, #4
 800ec4a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ec4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ec52:	6812      	ldr	r2, [r2, #0]
 800ec54:	601a      	str	r2, [r3, #0]
 800ec56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ec5a:	1d1a      	adds	r2, r3, #4
 800ec5c:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ec60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ec62:	601a      	str	r2, [r3, #0]
 800ec64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ec68:	3301      	adds	r3, #1
 800ec6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ec6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ec72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec74:	429a      	cmp	r2, r3
 800ec76:	dbe1      	blt.n	800ec3c <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800ec78:	2301      	movs	r3, #1
 800ec7a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800ec7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ec82:	2b01      	cmp	r3, #1
 800ec84:	d009      	beq.n	800ec9a <arm_mat_inverse_f32+0x2d0>
 800ec86:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ec8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ec8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec92:	d102      	bne.n	800ec9a <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800ec94:	f06f 0304 	mvn.w	r3, #4
 800ec98:	e208      	b.n	800f0ac <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800ec9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ec9e:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800eca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eca6:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	885b      	ldrh	r3, [r3, #2]
 800ecb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ecb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ecba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ecbe:	1ad3      	subs	r3, r2, r3
 800ecc0:	633b      	str	r3, [r7, #48]	@ 0x30
 800ecc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecc4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ecc6:	fb03 f202 	mul.w	r2, r3, r2
 800ecca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ecce:	4413      	add	r3, r2
 800ecd0:	009b      	lsls	r3, r3, #2
 800ecd2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800ecd6:	4413      	add	r3, r2
 800ecd8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ecdc:	2300      	movs	r3, #0
 800ecde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ece2:	e011      	b.n	800ed08 <arm_mat_inverse_f32+0x33e>
 800ece4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ece8:	1d1a      	adds	r2, r3, #4
 800ecea:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800ecee:	ed93 7a00 	vldr	s14, [r3]
 800ecf2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ecf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ecfa:	edc3 7a00 	vstr	s15, [r3]
 800ecfe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ed02:	3301      	adds	r3, #1
 800ed04:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ed08:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800ed0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	dbe8      	blt.n	800ece4 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	885b      	ldrh	r3, [r3, #2]
 800ed1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ed20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed22:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ed28:	fb02 f303 	mul.w	r3, r2, r3
 800ed2c:	009b      	lsls	r3, r3, #2
 800ed2e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800ed32:	4413      	add	r3, r2
 800ed34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ed38:	2300      	movs	r3, #0
 800ed3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ed3e:	e011      	b.n	800ed64 <arm_mat_inverse_f32+0x39a>
 800ed40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed44:	1d1a      	adds	r2, r3, #4
 800ed46:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800ed4a:	ed93 7a00 	vldr	s14, [r3]
 800ed4e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ed52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed56:	edc3 7a00 	vstr	s15, [r3]
 800ed5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ed5e:	3301      	adds	r3, #1
 800ed60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ed64:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800ed68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	dbe8      	blt.n	800ed40 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800ed74:	e0ae      	b.n	800eed4 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	685a      	ldr	r2, [r3, #4]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	885b      	ldrh	r3, [r3, #2]
 800ed7e:	4619      	mov	r1, r3
 800ed80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ed84:	fb03 f101 	mul.w	r1, r3, r1
 800ed88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ed8c:	440b      	add	r3, r1
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	4413      	add	r3, r2
 800ed92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800ed96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	685b      	ldr	r3, [r3, #4]
 800edac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	885b      	ldrh	r3, [r3, #2]
 800edb4:	617b      	str	r3, [r7, #20]
 800edb6:	697a      	ldr	r2, [r7, #20]
 800edb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800edbc:	1ad3      	subs	r3, r2, r3
 800edbe:	613b      	str	r3, [r7, #16]
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800edc6:	fb03 f202 	mul.w	r2, r3, r2
 800edca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800edce:	4413      	add	r3, r2
 800edd0:	009b      	lsls	r3, r3, #2
 800edd2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800edd6:	4413      	add	r3, r2
 800edd8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ede0:	fb03 f202 	mul.w	r2, r3, r2
 800ede4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ede8:	4413      	add	r3, r2
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800edf0:	4413      	add	r3, r2
 800edf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800edf6:	2300      	movs	r3, #0
 800edf8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800edfc:	e01a      	b.n	800ee34 <arm_mat_inverse_f32+0x46a>
 800edfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ee02:	1d1a      	adds	r2, r3, #4
 800ee04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800ee08:	ed93 7a00 	vldr	s14, [r3]
 800ee0c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ee10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ee18:	1d1a      	adds	r2, r3, #4
 800ee1a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800ee1e:	ed93 7a00 	vldr	s14, [r3]
 800ee22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee26:	edc3 7a00 	vstr	s15, [r3]
 800ee2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ee2e:	3301      	adds	r3, #1
 800ee30:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ee34:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ee38:	693b      	ldr	r3, [r7, #16]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	dbdf      	blt.n	800edfe <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	685b      	ldr	r3, [r3, #4]
 800ee4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	885b      	ldrh	r3, [r3, #2]
 800ee52:	60fb      	str	r3, [r7, #12]
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	60bb      	str	r3, [r7, #8]
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ee5e:	fb02 f303 	mul.w	r3, r2, r3
 800ee62:	009b      	lsls	r3, r3, #2
 800ee64:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800ee68:	4413      	add	r3, r2
 800ee6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee72:	fb02 f303 	mul.w	r3, r2, r3
 800ee76:	009b      	lsls	r3, r3, #2
 800ee78:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ee7c:	4413      	add	r3, r2
 800ee7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ee82:	2300      	movs	r3, #0
 800ee84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800ee88:	e01a      	b.n	800eec0 <arm_mat_inverse_f32+0x4f6>
 800ee8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ee8e:	1d1a      	adds	r2, r3, #4
 800ee90:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ee94:	ed93 7a00 	vldr	s14, [r3]
 800ee98:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ee9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800eea4:	1d1a      	adds	r2, r3, #4
 800eea6:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800eeaa:	ed93 7a00 	vldr	s14, [r3]
 800eeae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eeb2:	edc3 7a00 	vstr	s15, [r3]
 800eeb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800eeba:	3301      	adds	r3, #1
 800eebc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800eec0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	dbdf      	blt.n	800ee8a <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800eeca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eece:	3301      	adds	r3, #1
 800eed0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800eed4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800eed8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eeda:	429a      	cmp	r2, r3
 800eedc:	f4ff af4b 	bcc.w	800ed76 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800eee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eee2:	3301      	adds	r3, #1
 800eee4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800eee8:	e092      	b.n	800f010 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	685a      	ldr	r2, [r3, #4]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	885b      	ldrh	r3, [r3, #2]
 800eef2:	4619      	mov	r1, r3
 800eef4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800eef8:	fb03 f101 	mul.w	r1, r3, r1
 800eefc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ef00:	440b      	add	r3, r1
 800ef02:	009b      	lsls	r3, r3, #2
 800ef04:	4413      	add	r3, r2
 800ef06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800ef0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	685b      	ldr	r3, [r3, #4]
 800ef1e:	677b      	str	r3, [r7, #116]	@ 0x74
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	885b      	ldrh	r3, [r3, #2]
 800ef24:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ef2c:	1ad3      	subs	r3, r2, r3
 800ef2e:	623b      	str	r3, [r7, #32]
 800ef30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef32:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ef36:	fb03 f202 	mul.w	r2, r3, r2
 800ef3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ef3e:	4413      	add	r3, r2
 800ef40:	009b      	lsls	r3, r3, #2
 800ef42:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ef44:	4413      	add	r3, r2
 800ef46:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ef48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ef4c:	fb03 f202 	mul.w	r2, r3, r2
 800ef50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ef54:	4413      	add	r3, r2
 800ef56:	009b      	lsls	r3, r3, #2
 800ef58:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ef5a:	4413      	add	r3, r2
 800ef5c:	677b      	str	r3, [r7, #116]	@ 0x74
 800ef5e:	2300      	movs	r3, #0
 800ef60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ef62:	e014      	b.n	800ef8e <arm_mat_inverse_f32+0x5c4>
 800ef64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ef66:	1d1a      	adds	r2, r3, #4
 800ef68:	677a      	str	r2, [r7, #116]	@ 0x74
 800ef6a:	ed93 7a00 	vldr	s14, [r3]
 800ef6e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ef72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ef78:	1d1a      	adds	r2, r3, #4
 800ef7a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800ef7c:	ed93 7a00 	vldr	s14, [r3]
 800ef80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef84:	edc3 7a00 	vstr	s15, [r3]
 800ef88:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ef8e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ef90:	6a3b      	ldr	r3, [r7, #32]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	dbe6      	blt.n	800ef64 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	685b      	ldr	r3, [r3, #4]
 800efa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	885b      	ldrh	r3, [r3, #2]
 800efa6:	61fb      	str	r3, [r7, #28]
 800efa8:	69fb      	ldr	r3, [r7, #28]
 800efaa:	61bb      	str	r3, [r7, #24]
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800efb2:	fb02 f303 	mul.w	r3, r2, r3
 800efb6:	009b      	lsls	r3, r3, #2
 800efb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800efba:	4413      	add	r3, r2
 800efbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800efbe:	69fb      	ldr	r3, [r7, #28]
 800efc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800efc2:	fb02 f303 	mul.w	r3, r2, r3
 800efc6:	009b      	lsls	r3, r3, #2
 800efc8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800efca:	4413      	add	r3, r2
 800efcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800efce:	2300      	movs	r3, #0
 800efd0:	673b      	str	r3, [r7, #112]	@ 0x70
 800efd2:	e014      	b.n	800effe <arm_mat_inverse_f32+0x634>
 800efd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800efd6:	1d1a      	adds	r2, r3, #4
 800efd8:	66ba      	str	r2, [r7, #104]	@ 0x68
 800efda:	ed93 7a00 	vldr	s14, [r3]
 800efde:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800efe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efe6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800efe8:	1d1a      	adds	r2, r3, #4
 800efea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800efec:	ed93 7a00 	vldr	s14, [r3]
 800eff0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eff4:	edc3 7a00 	vstr	s15, [r3]
 800eff8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800effa:	3301      	adds	r3, #1
 800effc:	673b      	str	r3, [r7, #112]	@ 0x70
 800effe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	429a      	cmp	r2, r3
 800f004:	dbe6      	blt.n	800efd4 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800f006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f00a:	3301      	adds	r3, #1
 800f00c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f010:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800f014:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f016:	429a      	cmp	r2, r3
 800f018:	f4ff af67 	bcc.w	800eeea <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800f01c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f020:	3301      	adds	r3, #1
 800f022:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f026:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f02a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800f02c:	429a      	cmp	r2, r3
 800f02e:	f4ff ad32 	bcc.w	800ea96 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f032:	2300      	movs	r3, #0
 800f034:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800f038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f03c:	2b01      	cmp	r3, #1
 800f03e:	d033      	beq.n	800f0a8 <arm_mat_inverse_f32+0x6de>
 800f040:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800f044:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f04c:	d12c      	bne.n	800f0a8 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800f054:	2300      	movs	r3, #0
 800f056:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f05a:	e010      	b.n	800f07e <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800f05c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f060:	009b      	lsls	r3, r3, #2
 800f062:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f064:	4413      	add	r3, r2
 800f066:	edd3 7a00 	vldr	s15, [r3]
 800f06a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f072:	d10d      	bne.n	800f090 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800f074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f078:	3301      	adds	r3, #1
 800f07a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f07e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f080:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f082:	fb02 f303 	mul.w	r3, r2, r3
 800f086:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800f08a:	429a      	cmp	r2, r3
 800f08c:	d3e6      	bcc.n	800f05c <arm_mat_inverse_f32+0x692>
 800f08e:	e000      	b.n	800f092 <arm_mat_inverse_f32+0x6c8>
            break;
 800f090:	bf00      	nop
      }

      if (i == numRows * numCols)
 800f092:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f094:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f096:	fb02 f303 	mul.w	r3, r2, r3
 800f09a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d102      	bne.n	800f0a8 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800f0a2:	23fb      	movs	r3, #251	@ 0xfb
 800f0a4:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800f0a8:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	37ec      	adds	r7, #236	@ 0xec
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b6:	4770      	bx	lr

0800f0b8 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f0b8:	b480      	push	{r7}
 800f0ba:	b093      	sub	sp, #76	@ 0x4c
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	60f8      	str	r0, [r7, #12]
 800f0c0:	60b9      	str	r1, [r7, #8]
 800f0c2:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	685b      	ldr	r3, [r3, #4]
 800f0c8:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	685b      	ldr	r3, [r3, #4]
 800f0ce:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	881b      	ldrh	r3, [r3, #0]
 800f0e6:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	885b      	ldrh	r3, [r3, #2]
 800f0ec:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	885b      	ldrh	r3, [r3, #2]
 800f0f2:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f0f8:	8b7b      	ldrh	r3, [r7, #26]
 800f0fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800f0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0fe:	009b      	lsls	r3, r3, #2
 800f100:	69fa      	ldr	r2, [r7, #28]
 800f102:	4413      	add	r3, r2
 800f104:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800f106:	8b3b      	ldrh	r3, [r7, #24]
 800f108:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800f110:	f04f 0300 	mov.w	r3, #0
 800f114:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800f116:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f118:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800f11a:	8afb      	ldrh	r3, [r7, #22]
 800f11c:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800f11e:	e017      	b.n	800f150 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800f120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f122:	1d1a      	adds	r2, r3, #4
 800f124:	647a      	str	r2, [r7, #68]	@ 0x44
 800f126:	ed93 7a00 	vldr	s14, [r3]
 800f12a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f12c:	edd3 7a00 	vldr	s15, [r3]
 800f130:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f134:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800f138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f13c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800f140:	8b3b      	ldrh	r3, [r7, #24]
 800f142:	009b      	lsls	r3, r3, #2
 800f144:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f146:	4413      	add	r3, r2
 800f148:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800f14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f14c:	3b01      	subs	r3, #1
 800f14e:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800f150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f152:	2b00      	cmp	r3, #0
 800f154:	d1e4      	bne.n	800f120 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800f156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f158:	1d1a      	adds	r2, r3, #4
 800f15a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800f15c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f15e:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800f160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f162:	3b01      	subs	r3, #1
 800f164:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800f166:	8b3a      	ldrh	r2, [r7, #24]
 800f168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f16a:	1ad3      	subs	r3, r2, r3
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	6a3a      	ldr	r2, [r7, #32]
 800f170:	4413      	add	r3, r2
 800f172:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800f174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f176:	2b00      	cmp	r3, #0
 800f178:	d1ca      	bne.n	800f110 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800f17a:	8b3b      	ldrh	r3, [r7, #24]
 800f17c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f17e:	4413      	add	r3, r2
 800f180:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800f182:	8afb      	ldrh	r3, [r7, #22]
 800f184:	009b      	lsls	r3, r3, #2
 800f186:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f188:	4413      	add	r3, r2
 800f18a:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800f18c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f18e:	3b01      	subs	r3, #1
 800f190:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800f192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f194:	2b00      	cmp	r3, #0
 800f196:	d1b1      	bne.n	800f0fc <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f198:	2300      	movs	r3, #0
 800f19a:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800f19c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	374c      	adds	r7, #76	@ 0x4c
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800f1ac:	b480      	push	{r7}
 800f1ae:	b08b      	sub	sp, #44	@ 0x2c
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	ed87 0a02 	vstr	s0, [r7, #8]
 800f1b8:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	881b      	ldrh	r3, [r3, #0]
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	885b      	ldrh	r3, [r3, #2]
 800f1d0:	fb02 f303 	mul.w	r3, r2, r3
 800f1d4:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800f1d6:	69bb      	ldr	r3, [r7, #24]
 800f1d8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800f1da:	e010      	b.n	800f1fe <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800f1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1de:	1d1a      	adds	r2, r3, #4
 800f1e0:	627a      	str	r2, [r7, #36]	@ 0x24
 800f1e2:	ed93 7a00 	vldr	s14, [r3]
 800f1e6:	6a3b      	ldr	r3, [r7, #32]
 800f1e8:	1d1a      	adds	r2, r3, #4
 800f1ea:	623a      	str	r2, [r7, #32]
 800f1ec:	edd7 7a02 	vldr	s15, [r7, #8]
 800f1f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1f4:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800f1fe:	69fb      	ldr	r3, [r7, #28]
 800f200:	2b00      	cmp	r3, #0
 800f202:	d1eb      	bne.n	800f1dc <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f204:	2300      	movs	r3, #0
 800f206:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800f208:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	372c      	adds	r7, #44	@ 0x2c
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr

0800f218 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800f218:	b480      	push	{r7}
 800f21a:	b08b      	sub	sp, #44	@ 0x2c
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	685b      	ldr	r3, [r3, #4]
 800f228:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	685b      	ldr	r3, [r3, #4]
 800f22e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	881b      	ldrh	r3, [r3, #0]
 800f23a:	461a      	mov	r2, r3
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	885b      	ldrh	r3, [r3, #2]
 800f240:	fb02 f303 	mul.w	r3, r2, r3
 800f244:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800f24a:	e013      	b.n	800f274 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800f24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f24e:	1d1a      	adds	r2, r3, #4
 800f250:	627a      	str	r2, [r7, #36]	@ 0x24
 800f252:	ed93 7a00 	vldr	s14, [r3]
 800f256:	6a3b      	ldr	r3, [r7, #32]
 800f258:	1d1a      	adds	r2, r3, #4
 800f25a:	623a      	str	r2, [r7, #32]
 800f25c:	edd3 7a00 	vldr	s15, [r3]
 800f260:	69fb      	ldr	r3, [r7, #28]
 800f262:	1d1a      	adds	r2, r3, #4
 800f264:	61fa      	str	r2, [r7, #28]
 800f266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f26a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800f26e:	69bb      	ldr	r3, [r7, #24]
 800f270:	3b01      	subs	r3, #1
 800f272:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800f274:	69bb      	ldr	r3, [r7, #24]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d1e8      	bne.n	800f24c <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f27a:	2300      	movs	r3, #0
 800f27c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800f27e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800f282:	4618      	mov	r0, r3
 800f284:	372c      	adds	r7, #44	@ 0x2c
 800f286:	46bd      	mov	sp, r7
 800f288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28c:	4770      	bx	lr

0800f28e <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800f28e:	b480      	push	{r7}
 800f290:	b08b      	sub	sp, #44	@ 0x2c
 800f292:	af00      	add	r7, sp, #0
 800f294:	6078      	str	r0, [r7, #4]
 800f296:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	881b      	ldrh	r3, [r3, #0]
 800f2a8:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	885b      	ldrh	r3, [r3, #2]
 800f2ae:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800f2b0:	89fb      	ldrh	r3, [r7, #14]
 800f2b2:	61bb      	str	r3, [r7, #24]
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800f2b8:	697b      	ldr	r3, [r7, #20]
 800f2ba:	009b      	lsls	r3, r3, #2
 800f2bc:	693a      	ldr	r2, [r7, #16]
 800f2be:	4413      	add	r3, r2
 800f2c0:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800f2c2:	89bb      	ldrh	r3, [r7, #12]
 800f2c4:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800f2c6:	e00d      	b.n	800f2e4 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800f2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ca:	1d1a      	adds	r2, r3, #4
 800f2cc:	627a      	str	r2, [r7, #36]	@ 0x24
 800f2ce:	681a      	ldr	r2, [r3, #0]
 800f2d0:	6a3b      	ldr	r3, [r7, #32]
 800f2d2:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800f2d4:	89fb      	ldrh	r3, [r7, #14]
 800f2d6:	009b      	lsls	r3, r3, #2
 800f2d8:	6a3a      	ldr	r2, [r7, #32]
 800f2da:	4413      	add	r3, r2
 800f2dc:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800f2de:	69fb      	ldr	r3, [r7, #28]
 800f2e0:	3b01      	subs	r3, #1
 800f2e2:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800f2e4:	69fb      	ldr	r3, [r7, #28]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d1ee      	bne.n	800f2c8 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800f2ea:	697b      	ldr	r3, [r7, #20]
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800f2f0:	69bb      	ldr	r3, [r7, #24]
 800f2f2:	3b01      	subs	r3, #1
 800f2f4:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800f2f6:	69bb      	ldr	r3, [r7, #24]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d1dd      	bne.n	800f2b8 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800f300:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f304:	4618      	mov	r0, r3
 800f306:	372c      	adds	r7, #44	@ 0x2c
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr

0800f310 <malloc>:
 800f310:	4b02      	ldr	r3, [pc, #8]	@ (800f31c <malloc+0xc>)
 800f312:	4601      	mov	r1, r0
 800f314:	6818      	ldr	r0, [r3, #0]
 800f316:	f000 b825 	b.w	800f364 <_malloc_r>
 800f31a:	bf00      	nop
 800f31c:	200003a0 	.word	0x200003a0

0800f320 <sbrk_aligned>:
 800f320:	b570      	push	{r4, r5, r6, lr}
 800f322:	4e0f      	ldr	r6, [pc, #60]	@ (800f360 <sbrk_aligned+0x40>)
 800f324:	460c      	mov	r4, r1
 800f326:	6831      	ldr	r1, [r6, #0]
 800f328:	4605      	mov	r5, r0
 800f32a:	b911      	cbnz	r1, 800f332 <sbrk_aligned+0x12>
 800f32c:	f000 f8ae 	bl	800f48c <_sbrk_r>
 800f330:	6030      	str	r0, [r6, #0]
 800f332:	4621      	mov	r1, r4
 800f334:	4628      	mov	r0, r5
 800f336:	f000 f8a9 	bl	800f48c <_sbrk_r>
 800f33a:	1c43      	adds	r3, r0, #1
 800f33c:	d103      	bne.n	800f346 <sbrk_aligned+0x26>
 800f33e:	f04f 34ff 	mov.w	r4, #4294967295
 800f342:	4620      	mov	r0, r4
 800f344:	bd70      	pop	{r4, r5, r6, pc}
 800f346:	1cc4      	adds	r4, r0, #3
 800f348:	f024 0403 	bic.w	r4, r4, #3
 800f34c:	42a0      	cmp	r0, r4
 800f34e:	d0f8      	beq.n	800f342 <sbrk_aligned+0x22>
 800f350:	1a21      	subs	r1, r4, r0
 800f352:	4628      	mov	r0, r5
 800f354:	f000 f89a 	bl	800f48c <_sbrk_r>
 800f358:	3001      	adds	r0, #1
 800f35a:	d1f2      	bne.n	800f342 <sbrk_aligned+0x22>
 800f35c:	e7ef      	b.n	800f33e <sbrk_aligned+0x1e>
 800f35e:	bf00      	nop
 800f360:	20002420 	.word	0x20002420

0800f364 <_malloc_r>:
 800f364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f368:	1ccd      	adds	r5, r1, #3
 800f36a:	f025 0503 	bic.w	r5, r5, #3
 800f36e:	3508      	adds	r5, #8
 800f370:	2d0c      	cmp	r5, #12
 800f372:	bf38      	it	cc
 800f374:	250c      	movcc	r5, #12
 800f376:	2d00      	cmp	r5, #0
 800f378:	4606      	mov	r6, r0
 800f37a:	db01      	blt.n	800f380 <_malloc_r+0x1c>
 800f37c:	42a9      	cmp	r1, r5
 800f37e:	d904      	bls.n	800f38a <_malloc_r+0x26>
 800f380:	230c      	movs	r3, #12
 800f382:	6033      	str	r3, [r6, #0]
 800f384:	2000      	movs	r0, #0
 800f386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f38a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f460 <_malloc_r+0xfc>
 800f38e:	f000 f869 	bl	800f464 <__malloc_lock>
 800f392:	f8d8 3000 	ldr.w	r3, [r8]
 800f396:	461c      	mov	r4, r3
 800f398:	bb44      	cbnz	r4, 800f3ec <_malloc_r+0x88>
 800f39a:	4629      	mov	r1, r5
 800f39c:	4630      	mov	r0, r6
 800f39e:	f7ff ffbf 	bl	800f320 <sbrk_aligned>
 800f3a2:	1c43      	adds	r3, r0, #1
 800f3a4:	4604      	mov	r4, r0
 800f3a6:	d158      	bne.n	800f45a <_malloc_r+0xf6>
 800f3a8:	f8d8 4000 	ldr.w	r4, [r8]
 800f3ac:	4627      	mov	r7, r4
 800f3ae:	2f00      	cmp	r7, #0
 800f3b0:	d143      	bne.n	800f43a <_malloc_r+0xd6>
 800f3b2:	2c00      	cmp	r4, #0
 800f3b4:	d04b      	beq.n	800f44e <_malloc_r+0xea>
 800f3b6:	6823      	ldr	r3, [r4, #0]
 800f3b8:	4639      	mov	r1, r7
 800f3ba:	4630      	mov	r0, r6
 800f3bc:	eb04 0903 	add.w	r9, r4, r3
 800f3c0:	f000 f864 	bl	800f48c <_sbrk_r>
 800f3c4:	4581      	cmp	r9, r0
 800f3c6:	d142      	bne.n	800f44e <_malloc_r+0xea>
 800f3c8:	6821      	ldr	r1, [r4, #0]
 800f3ca:	1a6d      	subs	r5, r5, r1
 800f3cc:	4629      	mov	r1, r5
 800f3ce:	4630      	mov	r0, r6
 800f3d0:	f7ff ffa6 	bl	800f320 <sbrk_aligned>
 800f3d4:	3001      	adds	r0, #1
 800f3d6:	d03a      	beq.n	800f44e <_malloc_r+0xea>
 800f3d8:	6823      	ldr	r3, [r4, #0]
 800f3da:	442b      	add	r3, r5
 800f3dc:	6023      	str	r3, [r4, #0]
 800f3de:	f8d8 3000 	ldr.w	r3, [r8]
 800f3e2:	685a      	ldr	r2, [r3, #4]
 800f3e4:	bb62      	cbnz	r2, 800f440 <_malloc_r+0xdc>
 800f3e6:	f8c8 7000 	str.w	r7, [r8]
 800f3ea:	e00f      	b.n	800f40c <_malloc_r+0xa8>
 800f3ec:	6822      	ldr	r2, [r4, #0]
 800f3ee:	1b52      	subs	r2, r2, r5
 800f3f0:	d420      	bmi.n	800f434 <_malloc_r+0xd0>
 800f3f2:	2a0b      	cmp	r2, #11
 800f3f4:	d917      	bls.n	800f426 <_malloc_r+0xc2>
 800f3f6:	1961      	adds	r1, r4, r5
 800f3f8:	42a3      	cmp	r3, r4
 800f3fa:	6025      	str	r5, [r4, #0]
 800f3fc:	bf18      	it	ne
 800f3fe:	6059      	strne	r1, [r3, #4]
 800f400:	6863      	ldr	r3, [r4, #4]
 800f402:	bf08      	it	eq
 800f404:	f8c8 1000 	streq.w	r1, [r8]
 800f408:	5162      	str	r2, [r4, r5]
 800f40a:	604b      	str	r3, [r1, #4]
 800f40c:	4630      	mov	r0, r6
 800f40e:	f000 f82f 	bl	800f470 <__malloc_unlock>
 800f412:	f104 000b 	add.w	r0, r4, #11
 800f416:	1d23      	adds	r3, r4, #4
 800f418:	f020 0007 	bic.w	r0, r0, #7
 800f41c:	1ac2      	subs	r2, r0, r3
 800f41e:	bf1c      	itt	ne
 800f420:	1a1b      	subne	r3, r3, r0
 800f422:	50a3      	strne	r3, [r4, r2]
 800f424:	e7af      	b.n	800f386 <_malloc_r+0x22>
 800f426:	6862      	ldr	r2, [r4, #4]
 800f428:	42a3      	cmp	r3, r4
 800f42a:	bf0c      	ite	eq
 800f42c:	f8c8 2000 	streq.w	r2, [r8]
 800f430:	605a      	strne	r2, [r3, #4]
 800f432:	e7eb      	b.n	800f40c <_malloc_r+0xa8>
 800f434:	4623      	mov	r3, r4
 800f436:	6864      	ldr	r4, [r4, #4]
 800f438:	e7ae      	b.n	800f398 <_malloc_r+0x34>
 800f43a:	463c      	mov	r4, r7
 800f43c:	687f      	ldr	r7, [r7, #4]
 800f43e:	e7b6      	b.n	800f3ae <_malloc_r+0x4a>
 800f440:	461a      	mov	r2, r3
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	42a3      	cmp	r3, r4
 800f446:	d1fb      	bne.n	800f440 <_malloc_r+0xdc>
 800f448:	2300      	movs	r3, #0
 800f44a:	6053      	str	r3, [r2, #4]
 800f44c:	e7de      	b.n	800f40c <_malloc_r+0xa8>
 800f44e:	230c      	movs	r3, #12
 800f450:	6033      	str	r3, [r6, #0]
 800f452:	4630      	mov	r0, r6
 800f454:	f000 f80c 	bl	800f470 <__malloc_unlock>
 800f458:	e794      	b.n	800f384 <_malloc_r+0x20>
 800f45a:	6005      	str	r5, [r0, #0]
 800f45c:	e7d6      	b.n	800f40c <_malloc_r+0xa8>
 800f45e:	bf00      	nop
 800f460:	20002424 	.word	0x20002424

0800f464 <__malloc_lock>:
 800f464:	4801      	ldr	r0, [pc, #4]	@ (800f46c <__malloc_lock+0x8>)
 800f466:	f000 b84b 	b.w	800f500 <__retarget_lock_acquire_recursive>
 800f46a:	bf00      	nop
 800f46c:	20002564 	.word	0x20002564

0800f470 <__malloc_unlock>:
 800f470:	4801      	ldr	r0, [pc, #4]	@ (800f478 <__malloc_unlock+0x8>)
 800f472:	f000 b846 	b.w	800f502 <__retarget_lock_release_recursive>
 800f476:	bf00      	nop
 800f478:	20002564 	.word	0x20002564

0800f47c <memset>:
 800f47c:	4402      	add	r2, r0
 800f47e:	4603      	mov	r3, r0
 800f480:	4293      	cmp	r3, r2
 800f482:	d100      	bne.n	800f486 <memset+0xa>
 800f484:	4770      	bx	lr
 800f486:	f803 1b01 	strb.w	r1, [r3], #1
 800f48a:	e7f9      	b.n	800f480 <memset+0x4>

0800f48c <_sbrk_r>:
 800f48c:	b538      	push	{r3, r4, r5, lr}
 800f48e:	4d06      	ldr	r5, [pc, #24]	@ (800f4a8 <_sbrk_r+0x1c>)
 800f490:	2300      	movs	r3, #0
 800f492:	4604      	mov	r4, r0
 800f494:	4608      	mov	r0, r1
 800f496:	602b      	str	r3, [r5, #0]
 800f498:	f7f7 f868 	bl	800656c <_sbrk>
 800f49c:	1c43      	adds	r3, r0, #1
 800f49e:	d102      	bne.n	800f4a6 <_sbrk_r+0x1a>
 800f4a0:	682b      	ldr	r3, [r5, #0]
 800f4a2:	b103      	cbz	r3, 800f4a6 <_sbrk_r+0x1a>
 800f4a4:	6023      	str	r3, [r4, #0]
 800f4a6:	bd38      	pop	{r3, r4, r5, pc}
 800f4a8:	20002560 	.word	0x20002560

0800f4ac <__errno>:
 800f4ac:	4b01      	ldr	r3, [pc, #4]	@ (800f4b4 <__errno+0x8>)
 800f4ae:	6818      	ldr	r0, [r3, #0]
 800f4b0:	4770      	bx	lr
 800f4b2:	bf00      	nop
 800f4b4:	200003a0 	.word	0x200003a0

0800f4b8 <__libc_init_array>:
 800f4b8:	b570      	push	{r4, r5, r6, lr}
 800f4ba:	4d0d      	ldr	r5, [pc, #52]	@ (800f4f0 <__libc_init_array+0x38>)
 800f4bc:	4c0d      	ldr	r4, [pc, #52]	@ (800f4f4 <__libc_init_array+0x3c>)
 800f4be:	1b64      	subs	r4, r4, r5
 800f4c0:	10a4      	asrs	r4, r4, #2
 800f4c2:	2600      	movs	r6, #0
 800f4c4:	42a6      	cmp	r6, r4
 800f4c6:	d109      	bne.n	800f4dc <__libc_init_array+0x24>
 800f4c8:	4d0b      	ldr	r5, [pc, #44]	@ (800f4f8 <__libc_init_array+0x40>)
 800f4ca:	4c0c      	ldr	r4, [pc, #48]	@ (800f4fc <__libc_init_array+0x44>)
 800f4cc:	f000 fe36 	bl	801013c <_init>
 800f4d0:	1b64      	subs	r4, r4, r5
 800f4d2:	10a4      	asrs	r4, r4, #2
 800f4d4:	2600      	movs	r6, #0
 800f4d6:	42a6      	cmp	r6, r4
 800f4d8:	d105      	bne.n	800f4e6 <__libc_init_array+0x2e>
 800f4da:	bd70      	pop	{r4, r5, r6, pc}
 800f4dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4e0:	4798      	blx	r3
 800f4e2:	3601      	adds	r6, #1
 800f4e4:	e7ee      	b.n	800f4c4 <__libc_init_array+0xc>
 800f4e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f4ea:	4798      	blx	r3
 800f4ec:	3601      	adds	r6, #1
 800f4ee:	e7f2      	b.n	800f4d6 <__libc_init_array+0x1e>
 800f4f0:	080105bc 	.word	0x080105bc
 800f4f4:	080105bc 	.word	0x080105bc
 800f4f8:	080105bc 	.word	0x080105bc
 800f4fc:	080105c0 	.word	0x080105c0

0800f500 <__retarget_lock_acquire_recursive>:
 800f500:	4770      	bx	lr

0800f502 <__retarget_lock_release_recursive>:
 800f502:	4770      	bx	lr

0800f504 <memcpy>:
 800f504:	440a      	add	r2, r1
 800f506:	4291      	cmp	r1, r2
 800f508:	f100 33ff 	add.w	r3, r0, #4294967295
 800f50c:	d100      	bne.n	800f510 <memcpy+0xc>
 800f50e:	4770      	bx	lr
 800f510:	b510      	push	{r4, lr}
 800f512:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f516:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f51a:	4291      	cmp	r1, r2
 800f51c:	d1f9      	bne.n	800f512 <memcpy+0xe>
 800f51e:	bd10      	pop	{r4, pc}

0800f520 <sqrtf>:
 800f520:	b508      	push	{r3, lr}
 800f522:	ed2d 8b02 	vpush	{d8}
 800f526:	eeb0 8a40 	vmov.f32	s16, s0
 800f52a:	f000 f919 	bl	800f760 <__ieee754_sqrtf>
 800f52e:	eeb4 8a48 	vcmp.f32	s16, s16
 800f532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f536:	d60c      	bvs.n	800f552 <sqrtf+0x32>
 800f538:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f558 <sqrtf+0x38>
 800f53c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f544:	d505      	bpl.n	800f552 <sqrtf+0x32>
 800f546:	f7ff ffb1 	bl	800f4ac <__errno>
 800f54a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f54e:	2321      	movs	r3, #33	@ 0x21
 800f550:	6003      	str	r3, [r0, #0]
 800f552:	ecbd 8b02 	vpop	{d8}
 800f556:	bd08      	pop	{r3, pc}
 800f558:	00000000 	.word	0x00000000

0800f55c <cosf>:
 800f55c:	ee10 3a10 	vmov	r3, s0
 800f560:	b507      	push	{r0, r1, r2, lr}
 800f562:	4a1e      	ldr	r2, [pc, #120]	@ (800f5dc <cosf+0x80>)
 800f564:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f568:	4293      	cmp	r3, r2
 800f56a:	d806      	bhi.n	800f57a <cosf+0x1e>
 800f56c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f5e0 <cosf+0x84>
 800f570:	b003      	add	sp, #12
 800f572:	f85d eb04 	ldr.w	lr, [sp], #4
 800f576:	f000 b8f7 	b.w	800f768 <__kernel_cosf>
 800f57a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f57e:	d304      	bcc.n	800f58a <cosf+0x2e>
 800f580:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f584:	b003      	add	sp, #12
 800f586:	f85d fb04 	ldr.w	pc, [sp], #4
 800f58a:	4668      	mov	r0, sp
 800f58c:	f000 f98c 	bl	800f8a8 <__ieee754_rem_pio2f>
 800f590:	f000 0003 	and.w	r0, r0, #3
 800f594:	2801      	cmp	r0, #1
 800f596:	d009      	beq.n	800f5ac <cosf+0x50>
 800f598:	2802      	cmp	r0, #2
 800f59a:	d010      	beq.n	800f5be <cosf+0x62>
 800f59c:	b9b0      	cbnz	r0, 800f5cc <cosf+0x70>
 800f59e:	eddd 0a01 	vldr	s1, [sp, #4]
 800f5a2:	ed9d 0a00 	vldr	s0, [sp]
 800f5a6:	f000 f8df 	bl	800f768 <__kernel_cosf>
 800f5aa:	e7eb      	b.n	800f584 <cosf+0x28>
 800f5ac:	eddd 0a01 	vldr	s1, [sp, #4]
 800f5b0:	ed9d 0a00 	vldr	s0, [sp]
 800f5b4:	f000 f930 	bl	800f818 <__kernel_sinf>
 800f5b8:	eeb1 0a40 	vneg.f32	s0, s0
 800f5bc:	e7e2      	b.n	800f584 <cosf+0x28>
 800f5be:	eddd 0a01 	vldr	s1, [sp, #4]
 800f5c2:	ed9d 0a00 	vldr	s0, [sp]
 800f5c6:	f000 f8cf 	bl	800f768 <__kernel_cosf>
 800f5ca:	e7f5      	b.n	800f5b8 <cosf+0x5c>
 800f5cc:	eddd 0a01 	vldr	s1, [sp, #4]
 800f5d0:	ed9d 0a00 	vldr	s0, [sp]
 800f5d4:	2001      	movs	r0, #1
 800f5d6:	f000 f91f 	bl	800f818 <__kernel_sinf>
 800f5da:	e7d3      	b.n	800f584 <cosf+0x28>
 800f5dc:	3f490fd8 	.word	0x3f490fd8
 800f5e0:	00000000 	.word	0x00000000

0800f5e4 <sinf>:
 800f5e4:	ee10 3a10 	vmov	r3, s0
 800f5e8:	b507      	push	{r0, r1, r2, lr}
 800f5ea:	4a1f      	ldr	r2, [pc, #124]	@ (800f668 <sinf+0x84>)
 800f5ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f5f0:	4293      	cmp	r3, r2
 800f5f2:	d807      	bhi.n	800f604 <sinf+0x20>
 800f5f4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f66c <sinf+0x88>
 800f5f8:	2000      	movs	r0, #0
 800f5fa:	b003      	add	sp, #12
 800f5fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f600:	f000 b90a 	b.w	800f818 <__kernel_sinf>
 800f604:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f608:	d304      	bcc.n	800f614 <sinf+0x30>
 800f60a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f60e:	b003      	add	sp, #12
 800f610:	f85d fb04 	ldr.w	pc, [sp], #4
 800f614:	4668      	mov	r0, sp
 800f616:	f000 f947 	bl	800f8a8 <__ieee754_rem_pio2f>
 800f61a:	f000 0003 	and.w	r0, r0, #3
 800f61e:	2801      	cmp	r0, #1
 800f620:	d00a      	beq.n	800f638 <sinf+0x54>
 800f622:	2802      	cmp	r0, #2
 800f624:	d00f      	beq.n	800f646 <sinf+0x62>
 800f626:	b9c0      	cbnz	r0, 800f65a <sinf+0x76>
 800f628:	eddd 0a01 	vldr	s1, [sp, #4]
 800f62c:	ed9d 0a00 	vldr	s0, [sp]
 800f630:	2001      	movs	r0, #1
 800f632:	f000 f8f1 	bl	800f818 <__kernel_sinf>
 800f636:	e7ea      	b.n	800f60e <sinf+0x2a>
 800f638:	eddd 0a01 	vldr	s1, [sp, #4]
 800f63c:	ed9d 0a00 	vldr	s0, [sp]
 800f640:	f000 f892 	bl	800f768 <__kernel_cosf>
 800f644:	e7e3      	b.n	800f60e <sinf+0x2a>
 800f646:	eddd 0a01 	vldr	s1, [sp, #4]
 800f64a:	ed9d 0a00 	vldr	s0, [sp]
 800f64e:	2001      	movs	r0, #1
 800f650:	f000 f8e2 	bl	800f818 <__kernel_sinf>
 800f654:	eeb1 0a40 	vneg.f32	s0, s0
 800f658:	e7d9      	b.n	800f60e <sinf+0x2a>
 800f65a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f65e:	ed9d 0a00 	vldr	s0, [sp]
 800f662:	f000 f881 	bl	800f768 <__kernel_cosf>
 800f666:	e7f5      	b.n	800f654 <sinf+0x70>
 800f668:	3f490fd8 	.word	0x3f490fd8
 800f66c:	00000000 	.word	0x00000000

0800f670 <fmax>:
 800f670:	b508      	push	{r3, lr}
 800f672:	ed2d 8b04 	vpush	{d8-d9}
 800f676:	eeb0 8a40 	vmov.f32	s16, s0
 800f67a:	eef0 8a60 	vmov.f32	s17, s1
 800f67e:	eeb0 9a41 	vmov.f32	s18, s2
 800f682:	eef0 9a61 	vmov.f32	s19, s3
 800f686:	f000 f847 	bl	800f718 <__fpclassifyd>
 800f68a:	b950      	cbnz	r0, 800f6a2 <fmax+0x32>
 800f68c:	eeb0 8a49 	vmov.f32	s16, s18
 800f690:	eef0 8a69 	vmov.f32	s17, s19
 800f694:	eeb0 0a48 	vmov.f32	s0, s16
 800f698:	eef0 0a68 	vmov.f32	s1, s17
 800f69c:	ecbd 8b04 	vpop	{d8-d9}
 800f6a0:	bd08      	pop	{r3, pc}
 800f6a2:	eeb0 0a49 	vmov.f32	s0, s18
 800f6a6:	eef0 0a69 	vmov.f32	s1, s19
 800f6aa:	f000 f835 	bl	800f718 <__fpclassifyd>
 800f6ae:	2800      	cmp	r0, #0
 800f6b0:	d0f0      	beq.n	800f694 <fmax+0x24>
 800f6b2:	ec53 2b19 	vmov	r2, r3, d9
 800f6b6:	ec51 0b18 	vmov	r0, r1, d8
 800f6ba:	f7f1 f9f9 	bl	8000ab0 <__aeabi_dcmpgt>
 800f6be:	2800      	cmp	r0, #0
 800f6c0:	d0e4      	beq.n	800f68c <fmax+0x1c>
 800f6c2:	e7e7      	b.n	800f694 <fmax+0x24>

0800f6c4 <fmin>:
 800f6c4:	b508      	push	{r3, lr}
 800f6c6:	ed2d 8b04 	vpush	{d8-d9}
 800f6ca:	eeb0 8a40 	vmov.f32	s16, s0
 800f6ce:	eef0 8a60 	vmov.f32	s17, s1
 800f6d2:	eeb0 9a41 	vmov.f32	s18, s2
 800f6d6:	eef0 9a61 	vmov.f32	s19, s3
 800f6da:	f000 f81d 	bl	800f718 <__fpclassifyd>
 800f6de:	b950      	cbnz	r0, 800f6f6 <fmin+0x32>
 800f6e0:	eeb0 8a49 	vmov.f32	s16, s18
 800f6e4:	eef0 8a69 	vmov.f32	s17, s19
 800f6e8:	eeb0 0a48 	vmov.f32	s0, s16
 800f6ec:	eef0 0a68 	vmov.f32	s1, s17
 800f6f0:	ecbd 8b04 	vpop	{d8-d9}
 800f6f4:	bd08      	pop	{r3, pc}
 800f6f6:	eeb0 0a49 	vmov.f32	s0, s18
 800f6fa:	eef0 0a69 	vmov.f32	s1, s19
 800f6fe:	f000 f80b 	bl	800f718 <__fpclassifyd>
 800f702:	2800      	cmp	r0, #0
 800f704:	d0f0      	beq.n	800f6e8 <fmin+0x24>
 800f706:	ec53 2b19 	vmov	r2, r3, d9
 800f70a:	ec51 0b18 	vmov	r0, r1, d8
 800f70e:	f7f1 f9b1 	bl	8000a74 <__aeabi_dcmplt>
 800f712:	2800      	cmp	r0, #0
 800f714:	d0e4      	beq.n	800f6e0 <fmin+0x1c>
 800f716:	e7e7      	b.n	800f6e8 <fmin+0x24>

0800f718 <__fpclassifyd>:
 800f718:	ec51 0b10 	vmov	r0, r1, d0
 800f71c:	460b      	mov	r3, r1
 800f71e:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 800f722:	b510      	push	{r4, lr}
 800f724:	d104      	bne.n	800f730 <__fpclassifyd+0x18>
 800f726:	2800      	cmp	r0, #0
 800f728:	bf0c      	ite	eq
 800f72a:	2002      	moveq	r0, #2
 800f72c:	2003      	movne	r0, #3
 800f72e:	bd10      	pop	{r4, pc}
 800f730:	4a09      	ldr	r2, [pc, #36]	@ (800f758 <__fpclassifyd+0x40>)
 800f732:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 800f736:	4294      	cmp	r4, r2
 800f738:	d908      	bls.n	800f74c <__fpclassifyd+0x34>
 800f73a:	4a08      	ldr	r2, [pc, #32]	@ (800f75c <__fpclassifyd+0x44>)
 800f73c:	4213      	tst	r3, r2
 800f73e:	d007      	beq.n	800f750 <__fpclassifyd+0x38>
 800f740:	4291      	cmp	r1, r2
 800f742:	d107      	bne.n	800f754 <__fpclassifyd+0x3c>
 800f744:	fab0 f080 	clz	r0, r0
 800f748:	0940      	lsrs	r0, r0, #5
 800f74a:	e7f0      	b.n	800f72e <__fpclassifyd+0x16>
 800f74c:	2004      	movs	r0, #4
 800f74e:	e7ee      	b.n	800f72e <__fpclassifyd+0x16>
 800f750:	2003      	movs	r0, #3
 800f752:	e7ec      	b.n	800f72e <__fpclassifyd+0x16>
 800f754:	2000      	movs	r0, #0
 800f756:	e7ea      	b.n	800f72e <__fpclassifyd+0x16>
 800f758:	7fdfffff 	.word	0x7fdfffff
 800f75c:	7ff00000 	.word	0x7ff00000

0800f760 <__ieee754_sqrtf>:
 800f760:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f764:	4770      	bx	lr
	...

0800f768 <__kernel_cosf>:
 800f768:	ee10 3a10 	vmov	r3, s0
 800f76c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f770:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f774:	eef0 6a40 	vmov.f32	s13, s0
 800f778:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f77c:	d204      	bcs.n	800f788 <__kernel_cosf+0x20>
 800f77e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800f782:	ee17 2a90 	vmov	r2, s15
 800f786:	b342      	cbz	r2, 800f7da <__kernel_cosf+0x72>
 800f788:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f78c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800f7f8 <__kernel_cosf+0x90>
 800f790:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800f7fc <__kernel_cosf+0x94>
 800f794:	4a1a      	ldr	r2, [pc, #104]	@ (800f800 <__kernel_cosf+0x98>)
 800f796:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f79a:	4293      	cmp	r3, r2
 800f79c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f804 <__kernel_cosf+0x9c>
 800f7a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f7a4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800f808 <__kernel_cosf+0xa0>
 800f7a8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f7ac:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800f80c <__kernel_cosf+0xa4>
 800f7b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f7b4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800f810 <__kernel_cosf+0xa8>
 800f7b8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f7bc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800f7c0:	ee26 6a07 	vmul.f32	s12, s12, s14
 800f7c4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f7c8:	eee7 0a06 	vfma.f32	s1, s14, s12
 800f7cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7d0:	d804      	bhi.n	800f7dc <__kernel_cosf+0x74>
 800f7d2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f7d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f7da:	4770      	bx	lr
 800f7dc:	4a0d      	ldr	r2, [pc, #52]	@ (800f814 <__kernel_cosf+0xac>)
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	bf9a      	itte	ls
 800f7e2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800f7e6:	ee07 3a10 	vmovls	s14, r3
 800f7ea:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800f7ee:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f7f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f7f6:	e7ec      	b.n	800f7d2 <__kernel_cosf+0x6a>
 800f7f8:	ad47d74e 	.word	0xad47d74e
 800f7fc:	310f74f6 	.word	0x310f74f6
 800f800:	3e999999 	.word	0x3e999999
 800f804:	b493f27c 	.word	0xb493f27c
 800f808:	37d00d01 	.word	0x37d00d01
 800f80c:	bab60b61 	.word	0xbab60b61
 800f810:	3d2aaaab 	.word	0x3d2aaaab
 800f814:	3f480000 	.word	0x3f480000

0800f818 <__kernel_sinf>:
 800f818:	ee10 3a10 	vmov	r3, s0
 800f81c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f820:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f824:	d204      	bcs.n	800f830 <__kernel_sinf+0x18>
 800f826:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f82a:	ee17 3a90 	vmov	r3, s15
 800f82e:	b35b      	cbz	r3, 800f888 <__kernel_sinf+0x70>
 800f830:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f834:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800f88c <__kernel_sinf+0x74>
 800f838:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800f890 <__kernel_sinf+0x78>
 800f83c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f840:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800f894 <__kernel_sinf+0x7c>
 800f844:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f848:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800f898 <__kernel_sinf+0x80>
 800f84c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f850:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800f89c <__kernel_sinf+0x84>
 800f854:	ee60 6a07 	vmul.f32	s13, s0, s14
 800f858:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f85c:	b930      	cbnz	r0, 800f86c <__kernel_sinf+0x54>
 800f85e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800f8a0 <__kernel_sinf+0x88>
 800f862:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f866:	eea6 0a26 	vfma.f32	s0, s12, s13
 800f86a:	4770      	bx	lr
 800f86c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f870:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800f874:	eee0 7a86 	vfma.f32	s15, s1, s12
 800f878:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800f87c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800f8a4 <__kernel_sinf+0x8c>
 800f880:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800f884:	ee30 0a60 	vsub.f32	s0, s0, s1
 800f888:	4770      	bx	lr
 800f88a:	bf00      	nop
 800f88c:	2f2ec9d3 	.word	0x2f2ec9d3
 800f890:	b2d72f34 	.word	0xb2d72f34
 800f894:	3638ef1b 	.word	0x3638ef1b
 800f898:	b9500d01 	.word	0xb9500d01
 800f89c:	3c088889 	.word	0x3c088889
 800f8a0:	be2aaaab 	.word	0xbe2aaaab
 800f8a4:	3e2aaaab 	.word	0x3e2aaaab

0800f8a8 <__ieee754_rem_pio2f>:
 800f8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8aa:	ee10 6a10 	vmov	r6, s0
 800f8ae:	4b88      	ldr	r3, [pc, #544]	@ (800fad0 <__ieee754_rem_pio2f+0x228>)
 800f8b0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800f8b4:	429d      	cmp	r5, r3
 800f8b6:	b087      	sub	sp, #28
 800f8b8:	4604      	mov	r4, r0
 800f8ba:	d805      	bhi.n	800f8c8 <__ieee754_rem_pio2f+0x20>
 800f8bc:	2300      	movs	r3, #0
 800f8be:	ed80 0a00 	vstr	s0, [r0]
 800f8c2:	6043      	str	r3, [r0, #4]
 800f8c4:	2000      	movs	r0, #0
 800f8c6:	e022      	b.n	800f90e <__ieee754_rem_pio2f+0x66>
 800f8c8:	4b82      	ldr	r3, [pc, #520]	@ (800fad4 <__ieee754_rem_pio2f+0x22c>)
 800f8ca:	429d      	cmp	r5, r3
 800f8cc:	d83a      	bhi.n	800f944 <__ieee754_rem_pio2f+0x9c>
 800f8ce:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f8d2:	2e00      	cmp	r6, #0
 800f8d4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800fad8 <__ieee754_rem_pio2f+0x230>
 800f8d8:	4a80      	ldr	r2, [pc, #512]	@ (800fadc <__ieee754_rem_pio2f+0x234>)
 800f8da:	f023 030f 	bic.w	r3, r3, #15
 800f8de:	dd18      	ble.n	800f912 <__ieee754_rem_pio2f+0x6a>
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	ee70 7a47 	vsub.f32	s15, s0, s14
 800f8e6:	bf09      	itett	eq
 800f8e8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800fae0 <__ieee754_rem_pio2f+0x238>
 800f8ec:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800fae4 <__ieee754_rem_pio2f+0x23c>
 800f8f0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800fae8 <__ieee754_rem_pio2f+0x240>
 800f8f4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800f8f8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800f8fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f900:	ed80 7a00 	vstr	s14, [r0]
 800f904:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f908:	edc0 7a01 	vstr	s15, [r0, #4]
 800f90c:	2001      	movs	r0, #1
 800f90e:	b007      	add	sp, #28
 800f910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f912:	4293      	cmp	r3, r2
 800f914:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f918:	bf09      	itett	eq
 800f91a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800fae0 <__ieee754_rem_pio2f+0x238>
 800f91e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800fae4 <__ieee754_rem_pio2f+0x23c>
 800f922:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800fae8 <__ieee754_rem_pio2f+0x240>
 800f926:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800f92a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f92e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f932:	ed80 7a00 	vstr	s14, [r0]
 800f936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f93a:	edc0 7a01 	vstr	s15, [r0, #4]
 800f93e:	f04f 30ff 	mov.w	r0, #4294967295
 800f942:	e7e4      	b.n	800f90e <__ieee754_rem_pio2f+0x66>
 800f944:	4b69      	ldr	r3, [pc, #420]	@ (800faec <__ieee754_rem_pio2f+0x244>)
 800f946:	429d      	cmp	r5, r3
 800f948:	d873      	bhi.n	800fa32 <__ieee754_rem_pio2f+0x18a>
 800f94a:	f000 f8dd 	bl	800fb08 <fabsf>
 800f94e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800faf0 <__ieee754_rem_pio2f+0x248>
 800f952:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f956:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f95a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f95e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f962:	ee17 0a90 	vmov	r0, s15
 800f966:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800fad8 <__ieee754_rem_pio2f+0x230>
 800f96a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f96e:	281f      	cmp	r0, #31
 800f970:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800fae4 <__ieee754_rem_pio2f+0x23c>
 800f974:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f978:	eeb1 6a47 	vneg.f32	s12, s14
 800f97c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f980:	ee16 1a90 	vmov	r1, s13
 800f984:	dc09      	bgt.n	800f99a <__ieee754_rem_pio2f+0xf2>
 800f986:	4a5b      	ldr	r2, [pc, #364]	@ (800faf4 <__ieee754_rem_pio2f+0x24c>)
 800f988:	1e47      	subs	r7, r0, #1
 800f98a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f98e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800f992:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f996:	4293      	cmp	r3, r2
 800f998:	d107      	bne.n	800f9aa <__ieee754_rem_pio2f+0x102>
 800f99a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800f99e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800f9a2:	2a08      	cmp	r2, #8
 800f9a4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f9a8:	dc14      	bgt.n	800f9d4 <__ieee754_rem_pio2f+0x12c>
 800f9aa:	6021      	str	r1, [r4, #0]
 800f9ac:	ed94 7a00 	vldr	s14, [r4]
 800f9b0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f9b4:	2e00      	cmp	r6, #0
 800f9b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f9ba:	ed84 0a01 	vstr	s0, [r4, #4]
 800f9be:	daa6      	bge.n	800f90e <__ieee754_rem_pio2f+0x66>
 800f9c0:	eeb1 7a47 	vneg.f32	s14, s14
 800f9c4:	eeb1 0a40 	vneg.f32	s0, s0
 800f9c8:	ed84 7a00 	vstr	s14, [r4]
 800f9cc:	ed84 0a01 	vstr	s0, [r4, #4]
 800f9d0:	4240      	negs	r0, r0
 800f9d2:	e79c      	b.n	800f90e <__ieee754_rem_pio2f+0x66>
 800f9d4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800fae0 <__ieee754_rem_pio2f+0x238>
 800f9d8:	eef0 6a40 	vmov.f32	s13, s0
 800f9dc:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f9e0:	ee70 7a66 	vsub.f32	s15, s0, s13
 800f9e4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f9e8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800fae8 <__ieee754_rem_pio2f+0x240>
 800f9ec:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f9f0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f9f4:	ee15 2a90 	vmov	r2, s11
 800f9f8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f9fc:	1a5b      	subs	r3, r3, r1
 800f9fe:	2b19      	cmp	r3, #25
 800fa00:	dc04      	bgt.n	800fa0c <__ieee754_rem_pio2f+0x164>
 800fa02:	edc4 5a00 	vstr	s11, [r4]
 800fa06:	eeb0 0a66 	vmov.f32	s0, s13
 800fa0a:	e7cf      	b.n	800f9ac <__ieee754_rem_pio2f+0x104>
 800fa0c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800faf8 <__ieee754_rem_pio2f+0x250>
 800fa10:	eeb0 0a66 	vmov.f32	s0, s13
 800fa14:	eea6 0a25 	vfma.f32	s0, s12, s11
 800fa18:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800fa1c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800fafc <__ieee754_rem_pio2f+0x254>
 800fa20:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fa24:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800fa28:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fa2c:	ed84 7a00 	vstr	s14, [r4]
 800fa30:	e7bc      	b.n	800f9ac <__ieee754_rem_pio2f+0x104>
 800fa32:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800fa36:	d306      	bcc.n	800fa46 <__ieee754_rem_pio2f+0x19e>
 800fa38:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fa3c:	edc0 7a01 	vstr	s15, [r0, #4]
 800fa40:	edc0 7a00 	vstr	s15, [r0]
 800fa44:	e73e      	b.n	800f8c4 <__ieee754_rem_pio2f+0x1c>
 800fa46:	15ea      	asrs	r2, r5, #23
 800fa48:	3a86      	subs	r2, #134	@ 0x86
 800fa4a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800fa4e:	ee07 3a90 	vmov	s15, r3
 800fa52:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fa56:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800fb00 <__ieee754_rem_pio2f+0x258>
 800fa5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fa5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa62:	ed8d 7a03 	vstr	s14, [sp, #12]
 800fa66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa6a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fa6e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fa72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa76:	ed8d 7a04 	vstr	s14, [sp, #16]
 800fa7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fa82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa86:	edcd 7a05 	vstr	s15, [sp, #20]
 800fa8a:	d11e      	bne.n	800faca <__ieee754_rem_pio2f+0x222>
 800fa8c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fa90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa94:	bf0c      	ite	eq
 800fa96:	2301      	moveq	r3, #1
 800fa98:	2302      	movne	r3, #2
 800fa9a:	491a      	ldr	r1, [pc, #104]	@ (800fb04 <__ieee754_rem_pio2f+0x25c>)
 800fa9c:	9101      	str	r1, [sp, #4]
 800fa9e:	2102      	movs	r1, #2
 800faa0:	9100      	str	r1, [sp, #0]
 800faa2:	a803      	add	r0, sp, #12
 800faa4:	4621      	mov	r1, r4
 800faa6:	f000 f89d 	bl	800fbe4 <__kernel_rem_pio2f>
 800faaa:	2e00      	cmp	r6, #0
 800faac:	f6bf af2f 	bge.w	800f90e <__ieee754_rem_pio2f+0x66>
 800fab0:	edd4 7a00 	vldr	s15, [r4]
 800fab4:	eef1 7a67 	vneg.f32	s15, s15
 800fab8:	edc4 7a00 	vstr	s15, [r4]
 800fabc:	edd4 7a01 	vldr	s15, [r4, #4]
 800fac0:	eef1 7a67 	vneg.f32	s15, s15
 800fac4:	edc4 7a01 	vstr	s15, [r4, #4]
 800fac8:	e782      	b.n	800f9d0 <__ieee754_rem_pio2f+0x128>
 800faca:	2303      	movs	r3, #3
 800facc:	e7e5      	b.n	800fa9a <__ieee754_rem_pio2f+0x1f2>
 800face:	bf00      	nop
 800fad0:	3f490fd8 	.word	0x3f490fd8
 800fad4:	4016cbe3 	.word	0x4016cbe3
 800fad8:	3fc90f80 	.word	0x3fc90f80
 800fadc:	3fc90fd0 	.word	0x3fc90fd0
 800fae0:	37354400 	.word	0x37354400
 800fae4:	37354443 	.word	0x37354443
 800fae8:	2e85a308 	.word	0x2e85a308
 800faec:	43490f80 	.word	0x43490f80
 800faf0:	3f22f984 	.word	0x3f22f984
 800faf4:	080101e4 	.word	0x080101e4
 800faf8:	2e85a300 	.word	0x2e85a300
 800fafc:	248d3132 	.word	0x248d3132
 800fb00:	43800000 	.word	0x43800000
 800fb04:	08010264 	.word	0x08010264

0800fb08 <fabsf>:
 800fb08:	ee10 3a10 	vmov	r3, s0
 800fb0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fb10:	ee00 3a10 	vmov	s0, r3
 800fb14:	4770      	bx	lr
	...

0800fb18 <scalbnf>:
 800fb18:	ee10 3a10 	vmov	r3, s0
 800fb1c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800fb20:	d02b      	beq.n	800fb7a <scalbnf+0x62>
 800fb22:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800fb26:	d302      	bcc.n	800fb2e <scalbnf+0x16>
 800fb28:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fb2c:	4770      	bx	lr
 800fb2e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800fb32:	d123      	bne.n	800fb7c <scalbnf+0x64>
 800fb34:	4b24      	ldr	r3, [pc, #144]	@ (800fbc8 <scalbnf+0xb0>)
 800fb36:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800fbcc <scalbnf+0xb4>
 800fb3a:	4298      	cmp	r0, r3
 800fb3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fb40:	db17      	blt.n	800fb72 <scalbnf+0x5a>
 800fb42:	ee10 3a10 	vmov	r3, s0
 800fb46:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fb4a:	3a19      	subs	r2, #25
 800fb4c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800fb50:	4288      	cmp	r0, r1
 800fb52:	dd15      	ble.n	800fb80 <scalbnf+0x68>
 800fb54:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800fbd0 <scalbnf+0xb8>
 800fb58:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800fbd4 <scalbnf+0xbc>
 800fb5c:	ee10 3a10 	vmov	r3, s0
 800fb60:	eeb0 7a67 	vmov.f32	s14, s15
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	bfb8      	it	lt
 800fb68:	eef0 7a66 	vmovlt.f32	s15, s13
 800fb6c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800fb70:	4770      	bx	lr
 800fb72:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fbd8 <scalbnf+0xc0>
 800fb76:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fb7a:	4770      	bx	lr
 800fb7c:	0dd2      	lsrs	r2, r2, #23
 800fb7e:	e7e5      	b.n	800fb4c <scalbnf+0x34>
 800fb80:	4410      	add	r0, r2
 800fb82:	28fe      	cmp	r0, #254	@ 0xfe
 800fb84:	dce6      	bgt.n	800fb54 <scalbnf+0x3c>
 800fb86:	2800      	cmp	r0, #0
 800fb88:	dd06      	ble.n	800fb98 <scalbnf+0x80>
 800fb8a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fb8e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fb92:	ee00 3a10 	vmov	s0, r3
 800fb96:	4770      	bx	lr
 800fb98:	f110 0f16 	cmn.w	r0, #22
 800fb9c:	da09      	bge.n	800fbb2 <scalbnf+0x9a>
 800fb9e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800fbd8 <scalbnf+0xc0>
 800fba2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800fbdc <scalbnf+0xc4>
 800fba6:	ee10 3a10 	vmov	r3, s0
 800fbaa:	eeb0 7a67 	vmov.f32	s14, s15
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	e7d9      	b.n	800fb66 <scalbnf+0x4e>
 800fbb2:	3019      	adds	r0, #25
 800fbb4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fbb8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fbbc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800fbe0 <scalbnf+0xc8>
 800fbc0:	ee07 3a90 	vmov	s15, r3
 800fbc4:	e7d7      	b.n	800fb76 <scalbnf+0x5e>
 800fbc6:	bf00      	nop
 800fbc8:	ffff3cb0 	.word	0xffff3cb0
 800fbcc:	4c000000 	.word	0x4c000000
 800fbd0:	7149f2ca 	.word	0x7149f2ca
 800fbd4:	f149f2ca 	.word	0xf149f2ca
 800fbd8:	0da24260 	.word	0x0da24260
 800fbdc:	8da24260 	.word	0x8da24260
 800fbe0:	33000000 	.word	0x33000000

0800fbe4 <__kernel_rem_pio2f>:
 800fbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbe8:	ed2d 8b04 	vpush	{d8-d9}
 800fbec:	b0d9      	sub	sp, #356	@ 0x164
 800fbee:	4690      	mov	r8, r2
 800fbf0:	9001      	str	r0, [sp, #4]
 800fbf2:	4ab6      	ldr	r2, [pc, #728]	@ (800fecc <__kernel_rem_pio2f+0x2e8>)
 800fbf4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800fbf6:	f118 0f04 	cmn.w	r8, #4
 800fbfa:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800fbfe:	460f      	mov	r7, r1
 800fc00:	f103 3bff 	add.w	fp, r3, #4294967295
 800fc04:	db26      	blt.n	800fc54 <__kernel_rem_pio2f+0x70>
 800fc06:	f1b8 0203 	subs.w	r2, r8, #3
 800fc0a:	bf48      	it	mi
 800fc0c:	f108 0204 	addmi.w	r2, r8, #4
 800fc10:	10d2      	asrs	r2, r2, #3
 800fc12:	1c55      	adds	r5, r2, #1
 800fc14:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800fc16:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800fedc <__kernel_rem_pio2f+0x2f8>
 800fc1a:	00e8      	lsls	r0, r5, #3
 800fc1c:	eba2 060b 	sub.w	r6, r2, fp
 800fc20:	9002      	str	r0, [sp, #8]
 800fc22:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800fc26:	eb0a 0c0b 	add.w	ip, sl, fp
 800fc2a:	ac1c      	add	r4, sp, #112	@ 0x70
 800fc2c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800fc30:	2000      	movs	r0, #0
 800fc32:	4560      	cmp	r0, ip
 800fc34:	dd10      	ble.n	800fc58 <__kernel_rem_pio2f+0x74>
 800fc36:	a91c      	add	r1, sp, #112	@ 0x70
 800fc38:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800fc3c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800fc40:	2600      	movs	r6, #0
 800fc42:	4556      	cmp	r6, sl
 800fc44:	dc24      	bgt.n	800fc90 <__kernel_rem_pio2f+0xac>
 800fc46:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fc4a:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800fedc <__kernel_rem_pio2f+0x2f8>
 800fc4e:	4684      	mov	ip, r0
 800fc50:	2400      	movs	r4, #0
 800fc52:	e016      	b.n	800fc82 <__kernel_rem_pio2f+0x9e>
 800fc54:	2200      	movs	r2, #0
 800fc56:	e7dc      	b.n	800fc12 <__kernel_rem_pio2f+0x2e>
 800fc58:	42c6      	cmn	r6, r0
 800fc5a:	bf5d      	ittte	pl
 800fc5c:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800fc60:	ee07 1a90 	vmovpl	s15, r1
 800fc64:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800fc68:	eef0 7a47 	vmovmi.f32	s15, s14
 800fc6c:	ece4 7a01 	vstmia	r4!, {s15}
 800fc70:	3001      	adds	r0, #1
 800fc72:	e7de      	b.n	800fc32 <__kernel_rem_pio2f+0x4e>
 800fc74:	ecfe 6a01 	vldmia	lr!, {s13}
 800fc78:	ed3c 7a01 	vldmdb	ip!, {s14}
 800fc7c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fc80:	3401      	adds	r4, #1
 800fc82:	455c      	cmp	r4, fp
 800fc84:	ddf6      	ble.n	800fc74 <__kernel_rem_pio2f+0x90>
 800fc86:	ece9 7a01 	vstmia	r9!, {s15}
 800fc8a:	3601      	adds	r6, #1
 800fc8c:	3004      	adds	r0, #4
 800fc8e:	e7d8      	b.n	800fc42 <__kernel_rem_pio2f+0x5e>
 800fc90:	a908      	add	r1, sp, #32
 800fc92:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc96:	9104      	str	r1, [sp, #16]
 800fc98:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800fc9a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800fed8 <__kernel_rem_pio2f+0x2f4>
 800fc9e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800fed4 <__kernel_rem_pio2f+0x2f0>
 800fca2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800fca6:	9203      	str	r2, [sp, #12]
 800fca8:	4654      	mov	r4, sl
 800fcaa:	00a2      	lsls	r2, r4, #2
 800fcac:	9205      	str	r2, [sp, #20]
 800fcae:	aa58      	add	r2, sp, #352	@ 0x160
 800fcb0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800fcb4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800fcb8:	a944      	add	r1, sp, #272	@ 0x110
 800fcba:	aa08      	add	r2, sp, #32
 800fcbc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800fcc0:	4694      	mov	ip, r2
 800fcc2:	4626      	mov	r6, r4
 800fcc4:	2e00      	cmp	r6, #0
 800fcc6:	dc4c      	bgt.n	800fd62 <__kernel_rem_pio2f+0x17e>
 800fcc8:	4628      	mov	r0, r5
 800fcca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fcce:	f7ff ff23 	bl	800fb18 <scalbnf>
 800fcd2:	eeb0 8a40 	vmov.f32	s16, s0
 800fcd6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800fcda:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fcde:	f000 f9e9 	bl	80100b4 <floorf>
 800fce2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800fce6:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fcea:	2d00      	cmp	r5, #0
 800fcec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fcf0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fcf4:	ee17 9a90 	vmov	r9, s15
 800fcf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fcfc:	ee38 8a67 	vsub.f32	s16, s16, s15
 800fd00:	dd41      	ble.n	800fd86 <__kernel_rem_pio2f+0x1a2>
 800fd02:	f104 3cff 	add.w	ip, r4, #4294967295
 800fd06:	a908      	add	r1, sp, #32
 800fd08:	f1c5 0e08 	rsb	lr, r5, #8
 800fd0c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800fd10:	fa46 f00e 	asr.w	r0, r6, lr
 800fd14:	4481      	add	r9, r0
 800fd16:	fa00 f00e 	lsl.w	r0, r0, lr
 800fd1a:	1a36      	subs	r6, r6, r0
 800fd1c:	f1c5 0007 	rsb	r0, r5, #7
 800fd20:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800fd24:	4106      	asrs	r6, r0
 800fd26:	2e00      	cmp	r6, #0
 800fd28:	dd3c      	ble.n	800fda4 <__kernel_rem_pio2f+0x1c0>
 800fd2a:	f04f 0e00 	mov.w	lr, #0
 800fd2e:	f109 0901 	add.w	r9, r9, #1
 800fd32:	4670      	mov	r0, lr
 800fd34:	4574      	cmp	r4, lr
 800fd36:	dc68      	bgt.n	800fe0a <__kernel_rem_pio2f+0x226>
 800fd38:	2d00      	cmp	r5, #0
 800fd3a:	dd03      	ble.n	800fd44 <__kernel_rem_pio2f+0x160>
 800fd3c:	2d01      	cmp	r5, #1
 800fd3e:	d074      	beq.n	800fe2a <__kernel_rem_pio2f+0x246>
 800fd40:	2d02      	cmp	r5, #2
 800fd42:	d07d      	beq.n	800fe40 <__kernel_rem_pio2f+0x25c>
 800fd44:	2e02      	cmp	r6, #2
 800fd46:	d12d      	bne.n	800fda4 <__kernel_rem_pio2f+0x1c0>
 800fd48:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fd4c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fd50:	b340      	cbz	r0, 800fda4 <__kernel_rem_pio2f+0x1c0>
 800fd52:	4628      	mov	r0, r5
 800fd54:	9306      	str	r3, [sp, #24]
 800fd56:	f7ff fedf 	bl	800fb18 <scalbnf>
 800fd5a:	9b06      	ldr	r3, [sp, #24]
 800fd5c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fd60:	e020      	b.n	800fda4 <__kernel_rem_pio2f+0x1c0>
 800fd62:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fd66:	3e01      	subs	r6, #1
 800fd68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd70:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800fd74:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fd78:	ecac 0a01 	vstmia	ip!, {s0}
 800fd7c:	ed30 0a01 	vldmdb	r0!, {s0}
 800fd80:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fd84:	e79e      	b.n	800fcc4 <__kernel_rem_pio2f+0xe0>
 800fd86:	d105      	bne.n	800fd94 <__kernel_rem_pio2f+0x1b0>
 800fd88:	1e60      	subs	r0, r4, #1
 800fd8a:	a908      	add	r1, sp, #32
 800fd8c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800fd90:	11f6      	asrs	r6, r6, #7
 800fd92:	e7c8      	b.n	800fd26 <__kernel_rem_pio2f+0x142>
 800fd94:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fd98:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda0:	da31      	bge.n	800fe06 <__kernel_rem_pio2f+0x222>
 800fda2:	2600      	movs	r6, #0
 800fda4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fda8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdac:	f040 8098 	bne.w	800fee0 <__kernel_rem_pio2f+0x2fc>
 800fdb0:	1e60      	subs	r0, r4, #1
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	4550      	cmp	r0, sl
 800fdb6:	da4b      	bge.n	800fe50 <__kernel_rem_pio2f+0x26c>
 800fdb8:	2a00      	cmp	r2, #0
 800fdba:	d065      	beq.n	800fe88 <__kernel_rem_pio2f+0x2a4>
 800fdbc:	3c01      	subs	r4, #1
 800fdbe:	ab08      	add	r3, sp, #32
 800fdc0:	3d08      	subs	r5, #8
 800fdc2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d0f8      	beq.n	800fdbc <__kernel_rem_pio2f+0x1d8>
 800fdca:	4628      	mov	r0, r5
 800fdcc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fdd0:	f7ff fea2 	bl	800fb18 <scalbnf>
 800fdd4:	1c63      	adds	r3, r4, #1
 800fdd6:	aa44      	add	r2, sp, #272	@ 0x110
 800fdd8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800fed8 <__kernel_rem_pio2f+0x2f4>
 800fddc:	0099      	lsls	r1, r3, #2
 800fdde:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fde2:	4623      	mov	r3, r4
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	f280 80a9 	bge.w	800ff3c <__kernel_rem_pio2f+0x358>
 800fdea:	4623      	mov	r3, r4
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	f2c0 80c7 	blt.w	800ff80 <__kernel_rem_pio2f+0x39c>
 800fdf2:	aa44      	add	r2, sp, #272	@ 0x110
 800fdf4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800fdf8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800fed0 <__kernel_rem_pio2f+0x2ec>
 800fdfc:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800fedc <__kernel_rem_pio2f+0x2f8>
 800fe00:	2000      	movs	r0, #0
 800fe02:	1ae2      	subs	r2, r4, r3
 800fe04:	e0b1      	b.n	800ff6a <__kernel_rem_pio2f+0x386>
 800fe06:	2602      	movs	r6, #2
 800fe08:	e78f      	b.n	800fd2a <__kernel_rem_pio2f+0x146>
 800fe0a:	f852 1b04 	ldr.w	r1, [r2], #4
 800fe0e:	b948      	cbnz	r0, 800fe24 <__kernel_rem_pio2f+0x240>
 800fe10:	b121      	cbz	r1, 800fe1c <__kernel_rem_pio2f+0x238>
 800fe12:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800fe16:	f842 1c04 	str.w	r1, [r2, #-4]
 800fe1a:	2101      	movs	r1, #1
 800fe1c:	f10e 0e01 	add.w	lr, lr, #1
 800fe20:	4608      	mov	r0, r1
 800fe22:	e787      	b.n	800fd34 <__kernel_rem_pio2f+0x150>
 800fe24:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800fe28:	e7f5      	b.n	800fe16 <__kernel_rem_pio2f+0x232>
 800fe2a:	f104 3cff 	add.w	ip, r4, #4294967295
 800fe2e:	aa08      	add	r2, sp, #32
 800fe30:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fe34:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fe38:	a908      	add	r1, sp, #32
 800fe3a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800fe3e:	e781      	b.n	800fd44 <__kernel_rem_pio2f+0x160>
 800fe40:	f104 3cff 	add.w	ip, r4, #4294967295
 800fe44:	aa08      	add	r2, sp, #32
 800fe46:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fe4a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fe4e:	e7f3      	b.n	800fe38 <__kernel_rem_pio2f+0x254>
 800fe50:	a908      	add	r1, sp, #32
 800fe52:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800fe56:	3801      	subs	r0, #1
 800fe58:	430a      	orrs	r2, r1
 800fe5a:	e7ab      	b.n	800fdb4 <__kernel_rem_pio2f+0x1d0>
 800fe5c:	3201      	adds	r2, #1
 800fe5e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800fe62:	2e00      	cmp	r6, #0
 800fe64:	d0fa      	beq.n	800fe5c <__kernel_rem_pio2f+0x278>
 800fe66:	9905      	ldr	r1, [sp, #20]
 800fe68:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800fe6c:	eb0d 0001 	add.w	r0, sp, r1
 800fe70:	18e6      	adds	r6, r4, r3
 800fe72:	a91c      	add	r1, sp, #112	@ 0x70
 800fe74:	f104 0c01 	add.w	ip, r4, #1
 800fe78:	384c      	subs	r0, #76	@ 0x4c
 800fe7a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800fe7e:	4422      	add	r2, r4
 800fe80:	4562      	cmp	r2, ip
 800fe82:	da04      	bge.n	800fe8e <__kernel_rem_pio2f+0x2aa>
 800fe84:	4614      	mov	r4, r2
 800fe86:	e710      	b.n	800fcaa <__kernel_rem_pio2f+0xc6>
 800fe88:	9804      	ldr	r0, [sp, #16]
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	e7e7      	b.n	800fe5e <__kernel_rem_pio2f+0x27a>
 800fe8e:	9903      	ldr	r1, [sp, #12]
 800fe90:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fe94:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800fe98:	9105      	str	r1, [sp, #20]
 800fe9a:	ee07 1a90 	vmov	s15, r1
 800fe9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fea2:	2400      	movs	r4, #0
 800fea4:	ece6 7a01 	vstmia	r6!, {s15}
 800fea8:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800fedc <__kernel_rem_pio2f+0x2f8>
 800feac:	46b1      	mov	r9, r6
 800feae:	455c      	cmp	r4, fp
 800feb0:	dd04      	ble.n	800febc <__kernel_rem_pio2f+0x2d8>
 800feb2:	ece0 7a01 	vstmia	r0!, {s15}
 800feb6:	f10c 0c01 	add.w	ip, ip, #1
 800feba:	e7e1      	b.n	800fe80 <__kernel_rem_pio2f+0x29c>
 800febc:	ecfe 6a01 	vldmia	lr!, {s13}
 800fec0:	ed39 7a01 	vldmdb	r9!, {s14}
 800fec4:	3401      	adds	r4, #1
 800fec6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800feca:	e7f0      	b.n	800feae <__kernel_rem_pio2f+0x2ca>
 800fecc:	080105a8 	.word	0x080105a8
 800fed0:	0801057c 	.word	0x0801057c
 800fed4:	43800000 	.word	0x43800000
 800fed8:	3b800000 	.word	0x3b800000
 800fedc:	00000000 	.word	0x00000000
 800fee0:	9b02      	ldr	r3, [sp, #8]
 800fee2:	eeb0 0a48 	vmov.f32	s0, s16
 800fee6:	eba3 0008 	sub.w	r0, r3, r8
 800feea:	f7ff fe15 	bl	800fb18 <scalbnf>
 800feee:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800fed4 <__kernel_rem_pio2f+0x2f0>
 800fef2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fefa:	db19      	blt.n	800ff30 <__kernel_rem_pio2f+0x34c>
 800fefc:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800fed8 <__kernel_rem_pio2f+0x2f4>
 800ff00:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ff04:	aa08      	add	r2, sp, #32
 800ff06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff0a:	3508      	adds	r5, #8
 800ff0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff10:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ff14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff18:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ff1c:	ee10 3a10 	vmov	r3, s0
 800ff20:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ff24:	ee17 3a90 	vmov	r3, s15
 800ff28:	3401      	adds	r4, #1
 800ff2a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ff2e:	e74c      	b.n	800fdca <__kernel_rem_pio2f+0x1e6>
 800ff30:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ff34:	aa08      	add	r2, sp, #32
 800ff36:	ee10 3a10 	vmov	r3, s0
 800ff3a:	e7f6      	b.n	800ff2a <__kernel_rem_pio2f+0x346>
 800ff3c:	a808      	add	r0, sp, #32
 800ff3e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ff42:	9001      	str	r0, [sp, #4]
 800ff44:	ee07 0a90 	vmov	s15, r0
 800ff48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff4c:	3b01      	subs	r3, #1
 800ff4e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ff52:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ff56:	ed62 7a01 	vstmdb	r2!, {s15}
 800ff5a:	e743      	b.n	800fde4 <__kernel_rem_pio2f+0x200>
 800ff5c:	ecfc 6a01 	vldmia	ip!, {s13}
 800ff60:	ecb5 7a01 	vldmia	r5!, {s14}
 800ff64:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ff68:	3001      	adds	r0, #1
 800ff6a:	4550      	cmp	r0, sl
 800ff6c:	dc01      	bgt.n	800ff72 <__kernel_rem_pio2f+0x38e>
 800ff6e:	4290      	cmp	r0, r2
 800ff70:	ddf4      	ble.n	800ff5c <__kernel_rem_pio2f+0x378>
 800ff72:	a858      	add	r0, sp, #352	@ 0x160
 800ff74:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ff78:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800ff7c:	3b01      	subs	r3, #1
 800ff7e:	e735      	b.n	800fdec <__kernel_rem_pio2f+0x208>
 800ff80:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ff82:	2b02      	cmp	r3, #2
 800ff84:	dc09      	bgt.n	800ff9a <__kernel_rem_pio2f+0x3b6>
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	dc27      	bgt.n	800ffda <__kernel_rem_pio2f+0x3f6>
 800ff8a:	d040      	beq.n	801000e <__kernel_rem_pio2f+0x42a>
 800ff8c:	f009 0007 	and.w	r0, r9, #7
 800ff90:	b059      	add	sp, #356	@ 0x164
 800ff92:	ecbd 8b04 	vpop	{d8-d9}
 800ff96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff9a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ff9c:	2b03      	cmp	r3, #3
 800ff9e:	d1f5      	bne.n	800ff8c <__kernel_rem_pio2f+0x3a8>
 800ffa0:	aa30      	add	r2, sp, #192	@ 0xc0
 800ffa2:	1f0b      	subs	r3, r1, #4
 800ffa4:	4413      	add	r3, r2
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	4620      	mov	r0, r4
 800ffaa:	2800      	cmp	r0, #0
 800ffac:	dc50      	bgt.n	8010050 <__kernel_rem_pio2f+0x46c>
 800ffae:	4622      	mov	r2, r4
 800ffb0:	2a01      	cmp	r2, #1
 800ffb2:	dc5d      	bgt.n	8010070 <__kernel_rem_pio2f+0x48c>
 800ffb4:	ab30      	add	r3, sp, #192	@ 0xc0
 800ffb6:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800fedc <__kernel_rem_pio2f+0x2f8>
 800ffba:	440b      	add	r3, r1
 800ffbc:	2c01      	cmp	r4, #1
 800ffbe:	dc67      	bgt.n	8010090 <__kernel_rem_pio2f+0x4ac>
 800ffc0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800ffc4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800ffc8:	2e00      	cmp	r6, #0
 800ffca:	d167      	bne.n	801009c <__kernel_rem_pio2f+0x4b8>
 800ffcc:	edc7 6a00 	vstr	s13, [r7]
 800ffd0:	ed87 7a01 	vstr	s14, [r7, #4]
 800ffd4:	edc7 7a02 	vstr	s15, [r7, #8]
 800ffd8:	e7d8      	b.n	800ff8c <__kernel_rem_pio2f+0x3a8>
 800ffda:	ab30      	add	r3, sp, #192	@ 0xc0
 800ffdc:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800fedc <__kernel_rem_pio2f+0x2f8>
 800ffe0:	440b      	add	r3, r1
 800ffe2:	4622      	mov	r2, r4
 800ffe4:	2a00      	cmp	r2, #0
 800ffe6:	da24      	bge.n	8010032 <__kernel_rem_pio2f+0x44e>
 800ffe8:	b34e      	cbz	r6, 801003e <__kernel_rem_pio2f+0x45a>
 800ffea:	eef1 7a47 	vneg.f32	s15, s14
 800ffee:	edc7 7a00 	vstr	s15, [r7]
 800fff2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800fff6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fffa:	aa31      	add	r2, sp, #196	@ 0xc4
 800fffc:	2301      	movs	r3, #1
 800fffe:	429c      	cmp	r4, r3
 8010000:	da20      	bge.n	8010044 <__kernel_rem_pio2f+0x460>
 8010002:	b10e      	cbz	r6, 8010008 <__kernel_rem_pio2f+0x424>
 8010004:	eef1 7a67 	vneg.f32	s15, s15
 8010008:	edc7 7a01 	vstr	s15, [r7, #4]
 801000c:	e7be      	b.n	800ff8c <__kernel_rem_pio2f+0x3a8>
 801000e:	ab30      	add	r3, sp, #192	@ 0xc0
 8010010:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800fedc <__kernel_rem_pio2f+0x2f8>
 8010014:	440b      	add	r3, r1
 8010016:	2c00      	cmp	r4, #0
 8010018:	da05      	bge.n	8010026 <__kernel_rem_pio2f+0x442>
 801001a:	b10e      	cbz	r6, 8010020 <__kernel_rem_pio2f+0x43c>
 801001c:	eef1 7a67 	vneg.f32	s15, s15
 8010020:	edc7 7a00 	vstr	s15, [r7]
 8010024:	e7b2      	b.n	800ff8c <__kernel_rem_pio2f+0x3a8>
 8010026:	ed33 7a01 	vldmdb	r3!, {s14}
 801002a:	3c01      	subs	r4, #1
 801002c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010030:	e7f1      	b.n	8010016 <__kernel_rem_pio2f+0x432>
 8010032:	ed73 7a01 	vldmdb	r3!, {s15}
 8010036:	3a01      	subs	r2, #1
 8010038:	ee37 7a27 	vadd.f32	s14, s14, s15
 801003c:	e7d2      	b.n	800ffe4 <__kernel_rem_pio2f+0x400>
 801003e:	eef0 7a47 	vmov.f32	s15, s14
 8010042:	e7d4      	b.n	800ffee <__kernel_rem_pio2f+0x40a>
 8010044:	ecb2 7a01 	vldmia	r2!, {s14}
 8010048:	3301      	adds	r3, #1
 801004a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801004e:	e7d6      	b.n	800fffe <__kernel_rem_pio2f+0x41a>
 8010050:	ed72 7a01 	vldmdb	r2!, {s15}
 8010054:	edd2 6a01 	vldr	s13, [r2, #4]
 8010058:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801005c:	3801      	subs	r0, #1
 801005e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010062:	ed82 7a00 	vstr	s14, [r2]
 8010066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801006a:	edc2 7a01 	vstr	s15, [r2, #4]
 801006e:	e79c      	b.n	800ffaa <__kernel_rem_pio2f+0x3c6>
 8010070:	ed73 7a01 	vldmdb	r3!, {s15}
 8010074:	edd3 6a01 	vldr	s13, [r3, #4]
 8010078:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801007c:	3a01      	subs	r2, #1
 801007e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010082:	ed83 7a00 	vstr	s14, [r3]
 8010086:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801008a:	edc3 7a01 	vstr	s15, [r3, #4]
 801008e:	e78f      	b.n	800ffb0 <__kernel_rem_pio2f+0x3cc>
 8010090:	ed33 7a01 	vldmdb	r3!, {s14}
 8010094:	3c01      	subs	r4, #1
 8010096:	ee77 7a87 	vadd.f32	s15, s15, s14
 801009a:	e78f      	b.n	800ffbc <__kernel_rem_pio2f+0x3d8>
 801009c:	eef1 6a66 	vneg.f32	s13, s13
 80100a0:	eeb1 7a47 	vneg.f32	s14, s14
 80100a4:	edc7 6a00 	vstr	s13, [r7]
 80100a8:	ed87 7a01 	vstr	s14, [r7, #4]
 80100ac:	eef1 7a67 	vneg.f32	s15, s15
 80100b0:	e790      	b.n	800ffd4 <__kernel_rem_pio2f+0x3f0>
 80100b2:	bf00      	nop

080100b4 <floorf>:
 80100b4:	ee10 3a10 	vmov	r3, s0
 80100b8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80100bc:	3a7f      	subs	r2, #127	@ 0x7f
 80100be:	2a16      	cmp	r2, #22
 80100c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80100c4:	dc2b      	bgt.n	801011e <floorf+0x6a>
 80100c6:	2a00      	cmp	r2, #0
 80100c8:	da12      	bge.n	80100f0 <floorf+0x3c>
 80100ca:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010130 <floorf+0x7c>
 80100ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80100d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80100d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100da:	dd06      	ble.n	80100ea <floorf+0x36>
 80100dc:	2b00      	cmp	r3, #0
 80100de:	da24      	bge.n	801012a <floorf+0x76>
 80100e0:	2900      	cmp	r1, #0
 80100e2:	4b14      	ldr	r3, [pc, #80]	@ (8010134 <floorf+0x80>)
 80100e4:	bf08      	it	eq
 80100e6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80100ea:	ee00 3a10 	vmov	s0, r3
 80100ee:	4770      	bx	lr
 80100f0:	4911      	ldr	r1, [pc, #68]	@ (8010138 <floorf+0x84>)
 80100f2:	4111      	asrs	r1, r2
 80100f4:	420b      	tst	r3, r1
 80100f6:	d0fa      	beq.n	80100ee <floorf+0x3a>
 80100f8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010130 <floorf+0x7c>
 80100fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010100:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010108:	ddef      	ble.n	80100ea <floorf+0x36>
 801010a:	2b00      	cmp	r3, #0
 801010c:	bfbe      	ittt	lt
 801010e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8010112:	fa40 f202 	asrlt.w	r2, r0, r2
 8010116:	189b      	addlt	r3, r3, r2
 8010118:	ea23 0301 	bic.w	r3, r3, r1
 801011c:	e7e5      	b.n	80100ea <floorf+0x36>
 801011e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010122:	d3e4      	bcc.n	80100ee <floorf+0x3a>
 8010124:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010128:	4770      	bx	lr
 801012a:	2300      	movs	r3, #0
 801012c:	e7dd      	b.n	80100ea <floorf+0x36>
 801012e:	bf00      	nop
 8010130:	7149f2ca 	.word	0x7149f2ca
 8010134:	bf800000 	.word	0xbf800000
 8010138:	007fffff 	.word	0x007fffff

0801013c <_init>:
 801013c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801013e:	bf00      	nop
 8010140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010142:	bc08      	pop	{r3}
 8010144:	469e      	mov	lr, r3
 8010146:	4770      	bx	lr

08010148 <_fini>:
 8010148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801014a:	bf00      	nop
 801014c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801014e:	bc08      	pop	{r3}
 8010150:	469e      	mov	lr, r3
 8010152:	4770      	bx	lr
