
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4a4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800c67c  0800c67c  0000d67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cadc  0800cadc  0000e1b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cadc  0800cadc  0000dadc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cae4  0800cae4  0000e1b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cae4  0800cae4  0000dae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cae8  0800cae8  0000dae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b4  20000000  0800caec  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b48  200001b4  0800cca0  0000e1b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cfc  0800cca0  0000ecfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000297d6  00000000  00000000  0000e1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e77  00000000  00000000  000379ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ae0  00000000  00000000  0003c838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014dc  00000000  00000000  0003e318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cbbf  00000000  00000000  0003f7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028046  00000000  00000000  0006c3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118b94  00000000  00000000  000943f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001acf8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007784  00000000  00000000  001acfd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001b4754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001b4 	.word	0x200001b4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c664 	.word	0x0800c664

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001b8 	.word	0x200001b8
 8000214:	0800c664 	.word	0x0800c664

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b988 	b.w	8000dbc <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	468e      	mov	lr, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	4688      	mov	r8, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d962      	bls.n	8000ba0 <__udivmoddi4+0xdc>
 8000ada:	fab2 f682 	clz	r6, r2
 8000ade:	b14e      	cbz	r6, 8000af4 <__udivmoddi4+0x30>
 8000ae0:	f1c6 0320 	rsb	r3, r6, #32
 8000ae4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	40b7      	lsls	r7, r6
 8000aee:	ea43 0808 	orr.w	r8, r3, r8
 8000af2:	40b4      	lsls	r4, r6
 8000af4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b00:	0c23      	lsrs	r3, r4, #16
 8000b02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d909      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b18:	f080 80ea 	bcs.w	8000cf0 <__udivmoddi4+0x22c>
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f240 80e7 	bls.w	8000cf0 <__udivmoddi4+0x22c>
 8000b22:	3902      	subs	r1, #2
 8000b24:	443b      	add	r3, r7
 8000b26:	1a9a      	subs	r2, r3, r2
 8000b28:	b2a3      	uxth	r3, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b3a:	459c      	cmp	ip, r3
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x8e>
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b44:	f080 80d6 	bcs.w	8000cf4 <__udivmoddi4+0x230>
 8000b48:	459c      	cmp	ip, r3
 8000b4a:	f240 80d3 	bls.w	8000cf4 <__udivmoddi4+0x230>
 8000b4e:	443b      	add	r3, r7
 8000b50:	3802      	subs	r0, #2
 8000b52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b56:	eba3 030c 	sub.w	r3, r3, ip
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11d      	cbz	r5, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40f3      	lsrs	r3, r6
 8000b60:	2200      	movs	r2, #0
 8000b62:	e9c5 3200 	strd	r3, r2, [r5]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d905      	bls.n	8000b7a <__udivmoddi4+0xb6>
 8000b6e:	b10d      	cbz	r5, 8000b74 <__udivmoddi4+0xb0>
 8000b70:	e9c5 0100 	strd	r0, r1, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	4608      	mov	r0, r1
 8000b78:	e7f5      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d146      	bne.n	8000c10 <__udivmoddi4+0x14c>
 8000b82:	4573      	cmp	r3, lr
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xc8>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 8105 	bhi.w	8000d96 <__udivmoddi4+0x2d2>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4690      	mov	r8, r2
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	d0e5      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000b9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b9e:	e7e2      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f000 8090 	beq.w	8000cc6 <__udivmoddi4+0x202>
 8000ba6:	fab2 f682 	clz	r6, r2
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	f040 80a4 	bne.w	8000cf8 <__udivmoddi4+0x234>
 8000bb0:	1a8a      	subs	r2, r1, r2
 8000bb2:	0c03      	lsrs	r3, r0, #16
 8000bb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb8:	b280      	uxth	r0, r0
 8000bba:	b2bc      	uxth	r4, r7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bc2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bca:	fb04 f20c 	mul.w	r2, r4, ip
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d907      	bls.n	8000be2 <__udivmoddi4+0x11e>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x11c>
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	f200 80e0 	bhi.w	8000da0 <__udivmoddi4+0x2dc>
 8000be0:	46c4      	mov	ip, r8
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000be8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bf0:	fb02 f404 	mul.w	r4, r2, r4
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x144>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x142>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f200 80ca 	bhi.w	8000d9a <__udivmoddi4+0x2d6>
 8000c06:	4602      	mov	r2, r0
 8000c08:	1b1b      	subs	r3, r3, r4
 8000c0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c0e:	e7a5      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c10:	f1c1 0620 	rsb	r6, r1, #32
 8000c14:	408b      	lsls	r3, r1
 8000c16:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1a:	431f      	orrs	r7, r3
 8000c1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c20:	fa20 f306 	lsr.w	r3, r0, r6
 8000c24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	fa1f fc87 	uxth.w	ip, r7
 8000c36:	fbbe f0f9 	udiv	r0, lr, r9
 8000c3a:	0c1c      	lsrs	r4, r3, #16
 8000c3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x1a0>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c56:	f080 809c 	bcs.w	8000d92 <__udivmoddi4+0x2ce>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8099 	bls.w	8000d92 <__udivmoddi4+0x2ce>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	eba4 040e 	sub.w	r4, r4, lr
 8000c68:	fa1f fe83 	uxth.w	lr, r3
 8000c6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c70:	fb09 4413 	mls	r4, r9, r3, r4
 8000c74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x1ce>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c86:	f080 8082 	bcs.w	8000d8e <__udivmoddi4+0x2ca>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d97f      	bls.n	8000d8e <__udivmoddi4+0x2ca>
 8000c8e:	3b02      	subs	r3, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c9e:	4564      	cmp	r4, ip
 8000ca0:	4673      	mov	r3, lr
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	d362      	bcc.n	8000d6c <__udivmoddi4+0x2a8>
 8000ca6:	d05f      	beq.n	8000d68 <__udivmoddi4+0x2a4>
 8000ca8:	b15d      	cbz	r5, 8000cc2 <__udivmoddi4+0x1fe>
 8000caa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cae:	eb64 0409 	sbc.w	r4, r4, r9
 8000cb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	e74f      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000cc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cca:	0c01      	lsrs	r1, r0, #16
 8000ccc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4638      	mov	r0, r7
 8000cda:	463c      	mov	r4, r7
 8000cdc:	46b8      	mov	r8, r7
 8000cde:	46be      	mov	lr, r7
 8000ce0:	2620      	movs	r6, #32
 8000ce2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ce6:	eba2 0208 	sub.w	r2, r2, r8
 8000cea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cee:	e766      	b.n	8000bbe <__udivmoddi4+0xfa>
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	e718      	b.n	8000b26 <__udivmoddi4+0x62>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	e72c      	b.n	8000b52 <__udivmoddi4+0x8e>
 8000cf8:	f1c6 0220 	rsb	r2, r6, #32
 8000cfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	40b1      	lsls	r1, r6
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d12:	b2bc      	uxth	r4, r7
 8000d14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d18:	0c11      	lsrs	r1, r2, #16
 8000d1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1e:	fb08 f904 	mul.w	r9, r8, r4
 8000d22:	40b0      	lsls	r0, r6
 8000d24:	4589      	cmp	r9, r1
 8000d26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d2a:	b280      	uxth	r0, r0
 8000d2c:	d93e      	bls.n	8000dac <__udivmoddi4+0x2e8>
 8000d2e:	1879      	adds	r1, r7, r1
 8000d30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d34:	d201      	bcs.n	8000d3a <__udivmoddi4+0x276>
 8000d36:	4589      	cmp	r9, r1
 8000d38:	d81f      	bhi.n	8000d7a <__udivmoddi4+0x2b6>
 8000d3a:	eba1 0109 	sub.w	r1, r1, r9
 8000d3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d42:	fb09 f804 	mul.w	r8, r9, r4
 8000d46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d50:	4542      	cmp	r2, r8
 8000d52:	d229      	bcs.n	8000da8 <__udivmoddi4+0x2e4>
 8000d54:	18ba      	adds	r2, r7, r2
 8000d56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d5a:	d2c4      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d5c:	4542      	cmp	r2, r8
 8000d5e:	d2c2      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d60:	f1a9 0102 	sub.w	r1, r9, #2
 8000d64:	443a      	add	r2, r7
 8000d66:	e7be      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000d68:	45f0      	cmp	r8, lr
 8000d6a:	d29d      	bcs.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d74:	3801      	subs	r0, #1
 8000d76:	46e1      	mov	r9, ip
 8000d78:	e796      	b.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d7a:	eba7 0909 	sub.w	r9, r7, r9
 8000d7e:	4449      	add	r1, r9
 8000d80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d88:	fb09 f804 	mul.w	r8, r9, r4
 8000d8c:	e7db      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d8e:	4673      	mov	r3, lr
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1ce>
 8000d92:	4650      	mov	r0, sl
 8000d94:	e766      	b.n	8000c64 <__udivmoddi4+0x1a0>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e6fd      	b.n	8000b96 <__udivmoddi4+0xd2>
 8000d9a:	443b      	add	r3, r7
 8000d9c:	3a02      	subs	r2, #2
 8000d9e:	e733      	b.n	8000c08 <__udivmoddi4+0x144>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	e71c      	b.n	8000be2 <__udivmoddi4+0x11e>
 8000da8:	4649      	mov	r1, r9
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000dac:	eba1 0109 	sub.w	r1, r1, r9
 8000db0:	46c4      	mov	ip, r8
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fb09 f804 	mul.w	r8, r9, r4
 8000dba:	e7c4      	b.n	8000d46 <__udivmoddi4+0x282>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6178      	str	r0, [r7, #20]
 8000dc8:	6139      	str	r1, [r7, #16]
 8000dca:	60fa      	str	r2, [r7, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dd2:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000dee:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	e008      	b.n	8000e14 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3301      	adds	r3, #1
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	69fa      	ldr	r2, [r7, #28]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3f2      	bcc.n	8000e02 <ADC_DMA_Init+0x42>
    }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	217f      	movs	r1, #127	@ 0x7f
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 feb7 	bl	8005bac <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6859      	ldr	r1, [r3, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f003 ffa0 	bl	8004d90 <HAL_ADC_Start_DMA>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	e012      	b.n	8000e98 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685a      	ldr	r2, [r3, #4]
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	4413      	add	r3, r2
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	4413      	add	r3, r2
 8000e84:	617b      	str	r3, [r7, #20]
        samples++;
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7b1b      	ldrb	r3, [r3, #12]
 8000e90:	461a      	mov	r2, r3
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4413      	add	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	68fa      	ldr	r2, [r7, #12]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d3e7      	bcc.n	8000e72 <ADC_DMA_GetValue+0x1a>
    }


    // Calculate raw ADC value and convert to voltage
    if (samples > 0) {
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d00f      	beq.n	8000ec8 <ADC_DMA_GetValue+0x70>
        float raw_value = (float)sum / samples;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	ee07 3a90 	vmov	s15, r3
 8000eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	ee07 3a90 	vmov	s15, r3
 8000eb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ec0:	edc7 7a02 	vstr	s15, [r7, #8]
        return raw_value;
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	e001      	b.n	8000ecc <ADC_DMA_GetValue+0x74>
    }

    return 0.0f;
 8000ec8:	f04f 0300 	mov.w	r3, #0
}
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	371c      	adds	r7, #28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <ADC_DMA_GetJoystick>:

    // Compute current using WCS1700 formula
    return 15.1793457908771 * voltage - 24.8674344063837;
}

float ADC_DMA_GetJoystick(ADC_DMA *adc_dma, uint8_t channel_index, float joydata) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	ed87 0a01 	vstr	s0, [r7, #4]
 8000eee:	72fb      	strb	r3, [r7, #11]
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f7ff ffaf 	bl	8000e58 <ADC_DMA_GetValue>
 8000efa:	ed87 0a05 	vstr	s0, [r7, #20]

    return mapf(value, 0.0, adc_dma->adc_resolution, 0.0, joydata);
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	edd3 7a05 	vldr	s15, [r3, #20]
 8000f04:	ed97 2a01 	vldr	s4, [r7, #4]
 8000f08:	eddf 1a08 	vldr	s3, [pc, #32]	@ 8000f2c <ADC_DMA_GetJoystick+0x4c>
 8000f0c:	eeb0 1a67 	vmov.f32	s2, s15
 8000f10:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8000f2c <ADC_DMA_GetJoystick+0x4c>
 8000f14:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f18:	f000 fbad 	bl	8001676 <mapf>
 8000f1c:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f20:	eeb0 0a67 	vmov.f32	s0, s15
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	00000000 	.word	0x00000000

08000f30 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f3a:	60b8      	str	r0, [r7, #8]
 8000f3c:	6079      	str	r1, [r7, #4]
  if (_u > _upper_limit) return _upper_limit;
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f48:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f54:	dd01      	ble.n	8000f5a <PWM_Satuation+0x2a>
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	e013      	b.n	8000f82 <PWM_Satuation+0x52>
  else if (_u < _lower_limit) return _lower_limit;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	ee07 3a90 	vmov	s15, r3
 8000f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f64:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f70:	d501      	bpl.n	8000f76 <PWM_Satuation+0x46>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	e005      	b.n	8000f82 <PWM_Satuation+0x52>
  return (int32_t)_u;
 8000f76:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f7e:	ee17 3a90 	vmov	r3, s15
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000f8e:	b480      	push	{r7}
 8000f90:	b087      	sub	sp, #28
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6178      	str	r0, [r7, #20]
 8000f96:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f9a:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f9e:	ed87 1a02 	vstr	s2, [r7, #8]
 8000fa2:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f04f 0200 	mov.w	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f04f 0200 	mov.w	r2, #0
 8000fd4:	619a      	str	r2, [r3, #24]

}
 8000fd6:	bf00      	nop
 8000fd8:	371c      	adds	r7, #28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
 8000fea:	ed87 0a00 	vstr	s0, [r7]
    if (!((controller->u >= controller->u_max && ek > 0) || (controller->u <= -controller->u_max && ek < 0))) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	ed93 7a06 	vldr	s14, [r3, #24]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ffa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001002:	bfac      	ite	ge
 8001004:	2301      	movge	r3, #1
 8001006:	2300      	movlt	r3, #0
 8001008:	b2db      	uxtb	r3, r3
 800100a:	f083 0301 	eor.w	r3, r3, #1
 800100e:	b2db      	uxtb	r3, r3
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10e      	bne.n	8001032 <PID_CONTROLLER_Compute+0x50>
 8001014:	edd7 7a00 	vldr	s15, [r7]
 8001018:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800101c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001020:	bfcc      	ite	gt
 8001022:	2301      	movgt	r3, #1
 8001024:	2300      	movle	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	f083 0301 	eor.w	r3, r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d057      	beq.n	80010e2 <PID_CONTROLLER_Compute+0x100>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	ed93 7a06 	vldr	s14, [r3, #24]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	edd3 7a03 	vldr	s15, [r3, #12]
 800103e:	eef1 7a67 	vneg.f32	s15, s15
 8001042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	bf94      	ite	ls
 800104c:	2301      	movls	r3, #1
 800104e:	2300      	movhi	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	f083 0301 	eor.w	r3, r3, #1
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d10e      	bne.n	800107a <PID_CONTROLLER_Compute+0x98>
 800105c:	edd7 7a00 	vldr	s15, [r7]
 8001060:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001068:	bf4c      	ite	mi
 800106a:	2301      	movmi	r3, #1
 800106c:	2300      	movpl	r3, #0
 800106e:	b2db      	uxtb	r3, r3
 8001070:	f083 0301 	eor.w	r3, r3, #1
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d033      	beq.n	80010e2 <PID_CONTROLLER_Compute+0x100>
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	edd3 6a00 	vldr	s13, [r3]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a01 	vldr	s15, [r3, #4]
 800108c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	edd3 7a02 	vldr	s15, [r3, #8]
 8001096:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800109a:	edd7 7a00 	vldr	s15, [r7]
 800109e:	ee66 6aa7 	vmul.f32	s13, s13, s15
                         - ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	ed93 6a00 	vldr	s12, [r3]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80010ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010b2:	ee36 6a27 	vadd.f32	s12, s12, s15
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80010bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80010c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
                         + (controller->Kd * controller->ek_2);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	ed93 6a02 	vldr	s12, [r3, #8]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	edd3 7a05 	vldr	s15, [r3, #20]
 80010d0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80010d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 80010d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	edc3 7a06 	vstr	s15, [r3, #24]
    }
    controller->ek_2 = controller->ek_1;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	691a      	ldr	r2, [r3, #16]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	615a      	str	r2, [r3, #20]
    controller->ek_1 = ek;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	611a      	str	r2, [r3, #16]
    return controller->u;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	ee07 3a90 	vmov	s15, r3
}
 80010f8:	eeb0 0a67 	vmov.f32	s0, s15
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001106:	b580      	push	{r7, lr}
 8001108:	b084      	sub	sp, #16
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	603b      	str	r3, [r7, #0]
 8001112:	4613      	mov	r3, r2
 8001114:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	68ba      	ldr	r2, [r7, #8]
 800111a:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	88fa      	ldrh	r2, [r7, #6]
 8001120:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3328      	adds	r3, #40	@ 0x28
 8001126:	88fa      	ldrh	r2, [r7, #6]
 8001128:	68b9      	ldr	r1, [r7, #8]
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fb82 	bl	8001834 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	8b3a      	ldrh	r2, [r7, #24]
 800113a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2201      	movs	r2, #1
 8001142:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	ed87 0a02 	vstr	s0, [r7, #8]
 800115c:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001166:	2b00      	cmp	r3, #0
 8001168:	d15f      	bne.n	800122a <MDXX_set_range+0xda>
		if (duty == 0) {
 800116a:	edd7 7a01 	vldr	s15, [r7, #4]
 800116e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001176:	d115      	bne.n	80011a4 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3310      	adds	r3, #16
 800117c:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 80012fc <MDXX_set_range+0x1ac>
 8001180:	ed97 0a02 	vldr	s0, [r7, #8]
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fc7b 	bl	8001a80 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	3328      	adds	r3, #40	@ 0x28
 800118e:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 80012fc <MDXX_set_range+0x1ac>
 8001192:	ed97 0a02 	vldr	s0, [r7, #8]
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fc72 	bl	8001a80 <PWM_write_range>
			mdxx->cmd = 0;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80011a2:	e0a6      	b.n	80012f2 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80011a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80011a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b0:	dd1a      	ble.n	80011e8 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3310      	adds	r3, #16
 80011b6:	eddf 0a51 	vldr	s1, [pc, #324]	@ 80012fc <MDXX_set_range+0x1ac>
 80011ba:	ed97 0a02 	vldr	s0, [r7, #8]
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 fc5e 	bl	8001a80 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	3328      	adds	r3, #40	@ 0x28
 80011c8:	edd7 0a01 	vldr	s1, [r7, #4]
 80011cc:	ed97 0a02 	vldr	s0, [r7, #8]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 fc55 	bl	8001a80 <PWM_write_range>
			mdxx->cmd = duty;
 80011d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011de:	ee17 2a90 	vmov	r2, s15
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80011e6:	e084      	b.n	80012f2 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	3310      	adds	r3, #16
 80011ec:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001300 <MDXX_set_range+0x1b0>
 80011f0:	ed97 0a02 	vldr	s0, [r7, #8]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f000 fc43 	bl	8001a80 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	3328      	adds	r3, #40	@ 0x28
 80011fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001202:	eef0 7ae7 	vabs.f32	s15, s15
 8001206:	eef0 0a67 	vmov.f32	s1, s15
 800120a:	ed97 0a02 	vldr	s0, [r7, #8]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fc36 	bl	8001a80 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001214:	edd7 7a01 	vldr	s15, [r7, #4]
 8001218:	eef0 7ae7 	vabs.f32	s15, s15
 800121c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001220:	ee17 2a90 	vmov	r2, s15
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001228:	e063      	b.n	80012f2 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001230:	2b01      	cmp	r3, #1
 8001232:	d15e      	bne.n	80012f2 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001234:	edd7 7a01 	vldr	s15, [r7, #4]
 8001238:	eef5 7a40 	vcmp.f32	s15, #0.0
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	d115      	bne.n	800126e <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800124c:	2200      	movs	r2, #0
 800124e:	4619      	mov	r1, r3
 8001250:	f005 fbf2 	bl	8006a38 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3328      	adds	r3, #40	@ 0x28
 8001258:	eddf 0a28 	vldr	s1, [pc, #160]	@ 80012fc <MDXX_set_range+0x1ac>
 800125c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fc0d 	bl	8001a80 <PWM_write_range>
			mdxx->cmd = 0;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800126c:	e041      	b.n	80012f2 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 800126e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001272:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	dd1a      	ble.n	80012b2 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001286:	2200      	movs	r2, #0
 8001288:	4619      	mov	r1, r3
 800128a:	f005 fbd5 	bl	8006a38 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	3328      	adds	r3, #40	@ 0x28
 8001292:	edd7 0a01 	vldr	s1, [r7, #4]
 8001296:	ed97 0a02 	vldr	s0, [r7, #8]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fbf0 	bl	8001a80 <PWM_write_range>
			mdxx->cmd = duty;
 80012a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012a8:	ee17 2a90 	vmov	r2, s15
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80012b0:	e01f      	b.n	80012f2 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80012bc:	2201      	movs	r2, #1
 80012be:	4619      	mov	r1, r3
 80012c0:	f005 fbba 	bl	8006a38 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3328      	adds	r3, #40	@ 0x28
 80012c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012cc:	eef0 7ae7 	vabs.f32	s15, s15
 80012d0:	eef0 0a67 	vmov.f32	s1, s15
 80012d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fbd1 	bl	8001a80 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 80012de:	edd7 7a01 	vldr	s15, [r7, #4]
 80012e2:	eef0 7ae7 	vabs.f32	s15, s15
 80012e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ea:	ee17 2a90 	vmov	r2, s15
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	00000000 	.word	0x00000000
 8001300:	42c80000 	.word	0x42c80000

08001304 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, // kg
    .c = 64.83e-3,           // m
    .prismatic_pulley = 1.5915e-2 // m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	601a      	str	r2, [r3, #0]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	605a      	str	r2, [r3, #4]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	601a      	str	r2, [r3, #0]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	605a      	str	r2, [r3, #4]
}
 8001378:	bf00      	nop
 800137a:	3714      	adds	r7, #20
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001384:	b580      	push	{r7, lr}
 8001386:	ed2d 8b02 	vpush	{d8}
 800138a:	b08a      	sub	sp, #40	@ 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	460b      	mov	r3, r1
 8001392:	ed87 0a01 	vstr	s0, [r7, #4]
 8001396:	edc7 0a00 	vstr	s1, [r7]
 800139a:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 800139c:	897b      	ldrh	r3, [r7, #10]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d102      	bne.n	80013ae <FIR_init+0x2a>
        numTaps += 1;
 80013a8:	897b      	ldrh	r3, [r7, #10]
 80013aa:	3301      	adds	r3, #1
 80013ac:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	897a      	ldrh	r2, [r7, #10]
 80013b2:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 80013ba:	897b      	ldrh	r3, [r7, #10]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4618      	mov	r0, r3
 80013c0:	f00a fac0 	bl	800b944 <malloc>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 80013cc:	897b      	ldrh	r3, [r7, #10]
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f00a fab7 	bl	800b944 <malloc>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 80e0 	beq.w	80015a8 <FIR_init+0x224>
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80db 	beq.w	80015a8 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 80013f2:	2300      	movs	r3, #0
 80013f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80013f6:	e00a      	b.n	800140e <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001408:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800140a:	3301      	adds	r3, #1
 800140c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800140e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001410:	897b      	ldrh	r3, [r7, #10]
 8001412:	429a      	cmp	r2, r3
 8001414:	d3f0      	bcc.n	80013f8 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001416:	edd7 6a01 	vldr	s13, [r7, #4]
 800141a:	ed97 7a00 	vldr	s14, [r7]
 800141e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001422:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001426:	897b      	ldrh	r3, [r7, #10]
 8001428:	085b      	lsrs	r3, r3, #1
 800142a:	b29b      	uxth	r3, r3
 800142c:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 800142e:	2300      	movs	r3, #0
 8001430:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001432:	e077      	b.n	8001524 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001434:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001438:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800143c:	429a      	cmp	r2, r3
 800143e:	d10c      	bne.n	800145a <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001450:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001454:	edc3 7a00 	vstr	s15, [r3]
 8001458:	e02c      	b.n	80014b4 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 800145a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800145c:	8afb      	ldrh	r3, [r7, #22]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	b29b      	uxth	r3, r3
 8001462:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001464:	edd7 7a06 	vldr	s15, [r7, #24]
 8001468:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80015b4 <FIR_init+0x230>
 800146c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001470:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001480:	eeb0 0a67 	vmov.f32	s0, s15
 8001484:	f00a fbba 	bl	800bbfc <sinf>
 8001488:	eef0 6a40 	vmov.f32	s13, s0
 800148c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001498:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80015b8 <FIR_init+0x234>
 800149c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014b0:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	ed93 8a00 	vldr	s16, [r3]
 80014c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80014c8:	ee07 3a90 	vmov	s15, r3
 80014cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80015b4 <FIR_init+0x230>
 80014d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014d8:	897b      	ldrh	r3, [r7, #10]
 80014da:	3b01      	subs	r3, #1
 80014dc:	ee07 3a90 	vmov	s15, r3
 80014e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014e8:	eeb0 0a66 	vmov.f32	s0, s13
 80014ec:	f00a fb42 	bl	800bb74 <cosf>
 80014f0:	eef0 7a40 	vmov.f32	s15, s0
 80014f4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80015bc <FIR_init+0x238>
 80014f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fc:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80015c0 <FIR_init+0x23c>
 8001500:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001514:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001518:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800151c:	b29b      	uxth	r3, r3
 800151e:	3301      	adds	r3, #1
 8001520:	b29b      	uxth	r3, r3
 8001522:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001524:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001528:	897b      	ldrh	r3, [r7, #10]
 800152a:	429a      	cmp	r2, r3
 800152c:	db82      	blt.n	8001434 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 800152e:	f04f 0300 	mov.w	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001534:	2300      	movs	r3, #0
 8001536:	83fb      	strh	r3, [r7, #30]
 8001538:	e00f      	b.n	800155a <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	8bfb      	ldrh	r3, [r7, #30]
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	edd3 7a00 	vldr	s15, [r3]
 8001548:	ed97 7a08 	vldr	s14, [r7, #32]
 800154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001550:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001554:	8bfb      	ldrh	r3, [r7, #30]
 8001556:	3301      	adds	r3, #1
 8001558:	83fb      	strh	r3, [r7, #30]
 800155a:	8bfa      	ldrh	r2, [r7, #30]
 800155c:	897b      	ldrh	r3, [r7, #10]
 800155e:	429a      	cmp	r2, r3
 8001560:	d3eb      	bcc.n	800153a <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001562:	edd7 7a08 	vldr	s15, [r7, #32]
 8001566:	eef5 7a40 	vcmp.f32	s15, #0.0
 800156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156e:	d01b      	beq.n	80015a8 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001570:	2300      	movs	r3, #0
 8001572:	83bb      	strh	r3, [r7, #28]
 8001574:	e014      	b.n	80015a0 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	8bbb      	ldrh	r3, [r7, #28]
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	edd3 6a00 	vldr	s13, [r3]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	8bbb      	ldrh	r3, [r7, #28]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001596:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 800159a:	8bbb      	ldrh	r3, [r7, #28]
 800159c:	3301      	adds	r3, #1
 800159e:	83bb      	strh	r3, [r7, #28]
 80015a0:	8bba      	ldrh	r2, [r7, #28]
 80015a2:	897b      	ldrh	r3, [r7, #10]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d3e6      	bcc.n	8001576 <FIR_init+0x1f2>
            }
        }
    }
}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	@ 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	ecbd 8b02 	vpop	{d8}
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40c90fdb 	.word	0x40c90fdb
 80015b8:	40490fdb 	.word	0x40490fdb
 80015bc:	3eeb851f 	.word	0x3eeb851f
 80015c0:	3f0a3d71 	.word	0x3f0a3d71

080015c4 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	895b      	ldrh	r3, [r3, #10]
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	895b      	ldrh	r3, [r3, #10]
 80015ea:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 80015ec:	2300      	movs	r3, #0
 80015ee:	813b      	strh	r3, [r7, #8]
 80015f0:	e023      	b.n	800163a <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	897b      	ldrh	r3, [r7, #10]
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	ed93 7a00 	vldr	s14, [r3]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	893b      	ldrh	r3, [r7, #8]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	edd3 7a00 	vldr	s15, [r3]
 800160e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001612:	ed97 7a03 	vldr	s14, [r7, #12]
 8001616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800161a:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 800161e:	897b      	ldrh	r3, [r7, #10]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d104      	bne.n	800162e <FIR_process+0x6a>
            index = fir->numTaps - 1;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	891b      	ldrh	r3, [r3, #8]
 8001628:	3b01      	subs	r3, #1
 800162a:	817b      	strh	r3, [r7, #10]
 800162c:	e002      	b.n	8001634 <FIR_process+0x70>
        } else {
            index--;
 800162e:	897b      	ldrh	r3, [r7, #10]
 8001630:	3b01      	subs	r3, #1
 8001632:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001634:	893b      	ldrh	r3, [r7, #8]
 8001636:	3301      	adds	r3, #1
 8001638:	813b      	strh	r3, [r7, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	891b      	ldrh	r3, [r3, #8]
 800163e:	893a      	ldrh	r2, [r7, #8]
 8001640:	429a      	cmp	r2, r3
 8001642:	d3d6      	bcc.n	80015f2 <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	895b      	ldrh	r3, [r3, #10]
 8001648:	3301      	adds	r3, #1
 800164a:	b29a      	uxth	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	895a      	ldrh	r2, [r3, #10]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	891b      	ldrh	r3, [r3, #8]
 8001658:	429a      	cmp	r2, r3
 800165a:	d302      	bcc.n	8001662 <FIR_process+0x9e>
        fir->bufferIndex = 0;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	815a      	strh	r2, [r3, #10]
    }

    return output;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	ee07 3a90 	vmov	s15, r3
}
 8001668:	eeb0 0a67 	vmov.f32	s0, s15
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001676:	b480      	push	{r7}
 8001678:	b089      	sub	sp, #36	@ 0x24
 800167a:	af00      	add	r7, sp, #0
 800167c:	ed87 0a05 	vstr	s0, [r7, #20]
 8001680:	edc7 0a04 	vstr	s1, [r7, #16]
 8001684:	ed87 1a03 	vstr	s2, [r7, #12]
 8001688:	edc7 1a02 	vstr	s3, [r7, #8]
 800168c:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001690:	ed97 7a05 	vldr	s14, [r7, #20]
 8001694:	edd7 7a04 	vldr	s15, [r7, #16]
 8001698:	ee77 6a67 	vsub.f32	s13, s14, s15
 800169c:	ed97 7a03 	vldr	s14, [r7, #12]
 80016a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ac:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 80016b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80016b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80016b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80016c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80016c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016cc:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	3724      	adds	r7, #36	@ 0x24
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80016e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <modbus_1t5_Timeout+0x3c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2201      	movs	r2, #1
 80016ee:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <modbus_1t5_Timeout+0x3c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2200      	movs	r2, #0
 80016fa:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80016fc:	4b08      	ldr	r3, [pc, #32]	@ (8001720 <modbus_1t5_Timeout+0x3c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <modbus_1t5_Timeout+0x3c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	200001d0 	.word	0x200001d0

08001724 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <modbus_3t5_Timeout+0x1c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2201      	movs	r2, #1
 8001732:	755a      	strb	r2, [r3, #21]

}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	200001d0 	.word	0x200001d0

08001744 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f009 f81d 	bl	800a78c <HAL_UART_GetError>
 8001752:	4603      	mov	r3, r0
 8001754:	2b20      	cmp	r3, #32
 8001756:	d101      	bne.n	800175c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001758:	f7ff ffc4 	bl	80016e4 <modbus_1t5_Timeout>

	}
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	60f8      	str	r0, [r7, #12]
 800176c:	60b9      	str	r1, [r7, #8]
 800176e:	607a      	str	r2, [r7, #4]
 8001770:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001772:	4a2d      	ldr	r2, [pc, #180]	@ (8001828 <Modbus_init+0xc4>)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001778:	4b2b      	ldr	r3, [pc, #172]	@ (8001828 <Modbus_init+0xc4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001780:	4b29      	ldr	r3, [pc, #164]	@ (8001828 <Modbus_init+0xc4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001788:	4b27      	ldr	r3, [pc, #156]	@ (8001828 <Modbus_init+0xc4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001790:	4b25      	ldr	r3, [pc, #148]	@ (8001828 <Modbus_init+0xc4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	7e3a      	ldrb	r2, [r7, #24]
 8001796:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001798:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <Modbus_init+0xc4>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	4a21      	ldr	r2, [pc, #132]	@ (800182c <Modbus_init+0xc8>)
 80017a6:	210e      	movs	r1, #14
 80017a8:	4618      	mov	r0, r3
 80017aa:	f007 fa9d 	bl	8008ce8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2110      	movs	r1, #16
 80017b4:	4618      	mov	r0, r3
 80017b6:	f008 ff93 	bl	800a6e0 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	4618      	mov	r0, r3
 80017c0:	f008 ffaa 	bl	800a718 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	4a19      	ldr	r2, [pc, #100]	@ (8001830 <Modbus_init+0xcc>)
 80017ca:	2104      	movs	r1, #4
 80017cc:	4618      	mov	r0, r3
 80017ce:	f008 fadb 	bl	8009d88 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <Modbus_init+0xc4>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <Modbus_init+0xc4>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <Modbus_init+0xc4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80017e4:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80017e8:	4413      	add	r3, r2
 80017ea:	3302      	adds	r3, #2
 80017ec:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017f0:	4619      	mov	r1, r3
 80017f2:	f008 fb83 	bl	8009efc <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80017f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <Modbus_init+0xc4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	691b      	ldr	r3, [r3, #16]
 80017fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b01      	cmp	r3, #1
 8001804:	d10c      	bne.n	8001820 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001806:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <Modbus_init+0xc4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	4618      	mov	r0, r3
 800180e:	f006 fa47 	bl	8007ca0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001812:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <Modbus_init+0xc4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f006 fc96 	bl	800814c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200001d0 	.word	0x200001d0
 800182c:	08001725 	.word	0x08001725
 8001830:	08001745 	.word	0x08001745

08001834 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	4613      	mov	r3, r2
 8001840:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4a0b      	ldr	r2, [pc, #44]	@ (8001874 <PWM_init+0x40>)
 8001846:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	88fa      	ldrh	r2, [r7, #6]
 8001852:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 800185a:	68b8      	ldr	r0, [r7, #8]
 800185c:	f006 f9b0 	bl	8007bc0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8001860:	88fb      	ldrh	r3, [r7, #6]
 8001862:	4619      	mov	r1, r3
 8001864:	68b8      	ldr	r0, [r7, #8]
 8001866:	f006 faf7 	bl	8007e58 <HAL_TIM_PWM_Start>
}
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	0a21fe80 	.word	0x0a21fe80

08001878 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	ed87 0a02 	vstr	s0, [r7, #8]
 8001884:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001888:	edd7 7a02 	vldr	s15, [r7, #8]
 800188c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001894:	d137      	bne.n	8001906 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	889b      	ldrh	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d105      	bne.n	80018aa <PWM_write_duty+0x32>
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2200      	movs	r2, #0
 80018a6:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80018a8:	e0e1      	b.n	8001a6e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	889b      	ldrh	r3, [r3, #4]
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d105      	bne.n	80018be <PWM_write_duty+0x46>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2300      	movs	r3, #0
 80018ba:	6393      	str	r3, [r2, #56]	@ 0x38
 80018bc:	e0d7      	b.n	8001a6e <PWM_write_duty+0x1f6>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	889b      	ldrh	r3, [r3, #4]
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d105      	bne.n	80018d2 <PWM_write_duty+0x5a>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2300      	movs	r3, #0
 80018ce:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80018d0:	e0cd      	b.n	8001a6e <PWM_write_duty+0x1f6>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	889b      	ldrh	r3, [r3, #4]
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d105      	bne.n	80018e6 <PWM_write_duty+0x6e>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2300      	movs	r3, #0
 80018e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e4:	e0c3      	b.n	8001a6e <PWM_write_duty+0x1f6>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	889b      	ldrh	r3, [r3, #4]
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d105      	bne.n	80018fa <PWM_write_duty+0x82>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2300      	movs	r3, #0
 80018f6:	6493      	str	r3, [r2, #72]	@ 0x48
 80018f8:	e0b9      	b.n	8001a6e <PWM_write_duty+0x1f6>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2300      	movs	r3, #0
 8001902:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001904:	e0b3      	b.n	8001a6e <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	ee07 3a90 	vmov	s15, r3
 800190e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001912:	ed97 7a02 	vldr	s14, [r7, #8]
 8001916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800191a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800191e:	ee17 2a90 	vmov	r2, s15
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800192e:	33fe      	adds	r3, #254	@ 0xfe
 8001930:	4a51      	ldr	r2, [pc, #324]	@ (8001a78 <PWM_write_duty+0x200>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0bdb      	lsrs	r3, r3, #15
 8001938:	b29b      	uxth	r3, r3
 800193a:	3b01      	subs	r3, #1
 800193c:	b29a      	uxth	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	899b      	ldrh	r3, [r3, #12]
 8001952:	3301      	adds	r3, #1
 8001954:	ee07 3a90 	vmov	s15, r3
 8001958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800195c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001960:	ed97 7a02 	vldr	s14, [r7, #8]
 8001964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001968:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800196c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001970:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001974:	ee17 3a90 	vmov	r3, s15
 8001978:	b29a      	uxth	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	89db      	ldrh	r3, [r3, #14]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe fd9a 	bl	80004bc <__aeabi_i2d>
 8001988:	4604      	mov	r4, r0
 800198a:	460d      	mov	r5, r1
 800198c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001990:	eef0 7ae7 	vabs.f32	s15, s15
 8001994:	ee17 0a90 	vmov	r0, s15
 8001998:	f7fe fda2 	bl	80004e0 <__aeabi_f2d>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4620      	mov	r0, r4
 80019a2:	4629      	mov	r1, r5
 80019a4:	f7fe fdf4 	bl	8000590 <__aeabi_dmul>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	4610      	mov	r0, r2
 80019ae:	4619      	mov	r1, r3
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	4b31      	ldr	r3, [pc, #196]	@ (8001a7c <PWM_write_duty+0x204>)
 80019b6:	f7fe ff15 	bl	80007e4 <__aeabi_ddiv>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7fe fff7 	bl	80009b4 <__aeabi_d2uiz>
 80019c6:	4603      	mov	r3, r0
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	899a      	ldrh	r2, [r3, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	89da      	ldrh	r2, [r3, #14]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	89da      	ldrh	r2, [r3, #14]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	889b      	ldrh	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d106      	bne.n	8001a08 <PWM_write_duty+0x190>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68fa      	ldr	r2, [r7, #12]
 8001a02:	6952      	ldr	r2, [r2, #20]
 8001a04:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001a06:	e032      	b.n	8001a6e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	889b      	ldrh	r3, [r3, #4]
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d106      	bne.n	8001a1e <PWM_write_duty+0x1a6>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001a1c:	e027      	b.n	8001a6e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	889b      	ldrh	r3, [r3, #4]
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d106      	bne.n	8001a34 <PWM_write_duty+0x1bc>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001a32:	e01c      	b.n	8001a6e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	889b      	ldrh	r3, [r3, #4]
 8001a38:	2b0c      	cmp	r3, #12
 8001a3a:	d106      	bne.n	8001a4a <PWM_write_duty+0x1d2>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001a48:	e011      	b.n	8001a6e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	889b      	ldrh	r3, [r3, #4]
 8001a4e:	2b10      	cmp	r3, #16
 8001a50:	d106      	bne.n	8001a60 <PWM_write_duty+0x1e8>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001a5e:	e006      	b.n	8001a6e <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001a6c:	e7ff      	b.n	8001a6e <PWM_write_duty+0x1f6>
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bdb0      	pop	{r4, r5, r7, pc}
 8001a76:	bf00      	nop
 8001a78:	80008001 	.word	0x80008001
 8001a7c:	40590000 	.word	0x40590000

08001a80 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001a80:	b5b0      	push	{r4, r5, r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a8c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001a90:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9c:	d137      	bne.n	8001b0e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	889b      	ldrh	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d105      	bne.n	8001ab2 <PWM_write_range+0x32>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2200      	movs	r2, #0
 8001aae:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001ab0:	e0e1      	b.n	8001c76 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	889b      	ldrh	r3, [r3, #4]
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d105      	bne.n	8001ac6 <PWM_write_range+0x46>
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	6393      	str	r3, [r2, #56]	@ 0x38
 8001ac4:	e0d7      	b.n	8001c76 <PWM_write_range+0x1f6>
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	889b      	ldrh	r3, [r3, #4]
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d105      	bne.n	8001ada <PWM_write_range+0x5a>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001ad8:	e0cd      	b.n	8001c76 <PWM_write_range+0x1f6>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	889b      	ldrh	r3, [r3, #4]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d105      	bne.n	8001aee <PWM_write_range+0x6e>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2300      	movs	r3, #0
 8001aea:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aec:	e0c3      	b.n	8001c76 <PWM_write_range+0x1f6>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	889b      	ldrh	r3, [r3, #4]
 8001af2:	2b10      	cmp	r3, #16
 8001af4:	d105      	bne.n	8001b02 <PWM_write_range+0x82>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	2300      	movs	r3, #0
 8001afe:	6493      	str	r3, [r2, #72]	@ 0x48
 8001b00:	e0b9      	b.n	8001c76 <PWM_write_range+0x1f6>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	2300      	movs	r3, #0
 8001b0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001b0c:	e0b3      	b.n	8001c76 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	ee07 3a90 	vmov	s15, r3
 8001b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001b1a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b26:	ee17 2a90 	vmov	r2, s15
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001b36:	33fe      	adds	r3, #254	@ 0xfe
 8001b38:	4a53      	ldr	r2, [pc, #332]	@ (8001c88 <PWM_write_range+0x208>)
 8001b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3e:	0bdb      	lsrs	r3, r3, #15
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	3b01      	subs	r3, #1
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	ee07 3a90 	vmov	s15, r3
 8001b52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	899b      	ldrh	r3, [r3, #12]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001b68:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001b74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001b78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b7c:	ee17 3a90 	vmov	r3, s15
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	89db      	ldrh	r3, [r3, #14]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fc96 	bl	80004bc <__aeabi_i2d>
 8001b90:	4604      	mov	r4, r0
 8001b92:	460d      	mov	r5, r1
 8001b94:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b98:	eef0 7ae7 	vabs.f32	s15, s15
 8001b9c:	ee17 0a90 	vmov	r0, s15
 8001ba0:	f7fe fc9e 	bl	80004e0 <__aeabi_f2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4620      	mov	r0, r4
 8001baa:	4629      	mov	r1, r5
 8001bac:	f7fe fcf0 	bl	8000590 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	a331      	add	r3, pc, #196	@ (adr r3, 8001c80 <PWM_write_range+0x200>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	f7fe fe11 	bl	80007e4 <__aeabi_ddiv>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7fe fef3 	bl	80009b4 <__aeabi_d2uiz>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	899a      	ldrh	r2, [r3, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	89da      	ldrh	r2, [r3, #14]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	89da      	ldrh	r2, [r3, #14]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	889b      	ldrh	r3, [r3, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d106      	bne.n	8001c10 <PWM_write_range+0x190>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	6952      	ldr	r2, [r2, #20]
 8001c0c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001c0e:	e032      	b.n	8001c76 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	889b      	ldrh	r3, [r3, #4]
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d106      	bne.n	8001c26 <PWM_write_range+0x1a6>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001c24:	e027      	b.n	8001c76 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	889b      	ldrh	r3, [r3, #4]
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d106      	bne.n	8001c3c <PWM_write_range+0x1bc>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001c3a:	e01c      	b.n	8001c76 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	889b      	ldrh	r3, [r3, #4]
 8001c40:	2b0c      	cmp	r3, #12
 8001c42:	d106      	bne.n	8001c52 <PWM_write_range+0x1d2>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001c50:	e011      	b.n	8001c76 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	889b      	ldrh	r3, [r3, #4]
 8001c56:	2b10      	cmp	r3, #16
 8001c58:	d106      	bne.n	8001c68 <PWM_write_range+0x1e8>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001c66:	e006      	b.n	8001c76 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001c74:	e7ff      	b.n	8001c76 <PWM_write_range+0x1f6>
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	00000000 	.word	0x00000000
 8001c84:	40efffe0 	.word	0x40efffe0
 8001c88:	80008001 	.word	0x80008001

08001c8c <QEI_init>:
* Created on: Mar 30, 2024
* Author: beamk
*/
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6178      	str	r0, [r7, #20]
 8001c94:	6139      	str	r1, [r7, #16]
 8001c96:	60fa      	str	r2, [r7, #12]
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	ed87 0a01 	vstr	s0, [r7, #4]
    qei->htimx = htimx;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	611a      	str	r2, [r3, #16]
    qei->ppr = ppr;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	619a      	str	r2, [r3, #24]
    qei->freq = freq;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	621a      	str	r2, [r3, #32]
    qei->c[NOW] = 0;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	605a      	str	r2, [r3, #4]
    qei->pps = 0;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = 0;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->enc_period = 65536 - (65536 % ppr);
 8001cd4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	fb93 f2f2 	sdiv	r2, r3, r2
 8001cde:	68f9      	ldr	r1, [r7, #12]
 8001ce0:	fb01 f202 	mul.w	r2, r1, r2
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	615a      	str	r2, [r3, #20]
    qei->pulses = 0;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf = 0;
    qei->revs = 0;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->rads = 0;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->mm = 0;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mmps = 0;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	645a      	str	r2, [r3, #68]	@ 0x44

    qei->ratio = ratio;  // Gear ratio or scaling factor
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	649a      	str	r2, [r3, #72]	@ 0x48
    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001d1a:	213c      	movs	r1, #60	@ 0x3c
 8001d1c:	6938      	ldr	r0, [r7, #16]
 8001d1e:	f006 fb57 	bl	80083d0 <HAL_TIM_Encoder_Start>
}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	0000      	movs	r0, r0
 8001d2c:	0000      	movs	r0, r0
	...

08001d30 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8001d30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx); // Update the current count
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	601a      	str	r2, [r3, #0]

    // Calculate the difference in counts
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	60fb      	str	r3, [r7, #12]

    //Unwrap
    if (diff_counts > qei->enc_period / 2) {
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	0fda      	lsrs	r2, r3, #31
 8001d58:	4413      	add	r3, r2
 8001d5a:	105b      	asrs	r3, r3, #1
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	4293      	cmp	r3, r2
 8001d62:	dd05      	ble.n	8001d70 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	e00e      	b.n	8001d8e <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period) / 2) {
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	425b      	negs	r3, r3
 8001d76:	0fda      	lsrs	r2, r3, #31
 8001d78:	4413      	add	r3, r2
 8001d7a:	105b      	asrs	r3, r3, #1
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4293      	cmp	r3, r2
 8001d82:	da04      	bge.n	8001d8e <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	61da      	str	r2, [r3, #28]
    //qei->diff_countsf = (float)diff_counts*1.25;

    // Calculate Position with ratio adjustment
    qei->pulses += qei->diff_counts;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	441a      	add	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf += qei->diff_countsf;

    // Apply ratio to all position calculations
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->ratio;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	ee07 3a90 	vmov	s15, r3
 8001db0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	ee07 3a90 	vmov	s15, r3
 8001dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc0:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001dca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * 10.0 * qei->ratio;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fb7f 	bl	80004e0 <__aeabi_f2d>
 8001de2:	4604      	mov	r4, r0
 8001de4:	460d      	mov	r5, r1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e02:	ee16 0a90 	vmov	r0, s13
 8001e06:	f7fe fb6b 	bl	80004e0 <__aeabi_f2d>
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b36      	ldr	r3, [pc, #216]	@ (8001ee8 <QEI_get_diff_count+0x1b8>)
 8001e10:	f7fe fbbe 	bl	8000590 <__aeabi_dmul>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4690      	mov	r8, r2
 8001e1a:	4699      	mov	r9, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fb5d 	bl	80004e0 <__aeabi_f2d>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4640      	mov	r0, r8
 8001e2c:	4649      	mov	r1, r9
 8001e2e:	f7fe fbaf 	bl	8000590 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4620      	mov	r0, r4
 8001e38:	4629      	mov	r1, r5
 8001e3a:	f7fe f9f3 	bl	8000224 <__adddf3>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe fdd5 	bl	80009f4 <__aeabi_d2f>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->ratio;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7fe fb43 	bl	80004e0 <__aeabi_f2d>
 8001e5a:	4604      	mov	r4, r0
 8001e5c:	460d      	mov	r5, r1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e7e:	ee17 0a90 	vmov	r0, s15
 8001e82:	f7fe fb2d 	bl	80004e0 <__aeabi_f2d>
 8001e86:	a316      	add	r3, pc, #88	@ (adr r3, 8001ee0 <QEI_get_diff_count+0x1b0>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fb80 	bl	8000590 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4690      	mov	r8, r2
 8001e96:	4699      	mov	r9, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fb1f 	bl	80004e0 <__aeabi_f2d>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4640      	mov	r0, r8
 8001ea8:	4649      	mov	r1, r9
 8001eaa:	f7fe fb71 	bl	8000590 <__aeabi_dmul>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	4629      	mov	r1, r5
 8001eb6:	f7fe f9b5 	bl	8000224 <__adddf3>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f7fe fd97 	bl	80009f4 <__aeabi_d2f>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	639a      	str	r2, [r3, #56]	@ 0x38

    qei->c[PREV] = qei->c[NOW]; // Store the previous count
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	605a      	str	r2, [r3, #4]
}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ede:	bf00      	nop
 8001ee0:	54442d18 	.word	0x54442d18
 8001ee4:	400921fb 	.word	0x400921fb
 8001ee8:	40240000 	.word	0x40240000
 8001eec:	00000000 	.word	0x00000000

08001ef0 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8001ef0:	b5b0      	push	{r4, r5, r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
    // Calculate Velocity with ratio adjustment
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6a12      	ldr	r2, [r2, #32]
 8001f00:	fb02 f303 	mul.w	r3, r2, r3
 8001f04:	ee07 3a90 	vmov	s15, r3
 8001f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Apply ratio to all velocity calculations
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->ratio;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fae2 	bl	80004e0 <__aeabi_f2d>
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	4b6b      	ldr	r3, [pc, #428]	@ (80020d0 <QEI_compute_data+0x1e0>)
 8001f22:	f7fe fb35 	bl	8000590 <__aeabi_dmul>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4614      	mov	r4, r2
 8001f2c:	461d      	mov	r5, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f3a:	ee17 0a90 	vmov	r0, s15
 8001f3e:	f7fe facf 	bl	80004e0 <__aeabi_f2d>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4620      	mov	r0, r4
 8001f48:	4629      	mov	r1, r5
 8001f4a:	f7fe fc4b 	bl	80007e4 <__aeabi_ddiv>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4614      	mov	r4, r2
 8001f54:	461d      	mov	r5, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fac0 	bl	80004e0 <__aeabi_f2d>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4620      	mov	r0, r4
 8001f66:	4629      	mov	r1, r5
 8001f68:	f7fe fb12 	bl	8000590 <__aeabi_dmul>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	f7fe fd3e 	bl	80009f4 <__aeabi_d2f>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->ratio;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001f84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f88:	ee17 0a90 	vmov	r0, s15
 8001f8c:	f7fe faa8 	bl	80004e0 <__aeabi_f2d>
 8001f90:	a34d      	add	r3, pc, #308	@ (adr r3, 80020c8 <QEI_compute_data+0x1d8>)
 8001f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f96:	f7fe fafb 	bl	8000590 <__aeabi_dmul>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4614      	mov	r4, r2
 8001fa0:	461d      	mov	r5, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fae:	ee17 0a90 	vmov	r0, s15
 8001fb2:	f7fe fa95 	bl	80004e0 <__aeabi_f2d>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4620      	mov	r0, r4
 8001fbc:	4629      	mov	r1, r5
 8001fbe:	f7fe fc11 	bl	80007e4 <__aeabi_ddiv>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4614      	mov	r4, r2
 8001fc8:	461d      	mov	r5, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fa86 	bl	80004e0 <__aeabi_f2d>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4620      	mov	r0, r4
 8001fda:	4629      	mov	r1, r5
 8001fdc:	f7fe fad8 	bl	8000590 <__aeabi_dmul>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fd04 	bl	80009f4 <__aeabi_d2f>
 8001fec:	4602      	mov	r2, r0
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->mmps = qei->pps * 10.0 / (float)(qei->ppr) * qei->ratio;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fa72 	bl	80004e0 <__aeabi_f2d>
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	4b34      	ldr	r3, [pc, #208]	@ (80020d4 <QEI_compute_data+0x1e4>)
 8002002:	f7fe fac5 	bl	8000590 <__aeabi_dmul>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4614      	mov	r4, r2
 800200c:	461d      	mov	r5, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800201a:	ee17 0a90 	vmov	r0, s15
 800201e:	f7fe fa5f 	bl	80004e0 <__aeabi_f2d>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4620      	mov	r0, r4
 8002028:	4629      	mov	r1, r5
 800202a:	f7fe fbdb 	bl	80007e4 <__aeabi_ddiv>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4614      	mov	r4, r2
 8002034:	461d      	mov	r5, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fa50 	bl	80004e0 <__aeabi_f2d>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4620      	mov	r0, r4
 8002046:	4629      	mov	r1, r5
 8002048:	f7fe faa2 	bl	8000590 <__aeabi_dmul>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	f7fe fcce 	bl	80009f4 <__aeabi_d2f>
 8002058:	4602      	mov	r2, r0
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	645a      	str	r2, [r3, #68]	@ 0x44

    // Calculate Acceleration with ratio adjustment
    qei->r[NOW] = qei->radps;  // radps already has ratio applied
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	609a      	str	r2, [r3, #8]
    float diff_velocity = (qei->r[NOW] - qei->r[PREV]);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	ed93 7a02 	vldr	s14, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002072:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002076:	edc7 7a03 	vstr	s15, [r7, #12]
    if (diff_velocity == 0) {
 800207a:	edd7 7a03 	vldr	s15, [r7, #12]
 800207e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002086:	d104      	bne.n	8002092 <QEI_compute_data+0x1a2>
        qei->radpss = 0;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002090:	e00f      	b.n	80020b2 <QEI_compute_data+0x1c2>
    } else {
        qei->radpss = diff_velocity / (1 / (qei->freq));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d102      	bne.n	80020a0 <QEI_compute_data+0x1b0>
 800209a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800209e:	e001      	b.n	80020a4 <QEI_compute_data+0x1b4>
 80020a0:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80020d8 <QEI_compute_data+0x1e8>
 80020a4:	edd7 6a03 	vldr	s13, [r7, #12]
 80020a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
        // No need to multiply by ratio again since diff_velocity already includes it
    }
    qei->r[PREV] = qei->r[NOW]; // Store the previous count
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	60da      	str	r2, [r3, #12]
}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bdb0      	pop	{r4, r5, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	f3af 8000 	nop.w
 80020c8:	54442d18 	.word	0x54442d18
 80020cc:	400921fb 	.word	0x400921fb
 80020d0:	404e0000 	.word	0x404e0000
 80020d4:	40240000 	.word	0x40240000
 80020d8:	00000000 	.word	0x00000000

080020dc <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08e      	sub	sp, #56	@ 0x38
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6178      	str	r0, [r7, #20]
 80020e4:	ed87 0a04 	vstr	s0, [r7, #16]
 80020e8:	edc7 0a03 	vstr	s1, [r7, #12]
 80020ec:	ed87 1a02 	vstr	s2, [r7, #8]
 80020f0:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2200      	movs	r2, #0
 80020f8:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f04f 0200 	mov.w	r2, #0
 8002110:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 800211a:	ed97 7a03 	vldr	s14, [r7, #12]
 800211e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002122:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002126:	eef0 7ae7 	vabs.f32	s15, s15
 800212a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 800212e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002132:	edd7 7a04 	vldr	s15, [r7, #16]
 8002136:	ee77 7a67 	vsub.f32	s15, s14, s15
 800213a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800213e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002142:	d503      	bpl.n	800214c <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	22ff      	movs	r2, #255	@ 0xff
 8002148:	741a      	strb	r2, [r3, #16]
 800214a:	e002      	b.n	8002152 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2201      	movs	r2, #1
 8002150:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8002152:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002156:	eef5 7a40 	vcmp.f32	s15, #0.0
 800215a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215e:	d006      	beq.n	800216e <Trapezoidal_Generator+0x92>
 8002160:	edd7 7a01 	vldr	s15, [r7, #4]
 8002164:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800216c:	d104      	bne.n	8002178 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	60da      	str	r2, [r3, #12]
        return;
 8002176:	e06f      	b.n	8002258 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8002178:	edd7 6a02 	vldr	s13, [r7, #8]
 800217c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002180:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002184:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8002188:	edd7 7a01 	vldr	s15, [r7, #4]
 800218c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002190:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002194:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80021a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 80021a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 80021ac:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80021b0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80021b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021b8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 80021bc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80021c0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80021c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021cc:	db27      	blt.n	800221e <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 80021ce:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80021d2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80021d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021da:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 80021de:	edd7 6a07 	vldr	s13, [r7, #28]
 80021e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80021e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021ea:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021f2:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 80021f4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80021f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80021fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8002206:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800220a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800220e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	edc3 7a02 	vstr	s15, [r3, #8]
 800221c:	e018      	b.n	8002250 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 800221e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002222:	edd7 7a01 	vldr	s15, [r7, #4]
 8002226:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800222a:	eeb0 0a66 	vmov.f32	s0, s13
 800222e:	f009 fc83 	bl	800bb38 <sqrtf>
 8002232:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	6a3a      	ldr	r2, [r7, #32]
 800223a:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	6a3a      	ldr	r2, [r7, #32]
 8002240:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8002242:	edd7 7a08 	vldr	s15, [r7, #32]
 8002246:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	60da      	str	r2, [r3, #12]
}
 8002258:	3738      	adds	r7, #56	@ 0x38
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8002260:	b480      	push	{r7}
 8002262:	b08d      	sub	sp, #52	@ 0x34
 8002264:	af00      	add	r7, sp, #0
 8002266:	6178      	str	r0, [r7, #20]
 8002268:	6139      	str	r1, [r7, #16]
 800226a:	ed87 0a03 	vstr	s0, [r7, #12]
 800226e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002272:	ed87 1a01 	vstr	s2, [r7, #4]
 8002276:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002280:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8002504 <Trapezoidal_Evaluated+0x2a4>
 8002284:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	ed93 7a03 	vldr	s14, [r3, #12]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	edd3 7a03 	vldr	s15, [r3, #12]
 800229a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	f200 811b 	bhi.w	80024dc <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2200      	movs	r2, #0
 80022aa:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	7c1b      	ldrb	r3, [r3, #16]
 80022b0:	b25b      	sxtb	r3, r3
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ba:	ed97 7a00 	vldr	s14, [r7]
 80022be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	ed93 7a00 	vldr	s14, [r3]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80022d2:	eeb4 7a67 	vcmp.f32	s14, s15
 80022d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022da:	d109      	bne.n	80022f0 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80022e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ea:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 80022ee:	e00c      	b.n	800230a <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	7c1b      	ldrb	r3, [r3, #16]
 80022f4:	b25b      	sxtb	r3, r3
 80022f6:	ee07 3a90 	vmov	s15, r3
 80022fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022fe:	ed97 7a01 	vldr	s14, [r7, #4]
 8002302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002306:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	edd3 7a00 	vldr	s15, [r3]
 8002316:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800231a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231e:	d824      	bhi.n	800236a <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8002320:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002324:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002328:	ee27 7a87 	vmul.f32	s14, s15, s14
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002332:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	edd3 7a03 	vldr	s15, [r3, #12]
 800233c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002340:	edd7 7a03 	vldr	s15, [r7, #12]
 8002344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	ed93 7a03 	vldr	s14, [r3, #12]
 8002354:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002366:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8002368:	e0c6      	b.n	80024f8 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	edd3 7a01 	vldr	s15, [r3, #4]
 8002376:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237e:	d830      	bhi.n	80023e2 <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8002380:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002384:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002388:	ee27 7a87 	vmul.f32	s14, s15, s14
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	edd3 7a00 	vldr	s15, [r3]
 8002392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80023a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a8:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023bc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80023c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80023c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023d6:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
}
 80023e0:	e08a      	b.n	80024f8 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80023ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f6:	d900      	bls.n	80023fa <Trapezoidal_Evaluated+0x19a>
}
 80023f8:	e07e      	b.n	80024f8 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 80023fa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80023fe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002402:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	edd3 7a00 	vldr	s15, [r3]
 800240c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	edd3 7a00 	vldr	s15, [r3]
 8002416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241a:	ed97 7a03 	vldr	s14, [r7, #12]
 800241e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002422:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	edd3 7a00 	vldr	s15, [r3]
 8002436:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243e:	dd11      	ble.n	8002464 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	ed93 7a01 	vldr	s14, [r3, #4]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	edd3 7a00 	vldr	s15, [r3]
 800244c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002450:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002454:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002458:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800245c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002460:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	ed93 7a03 	vldr	s14, [r3, #12]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002470:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002474:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 8002478:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800247c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002480:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002484:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800248c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002490:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002494:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002498:	edd7 7a07 	vldr	s15, [r7, #28]
 800249c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80024a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 80024b2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80024b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80024ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024be:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80024c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 80024cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80024d0:	eef1 7a67 	vneg.f32	s15, s15
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80024da:	e00d      	b.n	80024f8 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	2201      	movs	r2, #1
 80024e0:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
}
 80024f8:	bf00      	nop
 80024fa:	3734      	adds	r7, #52	@ 0x34
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	3a83126f 	.word	0x3a83126f

08002508 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b08c      	sub	sp, #48	@ 0x30
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800250e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	605a      	str	r2, [r3, #4]
 8002518:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800251a:	1d3b      	adds	r3, r7, #4
 800251c:	2220      	movs	r2, #32
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f009 fac5 	bl	800bab0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002526:	4b39      	ldr	r3, [pc, #228]	@ (800260c <MX_ADC1_Init+0x104>)
 8002528:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800252c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800252e:	4b37      	ldr	r3, [pc, #220]	@ (800260c <MX_ADC1_Init+0x104>)
 8002530:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002536:	4b35      	ldr	r3, [pc, #212]	@ (800260c <MX_ADC1_Init+0x104>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800253c:	4b33      	ldr	r3, [pc, #204]	@ (800260c <MX_ADC1_Init+0x104>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002542:	4b32      	ldr	r3, [pc, #200]	@ (800260c <MX_ADC1_Init+0x104>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002548:	4b30      	ldr	r3, [pc, #192]	@ (800260c <MX_ADC1_Init+0x104>)
 800254a:	2201      	movs	r2, #1
 800254c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800254e:	4b2f      	ldr	r3, [pc, #188]	@ (800260c <MX_ADC1_Init+0x104>)
 8002550:	2204      	movs	r2, #4
 8002552:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002554:	4b2d      	ldr	r3, [pc, #180]	@ (800260c <MX_ADC1_Init+0x104>)
 8002556:	2200      	movs	r2, #0
 8002558:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800255a:	4b2c      	ldr	r3, [pc, #176]	@ (800260c <MX_ADC1_Init+0x104>)
 800255c:	2201      	movs	r2, #1
 800255e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8002560:	4b2a      	ldr	r3, [pc, #168]	@ (800260c <MX_ADC1_Init+0x104>)
 8002562:	2202      	movs	r2, #2
 8002564:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002566:	4b29      	ldr	r3, [pc, #164]	@ (800260c <MX_ADC1_Init+0x104>)
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800256e:	4b27      	ldr	r3, [pc, #156]	@ (800260c <MX_ADC1_Init+0x104>)
 8002570:	2200      	movs	r2, #0
 8002572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002574:	4b25      	ldr	r3, [pc, #148]	@ (800260c <MX_ADC1_Init+0x104>)
 8002576:	2200      	movs	r2, #0
 8002578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800257a:	4b24      	ldr	r3, [pc, #144]	@ (800260c <MX_ADC1_Init+0x104>)
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002582:	4b22      	ldr	r3, [pc, #136]	@ (800260c <MX_ADC1_Init+0x104>)
 8002584:	2200      	movs	r2, #0
 8002586:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002588:	4b20      	ldr	r3, [pc, #128]	@ (800260c <MX_ADC1_Init+0x104>)
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002590:	481e      	ldr	r0, [pc, #120]	@ (800260c <MX_ADC1_Init+0x104>)
 8002592:	f002 fa41 	bl	8004a18 <HAL_ADC_Init>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800259c:	f000 fd64 	bl	8003068 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80025a0:	2300      	movs	r3, #0
 80025a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80025a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025a8:	4619      	mov	r1, r3
 80025aa:	4818      	ldr	r0, [pc, #96]	@ (800260c <MX_ADC1_Init+0x104>)
 80025ac:	f003 fb60 	bl	8005c70 <HAL_ADCEx_MultiModeConfigChannel>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80025b6:	f000 fd57 	bl	8003068 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80025ba:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <MX_ADC1_Init+0x108>)
 80025bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025be:	2306      	movs	r3, #6
 80025c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80025c2:	2307      	movs	r3, #7
 80025c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80025c6:	237f      	movs	r3, #127	@ 0x7f
 80025c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80025ca:	2304      	movs	r3, #4
 80025cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	4619      	mov	r1, r3
 80025d6:	480d      	ldr	r0, [pc, #52]	@ (800260c <MX_ADC1_Init+0x104>)
 80025d8:	f002 fccc 	bl	8004f74 <HAL_ADC_ConfigChannel>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80025e2:	f000 fd41 	bl	8003068 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80025e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <MX_ADC1_Init+0x10c>)
 80025e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80025ea:	230c      	movs	r3, #12
 80025ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	4619      	mov	r1, r3
 80025f2:	4806      	ldr	r0, [pc, #24]	@ (800260c <MX_ADC1_Init+0x104>)
 80025f4:	f002 fcbe 	bl	8004f74 <HAL_ADC_ConfigChannel>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80025fe:	f000 fd33 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002602:	bf00      	nop
 8002604:	3730      	adds	r7, #48	@ 0x30
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	200001d4 	.word	0x200001d4
 8002610:	19200040 	.word	0x19200040
 8002614:	1d500080 	.word	0x1d500080

08002618 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b09e      	sub	sp, #120	@ 0x78
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002630:	f107 0310 	add.w	r3, r7, #16
 8002634:	2254      	movs	r2, #84	@ 0x54
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f009 fa39 	bl	800bab0 <memset>
  if(adcHandle->Instance==ADC1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002646:	d15e      	bne.n	8002706 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002648:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800264c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800264e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002652:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002654:	f107 0310 	add.w	r3, r7, #16
 8002658:	4618      	mov	r0, r3
 800265a:	f004 ffff 	bl	800765c <HAL_RCCEx_PeriphCLKConfig>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002664:	f000 fd00 	bl	8003068 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002668:	4b29      	ldr	r3, [pc, #164]	@ (8002710 <HAL_ADC_MspInit+0xf8>)
 800266a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266c:	4a28      	ldr	r2, [pc, #160]	@ (8002710 <HAL_ADC_MspInit+0xf8>)
 800266e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002672:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002674:	4b26      	ldr	r3, [pc, #152]	@ (8002710 <HAL_ADC_MspInit+0xf8>)
 8002676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002678:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002680:	4b23      	ldr	r3, [pc, #140]	@ (8002710 <HAL_ADC_MspInit+0xf8>)
 8002682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002684:	4a22      	ldr	r2, [pc, #136]	@ (8002710 <HAL_ADC_MspInit+0xf8>)
 8002686:	f043 0304 	orr.w	r3, r3, #4
 800268a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800268c:	4b20      	ldr	r3, [pc, #128]	@ (8002710 <HAL_ADC_MspInit+0xf8>)
 800268e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002698:	2303      	movs	r3, #3
 800269a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800269c:	2303      	movs	r3, #3
 800269e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80026a8:	4619      	mov	r1, r3
 80026aa:	481a      	ldr	r0, [pc, #104]	@ (8002714 <HAL_ADC_MspInit+0xfc>)
 80026ac:	f004 f82a 	bl	8006704 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80026b0:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <HAL_ADC_MspInit+0x100>)
 80026b2:	4a1a      	ldr	r2, [pc, #104]	@ (800271c <HAL_ADC_MspInit+0x104>)
 80026b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80026b6:	4b18      	ldr	r3, [pc, #96]	@ (8002718 <HAL_ADC_MspInit+0x100>)
 80026b8:	2205      	movs	r2, #5
 80026ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026bc:	4b16      	ldr	r3, [pc, #88]	@ (8002718 <HAL_ADC_MspInit+0x100>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c2:	4b15      	ldr	r3, [pc, #84]	@ (8002718 <HAL_ADC_MspInit+0x100>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026c8:	4b13      	ldr	r3, [pc, #76]	@ (8002718 <HAL_ADC_MspInit+0x100>)
 80026ca:	2280      	movs	r2, #128	@ 0x80
 80026cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026ce:	4b12      	ldr	r3, [pc, #72]	@ (8002718 <HAL_ADC_MspInit+0x100>)
 80026d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80026d6:	4b10      	ldr	r3, [pc, #64]	@ (8002718 <HAL_ADC_MspInit+0x100>)
 80026d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80026de:	4b0e      	ldr	r3, [pc, #56]	@ (8002718 <HAL_ADC_MspInit+0x100>)
 80026e0:	2220      	movs	r2, #32
 80026e2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80026e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002718 <HAL_ADC_MspInit+0x100>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80026ea:	480b      	ldr	r0, [pc, #44]	@ (8002718 <HAL_ADC_MspInit+0x100>)
 80026ec:	f003 fcd8 	bl	80060a0 <HAL_DMA_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 80026f6:	f000 fcb7 	bl	8003068 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a06      	ldr	r2, [pc, #24]	@ (8002718 <HAL_ADC_MspInit+0x100>)
 80026fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8002700:	4a05      	ldr	r2, [pc, #20]	@ (8002718 <HAL_ADC_MspInit+0x100>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002706:	bf00      	nop
 8002708:	3778      	adds	r7, #120	@ 0x78
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	48000800 	.word	0x48000800
 8002718:	20000240 	.word	0x20000240
 800271c:	40020008 	.word	0x40020008

08002720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002726:	4b1a      	ldr	r3, [pc, #104]	@ (8002790 <MX_DMA_Init+0x70>)
 8002728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800272a:	4a19      	ldr	r2, [pc, #100]	@ (8002790 <MX_DMA_Init+0x70>)
 800272c:	f043 0304 	orr.w	r3, r3, #4
 8002730:	6493      	str	r3, [r2, #72]	@ 0x48
 8002732:	4b17      	ldr	r3, [pc, #92]	@ (8002790 <MX_DMA_Init+0x70>)
 8002734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	607b      	str	r3, [r7, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800273e:	4b14      	ldr	r3, [pc, #80]	@ (8002790 <MX_DMA_Init+0x70>)
 8002740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002742:	4a13      	ldr	r2, [pc, #76]	@ (8002790 <MX_DMA_Init+0x70>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	6493      	str	r3, [r2, #72]	@ 0x48
 800274a:	4b11      	ldr	r3, [pc, #68]	@ (8002790 <MX_DMA_Init+0x70>)
 800274c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002756:	2200      	movs	r2, #0
 8002758:	2100      	movs	r1, #0
 800275a:	200b      	movs	r0, #11
 800275c:	f003 fc6b 	bl	8006036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002760:	200b      	movs	r0, #11
 8002762:	f003 fc82 	bl	800606a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2100      	movs	r1, #0
 800276a:	200c      	movs	r0, #12
 800276c:	f003 fc63 	bl	8006036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002770:	200c      	movs	r0, #12
 8002772:	f003 fc7a 	bl	800606a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	200d      	movs	r0, #13
 800277c:	f003 fc5b 	bl	8006036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002780:	200d      	movs	r0, #13
 8002782:	f003 fc72 	bl	800606a <HAL_NVIC_EnableIRQ>

}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000

08002794 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	@ 0x28
 8002798:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	2200      	movs	r2, #0
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
 80027a4:	609a      	str	r2, [r3, #8]
 80027a6:	60da      	str	r2, [r3, #12]
 80027a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027aa:	4b4f      	ldr	r3, [pc, #316]	@ (80028e8 <MX_GPIO_Init+0x154>)
 80027ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ae:	4a4e      	ldr	r2, [pc, #312]	@ (80028e8 <MX_GPIO_Init+0x154>)
 80027b0:	f043 0304 	orr.w	r3, r3, #4
 80027b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027b6:	4b4c      	ldr	r3, [pc, #304]	@ (80028e8 <MX_GPIO_Init+0x154>)
 80027b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027c2:	4b49      	ldr	r3, [pc, #292]	@ (80028e8 <MX_GPIO_Init+0x154>)
 80027c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c6:	4a48      	ldr	r2, [pc, #288]	@ (80028e8 <MX_GPIO_Init+0x154>)
 80027c8:	f043 0320 	orr.w	r3, r3, #32
 80027cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ce:	4b46      	ldr	r3, [pc, #280]	@ (80028e8 <MX_GPIO_Init+0x154>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027da:	4b43      	ldr	r3, [pc, #268]	@ (80028e8 <MX_GPIO_Init+0x154>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027de:	4a42      	ldr	r2, [pc, #264]	@ (80028e8 <MX_GPIO_Init+0x154>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027e6:	4b40      	ldr	r3, [pc, #256]	@ (80028e8 <MX_GPIO_Init+0x154>)
 80027e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	60bb      	str	r3, [r7, #8]
 80027f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f2:	4b3d      	ldr	r3, [pc, #244]	@ (80028e8 <MX_GPIO_Init+0x154>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f6:	4a3c      	ldr	r2, [pc, #240]	@ (80028e8 <MX_GPIO_Init+0x154>)
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027fe:	4b3a      	ldr	r3, [pc, #232]	@ (80028e8 <MX_GPIO_Init+0x154>)
 8002800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 800280a:	2200      	movs	r2, #0
 800280c:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002810:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002814:	f004 f910 	bl	8006a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002818:	2200      	movs	r2, #0
 800281a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800281e:	4833      	ldr	r0, [pc, #204]	@ (80028ec <MX_GPIO_Init+0x158>)
 8002820:	f004 f90a 	bl	8006a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002824:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800282a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800282e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4619      	mov	r1, r3
 800283a:	482c      	ldr	r0, [pc, #176]	@ (80028ec <MX_GPIO_Init+0x158>)
 800283c:	f003 ff62 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8002840:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8002844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002846:	2301      	movs	r3, #1
 8002848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284e:	2300      	movs	r3, #0
 8002850:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	4619      	mov	r1, r3
 8002858:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800285c:	f003 ff52 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_LIM_Pin LOWER_LIM_Pin PHOTO_REVO_Pin PB11
                           PB12 EMER_Pin PROX_Pin SAVE_Pin */
  GPIO_InitStruct.Pin = UPPER_LIM_Pin|LOWER_LIM_Pin|PHOTO_REVO_Pin|GPIO_PIN_11
 8002860:	f641 43b6 	movw	r3, #7350	@ 0x1cb6
 8002864:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|EMER_Pin|PROX_Pin|SAVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286e:	f107 0314 	add.w	r3, r7, #20
 8002872:	4619      	mov	r1, r3
 8002874:	481e      	ldr	r0, [pc, #120]	@ (80028f0 <MX_GPIO_Init+0x15c>)
 8002876:	f003 ff45 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800287a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800287e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002880:	2301      	movs	r3, #1
 8002882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	4619      	mov	r1, r3
 8002892:	4816      	ldr	r0, [pc, #88]	@ (80028ec <MX_GPIO_Init+0x158>)
 8002894:	f003 ff36 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PHOTO_PRIS_Pin */
  GPIO_InitStruct.Pin = PHOTO_PRIS_Pin;
 8002898:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800289c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PHOTO_PRIS_GPIO_Port, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028b0:	f003 ff28 	bl	8006704 <HAL_GPIO_Init>

  /*Configure GPIO pins : START_Pin DELETE_Pin RESET_SYS_Pin */
  GPIO_InitStruct.Pin = START_Pin|DELETE_Pin|RESET_SYS_Pin;
 80028b4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80028b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c2:	f107 0314 	add.w	r3, r7, #20
 80028c6:	4619      	mov	r1, r3
 80028c8:	4808      	ldr	r0, [pc, #32]	@ (80028ec <MX_GPIO_Init+0x158>)
 80028ca:	f003 ff1b 	bl	8006704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80028ce:	2200      	movs	r2, #0
 80028d0:	2100      	movs	r1, #0
 80028d2:	2028      	movs	r0, #40	@ 0x28
 80028d4:	f003 fbaf 	bl	8006036 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80028d8:	2028      	movs	r0, #40	@ 0x28
 80028da:	f003 fbc6 	bl	800606a <HAL_NVIC_EnableIRQ>

}
 80028de:	bf00      	nop
 80028e0:	3728      	adds	r7, #40	@ 0x28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	48000800 	.word	0x48000800
 80028f0:	48000400 	.word	0x48000400

080028f4 <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix){
 80028f4:	b5b0      	push	{r4, r5, r7, lr}
 80028f6:	b0a2      	sub	sp, #136	@ 0x88
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
	filter->Q = 0.05f; //0.05
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a37      	ldr	r2, [pc, #220]	@ (80029e0 <Kalman_Start+0xec>)
 8002904:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 0.1f;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4a36      	ldr	r2, [pc, #216]	@ (80029e4 <Kalman_Start+0xf0>)
 800290c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	677b      	str	r3, [r7, #116]	@ 0x74
 8002916:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800291a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	float32_t g[4] = {0.0f,
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002930:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002934:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002936:	f04f 0300 	mov.w	r3, #0
 800293a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	673b      	str	r3, [r7, #112]	@ 0x70
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8002942:	4b29      	ldr	r3, [pc, #164]	@ (80029e8 <Kalman_Start+0xf4>)
 8002944:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002948:	461d      	mov	r5, r3
 800294a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800294c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800294e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002956:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800295a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 800295e:	f107 0314 	add.w	r3, r7, #20
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	609a      	str	r2, [r3, #8]
 800296a:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800297c:	e028      	b.n	80029d0 <Kalman_Start+0xdc>
	{
		filter->A[i] = A_matrix[i];
 800297e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	4413      	add	r3, r2
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68f9      	ldr	r1, [r7, #12]
 800298c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002990:	3314      	adds	r3, #20
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8002998:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	3388      	adds	r3, #136	@ 0x88
 80029a0:	443b      	add	r3, r7
 80029a2:	3b64      	subs	r3, #100	@ 0x64
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68f9      	ldr	r1, [r7, #12]
 80029a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029ac:	3398      	adds	r3, #152	@ 0x98
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	440b      	add	r3, r1
 80029b2:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 80029b4:	68fa      	ldr	r2, [r7, #12]
 80029b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029ba:	3304      	adds	r3, #4
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	f04f 0200 	mov.w	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 80029c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029ca:	3301      	adds	r3, #1
 80029cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80029d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029d4:	2b0f      	cmp	r3, #15
 80029d6:	ddd2      	ble.n	800297e <Kalman_Start+0x8a>
	}

	for(i=0;i<4;i++)
 80029d8:	2300      	movs	r3, #0
 80029da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80029de:	e040      	b.n	8002a62 <Kalman_Start+0x16e>
 80029e0:	3d4ccccd 	.word	0x3d4ccccd
 80029e4:	3dcccccd 	.word	0x3dcccccd
 80029e8:	0800c67c 	.word	0x0800c67c
	{
		filter->X_k[i] = x_k[i];
 80029ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	3388      	adds	r3, #136	@ 0x88
 80029f4:	443b      	add	r3, r7
 80029f6:	3b74      	subs	r3, #116	@ 0x74
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68f9      	ldr	r1, [r7, #12]
 80029fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8002a06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	4413      	add	r3, r2
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68f9      	ldr	r1, [r7, #12]
 8002a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a18:	3324      	adds	r3, #36	@ 0x24
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8002a20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	3388      	adds	r3, #136	@ 0x88
 8002a28:	443b      	add	r3, r7
 8002a2a:	3b14      	subs	r3, #20
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68f9      	ldr	r1, [r7, #12]
 8002a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a34:	3328      	adds	r3, #40	@ 0x28
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8002a3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	3388      	adds	r3, #136	@ 0x88
 8002a44:	443b      	add	r3, r7
 8002a46:	3b24      	subs	r3, #36	@ 0x24
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68f9      	ldr	r1, [r7, #12]
 8002a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a50:	332c      	adds	r3, #44	@ 0x2c
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8002a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a66:	2b03      	cmp	r3, #3
 8002a68:	ddc0      	ble.n	80029ec <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2201      	movs	r2, #1
 8002a74:	2104      	movs	r1, #4
 8002a76:	f008 ff4d 	bl	800b914 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	3310      	adds	r3, #16
 8002a84:	2204      	movs	r2, #4
 8002a86:	2104      	movs	r1, #4
 8002a88:	f008 ff44 	bl	800b914 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3350      	adds	r3, #80	@ 0x50
 8002a96:	2204      	movs	r2, #4
 8002a98:	2104      	movs	r1, #4
 8002a9a:	f008 ff3b 	bl	800b914 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	3390      	adds	r3, #144	@ 0x90
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	2104      	movs	r1, #4
 8002aac:	f008 ff32 	bl	800b914 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	33a0      	adds	r3, #160	@ 0xa0
 8002aba:	2204      	movs	r2, #4
 8002abc:	2101      	movs	r1, #1
 8002abe:	f008 ff29 	bl	800b914 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	33b0      	adds	r3, #176	@ 0xb0
 8002acc:	2201      	movs	r2, #1
 8002ace:	2104      	movs	r1, #4
 8002ad0:	f008 ff20 	bl	800b914 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	33c8      	adds	r3, #200	@ 0xc8
 8002ade:	2204      	movs	r2, #4
 8002ae0:	2104      	movs	r1, #4
 8002ae2:	f008 ff17 	bl	800b914 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8002af2:	2201      	movs	r2, #1
 8002af4:	2104      	movs	r1, #4
 8002af6:	f008 ff0d 	bl	800b914 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8002b06:	2204      	movs	r2, #4
 8002b08:	2101      	movs	r1, #1
 8002b0a:	f008 ff03 	bl	800b914 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8002b1a:	2204      	movs	r2, #4
 8002b1c:	2104      	movs	r1, #4
 8002b1e:	f008 fef9 	bl	800b914 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002b2e:	2204      	movs	r2, #4
 8002b30:	2104      	movs	r1, #4
 8002b32:	f008 feef 	bl	800b914 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8002b42:	2201      	movs	r2, #1
 8002b44:	2104      	movs	r1, #4
 8002b46:	f008 fee5 	bl	800b914 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8002b56:	2201      	movs	r2, #1
 8002b58:	2104      	movs	r1, #4
 8002b5a:	f008 fedb 	bl	800b914 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	f008 fed1 	bl	800b914 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8002b7e:	2201      	movs	r2, #1
 8002b80:	2101      	movs	r1, #1
 8002b82:	f008 fec7 	bl	800b914 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8002b92:	2201      	movs	r2, #1
 8002b94:	2101      	movs	r1, #1
 8002b96:	f008 febd 	bl	800b914 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	2104      	movs	r1, #4
 8002baa:	f008 feb3 	bl	800b914 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002bba:	2201      	movs	r2, #1
 8002bbc:	2104      	movs	r1, #4
 8002bbe:	f008 fea9 	bl	800b914 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8002bce:	2201      	movs	r2, #1
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	f008 fe9f 	bl	800b914 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8002be2:	2201      	movs	r2, #1
 8002be4:	2101      	movs	r1, #1
 8002be6:	f008 fe95 	bl	800b914 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	f008 fe8b 	bl	800b914 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	2104      	movs	r1, #4
 8002c0e:	f008 fe81 	bl	800b914 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002c1e:	2201      	movs	r2, #1
 8002c20:	2101      	movs	r1, #1
 8002c22:	f008 fe77 	bl	800b914 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002c32:	2204      	movs	r2, #4
 8002c34:	2104      	movs	r1, #4
 8002c36:	f008 fe6d 	bl	800b914 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	33c4      	adds	r3, #196	@ 0xc4
 8002c44:	2201      	movs	r2, #1
 8002c46:	2101      	movs	r1, #1
 8002c48:	f008 fe64 	bl	800b914 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8002c58:	2201      	movs	r2, #1
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	f008 fe5a 	bl	800b914 <arm_mat_init_f32>
}
 8002c60:	bf00      	nop
 8002c62:	3788      	adds	r7, #136	@ 0x88
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bdb0      	pop	{r4, r5, r7, pc}

08002c68 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c6c:	f3bf 8f4f 	dsb	sy
}
 8002c70:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002c72:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <__NVIC_SystemReset+0x24>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002c7a:	4904      	ldr	r1, [pc, #16]	@ (8002c8c <__NVIC_SystemReset+0x24>)
 8002c7c:	4b04      	ldr	r3, [pc, #16]	@ (8002c90 <__NVIC_SystemReset+0x28>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c82:	f3bf 8f4f 	dsb	sy
}
 8002c86:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002c88:	bf00      	nop
 8002c8a:	e7fd      	b.n	8002c88 <__NVIC_SystemReset+0x20>
 8002c8c:	e000ed00 	.word	0xe000ed00
 8002c90:	05fa0004 	.word	0x05fa0004

08002c94 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002c94:	b598      	push	{r3, r4, r7, lr}
 8002c96:	ed2d 8b02 	vpush	{d8}
 8002c9a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002c9c:	f001 fc07 	bl	80044ae <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002ca0:	f000 f8a4 	bl	8002dec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002ca4:	f7ff fd76 	bl	8002794 <MX_GPIO_Init>
	MX_DMA_Init();
 8002ca8:	f7ff fd3a 	bl	8002720 <MX_DMA_Init>
	MX_ADC1_Init();
 8002cac:	f7ff fc2c 	bl	8002508 <MX_ADC1_Init>
	MX_TIM2_Init();
 8002cb0:	f000 fefe 	bl	8003ab0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8002cb4:	f000 ff4a 	bl	8003b4c <MX_TIM3_Init>
	MX_TIM4_Init();
 8002cb8:	f000 ff9e 	bl	8003bf8 <MX_TIM4_Init>
	MX_TIM5_Init();
 8002cbc:	f000 fff2 	bl	8003ca4 <MX_TIM5_Init>
	MX_TIM8_Init();
 8002cc0:	f001 f83e 	bl	8003d40 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8002cc4:	f001 fac0 	bl	8004248 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8002cc8:	f001 f902 	bl	8003ed0 <MX_TIM16_Init>
	MX_TIM1_Init();
 8002ccc:	f000 fe5c 	bl	8003988 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8002cd0:	f000 f9d0 	bl	8003074 <plotter_begin>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		static uint8_t button_pressed_previous = 0;

		if (b1 && !button_pressed_previous && !trajectoryActive) {
 8002cd4:	4b37      	ldr	r3, [pc, #220]	@ (8002db4 <main+0x120>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d055      	beq.n	8002d88 <main+0xf4>
 8002cdc:	4b36      	ldr	r3, [pc, #216]	@ (8002db8 <main+0x124>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d151      	bne.n	8002d88 <main+0xf4>
 8002ce4:	4b35      	ldr	r3, [pc, #212]	@ (8002dbc <main+0x128>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	f083 0301 	eor.w	r3, r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d04a      	beq.n	8002d88 <main+0xf4>
			prisEva.t = 0.0f;
 8002cf2:	4b33      	ldr	r3, [pc, #204]	@ (8002dc0 <main+0x12c>)
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	60da      	str	r2, [r3, #12]
			prisEva.isFinised = false;
 8002cfa:	4b31      	ldr	r3, [pc, #196]	@ (8002dc0 <main+0x12c>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	741a      	strb	r2, [r3, #16]

			initial_p = current_position;
 8002d00:	4b30      	ldr	r3, [pc, #192]	@ (8002dc4 <main+0x130>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a30      	ldr	r2, [pc, #192]	@ (8002dc8 <main+0x134>)
 8002d06:	6013      	str	r3, [r2, #0]

			target_p = trajectory_sequence[trajectory_sequence_index];
 8002d08:	4b30      	ldr	r3, [pc, #192]	@ (8002dcc <main+0x138>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4a30      	ldr	r2, [pc, #192]	@ (8002dd0 <main+0x13c>)
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd4 <main+0x140>)
 8002d16:	6013      	str	r3, [r2, #0]

//			Trapezoidal_Generator(&prisGen, initial_p, target_p,
//					ZGX45RGG_400RPM_Constant.qd_max,
//					ZGX45RGG_400RPM_Constant.qd_max * 3.0);

			Trapezoidal_Generator(&prisGen, initial_p, target_p,
 8002d18:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc8 <main+0x134>)
 8002d1a:	ed93 8a00 	vldr	s16, [r3]
 8002d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd4 <main+0x140>)
 8002d20:	edd3 8a00 	vldr	s17, [r3]
					ZGX45RGG_150RPM_Constant.qd_max,
 8002d24:	4b2c      	ldr	r3, [pc, #176]	@ (8002dd8 <main+0x144>)
 8002d26:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			Trapezoidal_Generator(&prisGen, initial_p, target_p,
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f7fd fe61 	bl	80009f4 <__aeabi_d2f>
 8002d32:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.qd_max * 3.0);
 8002d34:	4b28      	ldr	r3, [pc, #160]	@ (8002dd8 <main+0x144>)
 8002d36:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	4b27      	ldr	r3, [pc, #156]	@ (8002ddc <main+0x148>)
 8002d40:	f7fd fc26 	bl	8000590 <__aeabi_dmul>
 8002d44:	4602      	mov	r2, r0
 8002d46:	460b      	mov	r3, r1
			Trapezoidal_Generator(&prisGen, initial_p, target_p,
 8002d48:	4610      	mov	r0, r2
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	f7fd fe52 	bl	80009f4 <__aeabi_d2f>
 8002d50:	4603      	mov	r3, r0
 8002d52:	ee01 3a90 	vmov	s3, r3
 8002d56:	ee01 4a10 	vmov	s2, r4
 8002d5a:	eef0 0a68 	vmov.f32	s1, s17
 8002d5e:	eeb0 0a48 	vmov.f32	s0, s16
 8002d62:	481f      	ldr	r0, [pc, #124]	@ (8002de0 <main+0x14c>)
 8002d64:	f7ff f9ba 	bl	80020dc <Trapezoidal_Generator>

			trajectoryActive = true;
 8002d68:	4b14      	ldr	r3, [pc, #80]	@ (8002dbc <main+0x128>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]

			trajectory_sequence_index = (trajectory_sequence_index + 1) % 4;
 8002d6e:	4b17      	ldr	r3, [pc, #92]	@ (8002dcc <main+0x138>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	3301      	adds	r3, #1
 8002d74:	425a      	negs	r2, r3
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	f002 0203 	and.w	r2, r2, #3
 8002d7e:	bf58      	it	pl
 8002d80:	4253      	negpl	r3, r2
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	4b11      	ldr	r3, [pc, #68]	@ (8002dcc <main+0x138>)
 8002d86:	701a      	strb	r2, [r3, #0]
		}
		button_pressed_previous = b1;
 8002d88:	4b0a      	ldr	r3, [pc, #40]	@ (8002db4 <main+0x120>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002db8 <main+0x124>)
 8002d90:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, b2);
 8002d92:	4b14      	ldr	r3, [pc, #80]	@ (8002de4 <main+0x150>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002da2:	f003 fe49 	bl	8006a38 <HAL_GPIO_WritePin>

		if (b3) {
 8002da6:	4b10      	ldr	r3, [pc, #64]	@ (8002de8 <main+0x154>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d092      	beq.n	8002cd4 <main+0x40>
			NVIC_SystemReset();
 8002dae:	f7ff ff5b 	bl	8002c68 <__NVIC_SystemReset>
 8002db2:	bf00      	nop
 8002db4:	20001464 	.word	0x20001464
 8002db8:	200002f4 	.word	0x200002f4
 8002dbc:	200002c8 	.word	0x200002c8
 8002dc0:	200002b4 	.word	0x200002b4
 8002dc4:	200002d4 	.word	0x200002d4
 8002dc8:	200002cc 	.word	0x200002cc
 8002dcc:	200002dc 	.word	0x200002dc
 8002dd0:	0800c6bc 	.word	0x0800c6bc
 8002dd4:	200002d0 	.word	0x200002d0
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	40080000 	.word	0x40080000
 8002de0:	200002a0 	.word	0x200002a0
 8002de4:	20001468 	.word	0x20001468
 8002de8:	2000146c 	.word	0x2000146c

08002dec <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b094      	sub	sp, #80	@ 0x50
 8002df0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002df2:	f107 0318 	add.w	r3, r7, #24
 8002df6:	2238      	movs	r2, #56	@ 0x38
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f008 fe58 	bl	800bab0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	60da      	str	r2, [r3, #12]
 8002e0c:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f003 fe42 	bl	8006a98 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e14:	2302      	movs	r3, #2
 8002e16:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e1e:	2340      	movs	r3, #64	@ 0x40
 8002e20:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e22:	2302      	movs	r3, #2
 8002e24:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e26:	2302      	movs	r3, #2
 8002e28:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002e2a:	2304      	movs	r3, #4
 8002e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8002e2e:	2355      	movs	r3, #85	@ 0x55
 8002e30:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e32:	2302      	movs	r3, #2
 8002e34:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002e36:	2302      	movs	r3, #2
 8002e38:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002e3e:	f107 0318 	add.w	r3, r7, #24
 8002e42:	4618      	mov	r0, r3
 8002e44:	f003 fedc 	bl	8006c00 <HAL_RCC_OscConfig>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <SystemClock_Config+0x66>
		Error_Handler();
 8002e4e:	f000 f90b 	bl	8003068 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002e52:	230f      	movs	r3, #15
 8002e54:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e56:	2303      	movs	r3, #3
 8002e58:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	2104      	movs	r1, #4
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f004 f9da 	bl	8007224 <HAL_RCC_ClockConfig>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <SystemClock_Config+0x8e>
		Error_Handler();
 8002e76:	f000 f8f7 	bl	8003068 <Error_Handler>
	}
}
 8002e7a:	bf00      	nop
 8002e7c:	3750      	adds	r7, #80	@ 0x50
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	4603      	mov	r3, r0
 8002e8a:	80fb      	strh	r3, [r7, #6]

}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	ed2d 8b02 	vpush	{d8}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a55      	ldr	r2, [pc, #340]	@ (8003010 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	f040 80a1 	bne.w	8003004 <HAL_TIM_PeriodElapsedCallback+0x158>
		update_sensors();
 8002ec2:	f000 fa95 	bl	80033f0 <update_sensors>
//			cmd_ux = 0;
//		}
//
//		MDXX_set_range(&prismatic_motor, 2000, cmd_ux);

		if (trajectoryActive && !prisEva.isFinised) {
 8002ec6:	4b53      	ldr	r3, [pc, #332]	@ (8003014 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8089 	beq.w	8002fe2 <HAL_TIM_PeriodElapsedCallback+0x136>
 8002ed0:	4b51      	ldr	r3, [pc, #324]	@ (8003018 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002ed2:	7c1b      	ldrb	r3, [r3, #16]
 8002ed4:	f083 0301 	eor.w	r3, r3, #1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 8081 	beq.w	8002fe2 <HAL_TIM_PeriodElapsedCallback+0x136>
			Trapezoidal_Evaluated(&prisGen, &prisEva, initial_p, target_p,
 8002ee0:	4b4e      	ldr	r3, [pc, #312]	@ (800301c <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002ee2:	ed93 8a00 	vldr	s16, [r3]
 8002ee6:	4b4e      	ldr	r3, [pc, #312]	@ (8003020 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002ee8:	edd3 8a00 	vldr	s17, [r3]
					ZGX45RGG_150RPM_Constant.qd_max,
 8002eec:	4b4d      	ldr	r3, [pc, #308]	@ (8003024 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002eee:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
			Trapezoidal_Evaluated(&prisGen, &prisEva, initial_p, target_p,
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	f7fd fd7d 	bl	80009f4 <__aeabi_d2f>
 8002efa:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.qd_max * 3.0);
 8002efc:	4b49      	ldr	r3, [pc, #292]	@ (8003024 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002efe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	4b48      	ldr	r3, [pc, #288]	@ (8003028 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002f08:	f7fd fb42 	bl	8000590 <__aeabi_dmul>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
			Trapezoidal_Evaluated(&prisGen, &prisEva, initial_p, target_p,
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	f7fd fd6e 	bl	80009f4 <__aeabi_d2f>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	ee01 3a90 	vmov	s3, r3
 8002f1e:	ee01 4a10 	vmov	s2, r4
 8002f22:	eef0 0a68 	vmov.f32	s1, s17
 8002f26:	eeb0 0a48 	vmov.f32	s0, s16
 8002f2a:	493b      	ldr	r1, [pc, #236]	@ (8003018 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002f2c:	483f      	ldr	r0, [pc, #252]	@ (800302c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002f2e:	f7ff f997 	bl	8002260 <Trapezoidal_Evaluated>

			current_position = prisEva.setposition;
 8002f32:	4b39      	ldr	r3, [pc, #228]	@ (8003018 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a3e      	ldr	r2, [pc, #248]	@ (8003030 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002f38:	6013      	str	r3, [r2, #0]
			current_velocity = prisEva.setvelocity;
 8002f3a:	4b37      	ldr	r3, [pc, #220]	@ (8003018 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a3d      	ldr	r2, [pc, #244]	@ (8003034 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002f40:	6013      	str	r3, [r2, #0]

			setpoint_pos = current_position;
 8002f42:	4b3b      	ldr	r3, [pc, #236]	@ (8003030 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a3c      	ldr	r2, [pc, #240]	@ (8003038 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002f48:	6013      	str	r3, [r2, #0]
			setpoint_vel = current_velocity;
 8002f4a:	4b3a      	ldr	r3, [pc, #232]	@ (8003034 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a3b      	ldr	r2, [pc, #236]	@ (800303c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002f50:	6013      	str	r3, [r2, #0]

			QEI_get_diff_count(&revolute_encoder);
 8002f52:	483b      	ldr	r0, [pc, #236]	@ (8003040 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002f54:	f7fe feec 	bl	8001d30 <QEI_get_diff_count>
			QEI_compute_data(&revolute_encoder);
 8002f58:	4839      	ldr	r0, [pc, #228]	@ (8003040 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002f5a:	f7fe ffc9 	bl	8001ef0 <QEI_compute_data>

			lp_filt = FIR_process(&LP_revolute_velocity,
 8002f5e:	4b38      	ldr	r3, [pc, #224]	@ (8003040 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002f60:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002f64:	eeb0 0a67 	vmov.f32	s0, s15
 8002f68:	4836      	ldr	r0, [pc, #216]	@ (8003044 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002f6a:	f7fe fb2b 	bl	80015c4 <FIR_process>
 8002f6e:	eef0 7a40 	vmov.f32	s15, s0
 8002f72:	4b35      	ldr	r3, [pc, #212]	@ (8003048 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002f74:	edc3 7a00 	vstr	s15, [r3]
					revolute_encoder.radps);

			cmd_vx = PID_CONTROLLER_Compute(&revolute_position_pid,
 8002f78:	4b2f      	ldr	r3, [pc, #188]	@ (8003038 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002f7a:	ed93 7a00 	vldr	s14, [r3]
					setpoint_pos - revolute_encoder.rads);
 8002f7e:	4b30      	ldr	r3, [pc, #192]	@ (8003040 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002f80:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
			cmd_vx = PID_CONTROLLER_Compute(&revolute_position_pid,
 8002f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f88:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8c:	482f      	ldr	r0, [pc, #188]	@ (800304c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002f8e:	f7fe f828 	bl	8000fe2 <PID_CONTROLLER_Compute>
 8002f92:	eef0 7a40 	vmov.f32	s15, s0
 8002f96:	4b2e      	ldr	r3, [pc, #184]	@ (8003050 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002f98:	edc3 7a00 	vstr	s15, [r3]
			cmd_ux = PWM_Satuation(
					PID_CONTROLLER_Compute(&revolute_velocity_pid,
							cmd_vx + setpoint_vel - lp_filt), 65535, -65535);
 8002f9c:	4b2c      	ldr	r3, [pc, #176]	@ (8003050 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002f9e:	ed93 7a00 	vldr	s14, [r3]
 8002fa2:	4b26      	ldr	r3, [pc, #152]	@ (800303c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002fa4:	edd3 7a00 	vldr	s15, [r3]
 8002fa8:	ee37 7a27 	vadd.f32	s14, s14, s15
			cmd_ux = PWM_Satuation(
 8002fac:	4b26      	ldr	r3, [pc, #152]	@ (8003048 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002fae:	edd3 7a00 	vldr	s15, [r3]
 8002fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fba:	4826      	ldr	r0, [pc, #152]	@ (8003054 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002fbc:	f7fe f811 	bl	8000fe2 <PID_CONTROLLER_Compute>
 8002fc0:	eef0 7a40 	vmov.f32	s15, s0
 8002fc4:	4924      	ldr	r1, [pc, #144]	@ (8003058 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002fc6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002fca:	eeb0 0a67 	vmov.f32	s0, s15
 8002fce:	f7fd ffaf 	bl	8000f30 <PWM_Satuation>
 8002fd2:	ee07 0a90 	vmov	s15, r0
 8002fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fda:	4b20      	ldr	r3, [pc, #128]	@ (800305c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002fdc:	edc3 7a00 	vstr	s15, [r3]
 8002fe0:	e006      	b.n	8002ff0 <HAL_TIM_PeriodElapsedCallback+0x144>
		} else {
			trajectoryActive = false;
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8003014 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
			cmd_ux = 0;
 8002fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800305c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
		}

		MDXX_set_range(&revolute_motor, 2000, cmd_ux);
 8002ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800305c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002ff2:	edd3 7a00 	vldr	s15, [r3]
 8002ff6:	eef0 0a67 	vmov.f32	s1, s15
 8002ffa:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8003060 <HAL_TIM_PeriodElapsedCallback+0x1b4>
 8002ffe:	4819      	ldr	r0, [pc, #100]	@ (8003064 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8003000:	f7fe f8a6 	bl	8001150 <MDXX_set_range>
	}
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	ecbd 8b02 	vpop	{d8}
 800300e:	bd90      	pop	{r4, r7, pc}
 8003010:	2000155c 	.word	0x2000155c
 8003014:	200002c8 	.word	0x200002c8
 8003018:	200002b4 	.word	0x200002b4
 800301c:	200002cc 	.word	0x200002cc
 8003020:	200002d0 	.word	0x200002d0
 8003024:	20000000 	.word	0x20000000
 8003028:	40080000 	.word	0x40080000
 800302c:	200002a0 	.word	0x200002a0
 8003030:	200002d4 	.word	0x200002d4
 8003034:	200002d8 	.word	0x200002d8
 8003038:	200002e0 	.word	0x200002e0
 800303c:	200002e4 	.word	0x200002e4
 8003040:	200003dc 	.word	0x200003dc
 8003044:	2000068c 	.word	0x2000068c
 8003048:	200002e8 	.word	0x200002e8
 800304c:	20000480 	.word	0x20000480
 8003050:	200002f0 	.word	0x200002f0
 8003054:	200004ac 	.word	0x200004ac
 8003058:	ffff0001 	.word	0xffff0001
 800305c:	200002ec 	.word	0x200002ec
 8003060:	44fa0000 	.word	0x44fa0000
 8003064:	20000344 	.word	0x20000344

08003068 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800306c:	b672      	cpsid	i
}
 800306e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003070:	bf00      	nop
 8003072:	e7fd      	b.n	8003070 <Error_Handler+0x8>

08003074 <plotter_begin>:
float revolute_current = 0.0f;

int b1, b2, b3, b4, prox, emer, photo_pris, photo_revo, up_lim, low_lim;
float joy_x, joy_y;

void plotter_begin() {
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg, SIGNAL_SINE);
 800307a:	2100      	movs	r1, #0
 800307c:	48a4      	ldr	r0, [pc, #656]	@ (8003310 <plotter_begin+0x29c>)
 800307e:	f000 fa69 	bl	8003554 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8003082:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 8003314 <plotter_begin+0x2a0>
 8003086:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 8003318 <plotter_begin+0x2a4>
 800308a:	eddf 1aa4 	vldr	s3, [pc, #656]	@ 800331c <plotter_begin+0x2a8>
 800308e:	ed9f 1aa3 	vldr	s2, [pc, #652]	@ 800331c <plotter_begin+0x2a8>
 8003092:	eddf 0aa3 	vldr	s1, [pc, #652]	@ 8003320 <plotter_begin+0x2ac>
 8003096:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8003314 <plotter_begin+0x2a0>
 800309a:	489d      	ldr	r0, [pc, #628]	@ (8003310 <plotter_begin+0x29c>)
 800309c:	f000 fab8 	bl	8003610 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&chirp_linear_sg, SIGNAL_CHIRP);
 80030a0:	2101      	movs	r1, #1
 80030a2:	48a0      	ldr	r0, [pc, #640]	@ (8003324 <plotter_begin+0x2b0>)
 80030a4:	f000 fa56 	bl	8003554 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_linear_sg, CHIRP_LINEAR_AMPLITUDE,
 80030a8:	eddf 2a9a 	vldr	s5, [pc, #616]	@ 8003314 <plotter_begin+0x2a0>
 80030ac:	ed9f 2a9a 	vldr	s4, [pc, #616]	@ 8003318 <plotter_begin+0x2a4>
 80030b0:	2100      	movs	r1, #0
 80030b2:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 80030b6:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80030ba:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80030be:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8003314 <plotter_begin+0x2a0>
 80030c2:	4898      	ldr	r0, [pc, #608]	@ (8003324 <plotter_begin+0x2b0>)
 80030c4:	f000 facf 	bl	8003666 <SIGNAL_config_chirp>
	CHIRP_LINEAR_START_FREQ,
	CHIRP_LINEAR_END_FREQ, CHIRP_LINEAR_DURATION, CHIRP_LINEAR,
	CHIRP_LINEAR_MIN_SETPOINT, CHIRP_LINEAR_MAX_SETPOINT);

	SIGNAL_init(&chirp_log_sg, SIGNAL_CHIRP);
 80030c8:	2101      	movs	r1, #1
 80030ca:	4897      	ldr	r0, [pc, #604]	@ (8003328 <plotter_begin+0x2b4>)
 80030cc:	f000 fa42 	bl	8003554 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_log_sg, CHIRP_LOG_AMPLITUDE,
 80030d0:	eddf 2a90 	vldr	s5, [pc, #576]	@ 8003314 <plotter_begin+0x2a0>
 80030d4:	ed9f 2a90 	vldr	s4, [pc, #576]	@ 8003318 <plotter_begin+0x2a4>
 80030d8:	2101      	movs	r1, #1
 80030da:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 80030de:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 80030e2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80030e6:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8003314 <plotter_begin+0x2a0>
 80030ea:	488f      	ldr	r0, [pc, #572]	@ (8003328 <plotter_begin+0x2b4>)
 80030ec:	f000 fabb 	bl	8003666 <SIGNAL_config_chirp>
	CHIRP_LOG_START_FREQ,
	CHIRP_LOG_END_FREQ, CHIRP_LOG_DURATION, CHIRP_LOGARITHMIC,
	CHIRP_LOG_MIN_SETPOINT, CHIRP_LOG_MAX_SETPOINT);

	SIGNAL_init(&square_sg, SIGNAL_SQUARE);
 80030f0:	2102      	movs	r1, #2
 80030f2:	488e      	ldr	r0, [pc, #568]	@ (800332c <plotter_begin+0x2b8>)
 80030f4:	f000 fa2e 	bl	8003554 <SIGNAL_init>
	SIGNAL_config_square(&square_sg, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 80030f8:	ed9f 3a86 	vldr	s6, [pc, #536]	@ 8003314 <plotter_begin+0x2a0>
 80030fc:	eddf 2a86 	vldr	s5, [pc, #536]	@ 8003318 <plotter_begin+0x2a4>
 8003100:	ed9f 2a86 	vldr	s4, [pc, #536]	@ 800331c <plotter_begin+0x2a8>
 8003104:	eddf 1a85 	vldr	s3, [pc, #532]	@ 800331c <plotter_begin+0x2a8>
 8003108:	ed9f 1a89 	vldr	s2, [pc, #548]	@ 8003330 <plotter_begin+0x2bc>
 800310c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8003110:	ed9f 0a80 	vldr	s0, [pc, #512]	@ 8003314 <plotter_begin+0x2a0>
 8003114:	4885      	ldr	r0, [pc, #532]	@ (800332c <plotter_begin+0x2b8>)
 8003116:	f000 fada 	bl	80036ce <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&ramp_sg, SIGNAL_RAMP);
 800311a:	2103      	movs	r1, #3
 800311c:	4885      	ldr	r0, [pc, #532]	@ (8003334 <plotter_begin+0x2c0>)
 800311e:	f000 fa19 	bl	8003554 <SIGNAL_init>
	SIGNAL_config_ramp(&ramp_sg, RAMP_AMPLITUDE, RAMP_FREQUENCY,
 8003122:	eddf 3a7c 	vldr	s7, [pc, #496]	@ 8003314 <plotter_begin+0x2a0>
 8003126:	ed9f 3a7c 	vldr	s6, [pc, #496]	@ 8003318 <plotter_begin+0x2a4>
 800312a:	eddf 2a7c 	vldr	s5, [pc, #496]	@ 800331c <plotter_begin+0x2a8>
 800312e:	ed9f 2a7b 	vldr	s4, [pc, #492]	@ 800331c <plotter_begin+0x2a8>
 8003132:	eddf 1a78 	vldr	s3, [pc, #480]	@ 8003314 <plotter_begin+0x2a0>
 8003136:	ed9f 1a78 	vldr	s2, [pc, #480]	@ 8003318 <plotter_begin+0x2a4>
 800313a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800313e:	ed9f 0a75 	vldr	s0, [pc, #468]	@ 8003314 <plotter_begin+0x2a0>
 8003142:	487c      	ldr	r0, [pc, #496]	@ (8003334 <plotter_begin+0x2c0>)
 8003144:	f000 faf3 	bl	800372e <SIGNAL_config_ramp>
	RAMP_START, RAMP_END, RAMP_PHASE, RAMP_OFFSET,
	RAMP_MIN_SETPOINT, RAMP_MAX_SETPOINT);

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR_RATIO1);
 8003148:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800314c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003150:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003154:	4978      	ldr	r1, [pc, #480]	@ (8003338 <plotter_begin+0x2c4>)
 8003156:	4879      	ldr	r0, [pc, #484]	@ (800333c <plotter_begin+0x2c8>)
 8003158:	f7fe fd98 	bl	8001c8c <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR_RATIO2);
 800315c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003160:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003164:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003168:	4975      	ldr	r1, [pc, #468]	@ (8003340 <plotter_begin+0x2cc>)
 800316a:	4876      	ldr	r0, [pc, #472]	@ (8003344 <plotter_begin+0x2d0>)
 800316c:	f7fe fd8e 	bl	8001c8c <QEI_init>

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8003170:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800317a:	2204      	movs	r2, #4
 800317c:	4972      	ldr	r1, [pc, #456]	@ (8003348 <plotter_begin+0x2d4>)
 800317e:	4873      	ldr	r0, [pc, #460]	@ (800334c <plotter_begin+0x2d8>)
 8003180:	f7fd ffc1 	bl	8001106 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8003184:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003188:	9300      	str	r3, [sp, #0]
 800318a:	4b71      	ldr	r3, [pc, #452]	@ (8003350 <plotter_begin+0x2dc>)
 800318c:	2200      	movs	r2, #0
 800318e:	496e      	ldr	r1, [pc, #440]	@ (8003348 <plotter_begin+0x2d4>)
 8003190:	4870      	ldr	r0, [pc, #448]	@ (8003354 <plotter_begin+0x2e0>)
 8003192:	f7fd ffb8 	bl	8001106 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8003196:	220c      	movs	r2, #12
 8003198:	496f      	ldr	r1, [pc, #444]	@ (8003358 <plotter_begin+0x2e4>)
 800319a:	4870      	ldr	r0, [pc, #448]	@ (800335c <plotter_begin+0x2e8>)
 800319c:	f7fe fb4a 	bl	8001834 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 80031a0:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 800331c <plotter_begin+0x2a8>
 80031a4:	ed9f 0a6e 	vldr	s0, [pc, #440]	@ 8003360 <plotter_begin+0x2ec>
 80031a8:	4868      	ldr	r0, [pc, #416]	@ (800334c <plotter_begin+0x2d8>)
 80031aa:	f7fd ffd1 	bl	8001150 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 80031ae:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 800331c <plotter_begin+0x2a8>
 80031b2:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 8003360 <plotter_begin+0x2ec>
 80031b6:	4867      	ldr	r0, [pc, #412]	@ (8003354 <plotter_begin+0x2e0>)
 80031b8:	f7fd ffca 	bl	8001150 <MDXX_set_range>
	pen_up();
 80031bc:	f000 f9ba 	bl	8003534 <pen_up>

	PID_CONTROLLER_Init(&prismatic_position_pid, 2, 1e-7, 1, ZGX45RGG_400RPM_Constant.U_max);
 80031c0:	4b68      	ldr	r3, [pc, #416]	@ (8003364 <plotter_begin+0x2f0>)
 80031c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80031c6:	4610      	mov	r0, r2
 80031c8:	4619      	mov	r1, r3
 80031ca:	f7fd fc13 	bl	80009f4 <__aeabi_d2f>
 80031ce:	4603      	mov	r3, r0
 80031d0:	ee01 3a90 	vmov	s3, r3
 80031d4:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80031d8:	eddf 0a63 	vldr	s1, [pc, #396]	@ 8003368 <plotter_begin+0x2f4>
 80031dc:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80031e0:	4862      	ldr	r0, [pc, #392]	@ (800336c <plotter_begin+0x2f8>)
 80031e2:	f7fd fed4 	bl	8000f8e <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 25, 0, ZGX45RGG_400RPM_Constant.U_max);
 80031e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003364 <plotter_begin+0x2f0>)
 80031e8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	f7fd fc00 	bl	80009f4 <__aeabi_d2f>
 80031f4:	4603      	mov	r3, r0
 80031f6:	ee01 3a90 	vmov	s3, r3
 80031fa:	ed9f 1a48 	vldr	s2, [pc, #288]	@ 800331c <plotter_begin+0x2a8>
 80031fe:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8003202:	ed9f 0a5b 	vldr	s0, [pc, #364]	@ 8003370 <plotter_begin+0x2fc>
 8003206:	485b      	ldr	r0, [pc, #364]	@ (8003374 <plotter_begin+0x300>)
 8003208:	f7fd fec1 	bl	8000f8e <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 2, 1e-7, 1, ZGX45RGG_150RPM_Constant.U_max);
 800320c:	4b5a      	ldr	r3, [pc, #360]	@ (8003378 <plotter_begin+0x304>)
 800320e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003212:	4610      	mov	r0, r2
 8003214:	4619      	mov	r1, r3
 8003216:	f7fd fbed 	bl	80009f4 <__aeabi_d2f>
 800321a:	4603      	mov	r3, r0
 800321c:	ee01 3a90 	vmov	s3, r3
 8003220:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8003224:	eddf 0a50 	vldr	s1, [pc, #320]	@ 8003368 <plotter_begin+0x2f4>
 8003228:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800322c:	4853      	ldr	r0, [pc, #332]	@ (800337c <plotter_begin+0x308>)
 800322e:	f7fd feae 	bl	8000f8e <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 1000, 50, 0, ZGX45RGG_150RPM_Constant.U_max);
 8003232:	4b51      	ldr	r3, [pc, #324]	@ (8003378 <plotter_begin+0x304>)
 8003234:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003238:	4610      	mov	r0, r2
 800323a:	4619      	mov	r1, r3
 800323c:	f7fd fbda 	bl	80009f4 <__aeabi_d2f>
 8003240:	4603      	mov	r3, r0
 8003242:	ee01 3a90 	vmov	s3, r3
 8003246:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 800331c <plotter_begin+0x2a8>
 800324a:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 8003380 <plotter_begin+0x30c>
 800324e:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8003384 <plotter_begin+0x310>
 8003252:	484d      	ldr	r0, [pc, #308]	@ (8003388 <plotter_begin+0x314>)
 8003254:	f7fd fe9b 	bl	8000f8e <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8003258:	4947      	ldr	r1, [pc, #284]	@ (8003378 <plotter_begin+0x304>)
 800325a:	484c      	ldr	r0, [pc, #304]	@ (800338c <plotter_begin+0x318>)
 800325c:	f7fe f852 	bl	8001304 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8003260:	4940      	ldr	r1, [pc, #256]	@ (8003364 <plotter_begin+0x2f0>)
 8003262:	484b      	ldr	r0, [pc, #300]	@ (8003390 <plotter_begin+0x31c>)
 8003264:	f7fe f86e 	bl	8001344 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8003268:	4a4a      	ldr	r2, [pc, #296]	@ (8003394 <plotter_begin+0x320>)
 800326a:	4943      	ldr	r1, [pc, #268]	@ (8003378 <plotter_begin+0x304>)
 800326c:	484a      	ldr	r0, [pc, #296]	@ (8003398 <plotter_begin+0x324>)
 800326e:	f7fe f857 	bl	8001320 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8003272:	4a48      	ldr	r2, [pc, #288]	@ (8003394 <plotter_begin+0x320>)
 8003274:	493b      	ldr	r1, [pc, #236]	@ (8003364 <plotter_begin+0x2f0>)
 8003276:	4849      	ldr	r0, [pc, #292]	@ (800339c <plotter_begin+0x328>)
 8003278:	f7fe f872 	bl	8001360 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE, ADC_CHANNELS, 3.3f, 4095.0f);
 800327c:	2304      	movs	r3, #4
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	eddf 0a47 	vldr	s1, [pc, #284]	@ 80033a0 <plotter_begin+0x32c>
 8003284:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 80033a4 <plotter_begin+0x330>
 8003288:	2328      	movs	r3, #40	@ 0x28
 800328a:	4a47      	ldr	r2, [pc, #284]	@ (80033a8 <plotter_begin+0x334>)
 800328c:	4947      	ldr	r1, [pc, #284]	@ (80033ac <plotter_begin+0x338>)
 800328e:	4848      	ldr	r0, [pc, #288]	@ (80033b0 <plotter_begin+0x33c>)
 8003290:	f7fd fd96 	bl	8000dc0 <ADC_DMA_Init>
	ADC_DMA_Start(&adc_dma);
 8003294:	4846      	ldr	r0, [pc, #280]	@ (80033b0 <plotter_begin+0x33c>)
 8003296:	f7fd fdc8 	bl	8000e2a <ADC_DMA_Start>

	FIR_init(&LP_prismatic_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800329a:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8003384 <plotter_begin+0x310>
 800329e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80032a2:	211f      	movs	r1, #31
 80032a4:	4843      	ldr	r0, [pc, #268]	@ (80033b4 <plotter_begin+0x340>)
 80032a6:	f7fe f86d 	bl	8001384 <FIR_init>
	FIR_init(&LP_prismatic_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80032aa:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8003384 <plotter_begin+0x310>
 80032ae:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80032b2:	211f      	movs	r1, #31
 80032b4:	4840      	ldr	r0, [pc, #256]	@ (80033b8 <plotter_begin+0x344>)
 80032b6:	f7fe f865 	bl	8001384 <FIR_init>
	FIR_init(&LP_revolute_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80032ba:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8003384 <plotter_begin+0x310>
 80032be:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80032c2:	211f      	movs	r1, #31
 80032c4:	483d      	ldr	r0, [pc, #244]	@ (80033bc <plotter_begin+0x348>)
 80032c6:	f7fe f85d 	bl	8001384 <FIR_init>
	FIR_init(&LP_revolute_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80032ca:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 8003384 <plotter_begin+0x310>
 80032ce:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80032d2:	211f      	movs	r1, #31
 80032d4:	483a      	ldr	r0, [pc, #232]	@ (80033c0 <plotter_begin+0x34c>)
 80032d6:	f7fe f855 	bl	8001384 <FIR_init>

	Kalman_Start(&flit_revolute_velocity, revolute_A, revolute_B);
 80032da:	4a3a      	ldr	r2, [pc, #232]	@ (80033c4 <plotter_begin+0x350>)
 80032dc:	493a      	ldr	r1, [pc, #232]	@ (80033c8 <plotter_begin+0x354>)
 80032de:	483b      	ldr	r0, [pc, #236]	@ (80033cc <plotter_begin+0x358>)
 80032e0:	f7ff fb08 	bl	80028f4 <Kalman_Start>
	Kalman_Start(&flit_prismatic_velocity, prismatic_A, prismatic_B);
 80032e4:	4a3a      	ldr	r2, [pc, #232]	@ (80033d0 <plotter_begin+0x35c>)
 80032e6:	493b      	ldr	r1, [pc, #236]	@ (80033d4 <plotter_begin+0x360>)
 80032e8:	483b      	ldr	r0, [pc, #236]	@ (80033d8 <plotter_begin+0x364>)
 80032ea:	f7ff fb03 	bl	80028f4 <Kalman_Start>

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 80032ee:	23c8      	movs	r3, #200	@ 0xc8
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	2315      	movs	r3, #21
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	4b39      	ldr	r3, [pc, #228]	@ (80033dc <plotter_begin+0x368>)
 80032f8:	4a39      	ldr	r2, [pc, #228]	@ (80033e0 <plotter_begin+0x36c>)
 80032fa:	493a      	ldr	r1, [pc, #232]	@ (80033e4 <plotter_begin+0x370>)
 80032fc:	483a      	ldr	r0, [pc, #232]	@ (80033e8 <plotter_begin+0x374>)
 80032fe:	f7fe fa31 	bl	8001764 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8003302:	483a      	ldr	r0, [pc, #232]	@ (80033ec <plotter_begin+0x378>)
 8003304:	f004 fccc 	bl	8007ca0 <HAL_TIM_Base_Start_IT>
}
 8003308:	bf00      	nop
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000520 	.word	0x20000520
 8003314:	3e6eeeef 	.word	0x3e6eeeef
 8003318:	be6eeeef 	.word	0xbe6eeeef
 800331c:	00000000 	.word	0x00000000
 8003320:	3d4ccccd 	.word	0x3d4ccccd
 8003324:	20000564 	.word	0x20000564
 8003328:	200005a8 	.word	0x200005a8
 800332c:	200005ec 	.word	0x200005ec
 8003330:	3e99999a 	.word	0x3e99999a
 8003334:	20000630 	.word	0x20000630
 8003338:	200016f4 	.word	0x200016f4
 800333c:	20000390 	.word	0x20000390
 8003340:	20001628 	.word	0x20001628
 8003344:	200003dc 	.word	0x200003dc
 8003348:	2000188c 	.word	0x2000188c
 800334c:	200002f8 	.word	0x200002f8
 8003350:	48000800 	.word	0x48000800
 8003354:	20000344 	.word	0x20000344
 8003358:	20001490 	.word	0x20001490
 800335c:	200004f0 	.word	0x200004f0
 8003360:	44fa0000 	.word	0x44fa0000
 8003364:	20000048 	.word	0x20000048
 8003368:	33d6bf95 	.word	0x33d6bf95
 800336c:	20000428 	.word	0x20000428
 8003370:	43fa0000 	.word	0x43fa0000
 8003374:	20000454 	.word	0x20000454
 8003378:	20000000 	.word	0x20000000
 800337c:	20000480 	.word	0x20000480
 8003380:	42480000 	.word	0x42480000
 8003384:	447a0000 	.word	0x447a0000
 8003388:	200004ac 	.word	0x200004ac
 800338c:	200004e4 	.word	0x200004e4
 8003390:	200004d8 	.word	0x200004d8
 8003394:	20000090 	.word	0x20000090
 8003398:	200004e8 	.word	0x200004e8
 800339c:	200004dc 	.word	0x200004dc
 80033a0:	457ff000 	.word	0x457ff000
 80033a4:	40533333 	.word	0x40533333
 80033a8:	20000da4 	.word	0x20000da4
 80033ac:	200001d4 	.word	0x200001d4
 80033b0:	20000508 	.word	0x20000508
 80033b4:	20000680 	.word	0x20000680
 80033b8:	20000674 	.word	0x20000674
 80033bc:	20000698 	.word	0x20000698
 80033c0:	2000068c 	.word	0x2000068c
 80033c4:	20000148 	.word	0x20000148
 80033c8:	20000108 	.word	0x20000108
 80033cc:	20000a24 	.word	0x20000a24
 80033d0:	200000f8 	.word	0x200000f8
 80033d4:	200000b8 	.word	0x200000b8
 80033d8:	200006a4 	.word	0x200006a4
 80033dc:	200012cc 	.word	0x200012cc
 80033e0:	20001958 	.word	0x20001958
 80033e4:	20001a24 	.word	0x20001a24
 80033e8:	20000df4 	.word	0x20000df4
 80033ec:	2000155c 	.word	0x2000155c

080033f0 <update_sensors>:

void update_sensors() {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_X_CHANNEL, 1.0);
 80033f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80033f8:	2106      	movs	r1, #6
 80033fa:	483f      	ldr	r0, [pc, #252]	@ (80034f8 <update_sensors+0x108>)
 80033fc:	f7fd fd70 	bl	8000ee0 <ADC_DMA_GetJoystick>
 8003400:	eef0 7a40 	vmov.f32	s15, s0
 8003404:	4b3d      	ldr	r3, [pc, #244]	@ (80034fc <update_sensors+0x10c>)
 8003406:	edc3 7a00 	vstr	s15, [r3]
	joystick_y = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_Y_CHANNEL, 1.0);
 800340a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800340e:	2107      	movs	r1, #7
 8003410:	4839      	ldr	r0, [pc, #228]	@ (80034f8 <update_sensors+0x108>)
 8003412:	f7fd fd65 	bl	8000ee0 <ADC_DMA_GetJoystick>
 8003416:	eef0 7a40 	vmov.f32	s15, s0
 800341a:	4b39      	ldr	r3, [pc, #228]	@ (8003500 <update_sensors+0x110>)
 800341c:	edc3 7a00 	vstr	s15, [r3]

	b1 = !HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 8003420:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003424:	4837      	ldr	r0, [pc, #220]	@ (8003504 <update_sensors+0x114>)
 8003426:	f003 faef 	bl	8006a08 <HAL_GPIO_ReadPin>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	4b33      	ldr	r3, [pc, #204]	@ (8003508 <update_sensors+0x118>)
 800343a:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(SAVE_GPIO_Port, SAVE_Pin);
 800343c:	2180      	movs	r1, #128	@ 0x80
 800343e:	4833      	ldr	r0, [pc, #204]	@ (800350c <update_sensors+0x11c>)
 8003440:	f003 fae2 	bl	8006a08 <HAL_GPIO_ReadPin>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	bf0c      	ite	eq
 800344a:	2301      	moveq	r3, #1
 800344c:	2300      	movne	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	4b2f      	ldr	r3, [pc, #188]	@ (8003510 <update_sensors+0x120>)
 8003454:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(DELETE_GPIO_Port, DELETE_Pin);
 8003456:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800345a:	482a      	ldr	r0, [pc, #168]	@ (8003504 <update_sensors+0x114>)
 800345c:	f003 fad4 	bl	8006a08 <HAL_GPIO_ReadPin>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	bf0c      	ite	eq
 8003466:	2301      	moveq	r3, #1
 8003468:	2300      	movne	r3, #0
 800346a:	b2db      	uxtb	r3, r3
 800346c:	461a      	mov	r2, r3
 800346e:	4b29      	ldr	r3, [pc, #164]	@ (8003514 <update_sensors+0x124>)
 8003470:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(RESET_SYS_GPIO_Port, RESET_SYS_Pin);
 8003472:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003476:	4823      	ldr	r0, [pc, #140]	@ (8003504 <update_sensors+0x114>)
 8003478:	f003 fac6 	bl	8006a08 <HAL_GPIO_ReadPin>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	bf0c      	ite	eq
 8003482:	2301      	moveq	r3, #1
 8003484:	2300      	movne	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	4b23      	ldr	r3, [pc, #140]	@ (8003518 <update_sensors+0x128>)
 800348c:	601a      	str	r2, [r3, #0]

	prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 800348e:	2120      	movs	r1, #32
 8003490:	481e      	ldr	r0, [pc, #120]	@ (800350c <update_sensors+0x11c>)
 8003492:	f003 fab9 	bl	8006a08 <HAL_GPIO_ReadPin>
 8003496:	4603      	mov	r3, r0
 8003498:	461a      	mov	r2, r3
 800349a:	4b20      	ldr	r3, [pc, #128]	@ (800351c <update_sensors+0x12c>)
 800349c:	601a      	str	r2, [r3, #0]
	photo_pris = HAL_GPIO_ReadPin(PHOTO_PRIS_GPIO_Port, PHOTO_PRIS_Pin);
 800349e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034a6:	f003 faaf 	bl	8006a08 <HAL_GPIO_ReadPin>
 80034aa:	4603      	mov	r3, r0
 80034ac:	461a      	mov	r2, r3
 80034ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003520 <update_sensors+0x130>)
 80034b0:	601a      	str	r2, [r3, #0]
	photo_revo = HAL_GPIO_ReadPin(PHOTO_REVO_GPIO_Port, PHOTO_REVO_Pin);
 80034b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80034b6:	4815      	ldr	r0, [pc, #84]	@ (800350c <update_sensors+0x11c>)
 80034b8:	f003 faa6 	bl	8006a08 <HAL_GPIO_ReadPin>
 80034bc:	4603      	mov	r3, r0
 80034be:	461a      	mov	r2, r3
 80034c0:	4b18      	ldr	r3, [pc, #96]	@ (8003524 <update_sensors+0x134>)
 80034c2:	601a      	str	r2, [r3, #0]
	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 80034c4:	2102      	movs	r1, #2
 80034c6:	4811      	ldr	r0, [pc, #68]	@ (800350c <update_sensors+0x11c>)
 80034c8:	f003 fa9e 	bl	8006a08 <HAL_GPIO_ReadPin>
 80034cc:	4603      	mov	r3, r0
 80034ce:	461a      	mov	r2, r3
 80034d0:	4b15      	ldr	r3, [pc, #84]	@ (8003528 <update_sensors+0x138>)
 80034d2:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 80034d4:	2104      	movs	r1, #4
 80034d6:	480d      	ldr	r0, [pc, #52]	@ (800350c <update_sensors+0x11c>)
 80034d8:	f003 fa96 	bl	8006a08 <HAL_GPIO_ReadPin>
 80034dc:	4603      	mov	r3, r0
 80034de:	461a      	mov	r2, r3
 80034e0:	4b12      	ldr	r3, [pc, #72]	@ (800352c <update_sensors+0x13c>)
 80034e2:	601a      	str	r2, [r3, #0]

	emer = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 80034e4:	2110      	movs	r1, #16
 80034e6:	4809      	ldr	r0, [pc, #36]	@ (800350c <update_sensors+0x11c>)
 80034e8:	f003 fa8e 	bl	8006a08 <HAL_GPIO_ReadPin>
 80034ec:	4603      	mov	r3, r0
 80034ee:	461a      	mov	r2, r3
 80034f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003530 <update_sensors+0x140>)
 80034f2:	601a      	str	r2, [r3, #0]
//    prismatic_current = ADC_DMA_ComputeCurrent(&adc_dma, PRISMATIC_CURRENT_CHANNEL, PRISMATIC_CURRENT_OFFSET);
//    revolute_current = ADC_DMA_ComputeCurrent(&adc_dma, REVOLUTE_CURRENT_CHANNEL, REVOLUTE_CURRENT_OFFSET);
}
 80034f4:	bf00      	nop
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000508 	.word	0x20000508
 80034fc:	2000145c 	.word	0x2000145c
 8003500:	20001460 	.word	0x20001460
 8003504:	48000800 	.word	0x48000800
 8003508:	20001464 	.word	0x20001464
 800350c:	48000400 	.word	0x48000400
 8003510:	20001468 	.word	0x20001468
 8003514:	2000146c 	.word	0x2000146c
 8003518:	20001470 	.word	0x20001470
 800351c:	20001474 	.word	0x20001474
 8003520:	2000147c 	.word	0x2000147c
 8003524:	20001480 	.word	0x20001480
 8003528:	20001484 	.word	0x20001484
 800352c:	20001488 	.word	0x20001488
 8003530:	20001478 	.word	0x20001478

08003534 <pen_up>:

	joy_x = joystick_x;
	joy_y = joystick_y;
}

void pen_up() {
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8003538:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 800353c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 800354c <pen_up+0x18>
 8003540:	4803      	ldr	r0, [pc, #12]	@ (8003550 <pen_up+0x1c>)
 8003542:	f7fe f999 	bl	8001878 <PWM_write_duty>
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	42480000 	.word	0x42480000
 8003550:	200004f0 	.word	0x200004f0

08003554 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800356c:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003574:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a1b      	ldr	r2, [pc, #108]	@ (8003608 <SIGNAL_init+0xb4>)
 800359a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80035a2:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	d828      	bhi.n	80035fc <SIGNAL_init+0xa8>
 80035aa:	a201      	add	r2, pc, #4	@ (adr r2, 80035b0 <SIGNAL_init+0x5c>)
 80035ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035b0:	080035fb 	.word	0x080035fb
 80035b4:	080035c1 	.word	0x080035c1
 80035b8:	080035df 	.word	0x080035df
 80035bc:	080035e9 	.word	0x080035e9
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80035cc:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a0e      	ldr	r2, [pc, #56]	@ (800360c <SIGNAL_init+0xb8>)
 80035d2:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80035da:	621a      	str	r2, [r3, #32]
            break;
 80035dc:	e00e      	b.n	80035fc <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80035e4:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 80035e6:	e009      	b.n	80035fc <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80035f6:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 80035f8:	e000      	b.n	80035fc <SIGNAL_init+0xa8>
            break;
 80035fa:	bf00      	nop
    }
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	bf800000 	.word	0xbf800000
 800360c:	41200000 	.word	0x41200000

08003610 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8003610:	b480      	push	{r7}
 8003612:	b089      	sub	sp, #36	@ 0x24
 8003614:	af00      	add	r7, sp, #0
 8003616:	61f8      	str	r0, [r7, #28]
 8003618:	ed87 0a06 	vstr	s0, [r7, #24]
 800361c:	edc7 0a05 	vstr	s1, [r7, #20]
 8003620:	ed87 1a04 	vstr	s2, [r7, #16]
 8003624:	edc7 1a03 	vstr	s3, [r7, #12]
 8003628:	ed87 2a02 	vstr	s4, [r7, #8]
 800362c:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	68ba      	ldr	r2, [r7, #8]
 8003652:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800365a:	bf00      	nop
 800365c:	3724      	adds	r7, #36	@ 0x24
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <SIGNAL_config_chirp>:
                         float32_t f_start,
                         float32_t f_end,
                         float32_t duration,
                         ChirpType chirp_type,
                         float32_t min_setpoint,
                         float32_t max_setpoint) {
 8003666:	b480      	push	{r7}
 8003668:	b089      	sub	sp, #36	@ 0x24
 800366a:	af00      	add	r7, sp, #0
 800366c:	61f8      	str	r0, [r7, #28]
 800366e:	ed87 0a06 	vstr	s0, [r7, #24]
 8003672:	edc7 0a05 	vstr	s1, [r7, #20]
 8003676:	ed87 1a04 	vstr	s2, [r7, #16]
 800367a:	edc7 1a03 	vstr	s3, [r7, #12]
 800367e:	460b      	mov	r3, r1
 8003680:	ed87 2a01 	vstr	s4, [r7, #4]
 8003684:	edc7 2a00 	vstr	s5, [r7]
 8003688:	72fb      	strb	r3, [r7, #11]
    sg->type = SIGNAL_CHIRP;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	2201      	movs	r2, #1
 800368e:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	605a      	str	r2, [r3, #4]
    sg->f_start = f_start;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	619a      	str	r2, [r3, #24]
    sg->f_end = f_end;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	61da      	str	r2, [r3, #28]
    sg->duration = duration;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	621a      	str	r2, [r3, #32]
    sg->chirp_type = chirp_type;
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	7afa      	ldrb	r2, [r7, #11]
 80036ac:	751a      	strb	r2, [r3, #20]
    sg->t = 0.0f;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	625a      	str	r2, [r3, #36]	@ 0x24
    sg->min_setpoint = min_setpoint;
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80036c2:	bf00      	nop
 80036c4:	3724      	adds	r7, #36	@ 0x24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 80036ce:	b480      	push	{r7}
 80036d0:	b089      	sub	sp, #36	@ 0x24
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	61f8      	str	r0, [r7, #28]
 80036d6:	ed87 0a06 	vstr	s0, [r7, #24]
 80036da:	edc7 0a05 	vstr	s1, [r7, #20]
 80036de:	ed87 1a04 	vstr	s2, [r7, #16]
 80036e2:	edc7 1a03 	vstr	s3, [r7, #12]
 80036e6:	ed87 2a02 	vstr	s4, [r7, #8]
 80036ea:	edc7 2a01 	vstr	s5, [r7, #4]
 80036ee:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	2202      	movs	r2, #2
 80036f6:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003722:	bf00      	nop
 8003724:	3724      	adds	r7, #36	@ 0x24
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <SIGNAL_config_ramp>:
                        float32_t ramp_start,
                        float32_t ramp_end,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 800372e:	b480      	push	{r7}
 8003730:	b08b      	sub	sp, #44	@ 0x2c
 8003732:	af00      	add	r7, sp, #0
 8003734:	6278      	str	r0, [r7, #36]	@ 0x24
 8003736:	ed87 0a08 	vstr	s0, [r7, #32]
 800373a:	edc7 0a07 	vstr	s1, [r7, #28]
 800373e:	ed87 1a06 	vstr	s2, [r7, #24]
 8003742:	edc7 1a05 	vstr	s3, [r7, #20]
 8003746:	ed87 2a04 	vstr	s4, [r7, #16]
 800374a:	edc7 2a03 	vstr	s5, [r7, #12]
 800374e:	ed87 3a02 	vstr	s6, [r7, #8]
 8003752:	edc7 3a01 	vstr	s7, [r7, #4]
    sg->type = SIGNAL_RAMP;
 8003756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003758:	2203      	movs	r2, #3
 800375a:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800375e:	6a3a      	ldr	r2, [r7, #32]
 8003760:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	69fa      	ldr	r2, [r7, #28]
 8003766:	609a      	str	r2, [r3, #8]
    sg->ramp_start = ramp_start;
 8003768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	62da      	str	r2, [r3, #44]	@ 0x2c
    sg->ramp_end = ramp_end;
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	631a      	str	r2, [r3, #48]	@ 0x30
    sg->phase = phase;
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 800377a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8003780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800378c:	bf00      	nop
 800378e:	372c      	adds	r7, #44	@ 0x2c
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800379e:	4b0f      	ldr	r3, [pc, #60]	@ (80037dc <HAL_MspInit+0x44>)
 80037a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037a2:	4a0e      	ldr	r2, [pc, #56]	@ (80037dc <HAL_MspInit+0x44>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80037aa:	4b0c      	ldr	r3, [pc, #48]	@ (80037dc <HAL_MspInit+0x44>)
 80037ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037b6:	4b09      	ldr	r3, [pc, #36]	@ (80037dc <HAL_MspInit+0x44>)
 80037b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ba:	4a08      	ldr	r2, [pc, #32]	@ (80037dc <HAL_MspInit+0x44>)
 80037bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80037c2:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <HAL_MspInit+0x44>)
 80037c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80037ce:	f003 fa07 	bl	8006be0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037d2:	bf00      	nop
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000

080037e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037e4:	bf00      	nop
 80037e6:	e7fd      	b.n	80037e4 <NMI_Handler+0x4>

080037e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037ec:	bf00      	nop
 80037ee:	e7fd      	b.n	80037ec <HardFault_Handler+0x4>

080037f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037f4:	bf00      	nop
 80037f6:	e7fd      	b.n	80037f4 <MemManage_Handler+0x4>

080037f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037fc:	bf00      	nop
 80037fe:	e7fd      	b.n	80037fc <BusFault_Handler+0x4>

08003800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003804:	bf00      	nop
 8003806:	e7fd      	b.n	8003804 <UsageFault_Handler+0x4>

08003808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003816:	b480      	push	{r7}
 8003818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800381a:	bf00      	nop
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003836:	f000 fe8d 	bl	8004554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003844:	4802      	ldr	r0, [pc, #8]	@ (8003850 <DMA1_Channel1_IRQHandler+0x10>)
 8003846:	f002 fe0e 	bl	8006466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000240 	.word	0x20000240

08003854 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003858:	4802      	ldr	r0, [pc, #8]	@ (8003864 <DMA1_Channel2_IRQHandler+0x10>)
 800385a:	f002 fe04 	bl	8006466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20001af0 	.word	0x20001af0

08003868 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800386c:	4802      	ldr	r0, [pc, #8]	@ (8003878 <DMA1_Channel3_IRQHandler+0x10>)
 800386e:	f002 fdfa 	bl	8006466 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20001b50 	.word	0x20001b50

0800387c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003880:	4803      	ldr	r0, [pc, #12]	@ (8003890 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003882:	f004 fe33 	bl	80084ec <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003886:	4803      	ldr	r0, [pc, #12]	@ (8003894 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003888:	f004 fe30 	bl	80084ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800388c:	bf00      	nop
 800388e:	bd80      	pop	{r7, pc}
 8003890:	20001490 	.word	0x20001490
 8003894:	20001958 	.word	0x20001958

08003898 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800389c:	4802      	ldr	r0, [pc, #8]	@ (80038a8 <TIM2_IRQHandler+0x10>)
 800389e:	f004 fe25 	bl	80084ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	2000155c 	.word	0x2000155c

080038ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80038b0:	4802      	ldr	r0, [pc, #8]	@ (80038bc <TIM3_IRQHandler+0x10>)
 80038b2:	f004 fe1b 	bl	80084ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20001628 	.word	0x20001628

080038c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80038c4:	4802      	ldr	r0, [pc, #8]	@ (80038d0 <TIM4_IRQHandler+0x10>)
 80038c6:	f004 fe11 	bl	80084ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80038ca:	bf00      	nop
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	200016f4 	.word	0x200016f4

080038d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038d8:	4802      	ldr	r0, [pc, #8]	@ (80038e4 <USART2_IRQHandler+0x10>)
 80038da:	f006 fb5b 	bl	8009f94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20001a24 	.word	0x20001a24

080038e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80038ec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80038f0:	f003 f8ba 	bl	8006a68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80038f4:	bf00      	nop
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b086      	sub	sp, #24
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003900:	4a14      	ldr	r2, [pc, #80]	@ (8003954 <_sbrk+0x5c>)
 8003902:	4b15      	ldr	r3, [pc, #84]	@ (8003958 <_sbrk+0x60>)
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800390c:	4b13      	ldr	r3, [pc, #76]	@ (800395c <_sbrk+0x64>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d102      	bne.n	800391a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003914:	4b11      	ldr	r3, [pc, #68]	@ (800395c <_sbrk+0x64>)
 8003916:	4a12      	ldr	r2, [pc, #72]	@ (8003960 <_sbrk+0x68>)
 8003918:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800391a:	4b10      	ldr	r3, [pc, #64]	@ (800395c <_sbrk+0x64>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4413      	add	r3, r2
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	429a      	cmp	r2, r3
 8003926:	d207      	bcs.n	8003938 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003928:	f008 f8da 	bl	800bae0 <__errno>
 800392c:	4603      	mov	r3, r0
 800392e:	220c      	movs	r2, #12
 8003930:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003932:	f04f 33ff 	mov.w	r3, #4294967295
 8003936:	e009      	b.n	800394c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003938:	4b08      	ldr	r3, [pc, #32]	@ (800395c <_sbrk+0x64>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800393e:	4b07      	ldr	r3, [pc, #28]	@ (800395c <_sbrk+0x64>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4413      	add	r3, r2
 8003946:	4a05      	ldr	r2, [pc, #20]	@ (800395c <_sbrk+0x64>)
 8003948:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800394a:	68fb      	ldr	r3, [r7, #12]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3718      	adds	r7, #24
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20020000 	.word	0x20020000
 8003958:	00000400 	.word	0x00000400
 800395c:	2000148c 	.word	0x2000148c
 8003960:	20001d00 	.word	0x20001d00

08003964 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003968:	4b06      	ldr	r3, [pc, #24]	@ (8003984 <SystemInit+0x20>)
 800396a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396e:	4a05      	ldr	r2, [pc, #20]	@ (8003984 <SystemInit+0x20>)
 8003970:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003974:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003978:	bf00      	nop
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b098      	sub	sp, #96	@ 0x60
 800398c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800398e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	605a      	str	r2, [r3, #4]
 8003998:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800399a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	609a      	str	r2, [r3, #8]
 80039a6:	60da      	str	r2, [r3, #12]
 80039a8:	611a      	str	r2, [r3, #16]
 80039aa:	615a      	str	r2, [r3, #20]
 80039ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80039ae:	1d3b      	adds	r3, r7, #4
 80039b0:	2234      	movs	r2, #52	@ 0x34
 80039b2:	2100      	movs	r1, #0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f008 f87b 	bl	800bab0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80039ba:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa8 <MX_TIM1_Init+0x120>)
 80039bc:	4a3b      	ldr	r2, [pc, #236]	@ (8003aac <MX_TIM1_Init+0x124>)
 80039be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80039c0:	4b39      	ldr	r3, [pc, #228]	@ (8003aa8 <MX_TIM1_Init+0x120>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039c6:	4b38      	ldr	r3, [pc, #224]	@ (8003aa8 <MX_TIM1_Init+0x120>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80039cc:	4b36      	ldr	r3, [pc, #216]	@ (8003aa8 <MX_TIM1_Init+0x120>)
 80039ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80039d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039d4:	4b34      	ldr	r3, [pc, #208]	@ (8003aa8 <MX_TIM1_Init+0x120>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80039da:	4b33      	ldr	r3, [pc, #204]	@ (8003aa8 <MX_TIM1_Init+0x120>)
 80039dc:	2200      	movs	r2, #0
 80039de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039e0:	4b31      	ldr	r3, [pc, #196]	@ (8003aa8 <MX_TIM1_Init+0x120>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80039e6:	4830      	ldr	r0, [pc, #192]	@ (8003aa8 <MX_TIM1_Init+0x120>)
 80039e8:	f004 f9d2 	bl	8007d90 <HAL_TIM_PWM_Init>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80039f2:	f7ff fb39 	bl	8003068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039f6:	2300      	movs	r3, #0
 80039f8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003a02:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003a06:	4619      	mov	r1, r3
 8003a08:	4827      	ldr	r0, [pc, #156]	@ (8003aa8 <MX_TIM1_Init+0x120>)
 8003a0a:	f005 ffe3 	bl	80099d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003a14:	f7ff fb28 	bl	8003068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a18:	2360      	movs	r3, #96	@ 0x60
 8003a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a20:	2300      	movs	r3, #0
 8003a22:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a24:	2300      	movs	r3, #0
 8003a26:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a30:	2300      	movs	r3, #0
 8003a32:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a34:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a38:	220c      	movs	r2, #12
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	481a      	ldr	r0, [pc, #104]	@ (8003aa8 <MX_TIM1_Init+0x120>)
 8003a3e:	f004 fecf 	bl	80087e0 <HAL_TIM_PWM_ConfigChannel>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003a48:	f7ff fb0e 	bl	8003068 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a54:	2300      	movs	r3, #0
 8003a56:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a64:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003a72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003a84:	1d3b      	adds	r3, r7, #4
 8003a86:	4619      	mov	r1, r3
 8003a88:	4807      	ldr	r0, [pc, #28]	@ (8003aa8 <MX_TIM1_Init+0x120>)
 8003a8a:	f006 f839 	bl	8009b00 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003a94:	f7ff fae8 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003a98:	4803      	ldr	r0, [pc, #12]	@ (8003aa8 <MX_TIM1_Init+0x120>)
 8003a9a:	f000 fb5b 	bl	8004154 <HAL_TIM_MspPostInit>

}
 8003a9e:	bf00      	nop
 8003aa0:	3760      	adds	r7, #96	@ 0x60
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20001490 	.word	0x20001490
 8003aac:	40012c00 	.word	0x40012c00

08003ab0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b088      	sub	sp, #32
 8003ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ab6:	f107 0310 	add.w	r3, r7, #16
 8003aba:	2200      	movs	r2, #0
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	605a      	str	r2, [r3, #4]
 8003ac0:	609a      	str	r2, [r3, #8]
 8003ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ac4:	1d3b      	adds	r3, r7, #4
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
 8003aca:	605a      	str	r2, [r3, #4]
 8003acc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003ace:	4b1e      	ldr	r3, [pc, #120]	@ (8003b48 <MX_TIM2_Init+0x98>)
 8003ad0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003ad4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8003ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8003b48 <MX_TIM2_Init+0x98>)
 8003ad8:	22a9      	movs	r2, #169	@ 0xa9
 8003ada:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003adc:	4b1a      	ldr	r3, [pc, #104]	@ (8003b48 <MX_TIM2_Init+0x98>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003ae2:	4b19      	ldr	r3, [pc, #100]	@ (8003b48 <MX_TIM2_Init+0x98>)
 8003ae4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003ae8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aea:	4b17      	ldr	r3, [pc, #92]	@ (8003b48 <MX_TIM2_Init+0x98>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003af0:	4b15      	ldr	r3, [pc, #84]	@ (8003b48 <MX_TIM2_Init+0x98>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003af6:	4814      	ldr	r0, [pc, #80]	@ (8003b48 <MX_TIM2_Init+0x98>)
 8003af8:	f003 fffe 	bl	8007af8 <HAL_TIM_Base_Init>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003b02:	f7ff fab1 	bl	8003068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b0c:	f107 0310 	add.w	r3, r7, #16
 8003b10:	4619      	mov	r1, r3
 8003b12:	480d      	ldr	r0, [pc, #52]	@ (8003b48 <MX_TIM2_Init+0x98>)
 8003b14:	f004 ff78 	bl	8008a08 <HAL_TIM_ConfigClockSource>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003b1e:	f7ff faa3 	bl	8003068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b22:	2300      	movs	r3, #0
 8003b24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b2a:	1d3b      	adds	r3, r7, #4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4806      	ldr	r0, [pc, #24]	@ (8003b48 <MX_TIM2_Init+0x98>)
 8003b30:	f005 ff50 	bl	80099d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003b3a:	f7ff fa95 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003b3e:	bf00      	nop
 8003b40:	3720      	adds	r7, #32
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	2000155c 	.word	0x2000155c

08003b4c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08c      	sub	sp, #48	@ 0x30
 8003b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b52:	f107 030c 	add.w	r3, r7, #12
 8003b56:	2224      	movs	r2, #36	@ 0x24
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f007 ffa8 	bl	800bab0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b60:	463b      	mov	r3, r7
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	605a      	str	r2, [r3, #4]
 8003b68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003b6a:	4b21      	ldr	r3, [pc, #132]	@ (8003bf0 <MX_TIM3_Init+0xa4>)
 8003b6c:	4a21      	ldr	r2, [pc, #132]	@ (8003bf4 <MX_TIM3_Init+0xa8>)
 8003b6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003b70:	4b1f      	ldr	r3, [pc, #124]	@ (8003bf0 <MX_TIM3_Init+0xa4>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b76:	4b1e      	ldr	r3, [pc, #120]	@ (8003bf0 <MX_TIM3_Init+0xa4>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003b7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf0 <MX_TIM3_Init+0xa4>)
 8003b7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b84:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf0 <MX_TIM3_Init+0xa4>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b8a:	4b19      	ldr	r3, [pc, #100]	@ (8003bf0 <MX_TIM3_Init+0xa4>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b90:	2303      	movs	r3, #3
 8003b92:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b94:	2300      	movs	r3, #0
 8003b96:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003bac:	2300      	movs	r3, #0
 8003bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003bb4:	f107 030c 	add.w	r3, r7, #12
 8003bb8:	4619      	mov	r1, r3
 8003bba:	480d      	ldr	r0, [pc, #52]	@ (8003bf0 <MX_TIM3_Init+0xa4>)
 8003bbc:	f004 fb54 	bl	8008268 <HAL_TIM_Encoder_Init>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003bc6:	f7ff fa4f 	bl	8003068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003bd2:	463b      	mov	r3, r7
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4806      	ldr	r0, [pc, #24]	@ (8003bf0 <MX_TIM3_Init+0xa4>)
 8003bd8:	f005 fefc 	bl	80099d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003be2:	f7ff fa41 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003be6:	bf00      	nop
 8003be8:	3730      	adds	r7, #48	@ 0x30
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20001628 	.word	0x20001628
 8003bf4:	40000400 	.word	0x40000400

08003bf8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08c      	sub	sp, #48	@ 0x30
 8003bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003bfe:	f107 030c 	add.w	r3, r7, #12
 8003c02:	2224      	movs	r2, #36	@ 0x24
 8003c04:	2100      	movs	r1, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f007 ff52 	bl	800bab0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c0c:	463b      	mov	r3, r7
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	605a      	str	r2, [r3, #4]
 8003c14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003c16:	4b21      	ldr	r3, [pc, #132]	@ (8003c9c <MX_TIM4_Init+0xa4>)
 8003c18:	4a21      	ldr	r2, [pc, #132]	@ (8003ca0 <MX_TIM4_Init+0xa8>)
 8003c1a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8003c9c <MX_TIM4_Init+0xa4>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c22:	4b1e      	ldr	r3, [pc, #120]	@ (8003c9c <MX_TIM4_Init+0xa4>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003c28:	4b1c      	ldr	r3, [pc, #112]	@ (8003c9c <MX_TIM4_Init+0xa4>)
 8003c2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c2e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c30:	4b1a      	ldr	r3, [pc, #104]	@ (8003c9c <MX_TIM4_Init+0xa4>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c36:	4b19      	ldr	r3, [pc, #100]	@ (8003c9c <MX_TIM4_Init+0xa4>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c40:	2300      	movs	r3, #0
 8003c42:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c44:	2301      	movs	r3, #1
 8003c46:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c50:	2300      	movs	r3, #0
 8003c52:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c54:	2301      	movs	r3, #1
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003c60:	f107 030c 	add.w	r3, r7, #12
 8003c64:	4619      	mov	r1, r3
 8003c66:	480d      	ldr	r0, [pc, #52]	@ (8003c9c <MX_TIM4_Init+0xa4>)
 8003c68:	f004 fafe 	bl	8008268 <HAL_TIM_Encoder_Init>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003c72:	f7ff f9f9 	bl	8003068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c76:	2300      	movs	r3, #0
 8003c78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c7e:	463b      	mov	r3, r7
 8003c80:	4619      	mov	r1, r3
 8003c82:	4806      	ldr	r0, [pc, #24]	@ (8003c9c <MX_TIM4_Init+0xa4>)
 8003c84:	f005 fea6 	bl	80099d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003c8e:	f7ff f9eb 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003c92:	bf00      	nop
 8003c94:	3730      	adds	r7, #48	@ 0x30
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	200016f4 	.word	0x200016f4
 8003ca0:	40000800 	.word	0x40000800

08003ca4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003caa:	f107 0310 	add.w	r3, r7, #16
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	609a      	str	r2, [r3, #8]
 8003cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cb8:	1d3b      	adds	r3, r7, #4
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
 8003cc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d38 <MX_TIM5_Init+0x94>)
 8003cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d3c <MX_TIM5_Init+0x98>)
 8003cc6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d38 <MX_TIM5_Init+0x94>)
 8003cca:	22a9      	movs	r2, #169	@ 0xa9
 8003ccc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cce:	4b1a      	ldr	r3, [pc, #104]	@ (8003d38 <MX_TIM5_Init+0x94>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003cd4:	4b18      	ldr	r3, [pc, #96]	@ (8003d38 <MX_TIM5_Init+0x94>)
 8003cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cda:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cdc:	4b16      	ldr	r3, [pc, #88]	@ (8003d38 <MX_TIM5_Init+0x94>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ce2:	4b15      	ldr	r3, [pc, #84]	@ (8003d38 <MX_TIM5_Init+0x94>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003ce8:	4813      	ldr	r0, [pc, #76]	@ (8003d38 <MX_TIM5_Init+0x94>)
 8003cea:	f003 ff05 	bl	8007af8 <HAL_TIM_Base_Init>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003cf4:	f7ff f9b8 	bl	8003068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cfc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003cfe:	f107 0310 	add.w	r3, r7, #16
 8003d02:	4619      	mov	r1, r3
 8003d04:	480c      	ldr	r0, [pc, #48]	@ (8003d38 <MX_TIM5_Init+0x94>)
 8003d06:	f004 fe7f 	bl	8008a08 <HAL_TIM_ConfigClockSource>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003d10:	f7ff f9aa 	bl	8003068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d14:	2300      	movs	r3, #0
 8003d16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003d1c:	1d3b      	adds	r3, r7, #4
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4805      	ldr	r0, [pc, #20]	@ (8003d38 <MX_TIM5_Init+0x94>)
 8003d22:	f005 fe57 	bl	80099d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003d2c:	f7ff f99c 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003d30:	bf00      	nop
 8003d32:	3720      	adds	r7, #32
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	200017c0 	.word	0x200017c0
 8003d3c:	40000c00 	.word	0x40000c00

08003d40 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b09c      	sub	sp, #112	@ 0x70
 8003d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d46:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
 8003d50:	609a      	str	r2, [r3, #8]
 8003d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d54:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
 8003d5c:	605a      	str	r2, [r3, #4]
 8003d5e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003d64:	2200      	movs	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	605a      	str	r2, [r3, #4]
 8003d6a:	609a      	str	r2, [r3, #8]
 8003d6c:	60da      	str	r2, [r3, #12]
 8003d6e:	611a      	str	r2, [r3, #16]
 8003d70:	615a      	str	r2, [r3, #20]
 8003d72:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003d74:	1d3b      	adds	r3, r7, #4
 8003d76:	2234      	movs	r2, #52	@ 0x34
 8003d78:	2100      	movs	r1, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f007 fe98 	bl	800bab0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003d80:	4b51      	ldr	r3, [pc, #324]	@ (8003ec8 <MX_TIM8_Init+0x188>)
 8003d82:	4a52      	ldr	r2, [pc, #328]	@ (8003ecc <MX_TIM8_Init+0x18c>)
 8003d84:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003d86:	4b50      	ldr	r3, [pc, #320]	@ (8003ec8 <MX_TIM8_Init+0x188>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d8c:	4b4e      	ldr	r3, [pc, #312]	@ (8003ec8 <MX_TIM8_Init+0x188>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003d92:	4b4d      	ldr	r3, [pc, #308]	@ (8003ec8 <MX_TIM8_Init+0x188>)
 8003d94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d98:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d9a:	4b4b      	ldr	r3, [pc, #300]	@ (8003ec8 <MX_TIM8_Init+0x188>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003da0:	4b49      	ldr	r3, [pc, #292]	@ (8003ec8 <MX_TIM8_Init+0x188>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003da6:	4b48      	ldr	r3, [pc, #288]	@ (8003ec8 <MX_TIM8_Init+0x188>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003dac:	4846      	ldr	r0, [pc, #280]	@ (8003ec8 <MX_TIM8_Init+0x188>)
 8003dae:	f003 fea3 	bl	8007af8 <HAL_TIM_Base_Init>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003db8:	f7ff f956 	bl	8003068 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dbc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dc0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003dc2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	483f      	ldr	r0, [pc, #252]	@ (8003ec8 <MX_TIM8_Init+0x188>)
 8003dca:	f004 fe1d 	bl	8008a08 <HAL_TIM_ConfigClockSource>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8003dd4:	f7ff f948 	bl	8003068 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003dd8:	483b      	ldr	r0, [pc, #236]	@ (8003ec8 <MX_TIM8_Init+0x188>)
 8003dda:	f003 ffd9 	bl	8007d90 <HAL_TIM_PWM_Init>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8003de4:	f7ff f940 	bl	8003068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003de8:	2300      	movs	r3, #0
 8003dea:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003dec:	2300      	movs	r3, #0
 8003dee:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003df0:	2300      	movs	r3, #0
 8003df2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003df4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4833      	ldr	r0, [pc, #204]	@ (8003ec8 <MX_TIM8_Init+0x188>)
 8003dfc:	f005 fdea 	bl	80099d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8003e06:	f7ff f92f 	bl	8003068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e0a:	2360      	movs	r3, #96	@ 0x60
 8003e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e12:	2300      	movs	r3, #0
 8003e14:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e16:	2300      	movs	r3, #0
 8003e18:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003e22:	2300      	movs	r3, #0
 8003e24:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e26:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4826      	ldr	r0, [pc, #152]	@ (8003ec8 <MX_TIM8_Init+0x188>)
 8003e30:	f004 fcd6 	bl	80087e0 <HAL_TIM_PWM_ConfigChannel>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8003e3a:	f7ff f915 	bl	8003068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e3e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003e42:	2204      	movs	r2, #4
 8003e44:	4619      	mov	r1, r3
 8003e46:	4820      	ldr	r0, [pc, #128]	@ (8003ec8 <MX_TIM8_Init+0x188>)
 8003e48:	f004 fcca 	bl	80087e0 <HAL_TIM_PWM_ConfigChannel>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8003e52:	f7ff f909 	bl	8003068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e56:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	481a      	ldr	r0, [pc, #104]	@ (8003ec8 <MX_TIM8_Init+0x188>)
 8003e60:	f004 fcbe 	bl	80087e0 <HAL_TIM_PWM_ConfigChannel>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8003e6a:	f7ff f8fd 	bl	8003068 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003e82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003e90:	2300      	movs	r3, #0
 8003e92:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003e94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003ea6:	1d3b      	adds	r3, r7, #4
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4807      	ldr	r0, [pc, #28]	@ (8003ec8 <MX_TIM8_Init+0x188>)
 8003eac:	f005 fe28 	bl	8009b00 <HAL_TIMEx_ConfigBreakDeadTime>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 8003eb6:	f7ff f8d7 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003eba:	4803      	ldr	r0, [pc, #12]	@ (8003ec8 <MX_TIM8_Init+0x188>)
 8003ebc:	f000 f94a 	bl	8004154 <HAL_TIM_MspPostInit>

}
 8003ec0:	bf00      	nop
 8003ec2:	3770      	adds	r7, #112	@ 0x70
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	2000188c 	.word	0x2000188c
 8003ecc:	40013400 	.word	0x40013400

08003ed0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003ed4:	4b14      	ldr	r3, [pc, #80]	@ (8003f28 <MX_TIM16_Init+0x58>)
 8003ed6:	4a15      	ldr	r2, [pc, #84]	@ (8003f2c <MX_TIM16_Init+0x5c>)
 8003ed8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8003eda:	4b13      	ldr	r3, [pc, #76]	@ (8003f28 <MX_TIM16_Init+0x58>)
 8003edc:	22a9      	movs	r2, #169	@ 0xa9
 8003ede:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ee0:	4b11      	ldr	r3, [pc, #68]	@ (8003f28 <MX_TIM16_Init+0x58>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8003ee6:	4b10      	ldr	r3, [pc, #64]	@ (8003f28 <MX_TIM16_Init+0x58>)
 8003ee8:	f240 4279 	movw	r2, #1145	@ 0x479
 8003eec:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eee:	4b0e      	ldr	r3, [pc, #56]	@ (8003f28 <MX_TIM16_Init+0x58>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8003f28 <MX_TIM16_Init+0x58>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003efa:	4b0b      	ldr	r3, [pc, #44]	@ (8003f28 <MX_TIM16_Init+0x58>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003f00:	4809      	ldr	r0, [pc, #36]	@ (8003f28 <MX_TIM16_Init+0x58>)
 8003f02:	f003 fdf9 	bl	8007af8 <HAL_TIM_Base_Init>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003f0c:	f7ff f8ac 	bl	8003068 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003f10:	2108      	movs	r1, #8
 8003f12:	4805      	ldr	r0, [pc, #20]	@ (8003f28 <MX_TIM16_Init+0x58>)
 8003f14:	f004 f8b2 	bl	800807c <HAL_TIM_OnePulse_Init>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8003f1e:	f7ff f8a3 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003f22:	bf00      	nop
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20001958 	.word	0x20001958
 8003f2c:	40014400 	.word	0x40014400

08003f30 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003f74 <HAL_TIM_PWM_MspInit+0x44>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d113      	bne.n	8003f6a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f42:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <HAL_TIM_PWM_MspInit+0x48>)
 8003f44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f46:	4a0c      	ldr	r2, [pc, #48]	@ (8003f78 <HAL_TIM_PWM_MspInit+0x48>)
 8003f48:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003f4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f78 <HAL_TIM_PWM_MspInit+0x48>)
 8003f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	2019      	movs	r0, #25
 8003f60:	f002 f869 	bl	8006036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003f64:	2019      	movs	r0, #25
 8003f66:	f002 f880 	bl	800606a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003f6a:	bf00      	nop
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40021000 	.word	0x40021000

08003f7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f8c:	d114      	bne.n	8003fb8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800403c <HAL_TIM_Base_MspInit+0xc0>)
 8003f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f92:	4a2a      	ldr	r2, [pc, #168]	@ (800403c <HAL_TIM_Base_MspInit+0xc0>)
 8003f94:	f043 0301 	orr.w	r3, r3, #1
 8003f98:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f9a:	4b28      	ldr	r3, [pc, #160]	@ (800403c <HAL_TIM_Base_MspInit+0xc0>)
 8003f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	2100      	movs	r1, #0
 8003faa:	201c      	movs	r0, #28
 8003fac:	f002 f843 	bl	8006036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fb0:	201c      	movs	r0, #28
 8003fb2:	f002 f85a 	bl	800606a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003fb6:	e03c      	b.n	8004032 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a20      	ldr	r2, [pc, #128]	@ (8004040 <HAL_TIM_Base_MspInit+0xc4>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d10c      	bne.n	8003fdc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800403c <HAL_TIM_Base_MspInit+0xc0>)
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc6:	4a1d      	ldr	r2, [pc, #116]	@ (800403c <HAL_TIM_Base_MspInit+0xc0>)
 8003fc8:	f043 0308 	orr.w	r3, r3, #8
 8003fcc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fce:	4b1b      	ldr	r3, [pc, #108]	@ (800403c <HAL_TIM_Base_MspInit+0xc0>)
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	613b      	str	r3, [r7, #16]
 8003fd8:	693b      	ldr	r3, [r7, #16]
}
 8003fda:	e02a      	b.n	8004032 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a18      	ldr	r2, [pc, #96]	@ (8004044 <HAL_TIM_Base_MspInit+0xc8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d10c      	bne.n	8004000 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003fe6:	4b15      	ldr	r3, [pc, #84]	@ (800403c <HAL_TIM_Base_MspInit+0xc0>)
 8003fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fea:	4a14      	ldr	r2, [pc, #80]	@ (800403c <HAL_TIM_Base_MspInit+0xc0>)
 8003fec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ff0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ff2:	4b12      	ldr	r3, [pc, #72]	@ (800403c <HAL_TIM_Base_MspInit+0xc0>)
 8003ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ff6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
}
 8003ffe:	e018      	b.n	8004032 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a10      	ldr	r2, [pc, #64]	@ (8004048 <HAL_TIM_Base_MspInit+0xcc>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d113      	bne.n	8004032 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800400a:	4b0c      	ldr	r3, [pc, #48]	@ (800403c <HAL_TIM_Base_MspInit+0xc0>)
 800400c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800400e:	4a0b      	ldr	r2, [pc, #44]	@ (800403c <HAL_TIM_Base_MspInit+0xc0>)
 8004010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004014:	6613      	str	r3, [r2, #96]	@ 0x60
 8004016:	4b09      	ldr	r3, [pc, #36]	@ (800403c <HAL_TIM_Base_MspInit+0xc0>)
 8004018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800401a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004022:	2200      	movs	r2, #0
 8004024:	2100      	movs	r1, #0
 8004026:	2019      	movs	r0, #25
 8004028:	f002 f805 	bl	8006036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800402c:	2019      	movs	r0, #25
 800402e:	f002 f81c 	bl	800606a <HAL_NVIC_EnableIRQ>
}
 8004032:	bf00      	nop
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40021000 	.word	0x40021000
 8004040:	40000c00 	.word	0x40000c00
 8004044:	40013400 	.word	0x40013400
 8004048:	40014400 	.word	0x40014400

0800404c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08c      	sub	sp, #48	@ 0x30
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004054:	f107 031c 	add.w	r3, r7, #28
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	60da      	str	r2, [r3, #12]
 8004062:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a37      	ldr	r2, [pc, #220]	@ (8004148 <HAL_TIM_Encoder_MspInit+0xfc>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d131      	bne.n	80040d2 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800406e:	4b37      	ldr	r3, [pc, #220]	@ (800414c <HAL_TIM_Encoder_MspInit+0x100>)
 8004070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004072:	4a36      	ldr	r2, [pc, #216]	@ (800414c <HAL_TIM_Encoder_MspInit+0x100>)
 8004074:	f043 0302 	orr.w	r3, r3, #2
 8004078:	6593      	str	r3, [r2, #88]	@ 0x58
 800407a:	4b34      	ldr	r3, [pc, #208]	@ (800414c <HAL_TIM_Encoder_MspInit+0x100>)
 800407c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	61bb      	str	r3, [r7, #24]
 8004084:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004086:	4b31      	ldr	r3, [pc, #196]	@ (800414c <HAL_TIM_Encoder_MspInit+0x100>)
 8004088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800408a:	4a30      	ldr	r2, [pc, #192]	@ (800414c <HAL_TIM_Encoder_MspInit+0x100>)
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004092:	4b2e      	ldr	r3, [pc, #184]	@ (800414c <HAL_TIM_Encoder_MspInit+0x100>)
 8004094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	617b      	str	r3, [r7, #20]
 800409c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800409e:	23c0      	movs	r3, #192	@ 0xc0
 80040a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a2:	2302      	movs	r3, #2
 80040a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040aa:	2300      	movs	r3, #0
 80040ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040ae:	2302      	movs	r3, #2
 80040b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b2:	f107 031c 	add.w	r3, r7, #28
 80040b6:	4619      	mov	r1, r3
 80040b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80040bc:	f002 fb22 	bl	8006704 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80040c0:	2200      	movs	r2, #0
 80040c2:	2100      	movs	r1, #0
 80040c4:	201d      	movs	r0, #29
 80040c6:	f001 ffb6 	bl	8006036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80040ca:	201d      	movs	r0, #29
 80040cc:	f001 ffcd 	bl	800606a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80040d0:	e036      	b.n	8004140 <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM4)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004150 <HAL_TIM_Encoder_MspInit+0x104>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d131      	bne.n	8004140 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040dc:	4b1b      	ldr	r3, [pc, #108]	@ (800414c <HAL_TIM_Encoder_MspInit+0x100>)
 80040de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e0:	4a1a      	ldr	r2, [pc, #104]	@ (800414c <HAL_TIM_Encoder_MspInit+0x100>)
 80040e2:	f043 0304 	orr.w	r3, r3, #4
 80040e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040e8:	4b18      	ldr	r3, [pc, #96]	@ (800414c <HAL_TIM_Encoder_MspInit+0x100>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ec:	f003 0304 	and.w	r3, r3, #4
 80040f0:	613b      	str	r3, [r7, #16]
 80040f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040f4:	4b15      	ldr	r3, [pc, #84]	@ (800414c <HAL_TIM_Encoder_MspInit+0x100>)
 80040f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f8:	4a14      	ldr	r2, [pc, #80]	@ (800414c <HAL_TIM_Encoder_MspInit+0x100>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004100:	4b12      	ldr	r3, [pc, #72]	@ (800414c <HAL_TIM_Encoder_MspInit+0x100>)
 8004102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800410c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004110:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004112:	2302      	movs	r3, #2
 8004114:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004116:	2300      	movs	r3, #0
 8004118:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411a:	2300      	movs	r3, #0
 800411c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800411e:	230a      	movs	r3, #10
 8004120:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004122:	f107 031c 	add.w	r3, r7, #28
 8004126:	4619      	mov	r1, r3
 8004128:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800412c:	f002 faea 	bl	8006704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004130:	2200      	movs	r2, #0
 8004132:	2100      	movs	r1, #0
 8004134:	201e      	movs	r0, #30
 8004136:	f001 ff7e 	bl	8006036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800413a:	201e      	movs	r0, #30
 800413c:	f001 ff95 	bl	800606a <HAL_NVIC_EnableIRQ>
}
 8004140:	bf00      	nop
 8004142:	3730      	adds	r7, #48	@ 0x30
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40000400 	.word	0x40000400
 800414c:	40021000 	.word	0x40021000
 8004150:	40000800 	.word	0x40000800

08004154 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b08a      	sub	sp, #40	@ 0x28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800415c:	f107 0314 	add.w	r3, r7, #20
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	605a      	str	r2, [r3, #4]
 8004166:	609a      	str	r2, [r3, #8]
 8004168:	60da      	str	r2, [r3, #12]
 800416a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a30      	ldr	r2, [pc, #192]	@ (8004234 <HAL_TIM_MspPostInit+0xe0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d11c      	bne.n	80041b0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004176:	4b30      	ldr	r3, [pc, #192]	@ (8004238 <HAL_TIM_MspPostInit+0xe4>)
 8004178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800417a:	4a2f      	ldr	r2, [pc, #188]	@ (8004238 <HAL_TIM_MspPostInit+0xe4>)
 800417c:	f043 0304 	orr.w	r3, r3, #4
 8004180:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004182:	4b2d      	ldr	r3, [pc, #180]	@ (8004238 <HAL_TIM_MspPostInit+0xe4>)
 8004184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004186:	f003 0304 	and.w	r3, r3, #4
 800418a:	613b      	str	r3, [r7, #16]
 800418c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800418e:	2308      	movs	r3, #8
 8004190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004192:	2302      	movs	r3, #2
 8004194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800419a:	2300      	movs	r3, #0
 800419c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800419e:	2302      	movs	r3, #2
 80041a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041a2:	f107 0314 	add.w	r3, r7, #20
 80041a6:	4619      	mov	r1, r3
 80041a8:	4824      	ldr	r0, [pc, #144]	@ (800423c <HAL_TIM_MspPostInit+0xe8>)
 80041aa:	f002 faab 	bl	8006704 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80041ae:	e03d      	b.n	800422c <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM8)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a22      	ldr	r2, [pc, #136]	@ (8004240 <HAL_TIM_MspPostInit+0xec>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d138      	bne.n	800422c <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004238 <HAL_TIM_MspPostInit+0xe4>)
 80041bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041be:	4a1e      	ldr	r2, [pc, #120]	@ (8004238 <HAL_TIM_MspPostInit+0xe4>)
 80041c0:	f043 0304 	orr.w	r3, r3, #4
 80041c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004238 <HAL_TIM_MspPostInit+0xe4>)
 80041c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041d2:	4b19      	ldr	r3, [pc, #100]	@ (8004238 <HAL_TIM_MspPostInit+0xe4>)
 80041d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d6:	4a18      	ldr	r2, [pc, #96]	@ (8004238 <HAL_TIM_MspPostInit+0xe4>)
 80041d8:	f043 0302 	orr.w	r3, r3, #2
 80041dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041de:	4b16      	ldr	r3, [pc, #88]	@ (8004238 <HAL_TIM_MspPostInit+0xe4>)
 80041e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	60bb      	str	r3, [r7, #8]
 80041e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80041ea:	23c0      	movs	r3, #192	@ 0xc0
 80041ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ee:	2302      	movs	r3, #2
 80041f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041f6:	2300      	movs	r3, #0
 80041f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80041fa:	2304      	movs	r3, #4
 80041fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041fe:	f107 0314 	add.w	r3, r7, #20
 8004202:	4619      	mov	r1, r3
 8004204:	480d      	ldr	r0, [pc, #52]	@ (800423c <HAL_TIM_MspPostInit+0xe8>)
 8004206:	f002 fa7d 	bl	8006704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800420a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800420e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004210:	2302      	movs	r3, #2
 8004212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004214:	2300      	movs	r3, #0
 8004216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004218:	2300      	movs	r3, #0
 800421a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800421c:	230a      	movs	r3, #10
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004220:	f107 0314 	add.w	r3, r7, #20
 8004224:	4619      	mov	r1, r3
 8004226:	4807      	ldr	r0, [pc, #28]	@ (8004244 <HAL_TIM_MspPostInit+0xf0>)
 8004228:	f002 fa6c 	bl	8006704 <HAL_GPIO_Init>
}
 800422c:	bf00      	nop
 800422e:	3728      	adds	r7, #40	@ 0x28
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40012c00 	.word	0x40012c00
 8004238:	40021000 	.word	0x40021000
 800423c:	48000800 	.word	0x48000800
 8004240:	40013400 	.word	0x40013400
 8004244:	48000400 	.word	0x48000400

08004248 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800424c:	4b23      	ldr	r3, [pc, #140]	@ (80042dc <MX_USART2_UART_Init+0x94>)
 800424e:	4a24      	ldr	r2, [pc, #144]	@ (80042e0 <MX_USART2_UART_Init+0x98>)
 8004250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8004252:	4b22      	ldr	r3, [pc, #136]	@ (80042dc <MX_USART2_UART_Init+0x94>)
 8004254:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8004258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800425a:	4b20      	ldr	r3, [pc, #128]	@ (80042dc <MX_USART2_UART_Init+0x94>)
 800425c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004260:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004262:	4b1e      	ldr	r3, [pc, #120]	@ (80042dc <MX_USART2_UART_Init+0x94>)
 8004264:	2200      	movs	r2, #0
 8004266:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8004268:	4b1c      	ldr	r3, [pc, #112]	@ (80042dc <MX_USART2_UART_Init+0x94>)
 800426a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800426e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004270:	4b1a      	ldr	r3, [pc, #104]	@ (80042dc <MX_USART2_UART_Init+0x94>)
 8004272:	220c      	movs	r2, #12
 8004274:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004276:	4b19      	ldr	r3, [pc, #100]	@ (80042dc <MX_USART2_UART_Init+0x94>)
 8004278:	2200      	movs	r2, #0
 800427a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800427c:	4b17      	ldr	r3, [pc, #92]	@ (80042dc <MX_USART2_UART_Init+0x94>)
 800427e:	2200      	movs	r2, #0
 8004280:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004282:	4b16      	ldr	r3, [pc, #88]	@ (80042dc <MX_USART2_UART_Init+0x94>)
 8004284:	2200      	movs	r2, #0
 8004286:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004288:	4b14      	ldr	r3, [pc, #80]	@ (80042dc <MX_USART2_UART_Init+0x94>)
 800428a:	2200      	movs	r2, #0
 800428c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800428e:	4b13      	ldr	r3, [pc, #76]	@ (80042dc <MX_USART2_UART_Init+0x94>)
 8004290:	2200      	movs	r2, #0
 8004292:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004294:	4811      	ldr	r0, [pc, #68]	@ (80042dc <MX_USART2_UART_Init+0x94>)
 8004296:	f005 fd17 	bl	8009cc8 <HAL_UART_Init>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80042a0:	f7fe fee2 	bl	8003068 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042a4:	2100      	movs	r1, #0
 80042a6:	480d      	ldr	r0, [pc, #52]	@ (80042dc <MX_USART2_UART_Init+0x94>)
 80042a8:	f007 fa6a 	bl	800b780 <HAL_UARTEx_SetTxFifoThreshold>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80042b2:	f7fe fed9 	bl	8003068 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042b6:	2100      	movs	r1, #0
 80042b8:	4808      	ldr	r0, [pc, #32]	@ (80042dc <MX_USART2_UART_Init+0x94>)
 80042ba:	f007 fa9f 	bl	800b7fc <HAL_UARTEx_SetRxFifoThreshold>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80042c4:	f7fe fed0 	bl	8003068 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80042c8:	4804      	ldr	r0, [pc, #16]	@ (80042dc <MX_USART2_UART_Init+0x94>)
 80042ca:	f007 fa20 	bl	800b70e <HAL_UARTEx_DisableFifoMode>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80042d4:	f7fe fec8 	bl	8003068 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80042d8:	bf00      	nop
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	20001a24 	.word	0x20001a24
 80042e0:	40004400 	.word	0x40004400

080042e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b09e      	sub	sp, #120	@ 0x78
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	609a      	str	r2, [r3, #8]
 80042f8:	60da      	str	r2, [r3, #12]
 80042fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80042fc:	f107 0310 	add.w	r3, r7, #16
 8004300:	2254      	movs	r2, #84	@ 0x54
 8004302:	2100      	movs	r1, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f007 fbd3 	bl	800bab0 <memset>
  if(uartHandle->Instance==USART2)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a4d      	ldr	r2, [pc, #308]	@ (8004444 <HAL_UART_MspInit+0x160>)
 8004310:	4293      	cmp	r3, r2
 8004312:	f040 8092 	bne.w	800443a <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004316:	2302      	movs	r3, #2
 8004318:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800431a:	2300      	movs	r3, #0
 800431c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800431e:	f107 0310 	add.w	r3, r7, #16
 8004322:	4618      	mov	r0, r3
 8004324:	f003 f99a 	bl	800765c <HAL_RCCEx_PeriphCLKConfig>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800432e:	f7fe fe9b 	bl	8003068 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004332:	4b45      	ldr	r3, [pc, #276]	@ (8004448 <HAL_UART_MspInit+0x164>)
 8004334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004336:	4a44      	ldr	r2, [pc, #272]	@ (8004448 <HAL_UART_MspInit+0x164>)
 8004338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800433c:	6593      	str	r3, [r2, #88]	@ 0x58
 800433e:	4b42      	ldr	r3, [pc, #264]	@ (8004448 <HAL_UART_MspInit+0x164>)
 8004340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800434a:	4b3f      	ldr	r3, [pc, #252]	@ (8004448 <HAL_UART_MspInit+0x164>)
 800434c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800434e:	4a3e      	ldr	r2, [pc, #248]	@ (8004448 <HAL_UART_MspInit+0x164>)
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004356:	4b3c      	ldr	r3, [pc, #240]	@ (8004448 <HAL_UART_MspInit+0x164>)
 8004358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004362:	230c      	movs	r3, #12
 8004364:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004366:	2302      	movs	r3, #2
 8004368:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436a:	2300      	movs	r3, #0
 800436c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800436e:	2300      	movs	r3, #0
 8004370:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004372:	2307      	movs	r3, #7
 8004374:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004376:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800437a:	4619      	mov	r1, r3
 800437c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004380:	f002 f9c0 	bl	8006704 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8004384:	4b31      	ldr	r3, [pc, #196]	@ (800444c <HAL_UART_MspInit+0x168>)
 8004386:	4a32      	ldr	r2, [pc, #200]	@ (8004450 <HAL_UART_MspInit+0x16c>)
 8004388:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800438a:	4b30      	ldr	r3, [pc, #192]	@ (800444c <HAL_UART_MspInit+0x168>)
 800438c:	221a      	movs	r2, #26
 800438e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004390:	4b2e      	ldr	r3, [pc, #184]	@ (800444c <HAL_UART_MspInit+0x168>)
 8004392:	2200      	movs	r2, #0
 8004394:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004396:	4b2d      	ldr	r3, [pc, #180]	@ (800444c <HAL_UART_MspInit+0x168>)
 8004398:	2200      	movs	r2, #0
 800439a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800439c:	4b2b      	ldr	r3, [pc, #172]	@ (800444c <HAL_UART_MspInit+0x168>)
 800439e:	2280      	movs	r2, #128	@ 0x80
 80043a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043a2:	4b2a      	ldr	r3, [pc, #168]	@ (800444c <HAL_UART_MspInit+0x168>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043a8:	4b28      	ldr	r3, [pc, #160]	@ (800444c <HAL_UART_MspInit+0x168>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80043ae:	4b27      	ldr	r3, [pc, #156]	@ (800444c <HAL_UART_MspInit+0x168>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80043b4:	4b25      	ldr	r3, [pc, #148]	@ (800444c <HAL_UART_MspInit+0x168>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80043ba:	4824      	ldr	r0, [pc, #144]	@ (800444c <HAL_UART_MspInit+0x168>)
 80043bc:	f001 fe70 	bl	80060a0 <HAL_DMA_Init>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80043c6:	f7fe fe4f 	bl	8003068 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a1f      	ldr	r2, [pc, #124]	@ (800444c <HAL_UART_MspInit+0x168>)
 80043ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80043d2:	4a1e      	ldr	r2, [pc, #120]	@ (800444c <HAL_UART_MspInit+0x168>)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 80043d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004454 <HAL_UART_MspInit+0x170>)
 80043da:	4a1f      	ldr	r2, [pc, #124]	@ (8004458 <HAL_UART_MspInit+0x174>)
 80043dc:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80043de:	4b1d      	ldr	r3, [pc, #116]	@ (8004454 <HAL_UART_MspInit+0x170>)
 80043e0:	221b      	movs	r2, #27
 80043e2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004454 <HAL_UART_MspInit+0x170>)
 80043e6:	2210      	movs	r2, #16
 80043e8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004454 <HAL_UART_MspInit+0x170>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043f0:	4b18      	ldr	r3, [pc, #96]	@ (8004454 <HAL_UART_MspInit+0x170>)
 80043f2:	2280      	movs	r2, #128	@ 0x80
 80043f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043f6:	4b17      	ldr	r3, [pc, #92]	@ (8004454 <HAL_UART_MspInit+0x170>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043fc:	4b15      	ldr	r3, [pc, #84]	@ (8004454 <HAL_UART_MspInit+0x170>)
 80043fe:	2200      	movs	r2, #0
 8004400:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004402:	4b14      	ldr	r3, [pc, #80]	@ (8004454 <HAL_UART_MspInit+0x170>)
 8004404:	2200      	movs	r2, #0
 8004406:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004408:	4b12      	ldr	r3, [pc, #72]	@ (8004454 <HAL_UART_MspInit+0x170>)
 800440a:	2200      	movs	r2, #0
 800440c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800440e:	4811      	ldr	r0, [pc, #68]	@ (8004454 <HAL_UART_MspInit+0x170>)
 8004410:	f001 fe46 	bl	80060a0 <HAL_DMA_Init>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800441a:	f7fe fe25 	bl	8003068 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a0c      	ldr	r2, [pc, #48]	@ (8004454 <HAL_UART_MspInit+0x170>)
 8004422:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004424:	4a0b      	ldr	r2, [pc, #44]	@ (8004454 <HAL_UART_MspInit+0x170>)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800442a:	2200      	movs	r2, #0
 800442c:	2100      	movs	r1, #0
 800442e:	2026      	movs	r0, #38	@ 0x26
 8004430:	f001 fe01 	bl	8006036 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004434:	2026      	movs	r0, #38	@ 0x26
 8004436:	f001 fe18 	bl	800606a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800443a:	bf00      	nop
 800443c:	3778      	adds	r7, #120	@ 0x78
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40004400 	.word	0x40004400
 8004448:	40021000 	.word	0x40021000
 800444c:	20001af0 	.word	0x20001af0
 8004450:	4002001c 	.word	0x4002001c
 8004454:	20001b50 	.word	0x20001b50
 8004458:	40020030 	.word	0x40020030

0800445c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800445c:	480d      	ldr	r0, [pc, #52]	@ (8004494 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800445e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004460:	f7ff fa80 	bl	8003964 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004464:	480c      	ldr	r0, [pc, #48]	@ (8004498 <LoopForever+0x6>)
  ldr r1, =_edata
 8004466:	490d      	ldr	r1, [pc, #52]	@ (800449c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004468:	4a0d      	ldr	r2, [pc, #52]	@ (80044a0 <LoopForever+0xe>)
  movs r3, #0
 800446a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800446c:	e002      	b.n	8004474 <LoopCopyDataInit>

0800446e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800446e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004470:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004472:	3304      	adds	r3, #4

08004474 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004474:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004476:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004478:	d3f9      	bcc.n	800446e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800447a:	4a0a      	ldr	r2, [pc, #40]	@ (80044a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800447c:	4c0a      	ldr	r4, [pc, #40]	@ (80044a8 <LoopForever+0x16>)
  movs r3, #0
 800447e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004480:	e001      	b.n	8004486 <LoopFillZerobss>

08004482 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004482:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004484:	3204      	adds	r2, #4

08004486 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004486:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004488:	d3fb      	bcc.n	8004482 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800448a:	f007 fb2f 	bl	800baec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800448e:	f7fe fc01 	bl	8002c94 <main>

08004492 <LoopForever>:

LoopForever:
    b LoopForever
 8004492:	e7fe      	b.n	8004492 <LoopForever>
  ldr   r0, =_estack
 8004494:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800449c:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 80044a0:	0800caec 	.word	0x0800caec
  ldr r2, =_sbss
 80044a4:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 80044a8:	20001cfc 	.word	0x20001cfc

080044ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80044ac:	e7fe      	b.n	80044ac <ADC1_2_IRQHandler>

080044ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044b8:	2003      	movs	r0, #3
 80044ba:	f001 fdb1 	bl	8006020 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044be:	2000      	movs	r0, #0
 80044c0:	f000 f80e 	bl	80044e0 <HAL_InitTick>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	71fb      	strb	r3, [r7, #7]
 80044ce:	e001      	b.n	80044d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80044d0:	f7ff f962 	bl	8003798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80044d4:	79fb      	ldrb	r3, [r7, #7]

}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80044e8:	2300      	movs	r3, #0
 80044ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80044ec:	4b16      	ldr	r3, [pc, #88]	@ (8004548 <HAL_InitTick+0x68>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d022      	beq.n	800453a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80044f4:	4b15      	ldr	r3, [pc, #84]	@ (800454c <HAL_InitTick+0x6c>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4b13      	ldr	r3, [pc, #76]	@ (8004548 <HAL_InitTick+0x68>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004500:	fbb1 f3f3 	udiv	r3, r1, r3
 8004504:	fbb2 f3f3 	udiv	r3, r2, r3
 8004508:	4618      	mov	r0, r3
 800450a:	f001 fdbc 	bl	8006086 <HAL_SYSTICK_Config>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10f      	bne.n	8004534 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b0f      	cmp	r3, #15
 8004518:	d809      	bhi.n	800452e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800451a:	2200      	movs	r2, #0
 800451c:	6879      	ldr	r1, [r7, #4]
 800451e:	f04f 30ff 	mov.w	r0, #4294967295
 8004522:	f001 fd88 	bl	8006036 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004526:	4a0a      	ldr	r2, [pc, #40]	@ (8004550 <HAL_InitTick+0x70>)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	e007      	b.n	800453e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
 8004532:	e004      	b.n	800453e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	73fb      	strb	r3, [r7, #15]
 8004538:	e001      	b.n	800453e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800453e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20000160 	.word	0x20000160
 800454c:	20000158 	.word	0x20000158
 8004550:	2000015c 	.word	0x2000015c

08004554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004558:	4b05      	ldr	r3, [pc, #20]	@ (8004570 <HAL_IncTick+0x1c>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	4b05      	ldr	r3, [pc, #20]	@ (8004574 <HAL_IncTick+0x20>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4413      	add	r3, r2
 8004562:	4a03      	ldr	r2, [pc, #12]	@ (8004570 <HAL_IncTick+0x1c>)
 8004564:	6013      	str	r3, [r2, #0]
}
 8004566:	bf00      	nop
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	20001bb0 	.word	0x20001bb0
 8004574:	20000160 	.word	0x20000160

08004578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  return uwTick;
 800457c:	4b03      	ldr	r3, [pc, #12]	@ (800458c <HAL_GetTick+0x14>)
 800457e:	681b      	ldr	r3, [r3, #0]
}
 8004580:	4618      	mov	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	20001bb0 	.word	0x20001bb0

08004590 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	609a      	str	r2, [r3, #8]
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	609a      	str	r2, [r3, #8]
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3360      	adds	r3, #96	@ 0x60
 800460a:	461a      	mov	r2, r3
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	4b08      	ldr	r3, [pc, #32]	@ (800463c <LL_ADC_SetOffset+0x44>)
 800461a:	4013      	ands	r3, r2
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	4313      	orrs	r3, r2
 8004628:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004630:	bf00      	nop
 8004632:	371c      	adds	r7, #28
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	03fff000 	.word	0x03fff000

08004640 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004640:	b480      	push	{r7}
 8004642:	b085      	sub	sp, #20
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3360      	adds	r3, #96	@ 0x60
 800464e:	461a      	mov	r2, r3
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	3360      	adds	r3, #96	@ 0x60
 800467c:	461a      	mov	r2, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	431a      	orrs	r2, r3
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004696:	bf00      	nop
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b087      	sub	sp, #28
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3360      	adds	r3, #96	@ 0x60
 80046b2:	461a      	mov	r2, r3
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	4413      	add	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80046cc:	bf00      	nop
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3360      	adds	r3, #96	@ 0x60
 80046e8:	461a      	mov	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	431a      	orrs	r2, r3
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8004702:	bf00      	nop
 8004704:	371c      	adds	r7, #28
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	615a      	str	r2, [r3, #20]
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800475a:	b480      	push	{r7}
 800475c:	b087      	sub	sp, #28
 800475e:	af00      	add	r7, sp, #0
 8004760:	60f8      	str	r0, [r7, #12]
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3330      	adds	r3, #48	@ 0x30
 800476a:	461a      	mov	r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	0a1b      	lsrs	r3, r3, #8
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	f003 030c 	and.w	r3, r3, #12
 8004776:	4413      	add	r3, r2
 8004778:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f003 031f 	and.w	r3, r3, #31
 8004784:	211f      	movs	r1, #31
 8004786:	fa01 f303 	lsl.w	r3, r1, r3
 800478a:	43db      	mvns	r3, r3
 800478c:	401a      	ands	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	0e9b      	lsrs	r3, r3, #26
 8004792:	f003 011f 	and.w	r1, r3, #31
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f003 031f 	and.w	r3, r3, #31
 800479c:	fa01 f303 	lsl.w	r3, r1, r3
 80047a0:	431a      	orrs	r2, r3
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b087      	sub	sp, #28
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	60f8      	str	r0, [r7, #12]
 80047ba:	60b9      	str	r1, [r7, #8]
 80047bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	3314      	adds	r3, #20
 80047c2:	461a      	mov	r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	0e5b      	lsrs	r3, r3, #25
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	4413      	add	r3, r2
 80047d0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	0d1b      	lsrs	r3, r3, #20
 80047da:	f003 031f 	and.w	r3, r3, #31
 80047de:	2107      	movs	r1, #7
 80047e0:	fa01 f303 	lsl.w	r3, r1, r3
 80047e4:	43db      	mvns	r3, r3
 80047e6:	401a      	ands	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	0d1b      	lsrs	r3, r3, #20
 80047ec:	f003 031f 	and.w	r3, r3, #31
 80047f0:	6879      	ldr	r1, [r7, #4]
 80047f2:	fa01 f303 	lsl.w	r3, r1, r3
 80047f6:	431a      	orrs	r2, r3
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80047fc:	bf00      	nop
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004820:	43db      	mvns	r3, r3
 8004822:	401a      	ands	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f003 0318 	and.w	r3, r3, #24
 800482a:	4908      	ldr	r1, [pc, #32]	@ (800484c <LL_ADC_SetChannelSingleDiff+0x44>)
 800482c:	40d9      	lsrs	r1, r3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	400b      	ands	r3, r1
 8004832:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004836:	431a      	orrs	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800483e:	bf00      	nop
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	0007ffff 	.word	0x0007ffff

08004850 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f003 031f 	and.w	r3, r3, #31
}
 8004860:	4618      	mov	r0, r3
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800487c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6093      	str	r3, [r2, #8]
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80048a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80048a4:	d101      	bne.n	80048aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80048c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80048cc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048f4:	d101      	bne.n	80048fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80048f6:	2301      	movs	r3, #1
 80048f8:	e000      	b.n	80048fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004918:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800491c:	f043 0201 	orr.w	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004940:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004944:	f043 0202 	orr.w	r2, r3, #2
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <LL_ADC_IsEnabled+0x18>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <LL_ADC_IsEnabled+0x1a>
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b02      	cmp	r3, #2
 8004990:	d101      	bne.n	8004996 <LL_ADC_IsDisableOngoing+0x18>
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <LL_ADC_IsDisableOngoing+0x1a>
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80049b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80049b8:	f043 0204 	orr.w	r2, r3, #4
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d101      	bne.n	80049e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d101      	bne.n	8004a0a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a18:	b590      	push	{r4, r7, lr}
 8004a1a:	b089      	sub	sp, #36	@ 0x24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a20:	2300      	movs	r3, #0
 8004a22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e1a9      	b.n	8004d86 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d109      	bne.n	8004a54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7fd fde9 	bl	8002618 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff ff19 	bl	8004890 <LL_ADC_IsDeepPowerDownEnabled>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d004      	beq.n	8004a6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff feff 	bl	800486c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff ff34 	bl	80048e0 <LL_ADC_IsInternalRegulatorEnabled>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d115      	bne.n	8004aaa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff ff18 	bl	80048b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a88:	4b9c      	ldr	r3, [pc, #624]	@ (8004cfc <HAL_ADC_Init+0x2e4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	099b      	lsrs	r3, r3, #6
 8004a8e:	4a9c      	ldr	r2, [pc, #624]	@ (8004d00 <HAL_ADC_Init+0x2e8>)
 8004a90:	fba2 2303 	umull	r2, r3, r2, r3
 8004a94:	099b      	lsrs	r3, r3, #6
 8004a96:	3301      	adds	r3, #1
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004a9c:	e002      	b.n	8004aa4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f9      	bne.n	8004a9e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff ff16 	bl	80048e0 <LL_ADC_IsInternalRegulatorEnabled>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10d      	bne.n	8004ad6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004abe:	f043 0210 	orr.w	r2, r3, #16
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aca:	f043 0201 	orr.w	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff ff76 	bl	80049cc <LL_ADC_REG_IsConversionOngoing>
 8004ae0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae6:	f003 0310 	and.w	r3, r3, #16
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f040 8142 	bne.w	8004d74 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f040 813e 	bne.w	8004d74 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004afc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004b00:	f043 0202 	orr.w	r2, r3, #2
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff ff23 	bl	8004958 <LL_ADC_IsEnabled>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d141      	bne.n	8004b9c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b20:	d004      	beq.n	8004b2c <HAL_ADC_Init+0x114>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a77      	ldr	r2, [pc, #476]	@ (8004d04 <HAL_ADC_Init+0x2ec>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d10f      	bne.n	8004b4c <HAL_ADC_Init+0x134>
 8004b2c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004b30:	f7ff ff12 	bl	8004958 <LL_ADC_IsEnabled>
 8004b34:	4604      	mov	r4, r0
 8004b36:	4873      	ldr	r0, [pc, #460]	@ (8004d04 <HAL_ADC_Init+0x2ec>)
 8004b38:	f7ff ff0e 	bl	8004958 <LL_ADC_IsEnabled>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	4323      	orrs	r3, r4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bf0c      	ite	eq
 8004b44:	2301      	moveq	r3, #1
 8004b46:	2300      	movne	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	e012      	b.n	8004b72 <HAL_ADC_Init+0x15a>
 8004b4c:	486e      	ldr	r0, [pc, #440]	@ (8004d08 <HAL_ADC_Init+0x2f0>)
 8004b4e:	f7ff ff03 	bl	8004958 <LL_ADC_IsEnabled>
 8004b52:	4604      	mov	r4, r0
 8004b54:	486d      	ldr	r0, [pc, #436]	@ (8004d0c <HAL_ADC_Init+0x2f4>)
 8004b56:	f7ff feff 	bl	8004958 <LL_ADC_IsEnabled>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	431c      	orrs	r4, r3
 8004b5e:	486c      	ldr	r0, [pc, #432]	@ (8004d10 <HAL_ADC_Init+0x2f8>)
 8004b60:	f7ff fefa 	bl	8004958 <LL_ADC_IsEnabled>
 8004b64:	4603      	mov	r3, r0
 8004b66:	4323      	orrs	r3, r4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	bf0c      	ite	eq
 8004b6c:	2301      	moveq	r3, #1
 8004b6e:	2300      	movne	r3, #0
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d012      	beq.n	8004b9c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b7e:	d004      	beq.n	8004b8a <HAL_ADC_Init+0x172>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a5f      	ldr	r2, [pc, #380]	@ (8004d04 <HAL_ADC_Init+0x2ec>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d101      	bne.n	8004b8e <HAL_ADC_Init+0x176>
 8004b8a:	4a62      	ldr	r2, [pc, #392]	@ (8004d14 <HAL_ADC_Init+0x2fc>)
 8004b8c:	e000      	b.n	8004b90 <HAL_ADC_Init+0x178>
 8004b8e:	4a62      	ldr	r2, [pc, #392]	@ (8004d18 <HAL_ADC_Init+0x300>)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	4619      	mov	r1, r3
 8004b96:	4610      	mov	r0, r2
 8004b98:	f7ff fcfa 	bl	8004590 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	7f5b      	ldrb	r3, [r3, #29]
 8004ba0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004ba6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004bac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004bb2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d106      	bne.n	8004bd8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	045b      	lsls	r3, r3, #17
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d009      	beq.n	8004bf4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68da      	ldr	r2, [r3, #12]
 8004bfa:	4b48      	ldr	r3, [pc, #288]	@ (8004d1c <HAL_ADC_Init+0x304>)
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	69b9      	ldr	r1, [r7, #24]
 8004c04:	430b      	orrs	r3, r1
 8004c06:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff fee5 	bl	80049f2 <LL_ADC_INJ_IsConversionOngoing>
 8004c28:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d17f      	bne.n	8004d30 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d17c      	bne.n	8004d30 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004c3a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004c42:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004c44:	4313      	orrs	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c52:	f023 0302 	bic.w	r3, r3, #2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	69b9      	ldr	r1, [r7, #24]
 8004c5c:	430b      	orrs	r3, r1
 8004c5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d017      	beq.n	8004c98 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004c76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004c80:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004c84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6911      	ldr	r1, [r2, #16]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6812      	ldr	r2, [r2, #0]
 8004c90:	430b      	orrs	r3, r1
 8004c92:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004c96:	e013      	b.n	8004cc0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004ca6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004cb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004cbc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d12a      	bne.n	8004d20 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004cd4:	f023 0304 	bic.w	r3, r3, #4
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ce0:	4311      	orrs	r1, r2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004ce6:	4311      	orrs	r1, r2
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004cec:	430a      	orrs	r2, r1
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0201 	orr.w	r2, r2, #1
 8004cf8:	611a      	str	r2, [r3, #16]
 8004cfa:	e019      	b.n	8004d30 <HAL_ADC_Init+0x318>
 8004cfc:	20000158 	.word	0x20000158
 8004d00:	053e2d63 	.word	0x053e2d63
 8004d04:	50000100 	.word	0x50000100
 8004d08:	50000400 	.word	0x50000400
 8004d0c:	50000500 	.word	0x50000500
 8004d10:	50000600 	.word	0x50000600
 8004d14:	50000300 	.word	0x50000300
 8004d18:	50000700 	.word	0x50000700
 8004d1c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691a      	ldr	r2, [r3, #16]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0201 	bic.w	r2, r2, #1
 8004d2e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d10c      	bne.n	8004d52 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3e:	f023 010f 	bic.w	r1, r3, #15
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	1e5a      	subs	r2, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d50:	e007      	b.n	8004d62 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f022 020f 	bic.w	r2, r2, #15
 8004d60:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d66:	f023 0303 	bic.w	r3, r3, #3
 8004d6a:	f043 0201 	orr.w	r2, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004d72:	e007      	b.n	8004d84 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d78:	f043 0210 	orr.w	r2, r3, #16
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d84:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3724      	adds	r7, #36	@ 0x24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd90      	pop	{r4, r7, pc}
 8004d8e:	bf00      	nop

08004d90 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004da4:	d004      	beq.n	8004db0 <HAL_ADC_Start_DMA+0x20>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a5a      	ldr	r2, [pc, #360]	@ (8004f14 <HAL_ADC_Start_DMA+0x184>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d101      	bne.n	8004db4 <HAL_ADC_Start_DMA+0x24>
 8004db0:	4b59      	ldr	r3, [pc, #356]	@ (8004f18 <HAL_ADC_Start_DMA+0x188>)
 8004db2:	e000      	b.n	8004db6 <HAL_ADC_Start_DMA+0x26>
 8004db4:	4b59      	ldr	r3, [pc, #356]	@ (8004f1c <HAL_ADC_Start_DMA+0x18c>)
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff fd4a 	bl	8004850 <LL_ADC_GetMultimode>
 8004dbc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff fe02 	bl	80049cc <LL_ADC_REG_IsConversionOngoing>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	f040 809b 	bne.w	8004f06 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_ADC_Start_DMA+0x4e>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e096      	b.n	8004f0c <HAL_ADC_Start_DMA+0x17c>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a4d      	ldr	r2, [pc, #308]	@ (8004f20 <HAL_ADC_Start_DMA+0x190>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d008      	beq.n	8004e02 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d005      	beq.n	8004e02 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2b05      	cmp	r3, #5
 8004dfa:	d002      	beq.n	8004e02 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2b09      	cmp	r3, #9
 8004e00:	d17a      	bne.n	8004ef8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 fcf6 	bl	80057f4 <ADC_Enable>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004e0c:	7dfb      	ldrb	r3, [r7, #23]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d16d      	bne.n	8004eee <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e16:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004e1a:	f023 0301 	bic.w	r3, r3, #1
 8004e1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a3a      	ldr	r2, [pc, #232]	@ (8004f14 <HAL_ADC_Start_DMA+0x184>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d009      	beq.n	8004e44 <HAL_ADC_Start_DMA+0xb4>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a3b      	ldr	r2, [pc, #236]	@ (8004f24 <HAL_ADC_Start_DMA+0x194>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d002      	beq.n	8004e40 <HAL_ADC_Start_DMA+0xb0>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	e003      	b.n	8004e48 <HAL_ADC_Start_DMA+0xb8>
 8004e40:	4b39      	ldr	r3, [pc, #228]	@ (8004f28 <HAL_ADC_Start_DMA+0x198>)
 8004e42:	e001      	b.n	8004e48 <HAL_ADC_Start_DMA+0xb8>
 8004e44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d002      	beq.n	8004e56 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d105      	bne.n	8004e62 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d006      	beq.n	8004e7c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e72:	f023 0206 	bic.w	r2, r3, #6
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	661a      	str	r2, [r3, #96]	@ 0x60
 8004e7a:	e002      	b.n	8004e82 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e86:	4a29      	ldr	r2, [pc, #164]	@ (8004f2c <HAL_ADC_Start_DMA+0x19c>)
 8004e88:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e8e:	4a28      	ldr	r2, [pc, #160]	@ (8004f30 <HAL_ADC_Start_DMA+0x1a0>)
 8004e90:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e96:	4a27      	ldr	r2, [pc, #156]	@ (8004f34 <HAL_ADC_Start_DMA+0x1a4>)
 8004e98:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	221c      	movs	r2, #28
 8004ea0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0210 	orr.w	r2, r2, #16
 8004eb8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0201 	orr.w	r2, r2, #1
 8004ec8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3340      	adds	r3, #64	@ 0x40
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f001 f989 	bl	80061f0 <HAL_DMA_Start_IT>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff fd5c 	bl	80049a4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004eec:	e00d      	b.n	8004f0a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004ef6:	e008      	b.n	8004f0a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004f04:	e001      	b.n	8004f0a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004f06:	2302      	movs	r3, #2
 8004f08:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	50000100 	.word	0x50000100
 8004f18:	50000300 	.word	0x50000300
 8004f1c:	50000700 	.word	0x50000700
 8004f20:	50000600 	.word	0x50000600
 8004f24:	50000500 	.word	0x50000500
 8004f28:	50000400 	.word	0x50000400
 8004f2c:	080059df 	.word	0x080059df
 8004f30:	08005ab7 	.word	0x08005ab7
 8004f34:	08005ad3 	.word	0x08005ad3

08004f38 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004f68:	bf00      	nop
 8004f6a:	370c      	adds	r7, #12
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b0b6      	sub	sp, #216	@ 0xd8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d102      	bne.n	8004f98 <HAL_ADC_ConfigChannel+0x24>
 8004f92:	2302      	movs	r3, #2
 8004f94:	f000 bc13 	b.w	80057be <HAL_ADC_ConfigChannel+0x84a>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff fd11 	bl	80049cc <LL_ADC_REG_IsConversionOngoing>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f040 83f3 	bne.w	8005798 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6818      	ldr	r0, [r3, #0]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	6859      	ldr	r1, [r3, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	f7ff fbcb 	bl	800475a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7ff fcff 	bl	80049cc <LL_ADC_REG_IsConversionOngoing>
 8004fce:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f7ff fd0b 	bl	80049f2 <LL_ADC_INJ_IsConversionOngoing>
 8004fdc:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004fe0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f040 81d9 	bne.w	800539c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004fea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f040 81d4 	bne.w	800539c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ffc:	d10f      	bne.n	800501e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2200      	movs	r2, #0
 8005008:	4619      	mov	r1, r3
 800500a:	f7ff fbd2 	bl	80047b2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff fb79 	bl	800470e <LL_ADC_SetSamplingTimeCommonConfig>
 800501c:	e00e      	b.n	800503c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6819      	ldr	r1, [r3, #0]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	461a      	mov	r2, r3
 800502c:	f7ff fbc1 	bl	80047b2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	2100      	movs	r1, #0
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff fb69 	bl	800470e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	695a      	ldr	r2, [r3, #20]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	08db      	lsrs	r3, r3, #3
 8005048:	f003 0303 	and.w	r3, r3, #3
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2b04      	cmp	r3, #4
 800505c:	d022      	beq.n	80050a4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	6919      	ldr	r1, [r3, #16]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800506e:	f7ff fac3 	bl	80045f8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	6919      	ldr	r1, [r3, #16]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	461a      	mov	r2, r3
 8005080:	f7ff fb0f 	bl	80046a2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6818      	ldr	r0, [r3, #0]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005090:	2b01      	cmp	r3, #1
 8005092:	d102      	bne.n	800509a <HAL_ADC_ConfigChannel+0x126>
 8005094:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005098:	e000      	b.n	800509c <HAL_ADC_ConfigChannel+0x128>
 800509a:	2300      	movs	r3, #0
 800509c:	461a      	mov	r2, r3
 800509e:	f7ff fb1b 	bl	80046d8 <LL_ADC_SetOffsetSaturation>
 80050a2:	e17b      	b.n	800539c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2100      	movs	r1, #0
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff fac8 	bl	8004640 <LL_ADC_GetOffsetChannel>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <HAL_ADC_ConfigChannel+0x15c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2100      	movs	r1, #0
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff fabd 	bl	8004640 <LL_ADC_GetOffsetChannel>
 80050c6:	4603      	mov	r3, r0
 80050c8:	0e9b      	lsrs	r3, r3, #26
 80050ca:	f003 021f 	and.w	r2, r3, #31
 80050ce:	e01e      	b.n	800510e <HAL_ADC_ConfigChannel+0x19a>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2100      	movs	r1, #0
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff fab2 	bl	8004640 <LL_ADC_GetOffsetChannel>
 80050dc:	4603      	mov	r3, r0
 80050de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80050e6:	fa93 f3a3 	rbit	r3, r3
 80050ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80050ee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80050f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80050f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80050fe:	2320      	movs	r3, #32
 8005100:	e004      	b.n	800510c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005106:	fab3 f383 	clz	r3, r3
 800510a:	b2db      	uxtb	r3, r3
 800510c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005116:	2b00      	cmp	r3, #0
 8005118:	d105      	bne.n	8005126 <HAL_ADC_ConfigChannel+0x1b2>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	0e9b      	lsrs	r3, r3, #26
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	e018      	b.n	8005158 <HAL_ADC_ConfigChannel+0x1e4>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800512e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005132:	fa93 f3a3 	rbit	r3, r3
 8005136:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800513a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800513e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005142:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800514a:	2320      	movs	r3, #32
 800514c:	e004      	b.n	8005158 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800514e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005152:	fab3 f383 	clz	r3, r3
 8005156:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005158:	429a      	cmp	r2, r3
 800515a:	d106      	bne.n	800516a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2200      	movs	r2, #0
 8005162:	2100      	movs	r1, #0
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff fa81 	bl	800466c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2101      	movs	r1, #1
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff fa65 	bl	8004640 <LL_ADC_GetOffsetChannel>
 8005176:	4603      	mov	r3, r0
 8005178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <HAL_ADC_ConfigChannel+0x222>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2101      	movs	r1, #1
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff fa5a 	bl	8004640 <LL_ADC_GetOffsetChannel>
 800518c:	4603      	mov	r3, r0
 800518e:	0e9b      	lsrs	r3, r3, #26
 8005190:	f003 021f 	and.w	r2, r3, #31
 8005194:	e01e      	b.n	80051d4 <HAL_ADC_ConfigChannel+0x260>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2101      	movs	r1, #1
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff fa4f 	bl	8004640 <LL_ADC_GetOffsetChannel>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80051ac:	fa93 f3a3 	rbit	r3, r3
 80051b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80051b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80051bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80051c4:	2320      	movs	r3, #32
 80051c6:	e004      	b.n	80051d2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80051c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80051cc:	fab3 f383 	clz	r3, r3
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d105      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x278>
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	0e9b      	lsrs	r3, r3, #26
 80051e6:	f003 031f 	and.w	r3, r3, #31
 80051ea:	e018      	b.n	800521e <HAL_ADC_ConfigChannel+0x2aa>
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051f8:	fa93 f3a3 	rbit	r3, r3
 80051fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005200:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005204:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005208:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005210:	2320      	movs	r3, #32
 8005212:	e004      	b.n	800521e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005214:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005218:	fab3 f383 	clz	r3, r3
 800521c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800521e:	429a      	cmp	r2, r3
 8005220:	d106      	bne.n	8005230 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2200      	movs	r2, #0
 8005228:	2101      	movs	r1, #1
 800522a:	4618      	mov	r0, r3
 800522c:	f7ff fa1e 	bl	800466c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2102      	movs	r1, #2
 8005236:	4618      	mov	r0, r3
 8005238:	f7ff fa02 	bl	8004640 <LL_ADC_GetOffsetChannel>
 800523c:	4603      	mov	r3, r0
 800523e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10a      	bne.n	800525c <HAL_ADC_ConfigChannel+0x2e8>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2102      	movs	r1, #2
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff f9f7 	bl	8004640 <LL_ADC_GetOffsetChannel>
 8005252:	4603      	mov	r3, r0
 8005254:	0e9b      	lsrs	r3, r3, #26
 8005256:	f003 021f 	and.w	r2, r3, #31
 800525a:	e01e      	b.n	800529a <HAL_ADC_ConfigChannel+0x326>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2102      	movs	r1, #2
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff f9ec 	bl	8004640 <LL_ADC_GetOffsetChannel>
 8005268:	4603      	mov	r3, r0
 800526a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800526e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005272:	fa93 f3a3 	rbit	r3, r3
 8005276:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800527a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800527e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005282:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800528a:	2320      	movs	r3, #32
 800528c:	e004      	b.n	8005298 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800528e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005292:	fab3 f383 	clz	r3, r3
 8005296:	b2db      	uxtb	r3, r3
 8005298:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d105      	bne.n	80052b2 <HAL_ADC_ConfigChannel+0x33e>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	0e9b      	lsrs	r3, r3, #26
 80052ac:	f003 031f 	and.w	r3, r3, #31
 80052b0:	e016      	b.n	80052e0 <HAL_ADC_ConfigChannel+0x36c>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80052be:	fa93 f3a3 	rbit	r3, r3
 80052c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80052c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80052c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80052ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80052d2:	2320      	movs	r3, #32
 80052d4:	e004      	b.n	80052e0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80052d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80052da:	fab3 f383 	clz	r3, r3
 80052de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d106      	bne.n	80052f2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2200      	movs	r2, #0
 80052ea:	2102      	movs	r1, #2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff f9bd 	bl	800466c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2103      	movs	r1, #3
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff f9a1 	bl	8004640 <LL_ADC_GetOffsetChannel>
 80052fe:	4603      	mov	r3, r0
 8005300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10a      	bne.n	800531e <HAL_ADC_ConfigChannel+0x3aa>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2103      	movs	r1, #3
 800530e:	4618      	mov	r0, r3
 8005310:	f7ff f996 	bl	8004640 <LL_ADC_GetOffsetChannel>
 8005314:	4603      	mov	r3, r0
 8005316:	0e9b      	lsrs	r3, r3, #26
 8005318:	f003 021f 	and.w	r2, r3, #31
 800531c:	e017      	b.n	800534e <HAL_ADC_ConfigChannel+0x3da>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2103      	movs	r1, #3
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff f98b 	bl	8004640 <LL_ADC_GetOffsetChannel>
 800532a:	4603      	mov	r3, r0
 800532c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005330:	fa93 f3a3 	rbit	r3, r3
 8005334:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005336:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005338:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800533a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005340:	2320      	movs	r3, #32
 8005342:	e003      	b.n	800534c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005344:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005346:	fab3 f383 	clz	r3, r3
 800534a:	b2db      	uxtb	r3, r3
 800534c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005356:	2b00      	cmp	r3, #0
 8005358:	d105      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x3f2>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	0e9b      	lsrs	r3, r3, #26
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	e011      	b.n	800538a <HAL_ADC_ConfigChannel+0x416>
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800536e:	fa93 f3a3 	rbit	r3, r3
 8005372:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005376:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005378:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800537e:	2320      	movs	r3, #32
 8005380:	e003      	b.n	800538a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005382:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005384:	fab3 f383 	clz	r3, r3
 8005388:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800538a:	429a      	cmp	r2, r3
 800538c:	d106      	bne.n	800539c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2200      	movs	r2, #0
 8005394:	2103      	movs	r1, #3
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff f968 	bl	800466c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff fad9 	bl	8004958 <LL_ADC_IsEnabled>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f040 813d 	bne.w	8005628 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6818      	ldr	r0, [r3, #0]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	6819      	ldr	r1, [r3, #0]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f7ff fa24 	bl	8004808 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4aa2      	ldr	r2, [pc, #648]	@ (8005650 <HAL_ADC_ConfigChannel+0x6dc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	f040 812e 	bne.w	8005628 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10b      	bne.n	80053f4 <HAL_ADC_ConfigChannel+0x480>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	0e9b      	lsrs	r3, r3, #26
 80053e2:	3301      	adds	r3, #1
 80053e4:	f003 031f 	and.w	r3, r3, #31
 80053e8:	2b09      	cmp	r3, #9
 80053ea:	bf94      	ite	ls
 80053ec:	2301      	movls	r3, #1
 80053ee:	2300      	movhi	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	e019      	b.n	8005428 <HAL_ADC_ConfigChannel+0x4b4>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053fc:	fa93 f3a3 	rbit	r3, r3
 8005400:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005402:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005404:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005406:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800540c:	2320      	movs	r3, #32
 800540e:	e003      	b.n	8005418 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005410:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005412:	fab3 f383 	clz	r3, r3
 8005416:	b2db      	uxtb	r3, r3
 8005418:	3301      	adds	r3, #1
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	2b09      	cmp	r3, #9
 8005420:	bf94      	ite	ls
 8005422:	2301      	movls	r3, #1
 8005424:	2300      	movhi	r3, #0
 8005426:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005428:	2b00      	cmp	r3, #0
 800542a:	d079      	beq.n	8005520 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005434:	2b00      	cmp	r3, #0
 8005436:	d107      	bne.n	8005448 <HAL_ADC_ConfigChannel+0x4d4>
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	0e9b      	lsrs	r3, r3, #26
 800543e:	3301      	adds	r3, #1
 8005440:	069b      	lsls	r3, r3, #26
 8005442:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005446:	e015      	b.n	8005474 <HAL_ADC_ConfigChannel+0x500>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005450:	fa93 f3a3 	rbit	r3, r3
 8005454:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005458:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800545a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005460:	2320      	movs	r3, #32
 8005462:	e003      	b.n	800546c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005466:	fab3 f383 	clz	r3, r3
 800546a:	b2db      	uxtb	r3, r3
 800546c:	3301      	adds	r3, #1
 800546e:	069b      	lsls	r3, r3, #26
 8005470:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800547c:	2b00      	cmp	r3, #0
 800547e:	d109      	bne.n	8005494 <HAL_ADC_ConfigChannel+0x520>
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	0e9b      	lsrs	r3, r3, #26
 8005486:	3301      	adds	r3, #1
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	2101      	movs	r1, #1
 800548e:	fa01 f303 	lsl.w	r3, r1, r3
 8005492:	e017      	b.n	80054c4 <HAL_ADC_ConfigChannel+0x550>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800549c:	fa93 f3a3 	rbit	r3, r3
 80054a0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80054a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80054a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80054ac:	2320      	movs	r3, #32
 80054ae:	e003      	b.n	80054b8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80054b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054b2:	fab3 f383 	clz	r3, r3
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	3301      	adds	r3, #1
 80054ba:	f003 031f 	and.w	r3, r3, #31
 80054be:	2101      	movs	r1, #1
 80054c0:	fa01 f303 	lsl.w	r3, r1, r3
 80054c4:	ea42 0103 	orr.w	r1, r2, r3
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <HAL_ADC_ConfigChannel+0x576>
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	0e9b      	lsrs	r3, r3, #26
 80054da:	3301      	adds	r3, #1
 80054dc:	f003 021f 	and.w	r2, r3, #31
 80054e0:	4613      	mov	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	4413      	add	r3, r2
 80054e6:	051b      	lsls	r3, r3, #20
 80054e8:	e018      	b.n	800551c <HAL_ADC_ConfigChannel+0x5a8>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f2:	fa93 f3a3 	rbit	r3, r3
 80054f6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80054f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80054fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d101      	bne.n	8005506 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005502:	2320      	movs	r3, #32
 8005504:	e003      	b.n	800550e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005508:	fab3 f383 	clz	r3, r3
 800550c:	b2db      	uxtb	r3, r3
 800550e:	3301      	adds	r3, #1
 8005510:	f003 021f 	and.w	r2, r3, #31
 8005514:	4613      	mov	r3, r2
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	4413      	add	r3, r2
 800551a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800551c:	430b      	orrs	r3, r1
 800551e:	e07e      	b.n	800561e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005528:	2b00      	cmp	r3, #0
 800552a:	d107      	bne.n	800553c <HAL_ADC_ConfigChannel+0x5c8>
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	0e9b      	lsrs	r3, r3, #26
 8005532:	3301      	adds	r3, #1
 8005534:	069b      	lsls	r3, r3, #26
 8005536:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800553a:	e015      	b.n	8005568 <HAL_ADC_ConfigChannel+0x5f4>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005544:	fa93 f3a3 	rbit	r3, r3
 8005548:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800554a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800554e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005554:	2320      	movs	r3, #32
 8005556:	e003      	b.n	8005560 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555a:	fab3 f383 	clz	r3, r3
 800555e:	b2db      	uxtb	r3, r3
 8005560:	3301      	adds	r3, #1
 8005562:	069b      	lsls	r3, r3, #26
 8005564:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005570:	2b00      	cmp	r3, #0
 8005572:	d109      	bne.n	8005588 <HAL_ADC_ConfigChannel+0x614>
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	0e9b      	lsrs	r3, r3, #26
 800557a:	3301      	adds	r3, #1
 800557c:	f003 031f 	and.w	r3, r3, #31
 8005580:	2101      	movs	r1, #1
 8005582:	fa01 f303 	lsl.w	r3, r1, r3
 8005586:	e017      	b.n	80055b8 <HAL_ADC_ConfigChannel+0x644>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	fa93 f3a3 	rbit	r3, r3
 8005594:	61fb      	str	r3, [r7, #28]
  return result;
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80055a0:	2320      	movs	r3, #32
 80055a2:	e003      	b.n	80055ac <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	fab3 f383 	clz	r3, r3
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	3301      	adds	r3, #1
 80055ae:	f003 031f 	and.w	r3, r3, #31
 80055b2:	2101      	movs	r1, #1
 80055b4:	fa01 f303 	lsl.w	r3, r1, r3
 80055b8:	ea42 0103 	orr.w	r1, r2, r3
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10d      	bne.n	80055e4 <HAL_ADC_ConfigChannel+0x670>
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	0e9b      	lsrs	r3, r3, #26
 80055ce:	3301      	adds	r3, #1
 80055d0:	f003 021f 	and.w	r2, r3, #31
 80055d4:	4613      	mov	r3, r2
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	4413      	add	r3, r2
 80055da:	3b1e      	subs	r3, #30
 80055dc:	051b      	lsls	r3, r3, #20
 80055de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80055e2:	e01b      	b.n	800561c <HAL_ADC_ConfigChannel+0x6a8>
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	fa93 f3a3 	rbit	r3, r3
 80055f0:	613b      	str	r3, [r7, #16]
  return result;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80055fc:	2320      	movs	r3, #32
 80055fe:	e003      	b.n	8005608 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	fab3 f383 	clz	r3, r3
 8005606:	b2db      	uxtb	r3, r3
 8005608:	3301      	adds	r3, #1
 800560a:	f003 021f 	and.w	r2, r3, #31
 800560e:	4613      	mov	r3, r2
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	4413      	add	r3, r2
 8005614:	3b1e      	subs	r3, #30
 8005616:	051b      	lsls	r3, r3, #20
 8005618:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800561c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005622:	4619      	mov	r1, r3
 8005624:	f7ff f8c5 	bl	80047b2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	4b09      	ldr	r3, [pc, #36]	@ (8005654 <HAL_ADC_ConfigChannel+0x6e0>)
 800562e:	4013      	ands	r3, r2
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 80be 	beq.w	80057b2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800563e:	d004      	beq.n	800564a <HAL_ADC_ConfigChannel+0x6d6>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a04      	ldr	r2, [pc, #16]	@ (8005658 <HAL_ADC_ConfigChannel+0x6e4>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d10a      	bne.n	8005660 <HAL_ADC_ConfigChannel+0x6ec>
 800564a:	4b04      	ldr	r3, [pc, #16]	@ (800565c <HAL_ADC_ConfigChannel+0x6e8>)
 800564c:	e009      	b.n	8005662 <HAL_ADC_ConfigChannel+0x6ee>
 800564e:	bf00      	nop
 8005650:	407f0000 	.word	0x407f0000
 8005654:	80080000 	.word	0x80080000
 8005658:	50000100 	.word	0x50000100
 800565c:	50000300 	.word	0x50000300
 8005660:	4b59      	ldr	r3, [pc, #356]	@ (80057c8 <HAL_ADC_ConfigChannel+0x854>)
 8005662:	4618      	mov	r0, r3
 8005664:	f7fe ffba 	bl	80045dc <LL_ADC_GetCommonPathInternalCh>
 8005668:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a56      	ldr	r2, [pc, #344]	@ (80057cc <HAL_ADC_ConfigChannel+0x858>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d004      	beq.n	8005680 <HAL_ADC_ConfigChannel+0x70c>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a55      	ldr	r2, [pc, #340]	@ (80057d0 <HAL_ADC_ConfigChannel+0x85c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d13a      	bne.n	80056f6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005680:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005684:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d134      	bne.n	80056f6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005694:	d005      	beq.n	80056a2 <HAL_ADC_ConfigChannel+0x72e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a4e      	ldr	r2, [pc, #312]	@ (80057d4 <HAL_ADC_ConfigChannel+0x860>)
 800569c:	4293      	cmp	r3, r2
 800569e:	f040 8085 	bne.w	80057ac <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056aa:	d004      	beq.n	80056b6 <HAL_ADC_ConfigChannel+0x742>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a49      	ldr	r2, [pc, #292]	@ (80057d8 <HAL_ADC_ConfigChannel+0x864>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d101      	bne.n	80056ba <HAL_ADC_ConfigChannel+0x746>
 80056b6:	4a49      	ldr	r2, [pc, #292]	@ (80057dc <HAL_ADC_ConfigChannel+0x868>)
 80056b8:	e000      	b.n	80056bc <HAL_ADC_ConfigChannel+0x748>
 80056ba:	4a43      	ldr	r2, [pc, #268]	@ (80057c8 <HAL_ADC_ConfigChannel+0x854>)
 80056bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80056c0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80056c4:	4619      	mov	r1, r3
 80056c6:	4610      	mov	r0, r2
 80056c8:	f7fe ff75 	bl	80045b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056cc:	4b44      	ldr	r3, [pc, #272]	@ (80057e0 <HAL_ADC_ConfigChannel+0x86c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	099b      	lsrs	r3, r3, #6
 80056d2:	4a44      	ldr	r2, [pc, #272]	@ (80057e4 <HAL_ADC_ConfigChannel+0x870>)
 80056d4:	fba2 2303 	umull	r2, r3, r2, r3
 80056d8:	099b      	lsrs	r3, r3, #6
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	4613      	mov	r3, r2
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80056e6:	e002      	b.n	80056ee <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1f9      	bne.n	80056e8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056f4:	e05a      	b.n	80057ac <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a3b      	ldr	r2, [pc, #236]	@ (80057e8 <HAL_ADC_ConfigChannel+0x874>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d125      	bne.n	800574c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005700:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005704:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d11f      	bne.n	800574c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a31      	ldr	r2, [pc, #196]	@ (80057d8 <HAL_ADC_ConfigChannel+0x864>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d104      	bne.n	8005720 <HAL_ADC_ConfigChannel+0x7ac>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a34      	ldr	r2, [pc, #208]	@ (80057ec <HAL_ADC_ConfigChannel+0x878>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d047      	beq.n	80057b0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005728:	d004      	beq.n	8005734 <HAL_ADC_ConfigChannel+0x7c0>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a2a      	ldr	r2, [pc, #168]	@ (80057d8 <HAL_ADC_ConfigChannel+0x864>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d101      	bne.n	8005738 <HAL_ADC_ConfigChannel+0x7c4>
 8005734:	4a29      	ldr	r2, [pc, #164]	@ (80057dc <HAL_ADC_ConfigChannel+0x868>)
 8005736:	e000      	b.n	800573a <HAL_ADC_ConfigChannel+0x7c6>
 8005738:	4a23      	ldr	r2, [pc, #140]	@ (80057c8 <HAL_ADC_ConfigChannel+0x854>)
 800573a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800573e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005742:	4619      	mov	r1, r3
 8005744:	4610      	mov	r0, r2
 8005746:	f7fe ff36 	bl	80045b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800574a:	e031      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a27      	ldr	r2, [pc, #156]	@ (80057f0 <HAL_ADC_ConfigChannel+0x87c>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d12d      	bne.n	80057b2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005756:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800575a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d127      	bne.n	80057b2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1c      	ldr	r2, [pc, #112]	@ (80057d8 <HAL_ADC_ConfigChannel+0x864>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d022      	beq.n	80057b2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005774:	d004      	beq.n	8005780 <HAL_ADC_ConfigChannel+0x80c>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a17      	ldr	r2, [pc, #92]	@ (80057d8 <HAL_ADC_ConfigChannel+0x864>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d101      	bne.n	8005784 <HAL_ADC_ConfigChannel+0x810>
 8005780:	4a16      	ldr	r2, [pc, #88]	@ (80057dc <HAL_ADC_ConfigChannel+0x868>)
 8005782:	e000      	b.n	8005786 <HAL_ADC_ConfigChannel+0x812>
 8005784:	4a10      	ldr	r2, [pc, #64]	@ (80057c8 <HAL_ADC_ConfigChannel+0x854>)
 8005786:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800578a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800578e:	4619      	mov	r1, r3
 8005790:	4610      	mov	r0, r2
 8005792:	f7fe ff10 	bl	80045b6 <LL_ADC_SetCommonPathInternalCh>
 8005796:	e00c      	b.n	80057b2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579c:	f043 0220 	orr.w	r2, r3, #32
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80057aa:	e002      	b.n	80057b2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057ac:	bf00      	nop
 80057ae:	e000      	b.n	80057b2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80057ba:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80057be:	4618      	mov	r0, r3
 80057c0:	37d8      	adds	r7, #216	@ 0xd8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	50000700 	.word	0x50000700
 80057cc:	c3210000 	.word	0xc3210000
 80057d0:	90c00010 	.word	0x90c00010
 80057d4:	50000600 	.word	0x50000600
 80057d8:	50000100 	.word	0x50000100
 80057dc:	50000300 	.word	0x50000300
 80057e0:	20000158 	.word	0x20000158
 80057e4:	053e2d63 	.word	0x053e2d63
 80057e8:	c7520000 	.word	0xc7520000
 80057ec:	50000500 	.word	0x50000500
 80057f0:	cb840000 	.word	0xcb840000

080057f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4618      	mov	r0, r3
 8005806:	f7ff f8a7 	bl	8004958 <LL_ADC_IsEnabled>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d176      	bne.n	80058fe <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	4b3c      	ldr	r3, [pc, #240]	@ (8005908 <ADC_Enable+0x114>)
 8005818:	4013      	ands	r3, r2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00d      	beq.n	800583a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005822:	f043 0210 	orr.w	r2, r3, #16
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800582e:	f043 0201 	orr.w	r2, r3, #1
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e062      	b.n	8005900 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff f862 	bl	8004908 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800584c:	d004      	beq.n	8005858 <ADC_Enable+0x64>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a2e      	ldr	r2, [pc, #184]	@ (800590c <ADC_Enable+0x118>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d101      	bne.n	800585c <ADC_Enable+0x68>
 8005858:	4b2d      	ldr	r3, [pc, #180]	@ (8005910 <ADC_Enable+0x11c>)
 800585a:	e000      	b.n	800585e <ADC_Enable+0x6a>
 800585c:	4b2d      	ldr	r3, [pc, #180]	@ (8005914 <ADC_Enable+0x120>)
 800585e:	4618      	mov	r0, r3
 8005860:	f7fe febc 	bl	80045dc <LL_ADC_GetCommonPathInternalCh>
 8005864:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005866:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800586a:	2b00      	cmp	r3, #0
 800586c:	d013      	beq.n	8005896 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800586e:	4b2a      	ldr	r3, [pc, #168]	@ (8005918 <ADC_Enable+0x124>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	099b      	lsrs	r3, r3, #6
 8005874:	4a29      	ldr	r2, [pc, #164]	@ (800591c <ADC_Enable+0x128>)
 8005876:	fba2 2303 	umull	r2, r3, r2, r3
 800587a:	099b      	lsrs	r3, r3, #6
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	4613      	mov	r3, r2
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005888:	e002      	b.n	8005890 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	3b01      	subs	r3, #1
 800588e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1f9      	bne.n	800588a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005896:	f7fe fe6f 	bl	8004578 <HAL_GetTick>
 800589a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800589c:	e028      	b.n	80058f0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff f858 	bl	8004958 <LL_ADC_IsEnabled>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d104      	bne.n	80058b8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff f828 	bl	8004908 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80058b8:	f7fe fe5e 	bl	8004578 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d914      	bls.n	80058f0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d00d      	beq.n	80058f0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d8:	f043 0210 	orr.w	r2, r3, #16
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058e4:	f043 0201 	orr.w	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e007      	b.n	8005900 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d1cf      	bne.n	800589e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	8000003f 	.word	0x8000003f
 800590c:	50000100 	.word	0x50000100
 8005910:	50000300 	.word	0x50000300
 8005914:	50000700 	.word	0x50000700
 8005918:	20000158 	.word	0x20000158
 800591c:	053e2d63 	.word	0x053e2d63

08005920 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff f826 	bl	800497e <LL_ADC_IsDisableOngoing>
 8005932:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4618      	mov	r0, r3
 800593a:	f7ff f80d 	bl	8004958 <LL_ADC_IsEnabled>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d047      	beq.n	80059d4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d144      	bne.n	80059d4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f003 030d 	and.w	r3, r3, #13
 8005954:	2b01      	cmp	r3, #1
 8005956:	d10c      	bne.n	8005972 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4618      	mov	r0, r3
 800595e:	f7fe ffe7 	bl	8004930 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2203      	movs	r2, #3
 8005968:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800596a:	f7fe fe05 	bl	8004578 <HAL_GetTick>
 800596e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005970:	e029      	b.n	80059c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005976:	f043 0210 	orr.w	r2, r3, #16
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005982:	f043 0201 	orr.w	r2, r3, #1
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e023      	b.n	80059d6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800598e:	f7fe fdf3 	bl	8004578 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d914      	bls.n	80059c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00d      	beq.n	80059c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ae:	f043 0210 	orr.w	r2, r3, #16
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ba:	f043 0201 	orr.w	r2, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e007      	b.n	80059d6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1dc      	bne.n	800598e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d14b      	bne.n	8005a90 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0308 	and.w	r3, r3, #8
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d021      	beq.n	8005a56 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fe fe8c 	bl	8004734 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d032      	beq.n	8005a88 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d12b      	bne.n	8005a88 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a34:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11f      	bne.n	8005a88 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a4c:	f043 0201 	orr.w	r2, r3, #1
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a54:	e018      	b.n	8005a88 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0302 	and.w	r3, r3, #2
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d111      	bne.n	8005a88 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a68:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d105      	bne.n	8005a88 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a80:	f043 0201 	orr.w	r2, r3, #1
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f7ff fa55 	bl	8004f38 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005a8e:	e00e      	b.n	8005aae <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d003      	beq.n	8005aa4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f7ff fa5f 	bl	8004f60 <HAL_ADC_ErrorCallback>
}
 8005aa2:	e004      	b.n	8005aae <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	4798      	blx	r3
}
 8005aae:	bf00      	nop
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b084      	sub	sp, #16
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f7ff fa41 	bl	8004f4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005aca:	bf00      	nop
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af0:	f043 0204 	orr.w	r2, r3, #4
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f7ff fa31 	bl	8004f60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005afe:	bf00      	nop
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <LL_ADC_IsEnabled>:
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d101      	bne.n	8005b1e <LL_ADC_IsEnabled+0x18>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <LL_ADC_IsEnabled+0x1a>
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <LL_ADC_StartCalibration>:
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005b3e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	609a      	str	r2, [r3, #8]
}
 8005b52:	bf00      	nop
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <LL_ADC_IsCalibrationOnGoing>:
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b083      	sub	sp, #12
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b72:	d101      	bne.n	8005b78 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <LL_ADC_REG_IsConversionOngoing>:
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 0304 	and.w	r3, r3, #4
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d101      	bne.n	8005b9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e000      	b.n	8005ba0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d101      	bne.n	8005bc8 <HAL_ADCEx_Calibration_Start+0x1c>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	e04d      	b.n	8005c64 <HAL_ADCEx_Calibration_Start+0xb8>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff fea5 	bl	8005920 <ADC_Disable>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005bda:	7bfb      	ldrb	r3, [r7, #15]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d136      	bne.n	8005c4e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005be8:	f023 0302 	bic.w	r3, r3, #2
 8005bec:	f043 0202 	orr.w	r2, r3, #2
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7ff ff96 	bl	8005b2c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005c00:	e014      	b.n	8005c2c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	3301      	adds	r3, #1
 8005c06:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4a18      	ldr	r2, [pc, #96]	@ (8005c6c <HAL_ADCEx_Calibration_Start+0xc0>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d90d      	bls.n	8005c2c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c14:	f023 0312 	bic.w	r3, r3, #18
 8005c18:	f043 0210 	orr.w	r2, r3, #16
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e01b      	b.n	8005c64 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff ff94 	bl	8005b5e <LL_ADC_IsCalibrationOnGoing>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e2      	bne.n	8005c02 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c40:	f023 0303 	bic.w	r3, r3, #3
 8005c44:	f043 0201 	orr.w	r2, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c4c:	e005      	b.n	8005c5a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c52:	f043 0210 	orr.w	r2, r3, #16
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	0004de01 	.word	0x0004de01

08005c70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005c70:	b590      	push	{r4, r7, lr}
 8005c72:	b0a1      	sub	sp, #132	@ 0x84
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e0e7      	b.n	8005e5e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005c96:	2300      	movs	r3, #0
 8005c98:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ca6:	d102      	bne.n	8005cae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005ca8:	4b6f      	ldr	r3, [pc, #444]	@ (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005caa:	60bb      	str	r3, [r7, #8]
 8005cac:	e009      	b.n	8005cc2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a6e      	ldr	r2, [pc, #440]	@ (8005e6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d102      	bne.n	8005cbe <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005cb8:	4b6d      	ldr	r3, [pc, #436]	@ (8005e70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005cba:	60bb      	str	r3, [r7, #8]
 8005cbc:	e001      	b.n	8005cc2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d10b      	bne.n	8005ce0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ccc:	f043 0220 	orr.w	r2, r3, #32
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e0be      	b.n	8005e5e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7ff ff4f 	bl	8005b86 <LL_ADC_REG_IsConversionOngoing>
 8005ce8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f7ff ff49 	bl	8005b86 <LL_ADC_REG_IsConversionOngoing>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f040 80a0 	bne.w	8005e3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005cfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f040 809c 	bne.w	8005e3c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d0c:	d004      	beq.n	8005d18 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a55      	ldr	r2, [pc, #340]	@ (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d101      	bne.n	8005d1c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005d18:	4b56      	ldr	r3, [pc, #344]	@ (8005e74 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005d1a:	e000      	b.n	8005d1e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005d1c:	4b56      	ldr	r3, [pc, #344]	@ (8005e78 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005d1e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d04b      	beq.n	8005dc0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005d28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	6859      	ldr	r1, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005d3a:	035b      	lsls	r3, r3, #13
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d4c:	d004      	beq.n	8005d58 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a45      	ldr	r2, [pc, #276]	@ (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d10f      	bne.n	8005d78 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005d58:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005d5c:	f7ff fed3 	bl	8005b06 <LL_ADC_IsEnabled>
 8005d60:	4604      	mov	r4, r0
 8005d62:	4841      	ldr	r0, [pc, #260]	@ (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005d64:	f7ff fecf 	bl	8005b06 <LL_ADC_IsEnabled>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	4323      	orrs	r3, r4
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	bf0c      	ite	eq
 8005d70:	2301      	moveq	r3, #1
 8005d72:	2300      	movne	r3, #0
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	e012      	b.n	8005d9e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005d78:	483c      	ldr	r0, [pc, #240]	@ (8005e6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005d7a:	f7ff fec4 	bl	8005b06 <LL_ADC_IsEnabled>
 8005d7e:	4604      	mov	r4, r0
 8005d80:	483b      	ldr	r0, [pc, #236]	@ (8005e70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005d82:	f7ff fec0 	bl	8005b06 <LL_ADC_IsEnabled>
 8005d86:	4603      	mov	r3, r0
 8005d88:	431c      	orrs	r4, r3
 8005d8a:	483c      	ldr	r0, [pc, #240]	@ (8005e7c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005d8c:	f7ff febb 	bl	8005b06 <LL_ADC_IsEnabled>
 8005d90:	4603      	mov	r3, r0
 8005d92:	4323      	orrs	r3, r4
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	bf0c      	ite	eq
 8005d98:	2301      	moveq	r3, #1
 8005d9a:	2300      	movne	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d056      	beq.n	8005e50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005da2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005daa:	f023 030f 	bic.w	r3, r3, #15
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	6811      	ldr	r1, [r2, #0]
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	6892      	ldr	r2, [r2, #8]
 8005db6:	430a      	orrs	r2, r1
 8005db8:	431a      	orrs	r2, r3
 8005dba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dbc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005dbe:	e047      	b.n	8005e50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005dc0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005dc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005dca:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005dd4:	d004      	beq.n	8005de0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a23      	ldr	r2, [pc, #140]	@ (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d10f      	bne.n	8005e00 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005de0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005de4:	f7ff fe8f 	bl	8005b06 <LL_ADC_IsEnabled>
 8005de8:	4604      	mov	r4, r0
 8005dea:	481f      	ldr	r0, [pc, #124]	@ (8005e68 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005dec:	f7ff fe8b 	bl	8005b06 <LL_ADC_IsEnabled>
 8005df0:	4603      	mov	r3, r0
 8005df2:	4323      	orrs	r3, r4
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	bf0c      	ite	eq
 8005df8:	2301      	moveq	r3, #1
 8005dfa:	2300      	movne	r3, #0
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	e012      	b.n	8005e26 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005e00:	481a      	ldr	r0, [pc, #104]	@ (8005e6c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005e02:	f7ff fe80 	bl	8005b06 <LL_ADC_IsEnabled>
 8005e06:	4604      	mov	r4, r0
 8005e08:	4819      	ldr	r0, [pc, #100]	@ (8005e70 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005e0a:	f7ff fe7c 	bl	8005b06 <LL_ADC_IsEnabled>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	431c      	orrs	r4, r3
 8005e12:	481a      	ldr	r0, [pc, #104]	@ (8005e7c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005e14:	f7ff fe77 	bl	8005b06 <LL_ADC_IsEnabled>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	4323      	orrs	r3, r4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	bf0c      	ite	eq
 8005e20:	2301      	moveq	r3, #1
 8005e22:	2300      	movne	r3, #0
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d012      	beq.n	8005e50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005e2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005e32:	f023 030f 	bic.w	r3, r3, #15
 8005e36:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005e38:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005e3a:	e009      	b.n	8005e50 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e40:	f043 0220 	orr.w	r2, r3, #32
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005e4e:	e000      	b.n	8005e52 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005e50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005e5a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3784      	adds	r7, #132	@ 0x84
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd90      	pop	{r4, r7, pc}
 8005e66:	bf00      	nop
 8005e68:	50000100 	.word	0x50000100
 8005e6c:	50000400 	.word	0x50000400
 8005e70:	50000500 	.word	0x50000500
 8005e74:	50000300 	.word	0x50000300
 8005e78:	50000700 	.word	0x50000700
 8005e7c:	50000600 	.word	0x50000600

08005e80 <__NVIC_SetPriorityGrouping>:
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e90:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ea8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005eb2:	4a04      	ldr	r2, [pc, #16]	@ (8005ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	60d3      	str	r3, [r2, #12]
}
 8005eb8:	bf00      	nop
 8005eba:	3714      	adds	r7, #20
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	e000ed00 	.word	0xe000ed00

08005ec8 <__NVIC_GetPriorityGrouping>:
{
 8005ec8:	b480      	push	{r7}
 8005eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ecc:	4b04      	ldr	r3, [pc, #16]	@ (8005ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	0a1b      	lsrs	r3, r3, #8
 8005ed2:	f003 0307 	and.w	r3, r3, #7
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	e000ed00 	.word	0xe000ed00

08005ee4 <__NVIC_EnableIRQ>:
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	4603      	mov	r3, r0
 8005eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	db0b      	blt.n	8005f0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	f003 021f 	and.w	r2, r3, #31
 8005efc:	4907      	ldr	r1, [pc, #28]	@ (8005f1c <__NVIC_EnableIRQ+0x38>)
 8005efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f02:	095b      	lsrs	r3, r3, #5
 8005f04:	2001      	movs	r0, #1
 8005f06:	fa00 f202 	lsl.w	r2, r0, r2
 8005f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	e000e100 	.word	0xe000e100

08005f20 <__NVIC_SetPriority>:
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	6039      	str	r1, [r7, #0]
 8005f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	db0a      	blt.n	8005f4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	490c      	ldr	r1, [pc, #48]	@ (8005f6c <__NVIC_SetPriority+0x4c>)
 8005f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f3e:	0112      	lsls	r2, r2, #4
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	440b      	add	r3, r1
 8005f44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005f48:	e00a      	b.n	8005f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	4908      	ldr	r1, [pc, #32]	@ (8005f70 <__NVIC_SetPriority+0x50>)
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	f003 030f 	and.w	r3, r3, #15
 8005f56:	3b04      	subs	r3, #4
 8005f58:	0112      	lsls	r2, r2, #4
 8005f5a:	b2d2      	uxtb	r2, r2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	761a      	strb	r2, [r3, #24]
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr
 8005f6c:	e000e100 	.word	0xe000e100
 8005f70:	e000ed00 	.word	0xe000ed00

08005f74 <NVIC_EncodePriority>:
{
 8005f74:	b480      	push	{r7}
 8005f76:	b089      	sub	sp, #36	@ 0x24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	f1c3 0307 	rsb	r3, r3, #7
 8005f8e:	2b04      	cmp	r3, #4
 8005f90:	bf28      	it	cs
 8005f92:	2304      	movcs	r3, #4
 8005f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	3304      	adds	r3, #4
 8005f9a:	2b06      	cmp	r3, #6
 8005f9c:	d902      	bls.n	8005fa4 <NVIC_EncodePriority+0x30>
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	3b03      	subs	r3, #3
 8005fa2:	e000      	b.n	8005fa6 <NVIC_EncodePriority+0x32>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb2:	43da      	mvns	r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	401a      	ands	r2, r3
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc6:	43d9      	mvns	r1, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fcc:	4313      	orrs	r3, r2
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3724      	adds	r7, #36	@ 0x24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
	...

08005fdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fec:	d301      	bcc.n	8005ff2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e00f      	b.n	8006012 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800601c <SysTick_Config+0x40>)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ffa:	210f      	movs	r1, #15
 8005ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8006000:	f7ff ff8e 	bl	8005f20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006004:	4b05      	ldr	r3, [pc, #20]	@ (800601c <SysTick_Config+0x40>)
 8006006:	2200      	movs	r2, #0
 8006008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800600a:	4b04      	ldr	r3, [pc, #16]	@ (800601c <SysTick_Config+0x40>)
 800600c:	2207      	movs	r2, #7
 800600e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	e000e010 	.word	0xe000e010

08006020 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff ff29 	bl	8005e80 <__NVIC_SetPriorityGrouping>
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b086      	sub	sp, #24
 800603a:	af00      	add	r7, sp, #0
 800603c:	4603      	mov	r3, r0
 800603e:	60b9      	str	r1, [r7, #8]
 8006040:	607a      	str	r2, [r7, #4]
 8006042:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006044:	f7ff ff40 	bl	8005ec8 <__NVIC_GetPriorityGrouping>
 8006048:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	6978      	ldr	r0, [r7, #20]
 8006050:	f7ff ff90 	bl	8005f74 <NVIC_EncodePriority>
 8006054:	4602      	mov	r2, r0
 8006056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800605a:	4611      	mov	r1, r2
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff ff5f 	bl	8005f20 <__NVIC_SetPriority>
}
 8006062:	bf00      	nop
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b082      	sub	sp, #8
 800606e:	af00      	add	r7, sp, #0
 8006070:	4603      	mov	r3, r0
 8006072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff ff33 	bl	8005ee4 <__NVIC_EnableIRQ>
}
 800607e:	bf00      	nop
 8006080:	3708      	adds	r7, #8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff ffa4 	bl	8005fdc <SysTick_Config>
 8006094:	4603      	mov	r3, r0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
	...

080060a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e08d      	b.n	80061ce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	4b47      	ldr	r3, [pc, #284]	@ (80061d8 <HAL_DMA_Init+0x138>)
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d80f      	bhi.n	80060de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	4b45      	ldr	r3, [pc, #276]	@ (80061dc <HAL_DMA_Init+0x13c>)
 80060c6:	4413      	add	r3, r2
 80060c8:	4a45      	ldr	r2, [pc, #276]	@ (80061e0 <HAL_DMA_Init+0x140>)
 80060ca:	fba2 2303 	umull	r2, r3, r2, r3
 80060ce:	091b      	lsrs	r3, r3, #4
 80060d0:	009a      	lsls	r2, r3, #2
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a42      	ldr	r2, [pc, #264]	@ (80061e4 <HAL_DMA_Init+0x144>)
 80060da:	641a      	str	r2, [r3, #64]	@ 0x40
 80060dc:	e00e      	b.n	80060fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	4b40      	ldr	r3, [pc, #256]	@ (80061e8 <HAL_DMA_Init+0x148>)
 80060e6:	4413      	add	r3, r2
 80060e8:	4a3d      	ldr	r2, [pc, #244]	@ (80061e0 <HAL_DMA_Init+0x140>)
 80060ea:	fba2 2303 	umull	r2, r3, r2, r3
 80060ee:	091b      	lsrs	r3, r3, #4
 80060f0:	009a      	lsls	r2, r3, #2
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a3c      	ldr	r2, [pc, #240]	@ (80061ec <HAL_DMA_Init+0x14c>)
 80060fa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006116:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006120:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800612c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006138:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 fa76 	bl	8006640 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800615c:	d102      	bne.n	8006164 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800616c:	b2d2      	uxtb	r2, r2
 800616e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006178:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d010      	beq.n	80061a4 <HAL_DMA_Init+0x104>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	2b04      	cmp	r3, #4
 8006188:	d80c      	bhi.n	80061a4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 fa96 	bl	80066bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80061a0:	605a      	str	r2, [r3, #4]
 80061a2:	e008      	b.n	80061b6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	40020407 	.word	0x40020407
 80061dc:	bffdfff8 	.word	0xbffdfff8
 80061e0:	cccccccd 	.word	0xcccccccd
 80061e4:	40020000 	.word	0x40020000
 80061e8:	bffdfbf8 	.word	0xbffdfbf8
 80061ec:	40020400 	.word	0x40020400

080061f0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_DMA_Start_IT+0x20>
 800620c:	2302      	movs	r3, #2
 800620e:	e066      	b.n	80062de <HAL_DMA_Start_IT+0xee>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b01      	cmp	r3, #1
 8006222:	d155      	bne.n	80062d0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0201 	bic.w	r2, r2, #1
 8006240:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	68b9      	ldr	r1, [r7, #8]
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 f9bb 	bl	80065c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006252:	2b00      	cmp	r3, #0
 8006254:	d008      	beq.n	8006268 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 020e 	orr.w	r2, r2, #14
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	e00f      	b.n	8006288 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0204 	bic.w	r2, r2, #4
 8006276:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 020a 	orr.w	r2, r2, #10
 8006286:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d007      	beq.n	80062a6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062a4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d007      	beq.n	80062be <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80062bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f042 0201 	orr.w	r2, r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	e005      	b.n	80062dc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80062d8:	2302      	movs	r3, #2
 80062da:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b085      	sub	sp, #20
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062ee:	2300      	movs	r3, #0
 80062f0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d005      	beq.n	800630a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2204      	movs	r2, #4
 8006302:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
 8006308:	e037      	b.n	800637a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f022 020e 	bic.w	r2, r2, #14
 8006318:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006324:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006328:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0201 	bic.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633e:	f003 021f 	and.w	r2, r3, #31
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006346:	2101      	movs	r1, #1
 8006348:	fa01 f202 	lsl.w	r2, r1, r2
 800634c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006356:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00c      	beq.n	800637a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800636e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006378:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800638a:	7bfb      	ldrb	r3, [r7, #15]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063a0:	2300      	movs	r3, #0
 80063a2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d00d      	beq.n	80063cc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2204      	movs	r2, #4
 80063b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	73fb      	strb	r3, [r7, #15]
 80063ca:	e047      	b.n	800645c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f022 020e 	bic.w	r2, r2, #14
 80063da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 0201 	bic.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80063fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006400:	f003 021f 	and.w	r2, r3, #31
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006408:	2101      	movs	r1, #1
 800640a:	fa01 f202 	lsl.w	r2, r1, r2
 800640e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006418:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00c      	beq.n	800643c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800642c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006430:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800643a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	4798      	blx	r3
    }
  }
  return status;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006482:	f003 031f 	and.w	r3, r3, #31
 8006486:	2204      	movs	r2, #4
 8006488:	409a      	lsls	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4013      	ands	r3, r2
 800648e:	2b00      	cmp	r3, #0
 8006490:	d026      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x7a>
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d021      	beq.n	80064e0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d107      	bne.n	80064ba <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 0204 	bic.w	r2, r2, #4
 80064b8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064be:	f003 021f 	and.w	r2, r3, #31
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064c6:	2104      	movs	r1, #4
 80064c8:	fa01 f202 	lsl.w	r2, r1, r2
 80064cc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d071      	beq.n	80065ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80064de:	e06c      	b.n	80065ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064e4:	f003 031f 	and.w	r3, r3, #31
 80064e8:	2202      	movs	r2, #2
 80064ea:	409a      	lsls	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4013      	ands	r3, r2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d02e      	beq.n	8006552 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f003 0302 	and.w	r3, r3, #2
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d029      	beq.n	8006552 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0320 	and.w	r3, r3, #32
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10b      	bne.n	8006524 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f022 020a 	bic.w	r2, r2, #10
 800651a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006528:	f003 021f 	and.w	r2, r3, #31
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006530:	2102      	movs	r1, #2
 8006532:	fa01 f202 	lsl.w	r2, r1, r2
 8006536:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006544:	2b00      	cmp	r3, #0
 8006546:	d038      	beq.n	80065ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006550:	e033      	b.n	80065ba <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006556:	f003 031f 	and.w	r3, r3, #31
 800655a:	2208      	movs	r2, #8
 800655c:	409a      	lsls	r2, r3
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4013      	ands	r3, r2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d02a      	beq.n	80065bc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	f003 0308 	and.w	r3, r3, #8
 800656c:	2b00      	cmp	r3, #0
 800656e:	d025      	beq.n	80065bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 020e 	bic.w	r2, r2, #14
 800657e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006584:	f003 021f 	and.w	r2, r3, #31
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658c:	2101      	movs	r1, #1
 800658e:	fa01 f202 	lsl.w	r2, r1, r2
 8006592:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d004      	beq.n	80065bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80065ba:	bf00      	nop
 80065bc:	bf00      	nop
}
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
 80065d0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80065da:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d004      	beq.n	80065ee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80065ec:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f2:	f003 021f 	and.w	r2, r3, #31
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fa:	2101      	movs	r1, #1
 80065fc:	fa01 f202 	lsl.w	r2, r1, r2
 8006600:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	2b10      	cmp	r3, #16
 8006610:	d108      	bne.n	8006624 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006622:	e007      	b.n	8006634 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	60da      	str	r2, [r3, #12]
}
 8006634:	bf00      	nop
 8006636:	3714      	adds	r7, #20
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	4b16      	ldr	r3, [pc, #88]	@ (80066a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006650:	429a      	cmp	r2, r3
 8006652:	d802      	bhi.n	800665a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006654:	4b15      	ldr	r3, [pc, #84]	@ (80066ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	e001      	b.n	800665e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800665a:	4b15      	ldr	r3, [pc, #84]	@ (80066b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800665c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	b2db      	uxtb	r3, r3
 8006668:	3b08      	subs	r3, #8
 800666a:	4a12      	ldr	r2, [pc, #72]	@ (80066b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800666c:	fba2 2303 	umull	r2, r3, r2, r3
 8006670:	091b      	lsrs	r3, r3, #4
 8006672:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006678:	089b      	lsrs	r3, r3, #2
 800667a:	009a      	lsls	r2, r3, #2
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	4413      	add	r3, r2
 8006680:	461a      	mov	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a0b      	ldr	r2, [pc, #44]	@ (80066b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800668a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f003 031f 	and.w	r3, r3, #31
 8006692:	2201      	movs	r2, #1
 8006694:	409a      	lsls	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800669a:	bf00      	nop
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	40020407 	.word	0x40020407
 80066ac:	40020800 	.word	0x40020800
 80066b0:	40020820 	.word	0x40020820
 80066b4:	cccccccd 	.word	0xcccccccd
 80066b8:	40020880 	.word	0x40020880

080066bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4b0b      	ldr	r3, [pc, #44]	@ (80066fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80066d0:	4413      	add	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	461a      	mov	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a08      	ldr	r2, [pc, #32]	@ (8006700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80066de:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	3b01      	subs	r3, #1
 80066e4:	f003 031f 	and.w	r3, r3, #31
 80066e8:	2201      	movs	r2, #1
 80066ea:	409a      	lsls	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80066f0:	bf00      	nop
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	1000823f 	.word	0x1000823f
 8006700:	40020940 	.word	0x40020940

08006704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800670e:	2300      	movs	r3, #0
 8006710:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006712:	e15a      	b.n	80069ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	2101      	movs	r1, #1
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	fa01 f303 	lsl.w	r3, r1, r3
 8006720:	4013      	ands	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	f000 814c 	beq.w	80069c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f003 0303 	and.w	r3, r3, #3
 8006734:	2b01      	cmp	r3, #1
 8006736:	d005      	beq.n	8006744 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006740:	2b02      	cmp	r3, #2
 8006742:	d130      	bne.n	80067a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	2203      	movs	r2, #3
 8006750:	fa02 f303 	lsl.w	r3, r2, r3
 8006754:	43db      	mvns	r3, r3
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4013      	ands	r3, r2
 800675a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	68da      	ldr	r2, [r3, #12]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	005b      	lsls	r3, r3, #1
 8006764:	fa02 f303 	lsl.w	r3, r2, r3
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	4313      	orrs	r3, r2
 800676c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800677a:	2201      	movs	r2, #1
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	fa02 f303 	lsl.w	r3, r2, r3
 8006782:	43db      	mvns	r3, r3
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	4013      	ands	r3, r2
 8006788:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	091b      	lsrs	r3, r3, #4
 8006790:	f003 0201 	and.w	r2, r3, #1
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	fa02 f303 	lsl.w	r3, r2, r3
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d017      	beq.n	80067e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	2203      	movs	r2, #3
 80067be:	fa02 f303 	lsl.w	r3, r2, r3
 80067c2:	43db      	mvns	r3, r3
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	4013      	ands	r3, r2
 80067c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	689a      	ldr	r2, [r3, #8]
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	005b      	lsls	r3, r3, #1
 80067d2:	fa02 f303 	lsl.w	r3, r2, r3
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	4313      	orrs	r3, r2
 80067da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f003 0303 	and.w	r3, r3, #3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d123      	bne.n	8006836 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	08da      	lsrs	r2, r3, #3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	3208      	adds	r2, #8
 80067f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	220f      	movs	r2, #15
 8006806:	fa02 f303 	lsl.w	r3, r2, r3
 800680a:	43db      	mvns	r3, r3
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	4013      	ands	r3, r2
 8006810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	691a      	ldr	r2, [r3, #16]
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	fa02 f303 	lsl.w	r3, r2, r3
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	4313      	orrs	r3, r2
 8006826:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	08da      	lsrs	r2, r3, #3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	3208      	adds	r2, #8
 8006830:	6939      	ldr	r1, [r7, #16]
 8006832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	2203      	movs	r2, #3
 8006842:	fa02 f303 	lsl.w	r3, r2, r3
 8006846:	43db      	mvns	r3, r3
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4013      	ands	r3, r2
 800684c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f003 0203 	and.w	r2, r3, #3
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	fa02 f303 	lsl.w	r3, r2, r3
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	4313      	orrs	r3, r2
 8006862:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 80a6 	beq.w	80069c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006878:	4b5b      	ldr	r3, [pc, #364]	@ (80069e8 <HAL_GPIO_Init+0x2e4>)
 800687a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800687c:	4a5a      	ldr	r2, [pc, #360]	@ (80069e8 <HAL_GPIO_Init+0x2e4>)
 800687e:	f043 0301 	orr.w	r3, r3, #1
 8006882:	6613      	str	r3, [r2, #96]	@ 0x60
 8006884:	4b58      	ldr	r3, [pc, #352]	@ (80069e8 <HAL_GPIO_Init+0x2e4>)
 8006886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006890:	4a56      	ldr	r2, [pc, #344]	@ (80069ec <HAL_GPIO_Init+0x2e8>)
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	089b      	lsrs	r3, r3, #2
 8006896:	3302      	adds	r3, #2
 8006898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800689c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f003 0303 	and.w	r3, r3, #3
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	220f      	movs	r2, #15
 80068a8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ac:	43db      	mvns	r3, r3
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	4013      	ands	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80068ba:	d01f      	beq.n	80068fc <HAL_GPIO_Init+0x1f8>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a4c      	ldr	r2, [pc, #304]	@ (80069f0 <HAL_GPIO_Init+0x2ec>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d019      	beq.n	80068f8 <HAL_GPIO_Init+0x1f4>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a4b      	ldr	r2, [pc, #300]	@ (80069f4 <HAL_GPIO_Init+0x2f0>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d013      	beq.n	80068f4 <HAL_GPIO_Init+0x1f0>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a4a      	ldr	r2, [pc, #296]	@ (80069f8 <HAL_GPIO_Init+0x2f4>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00d      	beq.n	80068f0 <HAL_GPIO_Init+0x1ec>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a49      	ldr	r2, [pc, #292]	@ (80069fc <HAL_GPIO_Init+0x2f8>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d007      	beq.n	80068ec <HAL_GPIO_Init+0x1e8>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a48      	ldr	r2, [pc, #288]	@ (8006a00 <HAL_GPIO_Init+0x2fc>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d101      	bne.n	80068e8 <HAL_GPIO_Init+0x1e4>
 80068e4:	2305      	movs	r3, #5
 80068e6:	e00a      	b.n	80068fe <HAL_GPIO_Init+0x1fa>
 80068e8:	2306      	movs	r3, #6
 80068ea:	e008      	b.n	80068fe <HAL_GPIO_Init+0x1fa>
 80068ec:	2304      	movs	r3, #4
 80068ee:	e006      	b.n	80068fe <HAL_GPIO_Init+0x1fa>
 80068f0:	2303      	movs	r3, #3
 80068f2:	e004      	b.n	80068fe <HAL_GPIO_Init+0x1fa>
 80068f4:	2302      	movs	r3, #2
 80068f6:	e002      	b.n	80068fe <HAL_GPIO_Init+0x1fa>
 80068f8:	2301      	movs	r3, #1
 80068fa:	e000      	b.n	80068fe <HAL_GPIO_Init+0x1fa>
 80068fc:	2300      	movs	r3, #0
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	f002 0203 	and.w	r2, r2, #3
 8006904:	0092      	lsls	r2, r2, #2
 8006906:	4093      	lsls	r3, r2
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	4313      	orrs	r3, r2
 800690c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800690e:	4937      	ldr	r1, [pc, #220]	@ (80069ec <HAL_GPIO_Init+0x2e8>)
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	089b      	lsrs	r3, r3, #2
 8006914:	3302      	adds	r3, #2
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800691c:	4b39      	ldr	r3, [pc, #228]	@ (8006a04 <HAL_GPIO_Init+0x300>)
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	43db      	mvns	r3, r3
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	4013      	ands	r3, r2
 800692a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d003      	beq.n	8006940 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4313      	orrs	r3, r2
 800693e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006940:	4a30      	ldr	r2, [pc, #192]	@ (8006a04 <HAL_GPIO_Init+0x300>)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006946:	4b2f      	ldr	r3, [pc, #188]	@ (8006a04 <HAL_GPIO_Init+0x300>)
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	43db      	mvns	r3, r3
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	4013      	ands	r3, r2
 8006954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800696a:	4a26      	ldr	r2, [pc, #152]	@ (8006a04 <HAL_GPIO_Init+0x300>)
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006970:	4b24      	ldr	r3, [pc, #144]	@ (8006a04 <HAL_GPIO_Init+0x300>)
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	43db      	mvns	r3, r3
 800697a:	693a      	ldr	r2, [r7, #16]
 800697c:	4013      	ands	r3, r2
 800697e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006994:	4a1b      	ldr	r2, [pc, #108]	@ (8006a04 <HAL_GPIO_Init+0x300>)
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800699a:	4b1a      	ldr	r3, [pc, #104]	@ (8006a04 <HAL_GPIO_Init+0x300>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	43db      	mvns	r3, r3
 80069a4:	693a      	ldr	r2, [r7, #16]
 80069a6:	4013      	ands	r3, r2
 80069a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80069b6:	693a      	ldr	r2, [r7, #16]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80069be:	4a11      	ldr	r2, [pc, #68]	@ (8006a04 <HAL_GPIO_Init+0x300>)
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	3301      	adds	r3, #1
 80069c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	fa22 f303 	lsr.w	r3, r2, r3
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f47f ae9d 	bne.w	8006714 <HAL_GPIO_Init+0x10>
  }
}
 80069da:	bf00      	nop
 80069dc:	bf00      	nop
 80069de:	371c      	adds	r7, #28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	40021000 	.word	0x40021000
 80069ec:	40010000 	.word	0x40010000
 80069f0:	48000400 	.word	0x48000400
 80069f4:	48000800 	.word	0x48000800
 80069f8:	48000c00 	.word	0x48000c00
 80069fc:	48001000 	.word	0x48001000
 8006a00:	48001400 	.word	0x48001400
 8006a04:	40010400 	.word	0x40010400

08006a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691a      	ldr	r2, [r3, #16]
 8006a18:	887b      	ldrh	r3, [r7, #2]
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006a20:	2301      	movs	r3, #1
 8006a22:	73fb      	strb	r3, [r7, #15]
 8006a24:	e001      	b.n	8006a2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006a26:	2300      	movs	r3, #0
 8006a28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	807b      	strh	r3, [r7, #2]
 8006a44:	4613      	mov	r3, r2
 8006a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006a48:	787b      	ldrb	r3, [r7, #1]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006a4e:	887a      	ldrh	r2, [r7, #2]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006a54:	e002      	b.n	8006a5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006a56:	887a      	ldrh	r2, [r7, #2]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	4603      	mov	r3, r0
 8006a70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006a72:	4b08      	ldr	r3, [pc, #32]	@ (8006a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a74:	695a      	ldr	r2, [r3, #20]
 8006a76:	88fb      	ldrh	r3, [r7, #6]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d006      	beq.n	8006a8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a7e:	4a05      	ldr	r2, [pc, #20]	@ (8006a94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a80:	88fb      	ldrh	r3, [r7, #6]
 8006a82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a84:	88fb      	ldrh	r3, [r7, #6]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fc f9fb 	bl	8002e82 <HAL_GPIO_EXTI_Callback>
  }
}
 8006a8c:	bf00      	nop
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	40010400 	.word	0x40010400

08006a98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b085      	sub	sp, #20
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d141      	bne.n	8006b2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006aa6:	4b4b      	ldr	r3, [pc, #300]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ab2:	d131      	bne.n	8006b18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ab4:	4b47      	ldr	r3, [pc, #284]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aba:	4a46      	ldr	r2, [pc, #280]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ac0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ac4:	4b43      	ldr	r3, [pc, #268]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006acc:	4a41      	ldr	r2, [pc, #260]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ace:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ad2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ad4:	4b40      	ldr	r3, [pc, #256]	@ (8006bd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2232      	movs	r2, #50	@ 0x32
 8006ada:	fb02 f303 	mul.w	r3, r2, r3
 8006ade:	4a3f      	ldr	r2, [pc, #252]	@ (8006bdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae4:	0c9b      	lsrs	r3, r3, #18
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006aea:	e002      	b.n	8006af2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	3b01      	subs	r3, #1
 8006af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006af2:	4b38      	ldr	r3, [pc, #224]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006af4:	695b      	ldr	r3, [r3, #20]
 8006af6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006afe:	d102      	bne.n	8006b06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1f2      	bne.n	8006aec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b06:	4b33      	ldr	r3, [pc, #204]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b12:	d158      	bne.n	8006bc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e057      	b.n	8006bc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b18:	4b2e      	ldr	r3, [pc, #184]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006b28:	e04d      	b.n	8006bc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b30:	d141      	bne.n	8006bb6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b32:	4b28      	ldr	r3, [pc, #160]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b3e:	d131      	bne.n	8006ba4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b40:	4b24      	ldr	r3, [pc, #144]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b46:	4a23      	ldr	r2, [pc, #140]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b50:	4b20      	ldr	r3, [pc, #128]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006b58:	4a1e      	ldr	r2, [pc, #120]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006b5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006b60:	4b1d      	ldr	r3, [pc, #116]	@ (8006bd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2232      	movs	r2, #50	@ 0x32
 8006b66:	fb02 f303 	mul.w	r3, r2, r3
 8006b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8006bdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b70:	0c9b      	lsrs	r3, r3, #18
 8006b72:	3301      	adds	r3, #1
 8006b74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b76:	e002      	b.n	8006b7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b7e:	4b15      	ldr	r3, [pc, #84]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b8a:	d102      	bne.n	8006b92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1f2      	bne.n	8006b78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b92:	4b10      	ldr	r3, [pc, #64]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b9e:	d112      	bne.n	8006bc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e011      	b.n	8006bc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006baa:	4a0a      	ldr	r2, [pc, #40]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006bb4:	e007      	b.n	8006bc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006bb6:	4b07      	ldr	r3, [pc, #28]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006bbe:	4a05      	ldr	r2, [pc, #20]	@ (8006bd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006bc4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3714      	adds	r7, #20
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	40007000 	.word	0x40007000
 8006bd8:	20000158 	.word	0x20000158
 8006bdc:	431bde83 	.word	0x431bde83

08006be0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006be0:	b480      	push	{r7}
 8006be2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006be4:	4b05      	ldr	r3, [pc, #20]	@ (8006bfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	4a04      	ldr	r2, [pc, #16]	@ (8006bfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006bea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006bee:	6093      	str	r3, [r2, #8]
}
 8006bf0:	bf00      	nop
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	40007000 	.word	0x40007000

08006c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b088      	sub	sp, #32
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e2fe      	b.n	8007210 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d075      	beq.n	8006d0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c1e:	4b97      	ldr	r3, [pc, #604]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 030c 	and.w	r3, r3, #12
 8006c26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c28:	4b94      	ldr	r3, [pc, #592]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f003 0303 	and.w	r3, r3, #3
 8006c30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b0c      	cmp	r3, #12
 8006c36:	d102      	bne.n	8006c3e <HAL_RCC_OscConfig+0x3e>
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	2b03      	cmp	r3, #3
 8006c3c:	d002      	beq.n	8006c44 <HAL_RCC_OscConfig+0x44>
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b08      	cmp	r3, #8
 8006c42:	d10b      	bne.n	8006c5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c44:	4b8d      	ldr	r3, [pc, #564]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d05b      	beq.n	8006d08 <HAL_RCC_OscConfig+0x108>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d157      	bne.n	8006d08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e2d9      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c64:	d106      	bne.n	8006c74 <HAL_RCC_OscConfig+0x74>
 8006c66:	4b85      	ldr	r3, [pc, #532]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a84      	ldr	r2, [pc, #528]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	e01d      	b.n	8006cb0 <HAL_RCC_OscConfig+0xb0>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c7c:	d10c      	bne.n	8006c98 <HAL_RCC_OscConfig+0x98>
 8006c7e:	4b7f      	ldr	r3, [pc, #508]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a7e      	ldr	r2, [pc, #504]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	4b7c      	ldr	r3, [pc, #496]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a7b      	ldr	r2, [pc, #492]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	e00b      	b.n	8006cb0 <HAL_RCC_OscConfig+0xb0>
 8006c98:	4b78      	ldr	r3, [pc, #480]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a77      	ldr	r2, [pc, #476]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ca2:	6013      	str	r3, [r2, #0]
 8006ca4:	4b75      	ldr	r3, [pc, #468]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a74      	ldr	r2, [pc, #464]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d013      	beq.n	8006ce0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb8:	f7fd fc5e 	bl	8004578 <HAL_GetTick>
 8006cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006cc0:	f7fd fc5a 	bl	8004578 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b64      	cmp	r3, #100	@ 0x64
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e29e      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006cd2:	4b6a      	ldr	r3, [pc, #424]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0f0      	beq.n	8006cc0 <HAL_RCC_OscConfig+0xc0>
 8006cde:	e014      	b.n	8006d0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce0:	f7fd fc4a 	bl	8004578 <HAL_GetTick>
 8006ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006ce6:	e008      	b.n	8006cfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ce8:	f7fd fc46 	bl	8004578 <HAL_GetTick>
 8006cec:	4602      	mov	r2, r0
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	2b64      	cmp	r3, #100	@ 0x64
 8006cf4:	d901      	bls.n	8006cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006cf6:	2303      	movs	r3, #3
 8006cf8:	e28a      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006cfa:	4b60      	ldr	r3, [pc, #384]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d1f0      	bne.n	8006ce8 <HAL_RCC_OscConfig+0xe8>
 8006d06:	e000      	b.n	8006d0a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0302 	and.w	r3, r3, #2
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d075      	beq.n	8006e02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d16:	4b59      	ldr	r3, [pc, #356]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 030c 	and.w	r3, r3, #12
 8006d1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d20:	4b56      	ldr	r3, [pc, #344]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f003 0303 	and.w	r3, r3, #3
 8006d28:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b0c      	cmp	r3, #12
 8006d2e:	d102      	bne.n	8006d36 <HAL_RCC_OscConfig+0x136>
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d002      	beq.n	8006d3c <HAL_RCC_OscConfig+0x13c>
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d11f      	bne.n	8006d7c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d3c:	4b4f      	ldr	r3, [pc, #316]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d005      	beq.n	8006d54 <HAL_RCC_OscConfig+0x154>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e25d      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d54:	4b49      	ldr	r3, [pc, #292]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	061b      	lsls	r3, r3, #24
 8006d62:	4946      	ldr	r1, [pc, #280]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006d68:	4b45      	ldr	r3, [pc, #276]	@ (8006e80 <HAL_RCC_OscConfig+0x280>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fd fbb7 	bl	80044e0 <HAL_InitTick>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d043      	beq.n	8006e00 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e249      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d023      	beq.n	8006dcc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d84:	4b3d      	ldr	r3, [pc, #244]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a3c      	ldr	r2, [pc, #240]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006d8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d90:	f7fd fbf2 	bl	8004578 <HAL_GetTick>
 8006d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d98:	f7fd fbee 	bl	8004578 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e232      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006daa:	4b34      	ldr	r3, [pc, #208]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0f0      	beq.n	8006d98 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006db6:	4b31      	ldr	r3, [pc, #196]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	061b      	lsls	r3, r3, #24
 8006dc4:	492d      	ldr	r1, [pc, #180]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	604b      	str	r3, [r1, #4]
 8006dca:	e01a      	b.n	8006e02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006dd2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd8:	f7fd fbce 	bl	8004578 <HAL_GetTick>
 8006ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006dde:	e008      	b.n	8006df2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006de0:	f7fd fbca 	bl	8004578 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e20e      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006df2:	4b22      	ldr	r3, [pc, #136]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1f0      	bne.n	8006de0 <HAL_RCC_OscConfig+0x1e0>
 8006dfe:	e000      	b.n	8006e02 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0308 	and.w	r3, r3, #8
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d041      	beq.n	8006e92 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d01c      	beq.n	8006e50 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e16:	4b19      	ldr	r3, [pc, #100]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e1c:	4a17      	ldr	r2, [pc, #92]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006e1e:	f043 0301 	orr.w	r3, r3, #1
 8006e22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e26:	f7fd fba7 	bl	8004578 <HAL_GetTick>
 8006e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e2c:	e008      	b.n	8006e40 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e2e:	f7fd fba3 	bl	8004578 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d901      	bls.n	8006e40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e1e7      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e40:	4b0e      	ldr	r3, [pc, #56]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0ef      	beq.n	8006e2e <HAL_RCC_OscConfig+0x22e>
 8006e4e:	e020      	b.n	8006e92 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e50:	4b0a      	ldr	r3, [pc, #40]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e56:	4a09      	ldr	r2, [pc, #36]	@ (8006e7c <HAL_RCC_OscConfig+0x27c>)
 8006e58:	f023 0301 	bic.w	r3, r3, #1
 8006e5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e60:	f7fd fb8a 	bl	8004578 <HAL_GetTick>
 8006e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e66:	e00d      	b.n	8006e84 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e68:	f7fd fb86 	bl	8004578 <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d906      	bls.n	8006e84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e1ca      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
 8006e7a:	bf00      	nop
 8006e7c:	40021000 	.word	0x40021000
 8006e80:	2000015c 	.word	0x2000015c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006e84:	4b8c      	ldr	r3, [pc, #560]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1ea      	bne.n	8006e68 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0304 	and.w	r3, r3, #4
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 80a6 	beq.w	8006fec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006ea4:	4b84      	ldr	r3, [pc, #528]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <HAL_RCC_OscConfig+0x2b4>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e000      	b.n	8006eb6 <HAL_RCC_OscConfig+0x2b6>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00d      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eba:	4b7f      	ldr	r3, [pc, #508]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ebe:	4a7e      	ldr	r2, [pc, #504]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ec4:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ec6:	4b7c      	ldr	r3, [pc, #496]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ed6:	4b79      	ldr	r3, [pc, #484]	@ (80070bc <HAL_RCC_OscConfig+0x4bc>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d118      	bne.n	8006f14 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ee2:	4b76      	ldr	r3, [pc, #472]	@ (80070bc <HAL_RCC_OscConfig+0x4bc>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a75      	ldr	r2, [pc, #468]	@ (80070bc <HAL_RCC_OscConfig+0x4bc>)
 8006ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006eee:	f7fd fb43 	bl	8004578 <HAL_GetTick>
 8006ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ef4:	e008      	b.n	8006f08 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ef6:	f7fd fb3f 	bl	8004578 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	2b02      	cmp	r3, #2
 8006f02:	d901      	bls.n	8006f08 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e183      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f08:	4b6c      	ldr	r3, [pc, #432]	@ (80070bc <HAL_RCC_OscConfig+0x4bc>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d0f0      	beq.n	8006ef6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d108      	bne.n	8006f2e <HAL_RCC_OscConfig+0x32e>
 8006f1c:	4b66      	ldr	r3, [pc, #408]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f22:	4a65      	ldr	r2, [pc, #404]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006f24:	f043 0301 	orr.w	r3, r3, #1
 8006f28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006f2c:	e024      	b.n	8006f78 <HAL_RCC_OscConfig+0x378>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	2b05      	cmp	r3, #5
 8006f34:	d110      	bne.n	8006f58 <HAL_RCC_OscConfig+0x358>
 8006f36:	4b60      	ldr	r3, [pc, #384]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f3c:	4a5e      	ldr	r2, [pc, #376]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006f3e:	f043 0304 	orr.w	r3, r3, #4
 8006f42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006f46:	4b5c      	ldr	r3, [pc, #368]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f4c:	4a5a      	ldr	r2, [pc, #360]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006f4e:	f043 0301 	orr.w	r3, r3, #1
 8006f52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006f56:	e00f      	b.n	8006f78 <HAL_RCC_OscConfig+0x378>
 8006f58:	4b57      	ldr	r3, [pc, #348]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f5e:	4a56      	ldr	r2, [pc, #344]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006f60:	f023 0301 	bic.w	r3, r3, #1
 8006f64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006f68:	4b53      	ldr	r3, [pc, #332]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f6e:	4a52      	ldr	r2, [pc, #328]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006f70:	f023 0304 	bic.w	r3, r3, #4
 8006f74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d016      	beq.n	8006fae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f80:	f7fd fafa 	bl	8004578 <HAL_GetTick>
 8006f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f86:	e00a      	b.n	8006f9e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f88:	f7fd faf6 	bl	8004578 <HAL_GetTick>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e138      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f9e:	4b46      	ldr	r3, [pc, #280]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fa4:	f003 0302 	and.w	r3, r3, #2
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0ed      	beq.n	8006f88 <HAL_RCC_OscConfig+0x388>
 8006fac:	e015      	b.n	8006fda <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fae:	f7fd fae3 	bl	8004578 <HAL_GetTick>
 8006fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006fb4:	e00a      	b.n	8006fcc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fb6:	f7fd fadf 	bl	8004578 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e121      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006fcc:	4b3a      	ldr	r3, [pc, #232]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1ed      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006fda:	7ffb      	ldrb	r3, [r7, #31]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d105      	bne.n	8006fec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fe0:	4b35      	ldr	r3, [pc, #212]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fe4:	4a34      	ldr	r2, [pc, #208]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8006fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006fea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d03c      	beq.n	8007072 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d01c      	beq.n	800703a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007000:	4b2d      	ldr	r3, [pc, #180]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8007002:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007006:	4a2c      	ldr	r2, [pc, #176]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8007008:	f043 0301 	orr.w	r3, r3, #1
 800700c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007010:	f7fd fab2 	bl	8004578 <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007018:	f7fd faae 	bl	8004578 <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b02      	cmp	r3, #2
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e0f2      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800702a:	4b23      	ldr	r3, [pc, #140]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 800702c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0ef      	beq.n	8007018 <HAL_RCC_OscConfig+0x418>
 8007038:	e01b      	b.n	8007072 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800703a:	4b1f      	ldr	r3, [pc, #124]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 800703c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007040:	4a1d      	ldr	r2, [pc, #116]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8007042:	f023 0301 	bic.w	r3, r3, #1
 8007046:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800704a:	f7fd fa95 	bl	8004578 <HAL_GetTick>
 800704e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007050:	e008      	b.n	8007064 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007052:	f7fd fa91 	bl	8004578 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	2b02      	cmp	r3, #2
 800705e:	d901      	bls.n	8007064 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e0d5      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007064:	4b14      	ldr	r3, [pc, #80]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8007066:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1ef      	bne.n	8007052 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	2b00      	cmp	r3, #0
 8007078:	f000 80c9 	beq.w	800720e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800707c:	4b0e      	ldr	r3, [pc, #56]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	f003 030c 	and.w	r3, r3, #12
 8007084:	2b0c      	cmp	r3, #12
 8007086:	f000 8083 	beq.w	8007190 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	2b02      	cmp	r3, #2
 8007090:	d15e      	bne.n	8007150 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007092:	4b09      	ldr	r3, [pc, #36]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a08      	ldr	r2, [pc, #32]	@ (80070b8 <HAL_RCC_OscConfig+0x4b8>)
 8007098:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800709c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800709e:	f7fd fa6b 	bl	8004578 <HAL_GetTick>
 80070a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070a4:	e00c      	b.n	80070c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070a6:	f7fd fa67 	bl	8004578 <HAL_GetTick>
 80070aa:	4602      	mov	r2, r0
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	2b02      	cmp	r3, #2
 80070b2:	d905      	bls.n	80070c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e0ab      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
 80070b8:	40021000 	.word	0x40021000
 80070bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070c0:	4b55      	ldr	r3, [pc, #340]	@ (8007218 <HAL_RCC_OscConfig+0x618>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1ec      	bne.n	80070a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070cc:	4b52      	ldr	r3, [pc, #328]	@ (8007218 <HAL_RCC_OscConfig+0x618>)
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	4b52      	ldr	r3, [pc, #328]	@ (800721c <HAL_RCC_OscConfig+0x61c>)
 80070d2:	4013      	ands	r3, r2
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	6a11      	ldr	r1, [r2, #32]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80070dc:	3a01      	subs	r2, #1
 80070de:	0112      	lsls	r2, r2, #4
 80070e0:	4311      	orrs	r1, r2
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80070e6:	0212      	lsls	r2, r2, #8
 80070e8:	4311      	orrs	r1, r2
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80070ee:	0852      	lsrs	r2, r2, #1
 80070f0:	3a01      	subs	r2, #1
 80070f2:	0552      	lsls	r2, r2, #21
 80070f4:	4311      	orrs	r1, r2
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80070fa:	0852      	lsrs	r2, r2, #1
 80070fc:	3a01      	subs	r2, #1
 80070fe:	0652      	lsls	r2, r2, #25
 8007100:	4311      	orrs	r1, r2
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007106:	06d2      	lsls	r2, r2, #27
 8007108:	430a      	orrs	r2, r1
 800710a:	4943      	ldr	r1, [pc, #268]	@ (8007218 <HAL_RCC_OscConfig+0x618>)
 800710c:	4313      	orrs	r3, r2
 800710e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007110:	4b41      	ldr	r3, [pc, #260]	@ (8007218 <HAL_RCC_OscConfig+0x618>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a40      	ldr	r2, [pc, #256]	@ (8007218 <HAL_RCC_OscConfig+0x618>)
 8007116:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800711a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800711c:	4b3e      	ldr	r3, [pc, #248]	@ (8007218 <HAL_RCC_OscConfig+0x618>)
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	4a3d      	ldr	r2, [pc, #244]	@ (8007218 <HAL_RCC_OscConfig+0x618>)
 8007122:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007126:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007128:	f7fd fa26 	bl	8004578 <HAL_GetTick>
 800712c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800712e:	e008      	b.n	8007142 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007130:	f7fd fa22 	bl	8004578 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	2b02      	cmp	r3, #2
 800713c:	d901      	bls.n	8007142 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e066      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007142:	4b35      	ldr	r3, [pc, #212]	@ (8007218 <HAL_RCC_OscConfig+0x618>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d0f0      	beq.n	8007130 <HAL_RCC_OscConfig+0x530>
 800714e:	e05e      	b.n	800720e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007150:	4b31      	ldr	r3, [pc, #196]	@ (8007218 <HAL_RCC_OscConfig+0x618>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a30      	ldr	r2, [pc, #192]	@ (8007218 <HAL_RCC_OscConfig+0x618>)
 8007156:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800715a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800715c:	f7fd fa0c 	bl	8004578 <HAL_GetTick>
 8007160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007162:	e008      	b.n	8007176 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007164:	f7fd fa08 	bl	8004578 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	2b02      	cmp	r3, #2
 8007170:	d901      	bls.n	8007176 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e04c      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007176:	4b28      	ldr	r3, [pc, #160]	@ (8007218 <HAL_RCC_OscConfig+0x618>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1f0      	bne.n	8007164 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007182:	4b25      	ldr	r3, [pc, #148]	@ (8007218 <HAL_RCC_OscConfig+0x618>)
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	4924      	ldr	r1, [pc, #144]	@ (8007218 <HAL_RCC_OscConfig+0x618>)
 8007188:	4b25      	ldr	r3, [pc, #148]	@ (8007220 <HAL_RCC_OscConfig+0x620>)
 800718a:	4013      	ands	r3, r2
 800718c:	60cb      	str	r3, [r1, #12]
 800718e:	e03e      	b.n	800720e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d101      	bne.n	800719c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e039      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800719c:	4b1e      	ldr	r3, [pc, #120]	@ (8007218 <HAL_RCC_OscConfig+0x618>)
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f003 0203 	and.w	r2, r3, #3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d12c      	bne.n	800720a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ba:	3b01      	subs	r3, #1
 80071bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071be:	429a      	cmp	r2, r3
 80071c0:	d123      	bne.n	800720a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d11b      	bne.n	800720a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80071de:	429a      	cmp	r2, r3
 80071e0:	d113      	bne.n	800720a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ec:	085b      	lsrs	r3, r3, #1
 80071ee:	3b01      	subs	r3, #1
 80071f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d109      	bne.n	800720a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007200:	085b      	lsrs	r3, r3, #1
 8007202:	3b01      	subs	r3, #1
 8007204:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007206:	429a      	cmp	r2, r3
 8007208:	d001      	beq.n	800720e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e000      	b.n	8007210 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3720      	adds	r7, #32
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	40021000 	.word	0x40021000
 800721c:	019f800c 	.word	0x019f800c
 8007220:	feeefffc 	.word	0xfeeefffc

08007224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800722e:	2300      	movs	r3, #0
 8007230:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e11e      	b.n	800747a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800723c:	4b91      	ldr	r3, [pc, #580]	@ (8007484 <HAL_RCC_ClockConfig+0x260>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 030f 	and.w	r3, r3, #15
 8007244:	683a      	ldr	r2, [r7, #0]
 8007246:	429a      	cmp	r2, r3
 8007248:	d910      	bls.n	800726c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800724a:	4b8e      	ldr	r3, [pc, #568]	@ (8007484 <HAL_RCC_ClockConfig+0x260>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f023 020f 	bic.w	r2, r3, #15
 8007252:	498c      	ldr	r1, [pc, #560]	@ (8007484 <HAL_RCC_ClockConfig+0x260>)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	4313      	orrs	r3, r2
 8007258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800725a:	4b8a      	ldr	r3, [pc, #552]	@ (8007484 <HAL_RCC_ClockConfig+0x260>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f003 030f 	and.w	r3, r3, #15
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d001      	beq.n	800726c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e106      	b.n	800747a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b00      	cmp	r3, #0
 8007276:	d073      	beq.n	8007360 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	2b03      	cmp	r3, #3
 800727e:	d129      	bne.n	80072d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007280:	4b81      	ldr	r3, [pc, #516]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e0f4      	b.n	800747a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007290:	f000 f99e 	bl	80075d0 <RCC_GetSysClockFreqFromPLLSource>
 8007294:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	4a7c      	ldr	r2, [pc, #496]	@ (800748c <HAL_RCC_ClockConfig+0x268>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d93f      	bls.n	800731e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800729e:	4b7a      	ldr	r3, [pc, #488]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d009      	beq.n	80072be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d033      	beq.n	800731e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d12f      	bne.n	800731e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80072be:	4b72      	ldr	r3, [pc, #456]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072c6:	4a70      	ldr	r2, [pc, #448]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 80072c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80072ce:	2380      	movs	r3, #128	@ 0x80
 80072d0:	617b      	str	r3, [r7, #20]
 80072d2:	e024      	b.n	800731e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d107      	bne.n	80072ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80072dc:	4b6a      	ldr	r3, [pc, #424]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d109      	bne.n	80072fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e0c6      	b.n	800747a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80072ec:	4b66      	ldr	r3, [pc, #408]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0be      	b.n	800747a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80072fc:	f000 f8ce 	bl	800749c <HAL_RCC_GetSysClockFreq>
 8007300:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	4a61      	ldr	r2, [pc, #388]	@ (800748c <HAL_RCC_ClockConfig+0x268>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d909      	bls.n	800731e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800730a:	4b5f      	ldr	r3, [pc, #380]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007312:	4a5d      	ldr	r2, [pc, #372]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 8007314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007318:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800731a:	2380      	movs	r3, #128	@ 0x80
 800731c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800731e:	4b5a      	ldr	r3, [pc, #360]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	f023 0203 	bic.w	r2, r3, #3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	4957      	ldr	r1, [pc, #348]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 800732c:	4313      	orrs	r3, r2
 800732e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007330:	f7fd f922 	bl	8004578 <HAL_GetTick>
 8007334:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007336:	e00a      	b.n	800734e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007338:	f7fd f91e 	bl	8004578 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007346:	4293      	cmp	r3, r2
 8007348:	d901      	bls.n	800734e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e095      	b.n	800747a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800734e:	4b4e      	ldr	r3, [pc, #312]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f003 020c 	and.w	r2, r3, #12
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	429a      	cmp	r2, r3
 800735e:	d1eb      	bne.n	8007338 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0302 	and.w	r3, r3, #2
 8007368:	2b00      	cmp	r3, #0
 800736a:	d023      	beq.n	80073b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	d005      	beq.n	8007384 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007378:	4b43      	ldr	r3, [pc, #268]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	4a42      	ldr	r2, [pc, #264]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 800737e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007382:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0308 	and.w	r3, r3, #8
 800738c:	2b00      	cmp	r3, #0
 800738e:	d007      	beq.n	80073a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007390:	4b3d      	ldr	r3, [pc, #244]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007398:	4a3b      	ldr	r2, [pc, #236]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 800739a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800739e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073a0:	4b39      	ldr	r3, [pc, #228]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	4936      	ldr	r1, [pc, #216]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	608b      	str	r3, [r1, #8]
 80073b2:	e008      	b.n	80073c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	2b80      	cmp	r3, #128	@ 0x80
 80073b8:	d105      	bne.n	80073c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80073ba:	4b33      	ldr	r3, [pc, #204]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	4a32      	ldr	r2, [pc, #200]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 80073c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073c6:	4b2f      	ldr	r3, [pc, #188]	@ (8007484 <HAL_RCC_ClockConfig+0x260>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 030f 	and.w	r3, r3, #15
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d21d      	bcs.n	8007410 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007484 <HAL_RCC_ClockConfig+0x260>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f023 020f 	bic.w	r2, r3, #15
 80073dc:	4929      	ldr	r1, [pc, #164]	@ (8007484 <HAL_RCC_ClockConfig+0x260>)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80073e4:	f7fd f8c8 	bl	8004578 <HAL_GetTick>
 80073e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073ea:	e00a      	b.n	8007402 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073ec:	f7fd f8c4 	bl	8004578 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d901      	bls.n	8007402 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e03b      	b.n	800747a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007402:	4b20      	ldr	r3, [pc, #128]	@ (8007484 <HAL_RCC_ClockConfig+0x260>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	429a      	cmp	r2, r3
 800740e:	d1ed      	bne.n	80073ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	2b00      	cmp	r3, #0
 800741a:	d008      	beq.n	800742e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800741c:	4b1a      	ldr	r3, [pc, #104]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	4917      	ldr	r1, [pc, #92]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 800742a:	4313      	orrs	r3, r2
 800742c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b00      	cmp	r3, #0
 8007438:	d009      	beq.n	800744e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800743a:	4b13      	ldr	r3, [pc, #76]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	00db      	lsls	r3, r3, #3
 8007448:	490f      	ldr	r1, [pc, #60]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 800744a:	4313      	orrs	r3, r2
 800744c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800744e:	f000 f825 	bl	800749c <HAL_RCC_GetSysClockFreq>
 8007452:	4602      	mov	r2, r0
 8007454:	4b0c      	ldr	r3, [pc, #48]	@ (8007488 <HAL_RCC_ClockConfig+0x264>)
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	091b      	lsrs	r3, r3, #4
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	490c      	ldr	r1, [pc, #48]	@ (8007490 <HAL_RCC_ClockConfig+0x26c>)
 8007460:	5ccb      	ldrb	r3, [r1, r3]
 8007462:	f003 031f 	and.w	r3, r3, #31
 8007466:	fa22 f303 	lsr.w	r3, r2, r3
 800746a:	4a0a      	ldr	r2, [pc, #40]	@ (8007494 <HAL_RCC_ClockConfig+0x270>)
 800746c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800746e:	4b0a      	ldr	r3, [pc, #40]	@ (8007498 <HAL_RCC_ClockConfig+0x274>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4618      	mov	r0, r3
 8007474:	f7fd f834 	bl	80044e0 <HAL_InitTick>
 8007478:	4603      	mov	r3, r0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	40022000 	.word	0x40022000
 8007488:	40021000 	.word	0x40021000
 800748c:	04c4b400 	.word	0x04c4b400
 8007490:	0800c6cc 	.word	0x0800c6cc
 8007494:	20000158 	.word	0x20000158
 8007498:	2000015c 	.word	0x2000015c

0800749c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800749c:	b480      	push	{r7}
 800749e:	b087      	sub	sp, #28
 80074a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80074a2:	4b2c      	ldr	r3, [pc, #176]	@ (8007554 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f003 030c 	and.w	r3, r3, #12
 80074aa:	2b04      	cmp	r3, #4
 80074ac:	d102      	bne.n	80074b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80074ae:	4b2a      	ldr	r3, [pc, #168]	@ (8007558 <HAL_RCC_GetSysClockFreq+0xbc>)
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	e047      	b.n	8007544 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80074b4:	4b27      	ldr	r3, [pc, #156]	@ (8007554 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f003 030c 	and.w	r3, r3, #12
 80074bc:	2b08      	cmp	r3, #8
 80074be:	d102      	bne.n	80074c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80074c0:	4b26      	ldr	r3, [pc, #152]	@ (800755c <HAL_RCC_GetSysClockFreq+0xc0>)
 80074c2:	613b      	str	r3, [r7, #16]
 80074c4:	e03e      	b.n	8007544 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80074c6:	4b23      	ldr	r3, [pc, #140]	@ (8007554 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f003 030c 	and.w	r3, r3, #12
 80074ce:	2b0c      	cmp	r3, #12
 80074d0:	d136      	bne.n	8007540 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80074d2:	4b20      	ldr	r3, [pc, #128]	@ (8007554 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80074dc:	4b1d      	ldr	r3, [pc, #116]	@ (8007554 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	091b      	lsrs	r3, r3, #4
 80074e2:	f003 030f 	and.w	r3, r3, #15
 80074e6:	3301      	adds	r3, #1
 80074e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b03      	cmp	r3, #3
 80074ee:	d10c      	bne.n	800750a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80074f0:	4a1a      	ldr	r2, [pc, #104]	@ (800755c <HAL_RCC_GetSysClockFreq+0xc0>)
 80074f2:	68bb      	ldr	r3, [r7, #8]
 80074f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f8:	4a16      	ldr	r2, [pc, #88]	@ (8007554 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074fa:	68d2      	ldr	r2, [r2, #12]
 80074fc:	0a12      	lsrs	r2, r2, #8
 80074fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007502:	fb02 f303 	mul.w	r3, r2, r3
 8007506:	617b      	str	r3, [r7, #20]
      break;
 8007508:	e00c      	b.n	8007524 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800750a:	4a13      	ldr	r2, [pc, #76]	@ (8007558 <HAL_RCC_GetSysClockFreq+0xbc>)
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007512:	4a10      	ldr	r2, [pc, #64]	@ (8007554 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007514:	68d2      	ldr	r2, [r2, #12]
 8007516:	0a12      	lsrs	r2, r2, #8
 8007518:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800751c:	fb02 f303 	mul.w	r3, r2, r3
 8007520:	617b      	str	r3, [r7, #20]
      break;
 8007522:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007524:	4b0b      	ldr	r3, [pc, #44]	@ (8007554 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	0e5b      	lsrs	r3, r3, #25
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	3301      	adds	r3, #1
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	fbb2 f3f3 	udiv	r3, r2, r3
 800753c:	613b      	str	r3, [r7, #16]
 800753e:	e001      	b.n	8007544 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007540:	2300      	movs	r3, #0
 8007542:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007544:	693b      	ldr	r3, [r7, #16]
}
 8007546:	4618      	mov	r0, r3
 8007548:	371c      	adds	r7, #28
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	40021000 	.word	0x40021000
 8007558:	00f42400 	.word	0x00f42400
 800755c:	016e3600 	.word	0x016e3600

08007560 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007564:	4b03      	ldr	r3, [pc, #12]	@ (8007574 <HAL_RCC_GetHCLKFreq+0x14>)
 8007566:	681b      	ldr	r3, [r3, #0]
}
 8007568:	4618      	mov	r0, r3
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	20000158 	.word	0x20000158

08007578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800757c:	f7ff fff0 	bl	8007560 <HAL_RCC_GetHCLKFreq>
 8007580:	4602      	mov	r2, r0
 8007582:	4b06      	ldr	r3, [pc, #24]	@ (800759c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	0a1b      	lsrs	r3, r3, #8
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	4904      	ldr	r1, [pc, #16]	@ (80075a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800758e:	5ccb      	ldrb	r3, [r1, r3]
 8007590:	f003 031f 	and.w	r3, r3, #31
 8007594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007598:	4618      	mov	r0, r3
 800759a:	bd80      	pop	{r7, pc}
 800759c:	40021000 	.word	0x40021000
 80075a0:	0800c6dc 	.word	0x0800c6dc

080075a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80075a8:	f7ff ffda 	bl	8007560 <HAL_RCC_GetHCLKFreq>
 80075ac:	4602      	mov	r2, r0
 80075ae:	4b06      	ldr	r3, [pc, #24]	@ (80075c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	0adb      	lsrs	r3, r3, #11
 80075b4:	f003 0307 	and.w	r3, r3, #7
 80075b8:	4904      	ldr	r1, [pc, #16]	@ (80075cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80075ba:	5ccb      	ldrb	r3, [r1, r3]
 80075bc:	f003 031f 	and.w	r3, r3, #31
 80075c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	40021000 	.word	0x40021000
 80075cc:	0800c6dc 	.word	0x0800c6dc

080075d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80075d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007650 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	f003 0303 	and.w	r3, r3, #3
 80075de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80075e0:	4b1b      	ldr	r3, [pc, #108]	@ (8007650 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	091b      	lsrs	r3, r3, #4
 80075e6:	f003 030f 	and.w	r3, r3, #15
 80075ea:	3301      	adds	r3, #1
 80075ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d10c      	bne.n	800760e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80075f4:	4a17      	ldr	r2, [pc, #92]	@ (8007654 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075fc:	4a14      	ldr	r2, [pc, #80]	@ (8007650 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80075fe:	68d2      	ldr	r2, [r2, #12]
 8007600:	0a12      	lsrs	r2, r2, #8
 8007602:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007606:	fb02 f303 	mul.w	r3, r2, r3
 800760a:	617b      	str	r3, [r7, #20]
    break;
 800760c:	e00c      	b.n	8007628 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800760e:	4a12      	ldr	r2, [pc, #72]	@ (8007658 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	fbb2 f3f3 	udiv	r3, r2, r3
 8007616:	4a0e      	ldr	r2, [pc, #56]	@ (8007650 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007618:	68d2      	ldr	r2, [r2, #12]
 800761a:	0a12      	lsrs	r2, r2, #8
 800761c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007620:	fb02 f303 	mul.w	r3, r2, r3
 8007624:	617b      	str	r3, [r7, #20]
    break;
 8007626:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007628:	4b09      	ldr	r3, [pc, #36]	@ (8007650 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	0e5b      	lsrs	r3, r3, #25
 800762e:	f003 0303 	and.w	r3, r3, #3
 8007632:	3301      	adds	r3, #1
 8007634:	005b      	lsls	r3, r3, #1
 8007636:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007640:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007642:	687b      	ldr	r3, [r7, #4]
}
 8007644:	4618      	mov	r0, r3
 8007646:	371c      	adds	r7, #28
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	40021000 	.word	0x40021000
 8007654:	016e3600 	.word	0x016e3600
 8007658:	00f42400 	.word	0x00f42400

0800765c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007664:	2300      	movs	r3, #0
 8007666:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007668:	2300      	movs	r3, #0
 800766a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 8098 	beq.w	80077aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800767a:	2300      	movs	r3, #0
 800767c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800767e:	4b43      	ldr	r3, [pc, #268]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10d      	bne.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800768a:	4b40      	ldr	r3, [pc, #256]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800768c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800768e:	4a3f      	ldr	r2, [pc, #252]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007694:	6593      	str	r3, [r2, #88]	@ 0x58
 8007696:	4b3d      	ldr	r3, [pc, #244]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800769a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800769e:	60bb      	str	r3, [r7, #8]
 80076a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076a2:	2301      	movs	r3, #1
 80076a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076a6:	4b3a      	ldr	r3, [pc, #232]	@ (8007790 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a39      	ldr	r2, [pc, #228]	@ (8007790 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80076ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80076b2:	f7fc ff61 	bl	8004578 <HAL_GetTick>
 80076b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076b8:	e009      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076ba:	f7fc ff5d 	bl	8004578 <HAL_GetTick>
 80076be:	4602      	mov	r2, r0
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	2b02      	cmp	r3, #2
 80076c6:	d902      	bls.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80076c8:	2303      	movs	r3, #3
 80076ca:	74fb      	strb	r3, [r7, #19]
        break;
 80076cc:	e005      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80076ce:	4b30      	ldr	r3, [pc, #192]	@ (8007790 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d0ef      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80076da:	7cfb      	ldrb	r3, [r7, #19]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d159      	bne.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80076e0:	4b2a      	ldr	r3, [pc, #168]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80076ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d01e      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d019      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80076fc:	4b23      	ldr	r3, [pc, #140]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007702:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007706:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007708:	4b20      	ldr	r3, [pc, #128]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800770a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800770e:	4a1f      	ldr	r2, [pc, #124]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007714:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007718:	4b1c      	ldr	r3, [pc, #112]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800771a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800771e:	4a1b      	ldr	r2, [pc, #108]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007728:	4a18      	ldr	r2, [pc, #96]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d016      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800773a:	f7fc ff1d 	bl	8004578 <HAL_GetTick>
 800773e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007740:	e00b      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007742:	f7fc ff19 	bl	8004578 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007750:	4293      	cmp	r3, r2
 8007752:	d902      	bls.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	74fb      	strb	r3, [r7, #19]
            break;
 8007758:	e006      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800775a:	4b0c      	ldr	r3, [pc, #48]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800775c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d0ec      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007768:	7cfb      	ldrb	r3, [r7, #19]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10b      	bne.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800776e:	4b07      	ldr	r3, [pc, #28]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007770:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007774:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800777c:	4903      	ldr	r1, [pc, #12]	@ (800778c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800777e:	4313      	orrs	r3, r2
 8007780:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007784:	e008      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007786:	7cfb      	ldrb	r3, [r7, #19]
 8007788:	74bb      	strb	r3, [r7, #18]
 800778a:	e005      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800778c:	40021000 	.word	0x40021000
 8007790:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007794:	7cfb      	ldrb	r3, [r7, #19]
 8007796:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007798:	7c7b      	ldrb	r3, [r7, #17]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d105      	bne.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800779e:	4ba7      	ldr	r3, [pc, #668]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077a2:	4aa6      	ldr	r2, [pc, #664]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80077b6:	4ba1      	ldr	r3, [pc, #644]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077bc:	f023 0203 	bic.w	r2, r3, #3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	499d      	ldr	r1, [pc, #628]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f003 0302 	and.w	r3, r3, #2
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00a      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80077d8:	4b98      	ldr	r3, [pc, #608]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077de:	f023 020c 	bic.w	r2, r3, #12
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	4995      	ldr	r1, [pc, #596]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077e8:	4313      	orrs	r3, r2
 80077ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 0304 	and.w	r3, r3, #4
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00a      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80077fa:	4b90      	ldr	r3, [pc, #576]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80077fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007800:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	498c      	ldr	r1, [pc, #560]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800780a:	4313      	orrs	r3, r2
 800780c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0308 	and.w	r3, r3, #8
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00a      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800781c:	4b87      	ldr	r3, [pc, #540]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800781e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007822:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	4984      	ldr	r1, [pc, #528]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800782c:	4313      	orrs	r3, r2
 800782e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 0310 	and.w	r3, r3, #16
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00a      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800783e:	4b7f      	ldr	r3, [pc, #508]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007844:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	497b      	ldr	r1, [pc, #492]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800784e:	4313      	orrs	r3, r2
 8007850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0320 	and.w	r3, r3, #32
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00a      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007860:	4b76      	ldr	r3, [pc, #472]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007866:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	4973      	ldr	r1, [pc, #460]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007870:	4313      	orrs	r3, r2
 8007872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00a      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007882:	4b6e      	ldr	r3, [pc, #440]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007888:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	496a      	ldr	r1, [pc, #424]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007892:	4313      	orrs	r3, r2
 8007894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00a      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80078a4:	4b65      	ldr	r3, [pc, #404]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	4962      	ldr	r1, [pc, #392]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078b4:	4313      	orrs	r3, r2
 80078b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00a      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80078c6:	4b5d      	ldr	r3, [pc, #372]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d4:	4959      	ldr	r1, [pc, #356]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00a      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078e8:	4b54      	ldr	r3, [pc, #336]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078ee:	f023 0203 	bic.w	r2, r3, #3
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f6:	4951      	ldr	r1, [pc, #324]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80078f8:	4313      	orrs	r3, r2
 80078fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800790a:	4b4c      	ldr	r3, [pc, #304]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800790c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007910:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007918:	4948      	ldr	r1, [pc, #288]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800791a:	4313      	orrs	r3, r2
 800791c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007928:	2b00      	cmp	r3, #0
 800792a:	d015      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800792c:	4b43      	ldr	r3, [pc, #268]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800792e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007932:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800793a:	4940      	ldr	r1, [pc, #256]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800793c:	4313      	orrs	r3, r2
 800793e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800794a:	d105      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800794c:	4b3b      	ldr	r3, [pc, #236]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	4a3a      	ldr	r2, [pc, #232]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007952:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007956:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007960:	2b00      	cmp	r3, #0
 8007962:	d015      	beq.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007964:	4b35      	ldr	r3, [pc, #212]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800796a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007972:	4932      	ldr	r1, [pc, #200]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007974:	4313      	orrs	r3, r2
 8007976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800797e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007982:	d105      	bne.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007984:	4b2d      	ldr	r3, [pc, #180]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	4a2c      	ldr	r2, [pc, #176]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800798a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800798e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007998:	2b00      	cmp	r3, #0
 800799a:	d015      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800799c:	4b27      	ldr	r3, [pc, #156]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800799e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079a2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079aa:	4924      	ldr	r1, [pc, #144]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079ac:	4313      	orrs	r3, r2
 80079ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079ba:	d105      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079bc:	4b1f      	ldr	r3, [pc, #124]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	4a1e      	ldr	r2, [pc, #120]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079c6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d015      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079d4:	4b19      	ldr	r3, [pc, #100]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e2:	4916      	ldr	r1, [pc, #88]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80079f2:	d105      	bne.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079f4:	4b11      	ldr	r3, [pc, #68]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	4a10      	ldr	r2, [pc, #64]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80079fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80079fe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d019      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a1a:	4908      	ldr	r1, [pc, #32]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a2a:	d109      	bne.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a2c:	4b03      	ldr	r3, [pc, #12]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	4a02      	ldr	r2, [pc, #8]	@ (8007a3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007a32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a36:	60d3      	str	r3, [r2, #12]
 8007a38:	e002      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007a3a:	bf00      	nop
 8007a3c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d015      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007a4c:	4b29      	ldr	r3, [pc, #164]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a52:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a5a:	4926      	ldr	r1, [pc, #152]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a6a:	d105      	bne.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007a6c:	4b21      	ldr	r3, [pc, #132]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	4a20      	ldr	r2, [pc, #128]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a76:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d015      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007a84:	4b1b      	ldr	r3, [pc, #108]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a8a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a92:	4918      	ldr	r1, [pc, #96]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007a94:	4313      	orrs	r3, r2
 8007a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa2:	d105      	bne.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007aa4:	4b13      	ldr	r3, [pc, #76]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	4a12      	ldr	r2, [pc, #72]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d015      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007abc:	4b0d      	ldr	r3, [pc, #52]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007abe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007ac2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aca:	490a      	ldr	r1, [pc, #40]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ad6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ada:	d105      	bne.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007adc:	4b05      	ldr	r3, [pc, #20]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	4a04      	ldr	r2, [pc, #16]	@ (8007af4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007ae6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007ae8:	7cbb      	ldrb	r3, [r7, #18]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3718      	adds	r7, #24
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	40021000 	.word	0x40021000

08007af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	e054      	b.n	8007bb4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d111      	bne.n	8007b3a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 fee2 	bl	80098e8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d102      	bne.n	8007b32 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a23      	ldr	r2, [pc, #140]	@ (8007bbc <HAL_TIM_Base_Init+0xc4>)
 8007b30:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	3304      	adds	r3, #4
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	f001 fa2b 	bl	8008fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3708      	adds	r7, #8
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	08003f7d 	.word	0x08003f7d

08007bc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d001      	beq.n	8007bd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e04c      	b.n	8007c72 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a26      	ldr	r2, [pc, #152]	@ (8007c80 <HAL_TIM_Base_Start+0xc0>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d022      	beq.n	8007c30 <HAL_TIM_Base_Start+0x70>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bf2:	d01d      	beq.n	8007c30 <HAL_TIM_Base_Start+0x70>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a22      	ldr	r2, [pc, #136]	@ (8007c84 <HAL_TIM_Base_Start+0xc4>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d018      	beq.n	8007c30 <HAL_TIM_Base_Start+0x70>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a21      	ldr	r2, [pc, #132]	@ (8007c88 <HAL_TIM_Base_Start+0xc8>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d013      	beq.n	8007c30 <HAL_TIM_Base_Start+0x70>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8007c8c <HAL_TIM_Base_Start+0xcc>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d00e      	beq.n	8007c30 <HAL_TIM_Base_Start+0x70>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a1e      	ldr	r2, [pc, #120]	@ (8007c90 <HAL_TIM_Base_Start+0xd0>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d009      	beq.n	8007c30 <HAL_TIM_Base_Start+0x70>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a1c      	ldr	r2, [pc, #112]	@ (8007c94 <HAL_TIM_Base_Start+0xd4>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d004      	beq.n	8007c30 <HAL_TIM_Base_Start+0x70>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8007c98 <HAL_TIM_Base_Start+0xd8>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d115      	bne.n	8007c5c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	4b19      	ldr	r3, [pc, #100]	@ (8007c9c <HAL_TIM_Base_Start+0xdc>)
 8007c38:	4013      	ands	r3, r2
 8007c3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2b06      	cmp	r3, #6
 8007c40:	d015      	beq.n	8007c6e <HAL_TIM_Base_Start+0xae>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c48:	d011      	beq.n	8007c6e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f042 0201 	orr.w	r2, r2, #1
 8007c58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c5a:	e008      	b.n	8007c6e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f042 0201 	orr.w	r2, r2, #1
 8007c6a:	601a      	str	r2, [r3, #0]
 8007c6c:	e000      	b.n	8007c70 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	40012c00 	.word	0x40012c00
 8007c84:	40000400 	.word	0x40000400
 8007c88:	40000800 	.word	0x40000800
 8007c8c:	40000c00 	.word	0x40000c00
 8007c90:	40013400 	.word	0x40013400
 8007c94:	40014000 	.word	0x40014000
 8007c98:	40015000 	.word	0x40015000
 8007c9c:	00010007 	.word	0x00010007

08007ca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d001      	beq.n	8007cb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e054      	b.n	8007d62 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f042 0201 	orr.w	r2, r2, #1
 8007cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a26      	ldr	r2, [pc, #152]	@ (8007d70 <HAL_TIM_Base_Start_IT+0xd0>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d022      	beq.n	8007d20 <HAL_TIM_Base_Start_IT+0x80>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ce2:	d01d      	beq.n	8007d20 <HAL_TIM_Base_Start_IT+0x80>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a22      	ldr	r2, [pc, #136]	@ (8007d74 <HAL_TIM_Base_Start_IT+0xd4>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d018      	beq.n	8007d20 <HAL_TIM_Base_Start_IT+0x80>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a21      	ldr	r2, [pc, #132]	@ (8007d78 <HAL_TIM_Base_Start_IT+0xd8>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d013      	beq.n	8007d20 <HAL_TIM_Base_Start_IT+0x80>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a1f      	ldr	r2, [pc, #124]	@ (8007d7c <HAL_TIM_Base_Start_IT+0xdc>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d00e      	beq.n	8007d20 <HAL_TIM_Base_Start_IT+0x80>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a1e      	ldr	r2, [pc, #120]	@ (8007d80 <HAL_TIM_Base_Start_IT+0xe0>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d009      	beq.n	8007d20 <HAL_TIM_Base_Start_IT+0x80>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a1c      	ldr	r2, [pc, #112]	@ (8007d84 <HAL_TIM_Base_Start_IT+0xe4>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d004      	beq.n	8007d20 <HAL_TIM_Base_Start_IT+0x80>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a1b      	ldr	r2, [pc, #108]	@ (8007d88 <HAL_TIM_Base_Start_IT+0xe8>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d115      	bne.n	8007d4c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689a      	ldr	r2, [r3, #8]
 8007d26:	4b19      	ldr	r3, [pc, #100]	@ (8007d8c <HAL_TIM_Base_Start_IT+0xec>)
 8007d28:	4013      	ands	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b06      	cmp	r3, #6
 8007d30:	d015      	beq.n	8007d5e <HAL_TIM_Base_Start_IT+0xbe>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d38:	d011      	beq.n	8007d5e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f042 0201 	orr.w	r2, r2, #1
 8007d48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d4a:	e008      	b.n	8007d5e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 0201 	orr.w	r2, r2, #1
 8007d5a:	601a      	str	r2, [r3, #0]
 8007d5c:	e000      	b.n	8007d60 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3714      	adds	r7, #20
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	40012c00 	.word	0x40012c00
 8007d74:	40000400 	.word	0x40000400
 8007d78:	40000800 	.word	0x40000800
 8007d7c:	40000c00 	.word	0x40000c00
 8007d80:	40013400 	.word	0x40013400
 8007d84:	40014000 	.word	0x40014000
 8007d88:	40015000 	.word	0x40015000
 8007d8c:	00010007 	.word	0x00010007

08007d90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e054      	b.n	8007e4c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d111      	bne.n	8007dd2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2200      	movs	r2, #0
 8007db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f001 fd96 	bl	80098e8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d102      	bne.n	8007dca <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a23      	ldr	r2, [pc, #140]	@ (8007e54 <HAL_TIM_PWM_Init+0xc4>)
 8007dc8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3304      	adds	r3, #4
 8007de2:	4619      	mov	r1, r3
 8007de4:	4610      	mov	r0, r2
 8007de6:	f001 f8df 	bl	8008fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3708      	adds	r7, #8
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	08003f31 	.word	0x08003f31

08007e58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d109      	bne.n	8007e7c <HAL_TIM_PWM_Start+0x24>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	bf14      	ite	ne
 8007e74:	2301      	movne	r3, #1
 8007e76:	2300      	moveq	r3, #0
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	e03c      	b.n	8007ef6 <HAL_TIM_PWM_Start+0x9e>
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d109      	bne.n	8007e96 <HAL_TIM_PWM_Start+0x3e>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	bf14      	ite	ne
 8007e8e:	2301      	movne	r3, #1
 8007e90:	2300      	moveq	r3, #0
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	e02f      	b.n	8007ef6 <HAL_TIM_PWM_Start+0x9e>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	2b08      	cmp	r3, #8
 8007e9a:	d109      	bne.n	8007eb0 <HAL_TIM_PWM_Start+0x58>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	bf14      	ite	ne
 8007ea8:	2301      	movne	r3, #1
 8007eaa:	2300      	moveq	r3, #0
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	e022      	b.n	8007ef6 <HAL_TIM_PWM_Start+0x9e>
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2b0c      	cmp	r3, #12
 8007eb4:	d109      	bne.n	8007eca <HAL_TIM_PWM_Start+0x72>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	bf14      	ite	ne
 8007ec2:	2301      	movne	r3, #1
 8007ec4:	2300      	moveq	r3, #0
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	e015      	b.n	8007ef6 <HAL_TIM_PWM_Start+0x9e>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b10      	cmp	r3, #16
 8007ece:	d109      	bne.n	8007ee4 <HAL_TIM_PWM_Start+0x8c>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	bf14      	ite	ne
 8007edc:	2301      	movne	r3, #1
 8007ede:	2300      	moveq	r3, #0
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	e008      	b.n	8007ef6 <HAL_TIM_PWM_Start+0x9e>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	bf14      	ite	ne
 8007ef0:	2301      	movne	r3, #1
 8007ef2:	2300      	moveq	r3, #0
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e0a6      	b.n	800804c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d104      	bne.n	8007f0e <HAL_TIM_PWM_Start+0xb6>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2202      	movs	r2, #2
 8007f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f0c:	e023      	b.n	8007f56 <HAL_TIM_PWM_Start+0xfe>
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	d104      	bne.n	8007f1e <HAL_TIM_PWM_Start+0xc6>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2202      	movs	r2, #2
 8007f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f1c:	e01b      	b.n	8007f56 <HAL_TIM_PWM_Start+0xfe>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b08      	cmp	r3, #8
 8007f22:	d104      	bne.n	8007f2e <HAL_TIM_PWM_Start+0xd6>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2202      	movs	r2, #2
 8007f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f2c:	e013      	b.n	8007f56 <HAL_TIM_PWM_Start+0xfe>
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	2b0c      	cmp	r3, #12
 8007f32:	d104      	bne.n	8007f3e <HAL_TIM_PWM_Start+0xe6>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f3c:	e00b      	b.n	8007f56 <HAL_TIM_PWM_Start+0xfe>
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2b10      	cmp	r3, #16
 8007f42:	d104      	bne.n	8007f4e <HAL_TIM_PWM_Start+0xf6>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007f4c:	e003      	b.n	8007f56 <HAL_TIM_PWM_Start+0xfe>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2202      	movs	r2, #2
 8007f52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	6839      	ldr	r1, [r7, #0]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f001 fc9c 	bl	800989c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a3a      	ldr	r2, [pc, #232]	@ (8008054 <HAL_TIM_PWM_Start+0x1fc>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d018      	beq.n	8007fa0 <HAL_TIM_PWM_Start+0x148>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a39      	ldr	r2, [pc, #228]	@ (8008058 <HAL_TIM_PWM_Start+0x200>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d013      	beq.n	8007fa0 <HAL_TIM_PWM_Start+0x148>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a37      	ldr	r2, [pc, #220]	@ (800805c <HAL_TIM_PWM_Start+0x204>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d00e      	beq.n	8007fa0 <HAL_TIM_PWM_Start+0x148>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a36      	ldr	r2, [pc, #216]	@ (8008060 <HAL_TIM_PWM_Start+0x208>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d009      	beq.n	8007fa0 <HAL_TIM_PWM_Start+0x148>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a34      	ldr	r2, [pc, #208]	@ (8008064 <HAL_TIM_PWM_Start+0x20c>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d004      	beq.n	8007fa0 <HAL_TIM_PWM_Start+0x148>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a33      	ldr	r2, [pc, #204]	@ (8008068 <HAL_TIM_PWM_Start+0x210>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d101      	bne.n	8007fa4 <HAL_TIM_PWM_Start+0x14c>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e000      	b.n	8007fa6 <HAL_TIM_PWM_Start+0x14e>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d007      	beq.n	8007fba <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007fb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a25      	ldr	r2, [pc, #148]	@ (8008054 <HAL_TIM_PWM_Start+0x1fc>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d022      	beq.n	800800a <HAL_TIM_PWM_Start+0x1b2>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fcc:	d01d      	beq.n	800800a <HAL_TIM_PWM_Start+0x1b2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a26      	ldr	r2, [pc, #152]	@ (800806c <HAL_TIM_PWM_Start+0x214>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d018      	beq.n	800800a <HAL_TIM_PWM_Start+0x1b2>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a24      	ldr	r2, [pc, #144]	@ (8008070 <HAL_TIM_PWM_Start+0x218>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d013      	beq.n	800800a <HAL_TIM_PWM_Start+0x1b2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a23      	ldr	r2, [pc, #140]	@ (8008074 <HAL_TIM_PWM_Start+0x21c>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d00e      	beq.n	800800a <HAL_TIM_PWM_Start+0x1b2>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a19      	ldr	r2, [pc, #100]	@ (8008058 <HAL_TIM_PWM_Start+0x200>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d009      	beq.n	800800a <HAL_TIM_PWM_Start+0x1b2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a18      	ldr	r2, [pc, #96]	@ (800805c <HAL_TIM_PWM_Start+0x204>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d004      	beq.n	800800a <HAL_TIM_PWM_Start+0x1b2>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a18      	ldr	r2, [pc, #96]	@ (8008068 <HAL_TIM_PWM_Start+0x210>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d115      	bne.n	8008036 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689a      	ldr	r2, [r3, #8]
 8008010:	4b19      	ldr	r3, [pc, #100]	@ (8008078 <HAL_TIM_PWM_Start+0x220>)
 8008012:	4013      	ands	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2b06      	cmp	r3, #6
 800801a:	d015      	beq.n	8008048 <HAL_TIM_PWM_Start+0x1f0>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008022:	d011      	beq.n	8008048 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0201 	orr.w	r2, r2, #1
 8008032:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008034:	e008      	b.n	8008048 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f042 0201 	orr.w	r2, r2, #1
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	e000      	b.n	800804a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008048:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	40012c00 	.word	0x40012c00
 8008058:	40013400 	.word	0x40013400
 800805c:	40014000 	.word	0x40014000
 8008060:	40014400 	.word	0x40014400
 8008064:	40014800 	.word	0x40014800
 8008068:	40015000 	.word	0x40015000
 800806c:	40000400 	.word	0x40000400
 8008070:	40000800 	.word	0x40000800
 8008074:	40000c00 	.word	0x40000c00
 8008078:	00010007 	.word	0x00010007

0800807c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d101      	bne.n	8008090 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e04c      	b.n	800812a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008096:	b2db      	uxtb	r3, r3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d111      	bne.n	80080c0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 fc1f 	bl	80098e8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d102      	bne.n	80080b8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a1f      	ldr	r2, [pc, #124]	@ (8008134 <HAL_TIM_OnePulse_Init+0xb8>)
 80080b6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	3304      	adds	r3, #4
 80080d0:	4619      	mov	r1, r3
 80080d2:	4610      	mov	r0, r2
 80080d4:	f000 ff68 	bl	8008fa8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f022 0208 	bic.w	r2, r2, #8
 80080e6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6819      	ldr	r1, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	430a      	orrs	r2, r1
 80080f6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	08008139 	.word	0x08008139

08008138 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800815c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008164:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800816c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008174:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d108      	bne.n	800818e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800817c:	7bbb      	ldrb	r3, [r7, #14]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d105      	bne.n	800818e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008182:	7b7b      	ldrb	r3, [r7, #13]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d102      	bne.n	800818e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008188:	7b3b      	ldrb	r3, [r7, #12]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d001      	beq.n	8008192 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e059      	b.n	8008246 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2202      	movs	r2, #2
 8008196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2202      	movs	r2, #2
 800819e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2202      	movs	r2, #2
 80081a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2202      	movs	r2, #2
 80081ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68da      	ldr	r2, [r3, #12]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f042 0202 	orr.w	r2, r2, #2
 80081c0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68da      	ldr	r2, [r3, #12]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f042 0204 	orr.w	r2, r2, #4
 80081d0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2201      	movs	r2, #1
 80081d8:	2100      	movs	r1, #0
 80081da:	4618      	mov	r0, r3
 80081dc:	f001 fb5e 	bl	800989c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2201      	movs	r2, #1
 80081e6:	2104      	movs	r1, #4
 80081e8:	4618      	mov	r0, r3
 80081ea:	f001 fb57 	bl	800989c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a17      	ldr	r2, [pc, #92]	@ (8008250 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d018      	beq.n	800822a <HAL_TIM_OnePulse_Start_IT+0xde>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a15      	ldr	r2, [pc, #84]	@ (8008254 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d013      	beq.n	800822a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a14      	ldr	r2, [pc, #80]	@ (8008258 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00e      	beq.n	800822a <HAL_TIM_OnePulse_Start_IT+0xde>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a12      	ldr	r2, [pc, #72]	@ (800825c <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d009      	beq.n	800822a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a11      	ldr	r2, [pc, #68]	@ (8008260 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d004      	beq.n	800822a <HAL_TIM_OnePulse_Start_IT+0xde>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a0f      	ldr	r2, [pc, #60]	@ (8008264 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d101      	bne.n	800822e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800822a:	2301      	movs	r3, #1
 800822c:	e000      	b.n	8008230 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800822e:	2300      	movs	r3, #0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d007      	beq.n	8008244 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008242:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	40012c00 	.word	0x40012c00
 8008254:	40013400 	.word	0x40013400
 8008258:	40014000 	.word	0x40014000
 800825c:	40014400 	.word	0x40014400
 8008260:	40014800 	.word	0x40014800
 8008264:	40015000 	.word	0x40015000

08008268 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d101      	bne.n	800827c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e0a2      	b.n	80083c2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008282:	b2db      	uxtb	r3, r3
 8008284:	2b00      	cmp	r3, #0
 8008286:	d111      	bne.n	80082ac <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 fb29 	bl	80098e8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800829a:	2b00      	cmp	r3, #0
 800829c:	d102      	bne.n	80082a4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a4a      	ldr	r2, [pc, #296]	@ (80083cc <HAL_TIM_Encoder_Init+0x164>)
 80082a2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2202      	movs	r2, #2
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	6812      	ldr	r2, [r2, #0]
 80082be:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80082c2:	f023 0307 	bic.w	r3, r3, #7
 80082c6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	3304      	adds	r3, #4
 80082d0:	4619      	mov	r1, r3
 80082d2:	4610      	mov	r0, r2
 80082d4:	f000 fe68 	bl	8008fa8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008300:	f023 0303 	bic.w	r3, r3, #3
 8008304:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	021b      	lsls	r3, r3, #8
 8008310:	4313      	orrs	r3, r2
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	4313      	orrs	r3, r2
 8008316:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800831e:	f023 030c 	bic.w	r3, r3, #12
 8008322:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800832a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800832e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	68da      	ldr	r2, [r3, #12]
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	021b      	lsls	r3, r3, #8
 800833a:	4313      	orrs	r3, r2
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	4313      	orrs	r3, r2
 8008340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	011a      	lsls	r2, r3, #4
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	6a1b      	ldr	r3, [r3, #32]
 800834c:	031b      	lsls	r3, r3, #12
 800834e:	4313      	orrs	r3, r2
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	4313      	orrs	r3, r2
 8008354:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800835c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008364:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	695b      	ldr	r3, [r3, #20]
 800836e:	011b      	lsls	r3, r3, #4
 8008370:	4313      	orrs	r3, r2
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	4313      	orrs	r3, r2
 8008376:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	697a      	ldr	r2, [r7, #20]
 800837e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3718      	adds	r7, #24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	0800404d 	.word	0x0800404d

080083d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80083e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80083f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80083f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d110      	bne.n	8008422 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008400:	7bfb      	ldrb	r3, [r7, #15]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d102      	bne.n	800840c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008406:	7b7b      	ldrb	r3, [r7, #13]
 8008408:	2b01      	cmp	r3, #1
 800840a:	d001      	beq.n	8008410 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e069      	b.n	80084e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2202      	movs	r2, #2
 8008414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008420:	e031      	b.n	8008486 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	2b04      	cmp	r3, #4
 8008426:	d110      	bne.n	800844a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d102      	bne.n	8008434 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800842e:	7b3b      	ldrb	r3, [r7, #12]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d001      	beq.n	8008438 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e055      	b.n	80084e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2202      	movs	r2, #2
 8008444:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008448:	e01d      	b.n	8008486 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800844a:	7bfb      	ldrb	r3, [r7, #15]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d108      	bne.n	8008462 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008450:	7bbb      	ldrb	r3, [r7, #14]
 8008452:	2b01      	cmp	r3, #1
 8008454:	d105      	bne.n	8008462 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008456:	7b7b      	ldrb	r3, [r7, #13]
 8008458:	2b01      	cmp	r3, #1
 800845a:	d102      	bne.n	8008462 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800845c:	7b3b      	ldrb	r3, [r7, #12]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d001      	beq.n	8008466 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e03e      	b.n	80084e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2202      	movs	r2, #2
 800846a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2202      	movs	r2, #2
 8008472:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2202      	movs	r2, #2
 800847a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2202      	movs	r2, #2
 8008482:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <HAL_TIM_Encoder_Start+0xc4>
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	2b04      	cmp	r3, #4
 8008490:	d008      	beq.n	80084a4 <HAL_TIM_Encoder_Start+0xd4>
 8008492:	e00f      	b.n	80084b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2201      	movs	r2, #1
 800849a:	2100      	movs	r1, #0
 800849c:	4618      	mov	r0, r3
 800849e:	f001 f9fd 	bl	800989c <TIM_CCxChannelCmd>
      break;
 80084a2:	e016      	b.n	80084d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2201      	movs	r2, #1
 80084aa:	2104      	movs	r1, #4
 80084ac:	4618      	mov	r0, r3
 80084ae:	f001 f9f5 	bl	800989c <TIM_CCxChannelCmd>
      break;
 80084b2:	e00e      	b.n	80084d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2201      	movs	r2, #1
 80084ba:	2100      	movs	r1, #0
 80084bc:	4618      	mov	r0, r3
 80084be:	f001 f9ed 	bl	800989c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2201      	movs	r2, #1
 80084c8:	2104      	movs	r1, #4
 80084ca:	4618      	mov	r0, r3
 80084cc:	f001 f9e6 	bl	800989c <TIM_CCxChannelCmd>
      break;
 80084d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f042 0201 	orr.w	r2, r2, #1
 80084e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d026      	beq.n	800855c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f003 0302 	and.w	r3, r3, #2
 8008514:	2b00      	cmp	r3, #0
 8008516:	d021      	beq.n	800855c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f06f 0202 	mvn.w	r2, #2
 8008520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2201      	movs	r2, #1
 8008526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	699b      	ldr	r3, [r3, #24]
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d005      	beq.n	8008542 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800853c:	6878      	ldr	r0, [r7, #4]
 800853e:	4798      	blx	r3
 8008540:	e009      	b.n	8008556 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f003 0304 	and.w	r3, r3, #4
 8008562:	2b00      	cmp	r3, #0
 8008564:	d026      	beq.n	80085b4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f003 0304 	and.w	r3, r3, #4
 800856c:	2b00      	cmp	r3, #0
 800856e:	d021      	beq.n	80085b4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f06f 0204 	mvn.w	r2, #4
 8008578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2202      	movs	r2, #2
 800857e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800858a:	2b00      	cmp	r3, #0
 800858c:	d005      	beq.n	800859a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	4798      	blx	r3
 8008598:	e009      	b.n	80085ae <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	f003 0308 	and.w	r3, r3, #8
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d026      	beq.n	800860c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f003 0308 	and.w	r3, r3, #8
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d021      	beq.n	800860c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f06f 0208 	mvn.w	r2, #8
 80085d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2204      	movs	r2, #4
 80085d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	f003 0303 	and.w	r3, r3, #3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d005      	beq.n	80085f2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	4798      	blx	r3
 80085f0:	e009      	b.n	8008606 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f003 0310 	and.w	r3, r3, #16
 8008612:	2b00      	cmp	r3, #0
 8008614:	d026      	beq.n	8008664 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f003 0310 	and.w	r3, r3, #16
 800861c:	2b00      	cmp	r3, #0
 800861e:	d021      	beq.n	8008664 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f06f 0210 	mvn.w	r2, #16
 8008628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2208      	movs	r2, #8
 800862e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800863a:	2b00      	cmp	r3, #0
 800863c:	d005      	beq.n	800864a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	4798      	blx	r3
 8008648:	e009      	b.n	800865e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00e      	beq.n	800868c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	2b00      	cmp	r3, #0
 8008676:	d009      	beq.n	800868c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f06f 0201 	mvn.w	r2, #1
 8008680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008692:	2b00      	cmp	r3, #0
 8008694:	d104      	bne.n	80086a0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00e      	beq.n	80086be <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d009      	beq.n	80086be <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80086b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00e      	beq.n	80086e6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d009      	beq.n	80086e6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80086da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00e      	beq.n	800870e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d009      	beq.n	800870e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	f003 0320 	and.w	r3, r3, #32
 8008714:	2b00      	cmp	r3, #0
 8008716:	d00e      	beq.n	8008736 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f003 0320 	and.w	r3, r3, #32
 800871e:	2b00      	cmp	r3, #0
 8008720:	d009      	beq.n	8008736 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f06f 0220 	mvn.w	r2, #32
 800872a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00e      	beq.n	800875e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d009      	beq.n	800875e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00e      	beq.n	8008786 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d009      	beq.n	8008786 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800877a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00e      	beq.n	80087ae <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d009      	beq.n	80087ae <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80087a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00e      	beq.n	80087d6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d009      	beq.n	80087d6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80087ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087d6:	bf00      	nop
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
	...

080087e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087ec:	2300      	movs	r3, #0
 80087ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d101      	bne.n	80087fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087fa:	2302      	movs	r3, #2
 80087fc:	e0ff      	b.n	80089fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2b14      	cmp	r3, #20
 800880a:	f200 80f0 	bhi.w	80089ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800880e:	a201      	add	r2, pc, #4	@ (adr r2, 8008814 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008814:	08008869 	.word	0x08008869
 8008818:	080089ef 	.word	0x080089ef
 800881c:	080089ef 	.word	0x080089ef
 8008820:	080089ef 	.word	0x080089ef
 8008824:	080088a9 	.word	0x080088a9
 8008828:	080089ef 	.word	0x080089ef
 800882c:	080089ef 	.word	0x080089ef
 8008830:	080089ef 	.word	0x080089ef
 8008834:	080088eb 	.word	0x080088eb
 8008838:	080089ef 	.word	0x080089ef
 800883c:	080089ef 	.word	0x080089ef
 8008840:	080089ef 	.word	0x080089ef
 8008844:	0800892b 	.word	0x0800892b
 8008848:	080089ef 	.word	0x080089ef
 800884c:	080089ef 	.word	0x080089ef
 8008850:	080089ef 	.word	0x080089ef
 8008854:	0800896d 	.word	0x0800896d
 8008858:	080089ef 	.word	0x080089ef
 800885c:	080089ef 	.word	0x080089ef
 8008860:	080089ef 	.word	0x080089ef
 8008864:	080089ad 	.word	0x080089ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68b9      	ldr	r1, [r7, #8]
 800886e:	4618      	mov	r0, r3
 8008870:	f000 fc4e 	bl	8009110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	699a      	ldr	r2, [r3, #24]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f042 0208 	orr.w	r2, r2, #8
 8008882:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	699a      	ldr	r2, [r3, #24]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f022 0204 	bic.w	r2, r2, #4
 8008892:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6999      	ldr	r1, [r3, #24]
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	691a      	ldr	r2, [r3, #16]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	619a      	str	r2, [r3, #24]
      break;
 80088a6:	e0a5      	b.n	80089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68b9      	ldr	r1, [r7, #8]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 fcc8 	bl	8009244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	699a      	ldr	r2, [r3, #24]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80088c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	699a      	ldr	r2, [r3, #24]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6999      	ldr	r1, [r3, #24]
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	691b      	ldr	r3, [r3, #16]
 80088de:	021a      	lsls	r2, r3, #8
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	430a      	orrs	r2, r1
 80088e6:	619a      	str	r2, [r3, #24]
      break;
 80088e8:	e084      	b.n	80089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 fd3b 	bl	800936c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	69da      	ldr	r2, [r3, #28]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f042 0208 	orr.w	r2, r2, #8
 8008904:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	69da      	ldr	r2, [r3, #28]
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f022 0204 	bic.w	r2, r2, #4
 8008914:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	69d9      	ldr	r1, [r3, #28]
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	691a      	ldr	r2, [r3, #16]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	430a      	orrs	r2, r1
 8008926:	61da      	str	r2, [r3, #28]
      break;
 8008928:	e064      	b.n	80089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68b9      	ldr	r1, [r7, #8]
 8008930:	4618      	mov	r0, r3
 8008932:	f000 fdad 	bl	8009490 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	69da      	ldr	r2, [r3, #28]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	69da      	ldr	r2, [r3, #28]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	69d9      	ldr	r1, [r3, #28]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	021a      	lsls	r2, r3, #8
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	61da      	str	r2, [r3, #28]
      break;
 800896a:	e043      	b.n	80089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68b9      	ldr	r1, [r7, #8]
 8008972:	4618      	mov	r0, r3
 8008974:	f000 fe20 	bl	80095b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f042 0208 	orr.w	r2, r2, #8
 8008986:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f022 0204 	bic.w	r2, r2, #4
 8008996:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	691a      	ldr	r2, [r3, #16]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80089aa:	e023      	b.n	80089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68b9      	ldr	r1, [r7, #8]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fe6a 	bl	800968c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089d6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	021a      	lsls	r2, r3, #8
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	430a      	orrs	r2, r1
 80089ea:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80089ec:	e002      	b.n	80089f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	75fb      	strb	r3, [r7, #23]
      break;
 80089f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3718      	adds	r7, #24
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop

08008a08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d101      	bne.n	8008a24 <HAL_TIM_ConfigClockSource+0x1c>
 8008a20:	2302      	movs	r3, #2
 8008a22:	e0f6      	b.n	8008c12 <HAL_TIM_ConfigClockSource+0x20a>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2202      	movs	r2, #2
 8008a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008a42:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68ba      	ldr	r2, [r7, #8]
 8008a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a6f      	ldr	r2, [pc, #444]	@ (8008c1c <HAL_TIM_ConfigClockSource+0x214>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	f000 80c1 	beq.w	8008be6 <HAL_TIM_ConfigClockSource+0x1de>
 8008a64:	4a6d      	ldr	r2, [pc, #436]	@ (8008c1c <HAL_TIM_ConfigClockSource+0x214>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	f200 80c6 	bhi.w	8008bf8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a6c:	4a6c      	ldr	r2, [pc, #432]	@ (8008c20 <HAL_TIM_ConfigClockSource+0x218>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	f000 80b9 	beq.w	8008be6 <HAL_TIM_ConfigClockSource+0x1de>
 8008a74:	4a6a      	ldr	r2, [pc, #424]	@ (8008c20 <HAL_TIM_ConfigClockSource+0x218>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	f200 80be 	bhi.w	8008bf8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a7c:	4a69      	ldr	r2, [pc, #420]	@ (8008c24 <HAL_TIM_ConfigClockSource+0x21c>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	f000 80b1 	beq.w	8008be6 <HAL_TIM_ConfigClockSource+0x1de>
 8008a84:	4a67      	ldr	r2, [pc, #412]	@ (8008c24 <HAL_TIM_ConfigClockSource+0x21c>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	f200 80b6 	bhi.w	8008bf8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a8c:	4a66      	ldr	r2, [pc, #408]	@ (8008c28 <HAL_TIM_ConfigClockSource+0x220>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	f000 80a9 	beq.w	8008be6 <HAL_TIM_ConfigClockSource+0x1de>
 8008a94:	4a64      	ldr	r2, [pc, #400]	@ (8008c28 <HAL_TIM_ConfigClockSource+0x220>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	f200 80ae 	bhi.w	8008bf8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008a9c:	4a63      	ldr	r2, [pc, #396]	@ (8008c2c <HAL_TIM_ConfigClockSource+0x224>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	f000 80a1 	beq.w	8008be6 <HAL_TIM_ConfigClockSource+0x1de>
 8008aa4:	4a61      	ldr	r2, [pc, #388]	@ (8008c2c <HAL_TIM_ConfigClockSource+0x224>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	f200 80a6 	bhi.w	8008bf8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008aac:	4a60      	ldr	r2, [pc, #384]	@ (8008c30 <HAL_TIM_ConfigClockSource+0x228>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	f000 8099 	beq.w	8008be6 <HAL_TIM_ConfigClockSource+0x1de>
 8008ab4:	4a5e      	ldr	r2, [pc, #376]	@ (8008c30 <HAL_TIM_ConfigClockSource+0x228>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	f200 809e 	bhi.w	8008bf8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008abc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008ac0:	f000 8091 	beq.w	8008be6 <HAL_TIM_ConfigClockSource+0x1de>
 8008ac4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008ac8:	f200 8096 	bhi.w	8008bf8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008acc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ad0:	f000 8089 	beq.w	8008be6 <HAL_TIM_ConfigClockSource+0x1de>
 8008ad4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ad8:	f200 808e 	bhi.w	8008bf8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008adc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ae0:	d03e      	beq.n	8008b60 <HAL_TIM_ConfigClockSource+0x158>
 8008ae2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ae6:	f200 8087 	bhi.w	8008bf8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008aee:	f000 8086 	beq.w	8008bfe <HAL_TIM_ConfigClockSource+0x1f6>
 8008af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008af6:	d87f      	bhi.n	8008bf8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008af8:	2b70      	cmp	r3, #112	@ 0x70
 8008afa:	d01a      	beq.n	8008b32 <HAL_TIM_ConfigClockSource+0x12a>
 8008afc:	2b70      	cmp	r3, #112	@ 0x70
 8008afe:	d87b      	bhi.n	8008bf8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b00:	2b60      	cmp	r3, #96	@ 0x60
 8008b02:	d050      	beq.n	8008ba6 <HAL_TIM_ConfigClockSource+0x19e>
 8008b04:	2b60      	cmp	r3, #96	@ 0x60
 8008b06:	d877      	bhi.n	8008bf8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b08:	2b50      	cmp	r3, #80	@ 0x50
 8008b0a:	d03c      	beq.n	8008b86 <HAL_TIM_ConfigClockSource+0x17e>
 8008b0c:	2b50      	cmp	r3, #80	@ 0x50
 8008b0e:	d873      	bhi.n	8008bf8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b10:	2b40      	cmp	r3, #64	@ 0x40
 8008b12:	d058      	beq.n	8008bc6 <HAL_TIM_ConfigClockSource+0x1be>
 8008b14:	2b40      	cmp	r3, #64	@ 0x40
 8008b16:	d86f      	bhi.n	8008bf8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b18:	2b30      	cmp	r3, #48	@ 0x30
 8008b1a:	d064      	beq.n	8008be6 <HAL_TIM_ConfigClockSource+0x1de>
 8008b1c:	2b30      	cmp	r3, #48	@ 0x30
 8008b1e:	d86b      	bhi.n	8008bf8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b20:	2b20      	cmp	r3, #32
 8008b22:	d060      	beq.n	8008be6 <HAL_TIM_ConfigClockSource+0x1de>
 8008b24:	2b20      	cmp	r3, #32
 8008b26:	d867      	bhi.n	8008bf8 <HAL_TIM_ConfigClockSource+0x1f0>
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d05c      	beq.n	8008be6 <HAL_TIM_ConfigClockSource+0x1de>
 8008b2c:	2b10      	cmp	r3, #16
 8008b2e:	d05a      	beq.n	8008be6 <HAL_TIM_ConfigClockSource+0x1de>
 8008b30:	e062      	b.n	8008bf8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b42:	f000 fe8b 	bl	800985c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008b54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	609a      	str	r2, [r3, #8]
      break;
 8008b5e:	e04f      	b.n	8008c00 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008b70:	f000 fe74 	bl	800985c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	689a      	ldr	r2, [r3, #8]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008b82:	609a      	str	r2, [r3, #8]
      break;
 8008b84:	e03c      	b.n	8008c00 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b92:	461a      	mov	r2, r3
 8008b94:	f000 fde6 	bl	8009764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2150      	movs	r1, #80	@ 0x50
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f000 fe3f 	bl	8009822 <TIM_ITRx_SetConfig>
      break;
 8008ba4:	e02c      	b.n	8008c00 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f000 fe05 	bl	80097c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2160      	movs	r1, #96	@ 0x60
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 fe2f 	bl	8009822 <TIM_ITRx_SetConfig>
      break;
 8008bc4:	e01c      	b.n	8008c00 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	f000 fdc6 	bl	8009764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2140      	movs	r1, #64	@ 0x40
 8008bde:	4618      	mov	r0, r3
 8008be0:	f000 fe1f 	bl	8009822 <TIM_ITRx_SetConfig>
      break;
 8008be4:	e00c      	b.n	8008c00 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	4610      	mov	r0, r2
 8008bf2:	f000 fe16 	bl	8009822 <TIM_ITRx_SetConfig>
      break;
 8008bf6:	e003      	b.n	8008c00 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8008bfc:	e000      	b.n	8008c00 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008bfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	00100070 	.word	0x00100070
 8008c20:	00100060 	.word	0x00100060
 8008c24:	00100050 	.word	0x00100050
 8008c28:	00100040 	.word	0x00100040
 8008c2c:	00100030 	.word	0x00100030
 8008c30:	00100020 	.word	0x00100020

08008c34 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c64:	bf00      	nop
 8008c66:	370c      	adds	r7, #12
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b083      	sub	sp, #12
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008c78:	bf00      	nop
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c8c:	bf00      	nop
 8008c8e:	370c      	adds	r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b087      	sub	sp, #28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	607a      	str	r2, [r7, #4]
 8008cf4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e14a      	b.n	8008f9a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	f040 80dd 	bne.w	8008ecc <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8008d12:	7afb      	ldrb	r3, [r7, #11]
 8008d14:	2b1f      	cmp	r3, #31
 8008d16:	f200 80d6 	bhi.w	8008ec6 <HAL_TIM_RegisterCallback+0x1de>
 8008d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d20 <HAL_TIM_RegisterCallback+0x38>)
 8008d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d20:	08008da1 	.word	0x08008da1
 8008d24:	08008da9 	.word	0x08008da9
 8008d28:	08008db1 	.word	0x08008db1
 8008d2c:	08008db9 	.word	0x08008db9
 8008d30:	08008dc1 	.word	0x08008dc1
 8008d34:	08008dc9 	.word	0x08008dc9
 8008d38:	08008dd1 	.word	0x08008dd1
 8008d3c:	08008dd9 	.word	0x08008dd9
 8008d40:	08008de1 	.word	0x08008de1
 8008d44:	08008de9 	.word	0x08008de9
 8008d48:	08008df1 	.word	0x08008df1
 8008d4c:	08008df9 	.word	0x08008df9
 8008d50:	08008e01 	.word	0x08008e01
 8008d54:	08008e09 	.word	0x08008e09
 8008d58:	08008e13 	.word	0x08008e13
 8008d5c:	08008e1d 	.word	0x08008e1d
 8008d60:	08008e27 	.word	0x08008e27
 8008d64:	08008e31 	.word	0x08008e31
 8008d68:	08008e3b 	.word	0x08008e3b
 8008d6c:	08008e45 	.word	0x08008e45
 8008d70:	08008e4f 	.word	0x08008e4f
 8008d74:	08008e59 	.word	0x08008e59
 8008d78:	08008e63 	.word	0x08008e63
 8008d7c:	08008e6d 	.word	0x08008e6d
 8008d80:	08008e77 	.word	0x08008e77
 8008d84:	08008e81 	.word	0x08008e81
 8008d88:	08008e8b 	.word	0x08008e8b
 8008d8c:	08008e95 	.word	0x08008e95
 8008d90:	08008e9f 	.word	0x08008e9f
 8008d94:	08008ea9 	.word	0x08008ea9
 8008d98:	08008eb3 	.word	0x08008eb3
 8008d9c:	08008ebd 	.word	0x08008ebd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008da6:	e0f7      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008dae:	e0f3      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008db6:	e0ef      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008dbe:	e0eb      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008dc6:	e0e7      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	687a      	ldr	r2, [r7, #4]
 8008dcc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008dce:	e0e3      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008dd6:	e0df      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008dde:	e0db      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008de6:	e0d7      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008dee:	e0d3      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008df6:	e0cf      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008dfe:	e0cb      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008e06:	e0c7      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008e10:	e0c2      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8008e1a:	e0bd      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8008e24:	e0b8      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8008e2e:	e0b3      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8008e38:	e0ae      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008e42:	e0a9      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	687a      	ldr	r2, [r7, #4]
 8008e48:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008e4c:	e0a4      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008e56:	e09f      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008e60:	e09a      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008e6a:	e095      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008e74:	e090      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008e7e:	e08b      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008e88:	e086      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008e92:	e081      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008e9c:	e07c      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008ea6:	e077      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008eb0:	e072      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	687a      	ldr	r2, [r7, #4]
 8008eb6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008eba:	e06d      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008ec4:	e068      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	75fb      	strb	r3, [r7, #23]
        break;
 8008eca:	e065      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d15d      	bne.n	8008f94 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008ed8:	7afb      	ldrb	r3, [r7, #11]
 8008eda:	2b0d      	cmp	r3, #13
 8008edc:	d857      	bhi.n	8008f8e <HAL_TIM_RegisterCallback+0x2a6>
 8008ede:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee4 <HAL_TIM_RegisterCallback+0x1fc>)
 8008ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee4:	08008f1d 	.word	0x08008f1d
 8008ee8:	08008f25 	.word	0x08008f25
 8008eec:	08008f2d 	.word	0x08008f2d
 8008ef0:	08008f35 	.word	0x08008f35
 8008ef4:	08008f3d 	.word	0x08008f3d
 8008ef8:	08008f45 	.word	0x08008f45
 8008efc:	08008f4d 	.word	0x08008f4d
 8008f00:	08008f55 	.word	0x08008f55
 8008f04:	08008f5d 	.word	0x08008f5d
 8008f08:	08008f65 	.word	0x08008f65
 8008f0c:	08008f6d 	.word	0x08008f6d
 8008f10:	08008f75 	.word	0x08008f75
 8008f14:	08008f7d 	.word	0x08008f7d
 8008f18:	08008f85 	.word	0x08008f85
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008f22:	e039      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008f2a:	e035      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008f32:	e031      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008f3a:	e02d      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008f42:	e029      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008f4a:	e025      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008f52:	e021      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008f5a:	e01d      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008f62:	e019      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008f6a:	e015      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008f72:	e011      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008f7a:	e00d      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008f82:	e009      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008f8c:	e004      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	75fb      	strb	r3, [r7, #23]
        break;
 8008f92:	e001      	b.n	8008f98 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	371c      	adds	r7, #28
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr
 8008fa6:	bf00      	nop

08008fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	4a4c      	ldr	r2, [pc, #304]	@ (80090ec <TIM_Base_SetConfig+0x144>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d017      	beq.n	8008ff0 <TIM_Base_SetConfig+0x48>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fc6:	d013      	beq.n	8008ff0 <TIM_Base_SetConfig+0x48>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a49      	ldr	r2, [pc, #292]	@ (80090f0 <TIM_Base_SetConfig+0x148>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d00f      	beq.n	8008ff0 <TIM_Base_SetConfig+0x48>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a48      	ldr	r2, [pc, #288]	@ (80090f4 <TIM_Base_SetConfig+0x14c>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d00b      	beq.n	8008ff0 <TIM_Base_SetConfig+0x48>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a47      	ldr	r2, [pc, #284]	@ (80090f8 <TIM_Base_SetConfig+0x150>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d007      	beq.n	8008ff0 <TIM_Base_SetConfig+0x48>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a46      	ldr	r2, [pc, #280]	@ (80090fc <TIM_Base_SetConfig+0x154>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d003      	beq.n	8008ff0 <TIM_Base_SetConfig+0x48>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a45      	ldr	r2, [pc, #276]	@ (8009100 <TIM_Base_SetConfig+0x158>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d108      	bne.n	8009002 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a39      	ldr	r2, [pc, #228]	@ (80090ec <TIM_Base_SetConfig+0x144>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d023      	beq.n	8009052 <TIM_Base_SetConfig+0xaa>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009010:	d01f      	beq.n	8009052 <TIM_Base_SetConfig+0xaa>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a36      	ldr	r2, [pc, #216]	@ (80090f0 <TIM_Base_SetConfig+0x148>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d01b      	beq.n	8009052 <TIM_Base_SetConfig+0xaa>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a35      	ldr	r2, [pc, #212]	@ (80090f4 <TIM_Base_SetConfig+0x14c>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d017      	beq.n	8009052 <TIM_Base_SetConfig+0xaa>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a34      	ldr	r2, [pc, #208]	@ (80090f8 <TIM_Base_SetConfig+0x150>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d013      	beq.n	8009052 <TIM_Base_SetConfig+0xaa>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a33      	ldr	r2, [pc, #204]	@ (80090fc <TIM_Base_SetConfig+0x154>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d00f      	beq.n	8009052 <TIM_Base_SetConfig+0xaa>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a33      	ldr	r2, [pc, #204]	@ (8009104 <TIM_Base_SetConfig+0x15c>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d00b      	beq.n	8009052 <TIM_Base_SetConfig+0xaa>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a32      	ldr	r2, [pc, #200]	@ (8009108 <TIM_Base_SetConfig+0x160>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d007      	beq.n	8009052 <TIM_Base_SetConfig+0xaa>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a31      	ldr	r2, [pc, #196]	@ (800910c <TIM_Base_SetConfig+0x164>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d003      	beq.n	8009052 <TIM_Base_SetConfig+0xaa>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a2c      	ldr	r2, [pc, #176]	@ (8009100 <TIM_Base_SetConfig+0x158>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d108      	bne.n	8009064 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	4313      	orrs	r3, r2
 8009062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	4313      	orrs	r3, r2
 8009070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	689a      	ldr	r2, [r3, #8]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a18      	ldr	r2, [pc, #96]	@ (80090ec <TIM_Base_SetConfig+0x144>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d013      	beq.n	80090b8 <TIM_Base_SetConfig+0x110>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	4a1a      	ldr	r2, [pc, #104]	@ (80090fc <TIM_Base_SetConfig+0x154>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d00f      	beq.n	80090b8 <TIM_Base_SetConfig+0x110>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a1a      	ldr	r2, [pc, #104]	@ (8009104 <TIM_Base_SetConfig+0x15c>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d00b      	beq.n	80090b8 <TIM_Base_SetConfig+0x110>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a19      	ldr	r2, [pc, #100]	@ (8009108 <TIM_Base_SetConfig+0x160>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d007      	beq.n	80090b8 <TIM_Base_SetConfig+0x110>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4a18      	ldr	r2, [pc, #96]	@ (800910c <TIM_Base_SetConfig+0x164>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d003      	beq.n	80090b8 <TIM_Base_SetConfig+0x110>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a13      	ldr	r2, [pc, #76]	@ (8009100 <TIM_Base_SetConfig+0x158>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d103      	bne.n	80090c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	691a      	ldr	r2, [r3, #16]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d105      	bne.n	80090de <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	f023 0201 	bic.w	r2, r3, #1
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	611a      	str	r2, [r3, #16]
  }
}
 80090de:	bf00      	nop
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	40012c00 	.word	0x40012c00
 80090f0:	40000400 	.word	0x40000400
 80090f4:	40000800 	.word	0x40000800
 80090f8:	40000c00 	.word	0x40000c00
 80090fc:	40013400 	.word	0x40013400
 8009100:	40015000 	.word	0x40015000
 8009104:	40014000 	.word	0x40014000
 8009108:	40014400 	.word	0x40014400
 800910c:	40014800 	.word	0x40014800

08009110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009110:	b480      	push	{r7}
 8009112:	b087      	sub	sp, #28
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
 800911e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	f023 0201 	bic.w	r2, r3, #1
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800913e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f023 0303 	bic.w	r3, r3, #3
 800914a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68fa      	ldr	r2, [r7, #12]
 8009152:	4313      	orrs	r3, r2
 8009154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f023 0302 	bic.w	r3, r3, #2
 800915c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	4313      	orrs	r3, r2
 8009166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	4a30      	ldr	r2, [pc, #192]	@ (800922c <TIM_OC1_SetConfig+0x11c>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d013      	beq.n	8009198 <TIM_OC1_SetConfig+0x88>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a2f      	ldr	r2, [pc, #188]	@ (8009230 <TIM_OC1_SetConfig+0x120>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d00f      	beq.n	8009198 <TIM_OC1_SetConfig+0x88>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a2e      	ldr	r2, [pc, #184]	@ (8009234 <TIM_OC1_SetConfig+0x124>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d00b      	beq.n	8009198 <TIM_OC1_SetConfig+0x88>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	4a2d      	ldr	r2, [pc, #180]	@ (8009238 <TIM_OC1_SetConfig+0x128>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d007      	beq.n	8009198 <TIM_OC1_SetConfig+0x88>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4a2c      	ldr	r2, [pc, #176]	@ (800923c <TIM_OC1_SetConfig+0x12c>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d003      	beq.n	8009198 <TIM_OC1_SetConfig+0x88>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a2b      	ldr	r2, [pc, #172]	@ (8009240 <TIM_OC1_SetConfig+0x130>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d10c      	bne.n	80091b2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	f023 0308 	bic.w	r3, r3, #8
 800919e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	697a      	ldr	r2, [r7, #20]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	f023 0304 	bic.w	r3, r3, #4
 80091b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a1d      	ldr	r2, [pc, #116]	@ (800922c <TIM_OC1_SetConfig+0x11c>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d013      	beq.n	80091e2 <TIM_OC1_SetConfig+0xd2>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a1c      	ldr	r2, [pc, #112]	@ (8009230 <TIM_OC1_SetConfig+0x120>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d00f      	beq.n	80091e2 <TIM_OC1_SetConfig+0xd2>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a1b      	ldr	r2, [pc, #108]	@ (8009234 <TIM_OC1_SetConfig+0x124>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d00b      	beq.n	80091e2 <TIM_OC1_SetConfig+0xd2>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a1a      	ldr	r2, [pc, #104]	@ (8009238 <TIM_OC1_SetConfig+0x128>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d007      	beq.n	80091e2 <TIM_OC1_SetConfig+0xd2>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a19      	ldr	r2, [pc, #100]	@ (800923c <TIM_OC1_SetConfig+0x12c>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d003      	beq.n	80091e2 <TIM_OC1_SetConfig+0xd2>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4a18      	ldr	r2, [pc, #96]	@ (8009240 <TIM_OC1_SetConfig+0x130>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d111      	bne.n	8009206 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80091f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	693a      	ldr	r2, [r7, #16]
 80091f8:	4313      	orrs	r3, r2
 80091fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	4313      	orrs	r3, r2
 8009204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	685a      	ldr	r2, [r3, #4]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	621a      	str	r2, [r3, #32]
}
 8009220:	bf00      	nop
 8009222:	371c      	adds	r7, #28
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	40012c00 	.word	0x40012c00
 8009230:	40013400 	.word	0x40013400
 8009234:	40014000 	.word	0x40014000
 8009238:	40014400 	.word	0x40014400
 800923c:	40014800 	.word	0x40014800
 8009240:	40015000 	.word	0x40015000

08009244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009244:	b480      	push	{r7}
 8009246:	b087      	sub	sp, #28
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6a1b      	ldr	r3, [r3, #32]
 8009252:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a1b      	ldr	r3, [r3, #32]
 8009258:	f023 0210 	bic.w	r2, r3, #16
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009272:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800927e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	021b      	lsls	r3, r3, #8
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	4313      	orrs	r3, r2
 800928a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	f023 0320 	bic.w	r3, r3, #32
 8009292:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	011b      	lsls	r3, r3, #4
 800929a:	697a      	ldr	r2, [r7, #20]
 800929c:	4313      	orrs	r3, r2
 800929e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a2c      	ldr	r2, [pc, #176]	@ (8009354 <TIM_OC2_SetConfig+0x110>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d007      	beq.n	80092b8 <TIM_OC2_SetConfig+0x74>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a2b      	ldr	r2, [pc, #172]	@ (8009358 <TIM_OC2_SetConfig+0x114>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d003      	beq.n	80092b8 <TIM_OC2_SetConfig+0x74>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a2a      	ldr	r2, [pc, #168]	@ (800935c <TIM_OC2_SetConfig+0x118>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d10d      	bne.n	80092d4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	011b      	lsls	r3, r3, #4
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a1f      	ldr	r2, [pc, #124]	@ (8009354 <TIM_OC2_SetConfig+0x110>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d013      	beq.n	8009304 <TIM_OC2_SetConfig+0xc0>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a1e      	ldr	r2, [pc, #120]	@ (8009358 <TIM_OC2_SetConfig+0x114>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d00f      	beq.n	8009304 <TIM_OC2_SetConfig+0xc0>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a1e      	ldr	r2, [pc, #120]	@ (8009360 <TIM_OC2_SetConfig+0x11c>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d00b      	beq.n	8009304 <TIM_OC2_SetConfig+0xc0>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a1d      	ldr	r2, [pc, #116]	@ (8009364 <TIM_OC2_SetConfig+0x120>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d007      	beq.n	8009304 <TIM_OC2_SetConfig+0xc0>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	4a1c      	ldr	r2, [pc, #112]	@ (8009368 <TIM_OC2_SetConfig+0x124>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d003      	beq.n	8009304 <TIM_OC2_SetConfig+0xc0>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4a17      	ldr	r2, [pc, #92]	@ (800935c <TIM_OC2_SetConfig+0x118>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d113      	bne.n	800932c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800930a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	695b      	ldr	r3, [r3, #20]
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	693a      	ldr	r2, [r7, #16]
 800931c:	4313      	orrs	r3, r2
 800931e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	4313      	orrs	r3, r2
 800932a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	693a      	ldr	r2, [r7, #16]
 8009330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	685a      	ldr	r2, [r3, #4]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	697a      	ldr	r2, [r7, #20]
 8009344:	621a      	str	r2, [r3, #32]
}
 8009346:	bf00      	nop
 8009348:	371c      	adds	r7, #28
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop
 8009354:	40012c00 	.word	0x40012c00
 8009358:	40013400 	.word	0x40013400
 800935c:	40015000 	.word	0x40015000
 8009360:	40014000 	.word	0x40014000
 8009364:	40014400 	.word	0x40014400
 8009368:	40014800 	.word	0x40014800

0800936c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800936c:	b480      	push	{r7}
 800936e:	b087      	sub	sp, #28
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6a1b      	ldr	r3, [r3, #32]
 800937a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a1b      	ldr	r3, [r3, #32]
 8009380:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	69db      	ldr	r3, [r3, #28]
 8009392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800939a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800939e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f023 0303 	bic.w	r3, r3, #3
 80093a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80093b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	021b      	lsls	r3, r3, #8
 80093c0:	697a      	ldr	r2, [r7, #20]
 80093c2:	4313      	orrs	r3, r2
 80093c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a2b      	ldr	r2, [pc, #172]	@ (8009478 <TIM_OC3_SetConfig+0x10c>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d007      	beq.n	80093de <TIM_OC3_SetConfig+0x72>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a2a      	ldr	r2, [pc, #168]	@ (800947c <TIM_OC3_SetConfig+0x110>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d003      	beq.n	80093de <TIM_OC3_SetConfig+0x72>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a29      	ldr	r2, [pc, #164]	@ (8009480 <TIM_OC3_SetConfig+0x114>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d10d      	bne.n	80093fa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80093e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	021b      	lsls	r3, r3, #8
 80093ec:	697a      	ldr	r2, [r7, #20]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80093f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a1e      	ldr	r2, [pc, #120]	@ (8009478 <TIM_OC3_SetConfig+0x10c>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d013      	beq.n	800942a <TIM_OC3_SetConfig+0xbe>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a1d      	ldr	r2, [pc, #116]	@ (800947c <TIM_OC3_SetConfig+0x110>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d00f      	beq.n	800942a <TIM_OC3_SetConfig+0xbe>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a1d      	ldr	r2, [pc, #116]	@ (8009484 <TIM_OC3_SetConfig+0x118>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d00b      	beq.n	800942a <TIM_OC3_SetConfig+0xbe>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a1c      	ldr	r2, [pc, #112]	@ (8009488 <TIM_OC3_SetConfig+0x11c>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d007      	beq.n	800942a <TIM_OC3_SetConfig+0xbe>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a1b      	ldr	r2, [pc, #108]	@ (800948c <TIM_OC3_SetConfig+0x120>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d003      	beq.n	800942a <TIM_OC3_SetConfig+0xbe>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a16      	ldr	r2, [pc, #88]	@ (8009480 <TIM_OC3_SetConfig+0x114>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d113      	bne.n	8009452 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	011b      	lsls	r3, r3, #4
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	4313      	orrs	r3, r2
 8009444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	011b      	lsls	r3, r3, #4
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	4313      	orrs	r3, r2
 8009450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	693a      	ldr	r2, [r7, #16]
 8009456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	621a      	str	r2, [r3, #32]
}
 800946c:	bf00      	nop
 800946e:	371c      	adds	r7, #28
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr
 8009478:	40012c00 	.word	0x40012c00
 800947c:	40013400 	.word	0x40013400
 8009480:	40015000 	.word	0x40015000
 8009484:	40014000 	.word	0x40014000
 8009488:	40014400 	.word	0x40014400
 800948c:	40014800 	.word	0x40014800

08009490 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009490:	b480      	push	{r7}
 8009492:	b087      	sub	sp, #28
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a1b      	ldr	r3, [r3, #32]
 800949e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a1b      	ldr	r3, [r3, #32]
 80094a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	69db      	ldr	r3, [r3, #28]
 80094b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	021b      	lsls	r3, r3, #8
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	4313      	orrs	r3, r2
 80094d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80094de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	031b      	lsls	r3, r3, #12
 80094e6:	697a      	ldr	r2, [r7, #20]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a2c      	ldr	r2, [pc, #176]	@ (80095a0 <TIM_OC4_SetConfig+0x110>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d007      	beq.n	8009504 <TIM_OC4_SetConfig+0x74>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a2b      	ldr	r2, [pc, #172]	@ (80095a4 <TIM_OC4_SetConfig+0x114>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d003      	beq.n	8009504 <TIM_OC4_SetConfig+0x74>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a2a      	ldr	r2, [pc, #168]	@ (80095a8 <TIM_OC4_SetConfig+0x118>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d10d      	bne.n	8009520 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800950a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	031b      	lsls	r3, r3, #12
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	4313      	orrs	r3, r2
 8009516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800951e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a1f      	ldr	r2, [pc, #124]	@ (80095a0 <TIM_OC4_SetConfig+0x110>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d013      	beq.n	8009550 <TIM_OC4_SetConfig+0xc0>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a1e      	ldr	r2, [pc, #120]	@ (80095a4 <TIM_OC4_SetConfig+0x114>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d00f      	beq.n	8009550 <TIM_OC4_SetConfig+0xc0>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	4a1e      	ldr	r2, [pc, #120]	@ (80095ac <TIM_OC4_SetConfig+0x11c>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d00b      	beq.n	8009550 <TIM_OC4_SetConfig+0xc0>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a1d      	ldr	r2, [pc, #116]	@ (80095b0 <TIM_OC4_SetConfig+0x120>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d007      	beq.n	8009550 <TIM_OC4_SetConfig+0xc0>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a1c      	ldr	r2, [pc, #112]	@ (80095b4 <TIM_OC4_SetConfig+0x124>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d003      	beq.n	8009550 <TIM_OC4_SetConfig+0xc0>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a17      	ldr	r2, [pc, #92]	@ (80095a8 <TIM_OC4_SetConfig+0x118>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d113      	bne.n	8009578 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009556:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800955e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	019b      	lsls	r3, r3, #6
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	4313      	orrs	r3, r2
 800956a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	019b      	lsls	r3, r3, #6
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	4313      	orrs	r3, r2
 8009576:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	685a      	ldr	r2, [r3, #4]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	621a      	str	r2, [r3, #32]
}
 8009592:	bf00      	nop
 8009594:	371c      	adds	r7, #28
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr
 800959e:	bf00      	nop
 80095a0:	40012c00 	.word	0x40012c00
 80095a4:	40013400 	.word	0x40013400
 80095a8:	40015000 	.word	0x40015000
 80095ac:	40014000 	.word	0x40014000
 80095b0:	40014400 	.word	0x40014400
 80095b4:	40014800 	.word	0x40014800

080095b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a1b      	ldr	r3, [r3, #32]
 80095cc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80095e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	4313      	orrs	r3, r2
 80095f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80095fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	041b      	lsls	r3, r3, #16
 8009604:	693a      	ldr	r2, [r7, #16]
 8009606:	4313      	orrs	r3, r2
 8009608:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a19      	ldr	r2, [pc, #100]	@ (8009674 <TIM_OC5_SetConfig+0xbc>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d013      	beq.n	800963a <TIM_OC5_SetConfig+0x82>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a18      	ldr	r2, [pc, #96]	@ (8009678 <TIM_OC5_SetConfig+0xc0>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d00f      	beq.n	800963a <TIM_OC5_SetConfig+0x82>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a17      	ldr	r2, [pc, #92]	@ (800967c <TIM_OC5_SetConfig+0xc4>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d00b      	beq.n	800963a <TIM_OC5_SetConfig+0x82>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a16      	ldr	r2, [pc, #88]	@ (8009680 <TIM_OC5_SetConfig+0xc8>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d007      	beq.n	800963a <TIM_OC5_SetConfig+0x82>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a15      	ldr	r2, [pc, #84]	@ (8009684 <TIM_OC5_SetConfig+0xcc>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d003      	beq.n	800963a <TIM_OC5_SetConfig+0x82>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a14      	ldr	r2, [pc, #80]	@ (8009688 <TIM_OC5_SetConfig+0xd0>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d109      	bne.n	800964e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009640:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	695b      	ldr	r3, [r3, #20]
 8009646:	021b      	lsls	r3, r3, #8
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	4313      	orrs	r3, r2
 800964c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	68fa      	ldr	r2, [r7, #12]
 8009658:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	685a      	ldr	r2, [r3, #4]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	621a      	str	r2, [r3, #32]
}
 8009668:	bf00      	nop
 800966a:	371c      	adds	r7, #28
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr
 8009674:	40012c00 	.word	0x40012c00
 8009678:	40013400 	.word	0x40013400
 800967c:	40014000 	.word	0x40014000
 8009680:	40014400 	.word	0x40014400
 8009684:	40014800 	.word	0x40014800
 8009688:	40015000 	.word	0x40015000

0800968c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a1b      	ldr	r3, [r3, #32]
 800969a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a1b      	ldr	r3, [r3, #32]
 80096a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80096ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	021b      	lsls	r3, r3, #8
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80096d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	051b      	lsls	r3, r3, #20
 80096da:	693a      	ldr	r2, [r7, #16]
 80096dc:	4313      	orrs	r3, r2
 80096de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a1a      	ldr	r2, [pc, #104]	@ (800974c <TIM_OC6_SetConfig+0xc0>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d013      	beq.n	8009710 <TIM_OC6_SetConfig+0x84>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a19      	ldr	r2, [pc, #100]	@ (8009750 <TIM_OC6_SetConfig+0xc4>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d00f      	beq.n	8009710 <TIM_OC6_SetConfig+0x84>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a18      	ldr	r2, [pc, #96]	@ (8009754 <TIM_OC6_SetConfig+0xc8>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d00b      	beq.n	8009710 <TIM_OC6_SetConfig+0x84>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a17      	ldr	r2, [pc, #92]	@ (8009758 <TIM_OC6_SetConfig+0xcc>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d007      	beq.n	8009710 <TIM_OC6_SetConfig+0x84>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a16      	ldr	r2, [pc, #88]	@ (800975c <TIM_OC6_SetConfig+0xd0>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d003      	beq.n	8009710 <TIM_OC6_SetConfig+0x84>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a15      	ldr	r2, [pc, #84]	@ (8009760 <TIM_OC6_SetConfig+0xd4>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d109      	bne.n	8009724 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009716:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	695b      	ldr	r3, [r3, #20]
 800971c:	029b      	lsls	r3, r3, #10
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	4313      	orrs	r3, r2
 8009722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	697a      	ldr	r2, [r7, #20]
 8009728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	685a      	ldr	r2, [r3, #4]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	621a      	str	r2, [r3, #32]
}
 800973e:	bf00      	nop
 8009740:	371c      	adds	r7, #28
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr
 800974a:	bf00      	nop
 800974c:	40012c00 	.word	0x40012c00
 8009750:	40013400 	.word	0x40013400
 8009754:	40014000 	.word	0x40014000
 8009758:	40014400 	.word	0x40014400
 800975c:	40014800 	.word	0x40014800
 8009760:	40015000 	.word	0x40015000

08009764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009764:	b480      	push	{r7}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	60b9      	str	r1, [r7, #8]
 800976e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6a1b      	ldr	r3, [r3, #32]
 8009774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	f023 0201 	bic.w	r2, r3, #1
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800978e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	011b      	lsls	r3, r3, #4
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	4313      	orrs	r3, r2
 8009798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	f023 030a 	bic.w	r3, r3, #10
 80097a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097a2:	697a      	ldr	r2, [r7, #20]
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	693a      	ldr	r2, [r7, #16]
 80097ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	621a      	str	r2, [r3, #32]
}
 80097b6:	bf00      	nop
 80097b8:	371c      	adds	r7, #28
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr

080097c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b087      	sub	sp, #28
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	60f8      	str	r0, [r7, #12]
 80097ca:	60b9      	str	r1, [r7, #8]
 80097cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	f023 0210 	bic.w	r2, r3, #16
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	699b      	ldr	r3, [r3, #24]
 80097e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80097ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	031b      	lsls	r3, r3, #12
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80097fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	011b      	lsls	r3, r3, #4
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	4313      	orrs	r3, r2
 8009808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	693a      	ldr	r2, [r7, #16]
 800980e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	697a      	ldr	r2, [r7, #20]
 8009814:	621a      	str	r2, [r3, #32]
}
 8009816:	bf00      	nop
 8009818:	371c      	adds	r7, #28
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009822:	b480      	push	{r7}
 8009824:	b085      	sub	sp, #20
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800983c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800983e:	683a      	ldr	r2, [r7, #0]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	4313      	orrs	r3, r2
 8009844:	f043 0307 	orr.w	r3, r3, #7
 8009848:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	609a      	str	r2, [r3, #8]
}
 8009850:	bf00      	nop
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800985c:	b480      	push	{r7}
 800985e:	b087      	sub	sp, #28
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
 8009868:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009876:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	021a      	lsls	r2, r3, #8
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	431a      	orrs	r2, r3
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	4313      	orrs	r3, r2
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	4313      	orrs	r3, r2
 8009888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	609a      	str	r2, [r3, #8]
}
 8009890:	bf00      	nop
 8009892:	371c      	adds	r7, #28
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	f003 031f 	and.w	r3, r3, #31
 80098ae:	2201      	movs	r2, #1
 80098b0:	fa02 f303 	lsl.w	r3, r2, r3
 80098b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6a1a      	ldr	r2, [r3, #32]
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	43db      	mvns	r3, r3
 80098be:	401a      	ands	r2, r3
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6a1a      	ldr	r2, [r3, #32]
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	f003 031f 	and.w	r3, r3, #31
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	fa01 f303 	lsl.w	r3, r1, r3
 80098d4:	431a      	orrs	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	621a      	str	r2, [r3, #32]
}
 80098da:	bf00      	nop
 80098dc:	371c      	adds	r7, #28
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
	...

080098e8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a26      	ldr	r2, [pc, #152]	@ (800998c <TIM_ResetCallback+0xa4>)
 80098f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a25      	ldr	r2, [pc, #148]	@ (8009990 <TIM_ResetCallback+0xa8>)
 80098fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a24      	ldr	r2, [pc, #144]	@ (8009994 <TIM_ResetCallback+0xac>)
 8009904:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a23      	ldr	r2, [pc, #140]	@ (8009998 <TIM_ResetCallback+0xb0>)
 800990c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a22      	ldr	r2, [pc, #136]	@ (800999c <TIM_ResetCallback+0xb4>)
 8009914:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a21      	ldr	r2, [pc, #132]	@ (80099a0 <TIM_ResetCallback+0xb8>)
 800991c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a20      	ldr	r2, [pc, #128]	@ (80099a4 <TIM_ResetCallback+0xbc>)
 8009924:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a1f      	ldr	r2, [pc, #124]	@ (80099a8 <TIM_ResetCallback+0xc0>)
 800992c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a1e      	ldr	r2, [pc, #120]	@ (80099ac <TIM_ResetCallback+0xc4>)
 8009934:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a1d      	ldr	r2, [pc, #116]	@ (80099b0 <TIM_ResetCallback+0xc8>)
 800993c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a1c      	ldr	r2, [pc, #112]	@ (80099b4 <TIM_ResetCallback+0xcc>)
 8009944:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a1b      	ldr	r2, [pc, #108]	@ (80099b8 <TIM_ResetCallback+0xd0>)
 800994c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a1a      	ldr	r2, [pc, #104]	@ (80099bc <TIM_ResetCallback+0xd4>)
 8009954:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a19      	ldr	r2, [pc, #100]	@ (80099c0 <TIM_ResetCallback+0xd8>)
 800995c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a18      	ldr	r2, [pc, #96]	@ (80099c4 <TIM_ResetCallback+0xdc>)
 8009964:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a17      	ldr	r2, [pc, #92]	@ (80099c8 <TIM_ResetCallback+0xe0>)
 800996c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a16      	ldr	r2, [pc, #88]	@ (80099cc <TIM_ResetCallback+0xe4>)
 8009974:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a15      	ldr	r2, [pc, #84]	@ (80099d0 <TIM_ResetCallback+0xe8>)
 800997c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009980:	bf00      	nop
 8009982:	370c      	adds	r7, #12
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	08002ead 	.word	0x08002ead
 8009990:	08008c35 	.word	0x08008c35
 8009994:	08008cad 	.word	0x08008cad
 8009998:	08008cc1 	.word	0x08008cc1
 800999c:	08008c5d 	.word	0x08008c5d
 80099a0:	08008c71 	.word	0x08008c71
 80099a4:	08008c49 	.word	0x08008c49
 80099a8:	08008c85 	.word	0x08008c85
 80099ac:	08008c99 	.word	0x08008c99
 80099b0:	08008cd5 	.word	0x08008cd5
 80099b4:	08009c29 	.word	0x08009c29
 80099b8:	08009c3d 	.word	0x08009c3d
 80099bc:	08009c51 	.word	0x08009c51
 80099c0:	08009c65 	.word	0x08009c65
 80099c4:	08009c79 	.word	0x08009c79
 80099c8:	08009c8d 	.word	0x08009c8d
 80099cc:	08009ca1 	.word	0x08009ca1
 80099d0:	08009cb5 	.word	0x08009cb5

080099d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d101      	bne.n	80099ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099e8:	2302      	movs	r3, #2
 80099ea:	e074      	b.n	8009ad6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2202      	movs	r2, #2
 80099f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a34      	ldr	r2, [pc, #208]	@ (8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d009      	beq.n	8009a2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a33      	ldr	r2, [pc, #204]	@ (8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d004      	beq.n	8009a2a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a31      	ldr	r2, [pc, #196]	@ (8009aec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d108      	bne.n	8009a3c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009a30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a21      	ldr	r2, [pc, #132]	@ (8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d022      	beq.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a6c:	d01d      	beq.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a1f      	ldr	r2, [pc, #124]	@ (8009af0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d018      	beq.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8009af4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d013      	beq.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a1c      	ldr	r2, [pc, #112]	@ (8009af8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d00e      	beq.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a15      	ldr	r2, [pc, #84]	@ (8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d009      	beq.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a18      	ldr	r2, [pc, #96]	@ (8009afc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d004      	beq.n	8009aaa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a11      	ldr	r2, [pc, #68]	@ (8009aec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d10c      	bne.n	8009ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68ba      	ldr	r2, [r7, #8]
 8009ac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3714      	adds	r7, #20
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	40012c00 	.word	0x40012c00
 8009ae8:	40013400 	.word	0x40013400
 8009aec:	40015000 	.word	0x40015000
 8009af0:	40000400 	.word	0x40000400
 8009af4:	40000800 	.word	0x40000800
 8009af8:	40000c00 	.word	0x40000c00
 8009afc:	40014000 	.word	0x40014000

08009b00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
 8009b08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d101      	bne.n	8009b1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009b18:	2302      	movs	r3, #2
 8009b1a:	e078      	b.n	8009c0e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	695b      	ldr	r3, [r3, #20]
 8009b74:	4313      	orrs	r3, r2
 8009b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b82:	4313      	orrs	r3, r2
 8009b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	699b      	ldr	r3, [r3, #24]
 8009b90:	041b      	lsls	r3, r3, #16
 8009b92:	4313      	orrs	r3, r2
 8009b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	69db      	ldr	r3, [r3, #28]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8009c1c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d009      	beq.n	8009bc2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a1b      	ldr	r2, [pc, #108]	@ (8009c20 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d004      	beq.n	8009bc2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a19      	ldr	r2, [pc, #100]	@ (8009c24 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d11c      	bne.n	8009bfc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bcc:	051b      	lsls	r3, r3, #20
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	6a1b      	ldr	r3, [r3, #32]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bea:	4313      	orrs	r3, r2
 8009bec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68fa      	ldr	r2, [r7, #12]
 8009c02:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009c0c:	2300      	movs	r3, #0
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	40012c00 	.word	0x40012c00
 8009c20:	40013400 	.word	0x40013400
 8009c24:	40015000 	.word	0x40015000

08009c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8009c44:	bf00      	nop
 8009c46:	370c      	adds	r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c58:	bf00      	nop
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b082      	sub	sp, #8
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d101      	bne.n	8009cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e050      	b.n	8009d7c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d114      	bne.n	8009d0e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 fd5b 	bl	800a7a8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d103      	bne.n	8009d04 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a21      	ldr	r2, [pc, #132]	@ (8009d84 <HAL_UART_Init+0xbc>)
 8009d00:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2224      	movs	r2, #36	@ 0x24
 8009d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f022 0201 	bic.w	r2, r2, #1
 8009d24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d002      	beq.n	8009d34 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f001 f888 	bl	800ae44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 fd89 	bl	800a84c <UART_SetConfig>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d101      	bne.n	8009d44 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	e01b      	b.n	8009d7c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685a      	ldr	r2, [r3, #4]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	689a      	ldr	r2, [r3, #8]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f042 0201 	orr.w	r2, r2, #1
 8009d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f001 f907 	bl	800af88 <UART_CheckIdleState>
 8009d7a:	4603      	mov	r3, r0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	080042e5 	.word	0x080042e5

08009d88 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	460b      	mov	r3, r1
 8009d92:	607a      	str	r2, [r7, #4]
 8009d94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d109      	bne.n	8009db4 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009da6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	e09c      	b.n	8009eee <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dba:	2b20      	cmp	r3, #32
 8009dbc:	d16c      	bne.n	8009e98 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8009dbe:	7afb      	ldrb	r3, [r7, #11]
 8009dc0:	2b0c      	cmp	r3, #12
 8009dc2:	d85e      	bhi.n	8009e82 <HAL_UART_RegisterCallback+0xfa>
 8009dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8009dcc <HAL_UART_RegisterCallback+0x44>)
 8009dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dca:	bf00      	nop
 8009dcc:	08009e01 	.word	0x08009e01
 8009dd0:	08009e0b 	.word	0x08009e0b
 8009dd4:	08009e15 	.word	0x08009e15
 8009dd8:	08009e1f 	.word	0x08009e1f
 8009ddc:	08009e29 	.word	0x08009e29
 8009de0:	08009e33 	.word	0x08009e33
 8009de4:	08009e3d 	.word	0x08009e3d
 8009de8:	08009e47 	.word	0x08009e47
 8009dec:	08009e51 	.word	0x08009e51
 8009df0:	08009e5b 	.word	0x08009e5b
 8009df4:	08009e65 	.word	0x08009e65
 8009df8:	08009e6f 	.word	0x08009e6f
 8009dfc:	08009e79 	.word	0x08009e79
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8009e08:	e070      	b.n	8009eec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8009e12:	e06b      	b.n	8009eec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	687a      	ldr	r2, [r7, #4]
 8009e18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8009e1c:	e066      	b.n	8009eec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8009e26:	e061      	b.n	8009eec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009e30:	e05c      	b.n	8009eec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8009e3a:	e057      	b.n	8009eec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009e44:	e052      	b.n	8009eec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009e4e:	e04d      	b.n	8009eec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8009e58:	e048      	b.n	8009eec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009e62:	e043      	b.n	8009eec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009e6c:	e03e      	b.n	8009eec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009e76:	e039      	b.n	8009eec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009e80:	e034      	b.n	8009eec <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	75fb      	strb	r3, [r7, #23]
        break;
 8009e96:	e029      	b.n	8009eec <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d11a      	bne.n	8009ed8 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009ea2:	7afb      	ldrb	r3, [r7, #11]
 8009ea4:	2b0b      	cmp	r3, #11
 8009ea6:	d002      	beq.n	8009eae <HAL_UART_RegisterCallback+0x126>
 8009ea8:	2b0c      	cmp	r3, #12
 8009eaa:	d005      	beq.n	8009eb8 <HAL_UART_RegisterCallback+0x130>
 8009eac:	e009      	b.n	8009ec2 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009eb6:	e019      	b.n	8009eec <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009ec0:	e014      	b.n	8009eec <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ec8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	75fb      	strb	r3, [r7, #23]
        break;
 8009ed6:	e009      	b.n	8009eec <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ede:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	371c      	adds	r7, #28
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop

08009efc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b08a      	sub	sp, #40	@ 0x28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	4613      	mov	r3, r2
 8009f08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f10:	2b20      	cmp	r3, #32
 8009f12:	d137      	bne.n	8009f84 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d002      	beq.n	8009f20 <HAL_UART_Receive_DMA+0x24>
 8009f1a:	88fb      	ldrh	r3, [r7, #6]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d101      	bne.n	8009f24 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	e030      	b.n	8009f86 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a18      	ldr	r2, [pc, #96]	@ (8009f90 <HAL_UART_Receive_DMA+0x94>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d01f      	beq.n	8009f74 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d018      	beq.n	8009f74 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	e853 3f00 	ldrex	r3, [r3]
 8009f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f60:	623b      	str	r3, [r7, #32]
 8009f62:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f64:	69f9      	ldr	r1, [r7, #28]
 8009f66:	6a3a      	ldr	r2, [r7, #32]
 8009f68:	e841 2300 	strex	r3, r2, [r1]
 8009f6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d1e6      	bne.n	8009f42 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009f74:	88fb      	ldrh	r3, [r7, #6]
 8009f76:	461a      	mov	r2, r3
 8009f78:	68b9      	ldr	r1, [r7, #8]
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f001 f91c 	bl	800b1b8 <UART_Start_Receive_DMA>
 8009f80:	4603      	mov	r3, r0
 8009f82:	e000      	b.n	8009f86 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009f84:	2302      	movs	r3, #2
  }
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3728      	adds	r7, #40	@ 0x28
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	40008000 	.word	0x40008000

08009f94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b0ba      	sub	sp, #232	@ 0xe8
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	69db      	ldr	r3, [r3, #28]
 8009fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009fba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009fbe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009fc2:	4013      	ands	r3, r2
 8009fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009fc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d11b      	bne.n	800a008 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009fd4:	f003 0320 	and.w	r3, r3, #32
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d015      	beq.n	800a008 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009fe0:	f003 0320 	and.w	r3, r3, #32
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d105      	bne.n	8009ff4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d009      	beq.n	800a008 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 8312 	beq.w	800a622 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	4798      	blx	r3
      }
      return;
 800a006:	e30c      	b.n	800a622 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	f000 8129 	beq.w	800a264 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a012:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a016:	4b90      	ldr	r3, [pc, #576]	@ (800a258 <HAL_UART_IRQHandler+0x2c4>)
 800a018:	4013      	ands	r3, r2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d106      	bne.n	800a02c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a01e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a022:	4b8e      	ldr	r3, [pc, #568]	@ (800a25c <HAL_UART_IRQHandler+0x2c8>)
 800a024:	4013      	ands	r3, r2
 800a026:	2b00      	cmp	r3, #0
 800a028:	f000 811c 	beq.w	800a264 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a02c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a030:	f003 0301 	and.w	r3, r3, #1
 800a034:	2b00      	cmp	r3, #0
 800a036:	d011      	beq.n	800a05c <HAL_UART_IRQHandler+0xc8>
 800a038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a03c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a040:	2b00      	cmp	r3, #0
 800a042:	d00b      	beq.n	800a05c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	2201      	movs	r2, #1
 800a04a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a052:	f043 0201 	orr.w	r2, r3, #1
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a05c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a060:	f003 0302 	and.w	r3, r3, #2
 800a064:	2b00      	cmp	r3, #0
 800a066:	d011      	beq.n	800a08c <HAL_UART_IRQHandler+0xf8>
 800a068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a06c:	f003 0301 	and.w	r3, r3, #1
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00b      	beq.n	800a08c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2202      	movs	r2, #2
 800a07a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a082:	f043 0204 	orr.w	r2, r3, #4
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a08c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a090:	f003 0304 	and.w	r3, r3, #4
 800a094:	2b00      	cmp	r3, #0
 800a096:	d011      	beq.n	800a0bc <HAL_UART_IRQHandler+0x128>
 800a098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a09c:	f003 0301 	and.w	r3, r3, #1
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d00b      	beq.n	800a0bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2204      	movs	r2, #4
 800a0aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0b2:	f043 0202 	orr.w	r2, r3, #2
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a0bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0c0:	f003 0308 	and.w	r3, r3, #8
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d017      	beq.n	800a0f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a0c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a0cc:	f003 0320 	and.w	r3, r3, #32
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d105      	bne.n	800a0e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a0d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a0d8:	4b5f      	ldr	r3, [pc, #380]	@ (800a258 <HAL_UART_IRQHandler+0x2c4>)
 800a0da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00b      	beq.n	800a0f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2208      	movs	r2, #8
 800a0e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a0ee:	f043 0208 	orr.w	r2, r3, #8
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a0f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a100:	2b00      	cmp	r3, #0
 800a102:	d012      	beq.n	800a12a <HAL_UART_IRQHandler+0x196>
 800a104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a108:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d00c      	beq.n	800a12a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a118:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a120:	f043 0220 	orr.w	r2, r3, #32
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 8278 	beq.w	800a626 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a13a:	f003 0320 	and.w	r3, r3, #32
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d013      	beq.n	800a16a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a146:	f003 0320 	and.w	r3, r3, #32
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d105      	bne.n	800a15a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a14e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a156:	2b00      	cmp	r3, #0
 800a158:	d007      	beq.n	800a16a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d003      	beq.n	800a16a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a170:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a17e:	2b40      	cmp	r3, #64	@ 0x40
 800a180:	d005      	beq.n	800a18e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a186:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d058      	beq.n	800a240 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f001 f8f9 	bl	800b386 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a19e:	2b40      	cmp	r3, #64	@ 0x40
 800a1a0:	d148      	bne.n	800a234 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3308      	adds	r3, #8
 800a1a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a1b0:	e853 3f00 	ldrex	r3, [r3]
 800a1b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a1b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a1bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a1c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	3308      	adds	r3, #8
 800a1ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a1ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a1d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a1da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a1de:	e841 2300 	strex	r3, r2, [r1]
 800a1e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a1e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1d9      	bne.n	800a1a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d017      	beq.n	800a228 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a1fe:	4a18      	ldr	r2, [pc, #96]	@ (800a260 <HAL_UART_IRQHandler+0x2cc>)
 800a200:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a208:	4618      	mov	r0, r3
 800a20a:	f7fc f8c5 	bl	8006398 <HAL_DMA_Abort_IT>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d01f      	beq.n	800a254 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a21a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a222:	4610      	mov	r0, r2
 800a224:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a226:	e015      	b.n	800a254 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a232:	e00f      	b.n	800a254 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a23e:	e009      	b.n	800a254 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a252:	e1e8      	b.n	800a626 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a254:	bf00      	nop
    return;
 800a256:	e1e6      	b.n	800a626 <HAL_UART_IRQHandler+0x692>
 800a258:	10000001 	.word	0x10000001
 800a25c:	04000120 	.word	0x04000120
 800a260:	0800b651 	.word	0x0800b651

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a268:	2b01      	cmp	r3, #1
 800a26a:	f040 8176 	bne.w	800a55a <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a26e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a272:	f003 0310 	and.w	r3, r3, #16
 800a276:	2b00      	cmp	r3, #0
 800a278:	f000 816f 	beq.w	800a55a <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a27c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a280:	f003 0310 	and.w	r3, r3, #16
 800a284:	2b00      	cmp	r3, #0
 800a286:	f000 8168 	beq.w	800a55a <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2210      	movs	r2, #16
 800a290:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a29c:	2b40      	cmp	r3, #64	@ 0x40
 800a29e:	f040 80dc 	bne.w	800a45a <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a2b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	f000 80b1 	beq.w	800a41c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a2c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	f080 80a9 	bcs.w	800a41c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a2d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 0320 	and.w	r3, r3, #32
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f040 8087 	bne.w	800a3f6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a2f4:	e853 3f00 	ldrex	r3, [r3]
 800a2f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a2fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a304:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	461a      	mov	r2, r3
 800a30e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a312:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a316:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a31e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a322:	e841 2300 	strex	r3, r2, [r1]
 800a326:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a32a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1da      	bne.n	800a2e8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	3308      	adds	r3, #8
 800a338:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a33c:	e853 3f00 	ldrex	r3, [r3]
 800a340:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a342:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a344:	f023 0301 	bic.w	r3, r3, #1
 800a348:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	3308      	adds	r3, #8
 800a352:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a356:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a35a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a35e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a362:	e841 2300 	strex	r3, r2, [r1]
 800a366:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a368:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1e1      	bne.n	800a332 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	3308      	adds	r3, #8
 800a374:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a376:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a378:	e853 3f00 	ldrex	r3, [r3]
 800a37c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a37e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a380:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a384:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	3308      	adds	r3, #8
 800a38e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a392:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a394:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a396:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a398:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a39a:	e841 2300 	strex	r3, r2, [r1]
 800a39e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a3a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d1e3      	bne.n	800a36e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2220      	movs	r2, #32
 800a3aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3bc:	e853 3f00 	ldrex	r3, [r3]
 800a3c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a3c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a3c4:	f023 0310 	bic.w	r3, r3, #16
 800a3c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a3d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a3d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a3dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a3de:	e841 2300 	strex	r3, r2, [r1]
 800a3e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a3e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1e4      	bne.n	800a3b4 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7fb ff78 	bl	80062e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800a40e:	b292      	uxth	r2, r2
 800a410:	1a8a      	subs	r2, r1, r2
 800a412:	b292      	uxth	r2, r2
 800a414:	4611      	mov	r1, r2
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a41a:	e106      	b.n	800a62a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a426:	429a      	cmp	r2, r3
 800a428:	f040 80ff 	bne.w	800a62a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 0320 	and.w	r3, r3, #32
 800a43a:	2b20      	cmp	r3, #32
 800a43c:	f040 80f5 	bne.w	800a62a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2202      	movs	r2, #2
 800a444:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a452:	4611      	mov	r1, r2
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	4798      	blx	r3
      return;
 800a458:	e0e7      	b.n	800a62a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a466:	b29b      	uxth	r3, r3
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a474:	b29b      	uxth	r3, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	f000 80d9 	beq.w	800a62e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800a47c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a480:	2b00      	cmp	r3, #0
 800a482:	f000 80d4 	beq.w	800a62e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48e:	e853 3f00 	ldrex	r3, [r3]
 800a492:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a496:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a49a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a4a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4b0:	e841 2300 	strex	r3, r2, [r1]
 800a4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1e4      	bne.n	800a486 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	3308      	adds	r3, #8
 800a4c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c6:	e853 3f00 	ldrex	r3, [r3]
 800a4ca:	623b      	str	r3, [r7, #32]
   return(result);
 800a4cc:	6a3b      	ldr	r3, [r7, #32]
 800a4ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a4d2:	f023 0301 	bic.w	r3, r3, #1
 800a4d6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	3308      	adds	r3, #8
 800a4e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a4e4:	633a      	str	r2, [r7, #48]	@ 0x30
 800a4e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4ec:	e841 2300 	strex	r3, r2, [r1]
 800a4f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d1e1      	bne.n	800a4bc <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2220      	movs	r2, #32
 800a4fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	e853 3f00 	ldrex	r3, [r3]
 800a518:	60fb      	str	r3, [r7, #12]
   return(result);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f023 0310 	bic.w	r3, r3, #16
 800a520:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	461a      	mov	r2, r3
 800a52a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a52e:	61fb      	str	r3, [r7, #28]
 800a530:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a532:	69b9      	ldr	r1, [r7, #24]
 800a534:	69fa      	ldr	r2, [r7, #28]
 800a536:	e841 2300 	strex	r3, r2, [r1]
 800a53a:	617b      	str	r3, [r7, #20]
   return(result);
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d1e4      	bne.n	800a50c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2202      	movs	r2, #2
 800a546:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a54e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a552:	4611      	mov	r1, r2
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a558:	e069      	b.n	800a62e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a55a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a55e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d010      	beq.n	800a588 <HAL_UART_IRQHandler+0x5f4>
 800a566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a56a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d00a      	beq.n	800a588 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a57a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a586:	e055      	b.n	800a634 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a58c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a590:	2b00      	cmp	r3, #0
 800a592:	d014      	beq.n	800a5be <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a598:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d105      	bne.n	800a5ac <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a5a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d008      	beq.n	800a5be <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d03e      	beq.n	800a632 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	4798      	blx	r3
    }
    return;
 800a5bc:	e039      	b.n	800a632 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a5be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d009      	beq.n	800a5de <HAL_UART_IRQHandler+0x64a>
 800a5ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d003      	beq.n	800a5de <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f001 f84e 	bl	800b678 <UART_EndTransmit_IT>
    return;
 800a5dc:	e02a      	b.n	800a634 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a5de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00b      	beq.n	800a602 <HAL_UART_IRQHandler+0x66e>
 800a5ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5ee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d005      	beq.n	800a602 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a600:	e018      	b.n	800a634 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a606:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d012      	beq.n	800a634 <HAL_UART_IRQHandler+0x6a0>
 800a60e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a612:	2b00      	cmp	r3, #0
 800a614:	da0e      	bge.n	800a634 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a620:	e008      	b.n	800a634 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a622:	bf00      	nop
 800a624:	e006      	b.n	800a634 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a626:	bf00      	nop
 800a628:	e004      	b.n	800a634 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a62a:	bf00      	nop
 800a62c:	e002      	b.n	800a634 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a62e:	bf00      	nop
 800a630:	e000      	b.n	800a634 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a632:	bf00      	nop
  }
}
 800a634:	37e8      	adds	r7, #232	@ 0xe8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop

0800a63c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a658:	bf00      	nop
 800a65a:	370c      	adds	r7, #12
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a664:	b480      	push	{r7}
 800a666:	b083      	sub	sp, #12
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a66c:	bf00      	nop
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr

0800a678 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a694:	bf00      	nop
 800a696:	370c      	adds	r7, #12
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr

0800a6b4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b083      	sub	sp, #12
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a6bc:	bf00      	nop
 800a6be:	370c      	adds	r7, #12
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr

0800a6c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	b083      	sub	sp, #12
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a6d4:	bf00      	nop
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a09      	ldr	r2, [pc, #36]	@ (800a714 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d009      	beq.n	800a708 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	430a      	orrs	r2, r1
 800a706:	615a      	str	r2, [r3, #20]
  }
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr
 800a714:	40008000 	.word	0x40008000

0800a718 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a718:	b480      	push	{r7}
 800a71a:	b083      	sub	sp, #12
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4a18      	ldr	r2, [pc, #96]	@ (800a788 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a726:	4293      	cmp	r3, r2
 800a728:	d027      	beq.n	800a77a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a730:	2b20      	cmp	r3, #32
 800a732:	d120      	bne.n	800a776 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	d101      	bne.n	800a742 <HAL_UART_EnableReceiverTimeout+0x2a>
 800a73e:	2302      	movs	r3, #2
 800a740:	e01c      	b.n	800a77c <HAL_UART_EnableReceiverTimeout+0x64>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2201      	movs	r2, #1
 800a746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2224      	movs	r2, #36	@ 0x24
 800a74e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a760:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2220      	movs	r2, #32
 800a766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a772:	2300      	movs	r3, #0
 800a774:	e002      	b.n	800a77c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a776:	2302      	movs	r3, #2
 800a778:	e000      	b.n	800a77c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
  }
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr
 800a788:	40008000 	.word	0x40008000

0800a78c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	370c      	adds	r7, #12
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a4:	4770      	bx	lr
	...

0800a7a8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a1a      	ldr	r2, [pc, #104]	@ (800a81c <UART_InitCallbacksToDefault+0x74>)
 800a7b4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a19      	ldr	r2, [pc, #100]	@ (800a820 <UART_InitCallbacksToDefault+0x78>)
 800a7bc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a18      	ldr	r2, [pc, #96]	@ (800a824 <UART_InitCallbacksToDefault+0x7c>)
 800a7c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a17      	ldr	r2, [pc, #92]	@ (800a828 <UART_InitCallbacksToDefault+0x80>)
 800a7cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a16      	ldr	r2, [pc, #88]	@ (800a82c <UART_InitCallbacksToDefault+0x84>)
 800a7d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a15      	ldr	r2, [pc, #84]	@ (800a830 <UART_InitCallbacksToDefault+0x88>)
 800a7dc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a14      	ldr	r2, [pc, #80]	@ (800a834 <UART_InitCallbacksToDefault+0x8c>)
 800a7e4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a13      	ldr	r2, [pc, #76]	@ (800a838 <UART_InitCallbacksToDefault+0x90>)
 800a7ec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a12      	ldr	r2, [pc, #72]	@ (800a83c <UART_InitCallbacksToDefault+0x94>)
 800a7f4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a11      	ldr	r2, [pc, #68]	@ (800a840 <UART_InitCallbacksToDefault+0x98>)
 800a7fc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a10      	ldr	r2, [pc, #64]	@ (800a844 <UART_InitCallbacksToDefault+0x9c>)
 800a804:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a0f      	ldr	r2, [pc, #60]	@ (800a848 <UART_InitCallbacksToDefault+0xa0>)
 800a80c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr
 800a81c:	0800a651 	.word	0x0800a651
 800a820:	0800a63d 	.word	0x0800a63d
 800a824:	0800a665 	.word	0x0800a665
 800a828:	08002e99 	.word	0x08002e99
 800a82c:	0800a679 	.word	0x0800a679
 800a830:	0800a68d 	.word	0x0800a68d
 800a834:	0800a6a1 	.word	0x0800a6a1
 800a838:	0800a6b5 	.word	0x0800a6b5
 800a83c:	0800b6d3 	.word	0x0800b6d3
 800a840:	0800b6e7 	.word	0x0800b6e7
 800a844:	0800b6fb 	.word	0x0800b6fb
 800a848:	0800a6c9 	.word	0x0800a6c9

0800a84c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a84c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a850:	b08c      	sub	sp, #48	@ 0x30
 800a852:	af00      	add	r7, sp, #0
 800a854:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a856:	2300      	movs	r3, #0
 800a858:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	689a      	ldr	r2, [r3, #8]
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	431a      	orrs	r2, r3
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	695b      	ldr	r3, [r3, #20]
 800a86a:	431a      	orrs	r2, r3
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	69db      	ldr	r3, [r3, #28]
 800a870:	4313      	orrs	r3, r2
 800a872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	681a      	ldr	r2, [r3, #0]
 800a87a:	4baa      	ldr	r3, [pc, #680]	@ (800ab24 <UART_SetConfig+0x2d8>)
 800a87c:	4013      	ands	r3, r2
 800a87e:	697a      	ldr	r2, [r7, #20]
 800a880:	6812      	ldr	r2, [r2, #0]
 800a882:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a884:	430b      	orrs	r3, r1
 800a886:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	68da      	ldr	r2, [r3, #12]
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	430a      	orrs	r2, r1
 800a89c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a9f      	ldr	r2, [pc, #636]	@ (800ab28 <UART_SetConfig+0x2dc>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d004      	beq.n	800a8b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	6a1b      	ldr	r3, [r3, #32]
 800a8b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a8c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a8c6:	697a      	ldr	r2, [r7, #20]
 800a8c8:	6812      	ldr	r2, [r2, #0]
 800a8ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8cc:	430b      	orrs	r3, r1
 800a8ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8d6:	f023 010f 	bic.w	r1, r3, #15
 800a8da:	697b      	ldr	r3, [r7, #20]
 800a8dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	430a      	orrs	r2, r1
 800a8e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a90      	ldr	r2, [pc, #576]	@ (800ab2c <UART_SetConfig+0x2e0>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d125      	bne.n	800a93c <UART_SetConfig+0xf0>
 800a8f0:	4b8f      	ldr	r3, [pc, #572]	@ (800ab30 <UART_SetConfig+0x2e4>)
 800a8f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8f6:	f003 0303 	and.w	r3, r3, #3
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d81a      	bhi.n	800a934 <UART_SetConfig+0xe8>
 800a8fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a904 <UART_SetConfig+0xb8>)
 800a900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a904:	0800a915 	.word	0x0800a915
 800a908:	0800a925 	.word	0x0800a925
 800a90c:	0800a91d 	.word	0x0800a91d
 800a910:	0800a92d 	.word	0x0800a92d
 800a914:	2301      	movs	r3, #1
 800a916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a91a:	e116      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800a91c:	2302      	movs	r3, #2
 800a91e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a922:	e112      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800a924:	2304      	movs	r3, #4
 800a926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a92a:	e10e      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800a92c:	2308      	movs	r3, #8
 800a92e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a932:	e10a      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800a934:	2310      	movs	r3, #16
 800a936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a93a:	e106      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4a7c      	ldr	r2, [pc, #496]	@ (800ab34 <UART_SetConfig+0x2e8>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d138      	bne.n	800a9b8 <UART_SetConfig+0x16c>
 800a946:	4b7a      	ldr	r3, [pc, #488]	@ (800ab30 <UART_SetConfig+0x2e4>)
 800a948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a94c:	f003 030c 	and.w	r3, r3, #12
 800a950:	2b0c      	cmp	r3, #12
 800a952:	d82d      	bhi.n	800a9b0 <UART_SetConfig+0x164>
 800a954:	a201      	add	r2, pc, #4	@ (adr r2, 800a95c <UART_SetConfig+0x110>)
 800a956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a95a:	bf00      	nop
 800a95c:	0800a991 	.word	0x0800a991
 800a960:	0800a9b1 	.word	0x0800a9b1
 800a964:	0800a9b1 	.word	0x0800a9b1
 800a968:	0800a9b1 	.word	0x0800a9b1
 800a96c:	0800a9a1 	.word	0x0800a9a1
 800a970:	0800a9b1 	.word	0x0800a9b1
 800a974:	0800a9b1 	.word	0x0800a9b1
 800a978:	0800a9b1 	.word	0x0800a9b1
 800a97c:	0800a999 	.word	0x0800a999
 800a980:	0800a9b1 	.word	0x0800a9b1
 800a984:	0800a9b1 	.word	0x0800a9b1
 800a988:	0800a9b1 	.word	0x0800a9b1
 800a98c:	0800a9a9 	.word	0x0800a9a9
 800a990:	2300      	movs	r3, #0
 800a992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a996:	e0d8      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800a998:	2302      	movs	r3, #2
 800a99a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a99e:	e0d4      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800a9a0:	2304      	movs	r3, #4
 800a9a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9a6:	e0d0      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800a9a8:	2308      	movs	r3, #8
 800a9aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9ae:	e0cc      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800a9b0:	2310      	movs	r3, #16
 800a9b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9b6:	e0c8      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a5e      	ldr	r2, [pc, #376]	@ (800ab38 <UART_SetConfig+0x2ec>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d125      	bne.n	800aa0e <UART_SetConfig+0x1c2>
 800a9c2:	4b5b      	ldr	r3, [pc, #364]	@ (800ab30 <UART_SetConfig+0x2e4>)
 800a9c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a9c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a9cc:	2b30      	cmp	r3, #48	@ 0x30
 800a9ce:	d016      	beq.n	800a9fe <UART_SetConfig+0x1b2>
 800a9d0:	2b30      	cmp	r3, #48	@ 0x30
 800a9d2:	d818      	bhi.n	800aa06 <UART_SetConfig+0x1ba>
 800a9d4:	2b20      	cmp	r3, #32
 800a9d6:	d00a      	beq.n	800a9ee <UART_SetConfig+0x1a2>
 800a9d8:	2b20      	cmp	r3, #32
 800a9da:	d814      	bhi.n	800aa06 <UART_SetConfig+0x1ba>
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d002      	beq.n	800a9e6 <UART_SetConfig+0x19a>
 800a9e0:	2b10      	cmp	r3, #16
 800a9e2:	d008      	beq.n	800a9f6 <UART_SetConfig+0x1aa>
 800a9e4:	e00f      	b.n	800aa06 <UART_SetConfig+0x1ba>
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9ec:	e0ad      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9f4:	e0a9      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800a9f6:	2304      	movs	r3, #4
 800a9f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a9fc:	e0a5      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800a9fe:	2308      	movs	r3, #8
 800aa00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa04:	e0a1      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800aa06:	2310      	movs	r3, #16
 800aa08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa0c:	e09d      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	4a4a      	ldr	r2, [pc, #296]	@ (800ab3c <UART_SetConfig+0x2f0>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d125      	bne.n	800aa64 <UART_SetConfig+0x218>
 800aa18:	4b45      	ldr	r3, [pc, #276]	@ (800ab30 <UART_SetConfig+0x2e4>)
 800aa1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa1e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800aa22:	2bc0      	cmp	r3, #192	@ 0xc0
 800aa24:	d016      	beq.n	800aa54 <UART_SetConfig+0x208>
 800aa26:	2bc0      	cmp	r3, #192	@ 0xc0
 800aa28:	d818      	bhi.n	800aa5c <UART_SetConfig+0x210>
 800aa2a:	2b80      	cmp	r3, #128	@ 0x80
 800aa2c:	d00a      	beq.n	800aa44 <UART_SetConfig+0x1f8>
 800aa2e:	2b80      	cmp	r3, #128	@ 0x80
 800aa30:	d814      	bhi.n	800aa5c <UART_SetConfig+0x210>
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d002      	beq.n	800aa3c <UART_SetConfig+0x1f0>
 800aa36:	2b40      	cmp	r3, #64	@ 0x40
 800aa38:	d008      	beq.n	800aa4c <UART_SetConfig+0x200>
 800aa3a:	e00f      	b.n	800aa5c <UART_SetConfig+0x210>
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa42:	e082      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800aa44:	2302      	movs	r3, #2
 800aa46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa4a:	e07e      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800aa4c:	2304      	movs	r3, #4
 800aa4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa52:	e07a      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800aa54:	2308      	movs	r3, #8
 800aa56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa5a:	e076      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800aa5c:	2310      	movs	r3, #16
 800aa5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aa62:	e072      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a35      	ldr	r2, [pc, #212]	@ (800ab40 <UART_SetConfig+0x2f4>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d12a      	bne.n	800aac4 <UART_SetConfig+0x278>
 800aa6e:	4b30      	ldr	r3, [pc, #192]	@ (800ab30 <UART_SetConfig+0x2e4>)
 800aa70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aa74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa7c:	d01a      	beq.n	800aab4 <UART_SetConfig+0x268>
 800aa7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aa82:	d81b      	bhi.n	800aabc <UART_SetConfig+0x270>
 800aa84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa88:	d00c      	beq.n	800aaa4 <UART_SetConfig+0x258>
 800aa8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa8e:	d815      	bhi.n	800aabc <UART_SetConfig+0x270>
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d003      	beq.n	800aa9c <UART_SetConfig+0x250>
 800aa94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa98:	d008      	beq.n	800aaac <UART_SetConfig+0x260>
 800aa9a:	e00f      	b.n	800aabc <UART_SetConfig+0x270>
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaa2:	e052      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800aaa4:	2302      	movs	r3, #2
 800aaa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaaa:	e04e      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800aaac:	2304      	movs	r3, #4
 800aaae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aab2:	e04a      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800aab4:	2308      	movs	r3, #8
 800aab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aaba:	e046      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800aabc:	2310      	movs	r3, #16
 800aabe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aac2:	e042      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a17      	ldr	r2, [pc, #92]	@ (800ab28 <UART_SetConfig+0x2dc>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d13a      	bne.n	800ab44 <UART_SetConfig+0x2f8>
 800aace:	4b18      	ldr	r3, [pc, #96]	@ (800ab30 <UART_SetConfig+0x2e4>)
 800aad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800aad4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800aad8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aadc:	d01a      	beq.n	800ab14 <UART_SetConfig+0x2c8>
 800aade:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800aae2:	d81b      	bhi.n	800ab1c <UART_SetConfig+0x2d0>
 800aae4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aae8:	d00c      	beq.n	800ab04 <UART_SetConfig+0x2b8>
 800aaea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aaee:	d815      	bhi.n	800ab1c <UART_SetConfig+0x2d0>
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d003      	beq.n	800aafc <UART_SetConfig+0x2b0>
 800aaf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aaf8:	d008      	beq.n	800ab0c <UART_SetConfig+0x2c0>
 800aafa:	e00f      	b.n	800ab1c <UART_SetConfig+0x2d0>
 800aafc:	2300      	movs	r3, #0
 800aafe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab02:	e022      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800ab04:	2302      	movs	r3, #2
 800ab06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab0a:	e01e      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800ab0c:	2304      	movs	r3, #4
 800ab0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab12:	e01a      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800ab14:	2308      	movs	r3, #8
 800ab16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab1a:	e016      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800ab1c:	2310      	movs	r3, #16
 800ab1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab22:	e012      	b.n	800ab4a <UART_SetConfig+0x2fe>
 800ab24:	cfff69f3 	.word	0xcfff69f3
 800ab28:	40008000 	.word	0x40008000
 800ab2c:	40013800 	.word	0x40013800
 800ab30:	40021000 	.word	0x40021000
 800ab34:	40004400 	.word	0x40004400
 800ab38:	40004800 	.word	0x40004800
 800ab3c:	40004c00 	.word	0x40004c00
 800ab40:	40005000 	.word	0x40005000
 800ab44:	2310      	movs	r3, #16
 800ab46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4aae      	ldr	r2, [pc, #696]	@ (800ae08 <UART_SetConfig+0x5bc>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	f040 8097 	bne.w	800ac84 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ab5a:	2b08      	cmp	r3, #8
 800ab5c:	d823      	bhi.n	800aba6 <UART_SetConfig+0x35a>
 800ab5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ab64 <UART_SetConfig+0x318>)
 800ab60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab64:	0800ab89 	.word	0x0800ab89
 800ab68:	0800aba7 	.word	0x0800aba7
 800ab6c:	0800ab91 	.word	0x0800ab91
 800ab70:	0800aba7 	.word	0x0800aba7
 800ab74:	0800ab97 	.word	0x0800ab97
 800ab78:	0800aba7 	.word	0x0800aba7
 800ab7c:	0800aba7 	.word	0x0800aba7
 800ab80:	0800aba7 	.word	0x0800aba7
 800ab84:	0800ab9f 	.word	0x0800ab9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab88:	f7fc fcf6 	bl	8007578 <HAL_RCC_GetPCLK1Freq>
 800ab8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab8e:	e010      	b.n	800abb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab90:	4b9e      	ldr	r3, [pc, #632]	@ (800ae0c <UART_SetConfig+0x5c0>)
 800ab92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ab94:	e00d      	b.n	800abb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab96:	f7fc fc81 	bl	800749c <HAL_RCC_GetSysClockFreq>
 800ab9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ab9c:	e009      	b.n	800abb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aba2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800aba4:	e005      	b.n	800abb2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800aba6:	2300      	movs	r3, #0
 800aba8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800abb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800abb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f000 8130 	beq.w	800ae1a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abbe:	4a94      	ldr	r2, [pc, #592]	@ (800ae10 <UART_SetConfig+0x5c4>)
 800abc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abc4:	461a      	mov	r2, r3
 800abc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800abcc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	685a      	ldr	r2, [r3, #4]
 800abd2:	4613      	mov	r3, r2
 800abd4:	005b      	lsls	r3, r3, #1
 800abd6:	4413      	add	r3, r2
 800abd8:	69ba      	ldr	r2, [r7, #24]
 800abda:	429a      	cmp	r2, r3
 800abdc:	d305      	bcc.n	800abea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800abe4:	69ba      	ldr	r2, [r7, #24]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d903      	bls.n	800abf2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800abf0:	e113      	b.n	800ae1a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf4:	2200      	movs	r2, #0
 800abf6:	60bb      	str	r3, [r7, #8]
 800abf8:	60fa      	str	r2, [r7, #12]
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abfe:	4a84      	ldr	r2, [pc, #528]	@ (800ae10 <UART_SetConfig+0x5c4>)
 800ac00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	2200      	movs	r2, #0
 800ac08:	603b      	str	r3, [r7, #0]
 800ac0a:	607a      	str	r2, [r7, #4]
 800ac0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ac14:	f7f5 ff3e 	bl	8000a94 <__aeabi_uldivmod>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	4619      	mov	r1, r3
 800ac20:	f04f 0200 	mov.w	r2, #0
 800ac24:	f04f 0300 	mov.w	r3, #0
 800ac28:	020b      	lsls	r3, r1, #8
 800ac2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac2e:	0202      	lsls	r2, r0, #8
 800ac30:	6979      	ldr	r1, [r7, #20]
 800ac32:	6849      	ldr	r1, [r1, #4]
 800ac34:	0849      	lsrs	r1, r1, #1
 800ac36:	2000      	movs	r0, #0
 800ac38:	460c      	mov	r4, r1
 800ac3a:	4605      	mov	r5, r0
 800ac3c:	eb12 0804 	adds.w	r8, r2, r4
 800ac40:	eb43 0905 	adc.w	r9, r3, r5
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	469a      	mov	sl, r3
 800ac4c:	4693      	mov	fp, r2
 800ac4e:	4652      	mov	r2, sl
 800ac50:	465b      	mov	r3, fp
 800ac52:	4640      	mov	r0, r8
 800ac54:	4649      	mov	r1, r9
 800ac56:	f7f5 ff1d 	bl	8000a94 <__aeabi_uldivmod>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	4613      	mov	r3, r2
 800ac60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ac62:	6a3b      	ldr	r3, [r7, #32]
 800ac64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ac68:	d308      	bcc.n	800ac7c <UART_SetConfig+0x430>
 800ac6a:	6a3b      	ldr	r3, [r7, #32]
 800ac6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac70:	d204      	bcs.n	800ac7c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	6a3a      	ldr	r2, [r7, #32]
 800ac78:	60da      	str	r2, [r3, #12]
 800ac7a:	e0ce      	b.n	800ae1a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ac82:	e0ca      	b.n	800ae1a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	69db      	ldr	r3, [r3, #28]
 800ac88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac8c:	d166      	bne.n	800ad5c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800ac8e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ac92:	2b08      	cmp	r3, #8
 800ac94:	d827      	bhi.n	800ace6 <UART_SetConfig+0x49a>
 800ac96:	a201      	add	r2, pc, #4	@ (adr r2, 800ac9c <UART_SetConfig+0x450>)
 800ac98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac9c:	0800acc1 	.word	0x0800acc1
 800aca0:	0800acc9 	.word	0x0800acc9
 800aca4:	0800acd1 	.word	0x0800acd1
 800aca8:	0800ace7 	.word	0x0800ace7
 800acac:	0800acd7 	.word	0x0800acd7
 800acb0:	0800ace7 	.word	0x0800ace7
 800acb4:	0800ace7 	.word	0x0800ace7
 800acb8:	0800ace7 	.word	0x0800ace7
 800acbc:	0800acdf 	.word	0x0800acdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acc0:	f7fc fc5a 	bl	8007578 <HAL_RCC_GetPCLK1Freq>
 800acc4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800acc6:	e014      	b.n	800acf2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acc8:	f7fc fc6c 	bl	80075a4 <HAL_RCC_GetPCLK2Freq>
 800accc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800acce:	e010      	b.n	800acf2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800acd0:	4b4e      	ldr	r3, [pc, #312]	@ (800ae0c <UART_SetConfig+0x5c0>)
 800acd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800acd4:	e00d      	b.n	800acf2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800acd6:	f7fc fbe1 	bl	800749c <HAL_RCC_GetSysClockFreq>
 800acda:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800acdc:	e009      	b.n	800acf2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ace2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ace4:	e005      	b.n	800acf2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800ace6:	2300      	movs	r3, #0
 800ace8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800acf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800acf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	f000 8090 	beq.w	800ae1a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acfe:	4a44      	ldr	r2, [pc, #272]	@ (800ae10 <UART_SetConfig+0x5c4>)
 800ad00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad04:	461a      	mov	r2, r3
 800ad06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad08:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad0c:	005a      	lsls	r2, r3, #1
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	685b      	ldr	r3, [r3, #4]
 800ad12:	085b      	lsrs	r3, r3, #1
 800ad14:	441a      	add	r2, r3
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad20:	6a3b      	ldr	r3, [r7, #32]
 800ad22:	2b0f      	cmp	r3, #15
 800ad24:	d916      	bls.n	800ad54 <UART_SetConfig+0x508>
 800ad26:	6a3b      	ldr	r3, [r7, #32]
 800ad28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad2c:	d212      	bcs.n	800ad54 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad2e:	6a3b      	ldr	r3, [r7, #32]
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	f023 030f 	bic.w	r3, r3, #15
 800ad36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad38:	6a3b      	ldr	r3, [r7, #32]
 800ad3a:	085b      	lsrs	r3, r3, #1
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	f003 0307 	and.w	r3, r3, #7
 800ad42:	b29a      	uxth	r2, r3
 800ad44:	8bfb      	ldrh	r3, [r7, #30]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	8bfa      	ldrh	r2, [r7, #30]
 800ad50:	60da      	str	r2, [r3, #12]
 800ad52:	e062      	b.n	800ae1a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ad5a:	e05e      	b.n	800ae1a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad60:	2b08      	cmp	r3, #8
 800ad62:	d828      	bhi.n	800adb6 <UART_SetConfig+0x56a>
 800ad64:	a201      	add	r2, pc, #4	@ (adr r2, 800ad6c <UART_SetConfig+0x520>)
 800ad66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad6a:	bf00      	nop
 800ad6c:	0800ad91 	.word	0x0800ad91
 800ad70:	0800ad99 	.word	0x0800ad99
 800ad74:	0800ada1 	.word	0x0800ada1
 800ad78:	0800adb7 	.word	0x0800adb7
 800ad7c:	0800ada7 	.word	0x0800ada7
 800ad80:	0800adb7 	.word	0x0800adb7
 800ad84:	0800adb7 	.word	0x0800adb7
 800ad88:	0800adb7 	.word	0x0800adb7
 800ad8c:	0800adaf 	.word	0x0800adaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad90:	f7fc fbf2 	bl	8007578 <HAL_RCC_GetPCLK1Freq>
 800ad94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad96:	e014      	b.n	800adc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad98:	f7fc fc04 	bl	80075a4 <HAL_RCC_GetPCLK2Freq>
 800ad9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ad9e:	e010      	b.n	800adc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ada0:	4b1a      	ldr	r3, [pc, #104]	@ (800ae0c <UART_SetConfig+0x5c0>)
 800ada2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ada4:	e00d      	b.n	800adc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ada6:	f7fc fb79 	bl	800749c <HAL_RCC_GetSysClockFreq>
 800adaa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800adac:	e009      	b.n	800adc2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800adb4:	e005      	b.n	800adc2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800adb6:	2300      	movs	r3, #0
 800adb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800adc0:	bf00      	nop
    }

    if (pclk != 0U)
 800adc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d028      	beq.n	800ae1a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adcc:	4a10      	ldr	r2, [pc, #64]	@ (800ae10 <UART_SetConfig+0x5c4>)
 800adce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800add2:	461a      	mov	r2, r3
 800add4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add6:	fbb3 f2f2 	udiv	r2, r3, r2
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	085b      	lsrs	r3, r3, #1
 800ade0:	441a      	add	r2, r3
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	fbb2 f3f3 	udiv	r3, r2, r3
 800adea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adec:	6a3b      	ldr	r3, [r7, #32]
 800adee:	2b0f      	cmp	r3, #15
 800adf0:	d910      	bls.n	800ae14 <UART_SetConfig+0x5c8>
 800adf2:	6a3b      	ldr	r3, [r7, #32]
 800adf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adf8:	d20c      	bcs.n	800ae14 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	60da      	str	r2, [r3, #12]
 800ae04:	e009      	b.n	800ae1a <UART_SetConfig+0x5ce>
 800ae06:	bf00      	nop
 800ae08:	40008000 	.word	0x40008000
 800ae0c:	00f42400 	.word	0x00f42400
 800ae10:	0800c6e4 	.word	0x0800c6e4
      }
      else
      {
        ret = HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ae22:	697b      	ldr	r3, [r7, #20]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	2200      	movs	r2, #0
 800ae34:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ae36:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3730      	adds	r7, #48	@ 0x30
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ae44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae50:	f003 0308 	and.w	r3, r3, #8
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00a      	beq.n	800ae6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	430a      	orrs	r2, r1
 800ae6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae72:	f003 0301 	and.w	r3, r3, #1
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00a      	beq.n	800ae90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	430a      	orrs	r2, r1
 800ae8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae94:	f003 0302 	and.w	r3, r3, #2
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d00a      	beq.n	800aeb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	430a      	orrs	r2, r1
 800aeb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeb6:	f003 0304 	and.w	r3, r3, #4
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00a      	beq.n	800aed4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	430a      	orrs	r2, r1
 800aed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aed8:	f003 0310 	and.w	r3, r3, #16
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00a      	beq.n	800aef6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	430a      	orrs	r2, r1
 800aef4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aefa:	f003 0320 	and.w	r3, r3, #32
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d00a      	beq.n	800af18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	430a      	orrs	r2, r1
 800af16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af20:	2b00      	cmp	r3, #0
 800af22:	d01a      	beq.n	800af5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	430a      	orrs	r2, r1
 800af38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af42:	d10a      	bne.n	800af5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	430a      	orrs	r2, r1
 800af58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af62:	2b00      	cmp	r3, #0
 800af64:	d00a      	beq.n	800af7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	430a      	orrs	r2, r1
 800af7a:	605a      	str	r2, [r3, #4]
  }
}
 800af7c:	bf00      	nop
 800af7e:	370c      	adds	r7, #12
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b098      	sub	sp, #96	@ 0x60
 800af8c:	af02      	add	r7, sp, #8
 800af8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af98:	f7f9 faee 	bl	8004578 <HAL_GetTick>
 800af9c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f003 0308 	and.w	r3, r3, #8
 800afa8:	2b08      	cmp	r3, #8
 800afaa:	d12f      	bne.n	800b00c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800afb4:	2200      	movs	r2, #0
 800afb6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 f88e 	bl	800b0dc <UART_WaitOnFlagUntilTimeout>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d022      	beq.n	800b00c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afce:	e853 3f00 	ldrex	r3, [r3]
 800afd2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800afd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800afda:	653b      	str	r3, [r7, #80]	@ 0x50
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	461a      	mov	r2, r3
 800afe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afe4:	647b      	str	r3, [r7, #68]	@ 0x44
 800afe6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800afea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800afec:	e841 2300 	strex	r3, r2, [r1]
 800aff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1e6      	bne.n	800afc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2220      	movs	r2, #32
 800affc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b008:	2303      	movs	r3, #3
 800b00a:	e063      	b.n	800b0d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f003 0304 	and.w	r3, r3, #4
 800b016:	2b04      	cmp	r3, #4
 800b018:	d149      	bne.n	800b0ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b01a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b01e:	9300      	str	r3, [sp, #0]
 800b020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b022:	2200      	movs	r2, #0
 800b024:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 f857 	bl	800b0dc <UART_WaitOnFlagUntilTimeout>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d03c      	beq.n	800b0ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03c:	e853 3f00 	ldrex	r3, [r3]
 800b040:	623b      	str	r3, [r7, #32]
   return(result);
 800b042:	6a3b      	ldr	r3, [r7, #32]
 800b044:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b048:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	461a      	mov	r2, r3
 800b050:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b052:	633b      	str	r3, [r7, #48]	@ 0x30
 800b054:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b056:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b05a:	e841 2300 	strex	r3, r2, [r1]
 800b05e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b062:	2b00      	cmp	r3, #0
 800b064:	d1e6      	bne.n	800b034 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	3308      	adds	r3, #8
 800b06c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	e853 3f00 	ldrex	r3, [r3]
 800b074:	60fb      	str	r3, [r7, #12]
   return(result);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f023 0301 	bic.w	r3, r3, #1
 800b07c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	3308      	adds	r3, #8
 800b084:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b086:	61fa      	str	r2, [r7, #28]
 800b088:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b08a:	69b9      	ldr	r1, [r7, #24]
 800b08c:	69fa      	ldr	r2, [r7, #28]
 800b08e:	e841 2300 	strex	r3, r2, [r1]
 800b092:	617b      	str	r3, [r7, #20]
   return(result);
 800b094:	697b      	ldr	r3, [r7, #20]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1e5      	bne.n	800b066 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2220      	movs	r2, #32
 800b09e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0aa:	2303      	movs	r3, #3
 800b0ac:	e012      	b.n	800b0d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2220      	movs	r2, #32
 800b0b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2220      	movs	r2, #32
 800b0ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3758      	adds	r7, #88	@ 0x58
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}

0800b0dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	603b      	str	r3, [r7, #0]
 800b0e8:	4613      	mov	r3, r2
 800b0ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0ec:	e04f      	b.n	800b18e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f4:	d04b      	beq.n	800b18e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0f6:	f7f9 fa3f 	bl	8004578 <HAL_GetTick>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	1ad3      	subs	r3, r2, r3
 800b100:	69ba      	ldr	r2, [r7, #24]
 800b102:	429a      	cmp	r2, r3
 800b104:	d302      	bcc.n	800b10c <UART_WaitOnFlagUntilTimeout+0x30>
 800b106:	69bb      	ldr	r3, [r7, #24]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d101      	bne.n	800b110 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b10c:	2303      	movs	r3, #3
 800b10e:	e04e      	b.n	800b1ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f003 0304 	and.w	r3, r3, #4
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d037      	beq.n	800b18e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	2b80      	cmp	r3, #128	@ 0x80
 800b122:	d034      	beq.n	800b18e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	2b40      	cmp	r3, #64	@ 0x40
 800b128:	d031      	beq.n	800b18e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	69db      	ldr	r3, [r3, #28]
 800b130:	f003 0308 	and.w	r3, r3, #8
 800b134:	2b08      	cmp	r3, #8
 800b136:	d110      	bne.n	800b15a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2208      	movs	r2, #8
 800b13e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b140:	68f8      	ldr	r0, [r7, #12]
 800b142:	f000 f920 	bl	800b386 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2208      	movs	r2, #8
 800b14a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2200      	movs	r2, #0
 800b152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b156:	2301      	movs	r3, #1
 800b158:	e029      	b.n	800b1ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	69db      	ldr	r3, [r3, #28]
 800b160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b168:	d111      	bne.n	800b18e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b174:	68f8      	ldr	r0, [r7, #12]
 800b176:	f000 f906 	bl	800b386 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2220      	movs	r2, #32
 800b17e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2200      	movs	r2, #0
 800b186:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b18a:	2303      	movs	r3, #3
 800b18c:	e00f      	b.n	800b1ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	69da      	ldr	r2, [r3, #28]
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	4013      	ands	r3, r2
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	bf0c      	ite	eq
 800b19e:	2301      	moveq	r3, #1
 800b1a0:	2300      	movne	r3, #0
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	79fb      	ldrb	r3, [r7, #7]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d0a0      	beq.n	800b0ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
	...

0800b1b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b096      	sub	sp, #88	@ 0x58
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	68ba      	ldr	r2, [r7, #8]
 800b1ca:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	88fa      	ldrh	r2, [r7, #6]
 800b1d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2222      	movs	r2, #34	@ 0x22
 800b1e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d02d      	beq.n	800b24a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1f4:	4a40      	ldr	r2, [pc, #256]	@ (800b2f8 <UART_Start_Receive_DMA+0x140>)
 800b1f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b1fe:	4a3f      	ldr	r2, [pc, #252]	@ (800b2fc <UART_Start_Receive_DMA+0x144>)
 800b200:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b208:	4a3d      	ldr	r2, [pc, #244]	@ (800b300 <UART_Start_Receive_DMA+0x148>)
 800b20a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b212:	2200      	movs	r2, #0
 800b214:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	3324      	adds	r3, #36	@ 0x24
 800b222:	4619      	mov	r1, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b228:	461a      	mov	r2, r3
 800b22a:	88fb      	ldrh	r3, [r7, #6]
 800b22c:	f7fa ffe0 	bl	80061f0 <HAL_DMA_Start_IT>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d009      	beq.n	800b24a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2210      	movs	r2, #16
 800b23a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2220      	movs	r2, #32
 800b242:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800b246:	2301      	movs	r3, #1
 800b248:	e051      	b.n	800b2ee <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	691b      	ldr	r3, [r3, #16]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d018      	beq.n	800b284 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b25a:	e853 3f00 	ldrex	r3, [r3]
 800b25e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b262:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b266:	657b      	str	r3, [r7, #84]	@ 0x54
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	461a      	mov	r2, r3
 800b26e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b270:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b272:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b274:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b276:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b278:	e841 2300 	strex	r3, r2, [r1]
 800b27c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b27e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1e6      	bne.n	800b252 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	3308      	adds	r3, #8
 800b28a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28e:	e853 3f00 	ldrex	r3, [r3]
 800b292:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b296:	f043 0301 	orr.w	r3, r3, #1
 800b29a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	3308      	adds	r3, #8
 800b2a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b2a4:	637a      	str	r2, [r7, #52]	@ 0x34
 800b2a6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b2aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2ac:	e841 2300 	strex	r3, r2, [r1]
 800b2b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d1e5      	bne.n	800b284 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	3308      	adds	r3, #8
 800b2be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	e853 3f00 	ldrex	r3, [r3]
 800b2c6:	613b      	str	r3, [r7, #16]
   return(result);
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	3308      	adds	r3, #8
 800b2d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b2d8:	623a      	str	r2, [r7, #32]
 800b2da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2dc:	69f9      	ldr	r1, [r7, #28]
 800b2de:	6a3a      	ldr	r2, [r7, #32]
 800b2e0:	e841 2300 	strex	r3, r2, [r1]
 800b2e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d1e5      	bne.n	800b2b8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3758      	adds	r7, #88	@ 0x58
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	0800b453 	.word	0x0800b453
 800b2fc:	0800b587 	.word	0x0800b587
 800b300:	0800b5cd 	.word	0x0800b5cd

0800b304 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b304:	b480      	push	{r7}
 800b306:	b08f      	sub	sp, #60	@ 0x3c
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b312:	6a3b      	ldr	r3, [r7, #32]
 800b314:	e853 3f00 	ldrex	r3, [r3]
 800b318:	61fb      	str	r3, [r7, #28]
   return(result);
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b320:	637b      	str	r3, [r7, #52]	@ 0x34
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	461a      	mov	r2, r3
 800b328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b32a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b32c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b32e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b330:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b332:	e841 2300 	strex	r3, r2, [r1]
 800b336:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d1e6      	bne.n	800b30c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3308      	adds	r3, #8
 800b344:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	e853 3f00 	ldrex	r3, [r3]
 800b34c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b354:	633b      	str	r3, [r7, #48]	@ 0x30
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	3308      	adds	r3, #8
 800b35c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b35e:	61ba      	str	r2, [r7, #24]
 800b360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b362:	6979      	ldr	r1, [r7, #20]
 800b364:	69ba      	ldr	r2, [r7, #24]
 800b366:	e841 2300 	strex	r3, r2, [r1]
 800b36a:	613b      	str	r3, [r7, #16]
   return(result);
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d1e5      	bne.n	800b33e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2220      	movs	r2, #32
 800b376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b37a:	bf00      	nop
 800b37c:	373c      	adds	r7, #60	@ 0x3c
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr

0800b386 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b386:	b480      	push	{r7}
 800b388:	b095      	sub	sp, #84	@ 0x54
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b396:	e853 3f00 	ldrex	r3, [r3]
 800b39a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b3a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b3b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b3b4:	e841 2300 	strex	r3, r2, [r1]
 800b3b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1e6      	bne.n	800b38e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	3308      	adds	r3, #8
 800b3c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c8:	6a3b      	ldr	r3, [r7, #32]
 800b3ca:	e853 3f00 	ldrex	r3, [r3]
 800b3ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b3d6:	f023 0301 	bic.w	r3, r3, #1
 800b3da:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	3308      	adds	r3, #8
 800b3e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3ec:	e841 2300 	strex	r3, r2, [r1]
 800b3f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d1e3      	bne.n	800b3c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d118      	bne.n	800b432 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	e853 3f00 	ldrex	r3, [r3]
 800b40c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	f023 0310 	bic.w	r3, r3, #16
 800b414:	647b      	str	r3, [r7, #68]	@ 0x44
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	461a      	mov	r2, r3
 800b41c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b41e:	61bb      	str	r3, [r7, #24]
 800b420:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b422:	6979      	ldr	r1, [r7, #20]
 800b424:	69ba      	ldr	r2, [r7, #24]
 800b426:	e841 2300 	strex	r3, r2, [r1]
 800b42a:	613b      	str	r3, [r7, #16]
   return(result);
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1e6      	bne.n	800b400 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2220      	movs	r2, #32
 800b436:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b446:	bf00      	nop
 800b448:	3754      	adds	r7, #84	@ 0x54
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr

0800b452 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b09c      	sub	sp, #112	@ 0x70
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b45e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f003 0320 	and.w	r3, r3, #32
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d171      	bne.n	800b552 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b46e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b470:	2200      	movs	r2, #0
 800b472:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b476:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b47e:	e853 3f00 	ldrex	r3, [r3]
 800b482:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b484:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b486:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b48a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b48c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	461a      	mov	r2, r3
 800b492:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b494:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b496:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b498:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b49a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b49c:	e841 2300 	strex	r3, r2, [r1]
 800b4a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b4a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1e6      	bne.n	800b476 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	3308      	adds	r3, #8
 800b4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4b2:	e853 3f00 	ldrex	r3, [r3]
 800b4b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b4b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4ba:	f023 0301 	bic.w	r3, r3, #1
 800b4be:	667b      	str	r3, [r7, #100]	@ 0x64
 800b4c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3308      	adds	r3, #8
 800b4c6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b4c8:	647a      	str	r2, [r7, #68]	@ 0x44
 800b4ca:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b4ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b4d0:	e841 2300 	strex	r3, r2, [r1]
 800b4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b4d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d1e5      	bne.n	800b4a8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	3308      	adds	r3, #8
 800b4e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e6:	e853 3f00 	ldrex	r3, [r3]
 800b4ea:	623b      	str	r3, [r7, #32]
   return(result);
 800b4ec:	6a3b      	ldr	r3, [r7, #32]
 800b4ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b4f2:	663b      	str	r3, [r7, #96]	@ 0x60
 800b4f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	3308      	adds	r3, #8
 800b4fa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b4fc:	633a      	str	r2, [r7, #48]	@ 0x30
 800b4fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b500:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b504:	e841 2300 	strex	r3, r2, [r1]
 800b508:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d1e5      	bne.n	800b4dc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b510:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b512:	2220      	movs	r2, #32
 800b514:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b518:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b51a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d118      	bne.n	800b552 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	e853 3f00 	ldrex	r3, [r3]
 800b52c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f023 0310 	bic.w	r3, r3, #16
 800b534:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b536:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	461a      	mov	r2, r3
 800b53c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b53e:	61fb      	str	r3, [r7, #28]
 800b540:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b542:	69b9      	ldr	r1, [r7, #24]
 800b544:	69fa      	ldr	r2, [r7, #28]
 800b546:	e841 2300 	strex	r3, r2, [r1]
 800b54a:	617b      	str	r3, [r7, #20]
   return(result);
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1e6      	bne.n	800b520 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b554:	2200      	movs	r2, #0
 800b556:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b558:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b55a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b55c:	2b01      	cmp	r3, #1
 800b55e:	d109      	bne.n	800b574 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b562:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b566:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b568:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b56c:	4611      	mov	r1, r2
 800b56e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b570:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b572:	e004      	b.n	800b57e <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b574:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b576:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b57a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b57c:	4798      	blx	r3
}
 800b57e:	bf00      	nop
 800b580:	3770      	adds	r7, #112	@ 0x70
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b084      	sub	sp, #16
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b592:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2201      	movs	r2, #1
 800b598:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d10b      	bne.n	800b5ba <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b5ae:	0852      	lsrs	r2, r2, #1
 800b5b0:	b292      	uxth	r2, r2
 800b5b2:	4611      	mov	r1, r2
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b5b8:	e004      	b.n	800b5c4 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b5c0:	68f8      	ldr	r0, [r7, #12]
 800b5c2:	4798      	blx	r3
}
 800b5c4:	bf00      	nop
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b086      	sub	sp, #24
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5e0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5e8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5f4:	2b80      	cmp	r3, #128	@ 0x80
 800b5f6:	d109      	bne.n	800b60c <UART_DMAError+0x40>
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	2b21      	cmp	r3, #33	@ 0x21
 800b5fc:	d106      	bne.n	800b60c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	2200      	movs	r2, #0
 800b602:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b606:	6978      	ldr	r0, [r7, #20]
 800b608:	f7ff fe7c 	bl	800b304 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b616:	2b40      	cmp	r3, #64	@ 0x40
 800b618:	d109      	bne.n	800b62e <UART_DMAError+0x62>
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2b22      	cmp	r3, #34	@ 0x22
 800b61e:	d106      	bne.n	800b62e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	2200      	movs	r2, #0
 800b624:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b628:	6978      	ldr	r0, [r7, #20]
 800b62a:	f7ff feac 	bl	800b386 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b634:	f043 0210 	orr.w	r2, r3, #16
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b644:	6978      	ldr	r0, [r7, #20]
 800b646:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b648:	bf00      	nop
 800b64a:	3718      	adds	r7, #24
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b65c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2200      	movs	r2, #0
 800b662:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b670:	bf00      	nop
 800b672:	3710      	adds	r7, #16
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b088      	sub	sp, #32
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	e853 3f00 	ldrex	r3, [r3]
 800b68c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b694:	61fb      	str	r3, [r7, #28]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	461a      	mov	r2, r3
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	61bb      	str	r3, [r7, #24]
 800b6a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a2:	6979      	ldr	r1, [r7, #20]
 800b6a4:	69ba      	ldr	r2, [r7, #24]
 800b6a6:	e841 2300 	strex	r3, r2, [r1]
 800b6aa:	613b      	str	r3, [r7, #16]
   return(result);
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d1e6      	bne.n	800b680 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2220      	movs	r2, #32
 800b6b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6ca:	bf00      	nop
 800b6cc:	3720      	adds	r7, #32
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b6d2:	b480      	push	{r7}
 800b6d4:	b083      	sub	sp, #12
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b6da:	bf00      	nop
 800b6dc:	370c      	adds	r7, #12
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b083      	sub	sp, #12
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b6ee:	bf00      	nop
 800b6f0:	370c      	adds	r7, #12
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr

0800b6fa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b6fa:	b480      	push	{r7}
 800b6fc:	b083      	sub	sp, #12
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b702:	bf00      	nop
 800b704:	370c      	adds	r7, #12
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr

0800b70e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b70e:	b480      	push	{r7}
 800b710:	b085      	sub	sp, #20
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d101      	bne.n	800b724 <HAL_UARTEx_DisableFifoMode+0x16>
 800b720:	2302      	movs	r3, #2
 800b722:	e027      	b.n	800b774 <HAL_UARTEx_DisableFifoMode+0x66>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2224      	movs	r2, #36	@ 0x24
 800b730:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f022 0201 	bic.w	r2, r2, #1
 800b74a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b752:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	68fa      	ldr	r2, [r7, #12]
 800b760:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2220      	movs	r2, #32
 800b766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b790:	2b01      	cmp	r3, #1
 800b792:	d101      	bne.n	800b798 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b794:	2302      	movs	r3, #2
 800b796:	e02d      	b.n	800b7f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2224      	movs	r2, #36	@ 0x24
 800b7a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f022 0201 	bic.w	r2, r2, #1
 800b7be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	683a      	ldr	r2, [r7, #0]
 800b7d0:	430a      	orrs	r2, r1
 800b7d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f000 f84f 	bl	800b878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2220      	movs	r2, #32
 800b7e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3710      	adds	r7, #16
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d101      	bne.n	800b814 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b810:	2302      	movs	r3, #2
 800b812:	e02d      	b.n	800b870 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2201      	movs	r2, #1
 800b818:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2224      	movs	r2, #36	@ 0x24
 800b820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f022 0201 	bic.w	r2, r2, #1
 800b83a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	683a      	ldr	r2, [r7, #0]
 800b84c:	430a      	orrs	r2, r1
 800b84e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 f811 	bl	800b878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68fa      	ldr	r2, [r7, #12]
 800b85c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2220      	movs	r2, #32
 800b862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2200      	movs	r2, #0
 800b86a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3710      	adds	r7, #16
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b884:	2b00      	cmp	r3, #0
 800b886:	d108      	bne.n	800b89a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b898:	e031      	b.n	800b8fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b89a:	2308      	movs	r3, #8
 800b89c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b89e:	2308      	movs	r3, #8
 800b8a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	0e5b      	lsrs	r3, r3, #25
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	f003 0307 	and.w	r3, r3, #7
 800b8b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	0f5b      	lsrs	r3, r3, #29
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	f003 0307 	and.w	r3, r3, #7
 800b8c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8c2:	7bbb      	ldrb	r3, [r7, #14]
 800b8c4:	7b3a      	ldrb	r2, [r7, #12]
 800b8c6:	4911      	ldr	r1, [pc, #68]	@ (800b90c <UARTEx_SetNbDataToProcess+0x94>)
 800b8c8:	5c8a      	ldrb	r2, [r1, r2]
 800b8ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b8ce:	7b3a      	ldrb	r2, [r7, #12]
 800b8d0:	490f      	ldr	r1, [pc, #60]	@ (800b910 <UARTEx_SetNbDataToProcess+0x98>)
 800b8d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8d8:	b29a      	uxth	r2, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8e0:	7bfb      	ldrb	r3, [r7, #15]
 800b8e2:	7b7a      	ldrb	r2, [r7, #13]
 800b8e4:	4909      	ldr	r1, [pc, #36]	@ (800b90c <UARTEx_SetNbDataToProcess+0x94>)
 800b8e6:	5c8a      	ldrb	r2, [r1, r2]
 800b8e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b8ec:	7b7a      	ldrb	r2, [r7, #13]
 800b8ee:	4908      	ldr	r1, [pc, #32]	@ (800b910 <UARTEx_SetNbDataToProcess+0x98>)
 800b8f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8f2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b8fe:	bf00      	nop
 800b900:	3714      	adds	r7, #20
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop
 800b90c:	0800c6fc 	.word	0x0800c6fc
 800b910:	0800c704 	.word	0x0800c704

0800b914 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800b914:	b480      	push	{r7}
 800b916:	b085      	sub	sp, #20
 800b918:	af00      	add	r7, sp, #0
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	607b      	str	r3, [r7, #4]
 800b91e:	460b      	mov	r3, r1
 800b920:	817b      	strh	r3, [r7, #10]
 800b922:	4613      	mov	r3, r2
 800b924:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	897a      	ldrh	r2, [r7, #10]
 800b92a:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	893a      	ldrh	r2, [r7, #8]
 800b930:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	605a      	str	r2, [r3, #4]
}
 800b938:	bf00      	nop
 800b93a:	3714      	adds	r7, #20
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <malloc>:
 800b944:	4b02      	ldr	r3, [pc, #8]	@ (800b950 <malloc+0xc>)
 800b946:	4601      	mov	r1, r0
 800b948:	6818      	ldr	r0, [r3, #0]
 800b94a:	f000 b825 	b.w	800b998 <_malloc_r>
 800b94e:	bf00      	nop
 800b950:	20000164 	.word	0x20000164

0800b954 <sbrk_aligned>:
 800b954:	b570      	push	{r4, r5, r6, lr}
 800b956:	4e0f      	ldr	r6, [pc, #60]	@ (800b994 <sbrk_aligned+0x40>)
 800b958:	460c      	mov	r4, r1
 800b95a:	6831      	ldr	r1, [r6, #0]
 800b95c:	4605      	mov	r5, r0
 800b95e:	b911      	cbnz	r1, 800b966 <sbrk_aligned+0x12>
 800b960:	f000 f8ae 	bl	800bac0 <_sbrk_r>
 800b964:	6030      	str	r0, [r6, #0]
 800b966:	4621      	mov	r1, r4
 800b968:	4628      	mov	r0, r5
 800b96a:	f000 f8a9 	bl	800bac0 <_sbrk_r>
 800b96e:	1c43      	adds	r3, r0, #1
 800b970:	d103      	bne.n	800b97a <sbrk_aligned+0x26>
 800b972:	f04f 34ff 	mov.w	r4, #4294967295
 800b976:	4620      	mov	r0, r4
 800b978:	bd70      	pop	{r4, r5, r6, pc}
 800b97a:	1cc4      	adds	r4, r0, #3
 800b97c:	f024 0403 	bic.w	r4, r4, #3
 800b980:	42a0      	cmp	r0, r4
 800b982:	d0f8      	beq.n	800b976 <sbrk_aligned+0x22>
 800b984:	1a21      	subs	r1, r4, r0
 800b986:	4628      	mov	r0, r5
 800b988:	f000 f89a 	bl	800bac0 <_sbrk_r>
 800b98c:	3001      	adds	r0, #1
 800b98e:	d1f2      	bne.n	800b976 <sbrk_aligned+0x22>
 800b990:	e7ef      	b.n	800b972 <sbrk_aligned+0x1e>
 800b992:	bf00      	nop
 800b994:	20001bb4 	.word	0x20001bb4

0800b998 <_malloc_r>:
 800b998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b99c:	1ccd      	adds	r5, r1, #3
 800b99e:	f025 0503 	bic.w	r5, r5, #3
 800b9a2:	3508      	adds	r5, #8
 800b9a4:	2d0c      	cmp	r5, #12
 800b9a6:	bf38      	it	cc
 800b9a8:	250c      	movcc	r5, #12
 800b9aa:	2d00      	cmp	r5, #0
 800b9ac:	4606      	mov	r6, r0
 800b9ae:	db01      	blt.n	800b9b4 <_malloc_r+0x1c>
 800b9b0:	42a9      	cmp	r1, r5
 800b9b2:	d904      	bls.n	800b9be <_malloc_r+0x26>
 800b9b4:	230c      	movs	r3, #12
 800b9b6:	6033      	str	r3, [r6, #0]
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ba94 <_malloc_r+0xfc>
 800b9c2:	f000 f869 	bl	800ba98 <__malloc_lock>
 800b9c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b9ca:	461c      	mov	r4, r3
 800b9cc:	bb44      	cbnz	r4, 800ba20 <_malloc_r+0x88>
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	f7ff ffbf 	bl	800b954 <sbrk_aligned>
 800b9d6:	1c43      	adds	r3, r0, #1
 800b9d8:	4604      	mov	r4, r0
 800b9da:	d158      	bne.n	800ba8e <_malloc_r+0xf6>
 800b9dc:	f8d8 4000 	ldr.w	r4, [r8]
 800b9e0:	4627      	mov	r7, r4
 800b9e2:	2f00      	cmp	r7, #0
 800b9e4:	d143      	bne.n	800ba6e <_malloc_r+0xd6>
 800b9e6:	2c00      	cmp	r4, #0
 800b9e8:	d04b      	beq.n	800ba82 <_malloc_r+0xea>
 800b9ea:	6823      	ldr	r3, [r4, #0]
 800b9ec:	4639      	mov	r1, r7
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	eb04 0903 	add.w	r9, r4, r3
 800b9f4:	f000 f864 	bl	800bac0 <_sbrk_r>
 800b9f8:	4581      	cmp	r9, r0
 800b9fa:	d142      	bne.n	800ba82 <_malloc_r+0xea>
 800b9fc:	6821      	ldr	r1, [r4, #0]
 800b9fe:	1a6d      	subs	r5, r5, r1
 800ba00:	4629      	mov	r1, r5
 800ba02:	4630      	mov	r0, r6
 800ba04:	f7ff ffa6 	bl	800b954 <sbrk_aligned>
 800ba08:	3001      	adds	r0, #1
 800ba0a:	d03a      	beq.n	800ba82 <_malloc_r+0xea>
 800ba0c:	6823      	ldr	r3, [r4, #0]
 800ba0e:	442b      	add	r3, r5
 800ba10:	6023      	str	r3, [r4, #0]
 800ba12:	f8d8 3000 	ldr.w	r3, [r8]
 800ba16:	685a      	ldr	r2, [r3, #4]
 800ba18:	bb62      	cbnz	r2, 800ba74 <_malloc_r+0xdc>
 800ba1a:	f8c8 7000 	str.w	r7, [r8]
 800ba1e:	e00f      	b.n	800ba40 <_malloc_r+0xa8>
 800ba20:	6822      	ldr	r2, [r4, #0]
 800ba22:	1b52      	subs	r2, r2, r5
 800ba24:	d420      	bmi.n	800ba68 <_malloc_r+0xd0>
 800ba26:	2a0b      	cmp	r2, #11
 800ba28:	d917      	bls.n	800ba5a <_malloc_r+0xc2>
 800ba2a:	1961      	adds	r1, r4, r5
 800ba2c:	42a3      	cmp	r3, r4
 800ba2e:	6025      	str	r5, [r4, #0]
 800ba30:	bf18      	it	ne
 800ba32:	6059      	strne	r1, [r3, #4]
 800ba34:	6863      	ldr	r3, [r4, #4]
 800ba36:	bf08      	it	eq
 800ba38:	f8c8 1000 	streq.w	r1, [r8]
 800ba3c:	5162      	str	r2, [r4, r5]
 800ba3e:	604b      	str	r3, [r1, #4]
 800ba40:	4630      	mov	r0, r6
 800ba42:	f000 f82f 	bl	800baa4 <__malloc_unlock>
 800ba46:	f104 000b 	add.w	r0, r4, #11
 800ba4a:	1d23      	adds	r3, r4, #4
 800ba4c:	f020 0007 	bic.w	r0, r0, #7
 800ba50:	1ac2      	subs	r2, r0, r3
 800ba52:	bf1c      	itt	ne
 800ba54:	1a1b      	subne	r3, r3, r0
 800ba56:	50a3      	strne	r3, [r4, r2]
 800ba58:	e7af      	b.n	800b9ba <_malloc_r+0x22>
 800ba5a:	6862      	ldr	r2, [r4, #4]
 800ba5c:	42a3      	cmp	r3, r4
 800ba5e:	bf0c      	ite	eq
 800ba60:	f8c8 2000 	streq.w	r2, [r8]
 800ba64:	605a      	strne	r2, [r3, #4]
 800ba66:	e7eb      	b.n	800ba40 <_malloc_r+0xa8>
 800ba68:	4623      	mov	r3, r4
 800ba6a:	6864      	ldr	r4, [r4, #4]
 800ba6c:	e7ae      	b.n	800b9cc <_malloc_r+0x34>
 800ba6e:	463c      	mov	r4, r7
 800ba70:	687f      	ldr	r7, [r7, #4]
 800ba72:	e7b6      	b.n	800b9e2 <_malloc_r+0x4a>
 800ba74:	461a      	mov	r2, r3
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	42a3      	cmp	r3, r4
 800ba7a:	d1fb      	bne.n	800ba74 <_malloc_r+0xdc>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	6053      	str	r3, [r2, #4]
 800ba80:	e7de      	b.n	800ba40 <_malloc_r+0xa8>
 800ba82:	230c      	movs	r3, #12
 800ba84:	6033      	str	r3, [r6, #0]
 800ba86:	4630      	mov	r0, r6
 800ba88:	f000 f80c 	bl	800baa4 <__malloc_unlock>
 800ba8c:	e794      	b.n	800b9b8 <_malloc_r+0x20>
 800ba8e:	6005      	str	r5, [r0, #0]
 800ba90:	e7d6      	b.n	800ba40 <_malloc_r+0xa8>
 800ba92:	bf00      	nop
 800ba94:	20001bb8 	.word	0x20001bb8

0800ba98 <__malloc_lock>:
 800ba98:	4801      	ldr	r0, [pc, #4]	@ (800baa0 <__malloc_lock+0x8>)
 800ba9a:	f000 b84b 	b.w	800bb34 <__retarget_lock_acquire_recursive>
 800ba9e:	bf00      	nop
 800baa0:	20001cf8 	.word	0x20001cf8

0800baa4 <__malloc_unlock>:
 800baa4:	4801      	ldr	r0, [pc, #4]	@ (800baac <__malloc_unlock+0x8>)
 800baa6:	f000 b846 	b.w	800bb36 <__retarget_lock_release_recursive>
 800baaa:	bf00      	nop
 800baac:	20001cf8 	.word	0x20001cf8

0800bab0 <memset>:
 800bab0:	4402      	add	r2, r0
 800bab2:	4603      	mov	r3, r0
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d100      	bne.n	800baba <memset+0xa>
 800bab8:	4770      	bx	lr
 800baba:	f803 1b01 	strb.w	r1, [r3], #1
 800babe:	e7f9      	b.n	800bab4 <memset+0x4>

0800bac0 <_sbrk_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	4d06      	ldr	r5, [pc, #24]	@ (800badc <_sbrk_r+0x1c>)
 800bac4:	2300      	movs	r3, #0
 800bac6:	4604      	mov	r4, r0
 800bac8:	4608      	mov	r0, r1
 800baca:	602b      	str	r3, [r5, #0]
 800bacc:	f7f7 ff14 	bl	80038f8 <_sbrk>
 800bad0:	1c43      	adds	r3, r0, #1
 800bad2:	d102      	bne.n	800bada <_sbrk_r+0x1a>
 800bad4:	682b      	ldr	r3, [r5, #0]
 800bad6:	b103      	cbz	r3, 800bada <_sbrk_r+0x1a>
 800bad8:	6023      	str	r3, [r4, #0]
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	20001cf4 	.word	0x20001cf4

0800bae0 <__errno>:
 800bae0:	4b01      	ldr	r3, [pc, #4]	@ (800bae8 <__errno+0x8>)
 800bae2:	6818      	ldr	r0, [r3, #0]
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	20000164 	.word	0x20000164

0800baec <__libc_init_array>:
 800baec:	b570      	push	{r4, r5, r6, lr}
 800baee:	4d0d      	ldr	r5, [pc, #52]	@ (800bb24 <__libc_init_array+0x38>)
 800baf0:	4c0d      	ldr	r4, [pc, #52]	@ (800bb28 <__libc_init_array+0x3c>)
 800baf2:	1b64      	subs	r4, r4, r5
 800baf4:	10a4      	asrs	r4, r4, #2
 800baf6:	2600      	movs	r6, #0
 800baf8:	42a6      	cmp	r6, r4
 800bafa:	d109      	bne.n	800bb10 <__libc_init_array+0x24>
 800bafc:	4d0b      	ldr	r5, [pc, #44]	@ (800bb2c <__libc_init_array+0x40>)
 800bafe:	4c0c      	ldr	r4, [pc, #48]	@ (800bb30 <__libc_init_array+0x44>)
 800bb00:	f000 fdb0 	bl	800c664 <_init>
 800bb04:	1b64      	subs	r4, r4, r5
 800bb06:	10a4      	asrs	r4, r4, #2
 800bb08:	2600      	movs	r6, #0
 800bb0a:	42a6      	cmp	r6, r4
 800bb0c:	d105      	bne.n	800bb1a <__libc_init_array+0x2e>
 800bb0e:	bd70      	pop	{r4, r5, r6, pc}
 800bb10:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb14:	4798      	blx	r3
 800bb16:	3601      	adds	r6, #1
 800bb18:	e7ee      	b.n	800baf8 <__libc_init_array+0xc>
 800bb1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb1e:	4798      	blx	r3
 800bb20:	3601      	adds	r6, #1
 800bb22:	e7f2      	b.n	800bb0a <__libc_init_array+0x1e>
 800bb24:	0800cae4 	.word	0x0800cae4
 800bb28:	0800cae4 	.word	0x0800cae4
 800bb2c:	0800cae4 	.word	0x0800cae4
 800bb30:	0800cae8 	.word	0x0800cae8

0800bb34 <__retarget_lock_acquire_recursive>:
 800bb34:	4770      	bx	lr

0800bb36 <__retarget_lock_release_recursive>:
 800bb36:	4770      	bx	lr

0800bb38 <sqrtf>:
 800bb38:	b508      	push	{r3, lr}
 800bb3a:	ed2d 8b02 	vpush	{d8}
 800bb3e:	eeb0 8a40 	vmov.f32	s16, s0
 800bb42:	f000 f8a1 	bl	800bc88 <__ieee754_sqrtf>
 800bb46:	eeb4 8a48 	vcmp.f32	s16, s16
 800bb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb4e:	d60c      	bvs.n	800bb6a <sqrtf+0x32>
 800bb50:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bb70 <sqrtf+0x38>
 800bb54:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb5c:	d505      	bpl.n	800bb6a <sqrtf+0x32>
 800bb5e:	f7ff ffbf 	bl	800bae0 <__errno>
 800bb62:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bb66:	2321      	movs	r3, #33	@ 0x21
 800bb68:	6003      	str	r3, [r0, #0]
 800bb6a:	ecbd 8b02 	vpop	{d8}
 800bb6e:	bd08      	pop	{r3, pc}
 800bb70:	00000000 	.word	0x00000000

0800bb74 <cosf>:
 800bb74:	ee10 3a10 	vmov	r3, s0
 800bb78:	b507      	push	{r0, r1, r2, lr}
 800bb7a:	4a1e      	ldr	r2, [pc, #120]	@ (800bbf4 <cosf+0x80>)
 800bb7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d806      	bhi.n	800bb92 <cosf+0x1e>
 800bb84:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800bbf8 <cosf+0x84>
 800bb88:	b003      	add	sp, #12
 800bb8a:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb8e:	f000 b87f 	b.w	800bc90 <__kernel_cosf>
 800bb92:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bb96:	d304      	bcc.n	800bba2 <cosf+0x2e>
 800bb98:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bb9c:	b003      	add	sp, #12
 800bb9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800bba2:	4668      	mov	r0, sp
 800bba4:	f000 f914 	bl	800bdd0 <__ieee754_rem_pio2f>
 800bba8:	f000 0003 	and.w	r0, r0, #3
 800bbac:	2801      	cmp	r0, #1
 800bbae:	d009      	beq.n	800bbc4 <cosf+0x50>
 800bbb0:	2802      	cmp	r0, #2
 800bbb2:	d010      	beq.n	800bbd6 <cosf+0x62>
 800bbb4:	b9b0      	cbnz	r0, 800bbe4 <cosf+0x70>
 800bbb6:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbba:	ed9d 0a00 	vldr	s0, [sp]
 800bbbe:	f000 f867 	bl	800bc90 <__kernel_cosf>
 800bbc2:	e7eb      	b.n	800bb9c <cosf+0x28>
 800bbc4:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbc8:	ed9d 0a00 	vldr	s0, [sp]
 800bbcc:	f000 f8b8 	bl	800bd40 <__kernel_sinf>
 800bbd0:	eeb1 0a40 	vneg.f32	s0, s0
 800bbd4:	e7e2      	b.n	800bb9c <cosf+0x28>
 800bbd6:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbda:	ed9d 0a00 	vldr	s0, [sp]
 800bbde:	f000 f857 	bl	800bc90 <__kernel_cosf>
 800bbe2:	e7f5      	b.n	800bbd0 <cosf+0x5c>
 800bbe4:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbe8:	ed9d 0a00 	vldr	s0, [sp]
 800bbec:	2001      	movs	r0, #1
 800bbee:	f000 f8a7 	bl	800bd40 <__kernel_sinf>
 800bbf2:	e7d3      	b.n	800bb9c <cosf+0x28>
 800bbf4:	3f490fd8 	.word	0x3f490fd8
 800bbf8:	00000000 	.word	0x00000000

0800bbfc <sinf>:
 800bbfc:	ee10 3a10 	vmov	r3, s0
 800bc00:	b507      	push	{r0, r1, r2, lr}
 800bc02:	4a1f      	ldr	r2, [pc, #124]	@ (800bc80 <sinf+0x84>)
 800bc04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d807      	bhi.n	800bc1c <sinf+0x20>
 800bc0c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800bc84 <sinf+0x88>
 800bc10:	2000      	movs	r0, #0
 800bc12:	b003      	add	sp, #12
 800bc14:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc18:	f000 b892 	b.w	800bd40 <__kernel_sinf>
 800bc1c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bc20:	d304      	bcc.n	800bc2c <sinf+0x30>
 800bc22:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bc26:	b003      	add	sp, #12
 800bc28:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc2c:	4668      	mov	r0, sp
 800bc2e:	f000 f8cf 	bl	800bdd0 <__ieee754_rem_pio2f>
 800bc32:	f000 0003 	and.w	r0, r0, #3
 800bc36:	2801      	cmp	r0, #1
 800bc38:	d00a      	beq.n	800bc50 <sinf+0x54>
 800bc3a:	2802      	cmp	r0, #2
 800bc3c:	d00f      	beq.n	800bc5e <sinf+0x62>
 800bc3e:	b9c0      	cbnz	r0, 800bc72 <sinf+0x76>
 800bc40:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc44:	ed9d 0a00 	vldr	s0, [sp]
 800bc48:	2001      	movs	r0, #1
 800bc4a:	f000 f879 	bl	800bd40 <__kernel_sinf>
 800bc4e:	e7ea      	b.n	800bc26 <sinf+0x2a>
 800bc50:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc54:	ed9d 0a00 	vldr	s0, [sp]
 800bc58:	f000 f81a 	bl	800bc90 <__kernel_cosf>
 800bc5c:	e7e3      	b.n	800bc26 <sinf+0x2a>
 800bc5e:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc62:	ed9d 0a00 	vldr	s0, [sp]
 800bc66:	2001      	movs	r0, #1
 800bc68:	f000 f86a 	bl	800bd40 <__kernel_sinf>
 800bc6c:	eeb1 0a40 	vneg.f32	s0, s0
 800bc70:	e7d9      	b.n	800bc26 <sinf+0x2a>
 800bc72:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc76:	ed9d 0a00 	vldr	s0, [sp]
 800bc7a:	f000 f809 	bl	800bc90 <__kernel_cosf>
 800bc7e:	e7f5      	b.n	800bc6c <sinf+0x70>
 800bc80:	3f490fd8 	.word	0x3f490fd8
 800bc84:	00000000 	.word	0x00000000

0800bc88 <__ieee754_sqrtf>:
 800bc88:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bc8c:	4770      	bx	lr
	...

0800bc90 <__kernel_cosf>:
 800bc90:	ee10 3a10 	vmov	r3, s0
 800bc94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc98:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800bc9c:	eef0 6a40 	vmov.f32	s13, s0
 800bca0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bca4:	d204      	bcs.n	800bcb0 <__kernel_cosf+0x20>
 800bca6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800bcaa:	ee17 2a90 	vmov	r2, s15
 800bcae:	b342      	cbz	r2, 800bd02 <__kernel_cosf+0x72>
 800bcb0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800bcb4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800bd20 <__kernel_cosf+0x90>
 800bcb8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800bd24 <__kernel_cosf+0x94>
 800bcbc:	4a1a      	ldr	r2, [pc, #104]	@ (800bd28 <__kernel_cosf+0x98>)
 800bcbe:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bd2c <__kernel_cosf+0x9c>
 800bcc8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bccc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800bd30 <__kernel_cosf+0xa0>
 800bcd0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bcd4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800bd34 <__kernel_cosf+0xa4>
 800bcd8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bcdc:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800bd38 <__kernel_cosf+0xa8>
 800bce0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bce4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800bce8:	ee26 6a07 	vmul.f32	s12, s12, s14
 800bcec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bcf0:	eee7 0a06 	vfma.f32	s1, s14, s12
 800bcf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcf8:	d804      	bhi.n	800bd04 <__kernel_cosf+0x74>
 800bcfa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bcfe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bd02:	4770      	bx	lr
 800bd04:	4a0d      	ldr	r2, [pc, #52]	@ (800bd3c <__kernel_cosf+0xac>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	bf9a      	itte	ls
 800bd0a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800bd0e:	ee07 3a10 	vmovls	s14, r3
 800bd12:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800bd16:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bd1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd1e:	e7ec      	b.n	800bcfa <__kernel_cosf+0x6a>
 800bd20:	ad47d74e 	.word	0xad47d74e
 800bd24:	310f74f6 	.word	0x310f74f6
 800bd28:	3e999999 	.word	0x3e999999
 800bd2c:	b493f27c 	.word	0xb493f27c
 800bd30:	37d00d01 	.word	0x37d00d01
 800bd34:	bab60b61 	.word	0xbab60b61
 800bd38:	3d2aaaab 	.word	0x3d2aaaab
 800bd3c:	3f480000 	.word	0x3f480000

0800bd40 <__kernel_sinf>:
 800bd40:	ee10 3a10 	vmov	r3, s0
 800bd44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd48:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800bd4c:	d204      	bcs.n	800bd58 <__kernel_sinf+0x18>
 800bd4e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bd52:	ee17 3a90 	vmov	r3, s15
 800bd56:	b35b      	cbz	r3, 800bdb0 <__kernel_sinf+0x70>
 800bd58:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bd5c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bdb4 <__kernel_sinf+0x74>
 800bd60:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800bdb8 <__kernel_sinf+0x78>
 800bd64:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bd68:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800bdbc <__kernel_sinf+0x7c>
 800bd6c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bd70:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800bdc0 <__kernel_sinf+0x80>
 800bd74:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bd78:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800bdc4 <__kernel_sinf+0x84>
 800bd7c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800bd80:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bd84:	b930      	cbnz	r0, 800bd94 <__kernel_sinf+0x54>
 800bd86:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800bdc8 <__kernel_sinf+0x88>
 800bd8a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bd8e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bd92:	4770      	bx	lr
 800bd94:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bd98:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800bd9c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800bda0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800bda4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800bdcc <__kernel_sinf+0x8c>
 800bda8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bdac:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	2f2ec9d3 	.word	0x2f2ec9d3
 800bdb8:	b2d72f34 	.word	0xb2d72f34
 800bdbc:	3638ef1b 	.word	0x3638ef1b
 800bdc0:	b9500d01 	.word	0xb9500d01
 800bdc4:	3c088889 	.word	0x3c088889
 800bdc8:	be2aaaab 	.word	0xbe2aaaab
 800bdcc:	3e2aaaab 	.word	0x3e2aaaab

0800bdd0 <__ieee754_rem_pio2f>:
 800bdd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdd2:	ee10 6a10 	vmov	r6, s0
 800bdd6:	4b88      	ldr	r3, [pc, #544]	@ (800bff8 <__ieee754_rem_pio2f+0x228>)
 800bdd8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800bddc:	429d      	cmp	r5, r3
 800bdde:	b087      	sub	sp, #28
 800bde0:	4604      	mov	r4, r0
 800bde2:	d805      	bhi.n	800bdf0 <__ieee754_rem_pio2f+0x20>
 800bde4:	2300      	movs	r3, #0
 800bde6:	ed80 0a00 	vstr	s0, [r0]
 800bdea:	6043      	str	r3, [r0, #4]
 800bdec:	2000      	movs	r0, #0
 800bdee:	e022      	b.n	800be36 <__ieee754_rem_pio2f+0x66>
 800bdf0:	4b82      	ldr	r3, [pc, #520]	@ (800bffc <__ieee754_rem_pio2f+0x22c>)
 800bdf2:	429d      	cmp	r5, r3
 800bdf4:	d83a      	bhi.n	800be6c <__ieee754_rem_pio2f+0x9c>
 800bdf6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bdfa:	2e00      	cmp	r6, #0
 800bdfc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800c000 <__ieee754_rem_pio2f+0x230>
 800be00:	4a80      	ldr	r2, [pc, #512]	@ (800c004 <__ieee754_rem_pio2f+0x234>)
 800be02:	f023 030f 	bic.w	r3, r3, #15
 800be06:	dd18      	ble.n	800be3a <__ieee754_rem_pio2f+0x6a>
 800be08:	4293      	cmp	r3, r2
 800be0a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800be0e:	bf09      	itett	eq
 800be10:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800c008 <__ieee754_rem_pio2f+0x238>
 800be14:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800c00c <__ieee754_rem_pio2f+0x23c>
 800be18:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800c010 <__ieee754_rem_pio2f+0x240>
 800be1c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800be20:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800be24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be28:	ed80 7a00 	vstr	s14, [r0]
 800be2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800be30:	edc0 7a01 	vstr	s15, [r0, #4]
 800be34:	2001      	movs	r0, #1
 800be36:	b007      	add	sp, #28
 800be38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be3a:	4293      	cmp	r3, r2
 800be3c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800be40:	bf09      	itett	eq
 800be42:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800c008 <__ieee754_rem_pio2f+0x238>
 800be46:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800c00c <__ieee754_rem_pio2f+0x23c>
 800be4a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800c010 <__ieee754_rem_pio2f+0x240>
 800be4e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800be52:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800be56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be5a:	ed80 7a00 	vstr	s14, [r0]
 800be5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be62:	edc0 7a01 	vstr	s15, [r0, #4]
 800be66:	f04f 30ff 	mov.w	r0, #4294967295
 800be6a:	e7e4      	b.n	800be36 <__ieee754_rem_pio2f+0x66>
 800be6c:	4b69      	ldr	r3, [pc, #420]	@ (800c014 <__ieee754_rem_pio2f+0x244>)
 800be6e:	429d      	cmp	r5, r3
 800be70:	d873      	bhi.n	800bf5a <__ieee754_rem_pio2f+0x18a>
 800be72:	f000 f8dd 	bl	800c030 <fabsf>
 800be76:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800c018 <__ieee754_rem_pio2f+0x248>
 800be7a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800be7e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800be82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800be8a:	ee17 0a90 	vmov	r0, s15
 800be8e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c000 <__ieee754_rem_pio2f+0x230>
 800be92:	eea7 0a67 	vfms.f32	s0, s14, s15
 800be96:	281f      	cmp	r0, #31
 800be98:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c00c <__ieee754_rem_pio2f+0x23c>
 800be9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bea0:	eeb1 6a47 	vneg.f32	s12, s14
 800bea4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bea8:	ee16 1a90 	vmov	r1, s13
 800beac:	dc09      	bgt.n	800bec2 <__ieee754_rem_pio2f+0xf2>
 800beae:	4a5b      	ldr	r2, [pc, #364]	@ (800c01c <__ieee754_rem_pio2f+0x24c>)
 800beb0:	1e47      	subs	r7, r0, #1
 800beb2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800beb6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800beba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d107      	bne.n	800bed2 <__ieee754_rem_pio2f+0x102>
 800bec2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800bec6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800beca:	2a08      	cmp	r2, #8
 800becc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800bed0:	dc14      	bgt.n	800befc <__ieee754_rem_pio2f+0x12c>
 800bed2:	6021      	str	r1, [r4, #0]
 800bed4:	ed94 7a00 	vldr	s14, [r4]
 800bed8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bedc:	2e00      	cmp	r6, #0
 800bede:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bee2:	ed84 0a01 	vstr	s0, [r4, #4]
 800bee6:	daa6      	bge.n	800be36 <__ieee754_rem_pio2f+0x66>
 800bee8:	eeb1 7a47 	vneg.f32	s14, s14
 800beec:	eeb1 0a40 	vneg.f32	s0, s0
 800bef0:	ed84 7a00 	vstr	s14, [r4]
 800bef4:	ed84 0a01 	vstr	s0, [r4, #4]
 800bef8:	4240      	negs	r0, r0
 800befa:	e79c      	b.n	800be36 <__ieee754_rem_pio2f+0x66>
 800befc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800c008 <__ieee754_rem_pio2f+0x238>
 800bf00:	eef0 6a40 	vmov.f32	s13, s0
 800bf04:	eee6 6a25 	vfma.f32	s13, s12, s11
 800bf08:	ee70 7a66 	vsub.f32	s15, s0, s13
 800bf0c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bf10:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c010 <__ieee754_rem_pio2f+0x240>
 800bf14:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800bf18:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800bf1c:	ee15 2a90 	vmov	r2, s11
 800bf20:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bf24:	1a5b      	subs	r3, r3, r1
 800bf26:	2b19      	cmp	r3, #25
 800bf28:	dc04      	bgt.n	800bf34 <__ieee754_rem_pio2f+0x164>
 800bf2a:	edc4 5a00 	vstr	s11, [r4]
 800bf2e:	eeb0 0a66 	vmov.f32	s0, s13
 800bf32:	e7cf      	b.n	800bed4 <__ieee754_rem_pio2f+0x104>
 800bf34:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800c020 <__ieee754_rem_pio2f+0x250>
 800bf38:	eeb0 0a66 	vmov.f32	s0, s13
 800bf3c:	eea6 0a25 	vfma.f32	s0, s12, s11
 800bf40:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bf44:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800c024 <__ieee754_rem_pio2f+0x254>
 800bf48:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bf4c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800bf50:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bf54:	ed84 7a00 	vstr	s14, [r4]
 800bf58:	e7bc      	b.n	800bed4 <__ieee754_rem_pio2f+0x104>
 800bf5a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800bf5e:	d306      	bcc.n	800bf6e <__ieee754_rem_pio2f+0x19e>
 800bf60:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bf64:	edc0 7a01 	vstr	s15, [r0, #4]
 800bf68:	edc0 7a00 	vstr	s15, [r0]
 800bf6c:	e73e      	b.n	800bdec <__ieee754_rem_pio2f+0x1c>
 800bf6e:	15ea      	asrs	r2, r5, #23
 800bf70:	3a86      	subs	r2, #134	@ 0x86
 800bf72:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800bf76:	ee07 3a90 	vmov	s15, r3
 800bf7a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bf7e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800c028 <__ieee754_rem_pio2f+0x258>
 800bf82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bf86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf8a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bf8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bf92:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bf96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bf9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf9e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bfa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bfa6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bfaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfae:	edcd 7a05 	vstr	s15, [sp, #20]
 800bfb2:	d11e      	bne.n	800bff2 <__ieee754_rem_pio2f+0x222>
 800bfb4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bfb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfbc:	bf0c      	ite	eq
 800bfbe:	2301      	moveq	r3, #1
 800bfc0:	2302      	movne	r3, #2
 800bfc2:	491a      	ldr	r1, [pc, #104]	@ (800c02c <__ieee754_rem_pio2f+0x25c>)
 800bfc4:	9101      	str	r1, [sp, #4]
 800bfc6:	2102      	movs	r1, #2
 800bfc8:	9100      	str	r1, [sp, #0]
 800bfca:	a803      	add	r0, sp, #12
 800bfcc:	4621      	mov	r1, r4
 800bfce:	f000 f89d 	bl	800c10c <__kernel_rem_pio2f>
 800bfd2:	2e00      	cmp	r6, #0
 800bfd4:	f6bf af2f 	bge.w	800be36 <__ieee754_rem_pio2f+0x66>
 800bfd8:	edd4 7a00 	vldr	s15, [r4]
 800bfdc:	eef1 7a67 	vneg.f32	s15, s15
 800bfe0:	edc4 7a00 	vstr	s15, [r4]
 800bfe4:	edd4 7a01 	vldr	s15, [r4, #4]
 800bfe8:	eef1 7a67 	vneg.f32	s15, s15
 800bfec:	edc4 7a01 	vstr	s15, [r4, #4]
 800bff0:	e782      	b.n	800bef8 <__ieee754_rem_pio2f+0x128>
 800bff2:	2303      	movs	r3, #3
 800bff4:	e7e5      	b.n	800bfc2 <__ieee754_rem_pio2f+0x1f2>
 800bff6:	bf00      	nop
 800bff8:	3f490fd8 	.word	0x3f490fd8
 800bffc:	4016cbe3 	.word	0x4016cbe3
 800c000:	3fc90f80 	.word	0x3fc90f80
 800c004:	3fc90fd0 	.word	0x3fc90fd0
 800c008:	37354400 	.word	0x37354400
 800c00c:	37354443 	.word	0x37354443
 800c010:	2e85a308 	.word	0x2e85a308
 800c014:	43490f80 	.word	0x43490f80
 800c018:	3f22f984 	.word	0x3f22f984
 800c01c:	0800c70c 	.word	0x0800c70c
 800c020:	2e85a300 	.word	0x2e85a300
 800c024:	248d3132 	.word	0x248d3132
 800c028:	43800000 	.word	0x43800000
 800c02c:	0800c78c 	.word	0x0800c78c

0800c030 <fabsf>:
 800c030:	ee10 3a10 	vmov	r3, s0
 800c034:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c038:	ee00 3a10 	vmov	s0, r3
 800c03c:	4770      	bx	lr
	...

0800c040 <scalbnf>:
 800c040:	ee10 3a10 	vmov	r3, s0
 800c044:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c048:	d02b      	beq.n	800c0a2 <scalbnf+0x62>
 800c04a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c04e:	d302      	bcc.n	800c056 <scalbnf+0x16>
 800c050:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c054:	4770      	bx	lr
 800c056:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c05a:	d123      	bne.n	800c0a4 <scalbnf+0x64>
 800c05c:	4b24      	ldr	r3, [pc, #144]	@ (800c0f0 <scalbnf+0xb0>)
 800c05e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c0f4 <scalbnf+0xb4>
 800c062:	4298      	cmp	r0, r3
 800c064:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c068:	db17      	blt.n	800c09a <scalbnf+0x5a>
 800c06a:	ee10 3a10 	vmov	r3, s0
 800c06e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c072:	3a19      	subs	r2, #25
 800c074:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c078:	4288      	cmp	r0, r1
 800c07a:	dd15      	ble.n	800c0a8 <scalbnf+0x68>
 800c07c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c0f8 <scalbnf+0xb8>
 800c080:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c0fc <scalbnf+0xbc>
 800c084:	ee10 3a10 	vmov	r3, s0
 800c088:	eeb0 7a67 	vmov.f32	s14, s15
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	bfb8      	it	lt
 800c090:	eef0 7a66 	vmovlt.f32	s15, s13
 800c094:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c098:	4770      	bx	lr
 800c09a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c100 <scalbnf+0xc0>
 800c09e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c0a2:	4770      	bx	lr
 800c0a4:	0dd2      	lsrs	r2, r2, #23
 800c0a6:	e7e5      	b.n	800c074 <scalbnf+0x34>
 800c0a8:	4410      	add	r0, r2
 800c0aa:	28fe      	cmp	r0, #254	@ 0xfe
 800c0ac:	dce6      	bgt.n	800c07c <scalbnf+0x3c>
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	dd06      	ble.n	800c0c0 <scalbnf+0x80>
 800c0b2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c0b6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c0ba:	ee00 3a10 	vmov	s0, r3
 800c0be:	4770      	bx	lr
 800c0c0:	f110 0f16 	cmn.w	r0, #22
 800c0c4:	da09      	bge.n	800c0da <scalbnf+0x9a>
 800c0c6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c100 <scalbnf+0xc0>
 800c0ca:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c104 <scalbnf+0xc4>
 800c0ce:	ee10 3a10 	vmov	r3, s0
 800c0d2:	eeb0 7a67 	vmov.f32	s14, s15
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	e7d9      	b.n	800c08e <scalbnf+0x4e>
 800c0da:	3019      	adds	r0, #25
 800c0dc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c0e0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c0e4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c108 <scalbnf+0xc8>
 800c0e8:	ee07 3a90 	vmov	s15, r3
 800c0ec:	e7d7      	b.n	800c09e <scalbnf+0x5e>
 800c0ee:	bf00      	nop
 800c0f0:	ffff3cb0 	.word	0xffff3cb0
 800c0f4:	4c000000 	.word	0x4c000000
 800c0f8:	7149f2ca 	.word	0x7149f2ca
 800c0fc:	f149f2ca 	.word	0xf149f2ca
 800c100:	0da24260 	.word	0x0da24260
 800c104:	8da24260 	.word	0x8da24260
 800c108:	33000000 	.word	0x33000000

0800c10c <__kernel_rem_pio2f>:
 800c10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c110:	ed2d 8b04 	vpush	{d8-d9}
 800c114:	b0d9      	sub	sp, #356	@ 0x164
 800c116:	4690      	mov	r8, r2
 800c118:	9001      	str	r0, [sp, #4]
 800c11a:	4ab6      	ldr	r2, [pc, #728]	@ (800c3f4 <__kernel_rem_pio2f+0x2e8>)
 800c11c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800c11e:	f118 0f04 	cmn.w	r8, #4
 800c122:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800c126:	460f      	mov	r7, r1
 800c128:	f103 3bff 	add.w	fp, r3, #4294967295
 800c12c:	db26      	blt.n	800c17c <__kernel_rem_pio2f+0x70>
 800c12e:	f1b8 0203 	subs.w	r2, r8, #3
 800c132:	bf48      	it	mi
 800c134:	f108 0204 	addmi.w	r2, r8, #4
 800c138:	10d2      	asrs	r2, r2, #3
 800c13a:	1c55      	adds	r5, r2, #1
 800c13c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c13e:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800c404 <__kernel_rem_pio2f+0x2f8>
 800c142:	00e8      	lsls	r0, r5, #3
 800c144:	eba2 060b 	sub.w	r6, r2, fp
 800c148:	9002      	str	r0, [sp, #8]
 800c14a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800c14e:	eb0a 0c0b 	add.w	ip, sl, fp
 800c152:	ac1c      	add	r4, sp, #112	@ 0x70
 800c154:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800c158:	2000      	movs	r0, #0
 800c15a:	4560      	cmp	r0, ip
 800c15c:	dd10      	ble.n	800c180 <__kernel_rem_pio2f+0x74>
 800c15e:	a91c      	add	r1, sp, #112	@ 0x70
 800c160:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800c164:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800c168:	2600      	movs	r6, #0
 800c16a:	4556      	cmp	r6, sl
 800c16c:	dc24      	bgt.n	800c1b8 <__kernel_rem_pio2f+0xac>
 800c16e:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c172:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800c404 <__kernel_rem_pio2f+0x2f8>
 800c176:	4684      	mov	ip, r0
 800c178:	2400      	movs	r4, #0
 800c17a:	e016      	b.n	800c1aa <__kernel_rem_pio2f+0x9e>
 800c17c:	2200      	movs	r2, #0
 800c17e:	e7dc      	b.n	800c13a <__kernel_rem_pio2f+0x2e>
 800c180:	42c6      	cmn	r6, r0
 800c182:	bf5d      	ittte	pl
 800c184:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800c188:	ee07 1a90 	vmovpl	s15, r1
 800c18c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c190:	eef0 7a47 	vmovmi.f32	s15, s14
 800c194:	ece4 7a01 	vstmia	r4!, {s15}
 800c198:	3001      	adds	r0, #1
 800c19a:	e7de      	b.n	800c15a <__kernel_rem_pio2f+0x4e>
 800c19c:	ecfe 6a01 	vldmia	lr!, {s13}
 800c1a0:	ed3c 7a01 	vldmdb	ip!, {s14}
 800c1a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c1a8:	3401      	adds	r4, #1
 800c1aa:	455c      	cmp	r4, fp
 800c1ac:	ddf6      	ble.n	800c19c <__kernel_rem_pio2f+0x90>
 800c1ae:	ece9 7a01 	vstmia	r9!, {s15}
 800c1b2:	3601      	adds	r6, #1
 800c1b4:	3004      	adds	r0, #4
 800c1b6:	e7d8      	b.n	800c16a <__kernel_rem_pio2f+0x5e>
 800c1b8:	a908      	add	r1, sp, #32
 800c1ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c1be:	9104      	str	r1, [sp, #16]
 800c1c0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c1c2:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800c400 <__kernel_rem_pio2f+0x2f4>
 800c1c6:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800c3fc <__kernel_rem_pio2f+0x2f0>
 800c1ca:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c1ce:	9203      	str	r2, [sp, #12]
 800c1d0:	4654      	mov	r4, sl
 800c1d2:	00a2      	lsls	r2, r4, #2
 800c1d4:	9205      	str	r2, [sp, #20]
 800c1d6:	aa58      	add	r2, sp, #352	@ 0x160
 800c1d8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c1dc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800c1e0:	a944      	add	r1, sp, #272	@ 0x110
 800c1e2:	aa08      	add	r2, sp, #32
 800c1e4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800c1e8:	4694      	mov	ip, r2
 800c1ea:	4626      	mov	r6, r4
 800c1ec:	2e00      	cmp	r6, #0
 800c1ee:	dc4c      	bgt.n	800c28a <__kernel_rem_pio2f+0x17e>
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c1f6:	f7ff ff23 	bl	800c040 <scalbnf>
 800c1fa:	eeb0 8a40 	vmov.f32	s16, s0
 800c1fe:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800c202:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c206:	f000 f9e9 	bl	800c5dc <floorf>
 800c20a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800c20e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c212:	2d00      	cmp	r5, #0
 800c214:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c218:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c21c:	ee17 9a90 	vmov	r9, s15
 800c220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c224:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c228:	dd41      	ble.n	800c2ae <__kernel_rem_pio2f+0x1a2>
 800c22a:	f104 3cff 	add.w	ip, r4, #4294967295
 800c22e:	a908      	add	r1, sp, #32
 800c230:	f1c5 0e08 	rsb	lr, r5, #8
 800c234:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800c238:	fa46 f00e 	asr.w	r0, r6, lr
 800c23c:	4481      	add	r9, r0
 800c23e:	fa00 f00e 	lsl.w	r0, r0, lr
 800c242:	1a36      	subs	r6, r6, r0
 800c244:	f1c5 0007 	rsb	r0, r5, #7
 800c248:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800c24c:	4106      	asrs	r6, r0
 800c24e:	2e00      	cmp	r6, #0
 800c250:	dd3c      	ble.n	800c2cc <__kernel_rem_pio2f+0x1c0>
 800c252:	f04f 0e00 	mov.w	lr, #0
 800c256:	f109 0901 	add.w	r9, r9, #1
 800c25a:	4670      	mov	r0, lr
 800c25c:	4574      	cmp	r4, lr
 800c25e:	dc68      	bgt.n	800c332 <__kernel_rem_pio2f+0x226>
 800c260:	2d00      	cmp	r5, #0
 800c262:	dd03      	ble.n	800c26c <__kernel_rem_pio2f+0x160>
 800c264:	2d01      	cmp	r5, #1
 800c266:	d074      	beq.n	800c352 <__kernel_rem_pio2f+0x246>
 800c268:	2d02      	cmp	r5, #2
 800c26a:	d07d      	beq.n	800c368 <__kernel_rem_pio2f+0x25c>
 800c26c:	2e02      	cmp	r6, #2
 800c26e:	d12d      	bne.n	800c2cc <__kernel_rem_pio2f+0x1c0>
 800c270:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c274:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c278:	b340      	cbz	r0, 800c2cc <__kernel_rem_pio2f+0x1c0>
 800c27a:	4628      	mov	r0, r5
 800c27c:	9306      	str	r3, [sp, #24]
 800c27e:	f7ff fedf 	bl	800c040 <scalbnf>
 800c282:	9b06      	ldr	r3, [sp, #24]
 800c284:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c288:	e020      	b.n	800c2cc <__kernel_rem_pio2f+0x1c0>
 800c28a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c28e:	3e01      	subs	r6, #1
 800c290:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c298:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c29c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c2a0:	ecac 0a01 	vstmia	ip!, {s0}
 800c2a4:	ed30 0a01 	vldmdb	r0!, {s0}
 800c2a8:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c2ac:	e79e      	b.n	800c1ec <__kernel_rem_pio2f+0xe0>
 800c2ae:	d105      	bne.n	800c2bc <__kernel_rem_pio2f+0x1b0>
 800c2b0:	1e60      	subs	r0, r4, #1
 800c2b2:	a908      	add	r1, sp, #32
 800c2b4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800c2b8:	11f6      	asrs	r6, r6, #7
 800c2ba:	e7c8      	b.n	800c24e <__kernel_rem_pio2f+0x142>
 800c2bc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c2c0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c8:	da31      	bge.n	800c32e <__kernel_rem_pio2f+0x222>
 800c2ca:	2600      	movs	r6, #0
 800c2cc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d4:	f040 8098 	bne.w	800c408 <__kernel_rem_pio2f+0x2fc>
 800c2d8:	1e60      	subs	r0, r4, #1
 800c2da:	2200      	movs	r2, #0
 800c2dc:	4550      	cmp	r0, sl
 800c2de:	da4b      	bge.n	800c378 <__kernel_rem_pio2f+0x26c>
 800c2e0:	2a00      	cmp	r2, #0
 800c2e2:	d065      	beq.n	800c3b0 <__kernel_rem_pio2f+0x2a4>
 800c2e4:	3c01      	subs	r4, #1
 800c2e6:	ab08      	add	r3, sp, #32
 800c2e8:	3d08      	subs	r5, #8
 800c2ea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d0f8      	beq.n	800c2e4 <__kernel_rem_pio2f+0x1d8>
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c2f8:	f7ff fea2 	bl	800c040 <scalbnf>
 800c2fc:	1c63      	adds	r3, r4, #1
 800c2fe:	aa44      	add	r2, sp, #272	@ 0x110
 800c300:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800c400 <__kernel_rem_pio2f+0x2f4>
 800c304:	0099      	lsls	r1, r3, #2
 800c306:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c30a:	4623      	mov	r3, r4
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	f280 80a9 	bge.w	800c464 <__kernel_rem_pio2f+0x358>
 800c312:	4623      	mov	r3, r4
 800c314:	2b00      	cmp	r3, #0
 800c316:	f2c0 80c7 	blt.w	800c4a8 <__kernel_rem_pio2f+0x39c>
 800c31a:	aa44      	add	r2, sp, #272	@ 0x110
 800c31c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c320:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800c3f8 <__kernel_rem_pio2f+0x2ec>
 800c324:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800c404 <__kernel_rem_pio2f+0x2f8>
 800c328:	2000      	movs	r0, #0
 800c32a:	1ae2      	subs	r2, r4, r3
 800c32c:	e0b1      	b.n	800c492 <__kernel_rem_pio2f+0x386>
 800c32e:	2602      	movs	r6, #2
 800c330:	e78f      	b.n	800c252 <__kernel_rem_pio2f+0x146>
 800c332:	f852 1b04 	ldr.w	r1, [r2], #4
 800c336:	b948      	cbnz	r0, 800c34c <__kernel_rem_pio2f+0x240>
 800c338:	b121      	cbz	r1, 800c344 <__kernel_rem_pio2f+0x238>
 800c33a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800c33e:	f842 1c04 	str.w	r1, [r2, #-4]
 800c342:	2101      	movs	r1, #1
 800c344:	f10e 0e01 	add.w	lr, lr, #1
 800c348:	4608      	mov	r0, r1
 800c34a:	e787      	b.n	800c25c <__kernel_rem_pio2f+0x150>
 800c34c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800c350:	e7f5      	b.n	800c33e <__kernel_rem_pio2f+0x232>
 800c352:	f104 3cff 	add.w	ip, r4, #4294967295
 800c356:	aa08      	add	r2, sp, #32
 800c358:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c35c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c360:	a908      	add	r1, sp, #32
 800c362:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c366:	e781      	b.n	800c26c <__kernel_rem_pio2f+0x160>
 800c368:	f104 3cff 	add.w	ip, r4, #4294967295
 800c36c:	aa08      	add	r2, sp, #32
 800c36e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c372:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c376:	e7f3      	b.n	800c360 <__kernel_rem_pio2f+0x254>
 800c378:	a908      	add	r1, sp, #32
 800c37a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c37e:	3801      	subs	r0, #1
 800c380:	430a      	orrs	r2, r1
 800c382:	e7ab      	b.n	800c2dc <__kernel_rem_pio2f+0x1d0>
 800c384:	3201      	adds	r2, #1
 800c386:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800c38a:	2e00      	cmp	r6, #0
 800c38c:	d0fa      	beq.n	800c384 <__kernel_rem_pio2f+0x278>
 800c38e:	9905      	ldr	r1, [sp, #20]
 800c390:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800c394:	eb0d 0001 	add.w	r0, sp, r1
 800c398:	18e6      	adds	r6, r4, r3
 800c39a:	a91c      	add	r1, sp, #112	@ 0x70
 800c39c:	f104 0c01 	add.w	ip, r4, #1
 800c3a0:	384c      	subs	r0, #76	@ 0x4c
 800c3a2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800c3a6:	4422      	add	r2, r4
 800c3a8:	4562      	cmp	r2, ip
 800c3aa:	da04      	bge.n	800c3b6 <__kernel_rem_pio2f+0x2aa>
 800c3ac:	4614      	mov	r4, r2
 800c3ae:	e710      	b.n	800c1d2 <__kernel_rem_pio2f+0xc6>
 800c3b0:	9804      	ldr	r0, [sp, #16]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	e7e7      	b.n	800c386 <__kernel_rem_pio2f+0x27a>
 800c3b6:	9903      	ldr	r1, [sp, #12]
 800c3b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c3bc:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800c3c0:	9105      	str	r1, [sp, #20]
 800c3c2:	ee07 1a90 	vmov	s15, r1
 800c3c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3ca:	2400      	movs	r4, #0
 800c3cc:	ece6 7a01 	vstmia	r6!, {s15}
 800c3d0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800c404 <__kernel_rem_pio2f+0x2f8>
 800c3d4:	46b1      	mov	r9, r6
 800c3d6:	455c      	cmp	r4, fp
 800c3d8:	dd04      	ble.n	800c3e4 <__kernel_rem_pio2f+0x2d8>
 800c3da:	ece0 7a01 	vstmia	r0!, {s15}
 800c3de:	f10c 0c01 	add.w	ip, ip, #1
 800c3e2:	e7e1      	b.n	800c3a8 <__kernel_rem_pio2f+0x29c>
 800c3e4:	ecfe 6a01 	vldmia	lr!, {s13}
 800c3e8:	ed39 7a01 	vldmdb	r9!, {s14}
 800c3ec:	3401      	adds	r4, #1
 800c3ee:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c3f2:	e7f0      	b.n	800c3d6 <__kernel_rem_pio2f+0x2ca>
 800c3f4:	0800cad0 	.word	0x0800cad0
 800c3f8:	0800caa4 	.word	0x0800caa4
 800c3fc:	43800000 	.word	0x43800000
 800c400:	3b800000 	.word	0x3b800000
 800c404:	00000000 	.word	0x00000000
 800c408:	9b02      	ldr	r3, [sp, #8]
 800c40a:	eeb0 0a48 	vmov.f32	s0, s16
 800c40e:	eba3 0008 	sub.w	r0, r3, r8
 800c412:	f7ff fe15 	bl	800c040 <scalbnf>
 800c416:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800c3fc <__kernel_rem_pio2f+0x2f0>
 800c41a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c41e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c422:	db19      	blt.n	800c458 <__kernel_rem_pio2f+0x34c>
 800c424:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800c400 <__kernel_rem_pio2f+0x2f4>
 800c428:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c42c:	aa08      	add	r2, sp, #32
 800c42e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c432:	3508      	adds	r5, #8
 800c434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c438:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c43c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c440:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c444:	ee10 3a10 	vmov	r3, s0
 800c448:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c44c:	ee17 3a90 	vmov	r3, s15
 800c450:	3401      	adds	r4, #1
 800c452:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c456:	e74c      	b.n	800c2f2 <__kernel_rem_pio2f+0x1e6>
 800c458:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c45c:	aa08      	add	r2, sp, #32
 800c45e:	ee10 3a10 	vmov	r3, s0
 800c462:	e7f6      	b.n	800c452 <__kernel_rem_pio2f+0x346>
 800c464:	a808      	add	r0, sp, #32
 800c466:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c46a:	9001      	str	r0, [sp, #4]
 800c46c:	ee07 0a90 	vmov	s15, r0
 800c470:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c474:	3b01      	subs	r3, #1
 800c476:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c47a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c47e:	ed62 7a01 	vstmdb	r2!, {s15}
 800c482:	e743      	b.n	800c30c <__kernel_rem_pio2f+0x200>
 800c484:	ecfc 6a01 	vldmia	ip!, {s13}
 800c488:	ecb5 7a01 	vldmia	r5!, {s14}
 800c48c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c490:	3001      	adds	r0, #1
 800c492:	4550      	cmp	r0, sl
 800c494:	dc01      	bgt.n	800c49a <__kernel_rem_pio2f+0x38e>
 800c496:	4290      	cmp	r0, r2
 800c498:	ddf4      	ble.n	800c484 <__kernel_rem_pio2f+0x378>
 800c49a:	a858      	add	r0, sp, #352	@ 0x160
 800c49c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c4a0:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	e735      	b.n	800c314 <__kernel_rem_pio2f+0x208>
 800c4a8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c4aa:	2b02      	cmp	r3, #2
 800c4ac:	dc09      	bgt.n	800c4c2 <__kernel_rem_pio2f+0x3b6>
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	dc27      	bgt.n	800c502 <__kernel_rem_pio2f+0x3f6>
 800c4b2:	d040      	beq.n	800c536 <__kernel_rem_pio2f+0x42a>
 800c4b4:	f009 0007 	and.w	r0, r9, #7
 800c4b8:	b059      	add	sp, #356	@ 0x164
 800c4ba:	ecbd 8b04 	vpop	{d8-d9}
 800c4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4c2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c4c4:	2b03      	cmp	r3, #3
 800c4c6:	d1f5      	bne.n	800c4b4 <__kernel_rem_pio2f+0x3a8>
 800c4c8:	aa30      	add	r2, sp, #192	@ 0xc0
 800c4ca:	1f0b      	subs	r3, r1, #4
 800c4cc:	4413      	add	r3, r2
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	dc50      	bgt.n	800c578 <__kernel_rem_pio2f+0x46c>
 800c4d6:	4622      	mov	r2, r4
 800c4d8:	2a01      	cmp	r2, #1
 800c4da:	dc5d      	bgt.n	800c598 <__kernel_rem_pio2f+0x48c>
 800c4dc:	ab30      	add	r3, sp, #192	@ 0xc0
 800c4de:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800c404 <__kernel_rem_pio2f+0x2f8>
 800c4e2:	440b      	add	r3, r1
 800c4e4:	2c01      	cmp	r4, #1
 800c4e6:	dc67      	bgt.n	800c5b8 <__kernel_rem_pio2f+0x4ac>
 800c4e8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c4ec:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c4f0:	2e00      	cmp	r6, #0
 800c4f2:	d167      	bne.n	800c5c4 <__kernel_rem_pio2f+0x4b8>
 800c4f4:	edc7 6a00 	vstr	s13, [r7]
 800c4f8:	ed87 7a01 	vstr	s14, [r7, #4]
 800c4fc:	edc7 7a02 	vstr	s15, [r7, #8]
 800c500:	e7d8      	b.n	800c4b4 <__kernel_rem_pio2f+0x3a8>
 800c502:	ab30      	add	r3, sp, #192	@ 0xc0
 800c504:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800c404 <__kernel_rem_pio2f+0x2f8>
 800c508:	440b      	add	r3, r1
 800c50a:	4622      	mov	r2, r4
 800c50c:	2a00      	cmp	r2, #0
 800c50e:	da24      	bge.n	800c55a <__kernel_rem_pio2f+0x44e>
 800c510:	b34e      	cbz	r6, 800c566 <__kernel_rem_pio2f+0x45a>
 800c512:	eef1 7a47 	vneg.f32	s15, s14
 800c516:	edc7 7a00 	vstr	s15, [r7]
 800c51a:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800c51e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c522:	aa31      	add	r2, sp, #196	@ 0xc4
 800c524:	2301      	movs	r3, #1
 800c526:	429c      	cmp	r4, r3
 800c528:	da20      	bge.n	800c56c <__kernel_rem_pio2f+0x460>
 800c52a:	b10e      	cbz	r6, 800c530 <__kernel_rem_pio2f+0x424>
 800c52c:	eef1 7a67 	vneg.f32	s15, s15
 800c530:	edc7 7a01 	vstr	s15, [r7, #4]
 800c534:	e7be      	b.n	800c4b4 <__kernel_rem_pio2f+0x3a8>
 800c536:	ab30      	add	r3, sp, #192	@ 0xc0
 800c538:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800c404 <__kernel_rem_pio2f+0x2f8>
 800c53c:	440b      	add	r3, r1
 800c53e:	2c00      	cmp	r4, #0
 800c540:	da05      	bge.n	800c54e <__kernel_rem_pio2f+0x442>
 800c542:	b10e      	cbz	r6, 800c548 <__kernel_rem_pio2f+0x43c>
 800c544:	eef1 7a67 	vneg.f32	s15, s15
 800c548:	edc7 7a00 	vstr	s15, [r7]
 800c54c:	e7b2      	b.n	800c4b4 <__kernel_rem_pio2f+0x3a8>
 800c54e:	ed33 7a01 	vldmdb	r3!, {s14}
 800c552:	3c01      	subs	r4, #1
 800c554:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c558:	e7f1      	b.n	800c53e <__kernel_rem_pio2f+0x432>
 800c55a:	ed73 7a01 	vldmdb	r3!, {s15}
 800c55e:	3a01      	subs	r2, #1
 800c560:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c564:	e7d2      	b.n	800c50c <__kernel_rem_pio2f+0x400>
 800c566:	eef0 7a47 	vmov.f32	s15, s14
 800c56a:	e7d4      	b.n	800c516 <__kernel_rem_pio2f+0x40a>
 800c56c:	ecb2 7a01 	vldmia	r2!, {s14}
 800c570:	3301      	adds	r3, #1
 800c572:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c576:	e7d6      	b.n	800c526 <__kernel_rem_pio2f+0x41a>
 800c578:	ed72 7a01 	vldmdb	r2!, {s15}
 800c57c:	edd2 6a01 	vldr	s13, [r2, #4]
 800c580:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c584:	3801      	subs	r0, #1
 800c586:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c58a:	ed82 7a00 	vstr	s14, [r2]
 800c58e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c592:	edc2 7a01 	vstr	s15, [r2, #4]
 800c596:	e79c      	b.n	800c4d2 <__kernel_rem_pio2f+0x3c6>
 800c598:	ed73 7a01 	vldmdb	r3!, {s15}
 800c59c:	edd3 6a01 	vldr	s13, [r3, #4]
 800c5a0:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c5a4:	3a01      	subs	r2, #1
 800c5a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5aa:	ed83 7a00 	vstr	s14, [r3]
 800c5ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5b2:	edc3 7a01 	vstr	s15, [r3, #4]
 800c5b6:	e78f      	b.n	800c4d8 <__kernel_rem_pio2f+0x3cc>
 800c5b8:	ed33 7a01 	vldmdb	r3!, {s14}
 800c5bc:	3c01      	subs	r4, #1
 800c5be:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5c2:	e78f      	b.n	800c4e4 <__kernel_rem_pio2f+0x3d8>
 800c5c4:	eef1 6a66 	vneg.f32	s13, s13
 800c5c8:	eeb1 7a47 	vneg.f32	s14, s14
 800c5cc:	edc7 6a00 	vstr	s13, [r7]
 800c5d0:	ed87 7a01 	vstr	s14, [r7, #4]
 800c5d4:	eef1 7a67 	vneg.f32	s15, s15
 800c5d8:	e790      	b.n	800c4fc <__kernel_rem_pio2f+0x3f0>
 800c5da:	bf00      	nop

0800c5dc <floorf>:
 800c5dc:	ee10 3a10 	vmov	r3, s0
 800c5e0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c5e4:	3a7f      	subs	r2, #127	@ 0x7f
 800c5e6:	2a16      	cmp	r2, #22
 800c5e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c5ec:	dc2b      	bgt.n	800c646 <floorf+0x6a>
 800c5ee:	2a00      	cmp	r2, #0
 800c5f0:	da12      	bge.n	800c618 <floorf+0x3c>
 800c5f2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c658 <floorf+0x7c>
 800c5f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c5fa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c602:	dd06      	ble.n	800c612 <floorf+0x36>
 800c604:	2b00      	cmp	r3, #0
 800c606:	da24      	bge.n	800c652 <floorf+0x76>
 800c608:	2900      	cmp	r1, #0
 800c60a:	4b14      	ldr	r3, [pc, #80]	@ (800c65c <floorf+0x80>)
 800c60c:	bf08      	it	eq
 800c60e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c612:	ee00 3a10 	vmov	s0, r3
 800c616:	4770      	bx	lr
 800c618:	4911      	ldr	r1, [pc, #68]	@ (800c660 <floorf+0x84>)
 800c61a:	4111      	asrs	r1, r2
 800c61c:	420b      	tst	r3, r1
 800c61e:	d0fa      	beq.n	800c616 <floorf+0x3a>
 800c620:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c658 <floorf+0x7c>
 800c624:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c628:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c630:	ddef      	ble.n	800c612 <floorf+0x36>
 800c632:	2b00      	cmp	r3, #0
 800c634:	bfbe      	ittt	lt
 800c636:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c63a:	fa40 f202 	asrlt.w	r2, r0, r2
 800c63e:	189b      	addlt	r3, r3, r2
 800c640:	ea23 0301 	bic.w	r3, r3, r1
 800c644:	e7e5      	b.n	800c612 <floorf+0x36>
 800c646:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c64a:	d3e4      	bcc.n	800c616 <floorf+0x3a>
 800c64c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c650:	4770      	bx	lr
 800c652:	2300      	movs	r3, #0
 800c654:	e7dd      	b.n	800c612 <floorf+0x36>
 800c656:	bf00      	nop
 800c658:	7149f2ca 	.word	0x7149f2ca
 800c65c:	bf800000 	.word	0xbf800000
 800c660:	007fffff 	.word	0x007fffff

0800c664 <_init>:
 800c664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c666:	bf00      	nop
 800c668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c66a:	bc08      	pop	{r3}
 800c66c:	469e      	mov	lr, r3
 800c66e:	4770      	bx	lr

0800c670 <_fini>:
 800c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c672:	bf00      	nop
 800c674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c676:	bc08      	pop	{r3}
 800c678:	469e      	mov	lr, r3
 800c67a:	4770      	bx	lr
