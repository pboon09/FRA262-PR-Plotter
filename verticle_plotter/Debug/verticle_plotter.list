
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000137f0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  080139c8  080139c8  000149c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014028  08014028  00016194  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014028  08014028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014030  08014030  00016194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014030  08014030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014034  08014034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  08014038  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021f0  20000194  080141cc  00016194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002384  080141cc  00016384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c43e  00000000  00000000  000161c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055bb  00000000  00000000  00042602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  00047bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016a1  00000000  00000000  000498c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db96  00000000  00000000  0004af69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bc21  00000000  00000000  00078aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a0fc  00000000  00000000  000a4720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001be81c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008494  00000000  00000000  001be860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c6cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000194 	.word	0x20000194
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080139b0 	.word	0x080139b0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000198 	.word	0x20000198
 8000214:	080139b0 	.word	0x080139b0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00a f906 	bl	800b1f0 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f009 f9ef 	bl	800a3d4 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe95 	bl	8001e6a <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PID_CONTROLLER_Reset>:

void PID_CONTROLLER_Reset(PID_CONTROLLER *controller) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    controller->ek_1 = 0.0f;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
    controller->ek_2 = 0.0f;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
    controller->u = 0.0f;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
    controller->prev_Kp = controller->Kp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
    controller->prev_Ki = controller->Ki;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
    controller->prev_Kd = controller->Kd;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3328      	adds	r3, #40	@ 0x28
 80013a0:	88fa      	ldrh	r2, [r7, #6]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 f853 	bl	8003450 <PWM_init>
	mdxx->GPIOx = GPIOx;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8b3a      	ldrh	r2, [r7, #24]
 80013b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013d4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d15f      	bne.n	80014a2 <MDXX_set_range+0xda>
		if (duty == 0) {
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d115      	bne.n	800141c <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3310      	adds	r3, #16
 80013f4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001574 <MDXX_set_range+0x1ac>
 80013f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 f94f 	bl	80036a0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3328      	adds	r3, #40	@ 0x28
 8001406:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001574 <MDXX_set_range+0x1ac>
 800140a:	ed97 0a02 	vldr	s0, [r7, #8]
 800140e:	4618      	mov	r0, r3
 8001410:	f002 f946 	bl	80036a0 <PWM_write_range>
			mdxx->cmd = 0;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800141a:	e0a6      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 800141c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd1a      	ble.n	8001460 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3310      	adds	r3, #16
 800142e:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001574 <MDXX_set_range+0x1ac>
 8001432:	ed97 0a02 	vldr	s0, [r7, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f002 f932 	bl	80036a0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3328      	adds	r3, #40	@ 0x28
 8001440:	edd7 0a01 	vldr	s1, [r7, #4]
 8001444:	ed97 0a02 	vldr	s0, [r7, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f002 f929 	bl	80036a0 <PWM_write_range>
			mdxx->cmd = duty;
 800144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001456:	ee17 2a90 	vmov	r2, s15
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145e:	e084      	b.n	800156a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3310      	adds	r3, #16
 8001464:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001578 <MDXX_set_range+0x1b0>
 8001468:	ed97 0a02 	vldr	s0, [r7, #8]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 f917 	bl	80036a0 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3328      	adds	r3, #40	@ 0x28
 8001476:	edd7 7a01 	vldr	s15, [r7, #4]
 800147a:	eef0 7ae7 	vabs.f32	s15, s15
 800147e:	eef0 0a67 	vmov.f32	s1, s15
 8001482:	ed97 0a02 	vldr	s0, [r7, #8]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 f90a 	bl	80036a0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001490:	eef0 7ae7 	vabs.f32	s15, s15
 8001494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001498:	ee17 2a90 	vmov	r2, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e063      	b.n	800156a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d15e      	bne.n	800156a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80014ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d115      	bne.n	80014e6 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	f00a fdd8 	bl	800c07c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3328      	adds	r3, #40	@ 0x28
 80014d0:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001574 <MDXX_set_range+0x1ac>
 80014d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 f8e1 	bl	80036a0 <PWM_write_range>
			mdxx->cmd = 0;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e041      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd1a      	ble.n	800152a <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	f00a fdbb 	bl	800c07c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3328      	adds	r3, #40	@ 0x28
 800150a:	edd7 0a01 	vldr	s1, [r7, #4]
 800150e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f002 f8c4 	bl	80036a0 <PWM_write_range>
			mdxx->cmd = duty;
 8001518:	edd7 7a01 	vldr	s15, [r7, #4]
 800151c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001520:	ee17 2a90 	vmov	r2, s15
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001528:	e01f      	b.n	800156a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f00a fda0 	bl	800c07c <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3328      	adds	r3, #40	@ 0x28
 8001540:	edd7 7a01 	vldr	s15, [r7, #4]
 8001544:	eef0 7ae7 	vabs.f32	s15, s15
 8001548:	eef0 0a67 	vmov.f32	s1, s15
 800154c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f002 f8a5 	bl	80036a0 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001556:	edd7 7a01 	vldr	s15, [r7, #4]
 800155a:	eef0 7ae7 	vabs.f32	s15, s15
 800155e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001562:	ee17 2a90 	vmov	r2, s15
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	00000000 	.word	0x00000000
 8001578:	42c80000 	.word	0x42c80000

0800157c <REVOLUTE_MOTOR_FFD_Init>:
	.offset = 30.07e-3,
    .c = 24.13e-3,
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	ed2d 8b02 	vpush	{d8}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015b8:	f7fe ffea 	bl	8000590 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	461d      	mov	r5, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015d4:	f7fe ffdc 	bl	8000590 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe fe20 	bl	8000224 <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015f4:	f7ff f8f6 	bl	80007e4 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff faa8 	bl	8000b54 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 8001608:	ed97 7a00 	vldr	s14, [r7]
 800160c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa96 	bl	8000b54 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eeb1 8a67 	vneg.f32	s16, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa89 	bl	8000b54 <__aeabi_d2f>
 8001642:	4604      	mov	r4, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fa80 	bl	8000b54 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef1 8a67 	vneg.f32	s17, s15
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa73 	bl	8000b54 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	ee02 3a10 	vmov	s4, r3
 8001674:	eef0 1a68 	vmov.f32	s3, s17
 8001678:	ee01 4a10 	vmov	s2, r4
 800167c:	eef0 0a48 	vmov.f32	s1, s16
 8001680:	ed97 0a02 	vldr	s0, [r7, #8]
 8001684:	f000 fbf1 	bl	8001e6a <mapf>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
}
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	ecbd 8b02 	vpop	{d8}
 8001698:	bdb0      	pop	{r4, r5, r7, pc}

0800169a <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	605a      	str	r2, [r3, #4]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float s){
 80016be:	b5b0      	push	{r4, r5, r7, lr}
 80016c0:	ed2d 8b02 	vpush	{d8}
 80016c4:	b088      	sub	sp, #32
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	ed87 0a02 	vstr	s0, [r7, #8]
 80016ce:	edc7 0a01 	vstr	s1, [r7, #4]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s + motor->En->offset);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e6:	ee17 0a90 	vmov	r0, s15
 80016ea:	f7fe fef9 	bl	80004e0 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	68b8      	ldr	r0, [r7, #8]
 80016f4:	f7fe fef4 	bl	80004e0 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	ec43 2b10 	vmov	d0, r2, r3
 8001700:	f010 faa2 	bl	8011c48 <sin>
 8001704:	ec53 2b10 	vmov	r2, r3, d0
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe ff40 	bl	8000590 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001728:	ee17 0a90 	vmov	r0, s15
 800172c:	f7fe fed8 	bl	80004e0 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe ff2a 	bl	8000590 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa06 	bl	8000b54 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->slide_rail_mass * motor->En->g * sin(q) * (motor->En->c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	ed93 7a02 	vldr	s14, [r3, #8]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe febc 	bl	80004e0 <__aeabi_f2d>
 8001768:	4604      	mov	r4, r0
 800176a:	460d      	mov	r5, r1
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f7fe feb7 	bl	80004e0 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ec43 2b10 	vmov	d0, r2, r3
 800177a:	f010 fa65 	bl	8011c48 <sin>
 800177e:	ec53 2b10 	vmov	r2, r3, d0
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe ff03 	bl	8000590 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4614      	mov	r4, r2
 8001790:	461d      	mov	r5, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fea1 	bl	80004e0 <__aeabi_f2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7fe fef3 	bl	8000590 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f9cf 	bl	8000b54 <__aeabi_d2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017ca:	f7ff f80b 	bl	80007e4 <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f9bd 	bl	8000b54 <__aeabi_d2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter - gravity_compensate_rail) * transfer_function;
 80017de:	ed97 7a07 	vldr	s14, [r7, #28]
 80017e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80017ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f2:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f9a7 	bl	8000b54 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb1 8a67 	vneg.f32	s16, s15
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f99a 	bl	8000b54 <__aeabi_d2f>
 8001820:	4604      	mov	r4, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f991 	bl	8000b54 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef1 8a67 	vneg.f32	s17, s15
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f984 	bl	8000b54 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	ee02 3a10 	vmov	s4, r3
 8001852:	eef0 1a68 	vmov.f32	s3, s17
 8001856:	ee01 4a10 	vmov	s2, r4
 800185a:	eef0 0a48 	vmov.f32	s1, s16
 800185e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001862:	f000 fb02 	bl	8001e6a <mapf>
 8001866:	eef0 7a40 	vmov.f32	s15, s0
}
 800186a:	eeb0 0a67 	vmov.f32	s0, s15
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	ecbd 8b02 	vpop	{d8}
 8001876:	bdb0      	pop	{r4, r5, r7, pc}

08001878 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	0000      	movs	r0, r0
	...

08001898 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	ed2d 8b02 	vpush	{d8}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018b8:	f7fe fe6a 	bl	8000590 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018d4:	f7fe fe5c 	bl	8000590 <__aeabi_dmul>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4620      	mov	r0, r4
 80018de:	4629      	mov	r1, r5
 80018e0:	f7fe fca0 	bl	8000224 <__adddf3>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018f4:	f7fe ff76 	bl	80007e4 <__aeabi_ddiv>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff f928 	bl	8000b54 <__aeabi_d2f>
 8001904:	4603      	mov	r3, r0
 8001906:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 8001908:	ed97 7a00 	vldr	s14, [r7]
 800190c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001918:	68b8      	ldr	r0, [r7, #8]
 800191a:	f7fe fde1 	bl	80004e0 <__aeabi_f2d>
 800191e:	a326      	add	r3, pc, #152	@ (adr r3, 80019b8 <PRISMATIC_MOTOR_FFD_Compute+0x120>)
 8001920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001924:	f7fe fe34 	bl	8000590 <__aeabi_dmul>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4610      	mov	r0, r2
 800192e:	4619      	mov	r1, r3
 8001930:	f7ff f910 	bl	8000b54 <__aeabi_d2f>
 8001934:	4604      	mov	r4, r0
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f7ff f907 	bl	8000b54 <__aeabi_d2f>
 8001946:	4603      	mov	r3, r0
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eeb1 8a67 	vneg.f32	s16, s15
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f8fa 	bl	8000b54 <__aeabi_d2f>
 8001960:	4605      	mov	r5, r0
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f8f1 	bl	8000b54 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	ee07 3a90 	vmov	s15, r3
 8001978:	eef1 8a67 	vneg.f32	s17, s15
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	f7ff f8e4 	bl	8000b54 <__aeabi_d2f>
 800198c:	4603      	mov	r3, r0
 800198e:	ee02 3a10 	vmov	s4, r3
 8001992:	eef0 1a68 	vmov.f32	s3, s17
 8001996:	ee01 5a10 	vmov	s2, r5
 800199a:	eef0 0a48 	vmov.f32	s1, s16
 800199e:	ee00 4a10 	vmov	s0, r4
 80019a2:	f000 fa62 	bl	8001e6a <mapf>
 80019a6:	eef0 7a40 	vmov.f32	s15, s0
}
 80019aa:	eeb0 0a67 	vmov.f32	s0, s15
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	ecbd 8b02 	vpop	{d8}
 80019b6:	bdb0      	pop	{r4, r5, r7, pc}
 80019b8:	9999999a 	.word	0x9999999a
 80019bc:	3fb99999 	.word	0x3fb99999

080019c0 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]
}
 80019d8:	bf00      	nop
 80019da:	3714      	adds	r7, #20
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	0000      	movs	r0, r0
	...

080019e8 <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 80019e8:	b5b0      	push	{r4, r5, r7, lr}
 80019ea:	ed2d 8b02 	vpush	{d8}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80019f8:	edc7 0a01 	vstr	s1, [r7, #4]
 80019fc:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a14:	ee17 0a90 	vmov	r0, s15
 8001a18:	f7fe fd62 	bl	80004e0 <__aeabi_f2d>
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	460d      	mov	r5, r1
 8001a20:	68b8      	ldr	r0, [r7, #8]
 8001a22:	f7fe fd5d 	bl	80004e0 <__aeabi_f2d>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	ec43 2b10 	vmov	d0, r2, r3
 8001a2e:	f010 f8b7 	bl	8011ba0 <cos>
 8001a32:	ec53 2b10 	vmov	r2, r3, d0
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f7fe fda9 	bl	8000590 <__aeabi_dmul>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff f885 	bl	8000b54 <__aeabi_d2f>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a56:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a66:	ed97 7a00 	vldr	s14, [r7]
 8001a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6e:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd2d 	bl	80004e0 <__aeabi_f2d>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	4629      	mov	r1, r5
 8001a8e:	f7fe fd7f 	bl	8000590 <__aeabi_dmul>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001aa2:	f7fe fe9f 	bl	80007e4 <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
 8001aae:	f7ff f851 	bl	8000b54 <__aeabi_d2f>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001ab6:	ed97 7a07 	vldr	s14, [r7, #28]
 8001aba:	edd7 7a06 	vldr	s15, [r7, #24]
 8001abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aca:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001ace:	6938      	ldr	r0, [r7, #16]
 8001ad0:	f7fe fd06 	bl	80004e0 <__aeabi_f2d>
 8001ad4:	a326      	add	r3, pc, #152	@ (adr r3, 8001b70 <PRISMATIC_MOTOR_DFD_Compute+0x188>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fd59 	bl	8000590 <__aeabi_dmul>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f835 	bl	8000b54 <__aeabi_d2f>
 8001aea:	4604      	mov	r4, r0
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f7ff f82c 	bl	8000b54 <__aeabi_d2f>
 8001afc:	4603      	mov	r3, r0
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb1 8a67 	vneg.f32	s16, s15
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	f7ff f81f 	bl	8000b54 <__aeabi_d2f>
 8001b16:	4605      	mov	r5, r0
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7ff f816 	bl	8000b54 <__aeabi_d2f>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eef1 8a67 	vneg.f32	s17, s15
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f7ff f809 	bl	8000b54 <__aeabi_d2f>
 8001b42:	4603      	mov	r3, r0
 8001b44:	ee02 3a10 	vmov	s4, r3
 8001b48:	eef0 1a68 	vmov.f32	s3, s17
 8001b4c:	ee01 5a10 	vmov	s2, r5
 8001b50:	eef0 0a48 	vmov.f32	s1, s16
 8001b54:	ee00 4a10 	vmov	s0, r4
 8001b58:	f000 f987 	bl	8001e6a <mapf>
 8001b5c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b60:	eeb0 0a67 	vmov.f32	s0, s15
 8001b64:	3720      	adds	r7, #32
 8001b66:	46bd      	mov	sp, r7
 8001b68:	ecbd 8b02 	vpop	{d8}
 8001b6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	9999999a 	.word	0x9999999a
 8001b74:	3fb99999 	.word	0x3fb99999

08001b78 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	ed2d 8b02 	vpush	{d8}
 8001b7e:	b08a      	sub	sp, #40	@ 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	460b      	mov	r3, r1
 8001b86:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b8a:	edc7 0a00 	vstr	s1, [r7]
 8001b8e:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b90:	897b      	ldrh	r3, [r7, #10]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <FIR_init+0x2a>
        numTaps += 1;
 8001b9c:	897b      	ldrh	r3, [r7, #10]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	897a      	ldrh	r2, [r7, #10]
 8001ba6:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001bae:	897b      	ldrh	r3, [r7, #10]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f00f feea 	bl	801198c <malloc>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001bc0:	897b      	ldrh	r3, [r7, #10]
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f00f fee1 	bl	801198c <malloc>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80e0 	beq.w	8001d9c <FIR_init+0x224>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80db 	beq.w	8001d9c <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001be6:	2300      	movs	r3, #0
 8001be8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bea:	e00a      	b.n	8001c02 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001bfc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bfe:	3301      	adds	r3, #1
 8001c00:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001c02:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001c04:	897b      	ldrh	r3, [r7, #10]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d3f0      	bcc.n	8001bec <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001c0a:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c0e:	ed97 7a00 	vldr	s14, [r7]
 8001c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c16:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001c1a:	897b      	ldrh	r3, [r7, #10]
 8001c1c:	085b      	lsrs	r3, r3, #1
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001c22:	2300      	movs	r3, #0
 8001c24:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001c26:	e077      	b.n	8001d18 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001c28:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001c2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d10c      	bne.n	8001c4e <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c44:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c48:	edc3 7a00 	vstr	s15, [r3]
 8001c4c:	e02c      	b.n	8001ca8 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001c4e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c50:	8afb      	ldrh	r3, [r7, #22]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001c58:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c5c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001da8 <FIR_init+0x230>
 8001c60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c64:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c74:	eeb0 0a67 	vmov.f32	s0, s15
 8001c78:	f010 f8bc 	bl	8011df4 <sinf>
 8001c7c:	eef0 6a40 	vmov.f32	s13, s0
 8001c80:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001dac <FIR_init+0x234>
 8001c90:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ca4:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	ed93 8a00 	vldr	s16, [r3]
 8001cb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001da8 <FIR_init+0x230>
 8001cc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ccc:	897b      	ldrh	r3, [r7, #10]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cdc:	eeb0 0a66 	vmov.f32	s0, s13
 8001ce0:	f010 f844 	bl	8011d6c <cosf>
 8001ce4:	eef0 7a40 	vmov.f32	s15, s0
 8001ce8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001db0 <FIR_init+0x238>
 8001cec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001db4 <FIR_init+0x23c>
 8001cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d08:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001d0c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001d18:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001d1c:	897b      	ldrh	r3, [r7, #10]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	db82      	blt.n	8001c28 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001d28:	2300      	movs	r3, #0
 8001d2a:	83fb      	strh	r3, [r7, #30]
 8001d2c:	e00f      	b.n	8001d4e <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	8bfb      	ldrh	r3, [r7, #30]
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d44:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001d48:	8bfb      	ldrh	r3, [r7, #30]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	83fb      	strh	r3, [r7, #30]
 8001d4e:	8bfa      	ldrh	r2, [r7, #30]
 8001d50:	897b      	ldrh	r3, [r7, #10]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d3eb      	bcc.n	8001d2e <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001d56:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d62:	d01b      	beq.n	8001d9c <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d64:	2300      	movs	r3, #0
 8001d66:	83bb      	strh	r3, [r7, #28]
 8001d68:	e014      	b.n	8001d94 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	8bbb      	ldrh	r3, [r7, #28]
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	edd3 6a00 	vldr	s13, [r3]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	8bbb      	ldrh	r3, [r7, #28]
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d8a:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d8e:	8bbb      	ldrh	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	83bb      	strh	r3, [r7, #28]
 8001d94:	8bba      	ldrh	r2, [r7, #28]
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d3e6      	bcc.n	8001d6a <FIR_init+0x1f2>
            }
        }
    }
}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	@ 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	ecbd 8b02 	vpop	{d8}
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40c90fdb 	.word	0x40c90fdb
 8001dac:	40490fdb 	.word	0x40490fdb
 8001db0:	3eeb851f 	.word	0x3eeb851f
 8001db4:	3f0a3d71 	.word	0x3f0a3d71

08001db8 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	895b      	ldrh	r3, [r3, #10]
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8001dd4:	f04f 0300 	mov.w	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	895b      	ldrh	r3, [r3, #10]
 8001dde:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001de0:	2300      	movs	r3, #0
 8001de2:	813b      	strh	r3, [r7, #8]
 8001de4:	e023      	b.n	8001e2e <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	897b      	ldrh	r3, [r7, #10]
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	ed93 7a00 	vldr	s14, [r3]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	893b      	ldrh	r3, [r7, #8]
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e06:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0e:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 8001e12:	897b      	ldrh	r3, [r7, #10]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d104      	bne.n	8001e22 <FIR_process+0x6a>
            index = fir->numTaps - 1;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	891b      	ldrh	r3, [r3, #8]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	817b      	strh	r3, [r7, #10]
 8001e20:	e002      	b.n	8001e28 <FIR_process+0x70>
        } else {
            index--;
 8001e22:	897b      	ldrh	r3, [r7, #10]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001e28:	893b      	ldrh	r3, [r7, #8]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	813b      	strh	r3, [r7, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	891b      	ldrh	r3, [r3, #8]
 8001e32:	893a      	ldrh	r2, [r7, #8]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d3d6      	bcc.n	8001de6 <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	895b      	ldrh	r3, [r3, #10]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	895a      	ldrh	r2, [r3, #10]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	891b      	ldrh	r3, [r3, #8]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d302      	bcc.n	8001e56 <FIR_process+0x9e>
        fir->bufferIndex = 0;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	815a      	strh	r2, [r3, #10]
    }

    return output;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	ee07 3a90 	vmov	s15, r3
}
 8001e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001e6a:	b480      	push	{r7}
 8001e6c:	b089      	sub	sp, #36	@ 0x24
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e74:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e78:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e7c:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e80:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001e84:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e8c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e90:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e94:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea0:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001ea4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ea8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001eb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb8:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec0:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	ee07 3a90 	vmov	s15, r3
}
 8001eca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ece:	3724      	adds	r7, #36	@ 0x24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001edc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2200      	movs	r2, #0
 8001eee:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001ef0:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <modbus_1t5_Timeout+0x3c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	200001b0 	.word	0x200001b0

08001f18 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001f20:	4b04      	ldr	r3, [pc, #16]	@ (8001f34 <modbus_3t5_Timeout+0x1c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	755a      	strb	r2, [r3, #21]

}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	200001b0 	.word	0x200001b0

08001f38 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f00d ff69 	bl	800fe18 <HAL_UART_GetError>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d101      	bne.n	8001f50 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001f4c:	f7ff ffc4 	bl	8001ed8 <modbus_1t5_Timeout>

	}
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001f66:	4a2d      	ldr	r2, [pc, #180]	@ (800201c <Modbus_init+0xc4>)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001f6c:	4b2b      	ldr	r3, [pc, #172]	@ (800201c <Modbus_init+0xc4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001f74:	4b29      	ldr	r3, [pc, #164]	@ (800201c <Modbus_init+0xc4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001f7c:	4b27      	ldr	r3, [pc, #156]	@ (800201c <Modbus_init+0xc4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001f84:	4b25      	ldr	r3, [pc, #148]	@ (800201c <Modbus_init+0xc4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	7e3a      	ldrb	r2, [r7, #24]
 8001f8a:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001f8c:	4b23      	ldr	r3, [pc, #140]	@ (800201c <Modbus_init+0xc4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	4a21      	ldr	r2, [pc, #132]	@ (8002020 <Modbus_init+0xc8>)
 8001f9a:	210e      	movs	r1, #14
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f00c f9df 	bl	800e360 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2110      	movs	r1, #16
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f00d fedf 	bl	800fd6c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f00d fef6 	bl	800fda4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4a19      	ldr	r2, [pc, #100]	@ (8002024 <Modbus_init+0xcc>)
 8001fbe:	2104      	movs	r1, #4
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f00d fa1d 	bl	800f400 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001fc6:	4b15      	ldr	r3, [pc, #84]	@ (800201c <Modbus_init+0xc4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001fcc:	4b13      	ldr	r3, [pc, #76]	@ (800201c <Modbus_init+0xc4>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b12      	ldr	r3, [pc, #72]	@ (800201c <Modbus_init+0xc4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001fd8:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001fdc:	4413      	add	r3, r2
 8001fde:	3302      	adds	r3, #2
 8001fe0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f00d fac5 	bl	800f574 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001fea:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <Modbus_init+0xc4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d10c      	bne.n	8002014 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001ffa:	4b08      	ldr	r3, [pc, #32]	@ (800201c <Modbus_init+0xc4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	4618      	mov	r0, r3
 8002002:	f00b f989 	bl	800d318 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8002006:	4b05      	ldr	r3, [pc, #20]	@ (800201c <Modbus_init+0xc4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f00b fbd8 	bl	800d7c4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8002014:	bf00      	nop
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200001b0 	.word	0x200001b0
 8002020:	08001f19 	.word	0x08001f19
 8002024:	08001f39 	.word	0x08001f39

08002028 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b08c      	sub	sp, #48	@ 0x30
 800202c:	af00      	add	r7, sp, #0
 800202e:	6278      	str	r0, [r7, #36]	@ 0x24
 8002030:	ed87 0a08 	vstr	s0, [r7, #32]
 8002034:	edc7 0a07 	vstr	s1, [r7, #28]
 8002038:	ed87 1a06 	vstr	s2, [r7, #24]
 800203c:	edc7 1a05 	vstr	s3, [r7, #20]
 8002040:	ed87 2a04 	vstr	s4, [r7, #16]
 8002044:	edc7 2a03 	vstr	s5, [r7, #12]
 8002048:	ed87 3a02 	vstr	s6, [r7, #8]
 800204c:	edc7 3a01 	vstr	s7, [r7, #4]
 8002050:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	6a3a      	ldr	r2, [r7, #32]
 8002058:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 800205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205e:	69fa      	ldr	r2, [r7, #28]
 8002060:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8002064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8002074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 800207c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8002084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 800208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208e:	2210      	movs	r2, #16
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f00f fd30 	bl	8011af8 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	3310      	adds	r3, #16
 800209c:	2240      	movs	r2, #64	@ 0x40
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f00f fd29 	bl	8011af8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80020a6:	2300      	movs	r3, #0
 80020a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020aa:	e00c      	b.n	80020c6 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 80020ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020ae:	4613      	mov	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	4413      	add	r3, r2
 80020b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020b6:	3304      	adds	r3, #4
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4413      	add	r3, r2
 80020bc:	4a79      	ldr	r2, [pc, #484]	@ (80022a4 <MotorKalman_Init+0x27c>)
 80020be:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80020c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c2:	3301      	adds	r3, #1
 80020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	ddef      	ble.n	80020ac <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 80020d2:	2240      	movs	r2, #64	@ 0x40
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f00f fd0e 	bl	8011af8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80020dc:	2300      	movs	r3, #0
 80020de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020e0:	e00d      	b.n	80020fe <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 80020e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ec:	33be      	adds	r3, #190	@ 0xbe
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80020f6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80020f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fa:	3301      	adds	r3, #1
 80020fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002100:	2b03      	cmp	r3, #3
 8002102:	ddee      	ble.n	80020e2 <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	33f0      	adds	r3, #240	@ 0xf0
 8002108:	2210      	movs	r2, #16
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f00f fcf3 	bl	8011af8 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002118:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002122:	2210      	movs	r2, #16
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f00f fce6 	bl	8011af8 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002132:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8002136:	ed97 0a01 	vldr	s0, [r7, #4]
 800213a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800213c:	f000 f922 	bl	8002384 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8002140:	ed97 0a00 	vldr	s0, [r7]
 8002144:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002146:	f000 f94d 	bl	80023e4 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002152:	2201      	movs	r2, #1
 8002154:	2104      	movs	r1, #4
 8002156:	f00e ff5e 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002162:	3310      	adds	r3, #16
 8002164:	2204      	movs	r2, #4
 8002166:	2104      	movs	r1, #4
 8002168:	f00e ff55 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002178:	2204      	movs	r2, #4
 800217a:	2104      	movs	r1, #4
 800217c:	f00e ff4b 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800218c:	2201      	movs	r2, #1
 800218e:	2101      	movs	r1, #1
 8002190:	f00e ff41 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 8002194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002196:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 80021a0:	2201      	movs	r2, #1
 80021a2:	2101      	movs	r1, #1
 80021a4:	f00e ff37 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80021b4:	2201      	movs	r2, #1
 80021b6:	2101      	movs	r1, #1
 80021b8:	f00e ff2d 	bl	8011016 <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 80021bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021be:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80021c8:	2204      	movs	r2, #4
 80021ca:	2104      	movs	r1, #4
 80021cc:	f00e ff23 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 80021d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d2:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 80021dc:	2201      	movs	r2, #1
 80021de:	2104      	movs	r1, #4
 80021e0:	f00e ff19 	bl	8011016 <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 80021e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e6:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80021f0:	2201      	movs	r2, #1
 80021f2:	2104      	movs	r1, #4
 80021f4:	f00e ff0f 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 80021f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fa:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8002204:	2204      	movs	r2, #4
 8002206:	2104      	movs	r1, #4
 8002208:	f00e ff05 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8002218:	2204      	movs	r2, #4
 800221a:	2101      	movs	r1, #1
 800221c:	f00e fefb 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8002226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002228:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800222c:	2201      	movs	r2, #1
 800222e:	2101      	movs	r1, #1
 8002230:	f00e fef1 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 8002234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002236:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8002240:	2201      	movs	r2, #1
 8002242:	2104      	movs	r1, #4
 8002244:	f00e fee7 	bl	8011016 <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002248:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800224a:	f000 f82d 	bl	80022a8 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 800224e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002250:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	3390      	adds	r3, #144	@ 0x90
 8002258:	2204      	movs	r2, #4
 800225a:	2104      	movs	r1, #4
 800225c:	f00e fedb 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	33e0      	adds	r3, #224	@ 0xe0
 800226a:	2201      	movs	r2, #1
 800226c:	2104      	movs	r1, #4
 800226e:	f00e fed2 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800227e:	2204      	movs	r2, #4
 8002280:	2104      	movs	r1, #4
 8002282:	f00e fec8 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 8002286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002288:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8002292:	2201      	movs	r2, #1
 8002294:	2104      	movs	r1, #4
 8002296:	f00e febe 	bl	8011016 <arm_mat_init_f32>
}
 800229a:	bf00      	nop
 800229c:	3730      	adds	r7, #48	@ 0x30
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	42c80000 	.word	0x42c80000

080022a8 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 80022e4:	4619      	mov	r1, r3
 80022e6:	4610      	mov	r0, r2
 80022e8:	eeb0 3a64 	vmov.f32	s6, s9
 80022ec:	eef0 2a45 	vmov.f32	s5, s10
 80022f0:	eeb0 2a65 	vmov.f32	s4, s11
 80022f4:	eef0 1a46 	vmov.f32	s3, s12
 80022f8:	eeb0 1a66 	vmov.f32	s2, s13
 80022fc:	eef0 0a47 	vmov.f32	s1, s14
 8002300:	eeb0 0a67 	vmov.f32	s0, s15
 8002304:	f001 f83c 	bl	8003380 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800230e:	2240      	movs	r2, #64	@ 0x40
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f00f fbf0 	bl	8011af8 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800231e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800237c <MotorKalman_DiscretizeModel+0xd4>
 8002322:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800232c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002352:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002380 <MotorKalman_DiscretizeModel+0xd8>
 8002356:	ee67 7a87 	vmul.f32	s15, s15, s14
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002366:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 800237c <MotorKalman_DiscretizeModel+0xd4>
 800236a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	3c23d70a 	.word	0x3c23d70a
 8002380:	3dcccccd 	.word	0x3dcccccd

08002384 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002396:	2240      	movs	r2, #64	@ 0x40
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f00f fbac 	bl	8011af8 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 80023a0:	edd7 7a00 	vldr	s15, [r7]
 80023a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80023bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c4:	d107      	bne.n	80023d6 <MotorKalman_SetProcessNoise+0x52>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80023cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	d002      	beq.n	80023dc <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7ff ff66 	bl	80022a8 <MotorKalman_DiscretizeModel>
    }
}
 80023dc:	bf00      	nop
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 80023f0:	ed97 0a00 	vldr	s0, [r7]
 80023f4:	f00f fc9c 	bl	8011d30 <sqrtf>
 80023f8:	eef0 7a40 	vmov.f32	s15, s0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 8002412:	b580      	push	{r7, lr}
 8002414:	b0b2      	sub	sp, #200	@ 0xc8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 8002426:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	609a      	str	r2, [r3, #8]
 8002432:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800243a:	e041      	b.n	80024c0 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 800243c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	33c8      	adds	r3, #200	@ 0xc8
 8002444:	443b      	add	r3, r7
 8002446:	3b3c      	subs	r3, #60	@ 0x3c
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800244e:	2300      	movs	r3, #0
 8002450:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002454:	e02b      	b.n	80024ae <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 8002456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	33c8      	adds	r3, #200	@ 0xc8
 800245e:	443b      	add	r3, r7
 8002460:	3b3c      	subs	r3, #60	@ 0x3c
 8002462:	ed93 7a00 	vldr	s14, [r3]
 8002466:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800246a:	009a      	lsls	r2, r3, #2
 800246c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002470:	4413      	add	r3, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	3324      	adds	r3, #36	@ 0x24
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	edd3 6a00 	vldr	s13, [r3]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002494:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	33c8      	adds	r3, #200	@ 0xc8
 800249c:	443b      	add	r3, r7
 800249e:	3b3c      	subs	r3, #60	@ 0x3c
 80024a0:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024a8:	3301      	adds	r3, #1
 80024aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	ddcf      	ble.n	8002456 <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024ba:	3301      	adds	r3, #1
 80024bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80024c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	ddb9      	ble.n	800243c <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80024ce:	e021      	b.n	8002514 <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 80024d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	33c8      	adds	r3, #200	@ 0xc8
 80024d8:	443b      	add	r3, r7
 80024da:	3b3c      	subs	r3, #60	@ 0x3c
 80024dc:	ed93 7a00 	vldr	s14, [r3]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024e6:	3338      	adds	r3, #56	@ 0x38
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	edd3 6a00 	vldr	s13, [r3]
 80024f0:	edd7 7a00 	vldr	s15, [r7]
 80024f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800250a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800250e:	3301      	adds	r3, #1
 8002510:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002514:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002518:	2b03      	cmp	r3, #3
 800251a:	ddd9      	ble.n	80024d0 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 800251c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002520:	2240      	movs	r2, #64	@ 0x40
 8002522:	2100      	movs	r1, #0
 8002524:	4618      	mov	r0, r3
 8002526:	f00f fae7 	bl	8011af8 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 800252a:	f107 030c 	add.w	r3, r7, #12
 800252e:	2240      	movs	r2, #64	@ 0x40
 8002530:	2100      	movs	r1, #0
 8002532:	4618      	mov	r0, r3
 8002534:	f00f fae0 	bl	8011af8 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002538:	2300      	movs	r3, #0
 800253a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800253e:	e05f      	b.n	8002600 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002546:	e052      	b.n	80025ee <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002548:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800254c:	009a      	lsls	r2, r3, #2
 800254e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	33c8      	adds	r3, #200	@ 0xc8
 8002558:	443b      	add	r3, r7
 800255a:	3b7c      	subs	r3, #124	@ 0x7c
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002562:	2300      	movs	r3, #0
 8002564:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002568:	e038      	b.n	80025dc <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800256a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800256e:	009a      	lsls	r2, r3, #2
 8002570:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	33c8      	adds	r3, #200	@ 0xc8
 800257a:	443b      	add	r3, r7
 800257c:	3b7c      	subs	r3, #124	@ 0x7c
 800257e:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 8002582:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002586:	009a      	lsls	r2, r3, #2
 8002588:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800258c:	4413      	add	r3, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	3324      	adds	r3, #36	@ 0x24
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	edd3 6a00 	vldr	s13, [r3]
 800259a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800259e:	009a      	lsls	r2, r3, #2
 80025a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025a4:	4413      	add	r3, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	3304      	adds	r3, #4
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80025b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025ba:	009a      	lsls	r2, r3, #2
 80025bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025c0:	4413      	add	r3, r2
 80025c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	33c8      	adds	r3, #200	@ 0xc8
 80025ca:	443b      	add	r3, r7
 80025cc:	3b7c      	subs	r3, #124	@ 0x7c
 80025ce:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80025d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025d6:	3301      	adds	r3, #1
 80025d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025e0:	2b03      	cmp	r3, #3
 80025e2:	ddc2      	ble.n	800256a <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025e8:	3301      	adds	r3, #1
 80025ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	dda8      	ble.n	8002548 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025fa:	3301      	adds	r3, #1
 80025fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002600:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002604:	2b03      	cmp	r3, #3
 8002606:	dd9b      	ble.n	8002540 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800260e:	e05f      	b.n	80026d0 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002610:	2300      	movs	r3, #0
 8002612:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002616:	e052      	b.n	80026be <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002618:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800261c:	009a      	lsls	r2, r3, #2
 800261e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002622:	4413      	add	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	33c8      	adds	r3, #200	@ 0xc8
 8002628:	443b      	add	r3, r7
 800262a:	3bbc      	subs	r3, #188	@ 0xbc
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002638:	e038      	b.n	80026ac <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 800263a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800263e:	009a      	lsls	r2, r3, #2
 8002640:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002644:	4413      	add	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	33c8      	adds	r3, #200	@ 0xc8
 800264a:	443b      	add	r3, r7
 800264c:	3bbc      	subs	r3, #188	@ 0xbc
 800264e:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 8002652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002656:	009a      	lsls	r2, r3, #2
 8002658:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800265c:	4413      	add	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	33c8      	adds	r3, #200	@ 0xc8
 8002662:	443b      	add	r3, r7
 8002664:	3b7c      	subs	r3, #124	@ 0x7c
 8002666:	edd3 6a00 	vldr	s13, [r3]
 800266a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800266e:	009a      	lsls	r2, r3, #2
 8002670:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002674:	4413      	add	r3, r2
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	3324      	adds	r3, #36	@ 0x24
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002686:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800268a:	009a      	lsls	r2, r3, #2
 800268c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002690:	4413      	add	r3, r2
 8002692:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	33c8      	adds	r3, #200	@ 0xc8
 800269a:	443b      	add	r3, r7
 800269c:	3bbc      	subs	r3, #188	@ 0xbc
 800269e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80026a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026a6:	3301      	adds	r3, #1
 80026a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80026ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	ddc2      	ble.n	800263a <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80026b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026b8:	3301      	adds	r3, #1
 80026ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80026be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	dda8      	ble.n	8002618 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80026c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026ca:	3301      	adds	r3, #1
 80026cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80026d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	dd9b      	ble.n	8002610 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80026d8:	2300      	movs	r3, #0
 80026da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80026de:	e037      	b.n	8002750 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80026e0:	2300      	movs	r3, #0
 80026e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80026e6:	e02a      	b.n	800273e <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80026e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026ec:	009a      	lsls	r2, r3, #2
 80026ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	33c8      	adds	r3, #200	@ 0xc8
 80026f8:	443b      	add	r3, r7
 80026fa:	3bbc      	subs	r3, #188	@ 0xbc
 80026fc:	ed93 7a00 	vldr	s14, [r3]
 8002700:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002704:	009a      	lsls	r2, r3, #2
 8002706:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800270a:	4413      	add	r3, r2
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	3354      	adds	r3, #84	@ 0x54
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002718:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800271c:	009a      	lsls	r2, r3, #2
 800271e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002722:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002724:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	3304      	adds	r3, #4
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002734:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002738:	3301      	adds	r3, #1
 800273a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800273e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002742:	2b03      	cmp	r3, #3
 8002744:	ddd0      	ble.n	80026e8 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002746:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800274a:	3301      	adds	r3, #1
 800274c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002750:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002754:	2b03      	cmp	r3, #3
 8002756:	ddc3      	ble.n	80026e0 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	2104      	movs	r1, #4
 800278c:	f00e fc43 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3310      	adds	r3, #16
 800279a:	2204      	movs	r2, #4
 800279c:	2104      	movs	r1, #4
 800279e:	f00e fc3a 	bl	8011016 <arm_mat_init_f32>
}
 80027a2:	bf00      	nop
 80027a4:	37c8      	adds	r7, #200	@ 0xc8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b0d0      	sub	sp, #320	@ 0x140
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027b6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027ba:	6018      	str	r0, [r3, #0]
 80027bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027c0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80027c4:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 80027c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80027d6:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80027e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027e4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 80027ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027f2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002800:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002804:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 800280e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002812:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	edd3 7a01 	vldr	s15, [r3, #4]
 800281c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002820:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002824:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002828:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 8002832:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002836:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002840:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002844:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002848:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800284c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002856:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800285a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	edd3 7a03 	vldr	s15, [r3, #12]
 8002864:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800286c:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8002870:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002874:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002878:	ed93 7a00 	vldr	s14, [r3]
 800287c:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002884:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002888:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002896:	2300      	movs	r3, #0
 8002898:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800289c:	e04d      	b.n	800293a <MotorKalman_Update+0x18e>
        CP[i] = 0;
 800289e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028a8:	443b      	add	r3, r7
 80028aa:	3b58      	subs	r3, #88	@ 0x58
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80028b2:	2300      	movs	r3, #0
 80028b4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80028b8:	e036      	b.n	8002928 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 80028ba:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028c4:	443b      	add	r3, r7
 80028c6:	3b58      	subs	r3, #88	@ 0x58
 80028c8:	ed93 7a00 	vldr	s14, [r3]
 80028cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80028d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80028da:	333c      	adds	r3, #60	@ 0x3c
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	edd3 6a00 	vldr	s13, [r3]
 80028e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80028e8:	009a      	lsls	r2, r3, #2
 80028ea:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80028ee:	4413      	add	r3, r2
 80028f0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80028f4:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80028f8:	6812      	ldr	r2, [r2, #0]
 80028fa:	3304      	adds	r3, #4
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	edd3 7a00 	vldr	s15, [r3]
 8002904:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002916:	443b      	add	r3, r7
 8002918:	3b58      	subs	r3, #88	@ 0x58
 800291a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800291e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002922:	3301      	adds	r3, #1
 8002924:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002928:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800292c:	2b03      	cmp	r3, #3
 800292e:	ddc4      	ble.n	80028ba <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002930:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002934:	3301      	adds	r3, #1
 8002936:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800293a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800293e:	2b03      	cmp	r3, #3
 8002940:	ddad      	ble.n	800289e <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 8002942:	f04f 0300 	mov.w	r3, #0
 8002946:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800294a:	2300      	movs	r3, #0
 800294c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002950:	e021      	b.n	8002996 <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 8002952:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800295c:	443b      	add	r3, r7
 800295e:	3b58      	subs	r3, #88	@ 0x58
 8002960:	ed93 7a00 	vldr	s14, [r3]
 8002964:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002968:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002972:	333c      	adds	r3, #60	@ 0x3c
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002980:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002988:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800298c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002990:	3301      	adds	r3, #1
 8002992:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002996:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800299a:	2b03      	cmp	r3, #3
 800299c:	ddd9      	ble.n	8002952 <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 800299e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80029a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 80029ac:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 80029b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b4:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 80029b8:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80029cc:	e04d      	b.n	8002a6a <MotorKalman_Update+0x2be>
        PC[i] = 0;
 80029ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029d8:	443b      	add	r3, r7
 80029da:	3b68      	subs	r3, #104	@ 0x68
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80029e8:	e036      	b.n	8002a58 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 80029ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029f4:	443b      	add	r3, r7
 80029f6:	3b68      	subs	r3, #104	@ 0x68
 80029f8:	ed93 7a00 	vldr	s14, [r3]
 80029fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a00:	009a      	lsls	r2, r3, #2
 8002a02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a06:	4413      	add	r3, r2
 8002a08:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002a0c:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	3304      	adds	r3, #4
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	edd3 6a00 	vldr	s13, [r3]
 8002a1c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a20:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a2a:	333c      	adds	r3, #60	@ 0x3c
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	edd3 7a00 	vldr	s15, [r3]
 8002a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a46:	443b      	add	r3, r7
 8002a48:	3b68      	subs	r3, #104	@ 0x68
 8002a4a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a52:	3301      	adds	r3, #1
 8002a54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002a58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	ddc4      	ble.n	80029ea <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a64:	3301      	adds	r3, #1
 8002a66:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002a6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	ddad      	ble.n	80029ce <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 8002a72:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002a86:	e01a      	b.n	8002abe <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002a88:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a92:	443b      	add	r3, r7
 8002a94:	3b68      	subs	r3, #104	@ 0x68
 8002a96:	edd3 6a00 	vldr	s13, [r3]
 8002a9a:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aa2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002aac:	443b      	add	r3, r7
 8002aae:	3b78      	subs	r3, #120	@ 0x78
 8002ab0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ab4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002abe:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	dde0      	ble.n	8002a88 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002acc:	e029      	b.n	8002b22 <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 8002ace:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ad2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	ed93 7a00 	vldr	s14, [r3]
 8002ae4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002aee:	443b      	add	r3, r7
 8002af0:	3b78      	subs	r3, #120	@ 0x78
 8002af2:	edd3 6a00 	vldr	s13, [r3]
 8002af6:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b06:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b18:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002b22:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	ddd1      	ble.n	8002ace <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002b2a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002b2e:	2240      	movs	r2, #64	@ 0x40
 8002b30:	2100      	movs	r1, #0
 8002b32:	4618      	mov	r0, r3
 8002b34:	f00e ffe0 	bl	8011af8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002b3e:	e035      	b.n	8002bac <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b40:	2300      	movs	r3, #0
 8002b42:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002b46:	e028      	b.n	8002b9a <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8002b48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b52:	443b      	add	r3, r7
 8002b54:	3b78      	subs	r3, #120	@ 0x78
 8002b56:	ed93 7a00 	vldr	s14, [r3]
 8002b5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b5e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b68:	333c      	adds	r3, #60	@ 0x3c
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b76:	009a      	lsls	r2, r3, #2
 8002b78:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b7c:	4413      	add	r3, r2
 8002b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b88:	443b      	add	r3, r7
 8002b8a:	3bb8      	subs	r3, #184	@ 0xb8
 8002b8c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b90:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b94:	3301      	adds	r3, #1
 8002b96:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002b9a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	ddd2      	ble.n	8002b48 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ba2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	ddc5      	ble.n	8002b40 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002bb4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002bb8:	2240      	movs	r2, #64	@ 0x40
 8002bba:	2100      	movs	r1, #0
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f00e ff9b 	bl	8011af8 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002bc8:	e038      	b.n	8002c3c <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002bd0:	e02b      	b.n	8002c2a <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8002bd2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002bd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d102      	bne.n	8002be4 <MotorKalman_Update+0x438>
 8002bde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002be2:	e001      	b.n	8002be8 <MotorKalman_Update+0x43c>
 8002be4:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002e00 <MotorKalman_Update+0x654>
 8002be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bec:	009a      	lsls	r2, r3, #2
 8002bee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bf2:	4413      	add	r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002bfa:	443b      	add	r3, r7
 8002bfc:	3bb8      	subs	r3, #184	@ 0xb8
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c06:	009a      	lsls	r2, r3, #2
 8002c08:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c0c:	4413      	add	r3, r2
 8002c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002c18:	443b      	add	r3, r7
 8002c1a:	3bf8      	subs	r3, #248	@ 0xf8
 8002c1c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c20:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c24:	3301      	adds	r3, #1
 8002c26:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002c2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	ddcf      	ble.n	8002bd2 <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c36:	3301      	adds	r3, #1
 8002c38:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c40:	2b03      	cmp	r3, #3
 8002c42:	ddc2      	ble.n	8002bca <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8002c44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002c48:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f103 0110 	add.w	r1, r3, #16
 8002c52:	f107 0308 	add.w	r3, r7, #8
 8002c56:	2240      	movs	r2, #64	@ 0x40
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f00e ff91 	bl	8011b80 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002c64:	e06e      	b.n	8002d44 <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c66:	2300      	movs	r3, #0
 8002c68:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002c6c:	e061      	b.n	8002d32 <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002c6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c72:	009a      	lsls	r2, r3, #2
 8002c74:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c78:	4413      	add	r3, r2
 8002c7a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c7e:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	3304      	adds	r3, #4
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c96:	e043      	b.n	8002d20 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c9c:	009a      	lsls	r2, r3, #2
 8002c9e:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002ca8:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	3304      	adds	r3, #4
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cbc:	009a      	lsls	r2, r3, #2
 8002cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002cca:	443b      	add	r3, r7
 8002ccc:	3bf8      	subs	r3, #248	@ 0xf8
 8002cce:	edd3 6a00 	vldr	s13, [r3]
 8002cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cd6:	009a      	lsls	r2, r3, #2
 8002cd8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002cdc:	4413      	add	r3, r2
 8002cde:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002ce2:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	edd3 7a00 	vldr	s15, [r3]
 8002cee:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cf6:	009a      	lsls	r2, r3, #2
 8002cf8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002cfc:	4413      	add	r3, r2
 8002cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d02:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002d06:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	ddb7      	ble.n	8002c98 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002d28:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002d32:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	dd99      	ble.n	8002c6e <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002d3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002d44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	dd8c      	ble.n	8002c66 <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002d4c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d50:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d5c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002d66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d6a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d76:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002d80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d84:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d90:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002d9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d9e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002daa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002db4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002db8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002dc2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002dc6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	2104      	movs	r1, #4
 8002dd0:	f00e f921 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002dd4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002dd8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002de2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002de6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3310      	adds	r3, #16
 8002dee:	2204      	movs	r2, #4
 8002df0:	2104      	movs	r1, #4
 8002df2:	f00e f910 	bl	8011016 <arm_mat_init_f32>
}
 8002df6:	bf00      	nop
 8002df8:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	00000000 	.word	0x00000000

08002e04 <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e10:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8002e14:	ed97 0a02 	vldr	s0, [r7, #8]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f7ff fafa 	bl	8002412 <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8002e1e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7ff fcc2 	bl	80027ac <MotorKalman_Update>

    return filter->velocity;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8002e2e:	ee07 3a90 	vmov	s15, r3
}
 8002e32:	eeb0 0a67 	vmov.f32	s0, s15
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	e00c      	b.n	8002e68 <matrix_copy+0x2c>
        dst[i] = src[i];
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	68fa      	ldr	r2, [r7, #12]
 8002e54:	441a      	add	r2, r3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	68b9      	ldr	r1, [r7, #8]
 8002e5c:	440b      	add	r3, r1
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	3301      	adds	r3, #1
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	dbee      	blt.n	8002e4e <matrix_copy+0x12>
    }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
	...

08002e80 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8002e80:	b590      	push	{r4, r7, lr}
 8002e82:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8002e8c:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8002e90:	6020      	str	r0, [r4, #0]
 8002e92:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002e96:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8002e9a:	6001      	str	r1, [r0, #0]
 8002e9c:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002ea0:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002ea4:	ed81 0a00 	vstr	s0, [r1]
 8002ea8:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002eac:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002eb0:	600a      	str	r2, [r1, #0]
 8002eb2:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002eb6:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8002eba:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002ebc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002ec0:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002ec4:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2204      	movs	r2, #4
 8002ecc:	2104      	movs	r1, #4
 8002ece:	f00e f8a2 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002ed2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002ed6:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002eda:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	2104      	movs	r1, #4
 8002ee4:	f00e f897 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002ee8:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002eec:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002ef0:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	2104      	movs	r1, #4
 8002efa:	f00e f88c 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002efe:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f02:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002f06:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	2104      	movs	r1, #4
 8002f10:	f00e f881 	bl	8011016 <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002f14:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002f18:	2240      	movs	r2, #64	@ 0x40
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f00e fdeb 	bl	8011af8 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002f22:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002f26:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8002f2a:	2204      	movs	r2, #4
 8002f2c:	2104      	movs	r1, #4
 8002f2e:	f00e f872 	bl	8011016 <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002f32:	2300      	movs	r3, #0
 8002f34:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002f38:	e011      	b.n	8002f5e <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8002f3a:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8002f3e:	4613      	mov	r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8002f4a:	443b      	add	r3, r7
 8002f4c:	3b6c      	subs	r3, #108	@ 0x6c
 8002f4e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002f52:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8002f54:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002f58:	3301      	adds	r3, #1
 8002f5a:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002f5e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	dde9      	ble.n	8002f3a <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8002f66:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002f6a:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8002f6e:	2204      	movs	r2, #4
 8002f70:	2104      	movs	r1, #4
 8002f72:	f00e f850 	bl	8011016 <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002f76:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002f7a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f7e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f82:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002f86:	ed93 0a00 	vldr	s0, [r3]
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	f00e fc4c 	bl	8011828 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002f90:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f94:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002f98:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002f9c:	2210      	movs	r2, #16
 8002f9e:	6819      	ldr	r1, [r3, #0]
 8002fa0:	f7ff ff4c 	bl	8002e3c <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002fa4:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002fa8:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002fac:	2204      	movs	r2, #4
 8002fae:	2104      	movs	r1, #4
 8002fb0:	f00e f831 	bl	8011016 <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002fb4:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002fb8:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	2104      	movs	r1, #4
 8002fc0:	f00e f829 	bl	8011016 <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002fc4:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002fc8:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002fcc:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f00d ffe5 	bl	8010fa0 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002fd6:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002fda:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002fde:	2210      	movs	r2, #16
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff ff2b 	bl	8002e3c <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002fe6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002fea:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002fee:	2302      	movs	r3, #2
 8002ff0:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002ff4:	e03a      	b.n	800306c <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002ff6:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003002:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8003006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300a:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 800300e:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8003012:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8003016:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800301a:	4618      	mov	r0, r3
 800301c:	f00e fb8a 	bl	8011734 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8003020:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8003024:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8003028:	2210      	movs	r2, #16
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ff06 	bl	8002e3c <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8003030:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003034:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8003038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800303c:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8003040:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8003044:	4611      	mov	r1, r2
 8003046:	eeb0 0a47 	vmov.f32	s0, s14
 800304a:	4618      	mov	r0, r3
 800304c:	f00e fbec 	bl	8011828 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8003050:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8003054:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8003058:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 800305c:	4618      	mov	r0, r3
 800305e:	f00d ff9f 	bl	8010fa0 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8003062:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8003066:	3301      	adds	r3, #1
 8003068:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 800306c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8003070:	2b0a      	cmp	r3, #10
 8003072:	ddc0      	ble.n	8002ff6 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8003074:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8003078:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800307c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003080:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8003084:	ed93 0a00 	vldr	s0, [r3]
 8003088:	4610      	mov	r0, r2
 800308a:	f00e fbcd 	bl	8011828 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 800308e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003092:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8003096:	461a      	mov	r2, r3
 8003098:	2300      	movs	r3, #0
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	6053      	str	r3, [r2, #4]
 800309e:	6093      	str	r3, [r2, #8]
 80030a0:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 80030a2:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80030a6:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 80030aa:	2201      	movs	r2, #1
 80030ac:	2104      	movs	r1, #4
 80030ae:	f00d ffb2 	bl	8011016 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 80030b2:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 80030b6:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80030ba:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80030be:	4618      	mov	r0, r3
 80030c0:	f00e fb38 	bl	8011734 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 80030c4:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80030c8:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 80030cc:	2201      	movs	r2, #1
 80030ce:	2104      	movs	r1, #4
 80030d0:	f00d ffa1 	bl	8011016 <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 80030d4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030d8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80030dc:	edd3 7a00 	vldr	s15, [r3]
 80030e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80030e4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80030e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80030ec:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80030f0:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80030f4:	4611      	mov	r1, r2
 80030f6:	eeb0 0a47 	vmov.f32	s0, s14
 80030fa:	4618      	mov	r0, r3
 80030fc:	f00e fb94 	bl	8011828 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003100:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003104:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003108:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800310c:	4618      	mov	r0, r3
 800310e:	f00d ff47 	bl	8010fa0 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8003112:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003116:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800311a:	4618      	mov	r0, r3
 800311c:	2340      	movs	r3, #64	@ 0x40
 800311e:	461a      	mov	r2, r3
 8003120:	2100      	movs	r1, #0
 8003122:	f00e fce9 	bl	8011af8 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8003126:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800312a:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 800312e:	2204      	movs	r2, #4
 8003130:	2104      	movs	r1, #4
 8003132:	f00d ff70 	bl	8011016 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8003136:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 800313a:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800313e:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8003142:	4618      	mov	r0, r3
 8003144:	f00e faf6 	bl	8011734 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003148:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800314c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003150:	461a      	mov	r2, r3
 8003152:	2300      	movs	r3, #0
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	6053      	str	r3, [r2, #4]
 8003158:	6093      	str	r3, [r2, #8]
 800315a:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 800315c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003160:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8003164:	2201      	movs	r2, #1
 8003166:	2104      	movs	r1, #4
 8003168:	f00d ff55 	bl	8011016 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 800316c:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8003170:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003174:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003178:	4618      	mov	r0, r3
 800317a:	f00e fadb 	bl	8011734 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 800317e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003182:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003186:	edd3 7a00 	vldr	s15, [r3]
 800318a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800318e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003192:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003196:	edd3 7a00 	vldr	s15, [r3]
 800319a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319e:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80031a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031a6:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80031aa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80031ae:	4611      	mov	r1, r2
 80031b0:	eeb0 0a47 	vmov.f32	s0, s14
 80031b4:	4618      	mov	r0, r3
 80031b6:	f00e fb37 	bl	8011828 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80031ba:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80031be:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80031c2:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80031c6:	4618      	mov	r0, r3
 80031c8:	f00d feea 	bl	8010fa0 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 80031cc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031d0:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80031d4:	4618      	mov	r0, r3
 80031d6:	2340      	movs	r3, #64	@ 0x40
 80031d8:	461a      	mov	r2, r3
 80031da:	2100      	movs	r1, #0
 80031dc:	f00e fc8c 	bl	8011af8 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 80031e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80031e4:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80031e8:	2204      	movs	r2, #4
 80031ea:	2104      	movs	r1, #4
 80031ec:	f00d ff13 	bl	8011016 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 80031f0:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80031f4:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80031f8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80031fc:	4618      	mov	r0, r3
 80031fe:	f00e fa99 	bl	8011734 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 8003202:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003206:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800320a:	461a      	mov	r2, r3
 800320c:	2300      	movs	r3, #0
 800320e:	6013      	str	r3, [r2, #0]
 8003210:	6053      	str	r3, [r2, #4]
 8003212:	6093      	str	r3, [r2, #8]
 8003214:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 8003216:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800321a:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 800321e:	2201      	movs	r2, #1
 8003220:	2104      	movs	r1, #4
 8003222:	f00d fef8 	bl	8011016 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 8003226:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800322a:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800322e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003232:	4618      	mov	r0, r3
 8003234:	f00e fa7e 	bl	8011734 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8003238:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800323c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003240:	edd3 7a00 	vldr	s15, [r3]
 8003244:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003248:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800324c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003250:	edd3 7a00 	vldr	s15, [r3]
 8003254:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003258:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800325c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003268:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 800326c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003270:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003274:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003278:	4611      	mov	r1, r2
 800327a:	eeb0 0a47 	vmov.f32	s0, s14
 800327e:	4618      	mov	r0, r3
 8003280:	f00e fad2 	bl	8011828 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003284:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003288:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800328c:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003290:	4618      	mov	r0, r3
 8003292:	f00d fe85 	bl	8010fa0 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 8003296:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800329a:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800329e:	4618      	mov	r0, r3
 80032a0:	2340      	movs	r3, #64	@ 0x40
 80032a2:	461a      	mov	r2, r3
 80032a4:	2100      	movs	r1, #0
 80032a6:	f00e fc27 	bl	8011af8 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 80032aa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80032ae:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80032b2:	2204      	movs	r2, #4
 80032b4:	2104      	movs	r1, #4
 80032b6:	f00d feae 	bl	8011016 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 80032ba:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80032be:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80032c2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80032c6:	4618      	mov	r0, r3
 80032c8:	f00e fa34 	bl	8011734 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 80032cc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80032d0:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80032d4:	461a      	mov	r2, r3
 80032d6:	2300      	movs	r3, #0
 80032d8:	6013      	str	r3, [r2, #0]
 80032da:	6053      	str	r3, [r2, #4]
 80032dc:	6093      	str	r3, [r2, #8]
 80032de:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 80032e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032e4:	f107 001c 	add.w	r0, r7, #28
 80032e8:	2201      	movs	r2, #1
 80032ea:	2104      	movs	r1, #4
 80032ec:	f00d fe93 	bl	8011016 <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 80032f0:	f107 021c 	add.w	r2, r7, #28
 80032f4:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80032f8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80032fc:	4618      	mov	r0, r3
 80032fe:	f00e fa19 	bl	8011734 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 8003302:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003306:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800330a:	edd3 7a00 	vldr	s15, [r3]
 800330e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003312:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003316:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800331a:	edd3 7a00 	vldr	s15, [r3]
 800331e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003322:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003326:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800332a:	edd3 7a00 	vldr	s15, [r3]
 800332e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003332:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003336:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800333a:	edd3 7a00 	vldr	s15, [r3]
 800333e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003342:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800337c <discretize_system_with_arm+0x4fc>
 8003346:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800334a:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800334e:	f107 031c 	add.w	r3, r7, #28
 8003352:	4611      	mov	r1, r2
 8003354:	eeb0 0a47 	vmov.f32	s0, s14
 8003358:	4618      	mov	r0, r3
 800335a:	f00e fa65 	bl	8011828 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800335e:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003362:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003366:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800336a:	4618      	mov	r0, r3
 800336c:	f00d fe18 	bl	8010fa0 <arm_mat_add_f32>
}
 8003370:	bf00      	nop
 8003372:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8003376:	46bd      	mov	sp, r7
 8003378:	bd90      	pop	{r4, r7, pc}
 800337a:	bf00      	nop
 800337c:	42f00000 	.word	0x42f00000

08003380 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8003380:	b580      	push	{r7, lr}
 8003382:	b09e      	sub	sp, #120	@ 0x78
 8003384:	af00      	add	r7, sp, #0
 8003386:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 800338a:	edc7 0a08 	vstr	s1, [r7, #32]
 800338e:	ed87 1a07 	vstr	s2, [r7, #28]
 8003392:	edc7 1a06 	vstr	s3, [r7, #24]
 8003396:	ed87 2a05 	vstr	s4, [r7, #20]
 800339a:	edc7 2a04 	vstr	s5, [r7, #16]
 800339e:	ed87 3a03 	vstr	s6, [r7, #12]
 80033a2:	60b8      	str	r0, [r7, #8]
 80033a4:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 80033a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80033aa:	2240      	movs	r2, #64	@ 0x40
 80033ac:	2100      	movs	r1, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f00e fba2 	bl	8011af8 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 80033b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 80033c2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80033c6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 80033c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80033cc:	eef1 6a67 	vneg.f32	s13, s15
 80033d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80033d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033d8:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 80033dc:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 80033e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80033e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033e8:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 80033ec:	edd7 6a04 	vldr	s13, [r7, #16]
 80033f0:	ed97 7a07 	vldr	s14, [r7, #28]
 80033f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033f8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 80033fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003400:	eef1 6a67 	vneg.f32	s13, s15
 8003404:	ed97 7a08 	vldr	s14, [r7, #32]
 8003408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800340c:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8003410:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003414:	eef1 6a67 	vneg.f32	s13, s15
 8003418:	ed97 7a08 	vldr	s14, [r7, #32]
 800341c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003420:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8003424:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003428:	ed97 7a08 	vldr	s14, [r7, #32]
 800342c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003430:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8003434:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003438:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	ed97 0a03 	vldr	s0, [r7, #12]
 8003444:	f7ff fd1c 	bl	8002e80 <discretize_system_with_arm>
}
 8003448:	bf00      	nop
 800344a:	3778      	adds	r7, #120	@ 0x78
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	4613      	mov	r3, r2
 800345c:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	4a0b      	ldr	r2, [pc, #44]	@ (8003490 <PWM_init+0x40>)
 8003462:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	88fa      	ldrh	r2, [r7, #6]
 800346e:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8003476:	68b8      	ldr	r0, [r7, #8]
 8003478:	f009 fede 	bl	800d238 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	4619      	mov	r1, r3
 8003480:	68b8      	ldr	r0, [r7, #8]
 8003482:	f00a f825 	bl	800d4d0 <HAL_TIM_PWM_Start>
}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	0a21fe80 	.word	0x0a21fe80

08003494 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8003494:	b5b0      	push	{r4, r5, r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	ed87 0a02 	vstr	s0, [r7, #8]
 80034a0:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80034a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80034a8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b0:	d137      	bne.n	8003522 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	889b      	ldrh	r3, [r3, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d105      	bne.n	80034c6 <PWM_write_duty+0x32>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2200      	movs	r2, #0
 80034c2:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80034c4:	e0e1      	b.n	800368a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	889b      	ldrh	r3, [r3, #4]
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d105      	bne.n	80034da <PWM_write_duty+0x46>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	2300      	movs	r3, #0
 80034d6:	6393      	str	r3, [r2, #56]	@ 0x38
 80034d8:	e0d7      	b.n	800368a <PWM_write_duty+0x1f6>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	889b      	ldrh	r3, [r3, #4]
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d105      	bne.n	80034ee <PWM_write_duty+0x5a>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	2300      	movs	r3, #0
 80034ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80034ec:	e0cd      	b.n	800368a <PWM_write_duty+0x1f6>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	889b      	ldrh	r3, [r3, #4]
 80034f2:	2b0c      	cmp	r3, #12
 80034f4:	d105      	bne.n	8003502 <PWM_write_duty+0x6e>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	2300      	movs	r3, #0
 80034fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003500:	e0c3      	b.n	800368a <PWM_write_duty+0x1f6>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	889b      	ldrh	r3, [r3, #4]
 8003506:	2b10      	cmp	r3, #16
 8003508:	d105      	bne.n	8003516 <PWM_write_duty+0x82>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	2300      	movs	r3, #0
 8003512:	6493      	str	r3, [r2, #72]	@ 0x48
 8003514:	e0b9      	b.n	800368a <PWM_write_duty+0x1f6>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	2300      	movs	r3, #0
 800351e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003520:	e0b3      	b.n	800368a <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003532:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800353a:	ee17 2a90 	vmov	r2, s15
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800354a:	33fe      	adds	r3, #254	@ 0xfe
 800354c:	4a51      	ldr	r2, [pc, #324]	@ (8003694 <PWM_write_duty+0x200>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	0bdb      	lsrs	r3, r3, #15
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	899b      	ldrh	r3, [r3, #12]
 800356e:	3301      	adds	r3, #1
 8003570:	ee07 3a90 	vmov	s15, r3
 8003574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003578:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800357c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003584:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003588:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800358c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003590:	ee17 3a90 	vmov	r3, s15
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	89db      	ldrh	r3, [r3, #14]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fc ff8c 	bl	80004bc <__aeabi_i2d>
 80035a4:	4604      	mov	r4, r0
 80035a6:	460d      	mov	r5, r1
 80035a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80035ac:	eef0 7ae7 	vabs.f32	s15, s15
 80035b0:	ee17 0a90 	vmov	r0, s15
 80035b4:	f7fc ff94 	bl	80004e0 <__aeabi_f2d>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4620      	mov	r0, r4
 80035be:	4629      	mov	r1, r5
 80035c0:	f7fc ffe6 	bl	8000590 <__aeabi_dmul>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	4b31      	ldr	r3, [pc, #196]	@ (8003698 <PWM_write_duty+0x204>)
 80035d2:	f7fd f907 	bl	80007e4 <__aeabi_ddiv>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4610      	mov	r0, r2
 80035dc:	4619      	mov	r1, r3
 80035de:	f7fd fa99 	bl	8000b14 <__aeabi_d2uiz>
 80035e2:	4603      	mov	r3, r0
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	899a      	ldrh	r2, [r3, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	89da      	ldrh	r2, [r3, #14]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	89da      	ldrh	r2, [r3, #14]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	889b      	ldrh	r3, [r3, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <PWM_write_duty+0x190>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68fa      	ldr	r2, [r7, #12]
 800361e:	6952      	ldr	r2, [r2, #20]
 8003620:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003622:	e032      	b.n	800368a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	889b      	ldrh	r3, [r3, #4]
 8003628:	2b04      	cmp	r3, #4
 800362a:	d106      	bne.n	800363a <PWM_write_duty+0x1a6>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003638:	e027      	b.n	800368a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	889b      	ldrh	r3, [r3, #4]
 800363e:	2b08      	cmp	r3, #8
 8003640:	d106      	bne.n	8003650 <PWM_write_duty+0x1bc>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800364e:	e01c      	b.n	800368a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	889b      	ldrh	r3, [r3, #4]
 8003654:	2b0c      	cmp	r3, #12
 8003656:	d106      	bne.n	8003666 <PWM_write_duty+0x1d2>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003664:	e011      	b.n	800368a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	889b      	ldrh	r3, [r3, #4]
 800366a:	2b10      	cmp	r3, #16
 800366c:	d106      	bne.n	800367c <PWM_write_duty+0x1e8>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800367a:	e006      	b.n	800368a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003688:	e7ff      	b.n	800368a <PWM_write_duty+0x1f6>
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bdb0      	pop	{r4, r5, r7, pc}
 8003692:	bf00      	nop
 8003694:	80008001 	.word	0x80008001
 8003698:	40590000 	.word	0x40590000
 800369c:	00000000 	.word	0x00000000

080036a0 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 80036a0:	b5b0      	push	{r4, r5, r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80036ac:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80036b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80036b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80036b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036bc:	d137      	bne.n	800372e <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	889b      	ldrh	r3, [r3, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d105      	bne.n	80036d2 <PWM_write_range+0x32>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2200      	movs	r2, #0
 80036ce:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80036d0:	e0e1      	b.n	8003896 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	889b      	ldrh	r3, [r3, #4]
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d105      	bne.n	80036e6 <PWM_write_range+0x46>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	2300      	movs	r3, #0
 80036e2:	6393      	str	r3, [r2, #56]	@ 0x38
 80036e4:	e0d7      	b.n	8003896 <PWM_write_range+0x1f6>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	889b      	ldrh	r3, [r3, #4]
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d105      	bne.n	80036fa <PWM_write_range+0x5a>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	2300      	movs	r3, #0
 80036f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80036f8:	e0cd      	b.n	8003896 <PWM_write_range+0x1f6>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	889b      	ldrh	r3, [r3, #4]
 80036fe:	2b0c      	cmp	r3, #12
 8003700:	d105      	bne.n	800370e <PWM_write_range+0x6e>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	2300      	movs	r3, #0
 800370a:	6413      	str	r3, [r2, #64]	@ 0x40
 800370c:	e0c3      	b.n	8003896 <PWM_write_range+0x1f6>
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	889b      	ldrh	r3, [r3, #4]
 8003712:	2b10      	cmp	r3, #16
 8003714:	d105      	bne.n	8003722 <PWM_write_range+0x82>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	2300      	movs	r3, #0
 800371e:	6493      	str	r3, [r2, #72]	@ 0x48
 8003720:	e0b9      	b.n	8003896 <PWM_write_range+0x1f6>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	2300      	movs	r3, #0
 800372a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800372c:	e0b3      	b.n	8003896 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800373a:	ed97 7a02 	vldr	s14, [r7, #8]
 800373e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003742:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003746:	ee17 2a90 	vmov	r2, s15
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003756:	33fe      	adds	r3, #254	@ 0xfe
 8003758:	4a53      	ldr	r2, [pc, #332]	@ (80038a8 <PWM_write_range+0x208>)
 800375a:	fba2 2303 	umull	r2, r3, r2, r3
 800375e:	0bdb      	lsrs	r3, r3, #15
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	899b      	ldrh	r3, [r3, #12]
 800377a:	3301      	adds	r3, #1
 800377c:	ee07 3a90 	vmov	s15, r3
 8003780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003784:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003788:	ed97 7a02 	vldr	s14, [r7, #8]
 800378c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003790:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003794:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800379c:	ee17 3a90 	vmov	r3, s15
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	89db      	ldrh	r3, [r3, #14]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fc fe86 	bl	80004bc <__aeabi_i2d>
 80037b0:	4604      	mov	r4, r0
 80037b2:	460d      	mov	r5, r1
 80037b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80037b8:	eef0 7ae7 	vabs.f32	s15, s15
 80037bc:	ee17 0a90 	vmov	r0, s15
 80037c0:	f7fc fe8e 	bl	80004e0 <__aeabi_f2d>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4620      	mov	r0, r4
 80037ca:	4629      	mov	r1, r5
 80037cc:	f7fc fee0 	bl	8000590 <__aeabi_dmul>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4610      	mov	r0, r2
 80037d6:	4619      	mov	r1, r3
 80037d8:	a331      	add	r3, pc, #196	@ (adr r3, 80038a0 <PWM_write_range+0x200>)
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	f7fd f801 	bl	80007e4 <__aeabi_ddiv>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	f7fd f993 	bl	8000b14 <__aeabi_d2uiz>
 80037ee:	4603      	mov	r3, r0
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	899a      	ldrh	r2, [r3, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	89da      	ldrh	r2, [r3, #14]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	89da      	ldrh	r2, [r3, #14]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	889b      	ldrh	r3, [r3, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <PWM_write_range+0x190>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	6952      	ldr	r2, [r2, #20]
 800382c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800382e:	e032      	b.n	8003896 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	889b      	ldrh	r3, [r3, #4]
 8003834:	2b04      	cmp	r3, #4
 8003836:	d106      	bne.n	8003846 <PWM_write_range+0x1a6>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	695b      	ldr	r3, [r3, #20]
 8003842:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003844:	e027      	b.n	8003896 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	889b      	ldrh	r3, [r3, #4]
 800384a:	2b08      	cmp	r3, #8
 800384c:	d106      	bne.n	800385c <PWM_write_range+0x1bc>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800385a:	e01c      	b.n	8003896 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	889b      	ldrh	r3, [r3, #4]
 8003860:	2b0c      	cmp	r3, #12
 8003862:	d106      	bne.n	8003872 <PWM_write_range+0x1d2>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003870:	e011      	b.n	8003896 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	889b      	ldrh	r3, [r3, #4]
 8003876:	2b10      	cmp	r3, #16
 8003878:	d106      	bne.n	8003888 <PWM_write_range+0x1e8>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003886:	e006      	b.n	8003896 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003894:	e7ff      	b.n	8003896 <PWM_write_range+0x1f6>
 8003896:	bf00      	nop
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bdb0      	pop	{r4, r5, r7, pc}
 800389e:	bf00      	nop
 80038a0:	00000000 	.word	0x00000000
 80038a4:	40efffe0 	.word	0x40efffe0
 80038a8:	80008001 	.word	0x80008001

080038ac <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6178      	str	r0, [r7, #20]
 80038b4:	6139      	str	r1, [r7, #16]
 80038b6:	60fa      	str	r2, [r7, #12]
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80038be:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2200      	movs	r2, #0
 80038e4:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2200      	movs	r2, #0
 80038ea:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f04f 0200 	mov.w	r2, #0
 800390a:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 800390c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	fb93 f2f2 	sdiv	r2, r3, r2
 8003916:	68f9      	ldr	r1, [r7, #12]
 8003918:	fb01 f202 	mul.w	r2, r1, r2
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2200      	movs	r2, #0
 8003930:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f04f 0200 	mov.w	r2, #0
 8003940:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	f04f 0200 	mov.w	r2, #0
 8003970:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 800397a:	213c      	movs	r1, #60	@ 0x3c
 800397c:	6938      	ldr	r0, [r7, #16]
 800397e:	f00a f863 	bl	800da48 <HAL_TIM_Encoder_Start>
}
 8003982:	bf00      	nop
 8003984:	3718      	adds	r7, #24
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	0000      	movs	r0, r0
 800398c:	0000      	movs	r0, r0
	...

08003990 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003990:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	0fda      	lsrs	r2, r3, #31
 80039b8:	4413      	add	r3, r2
 80039ba:	105b      	asrs	r3, r3, #1
 80039bc:	461a      	mov	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4293      	cmp	r3, r2
 80039c2:	dd05      	ble.n	80039d0 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	e00e      	b.n	80039ee <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69db      	ldr	r3, [r3, #28]
 80039d4:	0fda      	lsrs	r2, r3, #31
 80039d6:	4413      	add	r3, r2
 80039d8:	105b      	asrs	r3, r3, #1
 80039da:	425b      	negs	r3, r3
 80039dc:	461a      	mov	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4293      	cmp	r3, r2
 80039e2:	da04      	bge.n	80039ee <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	441a      	add	r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0c:	ee07 3a90 	vmov	s15, r3
 8003a10:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	ee07 3a90 	vmov	s15, r3
 8003a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a20:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fc fd4f 	bl	80004e0 <__aeabi_f2d>
 8003a42:	4604      	mov	r4, r0
 8003a44:	460d      	mov	r5, r1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	ee07 3a90 	vmov	s15, r3
 8003a4e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a66:	ee17 0a90 	vmov	r0, s15
 8003a6a:	f7fc fd39 	bl	80004e0 <__aeabi_f2d>
 8003a6e:	a33c      	add	r3, pc, #240	@ (adr r3, 8003b60 <QEI_get_diff_count+0x1d0>)
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f7fc fd8c 	bl	8000590 <__aeabi_dmul>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4690      	mov	r8, r2
 8003a7e:	4699      	mov	r9, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fc fd2b 	bl	80004e0 <__aeabi_f2d>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4640      	mov	r0, r8
 8003a90:	4649      	mov	r1, r9
 8003a92:	f7fc fd7d 	bl	8000590 <__aeabi_dmul>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	f7fc fbc1 	bl	8000224 <__adddf3>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f7fd f853 	bl	8000b54 <__aeabi_d2f>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7fc fd11 	bl	80004e0 <__aeabi_f2d>
 8003abe:	4604      	mov	r4, r0
 8003ac0:	460d      	mov	r5, r1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac6:	ee07 3a90 	vmov	s15, r3
 8003aca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ada:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003ade:	ee16 0a90 	vmov	r0, s13
 8003ae2:	f7fc fcfd 	bl	80004e0 <__aeabi_f2d>
 8003ae6:	a31e      	add	r3, pc, #120	@ (adr r3, 8003b60 <QEI_get_diff_count+0x1d0>)
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f7fc fd50 	bl	8000590 <__aeabi_dmul>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4690      	mov	r8, r2
 8003af6:	4699      	mov	r9, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fc fcef 	bl	80004e0 <__aeabi_f2d>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4640      	mov	r0, r8
 8003b08:	4649      	mov	r1, r9
 8003b0a:	f7fc fd41 	bl	8000590 <__aeabi_dmul>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4690      	mov	r8, r2
 8003b14:	4699      	mov	r9, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fc fce0 	bl	80004e0 <__aeabi_f2d>
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4640      	mov	r0, r8
 8003b26:	4649      	mov	r1, r9
 8003b28:	f7fc fd32 	bl	8000590 <__aeabi_dmul>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4620      	mov	r0, r4
 8003b32:	4629      	mov	r1, r5
 8003b34:	f7fc fb76 	bl	8000224 <__adddf3>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f7fd f808 	bl	8000b54 <__aeabi_d2f>
 8003b44:	4602      	mov	r2, r0
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	605a      	str	r2, [r3, #4]
}
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b5c:	f3af 8000 	nop.w
 8003b60:	54442d18 	.word	0x54442d18
 8003b64:	400921fb 	.word	0x400921fb

08003b68 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8003b68:	b5b0      	push	{r4, r5, r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
 8003b7c:	ee07 3a90 	vmov	s15, r3
 8003b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fc fca6 	bl	80004e0 <__aeabi_f2d>
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	4b83      	ldr	r3, [pc, #524]	@ (8003da8 <QEI_compute_data+0x240>)
 8003b9a:	f7fc fcf9 	bl	8000590 <__aeabi_dmul>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4614      	mov	r4, r2
 8003ba4:	461d      	mov	r5, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bb2:	ee17 0a90 	vmov	r0, s15
 8003bb6:	f7fc fc93 	bl	80004e0 <__aeabi_f2d>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	f7fc fe0f 	bl	80007e4 <__aeabi_ddiv>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4614      	mov	r4, r2
 8003bcc:	461d      	mov	r5, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fc fc84 	bl	80004e0 <__aeabi_f2d>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4620      	mov	r0, r4
 8003bde:	4629      	mov	r1, r5
 8003be0:	f7fc fcd6 	bl	8000590 <__aeabi_dmul>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	f7fc ffb2 	bl	8000b54 <__aeabi_d2f>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003bfc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c00:	ee17 0a90 	vmov	r0, s15
 8003c04:	f7fc fc6c 	bl	80004e0 <__aeabi_f2d>
 8003c08:	a365      	add	r3, pc, #404	@ (adr r3, 8003da0 <QEI_compute_data+0x238>)
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	f7fc fcbf 	bl	8000590 <__aeabi_dmul>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4614      	mov	r4, r2
 8003c18:	461d      	mov	r5, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c26:	ee17 0a90 	vmov	r0, s15
 8003c2a:	f7fc fc59 	bl	80004e0 <__aeabi_f2d>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4620      	mov	r0, r4
 8003c34:	4629      	mov	r1, r5
 8003c36:	f7fc fdd5 	bl	80007e4 <__aeabi_ddiv>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4614      	mov	r4, r2
 8003c40:	461d      	mov	r5, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fc fc4a 	bl	80004e0 <__aeabi_f2d>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4620      	mov	r0, r4
 8003c52:	4629      	mov	r1, r5
 8003c54:	f7fc fc9c 	bl	8000590 <__aeabi_dmul>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	4619      	mov	r1, r3
 8003c60:	f7fc ff78 	bl	8000b54 <__aeabi_d2f>
 8003c64:	4602      	mov	r2, r0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fc fc36 	bl	80004e0 <__aeabi_f2d>
 8003c74:	a34a      	add	r3, pc, #296	@ (adr r3, 8003da0 <QEI_compute_data+0x238>)
 8003c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7a:	f7fc fc89 	bl	8000590 <__aeabi_dmul>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4614      	mov	r4, r2
 8003c84:	461d      	mov	r5, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f7fc fc28 	bl	80004e0 <__aeabi_f2d>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4620      	mov	r0, r4
 8003c96:	4629      	mov	r1, r5
 8003c98:	f7fc fc7a 	bl	8000590 <__aeabi_dmul>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4614      	mov	r4, r2
 8003ca2:	461d      	mov	r5, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	ee07 3a90 	vmov	s15, r3
 8003cac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cb0:	ee17 0a90 	vmov	r0, s15
 8003cb4:	f7fc fc14 	bl	80004e0 <__aeabi_f2d>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	f7fc fd90 	bl	80007e4 <__aeabi_ddiv>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4614      	mov	r4, r2
 8003cca:	461d      	mov	r5, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fc fc05 	bl	80004e0 <__aeabi_f2d>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4620      	mov	r0, r4
 8003cdc:	4629      	mov	r1, r5
 8003cde:	f7fc fc57 	bl	8000590 <__aeabi_dmul>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4610      	mov	r0, r2
 8003ce8:	4619      	mov	r1, r3
 8003cea:	f7fc ff33 	bl	8000b54 <__aeabi_d2f>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	ed93 7a02 	vldr	s14, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d14:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8003d18:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d24:	d00a      	beq.n	8003d3c <QEI_compute_data+0x1d4>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2a:	ee07 3a90 	vmov	s15, r3
 8003d2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d32:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3a:	e001      	b.n	8003d40 <QEI_compute_data+0x1d8>
 8003d3c:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003dac <QEI_compute_data+0x244>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	ed93 7a04 	vldr	s14, [r3, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	edd3 7a05 	vldr	s15, [r3, #20]
 8003d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d56:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8003d5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d66:	d00a      	beq.n	8003d7e <QEI_compute_data+0x216>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d6c:	ee07 3a90 	vmov	s15, r3
 8003d70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d74:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7c:	e001      	b.n	8003d82 <QEI_compute_data+0x21a>
 8003d7e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8003dac <QEI_compute_data+0x244>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	615a      	str	r2, [r3, #20]
}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003da0:	54442d18 	.word	0x54442d18
 8003da4:	400921fb 	.word	0x400921fb
 8003da8:	404e0000 	.word	0x404e0000
 8003dac:	00000000 	.word	0x00000000

08003db0 <QEI_reset>:

void QEI_reset(QEI *qei) {
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
    // Reset counter history
    qei->c[NOW] = 0;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->pulses = 0;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f04f 0200 	mov.w	r2, #0
 8003de6:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	649a      	str	r2, [r3, #72]	@ 0x48

    // Reset velocity history
    qei->r[NOW] = 0;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	615a      	str	r2, [r3, #20]
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08e      	sub	sp, #56	@ 0x38
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6178      	str	r0, [r7, #20]
 8003e24:	ed87 0a04 	vstr	s0, [r7, #16]
 8003e28:	edc7 0a03 	vstr	s1, [r7, #12]
 8003e2c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003e30:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2200      	movs	r2, #0
 8003e38:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8003e5a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e66:	eef0 7ae7 	vabs.f32	s15, s15
 8003e6a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8003e6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e72:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e82:	d503      	bpl.n	8003e8c <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	22ff      	movs	r2, #255	@ 0xff
 8003e88:	741a      	strb	r2, [r3, #16]
 8003e8a:	e002      	b.n	8003e92 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8003e92:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003e96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9e:	d006      	beq.n	8003eae <Trapezoidal_Generator+0x92>
 8003ea0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ea4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eac:	d104      	bne.n	8003eb8 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	60da      	str	r2, [r3, #12]
        return;
 8003eb6:	e06f      	b.n	8003f98 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8003eb8:	edd7 6a02 	vldr	s13, [r7, #8]
 8003ebc:	ed97 7a01 	vldr	s14, [r7, #4]
 8003ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ec4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8003ec8:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ecc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003ed0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ed4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003edc:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8003ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eea:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003eec:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003ef0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ef8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003efc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003f00:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0c:	db27      	blt.n	8003f5e <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003f0e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003f12:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003f16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f22:	ed97 7a02 	vldr	s14, [r7, #8]
 8003f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f2a:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f32:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003f34:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003f38:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8003f46:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003f4a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003f4e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	edc3 7a02 	vstr	s15, [r3, #8]
 8003f5c:	e018      	b.n	8003f90 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003f5e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f6a:	eeb0 0a66 	vmov.f32	s0, s13
 8003f6e:	f00d fedf 	bl	8011d30 <sqrtf>
 8003f72:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	6a3a      	ldr	r2, [r7, #32]
 8003f7a:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	6a3a      	ldr	r2, [r7, #32]
 8003f80:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8003f82:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	60da      	str	r2, [r3, #12]
}
 8003f98:	3738      	adds	r7, #56	@ 0x38
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8003fa0:	b480      	push	{r7}
 8003fa2:	b08d      	sub	sp, #52	@ 0x34
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6178      	str	r0, [r7, #20]
 8003fa8:	6139      	str	r1, [r7, #16]
 8003faa:	ed87 0a03 	vstr	s0, [r7, #12]
 8003fae:	edc7 0a02 	vstr	s1, [r7, #8]
 8003fb2:	ed87 1a01 	vstr	s2, [r7, #4]
 8003fb6:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	edd3 7a03 	vldr	s15, [r3, #12]
 8003fc0:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8004244 <Trapezoidal_Evaluated+0x2a4>
 8003fc4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	ed93 7a03 	vldr	s14, [r3, #12]
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003fda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe2:	f200 811b 	bhi.w	800421c <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	7c1b      	ldrb	r3, [r3, #16]
 8003ff0:	b25b      	sxtb	r3, r3
 8003ff2:	ee07 3a90 	vmov	s15, r3
 8003ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ffa:	ed97 7a00 	vldr	s14, [r7]
 8003ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004002:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	ed93 7a00 	vldr	s14, [r3]
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004012:	eeb4 7a67 	vcmp.f32	s14, s15
 8004016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800401a:	d109      	bne.n	8004030 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	edd3 7a00 	vldr	s15, [r3]
 8004022:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800402a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800402e:	e00c      	b.n	800404a <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	7c1b      	ldrb	r3, [r3, #16]
 8004034:	b25b      	sxtb	r3, r3
 8004036:	ee07 3a90 	vmov	s15, r3
 800403a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800403e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004046:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	edd3 7a00 	vldr	s15, [r3]
 8004056:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800405a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800405e:	d824      	bhi.n	80040aa <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8004060:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004064:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004068:	ee27 7a87 	vmul.f32	s14, s15, s14
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004072:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	edd3 7a03 	vldr	s15, [r3, #12]
 800407c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004080:	edd7 7a03 	vldr	s15, [r7, #12]
 8004084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	ed93 7a03 	vldr	s14, [r3, #12]
 8004094:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040a6:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 80040a8:	e0c6      	b.n	8004238 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	ed93 7a03 	vldr	s14, [r3, #12]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80040b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040be:	d830      	bhi.n	8004122 <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 80040c0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80040c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80040c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	edd3 7a00 	vldr	s15, [r3]
 80040d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	edd3 7a00 	vldr	s15, [r3]
 80040dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80040e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040e8:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	edd3 7a00 	vldr	s15, [r3]
 80040f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040fc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004104:	edd7 7a06 	vldr	s15, [r7, #24]
 8004108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004116:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	609a      	str	r2, [r3, #8]
}
 8004120:	e08a      	b.n	8004238 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	ed93 7a03 	vldr	s14, [r3, #12]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	edd3 7a02 	vldr	s15, [r3, #8]
 800412e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004136:	d900      	bls.n	800413a <Trapezoidal_Evaluated+0x19a>
}
 8004138:	e07e      	b.n	8004238 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 800413a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800413e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004142:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	edd3 7a00 	vldr	s15, [r3]
 800414c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	edd3 7a00 	vldr	s15, [r3]
 8004156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415a:	ed97 7a03 	vldr	s14, [r7, #12]
 800415e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004162:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	edd3 7a00 	vldr	s15, [r3]
 8004176:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417e:	dd11      	ble.n	80041a4 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	ed93 7a01 	vldr	s14, [r3, #4]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	edd3 7a00 	vldr	s15, [r3]
 800418c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004190:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004198:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800419c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041a0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	edd3 7a01 	vldr	s15, [r3, #4]
 80041b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041b4:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 80041b8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80041bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80041c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041c4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80041c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80041d0:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80041d4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80041d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80041dc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80041e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80041e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 80041f2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80041f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80041fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fe:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 800420c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004210:	eef1 7a67 	vneg.f32	s15, s15
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800421a:	e00d      	b.n	8004238 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2201      	movs	r2, #1
 8004220:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	bf00      	nop
 800423a:	3734      	adds	r7, #52	@ 0x34
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	3a83126f 	.word	0x3a83126f

08004248 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004252:	4603      	mov	r3, r0
 8004254:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 8004256:	78fb      	ldrb	r3, [r7, #3]
 8004258:	2b1a      	cmp	r3, #26
 800425a:	d018      	beq.n	800428e <temperature_to_base+0x46>
 800425c:	2b1a      	cmp	r3, #26
 800425e:	dc1d      	bgt.n	800429c <temperature_to_base+0x54>
 8004260:	2b18      	cmp	r3, #24
 8004262:	d002      	beq.n	800426a <temperature_to_base+0x22>
 8004264:	2b19      	cmp	r3, #25
 8004266:	d003      	beq.n	8004270 <temperature_to_base+0x28>
 8004268:	e018      	b.n	800429c <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 800426a:	edd7 7a01 	vldr	s15, [r7, #4]
 800426e:	e017      	b.n	80042a0 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8004270:	edd7 7a01 	vldr	s15, [r7, #4]
 8004274:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80042b0 <temperature_to_base+0x68>
 8004278:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800427c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004280:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004284:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8004288:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800428c:	e008      	b.n	80042a0 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 800428e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004292:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80042b4 <temperature_to_base+0x6c>
 8004296:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800429a:	e001      	b.n	80042a0 <temperature_to_base+0x58>
        default:
            return value;
 800429c:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80042a0:	eeb0 0a67 	vmov.f32	s0, s15
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	42000000 	.word	0x42000000
 80042b4:	43889333 	.word	0x43889333

080042b8 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	ed87 0a01 	vstr	s0, [r7, #4]
 80042c2:	4603      	mov	r3, r0
 80042c4:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	2b1a      	cmp	r3, #26
 80042ca:	d018      	beq.n	80042fe <temperature_from_base+0x46>
 80042cc:	2b1a      	cmp	r3, #26
 80042ce:	dc1d      	bgt.n	800430c <temperature_from_base+0x54>
 80042d0:	2b18      	cmp	r3, #24
 80042d2:	d002      	beq.n	80042da <temperature_from_base+0x22>
 80042d4:	2b19      	cmp	r3, #25
 80042d6:	d003      	beq.n	80042e0 <temperature_from_base+0x28>
 80042d8:	e018      	b.n	800430c <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80042da:	edd7 7a01 	vldr	s15, [r7, #4]
 80042de:	e017      	b.n	8004310 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 80042e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80042e4:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80042e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042ec:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80042f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042f4:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004320 <temperature_from_base+0x68>
 80042f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042fc:	e008      	b.n	8004310 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 80042fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8004302:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004324 <temperature_from_base+0x6c>
 8004306:	ee77 7a87 	vadd.f32	s15, s15, s14
 800430a:	e001      	b.n	8004310 <temperature_from_base+0x58>
        default:
            return value;
 800430c:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004310:	eeb0 0a67 	vmov.f32	s0, s15
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	42000000 	.word	0x42000000
 8004324:	43889333 	.word	0x43889333

08004328 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	e00a      	b.n	8004358 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	3304      	adds	r3, #4
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3301      	adds	r3, #1
 8004356:	60fb      	str	r3, [r7, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2b1a      	cmp	r3, #26
 800435c:	ddf1      	ble.n	8004342 <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a11      	ldr	r2, [pc, #68]	@ (80043a8 <init_length_converter+0x80>)
 8004362:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a11      	ldr	r2, [pc, #68]	@ (80043ac <init_length_converter+0x84>)
 8004368:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004370:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a0e      	ldr	r2, [pc, #56]	@ (80043b0 <init_length_converter+0x88>)
 8004376:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a0e      	ldr	r2, [pc, #56]	@ (80043b4 <init_length_converter+0x8c>)
 800437c:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a0d      	ldr	r2, [pc, #52]	@ (80043b8 <init_length_converter+0x90>)
 8004382:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a0d      	ldr	r2, [pc, #52]	@ (80043bc <init_length_converter+0x94>)
 8004388:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a0c      	ldr	r2, [pc, #48]	@ (80043c0 <init_length_converter+0x98>)
 800438e:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	3a83126f 	.word	0x3a83126f
 80043ac:	3c23d70a 	.word	0x3c23d70a
 80043b0:	447a0000 	.word	0x447a0000
 80043b4:	3cd013a9 	.word	0x3cd013a9
 80043b8:	3e9c0ebf 	.word	0x3e9c0ebf
 80043bc:	3f6a161e 	.word	0x3f6a161e
 80043c0:	44c92b02 	.word	0x44c92b02

080043c4 <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	220a      	movs	r2, #10
 80043d6:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	e00a      	b.n	80043f4 <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	4413      	add	r3, r2
 80043e6:	3304      	adds	r3, #4
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3301      	adds	r3, #1
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b1a      	cmp	r3, #26
 80043f8:	ddf1      	ble.n	80043de <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a0e      	ldr	r2, [pc, #56]	@ (8004438 <init_mass_converter+0x74>)
 80043fe:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a0e      	ldr	r2, [pc, #56]	@ (800443c <init_mass_converter+0x78>)
 8004404:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800440c:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a0b      	ldr	r2, [pc, #44]	@ (8004440 <init_mass_converter+0x7c>)
 8004412:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a0b      	ldr	r2, [pc, #44]	@ (8004444 <init_mass_converter+0x80>)
 8004418:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a0a      	ldr	r2, [pc, #40]	@ (8004448 <init_mass_converter+0x84>)
 800441e:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800442c:	bf00      	nop
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	358637bd 	.word	0x358637bd
 800443c:	3a83126f 	.word	0x3a83126f
 8004440:	447a0000 	.word	0x447a0000
 8004444:	3ce83d36 	.word	0x3ce83d36
 8004448:	3ee83d36 	.word	0x3ee83d36

0800444c <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	220f      	movs	r2, #15
 800445e:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e00a      	b.n	800447c <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	3304      	adds	r3, #4
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3301      	adds	r3, #1
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b1a      	cmp	r3, #26
 8004480:	ddf1      	ble.n	8004466 <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a0a      	ldr	r2, [pc, #40]	@ (80044b0 <init_angle_converter+0x64>)
 8004486:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800448e:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a08      	ldr	r2, [pc, #32]	@ (80044b4 <init_angle_converter+0x68>)
 8004494:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80044a2:	bf00      	nop
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	3c8efa35 	.word	0x3c8efa35
 80044b4:	3c80adfd 	.word	0x3c80adfd

080044b8 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2203      	movs	r2, #3
 80044c4:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2214      	movs	r2, #20
 80044ca:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	e00a      	b.n	80044e8 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4413      	add	r3, r2
 80044da:	3304      	adds	r3, #4
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3301      	adds	r3, #1
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b1a      	cmp	r3, #26
 80044ec:	ddf1      	ble.n	80044d2 <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a10      	ldr	r2, [pc, #64]	@ (8004534 <init_time_converter+0x7c>)
 80044f2:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a10      	ldr	r2, [pc, #64]	@ (8004538 <init_time_converter+0x80>)
 80044f8:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a0f      	ldr	r2, [pc, #60]	@ (800453c <init_time_converter+0x84>)
 80044fe:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004506:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a0d      	ldr	r2, [pc, #52]	@ (8004540 <init_time_converter+0x88>)
 800450c:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a0c      	ldr	r2, [pc, #48]	@ (8004544 <init_time_converter+0x8c>)
 8004512:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a0c      	ldr	r2, [pc, #48]	@ (8004548 <init_time_converter+0x90>)
 8004518:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004526:	bf00      	nop
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	3089705f 	.word	0x3089705f
 8004538:	358637bd 	.word	0x358637bd
 800453c:	3a83126f 	.word	0x3a83126f
 8004540:	42700000 	.word	0x42700000
 8004544:	45610000 	.word	0x45610000
 8004548:	47a8c000 	.word	0x47a8c000

0800454c <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2204      	movs	r2, #4
 8004558:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2218      	movs	r2, #24
 800455e:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	e00a      	b.n	800457c <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	3304      	adds	r3, #4
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	3301      	adds	r3, #1
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2b1a      	cmp	r3, #26
 8004580:	ddf1      	ble.n	8004566 <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a05      	ldr	r2, [pc, #20]	@ (800459c <init_temperature_converter+0x50>)
 8004586:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a05      	ldr	r2, [pc, #20]	@ (80045a0 <init_temperature_converter+0x54>)
 800458c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800458e:	bf00      	nop
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	08004249 	.word	0x08004249
 80045a0:	080042b9 	.word	0x080042b9

080045a4 <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff feba 	bl	8004328 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3378      	adds	r3, #120	@ 0x78
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7ff ff03 	bl	80043c4 <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	33f0      	adds	r3, #240	@ 0xf0
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff ff42 	bl	800444c <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff ff72 	bl	80044b8 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff ffb6 	bl	800454c <init_temperature_converter>
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	4603      	mov	r3, r0
 80045f0:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	2b1a      	cmp	r3, #26
 80045f6:	d803      	bhi.n	8004600 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	4a05      	ldr	r2, [pc, #20]	@ (8004610 <UnitConverter_get_unit_type+0x28>)
 80045fc:	5cd3      	ldrb	r3, [r2, r3]
 80045fe:	e000      	b.n	8004602 <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	20000118 	.word	0x20000118

08004614 <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004620:	460b      	mov	r3, r1
 8004622:	71fb      	strb	r3, [r7, #7]
 8004624:	4613      	mov	r3, r2
 8004626:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff ffdc 	bl	80045e8 <UnitConverter_get_unit_type>
 8004630:	4603      	mov	r3, r0
 8004632:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 8004634:	79bb      	ldrb	r3, [r7, #6]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff ffd6 	bl	80045e8 <UnitConverter_get_unit_type>
 800463c:	4603      	mov	r3, r0
 800463e:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 8004640:	7efa      	ldrb	r2, [r7, #27]
 8004642:	7ebb      	ldrb	r3, [r7, #26]
 8004644:	429a      	cmp	r2, r3
 8004646:	d002      	beq.n	800464e <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004648:	edd7 7a02 	vldr	s15, [r7, #8]
 800464c:	e03b      	b.n	80046c6 <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 800464e:	7efa      	ldrb	r2, [r7, #27]
 8004650:	4613      	mov	r3, r2
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	1a9b      	subs	r3, r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800466a:	79fa      	ldrb	r2, [r7, #7]
 800466c:	4610      	mov	r0, r2
 800466e:	ed97 0a02 	vldr	s0, [r7, #8]
 8004672:	4798      	blx	r3
 8004674:	ed87 0a07 	vstr	s0, [r7, #28]
 8004678:	e00c      	b.n	8004694 <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 800467a:	79fb      	ldrb	r3, [r7, #7]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	3304      	adds	r3, #4
 8004684:	edd3 7a00 	vldr	s15, [r3]
 8004688:	ed97 7a02 	vldr	s14, [r7, #8]
 800468c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004690:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004698:	2b00      	cmp	r3, #0
 800469a:	d009      	beq.n	80046b0 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046a0:	79ba      	ldrb	r2, [r7, #6]
 80046a2:	4610      	mov	r0, r2
 80046a4:	ed97 0a07 	vldr	s0, [r7, #28]
 80046a8:	4798      	blx	r3
 80046aa:	eef0 7a40 	vmov.f32	s15, s0
 80046ae:	e00a      	b.n	80046c6 <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 80046b0:	79bb      	ldrb	r3, [r7, #6]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	4413      	add	r3, r2
 80046b8:	3304      	adds	r3, #4
 80046ba:	ed93 7a00 	vldr	s14, [r3]
 80046be:	edd7 6a07 	vldr	s13, [r7, #28]
 80046c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 80046c6:	eeb0 0a67 	vmov.f32	s0, s15
 80046ca:	3720      	adds	r7, #32
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80046dc:	460b      	mov	r3, r1
 80046de:	71fb      	strb	r3, [r7, #7]
 80046e0:	4613      	mov	r3, r2
 80046e2:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7ff ff7e 	bl	80045e8 <UnitConverter_get_unit_type>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d111      	bne.n	8004716 <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 80046f2:	79bb      	ldrb	r3, [r7, #6]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff77 	bl	80045e8 <UnitConverter_get_unit_type>
 80046fa:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d10a      	bne.n	8004716 <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 8004700:	79ba      	ldrb	r2, [r7, #6]
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	4619      	mov	r1, r3
 8004706:	ed97 0a02 	vldr	s0, [r7, #8]
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f7ff ff82 	bl	8004614 <UnitConverter_convert>
 8004710:	eef0 7a40 	vmov.f32	s15, s0
 8004714:	e001      	b.n	800471a <UnitConverter_angle+0x4a>
    }
    return value;
 8004716:	edd7 7a02 	vldr	s15, [r7, #8]
}
 800471a:	eeb0 0a67 	vmov.f32	s0, s15
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08c      	sub	sp, #48	@ 0x30
 8004728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800472a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	605a      	str	r2, [r3, #4]
 8004734:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004736:	1d3b      	adds	r3, r7, #4
 8004738:	2220      	movs	r2, #32
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f00d f9db 	bl	8011af8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004742:	4b39      	ldr	r3, [pc, #228]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004744:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004748:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800474a:	4b37      	ldr	r3, [pc, #220]	@ (8004828 <MX_ADC1_Init+0x104>)
 800474c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004750:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004752:	4b35      	ldr	r3, [pc, #212]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004754:	2200      	movs	r2, #0
 8004756:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004758:	4b33      	ldr	r3, [pc, #204]	@ (8004828 <MX_ADC1_Init+0x104>)
 800475a:	2200      	movs	r2, #0
 800475c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800475e:	4b32      	ldr	r3, [pc, #200]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004760:	2200      	movs	r2, #0
 8004762:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004764:	4b30      	ldr	r3, [pc, #192]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004766:	2201      	movs	r2, #1
 8004768:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800476a:	4b2f      	ldr	r3, [pc, #188]	@ (8004828 <MX_ADC1_Init+0x104>)
 800476c:	2204      	movs	r2, #4
 800476e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004770:	4b2d      	ldr	r3, [pc, #180]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004772:	2200      	movs	r2, #0
 8004774:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004776:	4b2c      	ldr	r3, [pc, #176]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004778:	2201      	movs	r2, #1
 800477a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800477c:	4b2a      	ldr	r3, [pc, #168]	@ (8004828 <MX_ADC1_Init+0x104>)
 800477e:	2202      	movs	r2, #2
 8004780:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004782:	4b29      	ldr	r3, [pc, #164]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800478a:	4b27      	ldr	r3, [pc, #156]	@ (8004828 <MX_ADC1_Init+0x104>)
 800478c:	2200      	movs	r2, #0
 800478e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004790:	4b25      	ldr	r3, [pc, #148]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004792:	2200      	movs	r2, #0
 8004794:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004796:	4b24      	ldr	r3, [pc, #144]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800479e:	4b22      	ldr	r3, [pc, #136]	@ (8004828 <MX_ADC1_Init+0x104>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80047a4:	4b20      	ldr	r3, [pc, #128]	@ (8004828 <MX_ADC1_Init+0x104>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80047ac:	481e      	ldr	r0, [pc, #120]	@ (8004828 <MX_ADC1_Init+0x104>)
 80047ae:	f005 fc55 	bl	800a05c <HAL_ADC_Init>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80047b8:	f003 fc7a 	bl	80080b0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80047bc:	2300      	movs	r3, #0
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80047c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047c4:	4619      	mov	r1, r3
 80047c6:	4818      	ldr	r0, [pc, #96]	@ (8004828 <MX_ADC1_Init+0x104>)
 80047c8:	f006 fd74 	bl	800b2b4 <HAL_ADCEx_MultiModeConfigChannel>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80047d2:	f003 fc6d 	bl	80080b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80047d6:	4b15      	ldr	r3, [pc, #84]	@ (800482c <MX_ADC1_Init+0x108>)
 80047d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80047da:	2306      	movs	r3, #6
 80047dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80047de:	2307      	movs	r3, #7
 80047e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80047e2:	237f      	movs	r3, #127	@ 0x7f
 80047e4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80047e6:	2304      	movs	r3, #4
 80047e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047ee:	1d3b      	adds	r3, r7, #4
 80047f0:	4619      	mov	r1, r3
 80047f2:	480d      	ldr	r0, [pc, #52]	@ (8004828 <MX_ADC1_Init+0x104>)
 80047f4:	f005 fee0 	bl	800a5b8 <HAL_ADC_ConfigChannel>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80047fe:	f003 fc57 	bl	80080b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004802:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <MX_ADC1_Init+0x10c>)
 8004804:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004806:	230c      	movs	r3, #12
 8004808:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800480a:	1d3b      	adds	r3, r7, #4
 800480c:	4619      	mov	r1, r3
 800480e:	4806      	ldr	r0, [pc, #24]	@ (8004828 <MX_ADC1_Init+0x104>)
 8004810:	f005 fed2 	bl	800a5b8 <HAL_ADC_ConfigChannel>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800481a:	f003 fc49 	bl	80080b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800481e:	bf00      	nop
 8004820:	3730      	adds	r7, #48	@ 0x30
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	200001b4 	.word	0x200001b4
 800482c:	19200040 	.word	0x19200040
 8004830:	1d500080 	.word	0x1d500080

08004834 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b09e      	sub	sp, #120	@ 0x78
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800483c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	605a      	str	r2, [r3, #4]
 8004846:	609a      	str	r2, [r3, #8]
 8004848:	60da      	str	r2, [r3, #12]
 800484a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800484c:	f107 0310 	add.w	r3, r7, #16
 8004850:	2254      	movs	r2, #84	@ 0x54
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f00d f94f 	bl	8011af8 <memset>
  if(adcHandle->Instance==ADC1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004862:	d15e      	bne.n	8004922 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004864:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004868:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800486a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800486e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004870:	f107 0310 	add.w	r3, r7, #16
 8004874:	4618      	mov	r0, r3
 8004876:	f008 fa2d 	bl	800ccd4 <HAL_RCCEx_PeriphCLKConfig>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004880:	f003 fc16 	bl	80080b0 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004884:	4b29      	ldr	r3, [pc, #164]	@ (800492c <HAL_ADC_MspInit+0xf8>)
 8004886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004888:	4a28      	ldr	r2, [pc, #160]	@ (800492c <HAL_ADC_MspInit+0xf8>)
 800488a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800488e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004890:	4b26      	ldr	r3, [pc, #152]	@ (800492c <HAL_ADC_MspInit+0xf8>)
 8004892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004894:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800489c:	4b23      	ldr	r3, [pc, #140]	@ (800492c <HAL_ADC_MspInit+0xf8>)
 800489e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a0:	4a22      	ldr	r2, [pc, #136]	@ (800492c <HAL_ADC_MspInit+0xf8>)
 80048a2:	f043 0304 	orr.w	r3, r3, #4
 80048a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048a8:	4b20      	ldr	r3, [pc, #128]	@ (800492c <HAL_ADC_MspInit+0xf8>)
 80048aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80048b4:	2303      	movs	r3, #3
 80048b6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048b8:	2303      	movs	r3, #3
 80048ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048bc:	2300      	movs	r3, #0
 80048be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048c0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80048c4:	4619      	mov	r1, r3
 80048c6:	481a      	ldr	r0, [pc, #104]	@ (8004930 <HAL_ADC_MspInit+0xfc>)
 80048c8:	f007 fa3e 	bl	800bd48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80048cc:	4b19      	ldr	r3, [pc, #100]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 80048ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004938 <HAL_ADC_MspInit+0x104>)
 80048d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80048d2:	4b18      	ldr	r3, [pc, #96]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 80048d4:	2205      	movs	r2, #5
 80048d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048d8:	4b16      	ldr	r3, [pc, #88]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 80048da:	2200      	movs	r2, #0
 80048dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80048de:	4b15      	ldr	r3, [pc, #84]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80048e4:	4b13      	ldr	r3, [pc, #76]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 80048e6:	2280      	movs	r2, #128	@ 0x80
 80048e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80048ea:	4b12      	ldr	r3, [pc, #72]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 80048ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80048f2:	4b10      	ldr	r3, [pc, #64]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 80048f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80048fa:	4b0e      	ldr	r3, [pc, #56]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 80048fc:	2220      	movs	r2, #32
 80048fe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004900:	4b0c      	ldr	r3, [pc, #48]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 8004902:	2200      	movs	r2, #0
 8004904:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004906:	480b      	ldr	r0, [pc, #44]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 8004908:	f006 feec 	bl	800b6e4 <HAL_DMA_Init>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8004912:	f003 fbcd 	bl	80080b0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a06      	ldr	r2, [pc, #24]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 800491a:	655a      	str	r2, [r3, #84]	@ 0x54
 800491c:	4a05      	ldr	r2, [pc, #20]	@ (8004934 <HAL_ADC_MspInit+0x100>)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004922:	bf00      	nop
 8004924:	3778      	adds	r7, #120	@ 0x78
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	40021000 	.word	0x40021000
 8004930:	48000800 	.word	0x48000800
 8004934:	20000220 	.word	0x20000220
 8004938:	40020008 	.word	0x40020008

0800493c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004942:	4b22      	ldr	r3, [pc, #136]	@ (80049cc <MX_DMA_Init+0x90>)
 8004944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004946:	4a21      	ldr	r2, [pc, #132]	@ (80049cc <MX_DMA_Init+0x90>)
 8004948:	f043 0304 	orr.w	r3, r3, #4
 800494c:	6493      	str	r3, [r2, #72]	@ 0x48
 800494e:	4b1f      	ldr	r3, [pc, #124]	@ (80049cc <MX_DMA_Init+0x90>)
 8004950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	607b      	str	r3, [r7, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800495a:	4b1c      	ldr	r3, [pc, #112]	@ (80049cc <MX_DMA_Init+0x90>)
 800495c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800495e:	4a1b      	ldr	r2, [pc, #108]	@ (80049cc <MX_DMA_Init+0x90>)
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	6493      	str	r3, [r2, #72]	@ 0x48
 8004966:	4b19      	ldr	r3, [pc, #100]	@ (80049cc <MX_DMA_Init+0x90>)
 8004968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004972:	2200      	movs	r2, #0
 8004974:	2100      	movs	r1, #0
 8004976:	200b      	movs	r0, #11
 8004978:	f006 fe7f 	bl	800b67a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800497c:	200b      	movs	r0, #11
 800497e:	f006 fe96 	bl	800b6ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004982:	2200      	movs	r2, #0
 8004984:	2100      	movs	r1, #0
 8004986:	200c      	movs	r0, #12
 8004988:	f006 fe77 	bl	800b67a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800498c:	200c      	movs	r0, #12
 800498e:	f006 fe8e 	bl	800b6ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004992:	2200      	movs	r2, #0
 8004994:	2100      	movs	r1, #0
 8004996:	200d      	movs	r0, #13
 8004998:	f006 fe6f 	bl	800b67a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800499c:	200d      	movs	r0, #13
 800499e:	f006 fe86 	bl	800b6ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80049a2:	2200      	movs	r2, #0
 80049a4:	2100      	movs	r1, #0
 80049a6:	200e      	movs	r0, #14
 80049a8:	f006 fe67 	bl	800b67a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80049ac:	200e      	movs	r0, #14
 80049ae:	f006 fe7e 	bl	800b6ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80049b2:	2200      	movs	r2, #0
 80049b4:	2100      	movs	r1, #0
 80049b6:	200f      	movs	r0, #15
 80049b8:	f006 fe5f 	bl	800b67a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80049bc:	200f      	movs	r0, #15
 80049be:	f006 fe76 	bl	800b6ae <HAL_NVIC_EnableIRQ>

}
 80049c2:	bf00      	nop
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40021000 	.word	0x40021000

080049d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08a      	sub	sp, #40	@ 0x28
 80049d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049d6:	f107 0314 	add.w	r3, r7, #20
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	605a      	str	r2, [r3, #4]
 80049e0:	609a      	str	r2, [r3, #8]
 80049e2:	60da      	str	r2, [r3, #12]
 80049e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80049e6:	4b75      	ldr	r3, [pc, #468]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 80049e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ea:	4a74      	ldr	r2, [pc, #464]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 80049ec:	f043 0304 	orr.w	r3, r3, #4
 80049f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049f2:	4b72      	ldr	r3, [pc, #456]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 80049f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80049fe:	4b6f      	ldr	r3, [pc, #444]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a02:	4a6e      	ldr	r2, [pc, #440]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a04:	f043 0320 	orr.w	r3, r3, #32
 8004a08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a0a:	4b6c      	ldr	r3, [pc, #432]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a16:	4b69      	ldr	r3, [pc, #420]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1a:	4a68      	ldr	r2, [pc, #416]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a22:	4b66      	ldr	r3, [pc, #408]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	60bb      	str	r3, [r7, #8]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a2e:	4b63      	ldr	r3, [pc, #396]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a32:	4a62      	ldr	r2, [pc, #392]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a34:	f043 0302 	orr.w	r3, r3, #2
 8004a38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a3a:	4b60      	ldr	r3, [pc, #384]	@ (8004bbc <MX_GPIO_Init+0x1ec>)
 8004a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	607b      	str	r3, [r7, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8004a46:	2200      	movs	r2, #0
 8004a48:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004a4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a50:	f007 fb14 	bl	800c07c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8004a54:	2200      	movs	r2, #0
 8004a56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a5a:	4859      	ldr	r0, [pc, #356]	@ (8004bc0 <MX_GPIO_Init+0x1f0>)
 8004a5c:	f007 fb0e 	bl	800c07c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004a60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a66:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004a70:	f107 0314 	add.w	r3, r7, #20
 8004a74:	4619      	mov	r1, r3
 8004a76:	4852      	ldr	r0, [pc, #328]	@ (8004bc0 <MX_GPIO_Init+0x1f0>)
 8004a78:	f007 f966 	bl	800bd48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004a7c:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a82:	2301      	movs	r3, #1
 8004a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a8e:	f107 0314 	add.w	r3, r7, #20
 8004a92:	4619      	mov	r1, r3
 8004a94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a98:	f007 f956 	bl	800bd48 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 8004a9c:	f241 0301 	movw	r3, #4097	@ 0x1001
 8004aa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004aa2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aac:	f107 0314 	add.w	r3, r7, #20
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4844      	ldr	r0, [pc, #272]	@ (8004bc4 <MX_GPIO_Init+0x1f4>)
 8004ab4:	f007 f948 	bl	800bd48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004ab8:	2306      	movs	r3, #6
 8004aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004abc:	2300      	movs	r3, #0
 8004abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ac4:	f107 0314 	add.w	r3, r7, #20
 8004ac8:	4619      	mov	r1, r3
 8004aca:	483e      	ldr	r0, [pc, #248]	@ (8004bc4 <MX_GPIO_Init+0x1f4>)
 8004acc:	f007 f93c 	bl	800bd48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ad0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ae2:	f107 0314 	add.w	r3, r7, #20
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4835      	ldr	r0, [pc, #212]	@ (8004bc0 <MX_GPIO_Init+0x1f0>)
 8004aea:	f007 f92d 	bl	800bd48 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 8004aee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004af4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004afa:	2302      	movs	r3, #2
 8004afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004afe:	f107 0314 	add.w	r3, r7, #20
 8004b02:	4619      	mov	r1, r3
 8004b04:	482e      	ldr	r0, [pc, #184]	@ (8004bc0 <MX_GPIO_Init+0x1f0>)
 8004b06:	f007 f91f 	bl	800bd48 <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 8004b0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b14:	2302      	movs	r3, #2
 8004b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8004b18:	f107 0314 	add.w	r3, r7, #20
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4828      	ldr	r0, [pc, #160]	@ (8004bc0 <MX_GPIO_Init+0x1f0>)
 8004b20:	f007 f912 	bl	800bd48 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 8004b24:	2310      	movs	r3, #16
 8004b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004b28:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8004b32:	f107 0314 	add.w	r3, r7, #20
 8004b36:	4619      	mov	r1, r3
 8004b38:	4822      	ldr	r0, [pc, #136]	@ (8004bc4 <MX_GPIO_Init+0x1f4>)
 8004b3a:	f007 f905 	bl	800bd48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 8004b3e:	2340      	movs	r3, #64	@ 0x40
 8004b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 8004b4c:	f107 0314 	add.w	r3, r7, #20
 8004b50:	4619      	mov	r1, r3
 8004b52:	481c      	ldr	r0, [pc, #112]	@ (8004bc4 <MX_GPIO_Init+0x1f4>)
 8004b54:	f007 f8f8 	bl	800bd48 <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 8004b58:	2380      	movs	r3, #128	@ 0x80
 8004b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b5c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b62:	2302      	movs	r3, #2
 8004b64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 8004b66:	f107 0314 	add.w	r3, r7, #20
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4815      	ldr	r0, [pc, #84]	@ (8004bc4 <MX_GPIO_Init+0x1f4>)
 8004b6e:	f007 f8eb 	bl	800bd48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004b72:	2200      	movs	r2, #0
 8004b74:	2100      	movs	r1, #0
 8004b76:	2006      	movs	r0, #6
 8004b78:	f006 fd7f 	bl	800b67a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004b7c:	2006      	movs	r0, #6
 8004b7e:	f006 fd96 	bl	800b6ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004b82:	2200      	movs	r2, #0
 8004b84:	2100      	movs	r1, #0
 8004b86:	200a      	movs	r0, #10
 8004b88:	f006 fd77 	bl	800b67a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004b8c:	200a      	movs	r0, #10
 8004b8e:	f006 fd8e 	bl	800b6ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004b92:	2200      	movs	r2, #0
 8004b94:	2100      	movs	r1, #0
 8004b96:	2017      	movs	r0, #23
 8004b98:	f006 fd6f 	bl	800b67a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004b9c:	2017      	movs	r0, #23
 8004b9e:	f006 fd86 	bl	800b6ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	2028      	movs	r0, #40	@ 0x28
 8004ba8:	f006 fd67 	bl	800b67a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004bac:	2028      	movs	r0, #40	@ 0x28
 8004bae:	f006 fd7e 	bl	800b6ae <HAL_NVIC_EnableIRQ>

}
 8004bb2:	bf00      	nop
 8004bb4:	3728      	adds	r7, #40	@ 0x28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	48000800 	.word	0x48000800
 8004bc4:	48000400 	.word	0x48000400

08004bc8 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b096      	sub	sp, #88	@ 0x58
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004bd4:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004bde:	1d3b      	adds	r3, r7, #4
 8004be0:	2201      	movs	r2, #1
 8004be2:	2101      	movs	r1, #1
 8004be4:	f00c fa17 	bl	8011016 <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	f00c fe87 	bl	801190a <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f00c fe7d 	bl	801190a <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f00c fe73 	bl	801190a <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8004c30:	4619      	mov	r1, r3
 8004c32:	ed97 0a02 	vldr	s0, [r7, #8]
 8004c36:	4610      	mov	r0, r2
 8004c38:	f00c fdf6 	bl	8011828 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8004c4e:	461a      	mov	r2, r3
 8004c50:	f00c fd70 	bl	8011734 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004c66:	461a      	mov	r2, r3
 8004c68:	f00c f99a 	bl	8010fa0 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f00c fd58 	bl	8011734 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004c96:	461a      	mov	r2, r3
 8004c98:	f00c fd4c 	bl	8011734 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f00c fd40 	bl	8011734 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f00c fdab 	bl	8011828 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	f00c f95b 	bl	8010fa0 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f00c fd19 	bl	8011734 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8004d14:	461a      	mov	r2, r3
 8004d16:	f00c fd0d 	bl	8011734 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	f00c f937 	bl	8010fa0 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4610      	mov	r0, r2
 8004d42:	f00c f980 	bl	8011046 <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8004d58:	461a      	mov	r2, r3
 8004d5a:	f00c fceb 	bl	8011734 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8004d70:	461a      	mov	r2, r3
 8004d72:	f00c fcdf 	bl	8011734 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8004d88:	461a      	mov	r2, r3
 8004d8a:	f00c fcd3 	bl	8011734 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8004da0:	461a      	mov	r2, r3
 8004da2:	f00c fd77 	bl	8011894 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8004db8:	461a      	mov	r2, r3
 8004dba:	f00c fcbb 	bl	8011734 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f00c f8e5 	bl	8010fa0 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8004de8:	461a      	mov	r2, r3
 8004dea:	f00c fca3 	bl	8011734 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 8004dee:	f107 0310 	add.w	r3, r7, #16
 8004df2:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8004df6:	2204      	movs	r2, #4
 8004df8:	2104      	movs	r1, #4
 8004dfa:	f00c f90c 	bl	8011016 <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8004e0a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004e0e:	4619      	mov	r1, r3
 8004e10:	f00c fc90 	bl	8011734 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8004e1a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004e1e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8004e22:	4618      	mov	r0, r3
 8004e24:	f00c fd36 	bl	8011894 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8004e34:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f00c fc7b 	bl	8011734 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004e4e:	ee07 3a90 	vmov	s15, r3
}
 8004e52:	eeb0 0a67 	vmov.f32	s0, s15
 8004e56:	3758      	adds	r7, #88	@ 0x58
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8004e5c:	b5b0      	push	{r4, r5, r7, lr}
 8004e5e:	b0a4      	sub	sp, #144	@ 0x90
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6178      	str	r0, [r7, #20]
 8004e64:	6139      	str	r1, [r7, #16]
 8004e66:	60fa      	str	r2, [r7, #12]
 8004e68:	ed87 0a02 	vstr	s0, [r7, #8]
 8004e6c:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8004e80:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004e84:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ea4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004ea8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004eaa:	f04f 0300 	mov.w	r3, #0
 8004eae:	677b      	str	r3, [r7, #116]	@ 0x74
 8004eb0:	f04f 0300 	mov.w	r3, #0
 8004eb4:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8004eb6:	4bc6      	ldr	r3, [pc, #792]	@ (80051d0 <Kalman_Start+0x374>)
 8004eb8:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8004ebc:	461d      	mov	r5, r3
 8004ebe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ec2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ec6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ec8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004ece:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8004ed2:	f107 031c 	add.w	r3, r7, #28
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	605a      	str	r2, [r3, #4]
 8004edc:	609a      	str	r2, [r3, #8]
 8004ede:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8004eea:	2300      	movs	r3, #0
 8004eec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ef0:	e028      	b.n	8004f44 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8004ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4413      	add	r3, r2
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	6979      	ldr	r1, [r7, #20]
 8004f00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f04:	3314      	adds	r3, #20
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8004f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	3390      	adds	r3, #144	@ 0x90
 8004f14:	443b      	add	r3, r7
 8004f16:	3b64      	subs	r3, #100	@ 0x64
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	6979      	ldr	r1, [r7, #20]
 8004f1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f20:	3398      	adds	r3, #152	@ 0x98
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f2e:	3304      	adds	r3, #4
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8004f3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f3e:	3301      	adds	r3, #1
 8004f40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f48:	2b0f      	cmp	r3, #15
 8004f4a:	ddd2      	ble.n	8004ef2 <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004f52:	e03a      	b.n	8004fca <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8004f54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	3390      	adds	r3, #144	@ 0x90
 8004f5c:	443b      	add	r3, r7
 8004f5e:	3b74      	subs	r3, #116	@ 0x74
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	6979      	ldr	r1, [r7, #20]
 8004f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8004f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	4413      	add	r3, r2
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	6979      	ldr	r1, [r7, #20]
 8004f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f80:	3324      	adds	r3, #36	@ 0x24
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8004f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	3390      	adds	r3, #144	@ 0x90
 8004f90:	443b      	add	r3, r7
 8004f92:	3b14      	subs	r3, #20
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	6979      	ldr	r1, [r7, #20]
 8004f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f9c:	3328      	adds	r3, #40	@ 0x28
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	440b      	add	r3, r1
 8004fa2:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8004fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	3390      	adds	r3, #144	@ 0x90
 8004fac:	443b      	add	r3, r7
 8004fae:	3b24      	subs	r3, #36	@ 0x24
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	6979      	ldr	r1, [r7, #20]
 8004fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fb8:	332c      	adds	r3, #44	@ 0x2c
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8004fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004fca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	ddc0      	ble.n	8004f54 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	2104      	movs	r1, #4
 8004fde:	f00c f81a 	bl	8011016 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	3310      	adds	r3, #16
 8004fec:	2204      	movs	r2, #4
 8004fee:	2104      	movs	r1, #4
 8004ff0:	f00c f811 	bl	8011016 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	3350      	adds	r3, #80	@ 0x50
 8004ffe:	2204      	movs	r2, #4
 8005000:	2104      	movs	r1, #4
 8005002:	f00c f808 	bl	8011016 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	3390      	adds	r3, #144	@ 0x90
 8005010:	2201      	movs	r2, #1
 8005012:	2104      	movs	r1, #4
 8005014:	f00b ffff 	bl	8011016 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	33a0      	adds	r3, #160	@ 0xa0
 8005022:	2204      	movs	r2, #4
 8005024:	2101      	movs	r1, #1
 8005026:	f00b fff6 	bl	8011016 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	33b0      	adds	r3, #176	@ 0xb0
 8005034:	2201      	movs	r2, #1
 8005036:	2104      	movs	r1, #4
 8005038:	f00b ffed 	bl	8011016 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	33c8      	adds	r3, #200	@ 0xc8
 8005046:	2204      	movs	r2, #4
 8005048:	2104      	movs	r1, #4
 800504a:	f00b ffe4 	bl	8011016 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800505a:	2201      	movs	r2, #1
 800505c:	2104      	movs	r1, #4
 800505e:	f00b ffda 	bl	8011016 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800506e:	2204      	movs	r2, #4
 8005070:	2101      	movs	r1, #1
 8005072:	f00b ffd0 	bl	8011016 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8005082:	2204      	movs	r2, #4
 8005084:	2104      	movs	r1, #4
 8005086:	f00b ffc6 	bl	8011016 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005096:	2204      	movs	r2, #4
 8005098:	2104      	movs	r1, #4
 800509a:	f00b ffbc 	bl	8011016 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80050aa:	2201      	movs	r2, #1
 80050ac:	2104      	movs	r1, #4
 80050ae:	f00b ffb2 	bl	8011016 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80050be:	2201      	movs	r2, #1
 80050c0:	2104      	movs	r1, #4
 80050c2:	f00b ffa8 	bl	8011016 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80050d2:	2204      	movs	r2, #4
 80050d4:	2101      	movs	r1, #1
 80050d6:	f00b ff9e 	bl	8011016 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80050e6:	2201      	movs	r2, #1
 80050e8:	2101      	movs	r1, #1
 80050ea:	f00b ff94 	bl	8011016 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80050fa:	2201      	movs	r2, #1
 80050fc:	2101      	movs	r1, #1
 80050fe:	f00b ff8a 	bl	8011016 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800510e:	2201      	movs	r2, #1
 8005110:	2104      	movs	r1, #4
 8005112:	f00b ff80 	bl	8011016 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005122:	2201      	movs	r2, #1
 8005124:	2104      	movs	r1, #4
 8005126:	f00b ff76 	bl	8011016 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8005136:	2201      	movs	r2, #1
 8005138:	2101      	movs	r1, #1
 800513a:	f00b ff6c 	bl	8011016 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800514a:	2201      	movs	r2, #1
 800514c:	2101      	movs	r1, #1
 800514e:	f00b ff62 	bl	8011016 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800515e:	2201      	movs	r2, #1
 8005160:	2101      	movs	r1, #1
 8005162:	f00b ff58 	bl	8011016 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005172:	2201      	movs	r2, #1
 8005174:	2104      	movs	r1, #4
 8005176:	f00b ff4e 	bl	8011016 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005186:	2201      	movs	r2, #1
 8005188:	2101      	movs	r1, #1
 800518a:	f00b ff44 	bl	8011016 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800519a:	2204      	movs	r2, #4
 800519c:	2104      	movs	r1, #4
 800519e:	f00b ff3a 	bl	8011016 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	33c4      	adds	r3, #196	@ 0xc4
 80051ac:	2201      	movs	r2, #1
 80051ae:	2101      	movs	r1, #1
 80051b0:	f00b ff31 	bl	8011016 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80051c0:	2201      	movs	r2, #1
 80051c2:	2101      	movs	r1, #1
 80051c4:	f00b ff27 	bl	8011016 <arm_mat_init_f32>
}
 80051c8:	bf00      	nop
 80051ca:	3790      	adds	r7, #144	@ 0x90
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bdb0      	pop	{r4, r5, r7, pc}
 80051d0:	080139c8 	.word	0x080139c8

080051d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80051d8:	f3bf 8f4f 	dsb	sy
}
 80051dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80051de:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <__NVIC_SystemReset+0x24>)
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80051e6:	4904      	ldr	r1, [pc, #16]	@ (80051f8 <__NVIC_SystemReset+0x24>)
 80051e8:	4b04      	ldr	r3, [pc, #16]	@ (80051fc <__NVIC_SystemReset+0x28>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80051ee:	f3bf 8f4f 	dsb	sy
}
 80051f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80051f4:	bf00      	nop
 80051f6:	e7fd      	b.n	80051f4 <__NVIC_SystemReset+0x20>
 80051f8:	e000ed00 	.word	0xe000ed00
 80051fc:	05fa0004 	.word	0x05fa0004

08005200 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005206:	f004 fc74 	bl	8009af2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800520a:	f000 f88d 	bl	8005328 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800520e:	f7ff fbdf 	bl	80049d0 <MX_GPIO_Init>
	MX_DMA_Init();
 8005212:	f7ff fb93 	bl	800493c <MX_DMA_Init>
	MX_ADC1_Init();
 8005216:	f7ff fa85 	bl	8004724 <MX_ADC1_Init>
	MX_TIM2_Init();
 800521a:	f003 fe7f 	bl	8008f1c <MX_TIM2_Init>
	MX_TIM3_Init();
 800521e:	f003 fecb 	bl	8008fb8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8005222:	f003 ff1f 	bl	8009064 <MX_TIM4_Init>
	MX_TIM5_Init();
 8005226:	f003 ff73 	bl	8009110 <MX_TIM5_Init>
	MX_TIM8_Init();
 800522a:	f003 ffc7 	bl	80091bc <MX_TIM8_Init>
	MX_USART2_UART_Init();
 800522e:	f004 fa89 	bl	8009744 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8005232:	f004 f881 	bl	8009338 <MX_TIM16_Init>
	MX_TIM1_Init();
 8005236:	f003 fddd 	bl	8008df4 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 800523a:	f004 fa39 	bl	80096b0 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 800523e:	f002 ff3f 	bl	80080c0 <plotter_begin>

	prismatic_axis.position = prismatic_encoder.mm;
 8005242:	4b28      	ldr	r3, [pc, #160]	@ (80052e4 <main+0xe4>)
 8005244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005246:	4a28      	ldr	r2, [pc, #160]	@ (80052e8 <main+0xe8>)
 8005248:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 800524a:	4b28      	ldr	r3, [pc, #160]	@ (80052ec <main+0xec>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524e:	4a28      	ldr	r2, [pc, #160]	@ (80052f0 <main+0xf0>)
 8005250:	6013      	str	r3, [r2, #0]

	safety_state = SAFETY_NORMAL;
 8005252:	4b28      	ldr	r3, [pc, #160]	@ (80052f4 <main+0xf4>)
 8005254:	2200      	movs	r2, #0
 8005256:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8005258:	4b27      	ldr	r3, [pc, #156]	@ (80052f8 <main+0xf8>)
 800525a:	2200      	movs	r2, #0
 800525c:	701a      	strb	r2, [r3, #0]
	pilot_light_state = false;
 800525e:	4b27      	ldr	r3, [pc, #156]	@ (80052fc <main+0xfc>)
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 8005264:	4b26      	ldr	r3, [pc, #152]	@ (8005300 <main+0x100>)
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]
	position_control_tick = 0;
 800526a:	4b26      	ldr	r3, [pc, #152]	@ (8005304 <main+0x104>)
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]

	if (first_startup) {
 8005270:	4b25      	ldr	r3, [pc, #148]	@ (8005308 <main+0x108>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d032      	beq.n	80052de <main+0xde>
		// Check if already at home position
		bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 8005278:	2101      	movs	r1, #1
 800527a:	4824      	ldr	r0, [pc, #144]	@ (800530c <main+0x10c>)
 800527c:	f006 fee6 	bl	800c04c <HAL_GPIO_ReadPin>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	bf14      	ite	ne
 8005286:	2301      	movne	r3, #1
 8005288:	2300      	moveq	r3, #0
 800528a:	71fb      	strb	r3, [r7, #7]
		UPPER_PHOTO_Pin);
		bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 800528c:	2140      	movs	r1, #64	@ 0x40
 800528e:	481f      	ldr	r0, [pc, #124]	@ (800530c <main+0x10c>)
 8005290:	f006 fedc 	bl	800c04c <HAL_GPIO_ReadPin>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	bf14      	ite	ne
 800529a:	2301      	movne	r3, #1
 800529c:	2300      	moveq	r3, #0
 800529e:	71bb      	strb	r3, [r7, #6]

		if (up_photo_detected && prox_detected) {
 80052a0:	79fb      	ldrb	r3, [r7, #7]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d018      	beq.n	80052d8 <main+0xd8>
 80052a6:	79bb      	ldrb	r3, [r7, #6]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d015      	beq.n	80052d8 <main+0xd8>
			// Already at home position - no need to home
			first_startup = false;
 80052ac:	4b16      	ldr	r3, [pc, #88]	@ (8005308 <main+0x108>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]
			homing_active = false;
 80052b2:	4b17      	ldr	r3, [pc, #92]	@ (8005310 <main+0x110>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80052b8:	4b16      	ldr	r3, [pc, #88]	@ (8005314 <main+0x114>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	701a      	strb	r2, [r3, #0]

			// Clear any sensor flags
			up_photo = false;
 80052be:	4b16      	ldr	r3, [pc, #88]	@ (8005318 <main+0x118>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80052c4:	4b15      	ldr	r3, [pc, #84]	@ (800531c <main+0x11c>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80052ca:	4b15      	ldr	r3, [pc, #84]	@ (8005320 <main+0x120>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 80052d0:	4b14      	ldr	r3, [pc, #80]	@ (8005324 <main+0x124>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	e002      	b.n	80052de <main+0xde>

		} else {
			start_homing_sequence(true);
 80052d8:	2001      	movs	r0, #1
 80052da:	f000 f871 	bl	80053c0 <start_homing_sequence>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		handle_b2_button_polling();
 80052de:	f002 fc55 	bl	8007b8c <handle_b2_button_polling>
 80052e2:	e7fc      	b.n	80052de <main+0xde>
 80052e4:	20000498 	.word	0x20000498
 80052e8:	20000280 	.word	0x20000280
 80052ec:	200004f4 	.word	0x200004f4
 80052f0:	200002c4 	.word	0x200002c4
 80052f4:	2000036c 	.word	0x2000036c
 80052f8:	20000375 	.word	0x20000375
 80052fc:	20000374 	.word	0x20000374
 8005300:	20000370 	.word	0x20000370
 8005304:	20000378 	.word	0x20000378
 8005308:	20000133 	.word	0x20000133
 800530c:	48000400 	.word	0x48000400
 8005310:	2000036b 	.word	0x2000036b
 8005314:	2000036a 	.word	0x2000036a
 8005318:	20000368 	.word	0x20000368
 800531c:	20000369 	.word	0x20000369
 8005320:	20000364 	.word	0x20000364
 8005324:	20000308 	.word	0x20000308

08005328 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b094      	sub	sp, #80	@ 0x50
 800532c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800532e:	f107 0318 	add.w	r3, r7, #24
 8005332:	2238      	movs	r2, #56	@ 0x38
 8005334:	2100      	movs	r1, #0
 8005336:	4618      	mov	r0, r3
 8005338:	f00c fbde 	bl	8011af8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800533c:	1d3b      	adds	r3, r7, #4
 800533e:	2200      	movs	r2, #0
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	605a      	str	r2, [r3, #4]
 8005344:	609a      	str	r2, [r3, #8]
 8005346:	60da      	str	r2, [r3, #12]
 8005348:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800534a:	2000      	movs	r0, #0
 800534c:	f006 fee0 	bl	800c110 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005350:	2302      	movs	r3, #2
 8005352:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005354:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005358:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800535a:	2340      	movs	r3, #64	@ 0x40
 800535c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800535e:	2302      	movs	r3, #2
 8005360:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005362:	2302      	movs	r3, #2
 8005364:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8005366:	2304      	movs	r3, #4
 8005368:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 800536a:	2355      	movs	r3, #85	@ 0x55
 800536c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800536e:	2302      	movs	r3, #2
 8005370:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005372:	2302      	movs	r3, #2
 8005374:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005376:	2302      	movs	r3, #2
 8005378:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800537a:	f107 0318 	add.w	r3, r7, #24
 800537e:	4618      	mov	r0, r3
 8005380:	f006 ff7a 	bl	800c278 <HAL_RCC_OscConfig>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <SystemClock_Config+0x66>
		Error_Handler();
 800538a:	f002 fe91 	bl	80080b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800538e:	230f      	movs	r3, #15
 8005390:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005392:	2303      	movs	r3, #3
 8005394:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800539a:	2300      	movs	r3, #0
 800539c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80053a2:	1d3b      	adds	r3, r7, #4
 80053a4:	2104      	movs	r1, #4
 80053a6:	4618      	mov	r0, r3
 80053a8:	f007 fa78 	bl	800c89c <HAL_RCC_ClockConfig>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d001      	beq.n	80053b6 <SystemClock_Config+0x8e>
		Error_Handler();
 80053b2:	f002 fe7d 	bl	80080b0 <Error_Handler>
	}
}
 80053b6:	bf00      	nop
 80053b8:	3750      	adds	r7, #80	@ 0x50
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	71fb      	strb	r3, [r7, #7]
	if (homing_active)
 80053ca:	4b50      	ldr	r3, [pc, #320]	@ (800550c <start_homing_sequence+0x14c>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f040 8098 	bne.w	8005504 <start_homing_sequence+0x144>
		return;

	// Check current sensor states
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 80053d4:	2101      	movs	r1, #1
 80053d6:	484e      	ldr	r0, [pc, #312]	@ (8005510 <start_homing_sequence+0x150>)
 80053d8:	f006 fe38 	bl	800c04c <HAL_GPIO_ReadPin>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	bf14      	ite	ne
 80053e2:	2301      	movne	r3, #1
 80053e4:	2300      	moveq	r3, #0
 80053e6:	73fb      	strb	r3, [r7, #15]
	UPPER_PHOTO_Pin);
	bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 80053e8:	2140      	movs	r1, #64	@ 0x40
 80053ea:	4849      	ldr	r0, [pc, #292]	@ (8005510 <start_homing_sequence+0x150>)
 80053ec:	f006 fe2e 	bl	800c04c <HAL_GPIO_ReadPin>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	bf14      	ite	ne
 80053f6:	2301      	movne	r3, #1
 80053f8:	2300      	moveq	r3, #0
 80053fa:	73bb      	strb	r3, [r7, #14]

	// Different logic for startup vs manual homing
	if (is_startup || first_startup) {
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d103      	bne.n	800540a <start_homing_sequence+0x4a>
 8005402:	4b44      	ldr	r3, [pc, #272]	@ (8005514 <start_homing_sequence+0x154>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d02e      	beq.n	8005468 <start_homing_sequence+0xa8>
		// STARTUP LOGIC: Skip homing if already at home position
		if (up_photo_detected && prox_detected) {
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d018      	beq.n	8005442 <start_homing_sequence+0x82>
 8005410:	7bbb      	ldrb	r3, [r7, #14]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d015      	beq.n	8005442 <start_homing_sequence+0x82>
			// Already at home position - no need to home
			homing_active = false;
 8005416:	4b3d      	ldr	r3, [pc, #244]	@ (800550c <start_homing_sequence+0x14c>)
 8005418:	2200      	movs	r2, #0
 800541a:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 800541c:	4b3e      	ldr	r3, [pc, #248]	@ (8005518 <start_homing_sequence+0x158>)
 800541e:	2200      	movs	r2, #0
 8005420:	701a      	strb	r2, [r3, #0]
			first_startup = false;
 8005422:	4b3c      	ldr	r3, [pc, #240]	@ (8005514 <start_homing_sequence+0x154>)
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]

			// Clear sensor flags
			up_photo = false;
 8005428:	4b3c      	ldr	r3, [pc, #240]	@ (800551c <start_homing_sequence+0x15c>)
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 800542e:	4b3c      	ldr	r3, [pc, #240]	@ (8005520 <start_homing_sequence+0x160>)
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005434:	4b3b      	ldr	r3, [pc, #236]	@ (8005524 <start_homing_sequence+0x164>)
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 800543a:	4b3b      	ldr	r3, [pc, #236]	@ (8005528 <start_homing_sequence+0x168>)
 800543c:	2200      	movs	r2, #0
 800543e:	701a      	strb	r2, [r3, #0]
			return;
 8005440:	e061      	b.n	8005506 <start_homing_sequence+0x146>
		}

		// Not at home - start startup homing sequence (skip zero degrees)
		homing_active = true;
 8005442:	4b32      	ldr	r3, [pc, #200]	@ (800550c <start_homing_sequence+0x14c>)
 8005444:	2201      	movs	r2, #1
 8005446:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 8005448:	4b37      	ldr	r3, [pc, #220]	@ (8005528 <start_homing_sequence+0x168>)
 800544a:	2200      	movs	r2, #0
 800544c:	701a      	strb	r2, [r3, #0]
		prox_count = 0;
 800544e:	4b35      	ldr	r3, [pc, #212]	@ (8005524 <start_homing_sequence+0x164>)
 8005450:	2200      	movs	r2, #0
 8005452:	601a      	str	r2, [r3, #0]
		up_photo = false;
 8005454:	4b31      	ldr	r3, [pc, #196]	@ (800551c <start_homing_sequence+0x15c>)
 8005456:	2200      	movs	r2, #0
 8005458:	701a      	strb	r2, [r3, #0]
		low_photo = false;
 800545a:	4b31      	ldr	r3, [pc, #196]	@ (8005520 <start_homing_sequence+0x160>)
 800545c:	2200      	movs	r2, #0
 800545e:	701a      	strb	r2, [r3, #0]
		homing_state = HOMING_PEN_UP;
 8005460:	4b2d      	ldr	r3, [pc, #180]	@ (8005518 <start_homing_sequence+0x158>)
 8005462:	2201      	movs	r2, #1
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	e04e      	b.n	8005506 <start_homing_sequence+0x146>

	} else {
		// MANUAL HOMING LOGIC: More sophisticated behavior
		if (up_photo_detected && prox_detected) {
 8005468:	7bfb      	ldrb	r3, [r7, #15]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d018      	beq.n	80054a0 <start_homing_sequence+0xe0>
 800546e:	7bbb      	ldrb	r3, [r7, #14]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d015      	beq.n	80054a0 <start_homing_sequence+0xe0>
			// Already perfectly homed - skip homing completely
			homing_active = false;
 8005474:	4b25      	ldr	r3, [pc, #148]	@ (800550c <start_homing_sequence+0x14c>)
 8005476:	2200      	movs	r2, #0
 8005478:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 800547a:	4b27      	ldr	r3, [pc, #156]	@ (8005518 <start_homing_sequence+0x158>)
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
			first_startup = false;  // ← ADDED THIS LINE
 8005480:	4b24      	ldr	r3, [pc, #144]	@ (8005514 <start_homing_sequence+0x154>)
 8005482:	2200      	movs	r2, #0
 8005484:	701a      	strb	r2, [r3, #0]
			up_photo = false;
 8005486:	4b25      	ldr	r3, [pc, #148]	@ (800551c <start_homing_sequence+0x15c>)
 8005488:	2200      	movs	r2, #0
 800548a:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 800548c:	4b24      	ldr	r3, [pc, #144]	@ (8005520 <start_homing_sequence+0x160>)
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005492:	4b24      	ldr	r3, [pc, #144]	@ (8005524 <start_homing_sequence+0x164>)
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 8005498:	4b23      	ldr	r3, [pc, #140]	@ (8005528 <start_homing_sequence+0x168>)
 800549a:	2200      	movs	r2, #0
 800549c:	701a      	strb	r2, [r3, #0]
			return;
 800549e:	e032      	b.n	8005506 <start_homing_sequence+0x146>
			 up_photo = false;
			 low_photo = false;
			 homing_state = HOMING_REV_TO_ZERO_DEG;
			 rev_to_zero_trajectory_started = false;
			 */
		} else if (up_photo_detected && !prox_detected) {
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01b      	beq.n	80054de <start_homing_sequence+0x11e>
 80054a6:	7bbb      	ldrb	r3, [r7, #14]
 80054a8:	f083 0301 	eor.w	r3, r3, #1
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d015      	beq.n	80054de <start_homing_sequence+0x11e>
			// At up photo but not at prox - go to zero degrees first
			homing_active = true;
 80054b2:	4b16      	ldr	r3, [pc, #88]	@ (800550c <start_homing_sequence+0x14c>)
 80054b4:	2201      	movs	r2, #1
 80054b6:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80054b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005528 <start_homing_sequence+0x168>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80054be:	4b19      	ldr	r3, [pc, #100]	@ (8005524 <start_homing_sequence+0x164>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
			up_photo = false;
 80054c4:	4b15      	ldr	r3, [pc, #84]	@ (800551c <start_homing_sequence+0x15c>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80054ca:	4b15      	ldr	r3, [pc, #84]	@ (8005520 <start_homing_sequence+0x160>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_REV_TO_ZERO_DEG;
 80054d0:	4b11      	ldr	r3, [pc, #68]	@ (8005518 <start_homing_sequence+0x158>)
 80054d2:	2207      	movs	r2, #7
 80054d4:	701a      	strb	r2, [r3, #0]
			rev_to_zero_trajectory_started = false;
 80054d6:	4b15      	ldr	r3, [pc, #84]	@ (800552c <start_homing_sequence+0x16c>)
 80054d8:	2200      	movs	r2, #0
 80054da:	701a      	strb	r2, [r3, #0]
 80054dc:	e013      	b.n	8005506 <start_homing_sequence+0x146>
		} else {
			// Not at up photo - start full homing sequence
			homing_active = true;
 80054de:	4b0b      	ldr	r3, [pc, #44]	@ (800550c <start_homing_sequence+0x14c>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80054e4:	4b10      	ldr	r3, [pc, #64]	@ (8005528 <start_homing_sequence+0x168>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80054ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005524 <start_homing_sequence+0x164>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
			up_photo = false;
 80054f0:	4b0a      	ldr	r3, [pc, #40]	@ (800551c <start_homing_sequence+0x15c>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80054f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005520 <start_homing_sequence+0x160>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_PEN_UP;
 80054fc:	4b06      	ldr	r3, [pc, #24]	@ (8005518 <start_homing_sequence+0x158>)
 80054fe:	2201      	movs	r2, #1
 8005500:	701a      	strb	r2, [r3, #0]
 8005502:	e000      	b.n	8005506 <start_homing_sequence+0x146>
		return;
 8005504:	bf00      	nop
		}
	}
}
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	2000036b 	.word	0x2000036b
 8005510:	48000400 	.word	0x48000400
 8005514:	20000133 	.word	0x20000133
 8005518:	2000036a 	.word	0x2000036a
 800551c:	20000368 	.word	0x20000368
 8005520:	20000369 	.word	0x20000369
 8005524:	20000364 	.word	0x20000364
 8005528:	20000308 	.word	0x20000308
 800552c:	20000376 	.word	0x20000376

08005530 <update_homing_sequence>:

void update_homing_sequence(void) {
 8005530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005534:	ed2d 8b02 	vpush	{d8}
 8005538:	b08b      	sub	sp, #44	@ 0x2c
 800553a:	af00      	add	r7, sp, #0
	if (!homing_active)
 800553c:	4b95      	ldr	r3, [pc, #596]	@ (8005794 <update_homing_sequence+0x264>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	f083 0301 	eor.w	r3, r3, #1
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	f040 8335 	bne.w	8005bb6 <update_homing_sequence+0x686>
		return;

	switch (homing_state) {
 800554c:	4b92      	ldr	r3, [pc, #584]	@ (8005798 <update_homing_sequence+0x268>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	3b01      	subs	r3, #1
 8005552:	2b0a      	cmp	r3, #10
 8005554:	f200 8331 	bhi.w	8005bba <update_homing_sequence+0x68a>
 8005558:	a201      	add	r2, pc, #4	@ (adr r2, 8005560 <update_homing_sequence+0x30>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	0800558d 	.word	0x0800558d
 8005564:	080055af 	.word	0x080055af
 8005568:	0800561b 	.word	0x0800561b
 800556c:	08005767 	.word	0x08005767
 8005570:	080057d9 	.word	0x080057d9
 8005574:	0800591d 	.word	0x0800591d
 8005578:	08005995 	.word	0x08005995
 800557c:	080059df 	.word	0x080059df
 8005580:	08005a81 	.word	0x08005a81
 8005584:	08005b87 	.word	0x08005b87
 8005588:	08005bb3 	.word	0x08005bb3
	case HOMING_PEN_UP:
		// Ensure pen is up
		plotter_pen_up();
 800558c:	f003 fa1e 	bl	80089cc <plotter_pen_up>
		prismatic_axis.command_pos = 0.0f;
 8005590:	4b82      	ldr	r3, [pc, #520]	@ (800579c <update_homing_sequence+0x26c>)
 8005592:	f04f 0200 	mov.w	r2, #0
 8005596:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005598:	4b81      	ldr	r3, [pc, #516]	@ (80057a0 <update_homing_sequence+0x270>)
 800559a:	f04f 0200 	mov.w	r2, #0
 800559e:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer = 0;
 80055a0:	4b80      	ldr	r3, [pc, #512]	@ (80057a4 <update_homing_sequence+0x274>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
		homing_state = HOMING_DELAY_AFTER_PEN_UP;
 80055a6:	4b7c      	ldr	r3, [pc, #496]	@ (8005798 <update_homing_sequence+0x268>)
 80055a8:	2202      	movs	r2, #2
 80055aa:	701a      	strb	r2, [r3, #0]
		break;
 80055ac:	e318      	b.n	8005be0 <update_homing_sequence+0x6b0>

	case HOMING_DELAY_AFTER_PEN_UP:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 80055ae:	4b7b      	ldr	r3, [pc, #492]	@ (800579c <update_homing_sequence+0x26c>)
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 80055b6:	4b7a      	ldr	r3, [pc, #488]	@ (80057a0 <update_homing_sequence+0x270>)
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 80055be:	4b79      	ldr	r3, [pc, #484]	@ (80057a4 <update_homing_sequence+0x274>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3301      	adds	r3, #1
 80055c4:	4a77      	ldr	r2, [pc, #476]	@ (80057a4 <update_homing_sequence+0x274>)
 80055c6:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 80055c8:	4b76      	ldr	r3, [pc, #472]	@ (80057a4 <update_homing_sequence+0x274>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80055d0:	f0c0 82f5 	bcc.w	8005bbe <update_homing_sequence+0x68e>
			// Check if already at low photo sensor
			low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 80055d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80055d8:	4873      	ldr	r0, [pc, #460]	@ (80057a8 <update_homing_sequence+0x278>)
 80055da:	f006 fd37 	bl	800c04c <HAL_GPIO_ReadPin>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	bf14      	ite	ne
 80055e4:	2301      	movne	r3, #1
 80055e6:	2300      	moveq	r3, #0
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	4b70      	ldr	r3, [pc, #448]	@ (80057ac <update_homing_sequence+0x27c>)
 80055ec:	701a      	strb	r2, [r3, #0]
			LOWER_PHOTO_Pin);

			if (low_photo) {
 80055ee:	4b6f      	ldr	r3, [pc, #444]	@ (80057ac <update_homing_sequence+0x27c>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00c      	beq.n	8005612 <update_homing_sequence+0xe2>
				// Already at low photo, skip moving down and go directly to delay
				motion_delay_timer = 0;
 80055f8:	4b6a      	ldr	r3, [pc, #424]	@ (80057a4 <update_homing_sequence+0x274>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 80055fe:	4b66      	ldr	r3, [pc, #408]	@ (8005798 <update_homing_sequence+0x268>)
 8005600:	2204      	movs	r2, #4
 8005602:	701a      	strb	r2, [r3, #0]
				low_photo = false; // Reset flag
 8005604:	4b69      	ldr	r3, [pc, #420]	@ (80057ac <update_homing_sequence+0x27c>)
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
				up_photo = false;  // Reset for next detection
 800560a:	4b69      	ldr	r3, [pc, #420]	@ (80057b0 <update_homing_sequence+0x280>)
 800560c:	2200      	movs	r2, #0
 800560e:	701a      	strb	r2, [r3, #0]
			} else {
				// Not at low photo, need to move down
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
			}
		}
		break;
 8005610:	e2d5      	b.n	8005bbe <update_homing_sequence+0x68e>
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 8005612:	4b61      	ldr	r3, [pc, #388]	@ (8005798 <update_homing_sequence+0x268>)
 8005614:	2203      	movs	r2, #3
 8005616:	701a      	strb	r2, [r3, #0]
		break;
 8005618:	e2d1      	b.n	8005bbe <update_homing_sequence+0x68e>

	case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
		// Move prismatic down at constant velocity
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 800561a:	4b60      	ldr	r3, [pc, #384]	@ (800579c <update_homing_sequence+0x26c>)
 800561c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005620:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 80057b4 <update_homing_sequence+0x284>
 8005624:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
 8005628:	4b5c      	ldr	r3, [pc, #368]	@ (800579c <update_homing_sequence+0x26c>)
 800562a:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 800562e:	4b5b      	ldr	r3, [pc, #364]	@ (800579c <update_homing_sequence+0x26c>)
 8005630:	edd3 7a06 	vldr	s15, [r3, #24]
 8005634:	eeb0 0a67 	vmov.f32	s0, s15
 8005638:	485f      	ldr	r0, [pc, #380]	@ (80057b8 <update_homing_sequence+0x288>)
 800563a:	f7fb fded 	bl	8001218 <PID_CONTROLLER_Compute>
 800563e:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005642:	4b5e      	ldr	r3, [pc, #376]	@ (80057bc <update_homing_sequence+0x28c>)
 8005644:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005648:	4610      	mov	r0, r2
 800564a:	4619      	mov	r1, r3
 800564c:	f7fb fa3a 	bl	8000ac4 <__aeabi_d2iz>
 8005650:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005652:	4b5a      	ldr	r3, [pc, #360]	@ (80057bc <update_homing_sequence+0x28c>)
 8005654:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005658:	613a      	str	r2, [r7, #16]
 800565a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800565e:	617b      	str	r3, [r7, #20]
		prismatic_axis.command_pos = PWM_Satuation(
 8005660:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005664:	f7fb fa2e 	bl	8000ac4 <__aeabi_d2iz>
 8005668:	4603      	mov	r3, r0
 800566a:	4619      	mov	r1, r3
 800566c:	4620      	mov	r0, r4
 800566e:	eeb0 0a48 	vmov.f32	s0, s16
 8005672:	f7fb fd6f 	bl	8001154 <PWM_Satuation>
 8005676:	ee07 0a90 	vmov	s15, r0
 800567a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800567e:	4b47      	ldr	r3, [pc, #284]	@ (800579c <update_homing_sequence+0x26c>)
 8005680:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005684:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005688:	484d      	ldr	r0, [pc, #308]	@ (80057c0 <update_homing_sequence+0x290>)
 800568a:	f7fc f905 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 800568e:	eef0 7a40 	vmov.f32	s15, s0
 8005692:	4b42      	ldr	r3, [pc, #264]	@ (800579c <update_homing_sequence+0x26c>)
 8005694:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005698:	4b4a      	ldr	r3, [pc, #296]	@ (80057c4 <update_homing_sequence+0x294>)
 800569a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 800569e:	4b4a      	ldr	r3, [pc, #296]	@ (80057c8 <update_homing_sequence+0x298>)
 80056a0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80056a4:	ed9f 6a49 	vldr	s12, [pc, #292]	@ 80057cc <update_homing_sequence+0x29c>
 80056a8:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80056ac:	eeb0 1a66 	vmov.f32	s2, s13
 80056b0:	eddf 0a47 	vldr	s1, [pc, #284]	@ 80057d0 <update_homing_sequence+0x2a0>
 80056b4:	eeb0 0a47 	vmov.f32	s0, s14
 80056b8:	4846      	ldr	r0, [pc, #280]	@ (80057d4 <update_homing_sequence+0x2a4>)
 80056ba:	f7fc f995 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 80056be:	eef0 7a40 	vmov.f32	s15, s0
 80056c2:	4b36      	ldr	r3, [pc, #216]	@ (800579c <update_homing_sequence+0x26c>)
 80056c4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80056c8:	4b34      	ldr	r3, [pc, #208]	@ (800579c <update_homing_sequence+0x26c>)
 80056ca:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80056ce:	4b33      	ldr	r3, [pc, #204]	@ (800579c <update_homing_sequence+0x26c>)
 80056d0:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80056d4:	4b31      	ldr	r3, [pc, #196]	@ (800579c <update_homing_sequence+0x26c>)
 80056d6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80056da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056e2:	4b2e      	ldr	r3, [pc, #184]	@ (800579c <update_homing_sequence+0x26c>)
 80056e4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80056e8:	4b2c      	ldr	r3, [pc, #176]	@ (800579c <update_homing_sequence+0x26c>)
 80056ea:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 80056ee:	4b33      	ldr	r3, [pc, #204]	@ (80057bc <update_homing_sequence+0x28c>)
 80056f0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80056f4:	4610      	mov	r0, r2
 80056f6:	4619      	mov	r1, r3
 80056f8:	f7fb f9e4 	bl	8000ac4 <__aeabi_d2iz>
 80056fc:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80056fe:	4b2f      	ldr	r3, [pc, #188]	@ (80057bc <update_homing_sequence+0x28c>)
 8005700:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005704:	60ba      	str	r2, [r7, #8]
 8005706:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800570a:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800570c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005710:	f7fb f9d8 	bl	8000ac4 <__aeabi_d2iz>
 8005714:	4603      	mov	r3, r0
 8005716:	4619      	mov	r1, r3
 8005718:	4620      	mov	r0, r4
 800571a:	eeb0 0a48 	vmov.f32	s0, s16
 800571e:	f7fb fd19 	bl	8001154 <PWM_Satuation>
 8005722:	ee07 0a90 	vmov	s15, r0
 8005726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800572a:	4b1c      	ldr	r3, [pc, #112]	@ (800579c <update_homing_sequence+0x26c>)
 800572c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (low_photo) {
 8005730:	4b1e      	ldr	r3, [pc, #120]	@ (80057ac <update_homing_sequence+0x27c>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 8243 	beq.w	8005bc2 <update_homing_sequence+0x692>
			// Found low photo, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 800573c:	4b17      	ldr	r3, [pc, #92]	@ (800579c <update_homing_sequence+0x26c>)
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005744:	4b16      	ldr	r3, [pc, #88]	@ (80057a0 <update_homing_sequence+0x270>)
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 800574c:	4b15      	ldr	r3, [pc, #84]	@ (80057a4 <update_homing_sequence+0x274>)
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005752:	4b11      	ldr	r3, [pc, #68]	@ (8005798 <update_homing_sequence+0x268>)
 8005754:	2204      	movs	r2, #4
 8005756:	701a      	strb	r2, [r3, #0]
			low_photo = false; // Reset flag after use
 8005758:	4b14      	ldr	r3, [pc, #80]	@ (80057ac <update_homing_sequence+0x27c>)
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
			up_photo = false;  // Reset for next detection
 800575e:	4b14      	ldr	r3, [pc, #80]	@ (80057b0 <update_homing_sequence+0x280>)
 8005760:	2200      	movs	r2, #0
 8005762:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005764:	e22d      	b.n	8005bc2 <update_homing_sequence+0x692>

	case HOMING_DELAY_AFTER_LOW_PHOTO:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005766:	4b0d      	ldr	r3, [pc, #52]	@ (800579c <update_homing_sequence+0x26c>)
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 800576e:	4b0c      	ldr	r3, [pc, #48]	@ (80057a0 <update_homing_sequence+0x270>)
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005776:	4b0b      	ldr	r3, [pc, #44]	@ (80057a4 <update_homing_sequence+0x274>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3301      	adds	r3, #1
 800577c:	4a09      	ldr	r2, [pc, #36]	@ (80057a4 <update_homing_sequence+0x274>)
 800577e:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005780:	4b08      	ldr	r3, [pc, #32]	@ (80057a4 <update_homing_sequence+0x274>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005788:	f0c0 821d 	bcc.w	8005bc6 <update_homing_sequence+0x696>
			homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 800578c:	4b02      	ldr	r3, [pc, #8]	@ (8005798 <update_homing_sequence+0x268>)
 800578e:	2205      	movs	r2, #5
 8005790:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005792:	e218      	b.n	8005bc6 <update_homing_sequence+0x696>
 8005794:	2000036b 	.word	0x2000036b
 8005798:	2000036a 	.word	0x2000036a
 800579c:	20000280 	.word	0x20000280
 80057a0:	200002c4 	.word	0x200002c4
 80057a4:	20000360 	.word	0x20000360
 80057a8:	48000400 	.word	0x48000400
 80057ac:	20000369 	.word	0x20000369
 80057b0:	20000368 	.word	0x20000368
 80057b4:	437a0000 	.word	0x437a0000
 80057b8:	20000578 	.word	0x20000578
 80057bc:	20000080 	.word	0x20000080
 80057c0:	20000618 	.word	0x20000618
 80057c4:	200004f4 	.word	0x200004f4
 80057c8:	20000498 	.word	0x20000498
 80057cc:	447a0000 	.word	0x447a0000
 80057d0:	00000000 	.word	0x00000000
 80057d4:	2000061c 	.word	0x2000061c

	case HOMING_PRIS_UP_TO_UP_PHOTO:
		// Move prismatic up at constant velocity
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 80057d8:	4b96      	ldr	r3, [pc, #600]	@ (8005a34 <update_homing_sequence+0x504>)
 80057da:	edd3 7a07 	vldr	s15, [r3, #28]
 80057de:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 8005a38 <update_homing_sequence+0x508>
 80057e2:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
 80057e6:	4b93      	ldr	r3, [pc, #588]	@ (8005a34 <update_homing_sequence+0x504>)
 80057e8:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 80057ec:	4b91      	ldr	r3, [pc, #580]	@ (8005a34 <update_homing_sequence+0x504>)
 80057ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80057f2:	eeb0 0a67 	vmov.f32	s0, s15
 80057f6:	4891      	ldr	r0, [pc, #580]	@ (8005a3c <update_homing_sequence+0x50c>)
 80057f8:	f7fb fd0e 	bl	8001218 <PID_CONTROLLER_Compute>
 80057fc:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005800:	4b8f      	ldr	r3, [pc, #572]	@ (8005a40 <update_homing_sequence+0x510>)
 8005802:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005806:	4610      	mov	r0, r2
 8005808:	4619      	mov	r1, r3
 800580a:	f7fb f95b 	bl	8000ac4 <__aeabi_d2iz>
 800580e:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005810:	4b8b      	ldr	r3, [pc, #556]	@ (8005a40 <update_homing_sequence+0x510>)
 8005812:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005816:	603a      	str	r2, [r7, #0]
 8005818:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800581c:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_pos = PWM_Satuation(
 800581e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005822:	f7fb f94f 	bl	8000ac4 <__aeabi_d2iz>
 8005826:	4603      	mov	r3, r0
 8005828:	4619      	mov	r1, r3
 800582a:	4620      	mov	r0, r4
 800582c:	eeb0 0a48 	vmov.f32	s0, s16
 8005830:	f7fb fc90 	bl	8001154 <PWM_Satuation>
 8005834:	ee07 0a90 	vmov	s15, r0
 8005838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800583c:	4b7d      	ldr	r3, [pc, #500]	@ (8005a34 <update_homing_sequence+0x504>)
 800583e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005842:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 8005846:	487f      	ldr	r0, [pc, #508]	@ (8005a44 <update_homing_sequence+0x514>)
 8005848:	f7fc f826 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 800584c:	eef0 7a40 	vmov.f32	s15, s0
 8005850:	4b78      	ldr	r3, [pc, #480]	@ (8005a34 <update_homing_sequence+0x504>)
 8005852:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005856:	4b7c      	ldr	r3, [pc, #496]	@ (8005a48 <update_homing_sequence+0x518>)
 8005858:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 800585c:	4b7b      	ldr	r3, [pc, #492]	@ (8005a4c <update_homing_sequence+0x51c>)
 800585e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005862:	ed9f 6a7b 	vldr	s12, [pc, #492]	@ 8005a50 <update_homing_sequence+0x520>
 8005866:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800586a:	eeb0 1a66 	vmov.f32	s2, s13
 800586e:	eddf 0a79 	vldr	s1, [pc, #484]	@ 8005a54 <update_homing_sequence+0x524>
 8005872:	eeb0 0a47 	vmov.f32	s0, s14
 8005876:	4878      	ldr	r0, [pc, #480]	@ (8005a58 <update_homing_sequence+0x528>)
 8005878:	f7fc f8b6 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 800587c:	eef0 7a40 	vmov.f32	s15, s0
 8005880:	4b6c      	ldr	r3, [pc, #432]	@ (8005a34 <update_homing_sequence+0x504>)
 8005882:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005886:	4b6b      	ldr	r3, [pc, #428]	@ (8005a34 <update_homing_sequence+0x504>)
 8005888:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800588c:	4b69      	ldr	r3, [pc, #420]	@ (8005a34 <update_homing_sequence+0x504>)
 800588e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005892:	4b68      	ldr	r3, [pc, #416]	@ (8005a34 <update_homing_sequence+0x504>)
 8005894:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800589c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058a0:	4b64      	ldr	r3, [pc, #400]	@ (8005a34 <update_homing_sequence+0x504>)
 80058a2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80058a6:	4b63      	ldr	r3, [pc, #396]	@ (8005a34 <update_homing_sequence+0x504>)
 80058a8:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 80058ac:	4b64      	ldr	r3, [pc, #400]	@ (8005a40 <update_homing_sequence+0x510>)
 80058ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	f7fb f905 	bl	8000ac4 <__aeabi_d2iz>
 80058ba:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80058bc:	4b60      	ldr	r3, [pc, #384]	@ (8005a40 <update_homing_sequence+0x510>)
 80058be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80058c2:	4692      	mov	sl, r2
 80058c4:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80058c8:	4650      	mov	r0, sl
 80058ca:	4659      	mov	r1, fp
 80058cc:	f7fb f8fa 	bl	8000ac4 <__aeabi_d2iz>
 80058d0:	4603      	mov	r3, r0
 80058d2:	4619      	mov	r1, r3
 80058d4:	4620      	mov	r0, r4
 80058d6:	eeb0 0a48 	vmov.f32	s0, s16
 80058da:	f7fb fc3b 	bl	8001154 <PWM_Satuation>
 80058de:	ee07 0a90 	vmov	s15, r0
 80058e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058e6:	4b53      	ldr	r3, [pc, #332]	@ (8005a34 <update_homing_sequence+0x504>)
 80058e8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (up_photo) {
 80058ec:	4b5b      	ldr	r3, [pc, #364]	@ (8005a5c <update_homing_sequence+0x52c>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f000 8169 	beq.w	8005bca <update_homing_sequence+0x69a>
			// Found up photo, stop and start delay before backup
			prismatic_axis.command_pos = 0.0f;
 80058f8:	4b4e      	ldr	r3, [pc, #312]	@ (8005a34 <update_homing_sequence+0x504>)
 80058fa:	f04f 0200 	mov.w	r2, #0
 80058fe:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005900:	4b57      	ldr	r3, [pc, #348]	@ (8005a60 <update_homing_sequence+0x530>)
 8005902:	f04f 0200 	mov.w	r2, #0
 8005906:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005908:	4b56      	ldr	r3, [pc, #344]	@ (8005a64 <update_homing_sequence+0x534>)
 800590a:	2200      	movs	r2, #0
 800590c:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 800590e:	4b56      	ldr	r3, [pc, #344]	@ (8005a68 <update_homing_sequence+0x538>)
 8005910:	2206      	movs	r2, #6
 8005912:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag after use
 8005914:	4b51      	ldr	r3, [pc, #324]	@ (8005a5c <update_homing_sequence+0x52c>)
 8005916:	2200      	movs	r2, #0
 8005918:	701a      	strb	r2, [r3, #0]
		}
		break;
 800591a:	e156      	b.n	8005bca <update_homing_sequence+0x69a>

	case HOMING_DELAY_AFTER_UP_PHOTO:
		// Stop motors and wait before starting backup procedure
		prismatic_axis.command_pos = 0.0f;
 800591c:	4b45      	ldr	r3, [pc, #276]	@ (8005a34 <update_homing_sequence+0x504>)
 800591e:	f04f 0200 	mov.w	r2, #0
 8005922:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005924:	4b4e      	ldr	r3, [pc, #312]	@ (8005a60 <update_homing_sequence+0x530>)
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 800592c:	4b4d      	ldr	r3, [pc, #308]	@ (8005a64 <update_homing_sequence+0x534>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	4a4c      	ldr	r2, [pc, #304]	@ (8005a64 <update_homing_sequence+0x534>)
 8005934:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005936:	4b4b      	ldr	r3, [pc, #300]	@ (8005a64 <update_homing_sequence+0x534>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800593e:	f0c0 8146 	bcc.w	8005bce <update_homing_sequence+0x69e>
			if (first_startup) {
 8005942:	4b4a      	ldr	r3, [pc, #296]	@ (8005a6c <update_homing_sequence+0x53c>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d01d      	beq.n	8005986 <update_homing_sequence+0x456>
				// STARTUP: Check if prox is already detected before searching
				bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 800594a:	2140      	movs	r1, #64	@ 0x40
 800594c:	4848      	ldr	r0, [pc, #288]	@ (8005a70 <update_homing_sequence+0x540>)
 800594e:	f006 fb7d 	bl	800c04c <HAL_GPIO_ReadPin>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	bf14      	ite	ne
 8005958:	2301      	movne	r3, #1
 800595a:	2300      	moveq	r3, #0
 800595c:	77fb      	strb	r3, [r7, #31]

				if (prox_detected) {
 800595e:	7ffb      	ldrb	r3, [r7, #31]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d009      	beq.n	8005978 <update_homing_sequence+0x448>
					// Already at prox - skip search and go to completion
					motion_delay_timer = 0;
 8005964:	4b3f      	ldr	r3, [pc, #252]	@ (8005a64 <update_homing_sequence+0x534>)
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
					homing_state = HOMING_DELAY_AFTER_PROX;
 800596a:	4b3f      	ldr	r3, [pc, #252]	@ (8005a68 <update_homing_sequence+0x538>)
 800596c:	220a      	movs	r2, #10
 800596e:	701a      	strb	r2, [r3, #0]
					prox_count = 1; // Set count to indicate prox found
 8005970:	4b40      	ldr	r3, [pc, #256]	@ (8005a74 <update_homing_sequence+0x544>)
 8005972:	2201      	movs	r2, #1
 8005974:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_REV_TO_ZERO_DEG;
				// Initialize trajectory variables for zero degree movement
				rev_to_zero_trajectory_started = false;
			}
		}
		break;
 8005976:	e12a      	b.n	8005bce <update_homing_sequence+0x69e>
					homing_state = HOMING_REV_CW_TO_PROX1;
 8005978:	4b3b      	ldr	r3, [pc, #236]	@ (8005a68 <update_homing_sequence+0x538>)
 800597a:	2209      	movs	r2, #9
 800597c:	701a      	strb	r2, [r3, #0]
					prox_count = 0; // Reset prox counter
 800597e:	4b3d      	ldr	r3, [pc, #244]	@ (8005a74 <update_homing_sequence+0x544>)
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]
		break;
 8005984:	e123      	b.n	8005bce <update_homing_sequence+0x69e>
				homing_state = HOMING_REV_TO_ZERO_DEG;
 8005986:	4b38      	ldr	r3, [pc, #224]	@ (8005a68 <update_homing_sequence+0x538>)
 8005988:	2207      	movs	r2, #7
 800598a:	701a      	strb	r2, [r3, #0]
				rev_to_zero_trajectory_started = false;
 800598c:	4b3a      	ldr	r3, [pc, #232]	@ (8005a78 <update_homing_sequence+0x548>)
 800598e:	2200      	movs	r2, #0
 8005990:	701a      	strb	r2, [r3, #0]
		break;
 8005992:	e11c      	b.n	8005bce <update_homing_sequence+0x69e>

	case HOMING_REV_TO_ZERO_DEG:
		if (!rev_to_zero_trajectory_started) {
 8005994:	4b38      	ldr	r3, [pc, #224]	@ (8005a78 <update_homing_sequence+0x548>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f083 0301 	eor.w	r3, r3, #1
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d00b      	beq.n	80059ba <update_homing_sequence+0x48a>
			// Get current prismatic position (keep it where it is)
			float current_pris_pos = prismatic_encoder.mm;
 80059a2:	4b2a      	ldr	r3, [pc, #168]	@ (8005a4c <update_homing_sequence+0x51c>)
 80059a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059a6:	623b      	str	r3, [r7, #32]

			// Start combined trajectory to move revolute to 0° while keeping prismatic position
			start_combined_trajectory(current_pris_pos, 0.0f);
 80059a8:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8005a54 <update_homing_sequence+0x524>
 80059ac:	ed97 0a08 	vldr	s0, [r7, #32]
 80059b0:	f000 fa16 	bl	8005de0 <start_combined_trajectory>

			rev_to_zero_trajectory_started = true;
 80059b4:	4b30      	ldr	r3, [pc, #192]	@ (8005a78 <update_homing_sequence+0x548>)
 80059b6:	2201      	movs	r2, #1
 80059b8:	701a      	strb	r2, [r3, #0]
		}

		// Wait for trajectory to complete
		if (motion_sequence_state == MOTION_IDLE) {
 80059ba:	4b30      	ldr	r3, [pc, #192]	@ (8005a7c <update_homing_sequence+0x54c>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f040 8107 	bne.w	8005bd2 <update_homing_sequence+0x6a2>
			// Trajectory completed, move to next homing state
			motion_delay_timer = 0;
 80059c4:	4b27      	ldr	r3, [pc, #156]	@ (8005a64 <update_homing_sequence+0x534>)
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 80059ca:	4b27      	ldr	r3, [pc, #156]	@ (8005a68 <update_homing_sequence+0x538>)
 80059cc:	2208      	movs	r2, #8
 80059ce:	701a      	strb	r2, [r3, #0]
			prox_count = 0; // Reset prox counter for next stage
 80059d0:	4b28      	ldr	r3, [pc, #160]	@ (8005a74 <update_homing_sequence+0x544>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
			rev_to_zero_trajectory_started = false; // Reset for next time
 80059d6:	4b28      	ldr	r3, [pc, #160]	@ (8005a78 <update_homing_sequence+0x548>)
 80059d8:	2200      	movs	r2, #0
 80059da:	701a      	strb	r2, [r3, #0]
		}
		break;
 80059dc:	e0f9      	b.n	8005bd2 <update_homing_sequence+0x6a2>

	case HOMING_DELAY_AFTER_ZERO_DEG:
		// Stop motors and wait - let normal control handle this
		motion_delay_timer++;
 80059de:	4b21      	ldr	r3, [pc, #132]	@ (8005a64 <update_homing_sequence+0x534>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3301      	adds	r3, #1
 80059e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005a64 <update_homing_sequence+0x534>)
 80059e6:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 80059e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005a64 <update_homing_sequence+0x534>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80059f0:	f0c0 80f1 	bcc.w	8005bd6 <update_homing_sequence+0x6a6>
			// CHECK IF PROX IS ALREADY DETECTED BEFORE STARTING SEARCH
			bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 80059f4:	2140      	movs	r1, #64	@ 0x40
 80059f6:	481e      	ldr	r0, [pc, #120]	@ (8005a70 <update_homing_sequence+0x540>)
 80059f8:	f006 fb28 	bl	800c04c <HAL_GPIO_ReadPin>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	bf14      	ite	ne
 8005a02:	2301      	movne	r3, #1
 8005a04:	2300      	moveq	r3, #0
 8005a06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			if (prox_detected) {
 8005a0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d009      	beq.n	8005a26 <update_homing_sequence+0x4f6>
				// Already at proximity sensor - skip search and go directly to completion
				motion_delay_timer = 0;
 8005a12:	4b14      	ldr	r3, [pc, #80]	@ (8005a64 <update_homing_sequence+0x534>)
 8005a14:	2200      	movs	r2, #0
 8005a16:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_PROX;
 8005a18:	4b13      	ldr	r3, [pc, #76]	@ (8005a68 <update_homing_sequence+0x538>)
 8005a1a:	220a      	movs	r2, #10
 8005a1c:	701a      	strb	r2, [r3, #0]
				prox_count = 1; // Set count to indicate prox found
 8005a1e:	4b15      	ldr	r3, [pc, #84]	@ (8005a74 <update_homing_sequence+0x544>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	601a      	str	r2, [r3, #0]
				// Not at prox - need to search for it
				homing_state = HOMING_REV_CW_TO_PROX1;
				prox_count = 0; // Reset counter for search
			}
		}
		break;
 8005a24:	e0d7      	b.n	8005bd6 <update_homing_sequence+0x6a6>
				homing_state = HOMING_REV_CW_TO_PROX1;
 8005a26:	4b10      	ldr	r3, [pc, #64]	@ (8005a68 <update_homing_sequence+0x538>)
 8005a28:	2209      	movs	r2, #9
 8005a2a:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset counter for search
 8005a2c:	4b11      	ldr	r3, [pc, #68]	@ (8005a74 <update_homing_sequence+0x544>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
		break;
 8005a32:	e0d0      	b.n	8005bd6 <update_homing_sequence+0x6a6>
 8005a34:	20000280 	.word	0x20000280
 8005a38:	c37a0000 	.word	0xc37a0000
 8005a3c:	20000578 	.word	0x20000578
 8005a40:	20000080 	.word	0x20000080
 8005a44:	20000618 	.word	0x20000618
 8005a48:	200004f4 	.word	0x200004f4
 8005a4c:	20000498 	.word	0x20000498
 8005a50:	447a0000 	.word	0x447a0000
 8005a54:	00000000 	.word	0x00000000
 8005a58:	2000061c 	.word	0x2000061c
 8005a5c:	20000368 	.word	0x20000368
 8005a60:	200002c4 	.word	0x200002c4
 8005a64:	20000360 	.word	0x20000360
 8005a68:	2000036a 	.word	0x2000036a
 8005a6c:	20000133 	.word	0x20000133
 8005a70:	48000400 	.word	0x48000400
 8005a74:	20000364 	.word	0x20000364
 8005a78:	20000376 	.word	0x20000376
 8005a7c:	20000308 	.word	0x20000308

	case HOMING_REV_CW_TO_PROX1:
		// Move revolute clockwise with velocity control until prox count = 1
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
				- revolute_axis.kalman_velocity;
 8005a80:	4b5a      	ldr	r3, [pc, #360]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005a82:	edd3 7a07 	vldr	s15, [r3, #28]
 8005a86:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8005a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
 8005a8e:	4b57      	ldr	r3, [pc, #348]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005a90:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8005a94:	4b55      	ldr	r3, [pc, #340]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005a96:	edd3 7a06 	vldr	s15, [r3, #24]
 8005a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a9e:	4854      	ldr	r0, [pc, #336]	@ (8005bf0 <update_homing_sequence+0x6c0>)
 8005aa0:	f7fb fbba 	bl	8001218 <PID_CONTROLLER_Compute>
 8005aa4:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8005aa8:	4b52      	ldr	r3, [pc, #328]	@ (8005bf4 <update_homing_sequence+0x6c4>)
 8005aaa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8005aae:	4610      	mov	r0, r2
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f7fb f807 	bl	8000ac4 <__aeabi_d2iz>
 8005ab6:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8005ab8:	4b4e      	ldr	r3, [pc, #312]	@ (8005bf4 <update_homing_sequence+0x6c4>)
 8005aba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005abe:	4690      	mov	r8, r2
 8005ac0:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(
 8005ac4:	4640      	mov	r0, r8
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	f7fa fffc 	bl	8000ac4 <__aeabi_d2iz>
 8005acc:	4603      	mov	r3, r0
 8005ace:	4619      	mov	r1, r3
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	eeb0 0a48 	vmov.f32	s0, s16
 8005ad6:	f7fb fb3d 	bl	8001154 <PWM_Satuation>
 8005ada:	ee07 0a90 	vmov	s15, r0
 8005ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ae2:	4b42      	ldr	r3, [pc, #264]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005ae4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005ae8:	eeb8 0a00 	vmov.f32	s0, #128	@ 0xc0000000 -2.0
 8005aec:	4842      	ldr	r0, [pc, #264]	@ (8005bf8 <update_homing_sequence+0x6c8>)
 8005aee:	f7fb fd53 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8005af2:	eef0 7a40 	vmov.f32	s15, s0
 8005af6:	4b3d      	ldr	r3, [pc, #244]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005af8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_REV_VELOCITY);
		revolute_axis.dfd = 0.0;
 8005afc:	4b3b      	ldr	r3, [pc, #236]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005afe:	f04f 0200 	mov.w	r2, #0
 8005b02:	62da      	str	r2, [r3, #44]	@ 0x2c

	    revolute_axis.command_pos += revolute_axis.ffd;
 8005b04:	4b39      	ldr	r3, [pc, #228]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005b06:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005b0a:	4b38      	ldr	r3, [pc, #224]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005b0c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b14:	4b35      	ldr	r3, [pc, #212]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005b16:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005b1a:	4b34      	ldr	r3, [pc, #208]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005b1c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_150RPM_Constant.U_max,
 8005b20:	4b34      	ldr	r3, [pc, #208]	@ (8005bf4 <update_homing_sequence+0x6c4>)
 8005b22:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005b26:	4610      	mov	r0, r2
 8005b28:	4619      	mov	r1, r3
 8005b2a:	f7fa ffcb 	bl	8000ac4 <__aeabi_d2iz>
 8005b2e:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8005b30:	4b30      	ldr	r3, [pc, #192]	@ (8005bf4 <update_homing_sequence+0x6c4>)
 8005b32:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005b36:	4614      	mov	r4, r2
 8005b38:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	4629      	mov	r1, r5
 8005b40:	f7fa ffc0 	bl	8000ac4 <__aeabi_d2iz>
 8005b44:	4603      	mov	r3, r0
 8005b46:	4619      	mov	r1, r3
 8005b48:	4630      	mov	r0, r6
 8005b4a:	eeb0 0a48 	vmov.f32	s0, s16
 8005b4e:	f7fb fb01 	bl	8001154 <PWM_Satuation>
 8005b52:	ee07 0a90 	vmov	s15, r0
 8005b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b5a:	4b24      	ldr	r3, [pc, #144]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005b5c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (prox_count >= 1) {
 8005b60:	4b26      	ldr	r3, [pc, #152]	@ (8005bfc <update_homing_sequence+0x6cc>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d038      	beq.n	8005bda <update_homing_sequence+0x6aa>
			// Found prox sensor, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005b68:	4b25      	ldr	r3, [pc, #148]	@ (8005c00 <update_homing_sequence+0x6d0>)
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005b70:	4b1e      	ldr	r3, [pc, #120]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005b72:	f04f 0200 	mov.w	r2, #0
 8005b76:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005b78:	4b22      	ldr	r3, [pc, #136]	@ (8005c04 <update_homing_sequence+0x6d4>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_PROX;
 8005b7e:	4b22      	ldr	r3, [pc, #136]	@ (8005c08 <update_homing_sequence+0x6d8>)
 8005b80:	220a      	movs	r2, #10
 8005b82:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005b84:	e029      	b.n	8005bda <update_homing_sequence+0x6aa>

	case HOMING_DELAY_AFTER_PROX:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005b86:	4b1e      	ldr	r3, [pc, #120]	@ (8005c00 <update_homing_sequence+0x6d0>)
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005b8e:	4b17      	ldr	r3, [pc, #92]	@ (8005bec <update_homing_sequence+0x6bc>)
 8005b90:	f04f 0200 	mov.w	r2, #0
 8005b94:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005b96:	4b1b      	ldr	r3, [pc, #108]	@ (8005c04 <update_homing_sequence+0x6d4>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	4a19      	ldr	r2, [pc, #100]	@ (8005c04 <update_homing_sequence+0x6d4>)
 8005b9e:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005ba0:	4b18      	ldr	r3, [pc, #96]	@ (8005c04 <update_homing_sequence+0x6d4>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005ba8:	d319      	bcc.n	8005bde <update_homing_sequence+0x6ae>
			homing_state = HOMING_COMPLETE;
 8005baa:	4b17      	ldr	r3, [pc, #92]	@ (8005c08 <update_homing_sequence+0x6d8>)
 8005bac:	220b      	movs	r2, #11
 8005bae:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005bb0:	e015      	b.n	8005bde <update_homing_sequence+0x6ae>

	case HOMING_COMPLETE:
		NVIC_SystemReset();
 8005bb2:	f7ff fb0f 	bl	80051d4 <__NVIC_SystemReset>
		return;
 8005bb6:	bf00      	nop
 8005bb8:	e012      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;

	case HOMING_IDLE:
	default:
		break;
 8005bba:	bf00      	nop
 8005bbc:	e010      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bbe:	bf00      	nop
 8005bc0:	e00e      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bc2:	bf00      	nop
 8005bc4:	e00c      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bc6:	bf00      	nop
 8005bc8:	e00a      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bca:	bf00      	nop
 8005bcc:	e008      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bce:	bf00      	nop
 8005bd0:	e006      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bd2:	bf00      	nop
 8005bd4:	e004      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bd6:	bf00      	nop
 8005bd8:	e002      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bda:	bf00      	nop
 8005bdc:	e000      	b.n	8005be0 <update_homing_sequence+0x6b0>
		break;
 8005bde:	bf00      	nop
	}
}
 8005be0:	372c      	adds	r7, #44	@ 0x2c
 8005be2:	46bd      	mov	sp, r7
 8005be4:	ecbd 8b02 	vpop	{d8}
 8005be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bec:	200002c4 	.word	0x200002c4
 8005bf0:	200005c8 	.word	0x200005c8
 8005bf4:	20000000 	.word	0x20000000
 8005bf8:	20000624 	.word	0x20000624
 8005bfc:	20000364 	.word	0x20000364
 8005c00:	20000280 	.word	0x20000280
 8005c04:	20000360 	.word	0x20000360
 8005c08:	2000036a 	.word	0x2000036a

08005c0c <normalize_angle>:

float normalize_angle(float angle_rad) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8005c16:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8005c54 <normalize_angle+0x48>
 8005c1a:	ed97 0a01 	vldr	s0, [r7, #4]
 8005c1e:	f00c f867 	bl	8011cf0 <fmodf>
 8005c22:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 8005c26:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c32:	d507      	bpl.n	8005c44 <normalize_angle+0x38>
		result += 2.0f * PI;
 8005c34:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c38:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005c54 <normalize_angle+0x48>
 8005c3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c40:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	ee07 3a90 	vmov	s15, r3
}
 8005c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40c90fdb 	.word	0x40c90fdb

08005c58 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005c62:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 8005c66:	f04f 0300 	mov.w	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 8005c6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c70:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005dd4 <calculate_movement_deg+0x17c>
 8005c74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c7c:	d508      	bpl.n	8005c90 <calculate_movement_deg+0x38>
 8005c7e:	edd7 7a00 	vldr	s15, [r7]
 8005c82:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8005dd4 <calculate_movement_deg+0x17c>
 8005c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8e:	d411      	bmi.n	8005cb4 <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 8005c90:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c94:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8005dd4 <calculate_movement_deg+0x17c>
 8005c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca0:	db33      	blt.n	8005d0a <calculate_movement_deg+0xb2>
 8005ca2:	edd7 7a00 	vldr	s15, [r7]
 8005ca6:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8005dd4 <calculate_movement_deg+0x17c>
 8005caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb2:	db2a      	blt.n	8005d0a <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 8005cb4:	ed97 7a00 	vldr	s14, [r7]
 8005cb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cc0:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 8005cc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cc8:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8005dd4 <calculate_movement_deg+0x17c>
 8005ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd4:	dd07      	ble.n	8005ce6 <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 8005cd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cda:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8005dd8 <calculate_movement_deg+0x180>
 8005cde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ce2:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8005ce6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cea:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8005ddc <calculate_movement_deg+0x184>
 8005cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf6:	d562      	bpl.n	8005dbe <calculate_movement_deg+0x166>
			movement += 360.0f;
 8005cf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cfc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005dd8 <calculate_movement_deg+0x180>
 8005d00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d04:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8005d08:	e059      	b.n	8005dbe <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 8005d0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d0e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005dd4 <calculate_movement_deg+0x17c>
 8005d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d1a:	d52a      	bpl.n	8005d72 <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8005d1c:	edd7 7a00 	vldr	s15, [r7]
 8005d20:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8005dd4 <calculate_movement_deg+0x17c>
 8005d24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d28:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d34:	d50e      	bpl.n	8005d54 <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 8005d36:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005dd8 <calculate_movement_deg+0x180>
 8005d3a:	edd7 7a00 	vldr	s15, [r7]
 8005d3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d42:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d4a:	eef1 7a67 	vneg.f32	s15, s15
 8005d4e:	edc7 7a03 	vstr	s15, [r7, #12]
 8005d52:	e034      	b.n	8005dbe <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 8005d54:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d58:	edd7 7a00 	vldr	s15, [r7]
 8005d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d60:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005dd8 <calculate_movement_deg+0x180>
 8005d64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d68:	eef1 7a67 	vneg.f32	s15, s15
 8005d6c:	edc7 7a03 	vstr	s15, [r7, #12]
 8005d70:	e025      	b.n	8005dbe <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 8005d72:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d76:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005dd4 <calculate_movement_deg+0x17c>
 8005d7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d7e:	ed97 7a00 	vldr	s14, [r7]
 8005d82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8a:	d50c      	bpl.n	8005da6 <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 8005d8c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8005dd8 <calculate_movement_deg+0x180>
 8005d90:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d98:	ed97 7a00 	vldr	s14, [r7]
 8005d9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005da0:	edc7 7a03 	vstr	s15, [r7, #12]
 8005da4:	e00b      	b.n	8005dbe <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 8005da6:	ed97 7a00 	vldr	s14, [r7]
 8005daa:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005db2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8005dd8 <calculate_movement_deg+0x180>
 8005db6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dba:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	ee07 3a90 	vmov	s15, r3
}
 8005dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	43340000 	.word	0x43340000
 8005dd8:	43b40000 	.word	0x43b40000
 8005ddc:	c3340000 	.word	0xc3340000

08005de0 <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm, float revolute_target_deg) {
 8005de0:	b590      	push	{r4, r7, lr}
 8005de2:	ed2d 8b02 	vpush	{d8}
 8005de6:	b08b      	sub	sp, #44	@ 0x2c
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	ed87 0a01 	vstr	s0, [r7, #4]
 8005dee:	edc7 0a00 	vstr	s1, [r7]
    bool allow_during_homing = (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG);
 8005df2:	4b85      	ldr	r3, [pc, #532]	@ (8006008 <start_combined_trajectory+0x228>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <start_combined_trajectory+0x26>
 8005dfa:	4b84      	ldr	r3, [pc, #528]	@ (800600c <start_combined_trajectory+0x22c>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b07      	cmp	r3, #7
 8005e00:	d101      	bne.n	8005e06 <start_combined_trajectory+0x26>
 8005e02:	2301      	movs	r3, #1
 8005e04:	e000      	b.n	8005e08 <start_combined_trajectory+0x28>
 8005e06:	2300      	movs	r3, #0
 8005e08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (is_emergency_active() || (homing_active && !allow_during_homing)) {
 8005e18:	f000 ffa2 	bl	8006d60 <is_emergency_active>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f040 80eb 	bne.w	8005ffa <start_combined_trajectory+0x21a>
 8005e24:	4b78      	ldr	r3, [pc, #480]	@ (8006008 <start_combined_trajectory+0x228>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <start_combined_trajectory+0x5c>
 8005e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e30:	f083 0301 	eor.w	r3, r3, #1
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f040 80df 	bne.w	8005ffa <start_combined_trajectory+0x21a>
        return;
    }

    float pris_current = prismatic_encoder.mm;
 8005e3c:	4b74      	ldr	r3, [pc, #464]	@ (8006010 <start_combined_trajectory+0x230>)
 8005e3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e40:	623b      	str	r3, [r7, #32]
    float rev_current = revolute_encoder.rads;
 8005e42:	4b74      	ldr	r3, [pc, #464]	@ (8006014 <start_combined_trajectory+0x234>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e46:	61fb      	str	r3, [r7, #28]

    prisEva.t = 0.0f;
 8005e48:	4b73      	ldr	r3, [pc, #460]	@ (8006018 <start_combined_trajectory+0x238>)
 8005e4a:	f04f 0200 	mov.w	r2, #0
 8005e4e:	60da      	str	r2, [r3, #12]
    prisEva.isFinised = false;
 8005e50:	4b71      	ldr	r3, [pc, #452]	@ (8006018 <start_combined_trajectory+0x238>)
 8005e52:	2200      	movs	r2, #0
 8005e54:	741a      	strb	r2, [r3, #16]
    revEva.t = 0.0f;
 8005e56:	4b71      	ldr	r3, [pc, #452]	@ (800601c <start_combined_trajectory+0x23c>)
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	60da      	str	r2, [r3, #12]
    revEva.isFinised = false;
 8005e5e:	4b6f      	ldr	r3, [pc, #444]	@ (800601c <start_combined_trajectory+0x23c>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	741a      	strb	r2, [r3, #16]

    prismatic_axis.initial_pos = pris_current;
 8005e64:	4a6e      	ldr	r2, [pc, #440]	@ (8006020 <start_combined_trajectory+0x240>)
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	60d3      	str	r3, [r2, #12]
    revolute_axis.initial_pos = rev_current;
 8005e6a:	4a6e      	ldr	r2, [pc, #440]	@ (8006024 <start_combined_trajectory+0x244>)
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	60d3      	str	r3, [r2, #12]

    prismatic_axis.target_pos = fminf(fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS), PRISMATIC_MAX_POS);
 8005e70:	eddf 0a6d 	vldr	s1, [pc, #436]	@ 8006028 <start_combined_trajectory+0x248>
 8005e74:	ed97 0a01 	vldr	s0, [r7, #4]
 8005e78:	f00c f802 	bl	8011e80 <fmaxf>
 8005e7c:	eef0 7a40 	vmov.f32	s15, s0
 8005e80:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 800602c <start_combined_trajectory+0x24c>
 8005e84:	eeb0 0a67 	vmov.f32	s0, s15
 8005e88:	f00c f817 	bl	8011eba <fminf>
 8005e8c:	eef0 7a40 	vmov.f32	s15, s0
 8005e90:	4b63      	ldr	r3, [pc, #396]	@ (8006020 <start_combined_trajectory+0x240>)
 8005e92:	edc3 7a04 	vstr	s15, [r3, #16]

    float normalized_current = normalize_angle(rev_current);
 8005e96:	ed97 0a07 	vldr	s0, [r7, #28]
 8005e9a:	f7ff feb7 	bl	8005c0c <normalize_angle>
 8005e9e:	ed87 0a06 	vstr	s0, [r7, #24]
    float current_deg = normalized_current * 180.0f / PI;
 8005ea2:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ea6:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8006030 <start_combined_trajectory+0x250>
 8005eaa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005eae:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8006034 <start_combined_trajectory+0x254>
 8005eb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005eb6:	edc7 7a05 	vstr	s15, [r7, #20]
    movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 8005eba:	edd7 0a00 	vldr	s1, [r7]
 8005ebe:	ed97 0a05 	vldr	s0, [r7, #20]
 8005ec2:	f7ff fec9 	bl	8005c58 <calculate_movement_deg>
 8005ec6:	eef0 7a40 	vmov.f32	s15, s0
 8005eca:	4b5b      	ldr	r3, [pc, #364]	@ (8006038 <start_combined_trajectory+0x258>)
 8005ecc:	edc3 7a00 	vstr	s15, [r3]
    float movement_rad = movement_deg * PI / 180.0f;
 8005ed0:	4b59      	ldr	r3, [pc, #356]	@ (8006038 <start_combined_trajectory+0x258>)
 8005ed2:	edd3 7a00 	vldr	s15, [r3]
 8005ed6:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8006034 <start_combined_trajectory+0x254>
 8005eda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ede:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8006030 <start_combined_trajectory+0x250>
 8005ee2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ee6:	edc7 7a04 	vstr	s15, [r7, #16]
    revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 8005eea:	4b4e      	ldr	r3, [pc, #312]	@ (8006024 <start_combined_trajectory+0x244>)
 8005eec:	ed93 7a03 	vldr	s14, [r3, #12]
 8005ef0:	edd7 7a04 	vldr	s15, [r7, #16]
 8005ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ef8:	4b4a      	ldr	r3, [pc, #296]	@ (8006024 <start_combined_trajectory+0x244>)
 8005efa:	edc3 7a04 	vstr	s15, [r3, #16]

    // Check if we're in HOMING_REV_TO_ZERO_DEG mode
    bool is_homing_zero_deg = (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG);
 8005efe:	4b42      	ldr	r3, [pc, #264]	@ (8006008 <start_combined_trajectory+0x228>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d005      	beq.n	8005f12 <start_combined_trajectory+0x132>
 8005f06:	4b41      	ldr	r3, [pc, #260]	@ (800600c <start_combined_trajectory+0x22c>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b07      	cmp	r3, #7
 8005f0c:	d101      	bne.n	8005f12 <start_combined_trajectory+0x132>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e000      	b.n	8005f14 <start_combined_trajectory+0x134>
 8005f12:	2300      	movs	r3, #0
 8005f14:	73fb      	strb	r3, [r7, #15]
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	73fb      	strb	r3, [r7, #15]

    if (is_homing_zero_deg) {
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d038      	beq.n	8005f96 <start_combined_trajectory+0x1b6>
        // HOMING_REV_TO_ZERO_DEG: Only generate revolute trajectory, skip prismatic

        // Don't generate prismatic trajectory at all
        prismatic_axis.trajectory_active = false;
 8005f24:	4b3e      	ldr	r3, [pc, #248]	@ (8006020 <start_combined_trajectory+0x240>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        prismatic_axis.position = pris_current;  // Hold current position
 8005f2c:	4a3c      	ldr	r2, [pc, #240]	@ (8006020 <start_combined_trajectory+0x240>)
 8005f2e:	6a3b      	ldr	r3, [r7, #32]
 8005f30:	6013      	str	r3, [r2, #0]
        prismatic_axis.velocity = 0.0f;
 8005f32:	4b3b      	ldr	r3, [pc, #236]	@ (8006020 <start_combined_trajectory+0x240>)
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	605a      	str	r2, [r3, #4]

        // Only generate revolute trajectory
        Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8005f3a:	4b3a      	ldr	r3, [pc, #232]	@ (8006024 <start_combined_trajectory+0x244>)
 8005f3c:	ed93 8a03 	vldr	s16, [r3, #12]
 8005f40:	4b38      	ldr	r3, [pc, #224]	@ (8006024 <start_combined_trajectory+0x244>)
 8005f42:	edd3 8a04 	vldr	s17, [r3, #16]
                revolute_axis.target_pos,
                ZGX45RGG_150RPM_Constant.traject_qd_max,
 8005f46:	4b3d      	ldr	r3, [pc, #244]	@ (800603c <start_combined_trajectory+0x25c>)
 8005f48:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
        Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8005f4c:	4610      	mov	r0, r2
 8005f4e:	4619      	mov	r1, r3
 8005f50:	f7fa fe00 	bl	8000b54 <__aeabi_d2f>
 8005f54:	4604      	mov	r4, r0
                ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8005f56:	4b39      	ldr	r3, [pc, #228]	@ (800603c <start_combined_trajectory+0x25c>)
 8005f58:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
        Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	4619      	mov	r1, r3
 8005f60:	f7fa fdf8 	bl	8000b54 <__aeabi_d2f>
 8005f64:	4603      	mov	r3, r0
 8005f66:	ee01 3a90 	vmov	s3, r3
 8005f6a:	ee01 4a10 	vmov	s2, r4
 8005f6e:	eef0 0a68 	vmov.f32	s1, s17
 8005f72:	eeb0 0a48 	vmov.f32	s0, s16
 8005f76:	4832      	ldr	r0, [pc, #200]	@ (8006040 <start_combined_trajectory+0x260>)
 8005f78:	f7fd ff50 	bl	8003e1c <Trapezoidal_Generator>

        revolute_axis.trajectory_active = false;  // Will be activated later
 8005f7c:	4b29      	ldr	r3, [pc, #164]	@ (8006024 <start_combined_trajectory+0x244>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        // Set motion sequence to skip prismatic phase
        plotter_pen_up();
 8005f84:	f002 fd22 	bl	80089cc <plotter_pen_up>
        motion_delay_timer = 0;
 8005f88:	4b2e      	ldr	r3, [pc, #184]	@ (8006044 <start_combined_trajectory+0x264>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
        motion_sequence_state = MOTION_PEN_UP_DELAY;  // Will skip to revolute directly
 8005f8e:	4b2e      	ldr	r3, [pc, #184]	@ (8006048 <start_combined_trajectory+0x268>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	e032      	b.n	8005ffc <start_combined_trajectory+0x21c>

    } else {
        // NORMAL TRAJECTORY: Generate both prismatic and revolute trajectories

        // Generate prismatic trajectory
        Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8005f96:	4b22      	ldr	r3, [pc, #136]	@ (8006020 <start_combined_trajectory+0x240>)
 8005f98:	ed93 8a03 	vldr	s16, [r3, #12]
 8005f9c:	4b20      	ldr	r3, [pc, #128]	@ (8006020 <start_combined_trajectory+0x240>)
 8005f9e:	edd3 8a04 	vldr	s17, [r3, #16]
                prismatic_axis.target_pos,
                ZGX45RGG_400RPM_Constant.traject_sd_max,
 8005fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800604c <start_combined_trajectory+0x26c>)
 8005fa4:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
        Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8005fa8:	4610      	mov	r0, r2
 8005faa:	4619      	mov	r1, r3
 8005fac:	f7fa fdd2 	bl	8000b54 <__aeabi_d2f>
 8005fb0:	4604      	mov	r4, r0
                ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8005fb2:	4b26      	ldr	r3, [pc, #152]	@ (800604c <start_combined_trajectory+0x26c>)
 8005fb4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
        Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8005fb8:	4610      	mov	r0, r2
 8005fba:	4619      	mov	r1, r3
 8005fbc:	f7fa fdca 	bl	8000b54 <__aeabi_d2f>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	ee01 3a90 	vmov	s3, r3
 8005fc6:	ee01 4a10 	vmov	s2, r4
 8005fca:	eef0 0a68 	vmov.f32	s1, s17
 8005fce:	eeb0 0a48 	vmov.f32	s0, s16
 8005fd2:	481f      	ldr	r0, [pc, #124]	@ (8006050 <start_combined_trajectory+0x270>)
 8005fd4:	f7fd ff22 	bl	8003e1c <Trapezoidal_Generator>

        prismatic_axis.trajectory_active = false;
 8005fd8:	4b11      	ldr	r3, [pc, #68]	@ (8006020 <start_combined_trajectory+0x240>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        revolute_axis.trajectory_active = false;
 8005fe0:	4b10      	ldr	r3, [pc, #64]	@ (8006024 <start_combined_trajectory+0x244>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        plotter_pen_up();
 8005fe8:	f002 fcf0 	bl	80089cc <plotter_pen_up>
        motion_delay_timer = 0;
 8005fec:	4b15      	ldr	r3, [pc, #84]	@ (8006044 <start_combined_trajectory+0x264>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	601a      	str	r2, [r3, #0]
        motion_sequence_state = MOTION_PEN_UP_DELAY;
 8005ff2:	4b15      	ldr	r3, [pc, #84]	@ (8006048 <start_combined_trajectory+0x268>)
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	e000      	b.n	8005ffc <start_combined_trajectory+0x21c>
        return;
 8005ffa:	bf00      	nop
    }
}
 8005ffc:	372c      	adds	r7, #44	@ 0x2c
 8005ffe:	46bd      	mov	sp, r7
 8006000:	ecbd 8b02 	vpop	{d8}
 8006004:	bd90      	pop	{r4, r7, pc}
 8006006:	bf00      	nop
 8006008:	2000036b 	.word	0x2000036b
 800600c:	2000036a 	.word	0x2000036a
 8006010:	20000498 	.word	0x20000498
 8006014:	200004f4 	.word	0x200004f4
 8006018:	20000334 	.word	0x20000334
 800601c:	20000348 	.word	0x20000348
 8006020:	20000280 	.word	0x20000280
 8006024:	200002c4 	.word	0x200002c4
 8006028:	00000000 	.word	0x00000000
 800602c:	43960000 	.word	0x43960000
 8006030:	43340000 	.word	0x43340000
 8006034:	40490fdb 	.word	0x40490fdb
 8006038:	20000380 	.word	0x20000380
 800603c:	20000000 	.word	0x20000000
 8006040:	20000320 	.word	0x20000320
 8006044:	20000360 	.word	0x20000360
 8006048:	20000308 	.word	0x20000308
 800604c:	20000080 	.word	0x20000080
 8006050:	2000030c 	.word	0x2000030c

08006054 <update_position_control>:

void update_position_control(void) {
 8006054:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006058:	ed2d 8b02 	vpush	{d8}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 8006060:	4b50      	ldr	r3, [pc, #320]	@ (80061a4 <update_position_control+0x150>)
 8006062:	ed93 7a00 	vldr	s14, [r3]
 8006066:	4b50      	ldr	r3, [pc, #320]	@ (80061a8 <update_position_control+0x154>)
 8006068:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800606c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006070:	4b4c      	ldr	r3, [pc, #304]	@ (80061a4 <update_position_control+0x150>)
 8006072:	edc3 7a05 	vstr	s15, [r3, #20]
	prismatic_axis.command_vel = PWM_Satuation(
 8006076:	4b4b      	ldr	r3, [pc, #300]	@ (80061a4 <update_position_control+0x150>)
 8006078:	edd3 7a05 	vldr	s15, [r3, #20]
 800607c:	eeb0 0a67 	vmov.f32	s0, s15
 8006080:	484a      	ldr	r0, [pc, #296]	@ (80061ac <update_position_control+0x158>)
 8006082:	f7fb f8c9 	bl	8001218 <PID_CONTROLLER_Compute>
 8006086:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 800608a:	4b49      	ldr	r3, [pc, #292]	@ (80061b0 <update_position_control+0x15c>)
 800608c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 8006090:	4610      	mov	r0, r2
 8006092:	4619      	mov	r1, r3
 8006094:	f7fa fd16 	bl	8000ac4 <__aeabi_d2iz>
 8006098:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 800609a:	4b45      	ldr	r3, [pc, #276]	@ (80061b0 <update_position_control+0x15c>)
 800609c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80060a0:	4690      	mov	r8, r2
 80060a2:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 80060a6:	4640      	mov	r0, r8
 80060a8:	4649      	mov	r1, r9
 80060aa:	f7fa fd0b 	bl	8000ac4 <__aeabi_d2iz>
 80060ae:	4603      	mov	r3, r0
 80060b0:	4619      	mov	r1, r3
 80060b2:	4630      	mov	r0, r6
 80060b4:	eeb0 0a48 	vmov.f32	s0, s16
 80060b8:	f7fb f84c 	bl	8001154 <PWM_Satuation>
 80060bc:	ee07 0a90 	vmov	s15, r0
 80060c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060c4:	4b37      	ldr	r3, [pc, #220]	@ (80061a4 <update_position_control+0x150>)
 80060c6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	float normalized_position = normalize_angle(revolute_encoder.rads);
 80060ca:	4b3a      	ldr	r3, [pc, #232]	@ (80061b4 <update_position_control+0x160>)
 80060cc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80060d0:	eeb0 0a67 	vmov.f32	s0, s15
 80060d4:	f7ff fd9a 	bl	8005c0c <normalize_angle>
 80060d8:	ed87 0a01 	vstr	s0, [r7, #4]
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 80060dc:	4b36      	ldr	r3, [pc, #216]	@ (80061b8 <update_position_control+0x164>)
 80060de:	ed93 7a00 	vldr	s14, [r3]
 80060e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80060e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060ea:	4b33      	ldr	r3, [pc, #204]	@ (80061b8 <update_position_control+0x164>)
 80060ec:	edc3 7a05 	vstr	s15, [r3, #20]

	if (revolute_axis.pos_error > PI)
 80060f0:	4b31      	ldr	r3, [pc, #196]	@ (80061b8 <update_position_control+0x164>)
 80060f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80060f6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80061bc <update_position_control+0x168>
 80060fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006102:	dd09      	ble.n	8006118 <update_position_control+0xc4>
		revolute_axis.pos_error -= 2.0f * PI;
 8006104:	4b2c      	ldr	r3, [pc, #176]	@ (80061b8 <update_position_control+0x164>)
 8006106:	edd3 7a05 	vldr	s15, [r3, #20]
 800610a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80061c0 <update_position_control+0x16c>
 800610e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006112:	4b29      	ldr	r3, [pc, #164]	@ (80061b8 <update_position_control+0x164>)
 8006114:	edc3 7a05 	vstr	s15, [r3, #20]
	if (revolute_axis.pos_error < -PI)
 8006118:	4b27      	ldr	r3, [pc, #156]	@ (80061b8 <update_position_control+0x164>)
 800611a:	edd3 7a05 	vldr	s15, [r3, #20]
 800611e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80061c4 <update_position_control+0x170>
 8006122:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612a:	d509      	bpl.n	8006140 <update_position_control+0xec>
		revolute_axis.pos_error += 2.0f * PI;
 800612c:	4b22      	ldr	r3, [pc, #136]	@ (80061b8 <update_position_control+0x164>)
 800612e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006132:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80061c0 <update_position_control+0x16c>
 8006136:	ee77 7a87 	vadd.f32	s15, s15, s14
 800613a:	4b1f      	ldr	r3, [pc, #124]	@ (80061b8 <update_position_control+0x164>)
 800613c:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 8006140:	4b1d      	ldr	r3, [pc, #116]	@ (80061b8 <update_position_control+0x164>)
 8006142:	edd3 7a05 	vldr	s15, [r3, #20]
 8006146:	eeb0 0a67 	vmov.f32	s0, s15
 800614a:	481f      	ldr	r0, [pc, #124]	@ (80061c8 <update_position_control+0x174>)
 800614c:	f7fb f864 	bl	8001218 <PID_CONTROLLER_Compute>
 8006150:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 8006154:	4b1d      	ldr	r3, [pc, #116]	@ (80061cc <update_position_control+0x178>)
 8006156:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 800615a:	4610      	mov	r0, r2
 800615c:	4619      	mov	r1, r3
 800615e:	f7fa fcb1 	bl	8000ac4 <__aeabi_d2iz>
 8006162:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 8006164:	4b19      	ldr	r3, [pc, #100]	@ (80061cc <update_position_control+0x178>)
 8006166:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800616a:	4614      	mov	r4, r2
 800616c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 8006170:	4620      	mov	r0, r4
 8006172:	4629      	mov	r1, r5
 8006174:	f7fa fca6 	bl	8000ac4 <__aeabi_d2iz>
 8006178:	4603      	mov	r3, r0
 800617a:	4619      	mov	r1, r3
 800617c:	4630      	mov	r0, r6
 800617e:	eeb0 0a48 	vmov.f32	s0, s16
 8006182:	f7fa ffe7 	bl	8001154 <PWM_Satuation>
 8006186:	ee07 0a90 	vmov	s15, r0
 800618a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800618e:	4b0a      	ldr	r3, [pc, #40]	@ (80061b8 <update_position_control+0x164>)
 8006190:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	ecbd 8b02 	vpop	{d8}
 800619e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061a2:	bf00      	nop
 80061a4:	20000280 	.word	0x20000280
 80061a8:	20000498 	.word	0x20000498
 80061ac:	20000550 	.word	0x20000550
 80061b0:	20000080 	.word	0x20000080
 80061b4:	200004f4 	.word	0x200004f4
 80061b8:	200002c4 	.word	0x200002c4
 80061bc:	40490fdb 	.word	0x40490fdb
 80061c0:	40c90fdb 	.word	0x40c90fdb
 80061c4:	c0490fdb 	.word	0xc0490fdb
 80061c8:	200005a0 	.word	0x200005a0
 80061cc:	20000000 	.word	0x20000000

080061d0 <update_velocity_control>:

void update_velocity_control(void) {
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	ed2d 8b02 	vpush	{d8}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
	if (prismatic_axis.trajectory_active) {
 80061dc:	4b96      	ldr	r3, [pc, #600]	@ (8006438 <update_velocity_control+0x268>)
 80061de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d010      	beq.n	8006208 <update_velocity_control+0x38>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80061e6:	4b94      	ldr	r3, [pc, #592]	@ (8006438 <update_velocity_control+0x268>)
 80061e8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 80061ec:	4b92      	ldr	r3, [pc, #584]	@ (8006438 <update_velocity_control+0x268>)
 80061ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80061f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061f6:	4b90      	ldr	r3, [pc, #576]	@ (8006438 <update_velocity_control+0x268>)
 80061f8:	edd3 7a07 	vldr	s15, [r3, #28]
 80061fc:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006200:	4b8d      	ldr	r3, [pc, #564]	@ (8006438 <update_velocity_control+0x268>)
 8006202:	edc3 7a06 	vstr	s15, [r3, #24]
 8006206:	e00a      	b.n	800621e <update_velocity_control+0x4e>
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006208:	4b8b      	ldr	r3, [pc, #556]	@ (8006438 <update_velocity_control+0x268>)
 800620a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 800620e:	4b8a      	ldr	r3, [pc, #552]	@ (8006438 <update_velocity_control+0x268>)
 8006210:	edd3 7a07 	vldr	s15, [r3, #28]
 8006214:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006218:	4b87      	ldr	r3, [pc, #540]	@ (8006438 <update_velocity_control+0x268>)
 800621a:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 800621e:	4b86      	ldr	r3, [pc, #536]	@ (8006438 <update_velocity_control+0x268>)
 8006220:	edd3 7a06 	vldr	s15, [r3, #24]
 8006224:	eeb0 0a67 	vmov.f32	s0, s15
 8006228:	4884      	ldr	r0, [pc, #528]	@ (800643c <update_velocity_control+0x26c>)
 800622a:	f7fa fff5 	bl	8001218 <PID_CONTROLLER_Compute>
 800622e:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 8006232:	4b83      	ldr	r3, [pc, #524]	@ (8006440 <update_velocity_control+0x270>)
 8006234:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 8006238:	4610      	mov	r0, r2
 800623a:	4619      	mov	r1, r3
 800623c:	f7fa fc42 	bl	8000ac4 <__aeabi_d2iz>
 8006240:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 8006242:	4b7f      	ldr	r3, [pc, #508]	@ (8006440 <update_velocity_control+0x270>)
 8006244:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006248:	603a      	str	r2, [r7, #0]
 800624a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800624e:	607b      	str	r3, [r7, #4]
	prismatic_axis.command_pos = PWM_Satuation(
 8006250:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006254:	f7fa fc36 	bl	8000ac4 <__aeabi_d2iz>
 8006258:	4603      	mov	r3, r0
 800625a:	4619      	mov	r1, r3
 800625c:	4630      	mov	r0, r6
 800625e:	eeb0 0a48 	vmov.f32	s0, s16
 8006262:	f7fa ff77 	bl	8001154 <PWM_Satuation>
 8006266:	ee07 0a90 	vmov	s15, r0
 800626a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800626e:	4b72      	ldr	r3, [pc, #456]	@ (8006438 <update_velocity_control+0x268>)
 8006270:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (prismatic_axis.trajectory_active) {
 8006274:	4b70      	ldr	r3, [pc, #448]	@ (8006438 <update_velocity_control+0x268>)
 8006276:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800627a:	2b00      	cmp	r3, #0
 800627c:	d02c      	beq.n	80062d8 <update_velocity_control+0x108>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 800627e:	4b6e      	ldr	r3, [pc, #440]	@ (8006438 <update_velocity_control+0x268>)
 8006280:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8006284:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006444 <update_velocity_control+0x274>
 8006288:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800628c:	eeb0 0a47 	vmov.f32	s0, s14
 8006290:	486d      	ldr	r0, [pc, #436]	@ (8006448 <update_velocity_control+0x278>)
 8006292:	f7fb fb01 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 8006296:	eef0 7a40 	vmov.f32	s15, s0
 800629a:	4b67      	ldr	r3, [pc, #412]	@ (8006438 <update_velocity_control+0x268>)
 800629c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80062a0:	4b6a      	ldr	r3, [pc, #424]	@ (800644c <update_velocity_control+0x27c>)
 80062a2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80062a6:	4b6a      	ldr	r3, [pc, #424]	@ (8006450 <update_velocity_control+0x280>)
 80062a8:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 80062ac:	4b69      	ldr	r3, [pc, #420]	@ (8006454 <update_velocity_control+0x284>)
 80062ae:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80062b2:	eddf 5a64 	vldr	s11, [pc, #400]	@ 8006444 <update_velocity_control+0x274>
 80062b6:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80062ba:	eeb0 1a46 	vmov.f32	s2, s12
 80062be:	eef0 0a66 	vmov.f32	s1, s13
 80062c2:	eeb0 0a47 	vmov.f32	s0, s14
 80062c6:	4864      	ldr	r0, [pc, #400]	@ (8006458 <update_velocity_control+0x288>)
 80062c8:	f7fb fb8e 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 80062cc:	eef0 7a40 	vmov.f32	s15, s0
 80062d0:	4b59      	ldr	r3, [pc, #356]	@ (8006438 <update_velocity_control+0x268>)
 80062d2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 80062d6:	e007      	b.n	80062e8 <update_velocity_control+0x118>
	} else {
		prismatic_axis.ffd = 0.0f;
 80062d8:	4b57      	ldr	r3, [pc, #348]	@ (8006438 <update_velocity_control+0x268>)
 80062da:	f04f 0200 	mov.w	r2, #0
 80062de:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 80062e0:	4b55      	ldr	r3, [pc, #340]	@ (8006438 <update_velocity_control+0x268>)
 80062e2:	f04f 0200 	mov.w	r2, #0
 80062e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80062e8:	4b53      	ldr	r3, [pc, #332]	@ (8006438 <update_velocity_control+0x268>)
 80062ea:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80062ee:	4b52      	ldr	r3, [pc, #328]	@ (8006438 <update_velocity_control+0x268>)
 80062f0:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80062f4:	4b50      	ldr	r3, [pc, #320]	@ (8006438 <update_velocity_control+0x268>)
 80062f6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80062fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006302:	4b4d      	ldr	r3, [pc, #308]	@ (8006438 <update_velocity_control+0x268>)
 8006304:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006308:	4b4b      	ldr	r3, [pc, #300]	@ (8006438 <update_velocity_control+0x268>)
 800630a:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 800630e:	4b4c      	ldr	r3, [pc, #304]	@ (8006440 <update_velocity_control+0x270>)
 8006310:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006314:	4610      	mov	r0, r2
 8006316:	4619      	mov	r1, r3
 8006318:	f7fa fbd4 	bl	8000ac4 <__aeabi_d2iz>
 800631c:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 800631e:	4b48      	ldr	r3, [pc, #288]	@ (8006440 <update_velocity_control+0x270>)
 8006320:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006324:	4692      	mov	sl, r2
 8006326:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800632a:	4650      	mov	r0, sl
 800632c:	4659      	mov	r1, fp
 800632e:	f7fa fbc9 	bl	8000ac4 <__aeabi_d2iz>
 8006332:	4603      	mov	r3, r0
 8006334:	4619      	mov	r1, r3
 8006336:	4630      	mov	r0, r6
 8006338:	eeb0 0a48 	vmov.f32	s0, s16
 800633c:	f7fa ff0a 	bl	8001154 <PWM_Satuation>
 8006340:	ee07 0a90 	vmov	s15, r0
 8006344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006348:	4b3b      	ldr	r3, [pc, #236]	@ (8006438 <update_velocity_control+0x268>)
 800634a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 800634e:	4b40      	ldr	r3, [pc, #256]	@ (8006450 <update_velocity_control+0x280>)
 8006350:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006354:	2b00      	cmp	r3, #0
 8006356:	d010      	beq.n	800637a <update_velocity_control+0x1aa>
		revolute_axis.vel_error = revolute_axis.command_vel
 8006358:	4b3d      	ldr	r3, [pc, #244]	@ (8006450 <update_velocity_control+0x280>)
 800635a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 800635e:	4b3c      	ldr	r3, [pc, #240]	@ (8006450 <update_velocity_control+0x280>)
 8006360:	edd3 7a01 	vldr	s15, [r3, #4]
 8006364:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006368:	4b39      	ldr	r3, [pc, #228]	@ (8006450 <update_velocity_control+0x280>)
 800636a:	edd3 7a07 	vldr	s15, [r3, #28]
 800636e:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006372:	4b37      	ldr	r3, [pc, #220]	@ (8006450 <update_velocity_control+0x280>)
 8006374:	edc3 7a06 	vstr	s15, [r3, #24]
 8006378:	e00a      	b.n	8006390 <update_velocity_control+0x1c0>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 800637a:	4b35      	ldr	r3, [pc, #212]	@ (8006450 <update_velocity_control+0x280>)
 800637c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8006380:	4b33      	ldr	r3, [pc, #204]	@ (8006450 <update_velocity_control+0x280>)
 8006382:	edd3 7a07 	vldr	s15, [r3, #28]
 8006386:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 800638a:	4b31      	ldr	r3, [pc, #196]	@ (8006450 <update_velocity_control+0x280>)
 800638c:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8006390:	4b2f      	ldr	r3, [pc, #188]	@ (8006450 <update_velocity_control+0x280>)
 8006392:	edd3 7a06 	vldr	s15, [r3, #24]
 8006396:	eeb0 0a67 	vmov.f32	s0, s15
 800639a:	4830      	ldr	r0, [pc, #192]	@ (800645c <update_velocity_control+0x28c>)
 800639c:	f7fa ff3c 	bl	8001218 <PID_CONTROLLER_Compute>
 80063a0:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 80063a4:	4b2e      	ldr	r3, [pc, #184]	@ (8006460 <update_velocity_control+0x290>)
 80063a6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 80063aa:	4610      	mov	r0, r2
 80063ac:	4619      	mov	r1, r3
 80063ae:	f7fa fb89 	bl	8000ac4 <__aeabi_d2iz>
 80063b2:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 80063b4:	4b2a      	ldr	r3, [pc, #168]	@ (8006460 <update_velocity_control+0x290>)
 80063b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80063ba:	4690      	mov	r8, r2
 80063bc:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 80063c0:	4640      	mov	r0, r8
 80063c2:	4649      	mov	r1, r9
 80063c4:	f7fa fb7e 	bl	8000ac4 <__aeabi_d2iz>
 80063c8:	4603      	mov	r3, r0
 80063ca:	4619      	mov	r1, r3
 80063cc:	4630      	mov	r0, r6
 80063ce:	eeb0 0a48 	vmov.f32	s0, s16
 80063d2:	f7fa febf 	bl	8001154 <PWM_Satuation>
 80063d6:	ee07 0a90 	vmov	s15, r0
 80063da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063de:	4b1c      	ldr	r3, [pc, #112]	@ (8006450 <update_velocity_control+0x280>)
 80063e0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 80063e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006450 <update_velocity_control+0x280>)
 80063e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d03e      	beq.n	800646c <update_velocity_control+0x29c>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 80063ee:	4b18      	ldr	r3, [pc, #96]	@ (8006450 <update_velocity_control+0x280>)
 80063f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80063f4:	eeb0 0a67 	vmov.f32	s0, s15
 80063f8:	481a      	ldr	r0, [pc, #104]	@ (8006464 <update_velocity_control+0x294>)
 80063fa:	f7fb f8cd 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 80063fe:	eef0 7a40 	vmov.f32	s15, s0
 8006402:	4b13      	ldr	r3, [pc, #76]	@ (8006450 <update_velocity_control+0x280>)
 8006404:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006408:	4b10      	ldr	r3, [pc, #64]	@ (800644c <update_velocity_control+0x27c>)
 800640a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 800640e:	4b11      	ldr	r3, [pc, #68]	@ (8006454 <update_velocity_control+0x284>)
 8006410:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006414:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8006444 <update_velocity_control+0x274>
 8006418:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800641c:	eef0 0a66 	vmov.f32	s1, s13
 8006420:	eeb0 0a47 	vmov.f32	s0, s14
 8006424:	4810      	ldr	r0, [pc, #64]	@ (8006468 <update_velocity_control+0x298>)
 8006426:	f7fb f94a 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 800642a:	eef0 7a40 	vmov.f32	s15, s0
 800642e:	4b08      	ldr	r3, [pc, #32]	@ (8006450 <update_velocity_control+0x280>)
 8006430:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006434:	e034      	b.n	80064a0 <update_velocity_control+0x2d0>
 8006436:	bf00      	nop
 8006438:	20000280 	.word	0x20000280
 800643c:	20000578 	.word	0x20000578
 8006440:	20000080 	.word	0x20000080
 8006444:	447a0000 	.word	0x447a0000
 8006448:	20000618 	.word	0x20000618
 800644c:	200004f4 	.word	0x200004f4
 8006450:	200002c4 	.word	0x200002c4
 8006454:	20000498 	.word	0x20000498
 8006458:	2000061c 	.word	0x2000061c
 800645c:	200005c8 	.word	0x200005c8
 8006460:	20000000 	.word	0x20000000
 8006464:	20000624 	.word	0x20000624
 8006468:	20000628 	.word	0x20000628
	} else {
		revolute_axis.ffd = 0.0f;
 800646c:	4b54      	ldr	r3, [pc, #336]	@ (80065c0 <update_velocity_control+0x3f0>)
 800646e:	f04f 0200 	mov.w	r2, #0
 8006472:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006474:	4b53      	ldr	r3, [pc, #332]	@ (80065c4 <update_velocity_control+0x3f4>)
 8006476:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 800647a:	4b53      	ldr	r3, [pc, #332]	@ (80065c8 <update_velocity_control+0x3f8>)
 800647c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006480:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 80065cc <update_velocity_control+0x3fc>
 8006484:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006488:	eef0 0a66 	vmov.f32	s1, s13
 800648c:	eeb0 0a47 	vmov.f32	s0, s14
 8006490:	484f      	ldr	r0, [pc, #316]	@ (80065d0 <update_velocity_control+0x400>)
 8006492:	f7fb f914 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8006496:	eef0 7a40 	vmov.f32	s15, s0
 800649a:	4b49      	ldr	r3, [pc, #292]	@ (80065c0 <update_velocity_control+0x3f0>)
 800649c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 80064a0:	4b4c      	ldr	r3, [pc, #304]	@ (80065d4 <update_velocity_control+0x404>)
 80064a2:	edd3 7a00 	vldr	s15, [r3]
 80064a6:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 80065d8 <update_velocity_control+0x408>
 80064aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80064ae:	4b44      	ldr	r3, [pc, #272]	@ (80065c0 <update_velocity_control+0x3f0>)
 80064b0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80064b4:	eddf 6a49 	vldr	s13, [pc, #292]	@ 80065dc <update_velocity_control+0x40c>
 80064b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80064bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064c0:	4b44      	ldr	r3, [pc, #272]	@ (80065d4 <update_velocity_control+0x404>)
 80064c2:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 80064c6:	4b46      	ldr	r3, [pc, #280]	@ (80065e0 <update_velocity_control+0x410>)
 80064c8:	edd3 7a00 	vldr	s15, [r3]
 80064cc:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80065d8 <update_velocity_control+0x408>
 80064d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80064d4:	4b3a      	ldr	r3, [pc, #232]	@ (80065c0 <update_velocity_control+0x3f0>)
 80064d6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80064da:	eddf 6a40 	vldr	s13, [pc, #256]	@ 80065dc <update_velocity_control+0x40c>
 80064de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80064e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064e6:	4b3e      	ldr	r3, [pc, #248]	@ (80065e0 <update_velocity_control+0x410>)
 80064e8:	edc3 7a00 	vstr	s15, [r3]

	revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
 80064ec:	4b34      	ldr	r3, [pc, #208]	@ (80065c0 <update_velocity_control+0x3f0>)
 80064ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7f9 fff5 	bl	80004e0 <__aeabi_f2d>
 80064f6:	4680      	mov	r8, r0
 80064f8:	4689      	mov	r9, r1
 80064fa:	4b39      	ldr	r3, [pc, #228]	@ (80065e0 <update_velocity_control+0x410>)
 80064fc:	ed93 7a00 	vldr	s14, [r3]
 8006500:	4b34      	ldr	r3, [pc, #208]	@ (80065d4 <update_velocity_control+0x404>)
 8006502:	edd3 7a00 	vldr	s15, [r3]
 8006506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800650a:	ee17 0a90 	vmov	r0, s15
 800650e:	f7f9 ffe7 	bl	80004e0 <__aeabi_f2d>
 8006512:	a329      	add	r3, pc, #164	@ (adr r3, 80065b8 <update_velocity_control+0x3e8>)
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	f7fa f83a 	bl	8000590 <__aeabi_dmul>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4640      	mov	r0, r8
 8006522:	4649      	mov	r1, r9
 8006524:	f7f9 fe7e 	bl	8000224 <__adddf3>
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	4610      	mov	r0, r2
 800652e:	4619      	mov	r1, r3
 8006530:	f7fa fb10 	bl	8000b54 <__aeabi_d2f>
 8006534:	4603      	mov	r3, r0
 8006536:	4a22      	ldr	r2, [pc, #136]	@ (80065c0 <update_velocity_control+0x3f0>)
 8006538:	6253      	str	r3, [r2, #36]	@ 0x24

	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800653a:	4b21      	ldr	r3, [pc, #132]	@ (80065c0 <update_velocity_control+0x3f0>)
 800653c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006540:	4b28      	ldr	r3, [pc, #160]	@ (80065e4 <update_velocity_control+0x414>)
 8006542:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006546:	4610      	mov	r0, r2
 8006548:	4619      	mov	r1, r3
 800654a:	f7fa fabb 	bl	8000ac4 <__aeabi_d2iz>
 800654e:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006550:	4b24      	ldr	r3, [pc, #144]	@ (80065e4 <update_velocity_control+0x414>)
 8006552:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006556:	4614      	mov	r4, r2
 8006558:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800655c:	4620      	mov	r0, r4
 800655e:	4629      	mov	r1, r5
 8006560:	f7fa fab0 	bl	8000ac4 <__aeabi_d2iz>
 8006564:	4603      	mov	r3, r0
 8006566:	4619      	mov	r1, r3
 8006568:	4630      	mov	r0, r6
 800656a:	eeb0 0a48 	vmov.f32	s0, s16
 800656e:	f7fa fdf1 	bl	8001154 <PWM_Satuation>
 8006572:	ee07 0a90 	vmov	s15, r0
 8006576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800657a:	4b11      	ldr	r3, [pc, #68]	@ (80065c0 <update_velocity_control+0x3f0>)
 800657c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006580:	4b19      	ldr	r3, [pc, #100]	@ (80065e8 <update_velocity_control+0x418>)
 8006582:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006586:	eef0 0a67 	vmov.f32	s1, s15
 800658a:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 80065ec <update_velocity_control+0x41c>
 800658e:	4818      	ldr	r0, [pc, #96]	@ (80065f0 <update_velocity_control+0x420>)
 8006590:	f7fa ff1a 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006594:	4b0a      	ldr	r3, [pc, #40]	@ (80065c0 <update_velocity_control+0x3f0>)
 8006596:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800659a:	eef0 0a67 	vmov.f32	s1, s15
 800659e:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80065ec <update_velocity_control+0x41c>
 80065a2:	4814      	ldr	r0, [pc, #80]	@ (80065f4 <update_velocity_control+0x424>)
 80065a4:	f7fa ff10 	bl	80013c8 <MDXX_set_range>
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	ecbd 8b02 	vpop	{d8}
 80065b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b6:	bf00      	nop
 80065b8:	47ae147b 	.word	0x47ae147b
 80065bc:	3f847ae1 	.word	0x3f847ae1
 80065c0:	200002c4 	.word	0x200002c4
 80065c4:	200004f4 	.word	0x200004f4
 80065c8:	20000498 	.word	0x20000498
 80065cc:	447a0000 	.word	0x447a0000
 80065d0:	20000628 	.word	0x20000628
 80065d4:	200003ec 	.word	0x200003ec
 80065d8:	3f4ccccd 	.word	0x3f4ccccd
 80065dc:	3e4ccccd 	.word	0x3e4ccccd
 80065e0:	200003f0 	.word	0x200003f0
 80065e4:	20000000 	.word	0x20000000
 80065e8:	20000280 	.word	0x20000280
 80065ec:	44fa0000 	.word	0x44fa0000
 80065f0:	20000400 	.word	0x20000400
 80065f4:	2000044c 	.word	0x2000044c

080065f8 <update_control_loops>:

void update_control_loops(void) {
 80065f8:	b598      	push	{r3, r4, r7, lr}
 80065fa:	ed2d 8b02 	vpush	{d8}
 80065fe:	af00      	add	r7, sp, #0
    normalized_position = normalize_angle(revolute_encoder.rads);
 8006600:	4b96      	ldr	r3, [pc, #600]	@ (800685c <update_control_loops+0x264>)
 8006602:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006606:	eeb0 0a67 	vmov.f32	s0, s15
 800660a:	f7ff faff 	bl	8005c0c <normalize_angle>
 800660e:	eef0 7a40 	vmov.f32	s15, s0
 8006612:	4b93      	ldr	r3, [pc, #588]	@ (8006860 <update_control_loops+0x268>)
 8006614:	edc3 7a00 	vstr	s15, [r3]

    if (is_emergency_active()) {
 8006618:	f000 fba2 	bl	8006d60 <is_emergency_active>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d015      	beq.n	800664e <update_control_loops+0x56>
        emergency_stop_all_motors();
 8006622:	f000 fad5 	bl	8006bd0 <emergency_stop_all_motors>
        prismatic_axis.mm = prismatic_encoder.mm;
 8006626:	4b8f      	ldr	r3, [pc, #572]	@ (8006864 <update_control_loops+0x26c>)
 8006628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800662a:	4a8f      	ldr	r2, [pc, #572]	@ (8006868 <update_control_loops+0x270>)
 800662c:	6393      	str	r3, [r2, #56]	@ 0x38
        revolute_axis.deg = UnitConverter_angle(&converter_system,
 800662e:	4b8c      	ldr	r3, [pc, #560]	@ (8006860 <update_control_loops+0x268>)
 8006630:	edd3 7a00 	vldr	s15, [r3]
 8006634:	220e      	movs	r2, #14
 8006636:	210f      	movs	r1, #15
 8006638:	eeb0 0a67 	vmov.f32	s0, s15
 800663c:	488b      	ldr	r0, [pc, #556]	@ (800686c <update_control_loops+0x274>)
 800663e:	f7fe f847 	bl	80046d0 <UnitConverter_angle>
 8006642:	eef0 7a40 	vmov.f32	s15, s0
 8006646:	4b8a      	ldr	r3, [pc, #552]	@ (8006870 <update_control_loops+0x278>)
 8006648:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                normalized_position, UNIT_RADIAN, UNIT_DEGREE);
        return;
 800664c:	e1ac      	b.n	80069a8 <update_control_loops+0x3b0>
    }

    // Handle all homing states except HOMING_REV_TO_ZERO_DEG with direct motor control
    if (homing_active && homing_state != HOMING_REV_TO_ZERO_DEG) {
 800664e:	4b89      	ldr	r3, [pc, #548]	@ (8006874 <update_control_loops+0x27c>)
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d02d      	beq.n	80066b2 <update_control_loops+0xba>
 8006656:	4b88      	ldr	r3, [pc, #544]	@ (8006878 <update_control_loops+0x280>)
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b07      	cmp	r3, #7
 800665c:	d029      	beq.n	80066b2 <update_control_loops+0xba>
        update_homing_sequence();
 800665e:	f7fe ff67 	bl	8005530 <update_homing_sequence>
        MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006662:	4b81      	ldr	r3, [pc, #516]	@ (8006868 <update_control_loops+0x270>)
 8006664:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006668:	eef0 0a67 	vmov.f32	s1, s15
 800666c:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 800687c <update_control_loops+0x284>
 8006670:	4883      	ldr	r0, [pc, #524]	@ (8006880 <update_control_loops+0x288>)
 8006672:	f7fa fea9 	bl	80013c8 <MDXX_set_range>
        MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006676:	4b7e      	ldr	r3, [pc, #504]	@ (8006870 <update_control_loops+0x278>)
 8006678:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800667c:	eef0 0a67 	vmov.f32	s1, s15
 8006680:	ed9f 0a7e 	vldr	s0, [pc, #504]	@ 800687c <update_control_loops+0x284>
 8006684:	487f      	ldr	r0, [pc, #508]	@ (8006884 <update_control_loops+0x28c>)
 8006686:	f7fa fe9f 	bl	80013c8 <MDXX_set_range>
        prismatic_axis.mm = prismatic_encoder.mm;
 800668a:	4b76      	ldr	r3, [pc, #472]	@ (8006864 <update_control_loops+0x26c>)
 800668c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800668e:	4a76      	ldr	r2, [pc, #472]	@ (8006868 <update_control_loops+0x270>)
 8006690:	6393      	str	r3, [r2, #56]	@ 0x38
        revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006692:	4b73      	ldr	r3, [pc, #460]	@ (8006860 <update_control_loops+0x268>)
 8006694:	edd3 7a00 	vldr	s15, [r3]
 8006698:	220e      	movs	r2, #14
 800669a:	210f      	movs	r1, #15
 800669c:	eeb0 0a67 	vmov.f32	s0, s15
 80066a0:	4872      	ldr	r0, [pc, #456]	@ (800686c <update_control_loops+0x274>)
 80066a2:	f7fe f815 	bl	80046d0 <UnitConverter_angle>
 80066a6:	eef0 7a40 	vmov.f32	s15, s0
 80066aa:	4b71      	ldr	r3, [pc, #452]	@ (8006870 <update_control_loops+0x278>)
 80066ac:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                normalized_position, UNIT_RADIAN, UNIT_DEGREE);
        return;
 80066b0:	e17a      	b.n	80069a8 <update_control_loops+0x3b0>
    }

    // Handle HOMING_REV_TO_ZERO_DEG: use trajectory system + check completion
    if (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG) {
 80066b2:	4b70      	ldr	r3, [pc, #448]	@ (8006874 <update_control_loops+0x27c>)
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d01d      	beq.n	80066f6 <update_control_loops+0xfe>
 80066ba:	4b6f      	ldr	r3, [pc, #444]	@ (8006878 <update_control_loops+0x280>)
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	2b07      	cmp	r3, #7
 80066c0:	d119      	bne.n	80066f6 <update_control_loops+0xfe>
        // First, update the homing sequence to handle trajectory start/completion
        update_homing_sequence();
 80066c2:	f7fe ff35 	bl	8005530 <update_homing_sequence>

        // If still in HOMING_REV_TO_ZERO_DEG after update, continue with trajectory control
        if (homing_state == HOMING_REV_TO_ZERO_DEG) {
 80066c6:	4b6c      	ldr	r3, [pc, #432]	@ (8006878 <update_control_loops+0x280>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b07      	cmp	r3, #7
 80066cc:	d013      	beq.n	80066f6 <update_control_loops+0xfe>
            // Let the trajectory system handle the motion
            // Fall through to the switch statement below
        } else {
            // Homing sequence advanced to next state, return
            prismatic_axis.mm = prismatic_encoder.mm;
 80066ce:	4b65      	ldr	r3, [pc, #404]	@ (8006864 <update_control_loops+0x26c>)
 80066d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066d2:	4a65      	ldr	r2, [pc, #404]	@ (8006868 <update_control_loops+0x270>)
 80066d4:	6393      	str	r3, [r2, #56]	@ 0x38
            revolute_axis.deg = UnitConverter_angle(&converter_system,
 80066d6:	4b62      	ldr	r3, [pc, #392]	@ (8006860 <update_control_loops+0x268>)
 80066d8:	edd3 7a00 	vldr	s15, [r3]
 80066dc:	220e      	movs	r2, #14
 80066de:	210f      	movs	r1, #15
 80066e0:	eeb0 0a67 	vmov.f32	s0, s15
 80066e4:	4861      	ldr	r0, [pc, #388]	@ (800686c <update_control_loops+0x274>)
 80066e6:	f7fd fff3 	bl	80046d0 <UnitConverter_angle>
 80066ea:	eef0 7a40 	vmov.f32	s15, s0
 80066ee:	4b60      	ldr	r3, [pc, #384]	@ (8006870 <update_control_loops+0x278>)
 80066f0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                    normalized_position, UNIT_RADIAN, UNIT_DEGREE);
            return;
 80066f4:	e158      	b.n	80069a8 <update_control_loops+0x3b0>
        }
    }

    // Motion sequence handling
    switch (motion_sequence_state) {
 80066f6:	4b64      	ldr	r3, [pc, #400]	@ (8006888 <update_control_loops+0x290>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	f200 8137 	bhi.w	8006970 <update_control_loops+0x378>
 8006702:	a201      	add	r2, pc, #4	@ (adr r2, 8006708 <update_control_loops+0x110>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	0800671d 	.word	0x0800671d
 800670c:	08006779 	.word	0x08006779
 8006710:	080068a5 	.word	0x080068a5
 8006714:	0800694b 	.word	0x0800694b
 8006718:	08006969 	.word	0x08006969
    case MOTION_PEN_UP_DELAY:
        if (++motion_delay_timer >= 1500) {
 800671c:	4b5b      	ldr	r3, [pc, #364]	@ (800688c <update_control_loops+0x294>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3301      	adds	r3, #1
 8006722:	4a5a      	ldr	r2, [pc, #360]	@ (800688c <update_control_loops+0x294>)
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	f240 52db 	movw	r2, #1499	@ 0x5db
 800672a:	4293      	cmp	r3, r2
 800672c:	f240 8122 	bls.w	8006974 <update_control_loops+0x37c>
            // Check if we're in HOMING_REV_TO_ZERO_DEG mode
            if (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006730:	4b50      	ldr	r3, [pc, #320]	@ (8006874 <update_control_loops+0x27c>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d017      	beq.n	8006768 <update_control_loops+0x170>
 8006738:	4b4f      	ldr	r3, [pc, #316]	@ (8006878 <update_control_loops+0x280>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b07      	cmp	r3, #7
 800673e:	d113      	bne.n	8006768 <update_control_loops+0x170>
                // Skip prismatic phase entirely - go directly to revolute motion
                revolute_axis.trajectory_active = true;
 8006740:	4b4b      	ldr	r3, [pc, #300]	@ (8006870 <update_control_loops+0x278>)
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8006748:	4b4f      	ldr	r3, [pc, #316]	@ (8006888 <update_control_loops+0x290>)
 800674a:	2203      	movs	r2, #3
 800674c:	701a      	strb	r2, [r3, #0]

                // Ensure prismatic stays stationary
                prismatic_axis.trajectory_active = false;
 800674e:	4b46      	ldr	r3, [pc, #280]	@ (8006868 <update_control_loops+0x270>)
 8006750:	2200      	movs	r2, #0
 8006752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                prismatic_axis.position = prismatic_encoder.mm;
 8006756:	4b43      	ldr	r3, [pc, #268]	@ (8006864 <update_control_loops+0x26c>)
 8006758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800675a:	4a43      	ldr	r2, [pc, #268]	@ (8006868 <update_control_loops+0x270>)
 800675c:	6013      	str	r3, [r2, #0]
                prismatic_axis.velocity = 0.0f;
 800675e:	4b42      	ldr	r3, [pc, #264]	@ (8006868 <update_control_loops+0x270>)
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	605a      	str	r2, [r3, #4]
                // Normal trajectory - activate prismatic first
                prismatic_axis.trajectory_active = true;
                motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
            }
        }
        break;
 8006766:	e105      	b.n	8006974 <update_control_loops+0x37c>
                prismatic_axis.trajectory_active = true;
 8006768:	4b3f      	ldr	r3, [pc, #252]	@ (8006868 <update_control_loops+0x270>)
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 8006770:	4b45      	ldr	r3, [pc, #276]	@ (8006888 <update_control_loops+0x290>)
 8006772:	2202      	movs	r2, #2
 8006774:	701a      	strb	r2, [r3, #0]
        break;
 8006776:	e0fd      	b.n	8006974 <update_control_loops+0x37c>

    case MOTION_PRISMATIC_ACTIVE:
        if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8006778:	4b3b      	ldr	r3, [pc, #236]	@ (8006868 <update_control_loops+0x270>)
 800677a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 80fa 	beq.w	8006978 <update_control_loops+0x380>
 8006784:	4b42      	ldr	r3, [pc, #264]	@ (8006890 <update_control_loops+0x298>)
 8006786:	7c1b      	ldrb	r3, [r3, #16]
 8006788:	f083 0301 	eor.w	r3, r3, #1
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 80f2 	beq.w	8006978 <update_control_loops+0x380>
            Trapezoidal_Evaluated(&prisGen, &prisEva,
 8006794:	4b34      	ldr	r3, [pc, #208]	@ (8006868 <update_control_loops+0x270>)
 8006796:	ed93 8a03 	vldr	s16, [r3, #12]
 800679a:	4b33      	ldr	r3, [pc, #204]	@ (8006868 <update_control_loops+0x270>)
 800679c:	edd3 8a04 	vldr	s17, [r3, #16]
                    prismatic_axis.initial_pos, prismatic_axis.target_pos,
                    ZGX45RGG_400RPM_Constant.traject_sd_max,
 80067a0:	4b3c      	ldr	r3, [pc, #240]	@ (8006894 <update_control_loops+0x29c>)
 80067a2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
            Trapezoidal_Evaluated(&prisGen, &prisEva,
 80067a6:	4610      	mov	r0, r2
 80067a8:	4619      	mov	r1, r3
 80067aa:	f7fa f9d3 	bl	8000b54 <__aeabi_d2f>
 80067ae:	4604      	mov	r4, r0
                    ZGX45RGG_400RPM_Constant.traject_sdd_max);
 80067b0:	4b38      	ldr	r3, [pc, #224]	@ (8006894 <update_control_loops+0x29c>)
 80067b2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
            Trapezoidal_Evaluated(&prisGen, &prisEva,
 80067b6:	4610      	mov	r0, r2
 80067b8:	4619      	mov	r1, r3
 80067ba:	f7fa f9cb 	bl	8000b54 <__aeabi_d2f>
 80067be:	4603      	mov	r3, r0
 80067c0:	ee01 3a90 	vmov	s3, r3
 80067c4:	ee01 4a10 	vmov	s2, r4
 80067c8:	eef0 0a68 	vmov.f32	s1, s17
 80067cc:	eeb0 0a48 	vmov.f32	s0, s16
 80067d0:	492f      	ldr	r1, [pc, #188]	@ (8006890 <update_control_loops+0x298>)
 80067d2:	4831      	ldr	r0, [pc, #196]	@ (8006898 <update_control_loops+0x2a0>)
 80067d4:	f7fd fbe4 	bl	8003fa0 <Trapezoidal_Evaluated>

            prismatic_axis.position = prisEva.setposition;
 80067d8:	4b2d      	ldr	r3, [pc, #180]	@ (8006890 <update_control_loops+0x298>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a22      	ldr	r2, [pc, #136]	@ (8006868 <update_control_loops+0x270>)
 80067de:	6013      	str	r3, [r2, #0]
            prismatic_axis.velocity = prisEva.setvelocity;
 80067e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006890 <update_control_loops+0x298>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	4a20      	ldr	r2, [pc, #128]	@ (8006868 <update_control_loops+0x270>)
 80067e6:	6053      	str	r3, [r2, #4]

            if (prisEva.isFinised) {
 80067e8:	4b29      	ldr	r3, [pc, #164]	@ (8006890 <update_control_loops+0x298>)
 80067ea:	7c1b      	ldrb	r3, [r3, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 80c3 	beq.w	8006978 <update_control_loops+0x380>
                prismatic_axis.trajectory_active = false;
 80067f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006868 <update_control_loops+0x270>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                prismatic_axis.position = prisEva.setposition;
 80067fa:	4b25      	ldr	r3, [pc, #148]	@ (8006890 <update_control_loops+0x298>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006868 <update_control_loops+0x270>)
 8006800:	6013      	str	r3, [r2, #0]
                prismatic_axis.velocity = 0.0f;
 8006802:	4b19      	ldr	r3, [pc, #100]	@ (8006868 <update_control_loops+0x270>)
 8006804:	f04f 0200 	mov.w	r2, #0
 8006808:	605a      	str	r2, [r3, #4]

                Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800680a:	4b19      	ldr	r3, [pc, #100]	@ (8006870 <update_control_loops+0x278>)
 800680c:	ed93 8a03 	vldr	s16, [r3, #12]
 8006810:	4b17      	ldr	r3, [pc, #92]	@ (8006870 <update_control_loops+0x278>)
 8006812:	edd3 8a04 	vldr	s17, [r3, #16]
                        revolute_axis.target_pos,
                        ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006816:	4b21      	ldr	r3, [pc, #132]	@ (800689c <update_control_loops+0x2a4>)
 8006818:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
                Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800681c:	4610      	mov	r0, r2
 800681e:	4619      	mov	r1, r3
 8006820:	f7fa f998 	bl	8000b54 <__aeabi_d2f>
 8006824:	4604      	mov	r4, r0
                        ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006826:	4b1d      	ldr	r3, [pc, #116]	@ (800689c <update_control_loops+0x2a4>)
 8006828:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
                Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800682c:	4610      	mov	r0, r2
 800682e:	4619      	mov	r1, r3
 8006830:	f7fa f990 	bl	8000b54 <__aeabi_d2f>
 8006834:	4603      	mov	r3, r0
 8006836:	ee01 3a90 	vmov	s3, r3
 800683a:	ee01 4a10 	vmov	s2, r4
 800683e:	eef0 0a68 	vmov.f32	s1, s17
 8006842:	eeb0 0a48 	vmov.f32	s0, s16
 8006846:	4816      	ldr	r0, [pc, #88]	@ (80068a0 <update_control_loops+0x2a8>)
 8006848:	f7fd fae8 	bl	8003e1c <Trapezoidal_Generator>

                revolute_axis.trajectory_active = true;
 800684c:	4b08      	ldr	r3, [pc, #32]	@ (8006870 <update_control_loops+0x278>)
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8006854:	4b0c      	ldr	r3, [pc, #48]	@ (8006888 <update_control_loops+0x290>)
 8006856:	2203      	movs	r2, #3
 8006858:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 800685a:	e08d      	b.n	8006978 <update_control_loops+0x380>
 800685c:	200004f4 	.word	0x200004f4
 8006860:	2000037c 	.word	0x2000037c
 8006864:	20000498 	.word	0x20000498
 8006868:	20000280 	.word	0x20000280
 800686c:	2000088c 	.word	0x2000088c
 8006870:	200002c4 	.word	0x200002c4
 8006874:	2000036b 	.word	0x2000036b
 8006878:	2000036a 	.word	0x2000036a
 800687c:	44fa0000 	.word	0x44fa0000
 8006880:	20000400 	.word	0x20000400
 8006884:	2000044c 	.word	0x2000044c
 8006888:	20000308 	.word	0x20000308
 800688c:	20000360 	.word	0x20000360
 8006890:	20000334 	.word	0x20000334
 8006894:	20000080 	.word	0x20000080
 8006898:	2000030c 	.word	0x2000030c
 800689c:	20000000 	.word	0x20000000
 80068a0:	20000320 	.word	0x20000320

    case MOTION_REVOLUTE_ACTIVE:
        if (revolute_axis.trajectory_active && !revEva.isFinised) {
 80068a4:	4b42      	ldr	r3, [pc, #264]	@ (80069b0 <update_control_loops+0x3b8>)
 80068a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d066      	beq.n	800697c <update_control_loops+0x384>
 80068ae:	4b41      	ldr	r3, [pc, #260]	@ (80069b4 <update_control_loops+0x3bc>)
 80068b0:	7c1b      	ldrb	r3, [r3, #16]
 80068b2:	f083 0301 	eor.w	r3, r3, #1
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d05f      	beq.n	800697c <update_control_loops+0x384>
            Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 80068bc:	4b3c      	ldr	r3, [pc, #240]	@ (80069b0 <update_control_loops+0x3b8>)
 80068be:	ed93 8a03 	vldr	s16, [r3, #12]
 80068c2:	4b3b      	ldr	r3, [pc, #236]	@ (80069b0 <update_control_loops+0x3b8>)
 80068c4:	edd3 8a04 	vldr	s17, [r3, #16]
                    revolute_axis.target_pos,
                    ZGX45RGG_150RPM_Constant.traject_qd_max,
 80068c8:	4b3b      	ldr	r3, [pc, #236]	@ (80069b8 <update_control_loops+0x3c0>)
 80068ca:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
            Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 80068ce:	4610      	mov	r0, r2
 80068d0:	4619      	mov	r1, r3
 80068d2:	f7fa f93f 	bl	8000b54 <__aeabi_d2f>
 80068d6:	4604      	mov	r4, r0
                    ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80068d8:	4b37      	ldr	r3, [pc, #220]	@ (80069b8 <update_control_loops+0x3c0>)
 80068da:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
            Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 80068de:	4610      	mov	r0, r2
 80068e0:	4619      	mov	r1, r3
 80068e2:	f7fa f937 	bl	8000b54 <__aeabi_d2f>
 80068e6:	4603      	mov	r3, r0
 80068e8:	ee01 3a90 	vmov	s3, r3
 80068ec:	ee01 4a10 	vmov	s2, r4
 80068f0:	eef0 0a68 	vmov.f32	s1, s17
 80068f4:	eeb0 0a48 	vmov.f32	s0, s16
 80068f8:	492e      	ldr	r1, [pc, #184]	@ (80069b4 <update_control_loops+0x3bc>)
 80068fa:	4830      	ldr	r0, [pc, #192]	@ (80069bc <update_control_loops+0x3c4>)
 80068fc:	f7fd fb50 	bl	8003fa0 <Trapezoidal_Evaluated>

            revolute_axis.position = revEva.setposition;
 8006900:	4b2c      	ldr	r3, [pc, #176]	@ (80069b4 <update_control_loops+0x3bc>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a2a      	ldr	r2, [pc, #168]	@ (80069b0 <update_control_loops+0x3b8>)
 8006906:	6013      	str	r3, [r2, #0]
            revolute_axis.velocity = revEva.setvelocity;
 8006908:	4b2a      	ldr	r3, [pc, #168]	@ (80069b4 <update_control_loops+0x3bc>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	4a28      	ldr	r2, [pc, #160]	@ (80069b0 <update_control_loops+0x3b8>)
 800690e:	6053      	str	r3, [r2, #4]

            if (revEva.isFinised) {
 8006910:	4b28      	ldr	r3, [pc, #160]	@ (80069b4 <update_control_loops+0x3bc>)
 8006912:	7c1b      	ldrb	r3, [r3, #16]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d031      	beq.n	800697c <update_control_loops+0x384>
                revolute_axis.trajectory_active = false;
 8006918:	4b25      	ldr	r3, [pc, #148]	@ (80069b0 <update_control_loops+0x3b8>)
 800691a:	2200      	movs	r2, #0
 800691c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                revolute_axis.position = revEva.setposition;
 8006920:	4b24      	ldr	r3, [pc, #144]	@ (80069b4 <update_control_loops+0x3bc>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a22      	ldr	r2, [pc, #136]	@ (80069b0 <update_control_loops+0x3b8>)
 8006926:	6013      	str	r3, [r2, #0]
                revolute_axis.velocity = 0.0f;
 8006928:	4b21      	ldr	r3, [pc, #132]	@ (80069b0 <update_control_loops+0x3b8>)
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	605a      	str	r2, [r3, #4]

                PID_CONTROLLER_Reset(&revolute_position_pid);
 8006930:	4823      	ldr	r0, [pc, #140]	@ (80069c0 <update_control_loops+0x3c8>)
 8006932:	f7fa fd03 	bl	800133c <PID_CONTROLLER_Reset>
                PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006936:	4823      	ldr	r0, [pc, #140]	@ (80069c4 <update_control_loops+0x3cc>)
 8006938:	f7fa fd00 	bl	800133c <PID_CONTROLLER_Reset>

                motion_delay_timer = 0;
 800693c:	4b22      	ldr	r3, [pc, #136]	@ (80069c8 <update_control_loops+0x3d0>)
 800693e:	2200      	movs	r2, #0
 8006940:	601a      	str	r2, [r3, #0]
                motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8006942:	4b22      	ldr	r3, [pc, #136]	@ (80069cc <update_control_loops+0x3d4>)
 8006944:	2204      	movs	r2, #4
 8006946:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 8006948:	e018      	b.n	800697c <update_control_loops+0x384>

    case MOTION_PEN_DOWN_DELAY:
        if (++motion_delay_timer >= 1500) {
 800694a:	4b1f      	ldr	r3, [pc, #124]	@ (80069c8 <update_control_loops+0x3d0>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	3301      	adds	r3, #1
 8006950:	4a1d      	ldr	r2, [pc, #116]	@ (80069c8 <update_control_loops+0x3d0>)
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006958:	4293      	cmp	r3, r2
 800695a:	d911      	bls.n	8006980 <update_control_loops+0x388>
            plotter_pen_down();
 800695c:	f002 f846 	bl	80089ec <plotter_pen_down>
            motion_sequence_state = MOTION_COMPLETE;
 8006960:	4b1a      	ldr	r3, [pc, #104]	@ (80069cc <update_control_loops+0x3d4>)
 8006962:	2205      	movs	r2, #5
 8006964:	701a      	strb	r2, [r3, #0]
        }
        break;
 8006966:	e00b      	b.n	8006980 <update_control_loops+0x388>

    case MOTION_COMPLETE:
        motion_sequence_state = MOTION_IDLE;
 8006968:	4b18      	ldr	r3, [pc, #96]	@ (80069cc <update_control_loops+0x3d4>)
 800696a:	2200      	movs	r2, #0
 800696c:	701a      	strb	r2, [r3, #0]
        break;
 800696e:	e008      	b.n	8006982 <update_control_loops+0x38a>

    default:
        break;
 8006970:	bf00      	nop
 8006972:	e006      	b.n	8006982 <update_control_loops+0x38a>
        break;
 8006974:	bf00      	nop
 8006976:	e004      	b.n	8006982 <update_control_loops+0x38a>
        break;
 8006978:	bf00      	nop
 800697a:	e002      	b.n	8006982 <update_control_loops+0x38a>
        break;
 800697c:	bf00      	nop
 800697e:	e000      	b.n	8006982 <update_control_loops+0x38a>
        break;
 8006980:	bf00      	nop
    }

    prismatic_axis.mm = prismatic_encoder.mm;
 8006982:	4b13      	ldr	r3, [pc, #76]	@ (80069d0 <update_control_loops+0x3d8>)
 8006984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006986:	4a13      	ldr	r2, [pc, #76]	@ (80069d4 <update_control_loops+0x3dc>)
 8006988:	6393      	str	r3, [r2, #56]	@ 0x38
    revolute_axis.deg = UnitConverter_angle(&converter_system,
 800698a:	4b13      	ldr	r3, [pc, #76]	@ (80069d8 <update_control_loops+0x3e0>)
 800698c:	edd3 7a00 	vldr	s15, [r3]
 8006990:	220e      	movs	r2, #14
 8006992:	210f      	movs	r1, #15
 8006994:	eeb0 0a67 	vmov.f32	s0, s15
 8006998:	4810      	ldr	r0, [pc, #64]	@ (80069dc <update_control_loops+0x3e4>)
 800699a:	f7fd fe99 	bl	80046d0 <UnitConverter_angle>
 800699e:	eef0 7a40 	vmov.f32	s15, s0
 80069a2:	4b03      	ldr	r3, [pc, #12]	@ (80069b0 <update_control_loops+0x3b8>)
 80069a4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
            normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 80069a8:	46bd      	mov	sp, r7
 80069aa:	ecbd 8b02 	vpop	{d8}
 80069ae:	bd98      	pop	{r3, r4, r7, pc}
 80069b0:	200002c4 	.word	0x200002c4
 80069b4:	20000348 	.word	0x20000348
 80069b8:	20000000 	.word	0x20000000
 80069bc:	20000320 	.word	0x20000320
 80069c0:	200005a0 	.word	0x200005a0
 80069c4:	200005c8 	.word	0x200005c8
 80069c8:	20000360 	.word	0x20000360
 80069cc:	20000308 	.word	0x20000308
 80069d0:	20000498 	.word	0x20000498
 80069d4:	20000280 	.word	0x20000280
 80069d8:	2000037c 	.word	0x2000037c
 80069dc:	2000088c 	.word	0x2000088c

080069e0 <check_emergency_button>:

void check_emergency_button(void) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
	// Read current state of emergency button
	bool emer_pressed = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 80069e6:	2110      	movs	r1, #16
 80069e8:	480c      	ldr	r0, [pc, #48]	@ (8006a1c <check_emergency_button+0x3c>)
 80069ea:	f005 fb2f 	bl	800c04c <HAL_GPIO_ReadPin>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	bf14      	ite	ne
 80069f4:	2301      	movne	r3, #1
 80069f6:	2300      	moveq	r3, #0
 80069f8:	71fb      	strb	r3, [r7, #7]
	// If emergency button is pressed (assuming active high)
	// Adjust the logic based on your hardware:
	// - If button is active HIGH when pressed: use == GPIO_PIN_SET
	// - If button is active LOW when pressed: use == GPIO_PIN_RESET

	if (emer_pressed == GPIO_PIN_RESET) {  // Assuming active high
 80069fa:	79fb      	ldrb	r3, [r7, #7]
 80069fc:	f083 0301 	eor.w	r3, r3, #1
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d005      	beq.n	8006a12 <check_emergency_button+0x32>
		// Emergency button is pressed - trigger hardware emergency
		if (safety_state != SAFETY_HARDWARE_EMERGENCY) {
 8006a06:	4b06      	ldr	r3, [pc, #24]	@ (8006a20 <check_emergency_button+0x40>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d001      	beq.n	8006a12 <check_emergency_button+0x32>
			trigger_hardware_emergency();
 8006a0e:	f000 f877 	bl	8006b00 <trigger_hardware_emergency>
	 // Auto-clear emergency when button released (NOT RECOMMENDED)
	 // clear_emergency_state();
	 }
	 }
	 */
}
 8006a12:	bf00      	nop
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	48000400 	.word	0x48000400
 8006a20:	2000036c 	.word	0x2000036c

08006a24 <check_safety_conditions>:

void check_safety_conditions(void) {
 8006a24:	b580      	push	{r7, lr}
 8006a26:	af00      	add	r7, sp, #0
	if (tuning_mode || safety_state != SAFETY_NORMAL || homing_active)
 8006a28:	4b16      	ldr	r3, [pc, #88]	@ (8006a84 <check_safety_conditions+0x60>)
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d127      	bne.n	8006a80 <check_safety_conditions+0x5c>
 8006a30:	4b15      	ldr	r3, [pc, #84]	@ (8006a88 <check_safety_conditions+0x64>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d123      	bne.n	8006a80 <check_safety_conditions+0x5c>
 8006a38:	4b14      	ldr	r3, [pc, #80]	@ (8006a8c <check_safety_conditions+0x68>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d11f      	bne.n	8006a80 <check_safety_conditions+0x5c>
		return;

	if (up_photo && prismatic_axis.command_pos < 0.0f) {
 8006a40:	4b13      	ldr	r3, [pc, #76]	@ (8006a90 <check_safety_conditions+0x6c>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <check_safety_conditions+0x3c>
 8006a4a:	4b12      	ldr	r3, [pc, #72]	@ (8006a94 <check_safety_conditions+0x70>)
 8006a4c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006a50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a58:	d502      	bpl.n	8006a60 <check_safety_conditions+0x3c>
		trigger_software_emergency();
 8006a5a:	f000 f81f 	bl	8006a9c <trigger_software_emergency>
		return;
 8006a5e:	e010      	b.n	8006a82 <check_safety_conditions+0x5e>
	}

	if (low_photo && prismatic_axis.command_pos > 0.0f) {
 8006a60:	4b0d      	ldr	r3, [pc, #52]	@ (8006a98 <check_safety_conditions+0x74>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00b      	beq.n	8006a82 <check_safety_conditions+0x5e>
 8006a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a94 <check_safety_conditions+0x70>)
 8006a6c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a78:	dd03      	ble.n	8006a82 <check_safety_conditions+0x5e>
		trigger_software_emergency();
 8006a7a:	f000 f80f 	bl	8006a9c <trigger_software_emergency>
		return;
 8006a7e:	e000      	b.n	8006a82 <check_safety_conditions+0x5e>
		return;
 8006a80:	bf00      	nop
	}
}
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	20000134 	.word	0x20000134
 8006a88:	2000036c 	.word	0x2000036c
 8006a8c:	2000036b 	.word	0x2000036b
 8006a90:	20000368 	.word	0x20000368
 8006a94:	20000280 	.word	0x20000280
 8006a98:	20000369 	.word	0x20000369

08006a9c <trigger_software_emergency>:

void trigger_software_emergency(void) {
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
	if (safety_state == SAFETY_NORMAL) {
 8006aa0:	4b10      	ldr	r3, [pc, #64]	@ (8006ae4 <trigger_software_emergency+0x48>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d11b      	bne.n	8006ae0 <trigger_software_emergency+0x44>
		safety_state = SAFETY_SOFTWARE_EMERGENCY;
 8006aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8006ae4 <trigger_software_emergency+0x48>)
 8006aaa:	2201      	movs	r2, #1
 8006aac:	701a      	strb	r2, [r3, #0]
		emergency_stop_all_motors();
 8006aae:	f000 f88f 	bl	8006bd0 <emergency_stop_all_motors>
		safety_toggle_timer = 0;
 8006ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae8 <trigger_software_emergency+0x4c>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	601a      	str	r2, [r3, #0]
		pilot_light_state = false;
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8006aec <trigger_software_emergency+0x50>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 8006abe:	4b0c      	ldr	r3, [pc, #48]	@ (8006af0 <trigger_software_emergency+0x54>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 8006ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8006af4 <trigger_software_emergency+0x58>)
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 8006acc:	4b0a      	ldr	r3, [pc, #40]	@ (8006af8 <trigger_software_emergency+0x5c>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		// Exit joy mode if active
		if (joy_mode_active) {
 8006ad4:	4b09      	ldr	r3, [pc, #36]	@ (8006afc <trigger_software_emergency+0x60>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <trigger_software_emergency+0x44>
			exit_joy_mode();
 8006adc:	f000 f9c2 	bl	8006e64 <exit_joy_mode>
		}
	}
}
 8006ae0:	bf00      	nop
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	2000036c 	.word	0x2000036c
 8006ae8:	20000370 	.word	0x20000370
 8006aec:	20000374 	.word	0x20000374
 8006af0:	20000308 	.word	0x20000308
 8006af4:	20000280 	.word	0x20000280
 8006af8:	200002c4 	.word	0x200002c4
 8006afc:	20000385 	.word	0x20000385

08006b00 <trigger_hardware_emergency>:

void trigger_hardware_emergency(void) {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	af00      	add	r7, sp, #0
	safety_state = SAFETY_HARDWARE_EMERGENCY;
 8006b04:	4b13      	ldr	r3, [pc, #76]	@ (8006b54 <trigger_hardware_emergency+0x54>)
 8006b06:	2202      	movs	r2, #2
 8006b08:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = true;
 8006b0a:	4b13      	ldr	r3, [pc, #76]	@ (8006b58 <trigger_hardware_emergency+0x58>)
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	701a      	strb	r2, [r3, #0]
	emergency_stop_all_motors();
 8006b10:	f000 f85e 	bl	8006bd0 <emergency_stop_all_motors>
	safety_toggle_timer = 0;
 8006b14:	4b11      	ldr	r3, [pc, #68]	@ (8006b5c <trigger_hardware_emergency+0x5c>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 8006b1a:	4b11      	ldr	r3, [pc, #68]	@ (8006b60 <trigger_hardware_emergency+0x60>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	701a      	strb	r2, [r3, #0]
	homing_active = false;
 8006b20:	4b10      	ldr	r3, [pc, #64]	@ (8006b64 <trigger_hardware_emergency+0x64>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	701a      	strb	r2, [r3, #0]
	homing_state = HOMING_IDLE;
 8006b26:	4b10      	ldr	r3, [pc, #64]	@ (8006b68 <trigger_hardware_emergency+0x68>)
 8006b28:	2200      	movs	r2, #0
 8006b2a:	701a      	strb	r2, [r3, #0]
	motion_sequence_state = MOTION_IDLE;
 8006b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8006b6c <trigger_hardware_emergency+0x6c>)
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8006b32:	4b0f      	ldr	r3, [pc, #60]	@ (8006b70 <trigger_hardware_emergency+0x70>)
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8006b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8006b74 <trigger_hardware_emergency+0x74>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Exit joy mode if active
	if (joy_mode_active) {
 8006b42:	4b0d      	ldr	r3, [pc, #52]	@ (8006b78 <trigger_hardware_emergency+0x78>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <trigger_hardware_emergency+0x4e>
		exit_joy_mode();
 8006b4a:	f000 f98b 	bl	8006e64 <exit_joy_mode>
	}
}
 8006b4e:	bf00      	nop
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	2000036c 	.word	0x2000036c
 8006b58:	20000375 	.word	0x20000375
 8006b5c:	20000370 	.word	0x20000370
 8006b60:	20000374 	.word	0x20000374
 8006b64:	2000036b 	.word	0x2000036b
 8006b68:	2000036a 	.word	0x2000036a
 8006b6c:	20000308 	.word	0x20000308
 8006b70:	20000280 	.word	0x20000280
 8006b74:	200002c4 	.word	0x200002c4
 8006b78:	20000385 	.word	0x20000385

08006b7c <clear_emergency_state>:

void clear_emergency_state(void) {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	af00      	add	r7, sp, #0
	safety_state = SAFETY_NORMAL;
 8006b80:	4b0d      	ldr	r3, [pc, #52]	@ (8006bb8 <clear_emergency_state+0x3c>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8006b86:	4b0d      	ldr	r3, [pc, #52]	@ (8006bbc <clear_emergency_state+0x40>)
 8006b88:	2200      	movs	r2, #0
 8006b8a:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 8006b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc0 <clear_emergency_state+0x44>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 8006b92:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc4 <clear_emergency_state+0x48>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006ba2:	f005 fa6b 	bl	800c07c <HAL_GPIO_WritePin>
	up_photo = false;
 8006ba6:	4b08      	ldr	r3, [pc, #32]	@ (8006bc8 <clear_emergency_state+0x4c>)
 8006ba8:	2200      	movs	r2, #0
 8006baa:	701a      	strb	r2, [r3, #0]
	low_photo = false;
 8006bac:	4b07      	ldr	r3, [pc, #28]	@ (8006bcc <clear_emergency_state+0x50>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	701a      	strb	r2, [r3, #0]
}
 8006bb2:	bf00      	nop
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	2000036c 	.word	0x2000036c
 8006bbc:	20000375 	.word	0x20000375
 8006bc0:	20000370 	.word	0x20000370
 8006bc4:	20000374 	.word	0x20000374
 8006bc8:	20000368 	.word	0x20000368
 8006bcc:	20000369 	.word	0x20000369

08006bd0 <emergency_stop_all_motors>:

void emergency_stop_all_motors(void) {
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
	MDXX_set_range(&prismatic_motor, 2000, 0);
 8006bd4:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8006c34 <emergency_stop_all_motors+0x64>
 8006bd8:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8006c38 <emergency_stop_all_motors+0x68>
 8006bdc:	4817      	ldr	r0, [pc, #92]	@ (8006c3c <emergency_stop_all_motors+0x6c>)
 8006bde:	f7fa fbf3 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8006be2:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8006c34 <emergency_stop_all_motors+0x64>
 8006be6:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8006c38 <emergency_stop_all_motors+0x68>
 8006bea:	4815      	ldr	r0, [pc, #84]	@ (8006c40 <emergency_stop_all_motors+0x70>)
 8006bec:	f7fa fbec 	bl	80013c8 <MDXX_set_range>

	prismatic_axis.command_pos = 0.0f;
 8006bf0:	4b14      	ldr	r3, [pc, #80]	@ (8006c44 <emergency_stop_all_motors+0x74>)
 8006bf2:	f04f 0200 	mov.w	r2, #0
 8006bf6:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8006bf8:	4b13      	ldr	r3, [pc, #76]	@ (8006c48 <emergency_stop_all_motors+0x78>)
 8006bfa:	f04f 0200 	mov.w	r2, #0
 8006bfe:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8006c00:	4b10      	ldr	r3, [pc, #64]	@ (8006c44 <emergency_stop_all_motors+0x74>)
 8006c02:	f04f 0200 	mov.w	r2, #0
 8006c06:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8006c08:	4b0f      	ldr	r3, [pc, #60]	@ (8006c48 <emergency_stop_all_motors+0x78>)
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	629a      	str	r2, [r3, #40]	@ 0x28

	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8006c10:	480e      	ldr	r0, [pc, #56]	@ (8006c4c <emergency_stop_all_motors+0x7c>)
 8006c12:	f7fa fb93 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8006c16:	480e      	ldr	r0, [pc, #56]	@ (8006c50 <emergency_stop_all_motors+0x80>)
 8006c18:	f7fa fb90 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8006c1c:	480d      	ldr	r0, [pc, #52]	@ (8006c54 <emergency_stop_all_motors+0x84>)
 8006c1e:	f7fa fb8d 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006c22:	480d      	ldr	r0, [pc, #52]	@ (8006c58 <emergency_stop_all_motors+0x88>)
 8006c24:	f7fa fb8a 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006c28:	480b      	ldr	r0, [pc, #44]	@ (8006c58 <emergency_stop_all_motors+0x88>)
 8006c2a:	f7fa fb87 	bl	800133c <PID_CONTROLLER_Reset>
}
 8006c2e:	bf00      	nop
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	00000000 	.word	0x00000000
 8006c38:	44fa0000 	.word	0x44fa0000
 8006c3c:	20000400 	.word	0x20000400
 8006c40:	2000044c 	.word	0x2000044c
 8006c44:	20000280 	.word	0x20000280
 8006c48:	200002c4 	.word	0x200002c4
 8006c4c:	20000550 	.word	0x20000550
 8006c50:	20000578 	.word	0x20000578
 8006c54:	200005a0 	.word	0x200005a0
 8006c58:	200005c8 	.word	0x200005c8

08006c5c <update_safety_system>:

void update_safety_system(void) {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
	// Don't control pilot light if joy mode is active
	if (joy_mode_active) {
 8006c60:	4b3a      	ldr	r3, [pc, #232]	@ (8006d4c <update_safety_system+0xf0>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d16e      	bne.n	8006d46 <update_safety_system+0xea>
		return; // Let joy mode handle pilot light
	}

	if (safety_state == SAFETY_SOFTWARE_EMERGENCY) {
 8006c68:	4b39      	ldr	r3, [pc, #228]	@ (8006d50 <update_safety_system+0xf4>)
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d11f      	bne.n	8006cb0 <update_safety_system+0x54>
		if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8006c70:	4b38      	ldr	r3, [pc, #224]	@ (8006d54 <update_safety_system+0xf8>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3301      	adds	r3, #1
 8006c76:	4a37      	ldr	r2, [pc, #220]	@ (8006d54 <update_safety_system+0xf8>)
 8006c78:	6013      	str	r3, [r2, #0]
 8006c7a:	2bf9      	cmp	r3, #249	@ 0xf9
 8006c7c:	d918      	bls.n	8006cb0 <update_safety_system+0x54>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8006c7e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006c82:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006c86:	f005 fa11 	bl	800c0ac <HAL_GPIO_TogglePin>
			pilot_light_state = !pilot_light_state;
 8006c8a:	4b33      	ldr	r3, [pc, #204]	@ (8006d58 <update_safety_system+0xfc>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	bf14      	ite	ne
 8006c94:	2301      	movne	r3, #1
 8006c96:	2300      	moveq	r3, #0
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	f083 0301 	eor.w	r3, r3, #1
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8006d58 <update_safety_system+0xfc>)
 8006ca8:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8006caa:	4b2a      	ldr	r3, [pc, #168]	@ (8006d54 <update_safety_system+0xf8>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_HARDWARE_EMERGENCY) {
 8006cb0:	4b27      	ldr	r3, [pc, #156]	@ (8006d50 <update_safety_system+0xf4>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d134      	bne.n	8006d22 <update_safety_system+0xc6>
		if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_SET) {
 8006cb8:	2110      	movs	r1, #16
 8006cba:	4828      	ldr	r0, [pc, #160]	@ (8006d5c <update_safety_system+0x100>)
 8006cbc:	f005 f9c6 	bl	800c04c <HAL_GPIO_ReadPin>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d120      	bne.n	8006d08 <update_safety_system+0xac>
			if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8006cc6:	4b23      	ldr	r3, [pc, #140]	@ (8006d54 <update_safety_system+0xf8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	4a21      	ldr	r2, [pc, #132]	@ (8006d54 <update_safety_system+0xf8>)
 8006cce:	6013      	str	r3, [r2, #0]
 8006cd0:	2bf9      	cmp	r3, #249	@ 0xf9
 8006cd2:	d926      	bls.n	8006d22 <update_safety_system+0xc6>
				HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8006cd4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006cd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006cdc:	f005 f9e6 	bl	800c0ac <HAL_GPIO_TogglePin>
				pilot_light_state = !pilot_light_state;
 8006ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8006d58 <update_safety_system+0xfc>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	bf14      	ite	ne
 8006cea:	2301      	movne	r3, #1
 8006cec:	2300      	moveq	r3, #0
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	f083 0301 	eor.w	r3, r3, #1
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	f003 0301 	and.w	r3, r3, #1
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	4b16      	ldr	r3, [pc, #88]	@ (8006d58 <update_safety_system+0xfc>)
 8006cfe:	701a      	strb	r2, [r3, #0]
				safety_toggle_timer = 0;
 8006d00:	4b14      	ldr	r3, [pc, #80]	@ (8006d54 <update_safety_system+0xf8>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	e00c      	b.n	8006d22 <update_safety_system+0xc6>
			}
		} else {
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006d12:	f005 f9b3 	bl	800c07c <HAL_GPIO_WritePin>
			pilot_light_state = false;
 8006d16:	4b10      	ldr	r3, [pc, #64]	@ (8006d58 <update_safety_system+0xfc>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8006d1c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d54 <update_safety_system+0xf8>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_NORMAL) {
 8006d22:	4b0b      	ldr	r3, [pc, #44]	@ (8006d50 <update_safety_system+0xf4>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10e      	bne.n	8006d48 <update_safety_system+0xec>
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006d34:	f005 f9a2 	bl	800c07c <HAL_GPIO_WritePin>
		pilot_light_state = false;
 8006d38:	4b07      	ldr	r3, [pc, #28]	@ (8006d58 <update_safety_system+0xfc>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	701a      	strb	r2, [r3, #0]
		safety_toggle_timer = 0;
 8006d3e:	4b05      	ldr	r3, [pc, #20]	@ (8006d54 <update_safety_system+0xf8>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]
 8006d44:	e000      	b.n	8006d48 <update_safety_system+0xec>
		return; // Let joy mode handle pilot light
 8006d46:	bf00      	nop
	}
}
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000385 	.word	0x20000385
 8006d50:	2000036c 	.word	0x2000036c
 8006d54:	20000370 	.word	0x20000370
 8006d58:	20000374 	.word	0x20000374
 8006d5c:	48000400 	.word	0x48000400

08006d60 <is_emergency_active>:

bool is_emergency_active(void) {
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
	return (safety_state != SAFETY_NORMAL);
 8006d64:	4b05      	ldr	r3, [pc, #20]	@ (8006d7c <is_emergency_active+0x1c>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	bf14      	ite	ne
 8006d6c:	2301      	movne	r3, #1
 8006d6e:	2300      	moveq	r3, #0
 8006d70:	b2db      	uxtb	r3, r3
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	2000036c 	.word	0x2000036c

08006d80 <enter_joy_mode>:

void enter_joy_mode(void) {
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 8006d84:	f7ff ffec 	bl	8006d60 <is_emergency_active>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d14c      	bne.n	8006e28 <enter_joy_mode+0xa8>
 8006d8e:	4b27      	ldr	r3, [pc, #156]	@ (8006e2c <enter_joy_mode+0xac>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d148      	bne.n	8006e28 <enter_joy_mode+0xa8>
 8006d96:	4b26      	ldr	r3, [pc, #152]	@ (8006e30 <enter_joy_mode+0xb0>)
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d144      	bne.n	8006e28 <enter_joy_mode+0xa8>
		return;
	}

	joy_mode_active = true;
 8006d9e:	4b24      	ldr	r3, [pc, #144]	@ (8006e30 <enter_joy_mode+0xb0>)
 8006da0:	2201      	movs	r2, #1
 8006da2:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_INITIAL_CONTROL; // Start in initial control state
 8006da4:	4b23      	ldr	r3, [pc, #140]	@ (8006e34 <enter_joy_mode+0xb4>)
 8006da6:	2201      	movs	r2, #1
 8006da8:	701a      	strb	r2, [r3, #0]

	// Reset all joy mode data
	reset_joy_mode_data();
 8006daa:	f000 f95f 	bl	800706c <reset_joy_mode_data>

	// Turn on pilot light to indicate joy mode
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8006dae:	2201      	movs	r2, #1
 8006db0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006db4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006db8:	f005 f960 	bl	800c07c <HAL_GPIO_WritePin>
	joy_mode_pilot_state = true;
 8006dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8006e38 <enter_joy_mode+0xb8>)
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 8006dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8006e3c <enter_joy_mode+0xbc>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]

	// Stop any current motion
	motion_sequence_state = MOTION_IDLE;
 8006dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8006e40 <enter_joy_mode+0xc0>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8006dce:	4b1d      	ldr	r3, [pc, #116]	@ (8006e44 <enter_joy_mode+0xc4>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8006dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8006e48 <enter_joy_mode+0xc8>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Initialize position holding at current positions
	prismatic_axis.position = prismatic_encoder.mm;
 8006dde:	4b1b      	ldr	r3, [pc, #108]	@ (8006e4c <enter_joy_mode+0xcc>)
 8006de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006de2:	4a18      	ldr	r2, [pc, #96]	@ (8006e44 <enter_joy_mode+0xc4>)
 8006de4:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8006de6:	4b1a      	ldr	r3, [pc, #104]	@ (8006e50 <enter_joy_mode+0xd0>)
 8006de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dea:	4a17      	ldr	r2, [pc, #92]	@ (8006e48 <enter_joy_mode+0xc8>)
 8006dec:	6013      	str	r3, [r2, #0]

	// Reset motor commands
	prismatic_axis.command_pos = 0.0f;
 8006dee:	4b15      	ldr	r3, [pc, #84]	@ (8006e44 <enter_joy_mode+0xc4>)
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8006df6:	4b14      	ldr	r3, [pc, #80]	@ (8006e48 <enter_joy_mode+0xc8>)
 8006df8:	f04f 0200 	mov.w	r2, #0
 8006dfc:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8006dfe:	4b11      	ldr	r3, [pc, #68]	@ (8006e44 <enter_joy_mode+0xc4>)
 8006e00:	f04f 0200 	mov.w	r2, #0
 8006e04:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8006e06:	4b10      	ldr	r3, [pc, #64]	@ (8006e48 <enter_joy_mode+0xc8>)
 8006e08:	f04f 0200 	mov.w	r2, #0
 8006e0c:	629a      	str	r2, [r3, #40]	@ 0x28

	// Reset PID controllers
	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8006e0e:	4811      	ldr	r0, [pc, #68]	@ (8006e54 <enter_joy_mode+0xd4>)
 8006e10:	f7fa fa94 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8006e14:	4810      	ldr	r0, [pc, #64]	@ (8006e58 <enter_joy_mode+0xd8>)
 8006e16:	f7fa fa91 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8006e1a:	4810      	ldr	r0, [pc, #64]	@ (8006e5c <enter_joy_mode+0xdc>)
 8006e1c:	f7fa fa8e 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006e20:	480f      	ldr	r0, [pc, #60]	@ (8006e60 <enter_joy_mode+0xe0>)
 8006e22:	f7fa fa8b 	bl	800133c <PID_CONTROLLER_Reset>
 8006e26:	e000      	b.n	8006e2a <enter_joy_mode+0xaa>
		return;
 8006e28:	bf00      	nop
}
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	2000036b 	.word	0x2000036b
 8006e30:	20000385 	.word	0x20000385
 8006e34:	20000384 	.word	0x20000384
 8006e38:	200003e0 	.word	0x200003e0
 8006e3c:	200003dc 	.word	0x200003dc
 8006e40:	20000308 	.word	0x20000308
 8006e44:	20000280 	.word	0x20000280
 8006e48:	200002c4 	.word	0x200002c4
 8006e4c:	20000498 	.word	0x20000498
 8006e50:	200004f4 	.word	0x200004f4
 8006e54:	20000550 	.word	0x20000550
 8006e58:	20000578 	.word	0x20000578
 8006e5c:	200005a0 	.word	0x200005a0
 8006e60:	200005c8 	.word	0x200005c8

08006e64 <exit_joy_mode>:

/* Updated exit joy mode to handle cleanup properly */
void exit_joy_mode(void) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
	joy_mode_active = false;
 8006e68:	4b31      	ldr	r3, [pc, #196]	@ (8006f30 <exit_joy_mode+0xcc>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_IDLE;
 8006e6e:	4b31      	ldr	r3, [pc, #196]	@ (8006f34 <exit_joy_mode+0xd0>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	701a      	strb	r2, [r3, #0]

	// Reset all data
	reset_joy_mode_data();
 8006e74:	f000 f8fa 	bl	800706c <reset_joy_mode_data>

	// Turn off pilot light
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006e7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006e82:	f005 f8fb 	bl	800c07c <HAL_GPIO_WritePin>
	joy_mode_pilot_state = false;
 8006e86:	4b2c      	ldr	r3, [pc, #176]	@ (8006f38 <exit_joy_mode+0xd4>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 8006e8c:	4b2b      	ldr	r3, [pc, #172]	@ (8006f3c <exit_joy_mode+0xd8>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]

	// DON'T stop motors - hold current position
	// Set current positions as target positions for holding
	prismatic_axis.position = prismatic_encoder.mm;
 8006e92:	4b2b      	ldr	r3, [pc, #172]	@ (8006f40 <exit_joy_mode+0xdc>)
 8006e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e96:	4a2b      	ldr	r2, [pc, #172]	@ (8006f44 <exit_joy_mode+0xe0>)
 8006e98:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8006e9a:	4b2b      	ldr	r3, [pc, #172]	@ (8006f48 <exit_joy_mode+0xe4>)
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9e:	4a2b      	ldr	r2, [pc, #172]	@ (8006f4c <exit_joy_mode+0xe8>)
 8006ea0:	6013      	str	r3, [r2, #0]

	// Reset velocities and feedforward terms
	prismatic_axis.command_vel = 0.0f;
 8006ea2:	4b28      	ldr	r3, [pc, #160]	@ (8006f44 <exit_joy_mode+0xe0>)
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8006eaa:	4b28      	ldr	r3, [pc, #160]	@ (8006f4c <exit_joy_mode+0xe8>)
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	629a      	str	r2, [r3, #40]	@ 0x28
	prismatic_axis.ffd = 0.0f;
 8006eb2:	4b24      	ldr	r3, [pc, #144]	@ (8006f44 <exit_joy_mode+0xe0>)
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_axis.dfd = 0.0f;
 8006eba:	4b22      	ldr	r3, [pc, #136]	@ (8006f44 <exit_joy_mode+0xe0>)
 8006ebc:	f04f 0200 	mov.w	r2, #0
 8006ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
	revolute_axis.ffd = 0.0f;
 8006ec2:	4b22      	ldr	r3, [pc, #136]	@ (8006f4c <exit_joy_mode+0xe8>)
 8006ec4:	f04f 0200 	mov.w	r2, #0
 8006ec8:	631a      	str	r2, [r3, #48]	@ 0x30

	// Keep DFD for revolute axis (gravity compensation)
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006eca:	4b1f      	ldr	r3, [pc, #124]	@ (8006f48 <exit_joy_mode+0xe4>)
 8006ecc:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f40 <exit_joy_mode+0xdc>)
 8006ed2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006ed6:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8006f50 <exit_joy_mode+0xec>
 8006eda:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006ede:	eef0 0a66 	vmov.f32	s1, s13
 8006ee2:	eeb0 0a47 	vmov.f32	s0, s14
 8006ee6:	481b      	ldr	r0, [pc, #108]	@ (8006f54 <exit_joy_mode+0xf0>)
 8006ee8:	f7fa fbe9 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8006eec:	eef0 7a40 	vmov.f32	s15, s0
 8006ef0:	4b16      	ldr	r3, [pc, #88]	@ (8006f4c <exit_joy_mode+0xe8>)
 8006ef2:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Reset PID controllers
	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8006ef6:	4818      	ldr	r0, [pc, #96]	@ (8006f58 <exit_joy_mode+0xf4>)
 8006ef8:	f7fa fa20 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8006efc:	4817      	ldr	r0, [pc, #92]	@ (8006f5c <exit_joy_mode+0xf8>)
 8006efe:	f7fa fa1d 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8006f02:	4817      	ldr	r0, [pc, #92]	@ (8006f60 <exit_joy_mode+0xfc>)
 8006f04:	f7fa fa1a 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006f08:	4816      	ldr	r0, [pc, #88]	@ (8006f64 <exit_joy_mode+0x100>)
 8006f0a:	f7fa fa17 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006f0e:	4815      	ldr	r0, [pc, #84]	@ (8006f64 <exit_joy_mode+0x100>)
 8006f10:	f7fa fa14 	bl	800133c <PID_CONTROLLER_Reset>

	// Reset motion state
	motion_sequence_state = MOTION_IDLE;
 8006f14:	4b14      	ldr	r3, [pc, #80]	@ (8006f68 <exit_joy_mode+0x104>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8006f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f44 <exit_joy_mode+0xe0>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8006f22:	4b0a      	ldr	r3, [pc, #40]	@ (8006f4c <exit_joy_mode+0xe8>)
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8006f2a:	bf00      	nop
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20000385 	.word	0x20000385
 8006f34:	20000384 	.word	0x20000384
 8006f38:	200003e0 	.word	0x200003e0
 8006f3c:	200003dc 	.word	0x200003dc
 8006f40:	20000498 	.word	0x20000498
 8006f44:	20000280 	.word	0x20000280
 8006f48:	200004f4 	.word	0x200004f4
 8006f4c:	200002c4 	.word	0x200002c4
 8006f50:	447a0000 	.word	0x447a0000
 8006f54:	20000628 	.word	0x20000628
 8006f58:	20000550 	.word	0x20000550
 8006f5c:	20000578 	.word	0x20000578
 8006f60:	200005a0 	.word	0x200005a0
 8006f64:	200005c8 	.word	0x200005c8
 8006f68:	20000308 	.word	0x20000308

08006f6c <save_current_position>:

void save_current_position(void) {
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
	if (saved_position_count < JOY_MODE_MAX_POSITIONS) {
 8006f70:	4b15      	ldr	r3, [pc, #84]	@ (8006fc8 <save_current_position+0x5c>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b09      	cmp	r3, #9
 8006f76:	d822      	bhi.n	8006fbe <save_current_position+0x52>
		saved_positions[saved_position_count].prismatic_pos =
 8006f78:	4b13      	ldr	r3, [pc, #76]	@ (8006fc8 <save_current_position+0x5c>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	4618      	mov	r0, r3
				prismatic_encoder.mm;
 8006f7e:	4b13      	ldr	r3, [pc, #76]	@ (8006fcc <save_current_position+0x60>)
 8006f80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
		saved_positions[saved_position_count].prismatic_pos =
 8006f82:	4913      	ldr	r1, [pc, #76]	@ (8006fd0 <save_current_position+0x64>)
 8006f84:	00c3      	lsls	r3, r0, #3
 8006f86:	440b      	add	r3, r1
 8006f88:	601a      	str	r2, [r3, #0]
		saved_positions[saved_position_count].revolute_pos =
 8006f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006fc8 <save_current_position+0x5c>)
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	4618      	mov	r0, r3
				revolute_encoder.rads;
 8006f90:	4b10      	ldr	r3, [pc, #64]	@ (8006fd4 <save_current_position+0x68>)
 8006f92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
		saved_positions[saved_position_count].revolute_pos =
 8006f94:	490e      	ldr	r1, [pc, #56]	@ (8006fd0 <save_current_position+0x64>)
 8006f96:	00c3      	lsls	r3, r0, #3
 8006f98:	440b      	add	r3, r1
 8006f9a:	3304      	adds	r3, #4
 8006f9c:	601a      	str	r2, [r3, #0]
		saved_position_count++;
 8006f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006fc8 <save_current_position+0x5c>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	4b08      	ldr	r3, [pc, #32]	@ (8006fc8 <save_current_position+0x5c>)
 8006fa8:	701a      	strb	r2, [r3, #0]

		if (saved_position_count >= JOY_MODE_MAX_POSITIONS) {
 8006faa:	4b07      	ldr	r3, [pc, #28]	@ (8006fc8 <save_current_position+0x5c>)
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	2b09      	cmp	r3, #9
 8006fb0:	d905      	bls.n	8006fbe <save_current_position+0x52>
			// All 10 positions saved, start pilot toggling
			joy_mode_state = JOY_MODE_POSITION_SAVED;
 8006fb2:	4b09      	ldr	r3, [pc, #36]	@ (8006fd8 <save_current_position+0x6c>)
 8006fb4:	2203      	movs	r2, #3
 8006fb6:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 8006fb8:	4b08      	ldr	r3, [pc, #32]	@ (8006fdc <save_current_position+0x70>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]
		}
	}
}
 8006fbe:	bf00      	nop
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr
 8006fc8:	200003d8 	.word	0x200003d8
 8006fcc:	20000498 	.word	0x20000498
 8006fd0:	20000388 	.word	0x20000388
 8006fd4:	200004f4 	.word	0x200004f4
 8006fd8:	20000384 	.word	0x20000384
 8006fdc:	200003dc 	.word	0x200003dc

08006fe0 <start_position_playback>:

void start_position_playback(void) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
	if (saved_position_count > 0) {
 8006fe6:	4b19      	ldr	r3, [pc, #100]	@ (800704c <start_position_playback+0x6c>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d02a      	beq.n	8007044 <start_position_playback+0x64>
		joy_mode_state = JOY_MODE_PLAYBACK;
 8006fee:	4b18      	ldr	r3, [pc, #96]	@ (8007050 <start_position_playback+0x70>)
 8006ff0:	2204      	movs	r2, #4
 8006ff2:	701a      	strb	r2, [r3, #0]
		playback_position_index = 0;
 8006ff4:	4b17      	ldr	r3, [pc, #92]	@ (8007054 <start_position_playback+0x74>)
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	701a      	strb	r2, [r3, #0]
		joy_mode_playback_timer = 0;
 8006ffa:	4b17      	ldr	r3, [pc, #92]	@ (8007058 <start_position_playback+0x78>)
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	601a      	str	r2, [r3, #0]

		// Keep pilot light ON during playback (don't turn it off)
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8007000:	2201      	movs	r2, #1
 8007002:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007006:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800700a:	f005 f837 	bl	800c07c <HAL_GPIO_WritePin>
		joy_mode_pilot_state = true;
 800700e:	4b13      	ldr	r3, [pc, #76]	@ (800705c <start_position_playback+0x7c>)
 8007010:	2201      	movs	r2, #1
 8007012:	701a      	strb	r2, [r3, #0]

		// Start first trajectory
		float target_pris = saved_positions[0].prismatic_pos;
 8007014:	4b12      	ldr	r3, [pc, #72]	@ (8007060 <start_position_playback+0x80>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	60fb      	str	r3, [r7, #12]
		float target_rev_rad = saved_positions[0].revolute_pos;
 800701a:	4b11      	ldr	r3, [pc, #68]	@ (8007060 <start_position_playback+0x80>)
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	60bb      	str	r3, [r7, #8]
		float target_rev_deg = target_rev_rad * 180.0f / PI;
 8007020:	edd7 7a02 	vldr	s15, [r7, #8]
 8007024:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007064 <start_position_playback+0x84>
 8007028:	ee27 7a87 	vmul.f32	s14, s15, s14
 800702c:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007068 <start_position_playback+0x88>
 8007030:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007034:	edc7 7a01 	vstr	s15, [r7, #4]

		start_combined_trajectory(target_pris, target_rev_deg);
 8007038:	edd7 0a01 	vldr	s1, [r7, #4]
 800703c:	ed97 0a03 	vldr	s0, [r7, #12]
 8007040:	f7fe fece 	bl	8005de0 <start_combined_trajectory>
	}
}
 8007044:	bf00      	nop
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	200003d8 	.word	0x200003d8
 8007050:	20000384 	.word	0x20000384
 8007054:	200003d9 	.word	0x200003d9
 8007058:	200003e4 	.word	0x200003e4
 800705c:	200003e0 	.word	0x200003e0
 8007060:	20000388 	.word	0x20000388
 8007064:	43340000 	.word	0x43340000
 8007068:	40490fdb 	.word	0x40490fdb

0800706c <reset_joy_mode_data>:

void reset_joy_mode_data(void) {
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
	// Reset saved position count
	saved_position_count = 0;
 8007072:	4b19      	ldr	r3, [pc, #100]	@ (80070d8 <reset_joy_mode_data+0x6c>)
 8007074:	2200      	movs	r2, #0
 8007076:	701a      	strb	r2, [r3, #0]

	// Reset playback index
	playback_position_index = 0;
 8007078:	4b18      	ldr	r3, [pc, #96]	@ (80070dc <reset_joy_mode_data+0x70>)
 800707a:	2200      	movs	r2, #0
 800707c:	701a      	strb	r2, [r3, #0]

	// Clear all saved positions
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 800707e:	2300      	movs	r3, #0
 8007080:	607b      	str	r3, [r7, #4]
 8007082:	e011      	b.n	80070a8 <reset_joy_mode_data+0x3c>
		saved_positions[i].prismatic_pos = 0.0f;
 8007084:	4a16      	ldr	r2, [pc, #88]	@ (80070e0 <reset_joy_mode_data+0x74>)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	00db      	lsls	r3, r3, #3
 800708a:	4413      	add	r3, r2
 800708c:	f04f 0200 	mov.w	r2, #0
 8007090:	601a      	str	r2, [r3, #0]
		saved_positions[i].revolute_pos = 0.0f;
 8007092:	4a13      	ldr	r2, [pc, #76]	@ (80070e0 <reset_joy_mode_data+0x74>)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	4413      	add	r3, r2
 800709a:	3304      	adds	r3, #4
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	3301      	adds	r3, #1
 80070a6:	607b      	str	r3, [r7, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b09      	cmp	r3, #9
 80070ac:	ddea      	ble.n	8007084 <reset_joy_mode_data+0x18>
	}

	// Reset pilot light timers
	joy_mode_pilot_timer = 0;
 80070ae:	4b0d      	ldr	r3, [pc, #52]	@ (80070e4 <reset_joy_mode_data+0x78>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	601a      	str	r2, [r3, #0]
	joy_mode_pilot_state = false;
 80070b4:	4b0c      	ldr	r3, [pc, #48]	@ (80070e8 <reset_joy_mode_data+0x7c>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	701a      	strb	r2, [r3, #0]

	// Reset playback timer
	joy_mode_playback_timer = 0;
 80070ba:	4b0c      	ldr	r3, [pc, #48]	@ (80070ec <reset_joy_mode_data+0x80>)
 80070bc:	2200      	movs	r2, #0
 80070be:	601a      	str	r2, [r3, #0]

	// Reset button states
	joy_mode_b2_pressed = false;
 80070c0:	4b0b      	ldr	r3, [pc, #44]	@ (80070f0 <reset_joy_mode_data+0x84>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	701a      	strb	r2, [r3, #0]
	joy_mode_b2_last_state = false;
 80070c6:	4b0b      	ldr	r3, [pc, #44]	@ (80070f4 <reset_joy_mode_data+0x88>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	701a      	strb	r2, [r3, #0]
}
 80070cc:	bf00      	nop
 80070ce:	370c      	adds	r7, #12
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	200003d8 	.word	0x200003d8
 80070dc:	200003d9 	.word	0x200003d9
 80070e0:	20000388 	.word	0x20000388
 80070e4:	200003dc 	.word	0x200003dc
 80070e8:	200003e0 	.word	0x200003e0
 80070ec:	200003e4 	.word	0x200003e4
 80070f0:	200003e8 	.word	0x200003e8
 80070f4:	200003e9 	.word	0x200003e9

080070f8 <update_joy_mode_velocity_control>:

void update_joy_mode_velocity_control(void) {
 80070f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070fc:	ed2d 8b02 	vpush	{d8}
 8007100:	b08d      	sub	sp, #52	@ 0x34
 8007102:	af00      	add	r7, sp, #0
	// Read current photo sensor states directly
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 8007104:	2101      	movs	r1, #1
 8007106:	48a7      	ldr	r0, [pc, #668]	@ (80073a4 <update_joy_mode_velocity_control+0x2ac>)
 8007108:	f004 ffa0 	bl	800c04c <HAL_GPIO_ReadPin>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	bf14      	ite	ne
 8007112:	2301      	movne	r3, #1
 8007114:	2300      	moveq	r3, #0
 8007116:	76fb      	strb	r3, [r7, #27]
			UPPER_PHOTO_Pin);
	bool low_photo_detected = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8007118:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800711c:	48a1      	ldr	r0, [pc, #644]	@ (80073a4 <update_joy_mode_velocity_control+0x2ac>)
 800711e:	f004 ff95 	bl	800c04c <HAL_GPIO_ReadPin>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	bf14      	ite	ne
 8007128:	2301      	movne	r3, #1
 800712a:	2300      	moveq	r3, #0
 800712c:	76bb      	strb	r3, [r7, #26]
			LOWER_PHOTO_Pin);

	// Prismatic axis control based on joystick_x
	float pris_command_vel = 0.0f;
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	62fb      	str	r3, [r7, #44]	@ 0x2c
	bool pris_moving = false;
 8007134:	2300      	movs	r3, #0
 8007136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	static bool pris_was_moving = false; // Track previous moving state

	// Process prismatic axis joystick control (FIXED LOGIC)
	if (up_photo_detected && joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 800713a:	7efb      	ldrb	r3, [r7, #27]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00d      	beq.n	800715c <update_joy_mode_velocity_control+0x64>
 8007140:	4b99      	ldr	r3, [pc, #612]	@ (80073a8 <update_joy_mode_velocity_control+0x2b0>)
 8007142:	edd3 7a00 	vldr	s15, [r3]
 8007146:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80073ac <update_joy_mode_velocity_control+0x2b4>
 800714a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800714e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007152:	dd03      	ble.n	800715c <update_joy_mode_velocity_control+0x64>
		// At up photo and trying to go up (negative direction) - block movement
		pris_command_vel = 0.0f;
 8007154:	f04f 0300 	mov.w	r3, #0
 8007158:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800715a:	e048      	b.n	80071ee <update_joy_mode_velocity_control+0xf6>
	} else if (low_photo_detected && joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 800715c:	7ebb      	ldrb	r3, [r7, #26]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00d      	beq.n	800717e <update_joy_mode_velocity_control+0x86>
 8007162:	4b91      	ldr	r3, [pc, #580]	@ (80073a8 <update_joy_mode_velocity_control+0x2b0>)
 8007164:	edd3 7a00 	vldr	s15, [r3]
 8007168:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80073b0 <update_joy_mode_velocity_control+0x2b8>
 800716c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007174:	d503      	bpl.n	800717e <update_joy_mode_velocity_control+0x86>
		// At low photo and trying to go down (positive direction) - block movement
		pris_command_vel = 0.0f;
 8007176:	f04f 0300 	mov.w	r3, #0
 800717a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800717c:	e037      	b.n	80071ee <update_joy_mode_velocity_control+0xf6>
	} else if (joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 800717e:	4b8a      	ldr	r3, [pc, #552]	@ (80073a8 <update_joy_mode_velocity_control+0x2b0>)
 8007180:	edd3 7a00 	vldr	s15, [r3]
 8007184:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80073b0 <update_joy_mode_velocity_control+0x2b8>
 8007188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800718c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007190:	d50e      	bpl.n	80071b0 <update_joy_mode_velocity_control+0xb8>
		// Moving down (positive direction)
		pris_command_vel = JOY_MODE_CONSTANT_VELOCITY_PRIS;
 8007192:	4b88      	ldr	r3, [pc, #544]	@ (80073b4 <update_joy_mode_velocity_control+0x2bc>)
 8007194:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 8007196:	2301      	movs	r3, #1
 8007198:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!low_photo_detected) {
 800719c:	7ebb      	ldrb	r3, [r7, #26]
 800719e:	f083 0301 	eor.w	r3, r3, #1
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d022      	beq.n	80071ee <update_joy_mode_velocity_control+0xf6>
			up_photo = false;
 80071a8:	4b83      	ldr	r3, [pc, #524]	@ (80073b8 <update_joy_mode_velocity_control+0x2c0>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	701a      	strb	r2, [r3, #0]
 80071ae:	e01e      	b.n	80071ee <update_joy_mode_velocity_control+0xf6>
		}
	} else if (joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 80071b0:	4b7d      	ldr	r3, [pc, #500]	@ (80073a8 <update_joy_mode_velocity_control+0x2b0>)
 80071b2:	edd3 7a00 	vldr	s15, [r3]
 80071b6:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 80073ac <update_joy_mode_velocity_control+0x2b4>
 80071ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071c2:	dd0e      	ble.n	80071e2 <update_joy_mode_velocity_control+0xea>
		// Moving up (negative direction)
		pris_command_vel = -JOY_MODE_CONSTANT_VELOCITY_PRIS;
 80071c4:	4b7d      	ldr	r3, [pc, #500]	@ (80073bc <update_joy_mode_velocity_control+0x2c4>)
 80071c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 80071c8:	2301      	movs	r3, #1
 80071ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!up_photo_detected) {
 80071ce:	7efb      	ldrb	r3, [r7, #27]
 80071d0:	f083 0301 	eor.w	r3, r3, #1
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d009      	beq.n	80071ee <update_joy_mode_velocity_control+0xf6>
			low_photo = false;
 80071da:	4b79      	ldr	r3, [pc, #484]	@ (80073c0 <update_joy_mode_velocity_control+0x2c8>)
 80071dc:	2200      	movs	r2, #0
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	e005      	b.n	80071ee <update_joy_mode_velocity_control+0xf6>
		}
	} else {
		// Joystick in deadband - hold position
		pris_command_vel = 0.0f;
 80071e2:	f04f 0300 	mov.w	r3, #0
 80071e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = false;
 80071e8:	2300      	movs	r3, #0
 80071ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	}

	// Revolute axis control based on joystick_y
	float rev_command_vel = 0.0f;
 80071ee:	f04f 0300 	mov.w	r3, #0
 80071f2:	627b      	str	r3, [r7, #36]	@ 0x24
	bool rev_moving = false;
 80071f4:	2300      	movs	r3, #0
 80071f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	// Get current revolute position in degrees for limit checking
	float revolute_deg = UnitConverter_angle(&converter_system,
 80071fa:	4b72      	ldr	r3, [pc, #456]	@ (80073c4 <update_joy_mode_velocity_control+0x2cc>)
 80071fc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007200:	220e      	movs	r2, #14
 8007202:	210f      	movs	r1, #15
 8007204:	eeb0 0a67 	vmov.f32	s0, s15
 8007208:	486f      	ldr	r0, [pc, #444]	@ (80073c8 <update_joy_mode_velocity_control+0x2d0>)
 800720a:	f7fd fa61 	bl	80046d0 <UnitConverter_angle>
 800720e:	ed87 0a05 	vstr	s0, [r7, #20]
			revolute_encoder.rads, UNIT_RADIAN, UNIT_DEGREE);

	// Process revolute axis joystick control with limits
	if ((revolute_deg > 175.0f && joystick_y > JOY_MODE_VELOCITY_THRESHOLD)
 8007212:	edd7 7a05 	vldr	s15, [r7, #20]
 8007216:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80073cc <update_joy_mode_velocity_control+0x2d4>
 800721a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800721e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007222:	dd09      	ble.n	8007238 <update_joy_mode_velocity_control+0x140>
 8007224:	4b6a      	ldr	r3, [pc, #424]	@ (80073d0 <update_joy_mode_velocity_control+0x2d8>)
 8007226:	edd3 7a00 	vldr	s15, [r3]
 800722a:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80073ac <update_joy_mode_velocity_control+0x2b4>
 800722e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007236:	dc12      	bgt.n	800725e <update_joy_mode_velocity_control+0x166>
			|| (revolute_deg < -175.0f
 8007238:	edd7 7a05 	vldr	s15, [r7, #20]
 800723c:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80073d4 <update_joy_mode_velocity_control+0x2dc>
 8007240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007248:	d510      	bpl.n	800726c <update_joy_mode_velocity_control+0x174>
					&& joystick_y < -JOY_MODE_VELOCITY_THRESHOLD)) {
 800724a:	4b61      	ldr	r3, [pc, #388]	@ (80073d0 <update_joy_mode_velocity_control+0x2d8>)
 800724c:	edd3 7a00 	vldr	s15, [r3]
 8007250:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 80073b0 <update_joy_mode_velocity_control+0x2b8>
 8007254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725c:	d506      	bpl.n	800726c <update_joy_mode_velocity_control+0x174>
		// At revolute limits - block movement
		rev_command_vel = 0.0f;
 800725e:	f04f 0300 	mov.w	r3, #0
 8007262:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 8007264:	2300      	movs	r3, #0
 8007266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800726a:	e025      	b.n	80072b8 <update_joy_mode_velocity_control+0x1c0>
	} else if (joystick_y > JOY_MODE_VELOCITY_THRESHOLD) {
 800726c:	4b58      	ldr	r3, [pc, #352]	@ (80073d0 <update_joy_mode_velocity_control+0x2d8>)
 800726e:	edd3 7a00 	vldr	s15, [r3]
 8007272:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80073ac <update_joy_mode_velocity_control+0x2b4>
 8007276:	eef4 7ac7 	vcmpe.f32	s15, s14
 800727a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800727e:	dd05      	ble.n	800728c <update_joy_mode_velocity_control+0x194>
		rev_command_vel = JOY_MODE_CONSTANT_VELOCITY_REV;
 8007280:	4b55      	ldr	r3, [pc, #340]	@ (80073d8 <update_joy_mode_velocity_control+0x2e0>)
 8007282:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 8007284:	2301      	movs	r3, #1
 8007286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800728a:	e015      	b.n	80072b8 <update_joy_mode_velocity_control+0x1c0>
	} else if (joystick_y < -JOY_MODE_VELOCITY_THRESHOLD) {
 800728c:	4b50      	ldr	r3, [pc, #320]	@ (80073d0 <update_joy_mode_velocity_control+0x2d8>)
 800728e:	edd3 7a00 	vldr	s15, [r3]
 8007292:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80073b0 <update_joy_mode_velocity_control+0x2b8>
 8007296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800729a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800729e:	d505      	bpl.n	80072ac <update_joy_mode_velocity_control+0x1b4>
		rev_command_vel = -JOY_MODE_CONSTANT_VELOCITY_REV;
 80072a0:	4b4e      	ldr	r3, [pc, #312]	@ (80073dc <update_joy_mode_velocity_control+0x2e4>)
 80072a2:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 80072a4:	2301      	movs	r3, #1
 80072a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072aa:	e005      	b.n	80072b8 <update_joy_mode_velocity_control+0x1c0>
	} else {
		// Joystick in deadband - hold position
		rev_command_vel = 0.0f;
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 80072b2:	2300      	movs	r3, #0
 80072b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	}

	/* PRISMATIC AXIS CONTROL - Keep existing PID-based control */
	// Detect transition from moving to stopped
	if (pris_was_moving && !pris_moving) {
 80072b8:	4b49      	ldr	r3, [pc, #292]	@ (80073e0 <update_joy_mode_velocity_control+0x2e8>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00a      	beq.n	80072d6 <update_joy_mode_velocity_control+0x1de>
 80072c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80072c4:	f083 0301 	eor.w	r3, r3, #1
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <update_joy_mode_velocity_control+0x1de>
		// Just stopped moving - capture current position as target
		prismatic_axis.position = prismatic_encoder.mm;
 80072ce:	4b45      	ldr	r3, [pc, #276]	@ (80073e4 <update_joy_mode_velocity_control+0x2ec>)
 80072d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072d2:	4a45      	ldr	r2, [pc, #276]	@ (80073e8 <update_joy_mode_velocity_control+0x2f0>)
 80072d4:	6013      	str	r3, [r2, #0]
	}

	if (pris_moving) {
 80072d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 8092 	beq.w	8007404 <update_joy_mode_velocity_control+0x30c>
		// Moving - use velocity control
		prismatic_axis.vel_error = pris_command_vel
				- prismatic_axis.kalman_velocity;
 80072e0:	4b41      	ldr	r3, [pc, #260]	@ (80073e8 <update_joy_mode_velocity_control+0x2f0>)
 80072e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80072e6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80072ea:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = pris_command_vel
 80072ee:	4b3e      	ldr	r3, [pc, #248]	@ (80073e8 <update_joy_mode_velocity_control+0x2f0>)
 80072f0:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 80072f4:	4b3c      	ldr	r3, [pc, #240]	@ (80073e8 <update_joy_mode_velocity_control+0x2f0>)
 80072f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80072fa:	eeb0 0a67 	vmov.f32	s0, s15
 80072fe:	483b      	ldr	r0, [pc, #236]	@ (80073ec <update_joy_mode_velocity_control+0x2f4>)
 8007300:	f7f9 ff8a 	bl	8001218 <PID_CONTROLLER_Compute>
 8007304:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8007308:	4b39      	ldr	r3, [pc, #228]	@ (80073f0 <update_joy_mode_velocity_control+0x2f8>)
 800730a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 800730e:	4610      	mov	r0, r2
 8007310:	4619      	mov	r1, r3
 8007312:	f7f9 fbd7 	bl	8000ac4 <__aeabi_d2iz>
 8007316:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8007318:	4b35      	ldr	r3, [pc, #212]	@ (80073f0 <update_joy_mode_velocity_control+0x2f8>)
 800731a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800731e:	60ba      	str	r2, [r7, #8]
 8007320:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007324:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(
 8007326:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800732a:	f7f9 fbcb 	bl	8000ac4 <__aeabi_d2iz>
 800732e:	4603      	mov	r3, r0
 8007330:	4619      	mov	r1, r3
 8007332:	4620      	mov	r0, r4
 8007334:	eeb0 0a48 	vmov.f32	s0, s16
 8007338:	f7f9 ff0c 	bl	8001154 <PWM_Satuation>
 800733c:	ee07 0a90 	vmov	s15, r0
 8007340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007344:	4b28      	ldr	r3, [pc, #160]	@ (80073e8 <update_joy_mode_velocity_control+0x2f0>)
 8007346:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward for moving
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 800734a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800734e:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80073f4 <update_joy_mode_velocity_control+0x2fc>
 8007352:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007356:	eeb0 0a47 	vmov.f32	s0, s14
 800735a:	4827      	ldr	r0, [pc, #156]	@ (80073f8 <update_joy_mode_velocity_control+0x300>)
 800735c:	f7fa fa9c 	bl	8001898 <PRISMATIC_MOTOR_FFD_Compute>
 8007360:	eef0 7a40 	vmov.f32	s15, s0
 8007364:	4b20      	ldr	r3, [pc, #128]	@ (80073e8 <update_joy_mode_velocity_control+0x2f0>)
 8007366:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				pris_command_vel / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 800736a:	4b16      	ldr	r3, [pc, #88]	@ (80073c4 <update_joy_mode_velocity_control+0x2cc>)
 800736c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8007370:	4b1c      	ldr	r3, [pc, #112]	@ (80073e4 <update_joy_mode_velocity_control+0x2ec>)
 8007372:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8007376:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 80073f4 <update_joy_mode_velocity_control+0x2fc>
 800737a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800737e:	eeb0 1a66 	vmov.f32	s2, s13
 8007382:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 80073fc <update_joy_mode_velocity_control+0x304>
 8007386:	eeb0 0a47 	vmov.f32	s0, s14
 800738a:	481d      	ldr	r0, [pc, #116]	@ (8007400 <update_joy_mode_velocity_control+0x308>)
 800738c:	f7fa fb2c 	bl	80019e8 <PRISMATIC_MOTOR_DFD_Compute>
 8007390:	eef0 7a40 	vmov.f32	s15, s0
 8007394:	4b14      	ldr	r3, [pc, #80]	@ (80073e8 <update_joy_mode_velocity_control+0x2f0>)
 8007396:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		// Continuously update target position while moving
		prismatic_axis.position = prismatic_encoder.mm;
 800739a:	4b12      	ldr	r3, [pc, #72]	@ (80073e4 <update_joy_mode_velocity_control+0x2ec>)
 800739c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800739e:	4a12      	ldr	r2, [pc, #72]	@ (80073e8 <update_joy_mode_velocity_control+0x2f0>)
 80073a0:	6013      	str	r3, [r2, #0]
 80073a2:	e0a2      	b.n	80074ea <update_joy_mode_velocity_control+0x3f2>
 80073a4:	48000400 	.word	0x48000400
 80073a8:	20001968 	.word	0x20001968
 80073ac:	42200000 	.word	0x42200000
 80073b0:	c2200000 	.word	0xc2200000
 80073b4:	43480000 	.word	0x43480000
 80073b8:	20000368 	.word	0x20000368
 80073bc:	c3480000 	.word	0xc3480000
 80073c0:	20000369 	.word	0x20000369
 80073c4:	200004f4 	.word	0x200004f4
 80073c8:	2000088c 	.word	0x2000088c
 80073cc:	432f0000 	.word	0x432f0000
 80073d0:	2000196c 	.word	0x2000196c
 80073d4:	c32f0000 	.word	0xc32f0000
 80073d8:	40a00000 	.word	0x40a00000
 80073dc:	c0a00000 	.word	0xc0a00000
 80073e0:	200003f4 	.word	0x200003f4
 80073e4:	20000498 	.word	0x20000498
 80073e8:	20000280 	.word	0x20000280
 80073ec:	20000578 	.word	0x20000578
 80073f0:	20000080 	.word	0x20000080
 80073f4:	447a0000 	.word	0x447a0000
 80073f8:	20000618 	.word	0x20000618
 80073fc:	00000000 	.word	0x00000000
 8007400:	2000061c 	.word	0x2000061c
	} else {
		// Not moving - hold target position with position control
		prismatic_axis.pos_error = prismatic_axis.position
 8007404:	4bbc      	ldr	r3, [pc, #752]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 8007406:	ed93 7a00 	vldr	s14, [r3]
				- prismatic_encoder.mm;
 800740a:	4bbc      	ldr	r3, [pc, #752]	@ (80076fc <update_joy_mode_velocity_control+0x604>)
 800740c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8007410:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.pos_error = prismatic_axis.position
 8007414:	4bb8      	ldr	r3, [pc, #736]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 8007416:	edc3 7a05 	vstr	s15, [r3, #20]
		prismatic_axis.command_vel = PWM_Satuation(
 800741a:	4bb7      	ldr	r3, [pc, #732]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 800741c:	edd3 7a05 	vldr	s15, [r3, #20]
 8007420:	eeb0 0a67 	vmov.f32	s0, s15
 8007424:	48b6      	ldr	r0, [pc, #728]	@ (8007700 <update_joy_mode_velocity_control+0x608>)
 8007426:	f7f9 fef7 	bl	8001218 <PID_CONTROLLER_Compute>
 800742a:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_position_pid,
						prismatic_axis.pos_error),
				ZGX45RGG_400RPM_Constant.sd_max,
 800742e:	4bb5      	ldr	r3, [pc, #724]	@ (8007704 <update_joy_mode_velocity_control+0x60c>)
 8007430:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		prismatic_axis.command_vel = PWM_Satuation(
 8007434:	4610      	mov	r0, r2
 8007436:	4619      	mov	r1, r3
 8007438:	f7f9 fb44 	bl	8000ac4 <__aeabi_d2iz>
 800743c:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.sd_max);
 800743e:	4bb1      	ldr	r3, [pc, #708]	@ (8007704 <update_joy_mode_velocity_control+0x60c>)
 8007440:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007444:	603a      	str	r2, [r7, #0]
 8007446:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800744a:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_vel = PWM_Satuation(
 800744c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007450:	f7f9 fb38 	bl	8000ac4 <__aeabi_d2iz>
 8007454:	4603      	mov	r3, r0
 8007456:	4619      	mov	r1, r3
 8007458:	4620      	mov	r0, r4
 800745a:	eeb0 0a48 	vmov.f32	s0, s16
 800745e:	f7f9 fe79 	bl	8001154 <PWM_Satuation>
 8007462:	ee07 0a90 	vmov	s15, r0
 8007466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800746a:	4ba3      	ldr	r3, [pc, #652]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 800746c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

		prismatic_axis.vel_error = prismatic_axis.command_vel
 8007470:	4ba1      	ldr	r3, [pc, #644]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 8007472:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8007476:	4ba0      	ldr	r3, [pc, #640]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 8007478:	edd3 7a07 	vldr	s15, [r3, #28]
 800747c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8007480:	4b9d      	ldr	r3, [pc, #628]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 8007482:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8007486:	4b9c      	ldr	r3, [pc, #624]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 8007488:	edd3 7a06 	vldr	s15, [r3, #24]
 800748c:	eeb0 0a67 	vmov.f32	s0, s15
 8007490:	489d      	ldr	r0, [pc, #628]	@ (8007708 <update_joy_mode_velocity_control+0x610>)
 8007492:	f7f9 fec1 	bl	8001218 <PID_CONTROLLER_Compute>
 8007496:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 800749a:	4b9a      	ldr	r3, [pc, #616]	@ (8007704 <update_joy_mode_velocity_control+0x60c>)
 800749c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 80074a0:	4610      	mov	r0, r2
 80074a2:	4619      	mov	r1, r3
 80074a4:	f7f9 fb0e 	bl	8000ac4 <__aeabi_d2iz>
 80074a8:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80074aa:	4b96      	ldr	r3, [pc, #600]	@ (8007704 <update_joy_mode_velocity_control+0x60c>)
 80074ac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80074b0:	4615      	mov	r5, r2
 80074b2:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(
 80074b6:	4628      	mov	r0, r5
 80074b8:	4631      	mov	r1, r6
 80074ba:	f7f9 fb03 	bl	8000ac4 <__aeabi_d2iz>
 80074be:	4603      	mov	r3, r0
 80074c0:	4619      	mov	r1, r3
 80074c2:	4620      	mov	r0, r4
 80074c4:	eeb0 0a48 	vmov.f32	s0, s16
 80074c8:	f7f9 fe44 	bl	8001154 <PWM_Satuation>
 80074cc:	ee07 0a90 	vmov	s15, r0
 80074d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074d4:	4b88      	ldr	r3, [pc, #544]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 80074d6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// No feedforward when holding position
		prismatic_axis.ffd = 0.0f;
 80074da:	4b87      	ldr	r3, [pc, #540]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 80074dc:	f04f 0200 	mov.w	r2, #0
 80074e0:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 80074e2:	4b85      	ldr	r3, [pc, #532]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 80074e4:	f04f 0200 	mov.w	r2, #0
 80074e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	// Update previous state for next iteration
	pris_was_moving = pris_moving;
 80074ea:	4a88      	ldr	r2, [pc, #544]	@ (800770c <update_joy_mode_velocity_control+0x614>)
 80074ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80074f0:	7013      	strb	r3, [r2, #0]

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80074f2:	4b81      	ldr	r3, [pc, #516]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 80074f4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80074f8:	4b7f      	ldr	r3, [pc, #508]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 80074fa:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80074fe:	4b7e      	ldr	r3, [pc, #504]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 8007500:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007504:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800750c:	4b7a      	ldr	r3, [pc, #488]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 800750e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007512:	4b79      	ldr	r3, [pc, #484]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 8007514:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007518:	4b7a      	ldr	r3, [pc, #488]	@ (8007704 <update_joy_mode_velocity_control+0x60c>)
 800751a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800751e:	4610      	mov	r0, r2
 8007520:	4619      	mov	r1, r3
 8007522:	f7f9 facf 	bl	8000ac4 <__aeabi_d2iz>
 8007526:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007528:	4b76      	ldr	r3, [pc, #472]	@ (8007704 <update_joy_mode_velocity_control+0x60c>)
 800752a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800752e:	4692      	mov	sl, r2
 8007530:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007534:	4650      	mov	r0, sl
 8007536:	4659      	mov	r1, fp
 8007538:	f7f9 fac4 	bl	8000ac4 <__aeabi_d2iz>
 800753c:	4603      	mov	r3, r0
 800753e:	4619      	mov	r1, r3
 8007540:	4620      	mov	r0, r4
 8007542:	eeb0 0a48 	vmov.f32	s0, s16
 8007546:	f7f9 fe05 	bl	8001154 <PWM_Satuation>
 800754a:	ee07 0a90 	vmov	s15, r0
 800754e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007552:	4b69      	ldr	r3, [pc, #420]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 8007554:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	/* REVOLUTE AXIS CONTROL - SIMPLIFIED PURE PWM WITH FFD + DFD */
	float base_pwm = 0.0f;
 8007558:	f04f 0300 	mov.w	r3, #0
 800755c:	61fb      	str	r3, [r7, #28]

	if (rev_moving) {
 800755e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007562:	2b00      	cmp	r3, #0
 8007564:	d02e      	beq.n	80075c4 <update_joy_mode_velocity_control+0x4cc>
		// Calculate base PWM proportional to joystick input
		// Scale joystick input (-50 to +50) to PWM range
		float joystick_normalized = joystick_y / 50.0f; // -1.0 to +1.0
 8007566:	4b6a      	ldr	r3, [pc, #424]	@ (8007710 <update_joy_mode_velocity_control+0x618>)
 8007568:	ed93 7a00 	vldr	s14, [r3]
 800756c:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8007714 <update_joy_mode_velocity_control+0x61c>
 8007570:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007574:	edc7 7a04 	vstr	s15, [r7, #16]
		base_pwm = joystick_normalized * (ZGX45RGG_150RPM_Constant.U_max * 0.3f); // Limit to 30% max PWM for safety
 8007578:	6938      	ldr	r0, [r7, #16]
 800757a:	f7f8 ffb1 	bl	80004e0 <__aeabi_f2d>
 800757e:	4604      	mov	r4, r0
 8007580:	460d      	mov	r5, r1
 8007582:	4b65      	ldr	r3, [pc, #404]	@ (8007718 <update_joy_mode_velocity_control+0x620>)
 8007584:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007588:	a359      	add	r3, pc, #356	@ (adr r3, 80076f0 <update_joy_mode_velocity_control+0x5f8>)
 800758a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800758e:	f7f8 ffff 	bl	8000590 <__aeabi_dmul>
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	4620      	mov	r0, r4
 8007598:	4629      	mov	r1, r5
 800759a:	f7f8 fff9 	bl	8000590 <__aeabi_dmul>
 800759e:	4602      	mov	r2, r0
 80075a0:	460b      	mov	r3, r1
 80075a2:	4610      	mov	r0, r2
 80075a4:	4619      	mov	r1, r3
 80075a6:	f7f9 fad5 	bl	8000b54 <__aeabi_d2f>
 80075aa:	4603      	mov	r3, r0
 80075ac:	61fb      	str	r3, [r7, #28]

		// Add velocity feedforward
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd, rev_command_vel);
 80075ae:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80075b2:	485a      	ldr	r0, [pc, #360]	@ (800771c <update_joy_mode_velocity_control+0x624>)
 80075b4:	f7f9 fff0 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 80075b8:	eef0 7a40 	vmov.f32	s15, s0
 80075bc:	4b58      	ldr	r3, [pc, #352]	@ (8007720 <update_joy_mode_velocity_control+0x628>)
 80075be:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 80075c2:	e006      	b.n	80075d2 <update_joy_mode_velocity_control+0x4da>
	} else {
		// Joystick released - no base PWM, only compensation
		base_pwm = 0.0f;
 80075c4:	f04f 0300 	mov.w	r3, #0
 80075c8:	61fb      	str	r3, [r7, #28]
		revolute_axis.ffd = 0.0f;
 80075ca:	4b55      	ldr	r3, [pc, #340]	@ (8007720 <update_joy_mode_velocity_control+0x628>)
 80075cc:	f04f 0200 	mov.w	r2, #0
 80075d0:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	// Always add gravity/disturbance compensation
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80075d2:	4b54      	ldr	r3, [pc, #336]	@ (8007724 <update_joy_mode_velocity_control+0x62c>)
 80075d4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80075d8:	4b48      	ldr	r3, [pc, #288]	@ (80076fc <update_joy_mode_velocity_control+0x604>)
 80075da:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80075de:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8007728 <update_joy_mode_velocity_control+0x630>
 80075e2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80075e6:	eef0 0a66 	vmov.f32	s1, s13
 80075ea:	eeb0 0a47 	vmov.f32	s0, s14
 80075ee:	484f      	ldr	r0, [pc, #316]	@ (800772c <update_joy_mode_velocity_control+0x634>)
 80075f0:	f7fa f865 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 80075f4:	eef0 7a40 	vmov.f32	s15, s0
 80075f8:	4b49      	ldr	r3, [pc, #292]	@ (8007720 <update_joy_mode_velocity_control+0x628>)
 80075fa:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Apply filtering to feedforward terms for stability
	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 80075fe:	4b4c      	ldr	r3, [pc, #304]	@ (8007730 <update_joy_mode_velocity_control+0x638>)
 8007600:	edd3 7a00 	vldr	s15, [r3]
 8007604:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8007734 <update_joy_mode_velocity_control+0x63c>
 8007608:	ee27 7a87 	vmul.f32	s14, s15, s14
 800760c:	4b44      	ldr	r3, [pc, #272]	@ (8007720 <update_joy_mode_velocity_control+0x628>)
 800760e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8007612:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8007738 <update_joy_mode_velocity_control+0x640>
 8007616:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800761a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800761e:	4b44      	ldr	r3, [pc, #272]	@ (8007730 <update_joy_mode_velocity_control+0x638>)
 8007620:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 8007624:	4b45      	ldr	r3, [pc, #276]	@ (800773c <update_joy_mode_velocity_control+0x644>)
 8007626:	edd3 7a00 	vldr	s15, [r3]
 800762a:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8007734 <update_joy_mode_velocity_control+0x63c>
 800762e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007632:	4b3b      	ldr	r3, [pc, #236]	@ (8007720 <update_joy_mode_velocity_control+0x628>)
 8007634:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007638:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8007738 <update_joy_mode_velocity_control+0x640>
 800763c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007644:	4b3d      	ldr	r3, [pc, #244]	@ (800773c <update_joy_mode_velocity_control+0x644>)
 8007646:	edc3 7a00 	vstr	s15, [r3]

	// Combine base PWM with feedforward compensation
	revolute_axis.command_pos = base_pwm + 0.01f * (ffd_filtered + dfd_filtered);
 800764a:	4b39      	ldr	r3, [pc, #228]	@ (8007730 <update_joy_mode_velocity_control+0x638>)
 800764c:	ed93 7a00 	vldr	s14, [r3]
 8007650:	4b3a      	ldr	r3, [pc, #232]	@ (800773c <update_joy_mode_velocity_control+0x644>)
 8007652:	edd3 7a00 	vldr	s15, [r3]
 8007656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800765a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8007740 <update_joy_mode_velocity_control+0x648>
 800765e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007662:	edd7 7a07 	vldr	s15, [r7, #28]
 8007666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800766a:	4b2d      	ldr	r3, [pc, #180]	@ (8007720 <update_joy_mode_velocity_control+0x628>)
 800766c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Saturate final command
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007670:	4b2b      	ldr	r3, [pc, #172]	@ (8007720 <update_joy_mode_velocity_control+0x628>)
 8007672:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007676:	4b28      	ldr	r3, [pc, #160]	@ (8007718 <update_joy_mode_velocity_control+0x620>)
 8007678:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800767c:	4610      	mov	r0, r2
 800767e:	4619      	mov	r1, r3
 8007680:	f7f9 fa20 	bl	8000ac4 <__aeabi_d2iz>
 8007684:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007686:	4b24      	ldr	r3, [pc, #144]	@ (8007718 <update_joy_mode_velocity_control+0x620>)
 8007688:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800768c:	4690      	mov	r8, r2
 800768e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007692:	4640      	mov	r0, r8
 8007694:	4649      	mov	r1, r9
 8007696:	f7f9 fa15 	bl	8000ac4 <__aeabi_d2iz>
 800769a:	4603      	mov	r3, r0
 800769c:	4619      	mov	r1, r3
 800769e:	4620      	mov	r0, r4
 80076a0:	eeb0 0a48 	vmov.f32	s0, s16
 80076a4:	f7f9 fd56 	bl	8001154 <PWM_Satuation>
 80076a8:	ee07 0a90 	vmov	s15, r0
 80076ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076b0:	4b1b      	ldr	r3, [pc, #108]	@ (8007720 <update_joy_mode_velocity_control+0x628>)
 80076b2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply motor commands
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 80076b6:	4b10      	ldr	r3, [pc, #64]	@ (80076f8 <update_joy_mode_velocity_control+0x600>)
 80076b8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80076bc:	eef0 0a67 	vmov.f32	s1, s15
 80076c0:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8007744 <update_joy_mode_velocity_control+0x64c>
 80076c4:	4820      	ldr	r0, [pc, #128]	@ (8007748 <update_joy_mode_velocity_control+0x650>)
 80076c6:	f7f9 fe7f 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 80076ca:	4b15      	ldr	r3, [pc, #84]	@ (8007720 <update_joy_mode_velocity_control+0x628>)
 80076cc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80076d0:	eef0 0a67 	vmov.f32	s1, s15
 80076d4:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8007744 <update_joy_mode_velocity_control+0x64c>
 80076d8:	481c      	ldr	r0, [pc, #112]	@ (800774c <update_joy_mode_velocity_control+0x654>)
 80076da:	f7f9 fe75 	bl	80013c8 <MDXX_set_range>
}
 80076de:	bf00      	nop
 80076e0:	3734      	adds	r7, #52	@ 0x34
 80076e2:	46bd      	mov	sp, r7
 80076e4:	ecbd 8b02 	vpop	{d8}
 80076e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ec:	f3af 8000 	nop.w
 80076f0:	40000000 	.word	0x40000000
 80076f4:	3fd33333 	.word	0x3fd33333
 80076f8:	20000280 	.word	0x20000280
 80076fc:	20000498 	.word	0x20000498
 8007700:	20000550 	.word	0x20000550
 8007704:	20000080 	.word	0x20000080
 8007708:	20000578 	.word	0x20000578
 800770c:	200003f4 	.word	0x200003f4
 8007710:	2000196c 	.word	0x2000196c
 8007714:	42480000 	.word	0x42480000
 8007718:	20000000 	.word	0x20000000
 800771c:	20000624 	.word	0x20000624
 8007720:	200002c4 	.word	0x200002c4
 8007724:	200004f4 	.word	0x200004f4
 8007728:	447a0000 	.word	0x447a0000
 800772c:	20000628 	.word	0x20000628
 8007730:	200003f8 	.word	0x200003f8
 8007734:	3f4ccccd 	.word	0x3f4ccccd
 8007738:	3e4ccccd 	.word	0x3e4ccccd
 800773c:	200003fc 	.word	0x200003fc
 8007740:	3c23d70a 	.word	0x3c23d70a
 8007744:	44fa0000 	.word	0x44fa0000
 8007748:	20000400 	.word	0x20000400
 800774c:	2000044c 	.word	0x2000044c

08007750 <update_joy_mode_pilot_light>:

void update_joy_mode_pilot_light(void) {
 8007750:	b580      	push	{r7, lr}
 8007752:	af00      	add	r7, sp, #0
	if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8007754:	4b14      	ldr	r3, [pc, #80]	@ (80077a8 <update_joy_mode_pilot_light+0x58>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b03      	cmp	r3, #3
 800775a:	d122      	bne.n	80077a2 <update_joy_mode_pilot_light+0x52>
		// Toggle pilot light every 1 second when 10 positions are saved
		joy_mode_pilot_timer++;
 800775c:	4b13      	ldr	r3, [pc, #76]	@ (80077ac <update_joy_mode_pilot_light+0x5c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3301      	adds	r3, #1
 8007762:	4a12      	ldr	r2, [pc, #72]	@ (80077ac <update_joy_mode_pilot_light+0x5c>)
 8007764:	6013      	str	r3, [r2, #0]
		if (joy_mode_pilot_timer >= JOY_MODE_PILOT_TOGGLE_PERIOD) {
 8007766:	4b11      	ldr	r3, [pc, #68]	@ (80077ac <update_joy_mode_pilot_light+0x5c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800776e:	d318      	bcc.n	80077a2 <update_joy_mode_pilot_light+0x52>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8007770:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007774:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007778:	f004 fc98 	bl	800c0ac <HAL_GPIO_TogglePin>
			joy_mode_pilot_state = !joy_mode_pilot_state;
 800777c:	4b0c      	ldr	r3, [pc, #48]	@ (80077b0 <update_joy_mode_pilot_light+0x60>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	bf14      	ite	ne
 8007786:	2301      	movne	r3, #1
 8007788:	2300      	moveq	r3, #0
 800778a:	b2db      	uxtb	r3, r3
 800778c:	f083 0301 	eor.w	r3, r3, #1
 8007790:	b2db      	uxtb	r3, r3
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	b2da      	uxtb	r2, r3
 8007798:	4b05      	ldr	r3, [pc, #20]	@ (80077b0 <update_joy_mode_pilot_light+0x60>)
 800779a:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 800779c:	4b03      	ldr	r3, [pc, #12]	@ (80077ac <update_joy_mode_pilot_light+0x5c>)
 800779e:	2200      	movs	r2, #0
 80077a0:	601a      	str	r2, [r3, #0]
		}
	}
}
 80077a2:	bf00      	nop
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20000384 	.word	0x20000384
 80077ac:	200003dc 	.word	0x200003dc
 80077b0:	200003e0 	.word	0x200003e0

080077b4 <update_joy_mode>:

void update_joy_mode(void) {
 80077b4:	b590      	push	{r4, r7, lr}
 80077b6:	ed2d 8b02 	vpush	{d8}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
	if (!joy_mode_active) {
 80077be:	4b8f      	ldr	r3, [pc, #572]	@ (80079fc <update_joy_mode+0x248>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	f083 0301 	eor.w	r3, r3, #1
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f040 81c2 	bne.w	8007b52 <update_joy_mode+0x39e>
		return;
	}

	// ALWAYS update position display values when in joy mode
	normalized_position = normalize_angle(revolute_encoder.rads);
 80077ce:	4b8c      	ldr	r3, [pc, #560]	@ (8007a00 <update_joy_mode+0x24c>)
 80077d0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80077d4:	eeb0 0a67 	vmov.f32	s0, s15
 80077d8:	f7fe fa18 	bl	8005c0c <normalize_angle>
 80077dc:	eef0 7a40 	vmov.f32	s15, s0
 80077e0:	4b88      	ldr	r3, [pc, #544]	@ (8007a04 <update_joy_mode+0x250>)
 80077e2:	edc3 7a00 	vstr	s15, [r3]
	prismatic_axis.mm = prismatic_encoder.mm;
 80077e6:	4b88      	ldr	r3, [pc, #544]	@ (8007a08 <update_joy_mode+0x254>)
 80077e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077ea:	4a88      	ldr	r2, [pc, #544]	@ (8007a0c <update_joy_mode+0x258>)
 80077ec:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 80077ee:	4b85      	ldr	r3, [pc, #532]	@ (8007a04 <update_joy_mode+0x250>)
 80077f0:	edd3 7a00 	vldr	s15, [r3]
 80077f4:	220e      	movs	r2, #14
 80077f6:	210f      	movs	r1, #15
 80077f8:	eeb0 0a67 	vmov.f32	s0, s15
 80077fc:	4884      	ldr	r0, [pc, #528]	@ (8007a10 <update_joy_mode+0x25c>)
 80077fe:	f7fc ff67 	bl	80046d0 <UnitConverter_angle>
 8007802:	eef0 7a40 	vmov.f32	s15, s0
 8007806:	4b83      	ldr	r3, [pc, #524]	@ (8007a14 <update_joy_mode+0x260>)
 8007808:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);

	switch (joy_mode_state) {
 800780c:	4b82      	ldr	r3, [pc, #520]	@ (8007a18 <update_joy_mode+0x264>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	3b01      	subs	r3, #1
 8007812:	2b04      	cmp	r3, #4
 8007814:	f200 819f 	bhi.w	8007b56 <update_joy_mode+0x3a2>
 8007818:	a201      	add	r2, pc, #4	@ (adr r2, 8007820 <update_joy_mode+0x6c>)
 800781a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781e:	bf00      	nop
 8007820:	08007835 	.word	0x08007835
 8007824:	0800783b 	.word	0x0800783b
 8007828:	08007841 	.word	0x08007841
 800782c:	08007847 	.word	0x08007847
 8007830:	08007b4d 	.word	0x08007b4d
	case JOY_MODE_INITIAL_CONTROL:
		// Initial manual joystick control - no position saving yet
		update_joy_mode_velocity_control();
 8007834:	f7ff fc60 	bl	80070f8 <update_joy_mode_velocity_control>
		break;
 8007838:	e190      	b.n	8007b5c <update_joy_mode+0x3a8>

	case JOY_MODE_MANUAL_CONTROL:
		// Manual joystick control with position saving enabled
		update_joy_mode_velocity_control();
 800783a:	f7ff fc5d 	bl	80070f8 <update_joy_mode_velocity_control>
		break;
 800783e:	e18d      	b.n	8007b5c <update_joy_mode+0x3a8>

	case JOY_MODE_POSITION_SAVED:
		// 10 positions saved, pilot light toggling, waiting for B2 to start playback
		update_joy_mode_pilot_light();
 8007840:	f7ff ff86 	bl	8007750 <update_joy_mode_pilot_light>
		break;
 8007844:	e18a      	b.n	8007b5c <update_joy_mode+0x3a8>

	case JOY_MODE_PLAYBACK:
		// Playing back saved positions - PILOT LIGHT STAYS ON
		// Handle trajectory sequence states for joy mode playback
		switch (motion_sequence_state) {
 8007846:	4b75      	ldr	r3, [pc, #468]	@ (8007a1c <update_joy_mode+0x268>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b05      	cmp	r3, #5
 800784c:	f200 8166 	bhi.w	8007b1c <update_joy_mode+0x368>
 8007850:	a201      	add	r2, pc, #4	@ (adr r2, 8007858 <update_joy_mode+0xa4>)
 8007852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007856:	bf00      	nop
 8007858:	08007871 	.word	0x08007871
 800785c:	080078f5 	.word	0x080078f5
 8007860:	08007919 	.word	0x08007919
 8007864:	08007a51 	.word	0x08007a51
 8007868:	08007af7 	.word	0x08007af7
 800786c:	08007b15 	.word	0x08007b15
		case MOTION_IDLE:
			// Current trajectory finished, wait before starting next
			joy_mode_playback_timer++;
 8007870:	4b6b      	ldr	r3, [pc, #428]	@ (8007a20 <update_joy_mode+0x26c>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3301      	adds	r3, #1
 8007876:	4a6a      	ldr	r2, [pc, #424]	@ (8007a20 <update_joy_mode+0x26c>)
 8007878:	6013      	str	r3, [r2, #0]
			if (joy_mode_playback_timer >= JOY_MODE_PLAYBACK_DELAY) {
 800787a:	4b69      	ldr	r3, [pc, #420]	@ (8007a20 <update_joy_mode+0x26c>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8007882:	f0c0 814d 	bcc.w	8007b20 <update_joy_mode+0x36c>
				playback_position_index++;
 8007886:	4b67      	ldr	r3, [pc, #412]	@ (8007a24 <update_joy_mode+0x270>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	3301      	adds	r3, #1
 800788c:	b2da      	uxtb	r2, r3
 800788e:	4b65      	ldr	r3, [pc, #404]	@ (8007a24 <update_joy_mode+0x270>)
 8007890:	701a      	strb	r2, [r3, #0]

				if (playback_position_index < saved_position_count) {
 8007892:	4b64      	ldr	r3, [pc, #400]	@ (8007a24 <update_joy_mode+0x270>)
 8007894:	781a      	ldrb	r2, [r3, #0]
 8007896:	4b64      	ldr	r3, [pc, #400]	@ (8007a28 <update_joy_mode+0x274>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	429a      	cmp	r2, r3
 800789c:	d224      	bcs.n	80078e8 <update_joy_mode+0x134>
					// Start next trajectory
					float target_pris =
							saved_positions[playback_position_index].prismatic_pos;
 800789e:	4b61      	ldr	r3, [pc, #388]	@ (8007a24 <update_joy_mode+0x270>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
					float target_pris =
 80078a2:	4a62      	ldr	r2, [pc, #392]	@ (8007a2c <update_joy_mode+0x278>)
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	4413      	add	r3, r2
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	60fb      	str	r3, [r7, #12]
					float target_rev_rad =
							saved_positions[playback_position_index].revolute_pos;
 80078ac:	4b5d      	ldr	r3, [pc, #372]	@ (8007a24 <update_joy_mode+0x270>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
					float target_rev_rad =
 80078b0:	4a5e      	ldr	r2, [pc, #376]	@ (8007a2c <update_joy_mode+0x278>)
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	4413      	add	r3, r2
 80078b6:	3304      	adds	r3, #4
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	60bb      	str	r3, [r7, #8]
					float target_rev_deg = target_rev_rad * 180.0f / PI;
 80078bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80078c0:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8007a30 <update_joy_mode+0x27c>
 80078c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80078c8:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8007a34 <update_joy_mode+0x280>
 80078cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078d0:	edc7 7a01 	vstr	s15, [r7, #4]

					start_combined_trajectory(target_pris, target_rev_deg);
 80078d4:	edd7 0a01 	vldr	s1, [r7, #4]
 80078d8:	ed97 0a03 	vldr	s0, [r7, #12]
 80078dc:	f7fe fa80 	bl	8005de0 <start_combined_trajectory>
					joy_mode_playback_timer = 0;
 80078e0:	4b4f      	ldr	r3, [pc, #316]	@ (8007a20 <update_joy_mode+0x26c>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]

					// Start homing sequence after a short delay
					start_homing_sequence(false); // false = manual homing (not startup)
				}
			}
			break;
 80078e6:	e11b      	b.n	8007b20 <update_joy_mode+0x36c>
					exit_joy_mode();
 80078e8:	f7ff fabc 	bl	8006e64 <exit_joy_mode>
					start_homing_sequence(false); // false = manual homing (not startup)
 80078ec:	2000      	movs	r0, #0
 80078ee:	f7fd fd67 	bl	80053c0 <start_homing_sequence>
			break;
 80078f2:	e115      	b.n	8007b20 <update_joy_mode+0x36c>

		case MOTION_PEN_UP_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 80078f4:	4b50      	ldr	r3, [pc, #320]	@ (8007a38 <update_joy_mode+0x284>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3301      	adds	r3, #1
 80078fa:	4a4f      	ldr	r2, [pc, #316]	@ (8007a38 <update_joy_mode+0x284>)
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	f240 52db 	movw	r2, #1499	@ 0x5db
 8007902:	4293      	cmp	r3, r2
 8007904:	f240 810e 	bls.w	8007b24 <update_joy_mode+0x370>
				prismatic_axis.trajectory_active = true;
 8007908:	4b40      	ldr	r3, [pc, #256]	@ (8007a0c <update_joy_mode+0x258>)
 800790a:	2201      	movs	r2, #1
 800790c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 8007910:	4b42      	ldr	r3, [pc, #264]	@ (8007a1c <update_joy_mode+0x268>)
 8007912:	2202      	movs	r2, #2
 8007914:	701a      	strb	r2, [r3, #0]
			}
			break;
 8007916:	e105      	b.n	8007b24 <update_joy_mode+0x370>

		case MOTION_PRISMATIC_ACTIVE:
			if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8007918:	4b3c      	ldr	r3, [pc, #240]	@ (8007a0c <update_joy_mode+0x258>)
 800791a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 8102 	beq.w	8007b28 <update_joy_mode+0x374>
 8007924:	4b45      	ldr	r3, [pc, #276]	@ (8007a3c <update_joy_mode+0x288>)
 8007926:	7c1b      	ldrb	r3, [r3, #16]
 8007928:	f083 0301 	eor.w	r3, r3, #1
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 80fa 	beq.w	8007b28 <update_joy_mode+0x374>
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007934:	4b35      	ldr	r3, [pc, #212]	@ (8007a0c <update_joy_mode+0x258>)
 8007936:	ed93 8a03 	vldr	s16, [r3, #12]
 800793a:	4b34      	ldr	r3, [pc, #208]	@ (8007a0c <update_joy_mode+0x258>)
 800793c:	edd3 8a04 	vldr	s17, [r3, #16]
						prismatic_axis.initial_pos, prismatic_axis.target_pos,
						ZGX45RGG_400RPM_Constant.traject_sd_max,
 8007940:	4b3f      	ldr	r3, [pc, #252]	@ (8007a40 <update_joy_mode+0x28c>)
 8007942:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007946:	4610      	mov	r0, r2
 8007948:	4619      	mov	r1, r3
 800794a:	f7f9 f903 	bl	8000b54 <__aeabi_d2f>
 800794e:	4604      	mov	r4, r0
						ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8007950:	4b3b      	ldr	r3, [pc, #236]	@ (8007a40 <update_joy_mode+0x28c>)
 8007952:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007956:	4610      	mov	r0, r2
 8007958:	4619      	mov	r1, r3
 800795a:	f7f9 f8fb 	bl	8000b54 <__aeabi_d2f>
 800795e:	4603      	mov	r3, r0
 8007960:	ee01 3a90 	vmov	s3, r3
 8007964:	ee01 4a10 	vmov	s2, r4
 8007968:	eef0 0a68 	vmov.f32	s1, s17
 800796c:	eeb0 0a48 	vmov.f32	s0, s16
 8007970:	4932      	ldr	r1, [pc, #200]	@ (8007a3c <update_joy_mode+0x288>)
 8007972:	4834      	ldr	r0, [pc, #208]	@ (8007a44 <update_joy_mode+0x290>)
 8007974:	f7fc fb14 	bl	8003fa0 <Trapezoidal_Evaluated>

				prismatic_axis.position = prisEva.setposition;
 8007978:	4b30      	ldr	r3, [pc, #192]	@ (8007a3c <update_joy_mode+0x288>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a23      	ldr	r2, [pc, #140]	@ (8007a0c <update_joy_mode+0x258>)
 800797e:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = prisEva.setvelocity;
 8007980:	4b2e      	ldr	r3, [pc, #184]	@ (8007a3c <update_joy_mode+0x288>)
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	4a21      	ldr	r2, [pc, #132]	@ (8007a0c <update_joy_mode+0x258>)
 8007986:	6053      	str	r3, [r2, #4]

				if (prisEva.isFinised) {
 8007988:	4b2c      	ldr	r3, [pc, #176]	@ (8007a3c <update_joy_mode+0x288>)
 800798a:	7c1b      	ldrb	r3, [r3, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 80cb 	beq.w	8007b28 <update_joy_mode+0x374>
					prismatic_axis.trajectory_active = false;
 8007992:	4b1e      	ldr	r3, [pc, #120]	@ (8007a0c <update_joy_mode+0x258>)
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					prismatic_axis.position = prisEva.setposition;
 800799a:	4b28      	ldr	r3, [pc, #160]	@ (8007a3c <update_joy_mode+0x288>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a1b      	ldr	r2, [pc, #108]	@ (8007a0c <update_joy_mode+0x258>)
 80079a0:	6013      	str	r3, [r2, #0]
					prismatic_axis.velocity = 0.0f;
 80079a2:	4b1a      	ldr	r3, [pc, #104]	@ (8007a0c <update_joy_mode+0x258>)
 80079a4:	f04f 0200 	mov.w	r2, #0
 80079a8:	605a      	str	r2, [r3, #4]

					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80079aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007a14 <update_joy_mode+0x260>)
 80079ac:	ed93 8a03 	vldr	s16, [r3, #12]
 80079b0:	4b18      	ldr	r3, [pc, #96]	@ (8007a14 <update_joy_mode+0x260>)
 80079b2:	edd3 8a04 	vldr	s17, [r3, #16]
							revolute_axis.target_pos,
							ZGX45RGG_150RPM_Constant.traject_qd_max,
 80079b6:	4b24      	ldr	r3, [pc, #144]	@ (8007a48 <update_joy_mode+0x294>)
 80079b8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80079bc:	4610      	mov	r0, r2
 80079be:	4619      	mov	r1, r3
 80079c0:	f7f9 f8c8 	bl	8000b54 <__aeabi_d2f>
 80079c4:	4604      	mov	r4, r0
							ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80079c6:	4b20      	ldr	r3, [pc, #128]	@ (8007a48 <update_joy_mode+0x294>)
 80079c8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80079cc:	4610      	mov	r0, r2
 80079ce:	4619      	mov	r1, r3
 80079d0:	f7f9 f8c0 	bl	8000b54 <__aeabi_d2f>
 80079d4:	4603      	mov	r3, r0
 80079d6:	ee01 3a90 	vmov	s3, r3
 80079da:	ee01 4a10 	vmov	s2, r4
 80079de:	eef0 0a68 	vmov.f32	s1, s17
 80079e2:	eeb0 0a48 	vmov.f32	s0, s16
 80079e6:	4819      	ldr	r0, [pc, #100]	@ (8007a4c <update_joy_mode+0x298>)
 80079e8:	f7fc fa18 	bl	8003e1c <Trapezoidal_Generator>

					revolute_axis.trajectory_active = true;
 80079ec:	4b09      	ldr	r3, [pc, #36]	@ (8007a14 <update_joy_mode+0x260>)
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 80079f4:	4b09      	ldr	r3, [pc, #36]	@ (8007a1c <update_joy_mode+0x268>)
 80079f6:	2203      	movs	r2, #3
 80079f8:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 80079fa:	e095      	b.n	8007b28 <update_joy_mode+0x374>
 80079fc:	20000385 	.word	0x20000385
 8007a00:	200004f4 	.word	0x200004f4
 8007a04:	2000037c 	.word	0x2000037c
 8007a08:	20000498 	.word	0x20000498
 8007a0c:	20000280 	.word	0x20000280
 8007a10:	2000088c 	.word	0x2000088c
 8007a14:	200002c4 	.word	0x200002c4
 8007a18:	20000384 	.word	0x20000384
 8007a1c:	20000308 	.word	0x20000308
 8007a20:	200003e4 	.word	0x200003e4
 8007a24:	200003d9 	.word	0x200003d9
 8007a28:	200003d8 	.word	0x200003d8
 8007a2c:	20000388 	.word	0x20000388
 8007a30:	43340000 	.word	0x43340000
 8007a34:	40490fdb 	.word	0x40490fdb
 8007a38:	20000360 	.word	0x20000360
 8007a3c:	20000334 	.word	0x20000334
 8007a40:	20000080 	.word	0x20000080
 8007a44:	2000030c 	.word	0x2000030c
 8007a48:	20000000 	.word	0x20000000
 8007a4c:	20000320 	.word	0x20000320

		case MOTION_REVOLUTE_ACTIVE:
			if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8007a50:	4b45      	ldr	r3, [pc, #276]	@ (8007b68 <update_joy_mode+0x3b4>)
 8007a52:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d068      	beq.n	8007b2c <update_joy_mode+0x378>
 8007a5a:	4b44      	ldr	r3, [pc, #272]	@ (8007b6c <update_joy_mode+0x3b8>)
 8007a5c:	7c1b      	ldrb	r3, [r3, #16]
 8007a5e:	f083 0301 	eor.w	r3, r3, #1
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d061      	beq.n	8007b2c <update_joy_mode+0x378>
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007a68:	4b3f      	ldr	r3, [pc, #252]	@ (8007b68 <update_joy_mode+0x3b4>)
 8007a6a:	ed93 8a03 	vldr	s16, [r3, #12]
 8007a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b68 <update_joy_mode+0x3b4>)
 8007a70:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.initial_pos, revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 8007a74:	4b3e      	ldr	r3, [pc, #248]	@ (8007b70 <update_joy_mode+0x3bc>)
 8007a76:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	f7f9 f869 	bl	8000b54 <__aeabi_d2f>
 8007a82:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8007a84:	4b3a      	ldr	r3, [pc, #232]	@ (8007b70 <update_joy_mode+0x3bc>)
 8007a86:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007a8a:	4610      	mov	r0, r2
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	f7f9 f861 	bl	8000b54 <__aeabi_d2f>
 8007a92:	4603      	mov	r3, r0
 8007a94:	ee01 3a90 	vmov	s3, r3
 8007a98:	ee01 4a10 	vmov	s2, r4
 8007a9c:	eef0 0a68 	vmov.f32	s1, s17
 8007aa0:	eeb0 0a48 	vmov.f32	s0, s16
 8007aa4:	4931      	ldr	r1, [pc, #196]	@ (8007b6c <update_joy_mode+0x3b8>)
 8007aa6:	4833      	ldr	r0, [pc, #204]	@ (8007b74 <update_joy_mode+0x3c0>)
 8007aa8:	f7fc fa7a 	bl	8003fa0 <Trapezoidal_Evaluated>

				revolute_axis.position = revEva.setposition;
 8007aac:	4b2f      	ldr	r3, [pc, #188]	@ (8007b6c <update_joy_mode+0x3b8>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8007b68 <update_joy_mode+0x3b4>)
 8007ab2:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = revEva.setvelocity;
 8007ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8007b6c <update_joy_mode+0x3b8>)
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	4a2b      	ldr	r2, [pc, #172]	@ (8007b68 <update_joy_mode+0x3b4>)
 8007aba:	6053      	str	r3, [r2, #4]

				if (revEva.isFinised) {
 8007abc:	4b2b      	ldr	r3, [pc, #172]	@ (8007b6c <update_joy_mode+0x3b8>)
 8007abe:	7c1b      	ldrb	r3, [r3, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d033      	beq.n	8007b2c <update_joy_mode+0x378>
					revolute_axis.trajectory_active = false;
 8007ac4:	4b28      	ldr	r3, [pc, #160]	@ (8007b68 <update_joy_mode+0x3b4>)
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					revolute_axis.position = revEva.setposition;
 8007acc:	4b27      	ldr	r3, [pc, #156]	@ (8007b6c <update_joy_mode+0x3b8>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a25      	ldr	r2, [pc, #148]	@ (8007b68 <update_joy_mode+0x3b4>)
 8007ad2:	6013      	str	r3, [r2, #0]
					revolute_axis.velocity = 0.0f;
 8007ad4:	4b24      	ldr	r3, [pc, #144]	@ (8007b68 <update_joy_mode+0x3b4>)
 8007ad6:	f04f 0200 	mov.w	r2, #0
 8007ada:	605a      	str	r2, [r3, #4]

					PID_CONTROLLER_Reset(&revolute_position_pid);
 8007adc:	4826      	ldr	r0, [pc, #152]	@ (8007b78 <update_joy_mode+0x3c4>)
 8007ade:	f7f9 fc2d 	bl	800133c <PID_CONTROLLER_Reset>
					PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007ae2:	4826      	ldr	r0, [pc, #152]	@ (8007b7c <update_joy_mode+0x3c8>)
 8007ae4:	f7f9 fc2a 	bl	800133c <PID_CONTROLLER_Reset>

					motion_delay_timer = 0;
 8007ae8:	4b25      	ldr	r3, [pc, #148]	@ (8007b80 <update_joy_mode+0x3cc>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	601a      	str	r2, [r3, #0]
					motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8007aee:	4b25      	ldr	r3, [pc, #148]	@ (8007b84 <update_joy_mode+0x3d0>)
 8007af0:	2204      	movs	r2, #4
 8007af2:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8007af4:	e01a      	b.n	8007b2c <update_joy_mode+0x378>

		case MOTION_PEN_DOWN_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 8007af6:	4b22      	ldr	r3, [pc, #136]	@ (8007b80 <update_joy_mode+0x3cc>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3301      	adds	r3, #1
 8007afc:	4a20      	ldr	r2, [pc, #128]	@ (8007b80 <update_joy_mode+0x3cc>)
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	f240 52db 	movw	r2, #1499	@ 0x5db
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d913      	bls.n	8007b30 <update_joy_mode+0x37c>
				plotter_pen_down();
 8007b08:	f000 ff70 	bl	80089ec <plotter_pen_down>
				motion_sequence_state = MOTION_COMPLETE;
 8007b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8007b84 <update_joy_mode+0x3d0>)
 8007b0e:	2205      	movs	r2, #5
 8007b10:	701a      	strb	r2, [r3, #0]
			}
			break;
 8007b12:	e00d      	b.n	8007b30 <update_joy_mode+0x37c>

		case MOTION_COMPLETE:
			motion_sequence_state = MOTION_IDLE;
 8007b14:	4b1b      	ldr	r3, [pc, #108]	@ (8007b84 <update_joy_mode+0x3d0>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	701a      	strb	r2, [r3, #0]
			break;
 8007b1a:	e00a      	b.n	8007b32 <update_joy_mode+0x37e>

		default:
			break;
 8007b1c:	bf00      	nop
 8007b1e:	e008      	b.n	8007b32 <update_joy_mode+0x37e>
			break;
 8007b20:	bf00      	nop
 8007b22:	e006      	b.n	8007b32 <update_joy_mode+0x37e>
			break;
 8007b24:	bf00      	nop
 8007b26:	e004      	b.n	8007b32 <update_joy_mode+0x37e>
			break;
 8007b28:	bf00      	nop
 8007b2a:	e002      	b.n	8007b32 <update_joy_mode+0x37e>
			break;
 8007b2c:	bf00      	nop
 8007b2e:	e000      	b.n	8007b32 <update_joy_mode+0x37e>
			break;
 8007b30:	bf00      	nop
		}

		// Update position/velocity control for trajectory playback
		if (motion_sequence_state != MOTION_IDLE) {
 8007b32:	4b14      	ldr	r3, [pc, #80]	@ (8007b84 <update_joy_mode+0x3d0>)
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00f      	beq.n	8007b5a <update_joy_mode+0x3a6>
			// Run position control if not in manual control
			if (position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8007b3a:	4b13      	ldr	r3, [pc, #76]	@ (8007b88 <update_joy_mode+0x3d4>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2b09      	cmp	r3, #9
 8007b40:	d901      	bls.n	8007b46 <update_joy_mode+0x392>
				update_position_control();
 8007b42:	f7fe fa87 	bl	8006054 <update_position_control>
			}
			// Always run velocity control during trajectory
			update_velocity_control();
 8007b46:	f7fe fb43 	bl	80061d0 <update_velocity_control>
		}
		break;
 8007b4a:	e006      	b.n	8007b5a <update_joy_mode+0x3a6>

	case JOY_MODE_COMPLETE:
		exit_joy_mode();
 8007b4c:	f7ff f98a 	bl	8006e64 <exit_joy_mode>
		break;
 8007b50:	e004      	b.n	8007b5c <update_joy_mode+0x3a8>
		return;
 8007b52:	bf00      	nop
 8007b54:	e002      	b.n	8007b5c <update_joy_mode+0x3a8>

	default:
		break;
 8007b56:	bf00      	nop
 8007b58:	e000      	b.n	8007b5c <update_joy_mode+0x3a8>
		break;
 8007b5a:	bf00      	nop
	}
}
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	ecbd 8b02 	vpop	{d8}
 8007b64:	bd90      	pop	{r4, r7, pc}
 8007b66:	bf00      	nop
 8007b68:	200002c4 	.word	0x200002c4
 8007b6c:	20000348 	.word	0x20000348
 8007b70:	20000000 	.word	0x20000000
 8007b74:	20000320 	.word	0x20000320
 8007b78:	200005a0 	.word	0x200005a0
 8007b7c:	200005c8 	.word	0x200005c8
 8007b80:	20000360 	.word	0x20000360
 8007b84:	20000308 	.word	0x20000308
 8007b88:	20000378 	.word	0x20000378

08007b8c <handle_b2_button_polling>:

void handle_b2_button_polling(void) {
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
	// Read current B2 button state (assuming active low like other buttons)
	bool b2_current_state = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8007b92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007b96:	482c      	ldr	r0, [pc, #176]	@ (8007c48 <handle_b2_button_polling+0xbc>)
 8007b98:	f004 fa58 	bl	800c04c <HAL_GPIO_ReadPin>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bf0c      	ite	eq
 8007ba2:	2301      	moveq	r3, #1
 8007ba4:	2300      	movne	r3, #0
 8007ba6:	71fb      	strb	r3, [r7, #7]

	// Simple edge detection without debounce timer here
	if (b2_current_state && !joy_mode_b2_last_state) {
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d03b      	beq.n	8007c26 <handle_b2_button_polling+0x9a>
 8007bae:	4b27      	ldr	r3, [pc, #156]	@ (8007c4c <handle_b2_button_polling+0xc0>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	f083 0301 	eor.w	r3, r3, #1
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d034      	beq.n	8007c26 <handle_b2_button_polling+0x9a>
		// Button just pressed - trigger action immediately
		joy_mode_b2_pressed = true;
 8007bbc:	4b24      	ldr	r3, [pc, #144]	@ (8007c50 <handle_b2_button_polling+0xc4>)
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	701a      	strb	r2, [r3, #0]

		// Handle B2 button press logic
		if (!is_emergency_active() && !homing_active
 8007bc2:	f7ff f8cd 	bl	8006d60 <is_emergency_active>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	f083 0301 	eor.w	r3, r3, #1
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d029      	beq.n	8007c26 <handle_b2_button_polling+0x9a>
 8007bd2:	4b20      	ldr	r3, [pc, #128]	@ (8007c54 <handle_b2_button_polling+0xc8>)
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	f083 0301 	eor.w	r3, r3, #1
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d022      	beq.n	8007c26 <handle_b2_button_polling+0x9a>
				&& motion_sequence_state == MOTION_IDLE) {
 8007be0:	4b1d      	ldr	r3, [pc, #116]	@ (8007c58 <handle_b2_button_polling+0xcc>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d11e      	bne.n	8007c26 <handle_b2_button_polling+0x9a>
			if (!joy_mode_active) {
 8007be8:	4b1c      	ldr	r3, [pc, #112]	@ (8007c5c <handle_b2_button_polling+0xd0>)
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	f083 0301 	eor.w	r3, r3, #1
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d002      	beq.n	8007bfc <handle_b2_button_polling+0x70>
				// Enter joy mode (starts in JOY_MODE_INITIAL_CONTROL)
				enter_joy_mode();
 8007bf6:	f7ff f8c3 	bl	8006d80 <enter_joy_mode>
 8007bfa:	e014      	b.n	8007c26 <handle_b2_button_polling+0x9a>
			} else {
				// Joy mode is active, handle button press based on current state
				if (joy_mode_state == JOY_MODE_INITIAL_CONTROL) {
 8007bfc:	4b18      	ldr	r3, [pc, #96]	@ (8007c60 <handle_b2_button_polling+0xd4>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d103      	bne.n	8007c0c <handle_b2_button_polling+0x80>
					// First B2 press in joy mode - start position saving mode
					joy_mode_state = JOY_MODE_MANUAL_CONTROL;
 8007c04:	4b16      	ldr	r3, [pc, #88]	@ (8007c60 <handle_b2_button_polling+0xd4>)
 8007c06:	2202      	movs	r2, #2
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	e00c      	b.n	8007c26 <handle_b2_button_polling+0x9a>
				} else if (joy_mode_state == JOY_MODE_MANUAL_CONTROL) {
 8007c0c:	4b14      	ldr	r3, [pc, #80]	@ (8007c60 <handle_b2_button_polling+0xd4>)
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d102      	bne.n	8007c1a <handle_b2_button_polling+0x8e>
					// Save current position
					save_current_position();
 8007c14:	f7ff f9aa 	bl	8006f6c <save_current_position>
 8007c18:	e005      	b.n	8007c26 <handle_b2_button_polling+0x9a>
				} else if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8007c1a:	4b11      	ldr	r3, [pc, #68]	@ (8007c60 <handle_b2_button_polling+0xd4>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d101      	bne.n	8007c26 <handle_b2_button_polling+0x9a>
					// Start playback of saved positions
					start_position_playback();
 8007c22:	f7ff f9dd 	bl	8006fe0 <start_position_playback>
			}
		}
	}

	// Update last state
	joy_mode_b2_last_state = b2_current_state;
 8007c26:	4a09      	ldr	r2, [pc, #36]	@ (8007c4c <handle_b2_button_polling+0xc0>)
 8007c28:	79fb      	ldrb	r3, [r7, #7]
 8007c2a:	7013      	strb	r3, [r2, #0]

	// Reset pressed flag when button is released
	if (!b2_current_state) {
 8007c2c:	79fb      	ldrb	r3, [r7, #7]
 8007c2e:	f083 0301 	eor.w	r3, r3, #1
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <handle_b2_button_polling+0xb2>
		joy_mode_b2_pressed = false;
 8007c38:	4b05      	ldr	r3, [pc, #20]	@ (8007c50 <handle_b2_button_polling+0xc4>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	701a      	strb	r2, [r3, #0]
	}
}
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	48000800 	.word	0x48000800
 8007c4c:	200003e9 	.word	0x200003e9
 8007c50:	200003e8 	.word	0x200003e8
 8007c54:	2000036b 	.word	0x2000036b
 8007c58:	20000308 	.word	0x20000308
 8007c5c:	20000385 	.word	0x20000385
 8007c60:	20000384 	.word	0x20000384

08007c64 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PROX_Pin) {
 8007c6e:	88fb      	ldrh	r3, [r7, #6]
 8007c70:	2b40      	cmp	r3, #64	@ 0x40
 8007c72:	d105      	bne.n	8007c80 <HAL_GPIO_EXTI_Callback+0x1c>
		prox_count++;
 8007c74:	4b4e      	ldr	r3, [pc, #312]	@ (8007db0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	4a4d      	ldr	r2, [pc, #308]	@ (8007db0 <HAL_GPIO_EXTI_Callback+0x14c>)
 8007c7c:	6013      	str	r3, [r2, #0]
		return;
 8007c7e:	e093      	b.n	8007da8 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == UPPER_PHOTO_Pin) {
 8007c80:	88fb      	ldrh	r3, [r7, #6]
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d103      	bne.n	8007c8e <HAL_GPIO_EXTI_Callback+0x2a>
		up_photo = true;
 8007c86:	4b4b      	ldr	r3, [pc, #300]	@ (8007db4 <HAL_GPIO_EXTI_Callback+0x150>)
 8007c88:	2201      	movs	r2, #1
 8007c8a:	701a      	strb	r2, [r3, #0]
		return;
 8007c8c:	e08c      	b.n	8007da8 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 8007c8e:	88fb      	ldrh	r3, [r7, #6]
 8007c90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c94:	d103      	bne.n	8007c9e <HAL_GPIO_EXTI_Callback+0x3a>
		low_photo = true;
 8007c96:	4b48      	ldr	r3, [pc, #288]	@ (8007db8 <HAL_GPIO_EXTI_Callback+0x154>)
 8007c98:	2201      	movs	r2, #1
 8007c9a:	701a      	strb	r2, [r3, #0]
		return;
 8007c9c:	e084      	b.n	8007da8 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == EMER_Pin) {
 8007c9e:	88fb      	ldrh	r3, [r7, #6]
 8007ca0:	2b10      	cmp	r3, #16
 8007ca2:	d102      	bne.n	8007caa <HAL_GPIO_EXTI_Callback+0x46>
		trigger_hardware_emergency();
 8007ca4:	f7fe ff2c 	bl	8006b00 <trigger_hardware_emergency>
		return;
 8007ca8:	e07e      	b.n	8007da8 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == J1_Pin) {
 8007caa:	88fb      	ldrh	r3, [r7, #6]
 8007cac:	2b80      	cmp	r3, #128	@ 0x80
 8007cae:	d145      	bne.n	8007d3c <HAL_GPIO_EXTI_Callback+0xd8>
		if (!is_emergency_active() && !homing_active && !joy_mode_active
 8007cb0:	f7ff f856 	bl	8006d60 <is_emergency_active>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	f083 0301 	eor.w	r3, r3, #1
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d06e      	beq.n	8007d9e <HAL_GPIO_EXTI_Callback+0x13a>
 8007cc0:	4b3e      	ldr	r3, [pc, #248]	@ (8007dbc <HAL_GPIO_EXTI_Callback+0x158>)
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	f083 0301 	eor.w	r3, r3, #1
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d067      	beq.n	8007d9e <HAL_GPIO_EXTI_Callback+0x13a>
 8007cce:	4b3c      	ldr	r3, [pc, #240]	@ (8007dc0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	f083 0301 	eor.w	r3, r3, #1
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d060      	beq.n	8007d9e <HAL_GPIO_EXTI_Callback+0x13a>
				&& motion_sequence_state == MOTION_IDLE && !first_startup) {
 8007cdc:	4b39      	ldr	r3, [pc, #228]	@ (8007dc4 <HAL_GPIO_EXTI_Callback+0x160>)
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d15c      	bne.n	8007d9e <HAL_GPIO_EXTI_Callback+0x13a>
 8007ce4:	4b38      	ldr	r3, [pc, #224]	@ (8007dc8 <HAL_GPIO_EXTI_Callback+0x164>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	f083 0301 	eor.w	r3, r3, #1
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d055      	beq.n	8007d9e <HAL_GPIO_EXTI_Callback+0x13a>
			start_combined_trajectory(
 8007cf2:	4b36      	ldr	r3, [pc, #216]	@ (8007dcc <HAL_GPIO_EXTI_Callback+0x168>)
 8007cf4:	781b      	ldrb	r3, [r3, #0]
					sequence_pris_points[trajectory_sequence_index],
 8007cf6:	4a36      	ldr	r2, [pc, #216]	@ (8007dd0 <HAL_GPIO_EXTI_Callback+0x16c>)
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	edd3 7a00 	vldr	s15, [r3]
			start_combined_trajectory(
 8007d00:	4b32      	ldr	r3, [pc, #200]	@ (8007dcc <HAL_GPIO_EXTI_Callback+0x168>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
					sequence_rev_points[trajectory_sequence_index]);
 8007d04:	4a33      	ldr	r2, [pc, #204]	@ (8007dd4 <HAL_GPIO_EXTI_Callback+0x170>)
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	ed93 7a00 	vldr	s14, [r3]
			start_combined_trajectory(
 8007d0e:	eef0 0a47 	vmov.f32	s1, s14
 8007d12:	eeb0 0a67 	vmov.f32	s0, s15
 8007d16:	f7fe f863 	bl	8005de0 <start_combined_trajectory>
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8007d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8007dcc <HAL_GPIO_EXTI_Callback+0x168>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	1c5a      	adds	r2, r3, #1
					% SEQUENCE_MAX_POINTS;
 8007d20:	4b2d      	ldr	r3, [pc, #180]	@ (8007dd8 <HAL_GPIO_EXTI_Callback+0x174>)
 8007d22:	fb83 3102 	smull	r3, r1, r3, r2
 8007d26:	17d3      	asrs	r3, r2, #31
 8007d28:	1ac9      	subs	r1, r1, r3
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	440b      	add	r3, r1
 8007d30:	005b      	lsls	r3, r3, #1
 8007d32:	1ad1      	subs	r1, r2, r3
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8007d34:	b2ca      	uxtb	r2, r1
 8007d36:	4b25      	ldr	r3, [pc, #148]	@ (8007dcc <HAL_GPIO_EXTI_Callback+0x168>)
 8007d38:	701a      	strb	r2, [r3, #0]
		}
		return;
 8007d3a:	e030      	b.n	8007d9e <HAL_GPIO_EXTI_Callback+0x13a>
	}

	// J2 is NOT handled here anymore - it's polled in the main loop

	if (GPIO_Pin == J3_Pin) {
 8007d3c:	88fb      	ldrh	r3, [r7, #6]
 8007d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d42:	d116      	bne.n	8007d72 <HAL_GPIO_EXTI_Callback+0x10e>
		if (!is_emergency_active() && !joy_mode_active
 8007d44:	f7ff f80c 	bl	8006d60 <is_emergency_active>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	f083 0301 	eor.w	r3, r3, #1
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d026      	beq.n	8007da2 <HAL_GPIO_EXTI_Callback+0x13e>
 8007d54:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	f083 0301 	eor.w	r3, r3, #1
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d01f      	beq.n	8007da2 <HAL_GPIO_EXTI_Callback+0x13e>
				&& motion_sequence_state == MOTION_IDLE) {
 8007d62:	4b18      	ldr	r3, [pc, #96]	@ (8007dc4 <HAL_GPIO_EXTI_Callback+0x160>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d11b      	bne.n	8007da2 <HAL_GPIO_EXTI_Callback+0x13e>
			start_homing_sequence(false);
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	f7fd fb28 	bl	80053c0 <start_homing_sequence>
		}
		return;
 8007d70:	e017      	b.n	8007da2 <HAL_GPIO_EXTI_Callback+0x13e>
	}

	// Modified J4 button handler for joy mode exit
	if (GPIO_Pin == J4_Pin) {
 8007d72:	88fb      	ldrh	r3, [r7, #6]
 8007d74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d78:	d116      	bne.n	8007da8 <HAL_GPIO_EXTI_Callback+0x144>
		if (joy_mode_active) {
 8007d7a:	4b11      	ldr	r3, [pc, #68]	@ (8007dc0 <HAL_GPIO_EXTI_Callback+0x15c>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d002      	beq.n	8007d88 <HAL_GPIO_EXTI_Callback+0x124>
			// Exit joy mode and hold current position (don't move)
			exit_joy_mode();
 8007d82:	f7ff f86f 	bl	8006e64 <exit_joy_mode>
		} else if (is_emergency_active()) {
			clear_emergency_state();
			start_homing_sequence(true);
		}
		return;
 8007d86:	e00e      	b.n	8007da6 <HAL_GPIO_EXTI_Callback+0x142>
		} else if (is_emergency_active()) {
 8007d88:	f7fe ffea 	bl	8006d60 <is_emergency_active>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d009      	beq.n	8007da6 <HAL_GPIO_EXTI_Callback+0x142>
			clear_emergency_state();
 8007d92:	f7fe fef3 	bl	8006b7c <clear_emergency_state>
			start_homing_sequence(true);
 8007d96:	2001      	movs	r0, #1
 8007d98:	f7fd fb12 	bl	80053c0 <start_homing_sequence>
		return;
 8007d9c:	e003      	b.n	8007da6 <HAL_GPIO_EXTI_Callback+0x142>
		return;
 8007d9e:	bf00      	nop
 8007da0:	e002      	b.n	8007da8 <HAL_GPIO_EXTI_Callback+0x144>
		return;
 8007da2:	bf00      	nop
 8007da4:	e000      	b.n	8007da8 <HAL_GPIO_EXTI_Callback+0x144>
		return;
 8007da6:	bf00      	nop
	}
}
 8007da8:	3708      	adds	r7, #8
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	20000364 	.word	0x20000364
 8007db4:	20000368 	.word	0x20000368
 8007db8:	20000369 	.word	0x20000369
 8007dbc:	2000036b 	.word	0x2000036b
 8007dc0:	20000385 	.word	0x20000385
 8007dc4:	20000308 	.word	0x20000308
 8007dc8:	20000133 	.word	0x20000133
 8007dcc:	2000035c 	.word	0x2000035c
 8007dd0:	08013a08 	.word	0x08013a08
 8007dd4:	08013a20 	.word	0x08013a20
 8007dd8:	2aaaaaab 	.word	0x2aaaaaab

08007ddc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
    if (htim == &htim2) {
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a9d      	ldr	r2, [pc, #628]	@ (800805c <HAL_TIM_PeriodElapsedCallback+0x280>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	f040 8133 	bne.w	8008054 <HAL_TIM_PeriodElapsedCallback+0x278>
        plotter_update_sensors();
 8007dee:	f000 fd47 	bl	8008880 <plotter_update_sensors>

        check_emergency_button();
 8007df2:	f7fe fdf5 	bl	80069e0 <check_emergency_button>

        QEI_get_diff_count(&prismatic_encoder);
 8007df6:	489a      	ldr	r0, [pc, #616]	@ (8008060 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8007df8:	f7fb fdca 	bl	8003990 <QEI_get_diff_count>
        QEI_compute_data(&prismatic_encoder);
 8007dfc:	4898      	ldr	r0, [pc, #608]	@ (8008060 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8007dfe:	f7fb feb3 	bl	8003b68 <QEI_compute_data>
        QEI_get_diff_count(&revolute_encoder);
 8007e02:	4898      	ldr	r0, [pc, #608]	@ (8008064 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8007e04:	f7fb fdc4 	bl	8003990 <QEI_get_diff_count>
        QEI_compute_data(&revolute_encoder);
 8007e08:	4896      	ldr	r0, [pc, #600]	@ (8008064 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8007e0a:	f7fb fead 	bl	8003b68 <QEI_compute_data>

        revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 8007e0e:	4b96      	ldr	r3, [pc, #600]	@ (8008068 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007e10:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007e14:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8007e18:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8007e1c:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 800806c <HAL_TIM_PeriodElapsedCallback+0x290>
 8007e20:	eddf 0a93 	vldr	s1, [pc, #588]	@ 8008070 <HAL_TIM_PeriodElapsedCallback+0x294>
 8007e24:	eeb0 0a67 	vmov.f32	s0, s15
 8007e28:	f7fa f81f 	bl	8001e6a <mapf>
 8007e2c:	eef0 7a40 	vmov.f32	s15, s0
 8007e30:	4b8d      	ldr	r3, [pc, #564]	@ (8008068 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007e32:	edc3 7a08 	vstr	s15, [r3, #32]
                65535.0f, -12.0f, 12.0f);
        revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 8007e36:	4b8c      	ldr	r3, [pc, #560]	@ (8008068 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007e38:	edd3 7a08 	vldr	s15, [r3, #32]
 8007e3c:	4b89      	ldr	r3, [pc, #548]	@ (8008064 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8007e3e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8007e42:	eef0 0a47 	vmov.f32	s1, s14
 8007e46:	eeb0 0a67 	vmov.f32	s0, s15
 8007e4a:	488a      	ldr	r0, [pc, #552]	@ (8008074 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8007e4c:	f7fc febc 	bl	8004bc8 <SteadyStateKalmanFilter>
 8007e50:	eef0 7a40 	vmov.f32	s15, s0
 8007e54:	4b84      	ldr	r3, [pc, #528]	@ (8008068 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007e56:	edc3 7a07 	vstr	s15, [r3, #28]
                &revolute_kalman, revolute_axis.input_voltage,
                revolute_encoder.rads);

        if (isnan(revolute_axis.kalman_velocity)) {
 8007e5a:	4b83      	ldr	r3, [pc, #524]	@ (8008068 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007e5c:	edd3 7a07 	vldr	s15, [r3, #28]
 8007e60:	eef4 7a67 	vcmp.f32	s15, s15
 8007e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e68:	d703      	bvc.n	8007e72 <HAL_TIM_PeriodElapsedCallback+0x96>
            revolute_axis.kalman_velocity = 0.0f;
 8007e6a:	4b7f      	ldr	r3, [pc, #508]	@ (8008068 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	61da      	str	r2, [r3, #28]
        }

        prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 8007e72:	4b81      	ldr	r3, [pc, #516]	@ (8008078 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8007e74:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007e78:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8007e7c:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8007e80:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 800806c <HAL_TIM_PeriodElapsedCallback+0x290>
 8007e84:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 8008070 <HAL_TIM_PeriodElapsedCallback+0x294>
 8007e88:	eeb0 0a67 	vmov.f32	s0, s15
 8007e8c:	f7f9 ffed 	bl	8001e6a <mapf>
 8007e90:	eef0 7a40 	vmov.f32	s15, s0
 8007e94:	4b78      	ldr	r3, [pc, #480]	@ (8008078 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8007e96:	edc3 7a08 	vstr	s15, [r3, #32]
                -65535.0f, 65535.0f, -12.0f, 12.0f);
        prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8007e9a:	4b77      	ldr	r3, [pc, #476]	@ (8008078 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8007e9c:	edd3 7a08 	vldr	s15, [r3, #32]
 8007ea0:	4b6f      	ldr	r3, [pc, #444]	@ (8008060 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8007ea2:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8007ea6:	eef0 0a47 	vmov.f32	s1, s14
 8007eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8007eae:	4873      	ldr	r0, [pc, #460]	@ (800807c <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8007eb0:	f7fa ffa8 	bl	8002e04 <MotorKalman_Estimate>
 8007eb4:	eeb0 7a40 	vmov.f32	s14, s0
                prismatic_axis.input_voltage, prismatic_encoder.rads)
                * Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8007eb8:	4b71      	ldr	r3, [pc, #452]	@ (8008080 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8007eba:	edd3 7a04 	vldr	s15, [r3, #16]
 8007ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ec2:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8008084 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 8007ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
        prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8007eca:	4b6b      	ldr	r3, [pc, #428]	@ (8008078 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8007ecc:	edc3 7a07 	vstr	s15, [r3, #28]

        if (isnan(prismatic_axis.kalman_velocity)) {
 8007ed0:	4b69      	ldr	r3, [pc, #420]	@ (8008078 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8007ed2:	edd3 7a07 	vldr	s15, [r3, #28]
 8007ed6:	eef4 7a67 	vcmp.f32	s15, s15
 8007eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ede:	d703      	bvc.n	8007ee8 <HAL_TIM_PeriodElapsedCallback+0x10c>
            prismatic_axis.kalman_velocity = 0.0f;
 8007ee0:	4b65      	ldr	r3, [pc, #404]	@ (8008078 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8007ee2:	f04f 0200 	mov.w	r2, #0
 8007ee6:	61da      	str	r2, [r3, #28]
        }

        // Position control update - Allow during HOMING_REV_TO_ZERO_DEG
        if (++position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8007ee8:	4b67      	ldr	r3, [pc, #412]	@ (8008088 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3301      	adds	r3, #1
 8007eee:	4a66      	ldr	r2, [pc, #408]	@ (8008088 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8007ef0:	6013      	str	r3, [r2, #0]
 8007ef2:	2b09      	cmp	r3, #9
 8007ef4:	d92a      	bls.n	8007f4c <HAL_TIM_PeriodElapsedCallback+0x170>
            position_control_tick = 0;
 8007ef6:	4b64      	ldr	r3, [pc, #400]	@ (8008088 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]

            if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG)  // ← FIXED
 8007efc:	4b63      	ldr	r3, [pc, #396]	@ (800808c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	f083 0301 	eor.w	r3, r3, #1
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d103      	bne.n	8007f12 <HAL_TIM_PeriodElapsedCallback+0x136>
 8007f0a:	4b61      	ldr	r3, [pc, #388]	@ (8008090 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b07      	cmp	r3, #7
 8007f10:	d11c      	bne.n	8007f4c <HAL_TIM_PeriodElapsedCallback+0x170>
                    && (!joy_mode_active
 8007f12:	4b60      	ldr	r3, [pc, #384]	@ (8008094 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	f083 0301 	eor.w	r3, r3, #1
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d107      	bne.n	8007f30 <HAL_TIM_PeriodElapsedCallback+0x154>
                            || (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 8007f20:	4b5d      	ldr	r3, [pc, #372]	@ (8008098 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d011      	beq.n	8007f4c <HAL_TIM_PeriodElapsedCallback+0x170>
                                    && joy_mode_state != JOY_MODE_INITIAL_CONTROL))
 8007f28:	4b5b      	ldr	r3, [pc, #364]	@ (8008098 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d00d      	beq.n	8007f4c <HAL_TIM_PeriodElapsedCallback+0x170>
                    && (!is_emergency_active() || tuning_mode)) {
 8007f30:	f7fe ff16 	bl	8006d60 <is_emergency_active>
 8007f34:	4603      	mov	r3, r0
 8007f36:	f083 0301 	eor.w	r3, r3, #1
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d103      	bne.n	8007f48 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8007f40:	4b56      	ldr	r3, [pc, #344]	@ (800809c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d001      	beq.n	8007f4c <HAL_TIM_PeriodElapsedCallback+0x170>
                update_position_control();
 8007f48:	f7fe f884 	bl	8006054 <update_position_control>
            }
        }

        // Velocity control update - Allow during HOMING_REV_TO_ZERO_DEG
        if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG)  // ← FIXED
 8007f4c:	4b4f      	ldr	r3, [pc, #316]	@ (800808c <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	f083 0301 	eor.w	r3, r3, #1
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d103      	bne.n	8007f62 <HAL_TIM_PeriodElapsedCallback+0x186>
 8007f5a:	4b4d      	ldr	r3, [pc, #308]	@ (8008090 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	2b07      	cmp	r3, #7
 8007f60:	d11c      	bne.n	8007f9c <HAL_TIM_PeriodElapsedCallback+0x1c0>
                && (!joy_mode_active
 8007f62:	4b4c      	ldr	r3, [pc, #304]	@ (8008094 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	f083 0301 	eor.w	r3, r3, #1
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d107      	bne.n	8007f80 <HAL_TIM_PeriodElapsedCallback+0x1a4>
                        || (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 8007f70:	4b49      	ldr	r3, [pc, #292]	@ (8008098 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d011      	beq.n	8007f9c <HAL_TIM_PeriodElapsedCallback+0x1c0>
                                && joy_mode_state != JOY_MODE_INITIAL_CONTROL))
 8007f78:	4b47      	ldr	r3, [pc, #284]	@ (8008098 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d00d      	beq.n	8007f9c <HAL_TIM_PeriodElapsedCallback+0x1c0>
                && (!is_emergency_active() || tuning_mode)) {
 8007f80:	f7fe feee 	bl	8006d60 <is_emergency_active>
 8007f84:	4603      	mov	r3, r0
 8007f86:	f083 0301 	eor.w	r3, r3, #1
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d103      	bne.n	8007f98 <HAL_TIM_PeriodElapsedCallback+0x1bc>
 8007f90:	4b42      	ldr	r3, [pc, #264]	@ (800809c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <HAL_TIM_PeriodElapsedCallback+0x1c0>
            update_velocity_control();
 8007f98:	f7fe f91a 	bl	80061d0 <update_velocity_control>
        }

        update_safety_system();
 8007f9c:	f7fe fe5e 	bl	8006c5c <update_safety_system>

        if (!is_emergency_active() || tuning_mode) {
 8007fa0:	f7fe fede 	bl	8006d60 <is_emergency_active>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	f083 0301 	eor.w	r3, r3, #1
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d103      	bne.n	8007fb8 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 8007fb0:	4b3a      	ldr	r3, [pc, #232]	@ (800809c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <HAL_TIM_PeriodElapsedCallback+0x1e0>
            check_safety_conditions();
 8007fb8:	f7fe fd34 	bl	8006a24 <check_safety_conditions>
        }

        // Control loops - joy mode handles its own control
        if (!joy_mode_active) {
 8007fbc:	4b35      	ldr	r3, [pc, #212]	@ (8008094 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	f083 0301 	eor.w	r3, r3, #1
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d002      	beq.n	8007fd0 <HAL_TIM_PeriodElapsedCallback+0x1f4>
            update_control_loops();
 8007fca:	f7fe fb15 	bl	80065f8 <update_control_loops>
 8007fce:	e001      	b.n	8007fd4 <HAL_TIM_PeriodElapsedCallback+0x1f8>
        } else {
            update_joy_mode();
 8007fd0:	f7ff fbf0 	bl	80077b4 <update_joy_mode>
        }

        // ALWAYS update display values
        if (!joy_mode_active) {
 8007fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8008094 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	f083 0301 	eor.w	r3, r3, #1
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d01e      	beq.n	8008020 <HAL_TIM_PeriodElapsedCallback+0x244>
            // Update display values for normal operation
            normalized_position = normalize_angle(revolute_encoder.rads);
 8007fe2:	4b20      	ldr	r3, [pc, #128]	@ (8008064 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8007fe4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8007fec:	f7fd fe0e 	bl	8005c0c <normalize_angle>
 8007ff0:	eef0 7a40 	vmov.f32	s15, s0
 8007ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80080a0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8007ff6:	edc3 7a00 	vstr	s15, [r3]
            prismatic_axis.mm = prismatic_encoder.mm;
 8007ffa:	4b19      	ldr	r3, [pc, #100]	@ (8008060 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8007ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8008078 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8008000:	6393      	str	r3, [r2, #56]	@ 0x38
            revolute_axis.deg = UnitConverter_angle(&converter_system,
 8008002:	4b27      	ldr	r3, [pc, #156]	@ (80080a0 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008004:	edd3 7a00 	vldr	s15, [r3]
 8008008:	220e      	movs	r2, #14
 800800a:	210f      	movs	r1, #15
 800800c:	eeb0 0a67 	vmov.f32	s0, s15
 8008010:	4824      	ldr	r0, [pc, #144]	@ (80080a4 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8008012:	f7fc fb5d 	bl	80046d0 <UnitConverter_angle>
 8008016:	eef0 7a40 	vmov.f32	s15, s0
 800801a:	4b13      	ldr	r3, [pc, #76]	@ (8008068 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800801c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                    normalized_position, UNIT_RADIAN, UNIT_DEGREE);
        }
        // Note: joy mode updates its own display values in update_joy_mode()

        prismatic_axis.accel_show = FIR_process(&prismatic_lp_accel, prismatic_encoder.mmpss);
 8008020:	4b0f      	ldr	r3, [pc, #60]	@ (8008060 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8008022:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008026:	eeb0 0a67 	vmov.f32	s0, s15
 800802a:	481f      	ldr	r0, [pc, #124]	@ (80080a8 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800802c:	f7f9 fec4 	bl	8001db8 <FIR_process>
 8008030:	eef0 7a40 	vmov.f32	s15, s0
 8008034:	4b10      	ldr	r3, [pc, #64]	@ (8008078 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8008036:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
        revolute_axis.accel_show = FIR_process(&revolute_lp_accel, revolute_encoder.radpss);
 800803a:	4b0a      	ldr	r3, [pc, #40]	@ (8008064 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800803c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008040:	eeb0 0a67 	vmov.f32	s0, s15
 8008044:	4819      	ldr	r0, [pc, #100]	@ (80080ac <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8008046:	f7f9 feb7 	bl	8001db8 <FIR_process>
 800804a:	eef0 7a40 	vmov.f32	s15, s0
 800804e:	4b06      	ldr	r3, [pc, #24]	@ (8008068 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008050:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    }
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	20001a58 	.word	0x20001a58
 8008060:	20000498 	.word	0x20000498
 8008064:	200004f4 	.word	0x200004f4
 8008068:	200002c4 	.word	0x200002c4
 800806c:	477fff00 	.word	0x477fff00
 8008070:	c77fff00 	.word	0xc77fff00
 8008074:	20001598 	.word	0x20001598
 8008078:	20000280 	.word	0x20000280
 800807c:	2000122c 	.word	0x2000122c
 8008080:	20000100 	.word	0x20000100
 8008084:	447a0000 	.word	0x447a0000
 8008088:	20000378 	.word	0x20000378
 800808c:	2000036b 	.word	0x2000036b
 8008090:	2000036a 	.word	0x2000036a
 8008094:	20000385 	.word	0x20000385
 8008098:	20000384 	.word	0x20000384
 800809c:	20000134 	.word	0x20000134
 80080a0:	2000037c 	.word	0x2000037c
 80080a4:	2000088c 	.word	0x2000088c
 80080a8:	20000ae4 	.word	0x20000ae4
 80080ac:	20000af0 	.word	0x20000af0

080080b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80080b0:	b480      	push	{r7}
 80080b2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80080b4:	b672      	cpsid	i
}
 80080b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80080b8:	bf00      	nop
 80080ba:	e7fd      	b.n	80080b8 <Error_Handler+0x8>
 80080bc:	0000      	movs	r0, r0
	...

080080c0 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 80080c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80080c4:	ed2d 8b02 	vpush	{d8}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 80080cc:	4bc6      	ldr	r3, [pc, #792]	@ (80083e8 <plotter_begin+0x328>)
 80080ce:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 80080d2:	4bc6      	ldr	r3, [pc, #792]	@ (80083ec <plotter_begin+0x32c>)
 80080d4:	691b      	ldr	r3, [r3, #16]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7f8 fa02 	bl	80004e0 <__aeabi_f2d>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	4620      	mov	r0, r4
 80080e2:	4629      	mov	r1, r5
 80080e4:	f7f8 fa54 	bl	8000590 <__aeabi_dmul>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4610      	mov	r0, r2
 80080ee:	4619      	mov	r1, r3
 80080f0:	f04f 0200 	mov.w	r2, #0
 80080f4:	4bbe      	ldr	r3, [pc, #760]	@ (80083f0 <plotter_begin+0x330>)
 80080f6:	f7f8 fa4b 	bl	8000590 <__aeabi_dmul>
 80080fa:	4602      	mov	r2, r0
 80080fc:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 80080fe:	49ba      	ldr	r1, [pc, #744]	@ (80083e8 <plotter_begin+0x328>)
 8008100:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 8008104:	4bb8      	ldr	r3, [pc, #736]	@ (80083e8 <plotter_begin+0x328>)
 8008106:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	f7f8 f889 	bl	8000224 <__adddf3>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	49b4      	ldr	r1, [pc, #720]	@ (80083e8 <plotter_begin+0x328>)
 8008118:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500.0;
 800811c:	49b2      	ldr	r1, [pc, #712]	@ (80083e8 <plotter_begin+0x328>)
 800811e:	f04f 0200 	mov.w	r2, #0
 8008122:	4bb4      	ldr	r3, [pc, #720]	@ (80083f4 <plotter_begin+0x334>)
 8008124:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = 1000.0;
 8008128:	49af      	ldr	r1, [pc, #700]	@ (80083e8 <plotter_begin+0x328>)
 800812a:	f04f 0200 	mov.w	r2, #0
 800812e:	4bb0      	ldr	r3, [pc, #704]	@ (80083f0 <plotter_begin+0x330>)
 8008130:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8008134:	4bb0      	ldr	r3, [pc, #704]	@ (80083f8 <plotter_begin+0x338>)
 8008136:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 800813a:	a3a9      	add	r3, pc, #676	@ (adr r3, 80083e0 <plotter_begin+0x320>)
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	f7f8 fa26 	bl	8000590 <__aeabi_dmul>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8008148:	49ab      	ldr	r1, [pc, #684]	@ (80083f8 <plotter_begin+0x338>)
 800814a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	ZGX45RGG_150RPM_Constant.traject_qd_max = 5.0;
 800814e:	49aa      	ldr	r1, [pc, #680]	@ (80083f8 <plotter_begin+0x338>)
 8008150:	f04f 0200 	mov.w	r2, #0
 8008154:	4ba9      	ldr	r3, [pc, #676]	@ (80083fc <plotter_begin+0x33c>)
 8008156:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = 2.0;
 800815a:	49a7      	ldr	r1, [pc, #668]	@ (80083f8 <plotter_begin+0x338>)
 800815c:	f04f 0200 	mov.w	r2, #0
 8008160:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008164:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8008168:	2100      	movs	r1, #0
 800816a:	48a5      	ldr	r0, [pc, #660]	@ (8008400 <plotter_begin+0x340>)
 800816c:	f000 fc4e 	bl	8008a0c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8008170:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 8008404 <plotter_begin+0x344>
 8008174:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 8008408 <plotter_begin+0x348>
 8008178:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 8008440 <plotter_begin+0x380>
 800817c:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 8008440 <plotter_begin+0x380>
 8008180:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 800840c <plotter_begin+0x34c>
 8008184:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8008404 <plotter_begin+0x344>
 8008188:	489d      	ldr	r0, [pc, #628]	@ (8008400 <plotter_begin+0x340>)
 800818a:	f000 fc9d 	bl	8008ac8 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 800818e:	2102      	movs	r1, #2
 8008190:	489f      	ldr	r0, [pc, #636]	@ (8008410 <plotter_begin+0x350>)
 8008192:	f000 fc3b 	bl	8008a0c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8008196:	ed9f 3a9b 	vldr	s6, [pc, #620]	@ 8008404 <plotter_begin+0x344>
 800819a:	eddf 2a9b 	vldr	s5, [pc, #620]	@ 8008408 <plotter_begin+0x348>
 800819e:	ed9f 2aa8 	vldr	s4, [pc, #672]	@ 8008440 <plotter_begin+0x380>
 80081a2:	eddf 1aa7 	vldr	s3, [pc, #668]	@ 8008440 <plotter_begin+0x380>
 80081a6:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80081aa:	eddf 0a98 	vldr	s1, [pc, #608]	@ 800840c <plotter_begin+0x34c>
 80081ae:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8008404 <plotter_begin+0x344>
 80081b2:	4897      	ldr	r0, [pc, #604]	@ (8008410 <plotter_begin+0x350>)
 80081b4:	f000 fcb3 	bl	8008b1e <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 80081b8:	2100      	movs	r1, #0
 80081ba:	4896      	ldr	r0, [pc, #600]	@ (8008414 <plotter_begin+0x354>)
 80081bc:	f000 fc26 	bl	8008a0c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 80081c0:	eddf 2a95 	vldr	s5, [pc, #596]	@ 8008418 <plotter_begin+0x358>
 80081c4:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 800841c <plotter_begin+0x35c>
 80081c8:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 8008440 <plotter_begin+0x380>
 80081cc:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 8008440 <plotter_begin+0x380>
 80081d0:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 800840c <plotter_begin+0x34c>
 80081d4:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8008418 <plotter_begin+0x358>
 80081d8:	488e      	ldr	r0, [pc, #568]	@ (8008414 <plotter_begin+0x354>)
 80081da:	f000 fc75 	bl	8008ac8 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 80081de:	2102      	movs	r1, #2
 80081e0:	488f      	ldr	r0, [pc, #572]	@ (8008420 <plotter_begin+0x360>)
 80081e2:	f000 fc13 	bl	8008a0c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 80081e6:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 80081ea:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 80081ee:	ed9f 2a94 	vldr	s4, [pc, #592]	@ 8008440 <plotter_begin+0x380>
 80081f2:	eddf 1a93 	vldr	s3, [pc, #588]	@ 8008440 <plotter_begin+0x380>
 80081f6:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80081fa:	eddf 0a84 	vldr	s1, [pc, #528]	@ 800840c <plotter_begin+0x34c>
 80081fe:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8008202:	4887      	ldr	r0, [pc, #540]	@ (8008420 <plotter_begin+0x360>)
 8008204:	f000 fc8b 	bl	8008b1e <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8008208:	2100      	movs	r1, #0
 800820a:	4886      	ldr	r0, [pc, #536]	@ (8008424 <plotter_begin+0x364>)
 800820c:	f000 fbfe 	bl	8008a0c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008210:	4b75      	ldr	r3, [pc, #468]	@ (80083e8 <plotter_begin+0x328>)
 8008212:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008216:	4610      	mov	r0, r2
 8008218:	4619      	mov	r1, r3
 800821a:	f7f8 fc9b 	bl	8000b54 <__aeabi_d2f>
 800821e:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8008220:	4b71      	ldr	r3, [pc, #452]	@ (80083e8 <plotter_begin+0x328>)
 8008222:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008226:	4610      	mov	r0, r2
 8008228:	4619      	mov	r1, r3
 800822a:	f7f8 fc93 	bl	8000b54 <__aeabi_d2f>
 800822e:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008230:	ee07 3a90 	vmov	s15, r3
 8008234:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8008238:	4b6b      	ldr	r3, [pc, #428]	@ (80083e8 <plotter_begin+0x328>)
 800823a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800823e:	4610      	mov	r0, r2
 8008240:	4619      	mov	r1, r3
 8008242:	f7f8 fc87 	bl	8000b54 <__aeabi_d2f>
 8008246:	4603      	mov	r3, r0
 8008248:	ee02 3a90 	vmov	s5, r3
 800824c:	eeb0 2a48 	vmov.f32	s4, s16
 8008250:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 8008440 <plotter_begin+0x380>
 8008254:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 8008440 <plotter_begin+0x380>
 8008258:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 800840c <plotter_begin+0x34c>
 800825c:	ee00 4a10 	vmov	s0, r4
 8008260:	4870      	ldr	r0, [pc, #448]	@ (8008424 <plotter_begin+0x364>)
 8008262:	f000 fc31 	bl	8008ac8 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8008266:	2102      	movs	r1, #2
 8008268:	486f      	ldr	r0, [pc, #444]	@ (8008428 <plotter_begin+0x368>)
 800826a:	f000 fbcf 	bl	8008a0c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800826e:	4b5e      	ldr	r3, [pc, #376]	@ (80083e8 <plotter_begin+0x328>)
 8008270:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008274:	4610      	mov	r0, r2
 8008276:	4619      	mov	r1, r3
 8008278:	f7f8 fc6c 	bl	8000b54 <__aeabi_d2f>
 800827c:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 800827e:	4b5a      	ldr	r3, [pc, #360]	@ (80083e8 <plotter_begin+0x328>)
 8008280:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008284:	4610      	mov	r0, r2
 8008286:	4619      	mov	r1, r3
 8008288:	f7f8 fc64 	bl	8000b54 <__aeabi_d2f>
 800828c:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800828e:	ee07 3a90 	vmov	s15, r3
 8008292:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8008296:	4b54      	ldr	r3, [pc, #336]	@ (80083e8 <plotter_begin+0x328>)
 8008298:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800829c:	4610      	mov	r0, r2
 800829e:	4619      	mov	r1, r3
 80082a0:	f7f8 fc58 	bl	8000b54 <__aeabi_d2f>
 80082a4:	4603      	mov	r3, r0
 80082a6:	ee03 3a10 	vmov	s6, r3
 80082aa:	eef0 2a48 	vmov.f32	s5, s16
 80082ae:	ed9f 2a64 	vldr	s4, [pc, #400]	@ 8008440 <plotter_begin+0x380>
 80082b2:	eddf 1a63 	vldr	s3, [pc, #396]	@ 8008440 <plotter_begin+0x380>
 80082b6:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80082ba:	eddf 0a54 	vldr	s1, [pc, #336]	@ 800840c <plotter_begin+0x34c>
 80082be:	ee00 4a10 	vmov	s0, r4
 80082c2:	4859      	ldr	r0, [pc, #356]	@ (8008428 <plotter_begin+0x368>)
 80082c4:	f000 fc2b 	bl	8008b1e <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 80082c8:	2100      	movs	r1, #0
 80082ca:	4858      	ldr	r0, [pc, #352]	@ (800842c <plotter_begin+0x36c>)
 80082cc:	f000 fb9e 	bl	8008a0c <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80082d0:	4b49      	ldr	r3, [pc, #292]	@ (80083f8 <plotter_begin+0x338>)
 80082d2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80082d6:	4610      	mov	r0, r2
 80082d8:	4619      	mov	r1, r3
 80082da:	f7f8 fc3b 	bl	8000b54 <__aeabi_d2f>
 80082de:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 80082e0:	4b45      	ldr	r3, [pc, #276]	@ (80083f8 <plotter_begin+0x338>)
 80082e2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80082e6:	4610      	mov	r0, r2
 80082e8:	4619      	mov	r1, r3
 80082ea:	f7f8 fc33 	bl	8000b54 <__aeabi_d2f>
 80082ee:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80082f0:	ee07 3a90 	vmov	s15, r3
 80082f4:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 80082f8:	4b3f      	ldr	r3, [pc, #252]	@ (80083f8 <plotter_begin+0x338>)
 80082fa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80082fe:	4610      	mov	r0, r2
 8008300:	4619      	mov	r1, r3
 8008302:	f7f8 fc27 	bl	8000b54 <__aeabi_d2f>
 8008306:	4603      	mov	r3, r0
 8008308:	ee02 3a90 	vmov	s5, r3
 800830c:	eeb0 2a48 	vmov.f32	s4, s16
 8008310:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 8008440 <plotter_begin+0x380>
 8008314:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 8008440 <plotter_begin+0x380>
 8008318:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 800840c <plotter_begin+0x34c>
 800831c:	ee00 4a10 	vmov	s0, r4
 8008320:	4842      	ldr	r0, [pc, #264]	@ (800842c <plotter_begin+0x36c>)
 8008322:	f000 fbd1 	bl	8008ac8 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 8008326:	2102      	movs	r1, #2
 8008328:	4841      	ldr	r0, [pc, #260]	@ (8008430 <plotter_begin+0x370>)
 800832a:	f000 fb6f 	bl	8008a0c <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800832e:	4b32      	ldr	r3, [pc, #200]	@ (80083f8 <plotter_begin+0x338>)
 8008330:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008334:	4610      	mov	r0, r2
 8008336:	4619      	mov	r1, r3
 8008338:	f7f8 fc0c 	bl	8000b54 <__aeabi_d2f>
 800833c:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 800833e:	4b2e      	ldr	r3, [pc, #184]	@ (80083f8 <plotter_begin+0x338>)
 8008340:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8008344:	4610      	mov	r0, r2
 8008346:	4619      	mov	r1, r3
 8008348:	f7f8 fc04 	bl	8000b54 <__aeabi_d2f>
 800834c:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8008356:	4b28      	ldr	r3, [pc, #160]	@ (80083f8 <plotter_begin+0x338>)
 8008358:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800835c:	4610      	mov	r0, r2
 800835e:	4619      	mov	r1, r3
 8008360:	f7f8 fbf8 	bl	8000b54 <__aeabi_d2f>
 8008364:	4603      	mov	r3, r0
 8008366:	ee03 3a10 	vmov	s6, r3
 800836a:	eef0 2a48 	vmov.f32	s5, s16
 800836e:	ed9f 2a34 	vldr	s4, [pc, #208]	@ 8008440 <plotter_begin+0x380>
 8008372:	eddf 1a33 	vldr	s3, [pc, #204]	@ 8008440 <plotter_begin+0x380>
 8008376:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 800837a:	eddf 0a24 	vldr	s1, [pc, #144]	@ 800840c <plotter_begin+0x34c>
 800837e:	ee00 4a10 	vmov	s0, r4
 8008382:	482b      	ldr	r0, [pc, #172]	@ (8008430 <plotter_begin+0x370>)
 8008384:	f000 fbcb 	bl	8008b1e <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 8008388:	482a      	ldr	r0, [pc, #168]	@ (8008434 <plotter_begin+0x374>)
 800838a:	f7fc f90b 	bl	80045a4 <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 800838e:	4b17      	ldr	r3, [pc, #92]	@ (80083ec <plotter_begin+0x32c>)
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	4618      	mov	r0, r3
 8008394:	f7f8 f8a4 	bl	80004e0 <__aeabi_f2d>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	f7f7 ff42 	bl	8000224 <__adddf3>
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	4610      	mov	r0, r2
 80083a6:	4619      	mov	r1, r3
 80083a8:	f04f 0200 	mov.w	r2, #0
 80083ac:	4b10      	ldr	r3, [pc, #64]	@ (80083f0 <plotter_begin+0x330>)
 80083ae:	f7f8 f8ef 	bl	8000590 <__aeabi_dmul>
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 80083b6:	4610      	mov	r0, r2
 80083b8:	4619      	mov	r1, r3
 80083ba:	f7f8 fbcb 	bl	8000b54 <__aeabi_d2f>
 80083be:	4603      	mov	r3, r0
 80083c0:	ee00 3a90 	vmov	s1, r3
 80083c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80083c8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80083cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80083d0:	4919      	ldr	r1, [pc, #100]	@ (8008438 <plotter_begin+0x378>)
 80083d2:	481a      	ldr	r0, [pc, #104]	@ (800843c <plotter_begin+0x37c>)
 80083d4:	f7fb fa6a 	bl	80038ac <QEI_init>
 80083d8:	e034      	b.n	8008444 <plotter_begin+0x384>
 80083da:	bf00      	nop
 80083dc:	f3af 8000 	nop.w
 80083e0:	55555555 	.word	0x55555555
 80083e4:	3fe55555 	.word	0x3fe55555
 80083e8:	20000080 	.word	0x20000080
 80083ec:	20000100 	.word	0x20000100
 80083f0:	408f4000 	.word	0x408f4000
 80083f4:	407f4000 	.word	0x407f4000
 80083f8:	20000000 	.word	0x20000000
 80083fc:	40140000 	.word	0x40140000
 8008400:	2000066c 	.word	0x2000066c
 8008404:	477fff00 	.word	0x477fff00
 8008408:	c77fff00 	.word	0xc77fff00
 800840c:	3dcccccd 	.word	0x3dcccccd
 8008410:	200006b0 	.word	0x200006b0
 8008414:	200006f4 	.word	0x200006f4
 8008418:	43480000 	.word	0x43480000
 800841c:	c3480000 	.word	0xc3480000
 8008420:	20000738 	.word	0x20000738
 8008424:	2000077c 	.word	0x2000077c
 8008428:	200007c0 	.word	0x200007c0
 800842c:	20000804 	.word	0x20000804
 8008430:	20000848 	.word	0x20000848
 8008434:	2000088c 	.word	0x2000088c
 8008438:	20001cbc 	.word	0x20001cbc
 800843c:	20000498 	.word	0x20000498
 8008440:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8008444:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 8008440 <plotter_begin+0x380>
 8008448:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800844c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008450:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008454:	49b8      	ldr	r1, [pc, #736]	@ (8008738 <plotter_begin+0x678>)
 8008456:	48b9      	ldr	r0, [pc, #740]	@ (800873c <plotter_begin+0x67c>)
 8008458:	f7fb fa28 	bl	80038ac <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 800845c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008466:	2204      	movs	r2, #4
 8008468:	49b5      	ldr	r1, [pc, #724]	@ (8008740 <plotter_begin+0x680>)
 800846a:	48b6      	ldr	r0, [pc, #728]	@ (8008744 <plotter_begin+0x684>)
 800846c:	f7f8 ff88 	bl	8001380 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8008470:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	4bb4      	ldr	r3, [pc, #720]	@ (8008748 <plotter_begin+0x688>)
 8008478:	2200      	movs	r2, #0
 800847a:	49b1      	ldr	r1, [pc, #708]	@ (8008740 <plotter_begin+0x680>)
 800847c:	48b3      	ldr	r0, [pc, #716]	@ (800874c <plotter_begin+0x68c>)
 800847e:	f7f8 ff7f 	bl	8001380 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8008482:	220c      	movs	r2, #12
 8008484:	49b2      	ldr	r1, [pc, #712]	@ (8008750 <plotter_begin+0x690>)
 8008486:	48b3      	ldr	r0, [pc, #716]	@ (8008754 <plotter_begin+0x694>)
 8008488:	f7fa ffe2 	bl	8003450 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 800848c:	eddf 0ab2 	vldr	s1, [pc, #712]	@ 8008758 <plotter_begin+0x698>
 8008490:	ed9f 0ab2 	vldr	s0, [pc, #712]	@ 800875c <plotter_begin+0x69c>
 8008494:	48ab      	ldr	r0, [pc, #684]	@ (8008744 <plotter_begin+0x684>)
 8008496:	f7f8 ff97 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 800849a:	eddf 0aaf 	vldr	s1, [pc, #700]	@ 8008758 <plotter_begin+0x698>
 800849e:	ed9f 0aaf 	vldr	s0, [pc, #700]	@ 800875c <plotter_begin+0x69c>
 80084a2:	48aa      	ldr	r0, [pc, #680]	@ (800874c <plotter_begin+0x68c>)
 80084a4:	f7f8 ff90 	bl	80013c8 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
			ZGX45RGG_400RPM_Constant.sd_max);
 80084a8:	4bad      	ldr	r3, [pc, #692]	@ (8008760 <plotter_begin+0x6a0>)
 80084aa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
 80084ae:	4610      	mov	r0, r2
 80084b0:	4619      	mov	r1, r3
 80084b2:	f7f8 fb4f 	bl	8000b54 <__aeabi_d2f>
 80084b6:	4603      	mov	r3, r0
 80084b8:	ee01 3a90 	vmov	s3, r3
 80084bc:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 8008764 <plotter_begin+0x6a4>
 80084c0:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 8008768 <plotter_begin+0x6a8>
 80084c4:	ed9f 0aa9 	vldr	s0, [pc, #676]	@ 800876c <plotter_begin+0x6ac>
 80084c8:	48a9      	ldr	r0, [pc, #676]	@ (8008770 <plotter_begin+0x6b0>)
 80084ca:	f7f8 fe72 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 80084ce:	4ba4      	ldr	r3, [pc, #656]	@ (8008760 <plotter_begin+0x6a0>)
 80084d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 80084d4:	4610      	mov	r0, r2
 80084d6:	4619      	mov	r1, r3
 80084d8:	f7f8 fb3c 	bl	8000b54 <__aeabi_d2f>
 80084dc:	4603      	mov	r3, r0
 80084de:	ee01 3a90 	vmov	s3, r3
 80084e2:	ed9f 1a9d 	vldr	s2, [pc, #628]	@ 8008758 <plotter_begin+0x698>
 80084e6:	eddf 0aa3 	vldr	s1, [pc, #652]	@ 8008774 <plotter_begin+0x6b4>
 80084ea:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 8008778 <plotter_begin+0x6b8>
 80084ee:	48a3      	ldr	r0, [pc, #652]	@ (800877c <plotter_begin+0x6bc>)
 80084f0:	f7f8 fe5f 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 130, 0.1, 450,
			ZGX45RGG_150RPM_Constant.qd_max);
 80084f4:	4ba2      	ldr	r3, [pc, #648]	@ (8008780 <plotter_begin+0x6c0>)
 80084f6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 130, 0.1, 450,
 80084fa:	4610      	mov	r0, r2
 80084fc:	4619      	mov	r1, r3
 80084fe:	f7f8 fb29 	bl	8000b54 <__aeabi_d2f>
 8008502:	4603      	mov	r3, r0
 8008504:	ee01 3a90 	vmov	s3, r3
 8008508:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 8008784 <plotter_begin+0x6c4>
 800850c:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 8008788 <plotter_begin+0x6c8>
 8008510:	ed9f 0a9e 	vldr	s0, [pc, #632]	@ 800878c <plotter_begin+0x6cc>
 8008514:	489e      	ldr	r0, [pc, #632]	@ (8008790 <plotter_begin+0x6d0>)
 8008516:	f7f8 fe4c 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 25, 500,
			ZGX45RGG_150RPM_Constant.U_max);
 800851a:	4b99      	ldr	r3, [pc, #612]	@ (8008780 <plotter_begin+0x6c0>)
 800851c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 25, 500,
 8008520:	4610      	mov	r0, r2
 8008522:	4619      	mov	r1, r3
 8008524:	f7f8 fb16 	bl	8000b54 <__aeabi_d2f>
 8008528:	4603      	mov	r3, r0
 800852a:	ee01 3a90 	vmov	s3, r3
 800852e:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 8008794 <plotter_begin+0x6d4>
 8008532:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8008536:	ed9f 0a89 	vldr	s0, [pc, #548]	@ 800875c <plotter_begin+0x69c>
 800853a:	4897      	ldr	r0, [pc, #604]	@ (8008798 <plotter_begin+0x6d8>)
 800853c:	f7f8 fe39 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
			ZGX45RGG_150RPM_Constant.U_max);
 8008540:	4b8f      	ldr	r3, [pc, #572]	@ (8008780 <plotter_begin+0x6c0>)
 8008542:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
 8008546:	4610      	mov	r0, r2
 8008548:	4619      	mov	r1, r3
 800854a:	f7f8 fb03 	bl	8000b54 <__aeabi_d2f>
 800854e:	4603      	mov	r3, r0
 8008550:	ee01 3a90 	vmov	s3, r3
 8008554:	ed9f 1a81 	vldr	s2, [pc, #516]	@ 800875c <plotter_begin+0x69c>
 8008558:	eddf 0a90 	vldr	s1, [pc, #576]	@ 800879c <plotter_begin+0x6dc>
 800855c:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 80087a0 <plotter_begin+0x6e0>
 8008560:	4890      	ldr	r0, [pc, #576]	@ (80087a4 <plotter_begin+0x6e4>)
 8008562:	f7f8 fe26 	bl	80011b2 <PID_CONTROLLER_Init>


	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8008566:	4986      	ldr	r1, [pc, #536]	@ (8008780 <plotter_begin+0x6c0>)
 8008568:	488f      	ldr	r0, [pc, #572]	@ (80087a8 <plotter_begin+0x6e8>)
 800856a:	f7f9 f807 	bl	800157c <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 800856e:	497c      	ldr	r1, [pc, #496]	@ (8008760 <plotter_begin+0x6a0>)
 8008570:	488e      	ldr	r0, [pc, #568]	@ (80087ac <plotter_begin+0x6ec>)
 8008572:	f7f9 f981 	bl	8001878 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8008576:	4a8e      	ldr	r2, [pc, #568]	@ (80087b0 <plotter_begin+0x6f0>)
 8008578:	4981      	ldr	r1, [pc, #516]	@ (8008780 <plotter_begin+0x6c0>)
 800857a:	488e      	ldr	r0, [pc, #568]	@ (80087b4 <plotter_begin+0x6f4>)
 800857c:	f7f9 f88d 	bl	800169a <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8008580:	4a8b      	ldr	r2, [pc, #556]	@ (80087b0 <plotter_begin+0x6f0>)
 8008582:	4977      	ldr	r1, [pc, #476]	@ (8008760 <plotter_begin+0x6a0>)
 8008584:	488c      	ldr	r0, [pc, #560]	@ (80087b8 <plotter_begin+0x6f8>)
 8008586:	f7f9 fa1b 	bl	80019c0 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 800858a:	2302      	movs	r3, #2
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	eddf 0a8b 	vldr	s1, [pc, #556]	@ 80087bc <plotter_begin+0x6fc>
 8008592:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 80087c0 <plotter_begin+0x700>
 8008596:	2364      	movs	r3, #100	@ 0x64
 8008598:	4a8a      	ldr	r2, [pc, #552]	@ (80087c4 <plotter_begin+0x704>)
 800859a:	498b      	ldr	r1, [pc, #556]	@ (80087c8 <plotter_begin+0x708>)
 800859c:	488b      	ldr	r0, [pc, #556]	@ (80087cc <plotter_begin+0x70c>)
 800859e:	f7f8 fcbf 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 80085a2:	2105      	movs	r1, #5
 80085a4:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 80087d0 <plotter_begin+0x710>
 80085a8:	4888      	ldr	r0, [pc, #544]	@ (80087cc <plotter_begin+0x70c>)
 80085aa:	f7f8 fd6b 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 80085ae:	4887      	ldr	r0, [pc, #540]	@ (80087cc <plotter_begin+0x70c>)
 80085b0:	f7f8 fd0e 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80085b4:	eddf 0a87 	vldr	s1, [pc, #540]	@ 80087d4 <plotter_begin+0x714>
 80085b8:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80085bc:	211f      	movs	r1, #31
 80085be:	4886      	ldr	r0, [pc, #536]	@ (80087d8 <plotter_begin+0x718>)
 80085c0:	f7f9 fada 	bl	8001b78 <FIR_init>
	FIR_init(&revolute_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80085c4:	eddf 0a83 	vldr	s1, [pc, #524]	@ 80087d4 <plotter_begin+0x714>
 80085c8:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80085cc:	211f      	movs	r1, #31
 80085ce:	4883      	ldr	r0, [pc, #524]	@ (80087dc <plotter_begin+0x71c>)
 80085d0:	f7f9 fad2 	bl	8001b78 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80085d4:	4b62      	ldr	r3, [pc, #392]	@ (8008760 <plotter_begin+0x6a0>)
 80085d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085da:	4610      	mov	r0, r2
 80085dc:	4619      	mov	r1, r3
 80085de:	f7f8 fab9 	bl	8000b54 <__aeabi_d2f>
 80085e2:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80085e4:	4b5e      	ldr	r3, [pc, #376]	@ (8008760 <plotter_begin+0x6a0>)
 80085e6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80085ea:	4610      	mov	r0, r2
 80085ec:	4619      	mov	r1, r3
 80085ee:	f7f8 fab1 	bl	8000b54 <__aeabi_d2f>
 80085f2:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80085f4:	4b5a      	ldr	r3, [pc, #360]	@ (8008760 <plotter_begin+0x6a0>)
 80085f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80085fa:	4610      	mov	r0, r2
 80085fc:	4619      	mov	r1, r3
 80085fe:	f7f8 faa9 	bl	8000b54 <__aeabi_d2f>
 8008602:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8008604:	4b56      	ldr	r3, [pc, #344]	@ (8008760 <plotter_begin+0x6a0>)
 8008606:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800860a:	4610      	mov	r0, r2
 800860c:	4619      	mov	r1, r3
 800860e:	f7f8 faa1 	bl	8000b54 <__aeabi_d2f>
 8008612:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8008614:	4b52      	ldr	r3, [pc, #328]	@ (8008760 <plotter_begin+0x6a0>)
 8008616:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800861a:	4610      	mov	r0, r2
 800861c:	4619      	mov	r1, r3
 800861e:	f7f8 fa99 	bl	8000b54 <__aeabi_d2f>
 8008622:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 8008624:	4b4e      	ldr	r3, [pc, #312]	@ (8008760 <plotter_begin+0x6a0>)
 8008626:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800862a:	4610      	mov	r0, r2
 800862c:	4619      	mov	r1, r3
 800862e:	f7f8 fa91 	bl	8000b54 <__aeabi_d2f>
 8008632:	4603      	mov	r3, r0
 8008634:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8008638:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 800863c:	ee03 3a10 	vmov	s6, r3
 8008640:	ee02 9a90 	vmov	s5, r9
 8008644:	ee02 8a10 	vmov	s4, r8
 8008648:	ee01 6a90 	vmov	s3, r6
 800864c:	ee01 5a10 	vmov	s2, r5
 8008650:	ee00 4a90 	vmov	s1, r4
 8008654:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 80087e0 <plotter_begin+0x720>
 8008658:	4862      	ldr	r0, [pc, #392]	@ (80087e4 <plotter_begin+0x724>)
 800865a:	f7f9 fce5 	bl	8002028 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800865e:	4b48      	ldr	r3, [pc, #288]	@ (8008780 <plotter_begin+0x6c0>)
 8008660:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8008664:	4610      	mov	r0, r2
 8008666:	4619      	mov	r1, r3
 8008668:	f7f8 fa74 	bl	8000b54 <__aeabi_d2f>
 800866c:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 800866e:	4b44      	ldr	r3, [pc, #272]	@ (8008780 <plotter_begin+0x6c0>)
 8008670:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008674:	4610      	mov	r0, r2
 8008676:	4619      	mov	r1, r3
 8008678:	f7f8 fa6c 	bl	8000b54 <__aeabi_d2f>
 800867c:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 800867e:	4b40      	ldr	r3, [pc, #256]	@ (8008780 <plotter_begin+0x6c0>)
 8008680:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8008684:	4610      	mov	r0, r2
 8008686:	4619      	mov	r1, r3
 8008688:	f7f8 fa64 	bl	8000b54 <__aeabi_d2f>
 800868c:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 800868e:	4b3c      	ldr	r3, [pc, #240]	@ (8008780 <plotter_begin+0x6c0>)
 8008690:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8008694:	a326      	add	r3, pc, #152	@ (adr r3, 8008730 <plotter_begin+0x670>)
 8008696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869a:	f7f7 ff79 	bl	8000590 <__aeabi_dmul>
 800869e:	4602      	mov	r2, r0
 80086a0:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80086a2:	4610      	mov	r0, r2
 80086a4:	4619      	mov	r1, r3
 80086a6:	f7f8 fa55 	bl	8000b54 <__aeabi_d2f>
 80086aa:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 80086ac:	4b34      	ldr	r3, [pc, #208]	@ (8008780 <plotter_begin+0x6c0>)
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80086b2:	4610      	mov	r0, r2
 80086b4:	4619      	mov	r1, r3
 80086b6:	f7f8 fa4d 	bl	8000b54 <__aeabi_d2f>
 80086ba:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt, 0.001, &revolute_A, &revolute_B);
 80086bc:	4b30      	ldr	r3, [pc, #192]	@ (8008780 <plotter_begin+0x6c0>)
 80086be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80086c2:	4610      	mov	r0, r2
 80086c4:	4619      	mov	r1, r3
 80086c6:	f7f8 fa45 	bl	8000b54 <__aeabi_d2f>
 80086ca:	4603      	mov	r3, r0
 80086cc:	4946      	ldr	r1, [pc, #280]	@ (80087e8 <plotter_begin+0x728>)
 80086ce:	4847      	ldr	r0, [pc, #284]	@ (80087ec <plotter_begin+0x72c>)
 80086d0:	ed9f 3a43 	vldr	s6, [pc, #268]	@ 80087e0 <plotter_begin+0x720>
 80086d4:	ee02 3a90 	vmov	s5, r3
 80086d8:	ee02 9a10 	vmov	s4, r9
 80086dc:	ee01 8a90 	vmov	s3, r8
 80086e0:	ee01 6a10 	vmov	s2, r6
 80086e4:	ee00 5a90 	vmov	s1, r5
 80086e8:	ee00 4a10 	vmov	s0, r4
 80086ec:	f7fa fe48 	bl	8003380 <GenerateMotorMatrices>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 80086f0:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 80087f0 <plotter_begin+0x730>
 80086f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80086f8:	4a3b      	ldr	r2, [pc, #236]	@ (80087e8 <plotter_begin+0x728>)
 80086fa:	493c      	ldr	r1, [pc, #240]	@ (80087ec <plotter_begin+0x72c>)
 80086fc:	483d      	ldr	r0, [pc, #244]	@ (80087f4 <plotter_begin+0x734>)
 80086fe:	f7fc fbad 	bl	8004e5c <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8008702:	23c8      	movs	r3, #200	@ 0xc8
 8008704:	9301      	str	r3, [sp, #4]
 8008706:	2315      	movs	r3, #21
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	4b3b      	ldr	r3, [pc, #236]	@ (80087f8 <plotter_begin+0x738>)
 800870c:	4a3b      	ldr	r2, [pc, #236]	@ (80087fc <plotter_begin+0x73c>)
 800870e:	493c      	ldr	r1, [pc, #240]	@ (8008800 <plotter_begin+0x740>)
 8008710:	483c      	ldr	r0, [pc, #240]	@ (8008804 <plotter_begin+0x744>)
 8008712:	f7f9 fc21 	bl	8001f58 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8008716:	483c      	ldr	r0, [pc, #240]	@ (8008808 <plotter_begin+0x748>)
 8008718:	f004 fdfe 	bl	800d318 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 800871c:	f000 f876 	bl	800880c <plotter_reset>
}
 8008720:	bf00      	nop
 8008722:	3704      	adds	r7, #4
 8008724:	46bd      	mov	sp, r7
 8008726:	ecbd 8b02 	vpop	{d8}
 800872a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800872e:	bf00      	nop
 8008730:	9999999a 	.word	0x9999999a
 8008734:	40019999 	.word	0x40019999
 8008738:	20001bf0 	.word	0x20001bf0
 800873c:	200004f4 	.word	0x200004f4
 8008740:	20001d88 	.word	0x20001d88
 8008744:	20000400 	.word	0x20000400
 8008748:	48000800 	.word	0x48000800
 800874c:	2000044c 	.word	0x2000044c
 8008750:	2000198c 	.word	0x2000198c
 8008754:	20000630 	.word	0x20000630
 8008758:	00000000 	.word	0x00000000
 800875c:	44fa0000 	.word	0x44fa0000
 8008760:	20000080 	.word	0x20000080
 8008764:	42f00000 	.word	0x42f00000
 8008768:	2edbe6ff 	.word	0x2edbe6ff
 800876c:	42960000 	.word	0x42960000
 8008770:	20000550 	.word	0x20000550
 8008774:	3727c5ac 	.word	0x3727c5ac
 8008778:	43160000 	.word	0x43160000
 800877c:	20000578 	.word	0x20000578
 8008780:	20000000 	.word	0x20000000
 8008784:	43e10000 	.word	0x43e10000
 8008788:	3dcccccd 	.word	0x3dcccccd
 800878c:	43020000 	.word	0x43020000
 8008790:	200005a0 	.word	0x200005a0
 8008794:	43fa0000 	.word	0x43fa0000
 8008798:	200005c8 	.word	0x200005c8
 800879c:	42c80000 	.word	0x42c80000
 80087a0:	45ea6000 	.word	0x45ea6000
 80087a4:	200005f0 	.word	0x200005f0
 80087a8:	20000624 	.word	0x20000624
 80087ac:	20000618 	.word	0x20000618
 80087b0:	20000100 	.word	0x20000100
 80087b4:	20000628 	.word	0x20000628
 80087b8:	2000061c 	.word	0x2000061c
 80087bc:	457ff000 	.word	0x457ff000
 80087c0:	40533333 	.word	0x40533333
 80087c4:	20000afc 	.word	0x20000afc
 80087c8:	200001b4 	.word	0x200001b4
 80087cc:	20000648 	.word	0x20000648
 80087d0:	45000000 	.word	0x45000000
 80087d4:	447a0000 	.word	0x447a0000
 80087d8:	20000ae4 	.word	0x20000ae4
 80087dc:	20000af0 	.word	0x20000af0
 80087e0:	3a83126f 	.word	0x3a83126f
 80087e4:	2000122c 	.word	0x2000122c
 80087e8:	20001958 	.word	0x20001958
 80087ec:	20001918 	.word	0x20001918
 80087f0:	3d4ccccd 	.word	0x3d4ccccd
 80087f4:	20001598 	.word	0x20001598
 80087f8:	2000109c 	.word	0x2000109c
 80087fc:	20001e54 	.word	0x20001e54
 8008800:	20001fec 	.word	0x20001fec
 8008804:	20000bc4 	.word	0x20000bc4
 8008808:	20001a58 	.word	0x20001a58

0800880c <plotter_reset>:

void plotter_reset() {
 800880c:	b580      	push	{r7, lr}
 800880e:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 8008810:	4819      	ldr	r0, [pc, #100]	@ (8008878 <plotter_reset+0x6c>)
 8008812:	f7fb facd 	bl	8003db0 <QEI_reset>
	QEI_reset(&prismatic_encoder);
 8008816:	4818      	ldr	r0, [pc, #96]	@ (8008878 <plotter_reset+0x6c>)
 8008818:	f7fb faca 	bl	8003db0 <QEI_reset>

	prismatic_encoder.diff_counts = 0;
 800881c:	4b16      	ldr	r3, [pc, #88]	@ (8008878 <plotter_reset+0x6c>)
 800881e:	2200      	movs	r2, #0
 8008820:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 8008822:	4b15      	ldr	r3, [pc, #84]	@ (8008878 <plotter_reset+0x6c>)
 8008824:	f04f 0200 	mov.w	r2, #0
 8008828:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 800882a:	4b13      	ldr	r3, [pc, #76]	@ (8008878 <plotter_reset+0x6c>)
 800882c:	2200      	movs	r2, #0
 800882e:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 8008830:	4b11      	ldr	r3, [pc, #68]	@ (8008878 <plotter_reset+0x6c>)
 8008832:	f04f 0200 	mov.w	r2, #0
 8008836:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 8008838:	4b0f      	ldr	r3, [pc, #60]	@ (8008878 <plotter_reset+0x6c>)
 800883a:	f04f 0200 	mov.w	r2, #0
 800883e:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 8008840:	4b0d      	ldr	r3, [pc, #52]	@ (8008878 <plotter_reset+0x6c>)
 8008842:	f04f 0200 	mov.w	r2, #0
 8008846:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 8008848:	4b0c      	ldr	r3, [pc, #48]	@ (800887c <plotter_reset+0x70>)
 800884a:	2200      	movs	r2, #0
 800884c:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 800884e:	4b0b      	ldr	r3, [pc, #44]	@ (800887c <plotter_reset+0x70>)
 8008850:	f04f 0200 	mov.w	r2, #0
 8008854:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 8008856:	4b09      	ldr	r3, [pc, #36]	@ (800887c <plotter_reset+0x70>)
 8008858:	2200      	movs	r2, #0
 800885a:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 800885c:	4b07      	ldr	r3, [pc, #28]	@ (800887c <plotter_reset+0x70>)
 800885e:	f04f 0200 	mov.w	r2, #0
 8008862:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 8008864:	4b05      	ldr	r3, [pc, #20]	@ (800887c <plotter_reset+0x70>)
 8008866:	f04f 0200 	mov.w	r2, #0
 800886a:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 800886c:	4b03      	ldr	r3, [pc, #12]	@ (800887c <plotter_reset+0x70>)
 800886e:	f04f 0200 	mov.w	r2, #0
 8008872:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8008874:	bf00      	nop
 8008876:	bd80      	pop	{r7, pc}
 8008878:	20000498 	.word	0x20000498
 800887c:	200004f4 	.word	0x200004f4

08008880 <plotter_update_sensors>:

void plotter_update_sensors() {
 8008880:	b580      	push	{r7, lr}
 8008882:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 8008884:	eddf 0a41 	vldr	s1, [pc, #260]	@ 800898c <plotter_update_sensors+0x10c>
 8008888:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8008990 <plotter_update_sensors+0x110>
 800888c:	2106      	movs	r1, #6
 800888e:	4841      	ldr	r0, [pc, #260]	@ (8008994 <plotter_update_sensors+0x114>)
 8008890:	f7f8 fc22 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8008894:	eef0 7a40 	vmov.f32	s15, s0
 8008898:	4b3f      	ldr	r3, [pc, #252]	@ (8008998 <plotter_update_sensors+0x118>)
 800889a:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 800889e:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 800898c <plotter_update_sensors+0x10c>
 80088a2:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8008990 <plotter_update_sensors+0x110>
 80088a6:	2107      	movs	r1, #7
 80088a8:	483a      	ldr	r0, [pc, #232]	@ (8008994 <plotter_update_sensors+0x114>)
 80088aa:	f7f8 fc15 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 80088ae:	eef0 7a40 	vmov.f32	s15, s0
 80088b2:	4b3a      	ldr	r3, [pc, #232]	@ (800899c <plotter_update_sensors+0x11c>)
 80088b4:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 80088b8:	2180      	movs	r1, #128	@ 0x80
 80088ba:	4839      	ldr	r0, [pc, #228]	@ (80089a0 <plotter_update_sensors+0x120>)
 80088bc:	f003 fbc6 	bl	800c04c <HAL_GPIO_ReadPin>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	bf0c      	ite	eq
 80088c6:	2301      	moveq	r3, #1
 80088c8:	2300      	movne	r3, #0
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	461a      	mov	r2, r3
 80088ce:	4b35      	ldr	r3, [pc, #212]	@ (80089a4 <plotter_update_sensors+0x124>)
 80088d0:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 80088d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80088d6:	4834      	ldr	r0, [pc, #208]	@ (80089a8 <plotter_update_sensors+0x128>)
 80088d8:	f003 fbb8 	bl	800c04c <HAL_GPIO_ReadPin>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	bf0c      	ite	eq
 80088e2:	2301      	moveq	r3, #1
 80088e4:	2300      	movne	r3, #0
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	461a      	mov	r2, r3
 80088ea:	4b30      	ldr	r3, [pc, #192]	@ (80089ac <plotter_update_sensors+0x12c>)
 80088ec:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 80088ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80088f2:	482d      	ldr	r0, [pc, #180]	@ (80089a8 <plotter_update_sensors+0x128>)
 80088f4:	f003 fbaa 	bl	800c04c <HAL_GPIO_ReadPin>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	bf0c      	ite	eq
 80088fe:	2301      	moveq	r3, #1
 8008900:	2300      	movne	r3, #0
 8008902:	b2db      	uxtb	r3, r3
 8008904:	461a      	mov	r2, r3
 8008906:	4b2a      	ldr	r3, [pc, #168]	@ (80089b0 <plotter_update_sensors+0x130>)
 8008908:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 800890a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800890e:	4826      	ldr	r0, [pc, #152]	@ (80089a8 <plotter_update_sensors+0x128>)
 8008910:	f003 fb9c 	bl	800c04c <HAL_GPIO_ReadPin>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	bf0c      	ite	eq
 800891a:	2301      	moveq	r3, #1
 800891c:	2300      	movne	r3, #0
 800891e:	b2db      	uxtb	r3, r3
 8008920:	461a      	mov	r2, r3
 8008922:	4b24      	ldr	r3, [pc, #144]	@ (80089b4 <plotter_update_sensors+0x134>)
 8008924:	601a      	str	r2, [r3, #0]

	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8008926:	2104      	movs	r1, #4
 8008928:	481d      	ldr	r0, [pc, #116]	@ (80089a0 <plotter_update_sensors+0x120>)
 800892a:	f003 fb8f 	bl	800c04c <HAL_GPIO_ReadPin>
 800892e:	4603      	mov	r3, r0
 8008930:	461a      	mov	r2, r3
 8008932:	4b21      	ldr	r3, [pc, #132]	@ (80089b8 <plotter_update_sensors+0x138>)
 8008934:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8008936:	2102      	movs	r1, #2
 8008938:	4819      	ldr	r0, [pc, #100]	@ (80089a0 <plotter_update_sensors+0x120>)
 800893a:	f003 fb87 	bl	800c04c <HAL_GPIO_ReadPin>
 800893e:	4603      	mov	r3, r0
 8008940:	461a      	mov	r2, r3
 8008942:	4b1e      	ldr	r3, [pc, #120]	@ (80089bc <plotter_update_sensors+0x13c>)
 8008944:	601a      	str	r2, [r3, #0]

	extern bool homing_active;
	if (!homing_active) {
 8008946:	4b1e      	ldr	r3, [pc, #120]	@ (80089c0 <plotter_update_sensors+0x140>)
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	f083 0301 	eor.w	r3, r3, #1
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	d018      	beq.n	8008986 <plotter_update_sensors+0x106>
		extern volatile bool up_photo, low_photo;
		up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 8008954:	2101      	movs	r1, #1
 8008956:	4812      	ldr	r0, [pc, #72]	@ (80089a0 <plotter_update_sensors+0x120>)
 8008958:	f003 fb78 	bl	800c04c <HAL_GPIO_ReadPin>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	bf14      	ite	ne
 8008962:	2301      	movne	r3, #1
 8008964:	2300      	moveq	r3, #0
 8008966:	b2da      	uxtb	r2, r3
 8008968:	4b16      	ldr	r3, [pc, #88]	@ (80089c4 <plotter_update_sensors+0x144>)
 800896a:	701a      	strb	r2, [r3, #0]
		low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 800896c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008970:	480b      	ldr	r0, [pc, #44]	@ (80089a0 <plotter_update_sensors+0x120>)
 8008972:	f003 fb6b 	bl	800c04c <HAL_GPIO_ReadPin>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	bf14      	ite	ne
 800897c:	2301      	movne	r3, #1
 800897e:	2300      	moveq	r3, #0
 8008980:	b2da      	uxtb	r2, r3
 8008982:	4b11      	ldr	r3, [pc, #68]	@ (80089c8 <plotter_update_sensors+0x148>)
 8008984:	701a      	strb	r2, [r3, #0]
	}
}
 8008986:	bf00      	nop
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	42480000 	.word	0x42480000
 8008990:	c2480000 	.word	0xc2480000
 8008994:	20000648 	.word	0x20000648
 8008998:	20001968 	.word	0x20001968
 800899c:	2000196c 	.word	0x2000196c
 80089a0:	48000400 	.word	0x48000400
 80089a4:	20001978 	.word	0x20001978
 80089a8:	48000800 	.word	0x48000800
 80089ac:	2000197c 	.word	0x2000197c
 80089b0:	20001980 	.word	0x20001980
 80089b4:	20001984 	.word	0x20001984
 80089b8:	20001970 	.word	0x20001970
 80089bc:	20001974 	.word	0x20001974
 80089c0:	2000036b 	.word	0x2000036b
 80089c4:	20000368 	.word	0x20000368
 80089c8:	20000369 	.word	0x20000369

080089cc <plotter_pen_up>:

void plotter_pen_up() {
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 80089d0:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 80089d4:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80089e4 <plotter_pen_up+0x18>
 80089d8:	4803      	ldr	r0, [pc, #12]	@ (80089e8 <plotter_pen_up+0x1c>)
 80089da:	f7fa fd5b 	bl	8003494 <PWM_write_duty>
}
 80089de:	bf00      	nop
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	42480000 	.word	0x42480000
 80089e8:	20000630 	.word	0x20000630

080089ec <plotter_pen_down>:

void plotter_pen_down() {
 80089ec:	b580      	push	{r7, lr}
 80089ee:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 80089f0:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 80089f4:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8008a04 <plotter_pen_down+0x18>
 80089f8:	4803      	ldr	r0, [pc, #12]	@ (8008a08 <plotter_pen_down+0x1c>)
 80089fa:	f7fa fd4b 	bl	8003494 <PWM_write_duty>
}
 80089fe:	bf00      	nop
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	42480000 	.word	0x42480000
 8008a08:	20000630 	.word	0x20000630

08008a0c <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	460b      	mov	r3, r1
 8008a16:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	78fa      	ldrb	r2, [r7, #3]
 8008a1c:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008a24:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008a2c:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f04f 0200 	mov.w	r2, #0
 8008a34:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f04f 0200 	mov.w	r2, #0
 8008a3c:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f04f 0200 	mov.w	r2, #0
 8008a44:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f04f 0200 	mov.w	r2, #0
 8008a4c:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a1b      	ldr	r2, [pc, #108]	@ (8008ac0 <SIGNAL_init+0xb4>)
 8008a52:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008a5a:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8008a5c:	78fb      	ldrb	r3, [r7, #3]
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d828      	bhi.n	8008ab4 <SIGNAL_init+0xa8>
 8008a62:	a201      	add	r2, pc, #4	@ (adr r2, 8008a68 <SIGNAL_init+0x5c>)
 8008a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a68:	08008ab3 	.word	0x08008ab3
 8008a6c:	08008a79 	.word	0x08008a79
 8008a70:	08008a97 	.word	0x08008a97
 8008a74:	08008aa1 	.word	0x08008aa1
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008a84:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a0e      	ldr	r2, [pc, #56]	@ (8008ac4 <SIGNAL_init+0xb8>)
 8008a8a:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008a92:	621a      	str	r2, [r3, #32]
            break;
 8008a94:	e00e      	b.n	8008ab4 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8008a9c:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8008a9e:	e009      	b.n	8008ab4 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f04f 0200 	mov.w	r2, #0
 8008aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008aae:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8008ab0:	e000      	b.n	8008ab4 <SIGNAL_init+0xa8>
            break;
 8008ab2:	bf00      	nop
    }
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	bf800000 	.word	0xbf800000
 8008ac4:	41200000 	.word	0x41200000

08008ac8 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8008ac8:	b480      	push	{r7}
 8008aca:	b089      	sub	sp, #36	@ 0x24
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	61f8      	str	r0, [r7, #28]
 8008ad0:	ed87 0a06 	vstr	s0, [r7, #24]
 8008ad4:	edc7 0a05 	vstr	s1, [r7, #20]
 8008ad8:	ed87 1a04 	vstr	s2, [r7, #16]
 8008adc:	edc7 1a03 	vstr	s3, [r7, #12]
 8008ae0:	ed87 2a02 	vstr	s4, [r7, #8]
 8008ae4:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	2200      	movs	r2, #0
 8008aec:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8008b12:	bf00      	nop
 8008b14:	3724      	adds	r7, #36	@ 0x24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8008b1e:	b480      	push	{r7}
 8008b20:	b089      	sub	sp, #36	@ 0x24
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	61f8      	str	r0, [r7, #28]
 8008b26:	ed87 0a06 	vstr	s0, [r7, #24]
 8008b2a:	edc7 0a05 	vstr	s1, [r7, #20]
 8008b2e:	ed87 1a04 	vstr	s2, [r7, #16]
 8008b32:	edc7 1a03 	vstr	s3, [r7, #12]
 8008b36:	ed87 2a02 	vstr	s4, [r7, #8]
 8008b3a:	edc7 2a01 	vstr	s5, [r7, #4]
 8008b3e:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	2202      	movs	r2, #2
 8008b46:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	69ba      	ldr	r2, [r7, #24]
 8008b4c:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8008b72:	bf00      	nop
 8008b74:	3724      	adds	r7, #36	@ 0x24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
	...

08008b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b86:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc4 <HAL_MspInit+0x44>)
 8008b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8008bc4 <HAL_MspInit+0x44>)
 8008b8c:	f043 0301 	orr.w	r3, r3, #1
 8008b90:	6613      	str	r3, [r2, #96]	@ 0x60
 8008b92:	4b0c      	ldr	r3, [pc, #48]	@ (8008bc4 <HAL_MspInit+0x44>)
 8008b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	607b      	str	r3, [r7, #4]
 8008b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008b9e:	4b09      	ldr	r3, [pc, #36]	@ (8008bc4 <HAL_MspInit+0x44>)
 8008ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ba2:	4a08      	ldr	r2, [pc, #32]	@ (8008bc4 <HAL_MspInit+0x44>)
 8008ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008baa:	4b06      	ldr	r3, [pc, #24]	@ (8008bc4 <HAL_MspInit+0x44>)
 8008bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bb2:	603b      	str	r3, [r7, #0]
 8008bb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8008bb6:	f003 fb4f 	bl	800c258 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008bba:	bf00      	nop
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	40021000 	.word	0x40021000

08008bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008bcc:	bf00      	nop
 8008bce:	e7fd      	b.n	8008bcc <NMI_Handler+0x4>

08008bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008bd4:	bf00      	nop
 8008bd6:	e7fd      	b.n	8008bd4 <HardFault_Handler+0x4>

08008bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008bdc:	bf00      	nop
 8008bde:	e7fd      	b.n	8008bdc <MemManage_Handler+0x4>

08008be0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008be0:	b480      	push	{r7}
 8008be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008be4:	bf00      	nop
 8008be6:	e7fd      	b.n	8008be4 <BusFault_Handler+0x4>

08008be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008be8:	b480      	push	{r7}
 8008bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008bec:	bf00      	nop
 8008bee:	e7fd      	b.n	8008bec <UsageFault_Handler+0x4>

08008bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008bf4:	bf00      	nop
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008c02:	bf00      	nop
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008c10:	bf00      	nop
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr

08008c1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008c1e:	f000 ffbb 	bl	8009b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008c22:	bf00      	nop
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 8008c2a:	2001      	movs	r0, #1
 8008c2c:	f003 fa58 	bl	800c0e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008c30:	bf00      	nop
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 8008c38:	2010      	movs	r0, #16
 8008c3a:	f003 fa51 	bl	800c0e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8008c3e:	bf00      	nop
 8008c40:	bd80      	pop	{r7, pc}
	...

08008c44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008c48:	4802      	ldr	r0, [pc, #8]	@ (8008c54 <DMA1_Channel1_IRQHandler+0x10>)
 8008c4a:	f002 ff2e 	bl	800baaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008c4e:	bf00      	nop
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	20000220 	.word	0x20000220

08008c58 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008c5c:	4802      	ldr	r0, [pc, #8]	@ (8008c68 <DMA1_Channel2_IRQHandler+0x10>)
 8008c5e:	f002 ff24 	bl	800baaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008c62:	bf00      	nop
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	20002178 	.word	0x20002178

08008c6c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8008c70:	4802      	ldr	r0, [pc, #8]	@ (8008c7c <DMA1_Channel3_IRQHandler+0x10>)
 8008c72:	f002 ff1a 	bl	800baaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8008c76:	bf00      	nop
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	200021d8 	.word	0x200021d8

08008c80 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8008c84:	4802      	ldr	r0, [pc, #8]	@ (8008c90 <DMA1_Channel4_IRQHandler+0x10>)
 8008c86:	f002 ff10 	bl	800baaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8008c8a:	bf00      	nop
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	200020b8 	.word	0x200020b8

08008c94 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8008c98:	4802      	ldr	r0, [pc, #8]	@ (8008ca4 <DMA1_Channel5_IRQHandler+0x10>)
 8008c9a:	f002 ff06 	bl	800baaa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8008c9e:	bf00      	nop
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	20002118 	.word	0x20002118

08008ca8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8008cac:	2040      	movs	r0, #64	@ 0x40
 8008cae:	f003 fa17 	bl	800c0e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 8008cb2:	2080      	movs	r0, #128	@ 0x80
 8008cb4:	f003 fa14 	bl	800c0e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008cb8:	bf00      	nop
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008cc0:	4803      	ldr	r0, [pc, #12]	@ (8008cd0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8008cc2:	f004 ff4f 	bl	800db64 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8008cc6:	4803      	ldr	r0, [pc, #12]	@ (8008cd4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8008cc8:	f004 ff4c 	bl	800db64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8008ccc:	bf00      	nop
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	2000198c 	.word	0x2000198c
 8008cd4:	20001e54 	.word	0x20001e54

08008cd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008cdc:	4802      	ldr	r0, [pc, #8]	@ (8008ce8 <TIM2_IRQHandler+0x10>)
 8008cde:	f004 ff41 	bl	800db64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008ce2:	bf00      	nop
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20001a58 	.word	0x20001a58

08008cec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008cf0:	4802      	ldr	r0, [pc, #8]	@ (8008cfc <TIM3_IRQHandler+0x10>)
 8008cf2:	f004 ff37 	bl	800db64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008cf6:	bf00      	nop
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20001b24 	.word	0x20001b24

08008d00 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008d04:	4802      	ldr	r0, [pc, #8]	@ (8008d10 <TIM4_IRQHandler+0x10>)
 8008d06:	f004 ff2d 	bl	800db64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8008d0a:	bf00      	nop
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	20001bf0 	.word	0x20001bf0

08008d14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008d18:	4802      	ldr	r0, [pc, #8]	@ (8008d24 <USART2_IRQHandler+0x10>)
 8008d1a:	f006 fc77 	bl	800f60c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008d1e:	bf00      	nop
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	20001fec 	.word	0x20001fec

08008d28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 8008d2c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008d30:	f003 f9d6 	bl	800c0e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 8008d34:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008d38:	f003 f9d2 	bl	800c0e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 8008d3c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008d40:	f003 f9ce 	bl	800c0e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8008d44:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008d48:	f003 f9ca 	bl	800c0e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008d4c:	bf00      	nop
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8008d54:	4802      	ldr	r0, [pc, #8]	@ (8008d60 <LPUART1_IRQHandler+0x10>)
 8008d56:	f006 fc59 	bl	800f60c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8008d5a:	bf00      	nop
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	20001f20 	.word	0x20001f20

08008d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008d6c:	4a14      	ldr	r2, [pc, #80]	@ (8008dc0 <_sbrk+0x5c>)
 8008d6e:	4b15      	ldr	r3, [pc, #84]	@ (8008dc4 <_sbrk+0x60>)
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008d78:	4b13      	ldr	r3, [pc, #76]	@ (8008dc8 <_sbrk+0x64>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d102      	bne.n	8008d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008d80:	4b11      	ldr	r3, [pc, #68]	@ (8008dc8 <_sbrk+0x64>)
 8008d82:	4a12      	ldr	r2, [pc, #72]	@ (8008dcc <_sbrk+0x68>)
 8008d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008d86:	4b10      	ldr	r3, [pc, #64]	@ (8008dc8 <_sbrk+0x64>)
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	693a      	ldr	r2, [r7, #16]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d207      	bcs.n	8008da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008d94:	f008 fec8 	bl	8011b28 <__errno>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	220c      	movs	r2, #12
 8008d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008da2:	e009      	b.n	8008db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008da4:	4b08      	ldr	r3, [pc, #32]	@ (8008dc8 <_sbrk+0x64>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008daa:	4b07      	ldr	r3, [pc, #28]	@ (8008dc8 <_sbrk+0x64>)
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4413      	add	r3, r2
 8008db2:	4a05      	ldr	r2, [pc, #20]	@ (8008dc8 <_sbrk+0x64>)
 8008db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008db6:	68fb      	ldr	r3, [r7, #12]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3718      	adds	r7, #24
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	20020000 	.word	0x20020000
 8008dc4:	00000400 	.word	0x00000400
 8008dc8:	20001988 	.word	0x20001988
 8008dcc:	20002388 	.word	0x20002388

08008dd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008dd4:	4b06      	ldr	r3, [pc, #24]	@ (8008df0 <SystemInit+0x20>)
 8008dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dda:	4a05      	ldr	r2, [pc, #20]	@ (8008df0 <SystemInit+0x20>)
 8008ddc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008de0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008de4:	bf00      	nop
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	e000ed00 	.word	0xe000ed00

08008df4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b098      	sub	sp, #96	@ 0x60
 8008df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008dfa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008dfe:	2200      	movs	r2, #0
 8008e00:	601a      	str	r2, [r3, #0]
 8008e02:	605a      	str	r2, [r3, #4]
 8008e04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008e06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	605a      	str	r2, [r3, #4]
 8008e10:	609a      	str	r2, [r3, #8]
 8008e12:	60da      	str	r2, [r3, #12]
 8008e14:	611a      	str	r2, [r3, #16]
 8008e16:	615a      	str	r2, [r3, #20]
 8008e18:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008e1a:	1d3b      	adds	r3, r7, #4
 8008e1c:	2234      	movs	r2, #52	@ 0x34
 8008e1e:	2100      	movs	r1, #0
 8008e20:	4618      	mov	r0, r3
 8008e22:	f008 fe69 	bl	8011af8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008e26:	4b3b      	ldr	r3, [pc, #236]	@ (8008f14 <MX_TIM1_Init+0x120>)
 8008e28:	4a3b      	ldr	r2, [pc, #236]	@ (8008f18 <MX_TIM1_Init+0x124>)
 8008e2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008e2c:	4b39      	ldr	r3, [pc, #228]	@ (8008f14 <MX_TIM1_Init+0x120>)
 8008e2e:	2200      	movs	r2, #0
 8008e30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e32:	4b38      	ldr	r3, [pc, #224]	@ (8008f14 <MX_TIM1_Init+0x120>)
 8008e34:	2200      	movs	r2, #0
 8008e36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8008e38:	4b36      	ldr	r3, [pc, #216]	@ (8008f14 <MX_TIM1_Init+0x120>)
 8008e3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e40:	4b34      	ldr	r3, [pc, #208]	@ (8008f14 <MX_TIM1_Init+0x120>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008e46:	4b33      	ldr	r3, [pc, #204]	@ (8008f14 <MX_TIM1_Init+0x120>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008e4c:	4b31      	ldr	r3, [pc, #196]	@ (8008f14 <MX_TIM1_Init+0x120>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008e52:	4830      	ldr	r0, [pc, #192]	@ (8008f14 <MX_TIM1_Init+0x120>)
 8008e54:	f004 fad8 	bl	800d408 <HAL_TIM_PWM_Init>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8008e5e:	f7ff f927 	bl	80080b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e62:	2300      	movs	r3, #0
 8008e64:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008e66:	2300      	movs	r3, #0
 8008e68:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008e6e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008e72:	4619      	mov	r1, r3
 8008e74:	4827      	ldr	r0, [pc, #156]	@ (8008f14 <MX_TIM1_Init+0x120>)
 8008e76:	f006 f8e9 	bl	800f04c <HAL_TIMEx_MasterConfigSynchronization>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8008e80:	f7ff f916 	bl	80080b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008e84:	2360      	movs	r3, #96	@ 0x60
 8008e86:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008e90:	2300      	movs	r3, #0
 8008e92:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008e94:	2300      	movs	r3, #0
 8008e96:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008ea0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008ea4:	220c      	movs	r2, #12
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	481a      	ldr	r0, [pc, #104]	@ (8008f14 <MX_TIM1_Init+0x120>)
 8008eaa:	f004 ffd5 	bl	800de58 <HAL_TIM_PWM_ConfigChannel>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8008eb4:	f7ff f8fc 	bl	80080b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008ecc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008ed0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008eda:	2300      	movs	r3, #0
 8008edc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008ede:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008eec:	2300      	movs	r3, #0
 8008eee:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008ef0:	1d3b      	adds	r3, r7, #4
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	4807      	ldr	r0, [pc, #28]	@ (8008f14 <MX_TIM1_Init+0x120>)
 8008ef6:	f006 f93f 	bl	800f178 <HAL_TIMEx_ConfigBreakDeadTime>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d001      	beq.n	8008f04 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8008f00:	f7ff f8d6 	bl	80080b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008f04:	4803      	ldr	r0, [pc, #12]	@ (8008f14 <MX_TIM1_Init+0x120>)
 8008f06:	f000 fb77 	bl	80095f8 <HAL_TIM_MspPostInit>

}
 8008f0a:	bf00      	nop
 8008f0c:	3760      	adds	r7, #96	@ 0x60
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	2000198c 	.word	0x2000198c
 8008f18:	40012c00 	.word	0x40012c00

08008f1c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b088      	sub	sp, #32
 8008f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008f22:	f107 0310 	add.w	r3, r7, #16
 8008f26:	2200      	movs	r2, #0
 8008f28:	601a      	str	r2, [r3, #0]
 8008f2a:	605a      	str	r2, [r3, #4]
 8008f2c:	609a      	str	r2, [r3, #8]
 8008f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008f30:	1d3b      	adds	r3, r7, #4
 8008f32:	2200      	movs	r2, #0
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	605a      	str	r2, [r3, #4]
 8008f38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8008fb4 <MX_TIM2_Init+0x98>)
 8008f3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008f40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8008f42:	4b1c      	ldr	r3, [pc, #112]	@ (8008fb4 <MX_TIM2_Init+0x98>)
 8008f44:	22a9      	movs	r2, #169	@ 0xa9
 8008f46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f48:	4b1a      	ldr	r3, [pc, #104]	@ (8008fb4 <MX_TIM2_Init+0x98>)
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8008f4e:	4b19      	ldr	r3, [pc, #100]	@ (8008fb4 <MX_TIM2_Init+0x98>)
 8008f50:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8008f54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f56:	4b17      	ldr	r3, [pc, #92]	@ (8008fb4 <MX_TIM2_Init+0x98>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f5c:	4b15      	ldr	r3, [pc, #84]	@ (8008fb4 <MX_TIM2_Init+0x98>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008f62:	4814      	ldr	r0, [pc, #80]	@ (8008fb4 <MX_TIM2_Init+0x98>)
 8008f64:	f004 f904 	bl	800d170 <HAL_TIM_Base_Init>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8008f6e:	f7ff f89f 	bl	80080b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008f72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008f76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008f78:	f107 0310 	add.w	r3, r7, #16
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	480d      	ldr	r0, [pc, #52]	@ (8008fb4 <MX_TIM2_Init+0x98>)
 8008f80:	f005 f87e 	bl	800e080 <HAL_TIM_ConfigClockSource>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8008f8a:	f7ff f891 	bl	80080b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f92:	2300      	movs	r3, #0
 8008f94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008f96:	1d3b      	adds	r3, r7, #4
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4806      	ldr	r0, [pc, #24]	@ (8008fb4 <MX_TIM2_Init+0x98>)
 8008f9c:	f006 f856 	bl	800f04c <HAL_TIMEx_MasterConfigSynchronization>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d001      	beq.n	8008faa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8008fa6:	f7ff f883 	bl	80080b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008faa:	bf00      	nop
 8008fac:	3720      	adds	r7, #32
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20001a58 	.word	0x20001a58

08008fb8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b08c      	sub	sp, #48	@ 0x30
 8008fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8008fbe:	f107 030c 	add.w	r3, r7, #12
 8008fc2:	2224      	movs	r2, #36	@ 0x24
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f008 fd96 	bl	8011af8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008fcc:	463b      	mov	r3, r7
 8008fce:	2200      	movs	r2, #0
 8008fd0:	601a      	str	r2, [r3, #0]
 8008fd2:	605a      	str	r2, [r3, #4]
 8008fd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008fd6:	4b21      	ldr	r3, [pc, #132]	@ (800905c <MX_TIM3_Init+0xa4>)
 8008fd8:	4a21      	ldr	r2, [pc, #132]	@ (8009060 <MX_TIM3_Init+0xa8>)
 8008fda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008fdc:	4b1f      	ldr	r3, [pc, #124]	@ (800905c <MX_TIM3_Init+0xa4>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800905c <MX_TIM3_Init+0xa4>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8008fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800905c <MX_TIM3_Init+0xa4>)
 8008fea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008fee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800905c <MX_TIM3_Init+0xa4>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ff6:	4b19      	ldr	r3, [pc, #100]	@ (800905c <MX_TIM3_Init+0xa4>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8008ffc:	2303      	movs	r3, #3
 8008ffe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009000:	2300      	movs	r3, #0
 8009002:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009004:	2301      	movs	r3, #1
 8009006:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009008:	2300      	movs	r3, #0
 800900a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800900c:	2300      	movs	r3, #0
 800900e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009010:	2300      	movs	r3, #0
 8009012:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009014:	2301      	movs	r3, #1
 8009016:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009018:	2300      	movs	r3, #0
 800901a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800901c:	2300      	movs	r3, #0
 800901e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8009020:	f107 030c 	add.w	r3, r7, #12
 8009024:	4619      	mov	r1, r3
 8009026:	480d      	ldr	r0, [pc, #52]	@ (800905c <MX_TIM3_Init+0xa4>)
 8009028:	f004 fc5a 	bl	800d8e0 <HAL_TIM_Encoder_Init>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d001      	beq.n	8009036 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8009032:	f7ff f83d 	bl	80080b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009036:	2300      	movs	r3, #0
 8009038:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800903a:	2300      	movs	r3, #0
 800903c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800903e:	463b      	mov	r3, r7
 8009040:	4619      	mov	r1, r3
 8009042:	4806      	ldr	r0, [pc, #24]	@ (800905c <MX_TIM3_Init+0xa4>)
 8009044:	f006 f802 	bl	800f04c <HAL_TIMEx_MasterConfigSynchronization>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800904e:	f7ff f82f 	bl	80080b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8009052:	bf00      	nop
 8009054:	3730      	adds	r7, #48	@ 0x30
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20001b24 	.word	0x20001b24
 8009060:	40000400 	.word	0x40000400

08009064 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b08c      	sub	sp, #48	@ 0x30
 8009068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800906a:	f107 030c 	add.w	r3, r7, #12
 800906e:	2224      	movs	r2, #36	@ 0x24
 8009070:	2100      	movs	r1, #0
 8009072:	4618      	mov	r0, r3
 8009074:	f008 fd40 	bl	8011af8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009078:	463b      	mov	r3, r7
 800907a:	2200      	movs	r2, #0
 800907c:	601a      	str	r2, [r3, #0]
 800907e:	605a      	str	r2, [r3, #4]
 8009080:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009082:	4b21      	ldr	r3, [pc, #132]	@ (8009108 <MX_TIM4_Init+0xa4>)
 8009084:	4a21      	ldr	r2, [pc, #132]	@ (800910c <MX_TIM4_Init+0xa8>)
 8009086:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8009088:	4b1f      	ldr	r3, [pc, #124]	@ (8009108 <MX_TIM4_Init+0xa4>)
 800908a:	2200      	movs	r2, #0
 800908c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800908e:	4b1e      	ldr	r3, [pc, #120]	@ (8009108 <MX_TIM4_Init+0xa4>)
 8009090:	2200      	movs	r2, #0
 8009092:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8009094:	4b1c      	ldr	r3, [pc, #112]	@ (8009108 <MX_TIM4_Init+0xa4>)
 8009096:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800909a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800909c:	4b1a      	ldr	r3, [pc, #104]	@ (8009108 <MX_TIM4_Init+0xa4>)
 800909e:	2200      	movs	r2, #0
 80090a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80090a2:	4b19      	ldr	r3, [pc, #100]	@ (8009108 <MX_TIM4_Init+0xa4>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80090a8:	2303      	movs	r3, #3
 80090aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80090ac:	2300      	movs	r3, #0
 80090ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80090b0:	2301      	movs	r3, #1
 80090b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80090b4:	2300      	movs	r3, #0
 80090b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80090bc:	2300      	movs	r3, #0
 80090be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80090c0:	2301      	movs	r3, #1
 80090c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80090c4:	2300      	movs	r3, #0
 80090c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80090c8:	2300      	movs	r3, #0
 80090ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80090cc:	f107 030c 	add.w	r3, r7, #12
 80090d0:	4619      	mov	r1, r3
 80090d2:	480d      	ldr	r0, [pc, #52]	@ (8009108 <MX_TIM4_Init+0xa4>)
 80090d4:	f004 fc04 	bl	800d8e0 <HAL_TIM_Encoder_Init>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80090de:	f7fe ffe7 	bl	80080b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80090e2:	2300      	movs	r3, #0
 80090e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80090ea:	463b      	mov	r3, r7
 80090ec:	4619      	mov	r1, r3
 80090ee:	4806      	ldr	r0, [pc, #24]	@ (8009108 <MX_TIM4_Init+0xa4>)
 80090f0:	f005 ffac 	bl	800f04c <HAL_TIMEx_MasterConfigSynchronization>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d001      	beq.n	80090fe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80090fa:	f7fe ffd9 	bl	80080b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80090fe:	bf00      	nop
 8009100:	3730      	adds	r7, #48	@ 0x30
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	20001bf0 	.word	0x20001bf0
 800910c:	40000800 	.word	0x40000800

08009110 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b08c      	sub	sp, #48	@ 0x30
 8009114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009116:	f107 030c 	add.w	r3, r7, #12
 800911a:	2224      	movs	r2, #36	@ 0x24
 800911c:	2100      	movs	r1, #0
 800911e:	4618      	mov	r0, r3
 8009120:	f008 fcea 	bl	8011af8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009124:	463b      	mov	r3, r7
 8009126:	2200      	movs	r2, #0
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	605a      	str	r2, [r3, #4]
 800912c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800912e:	4b21      	ldr	r3, [pc, #132]	@ (80091b4 <MX_TIM5_Init+0xa4>)
 8009130:	4a21      	ldr	r2, [pc, #132]	@ (80091b8 <MX_TIM5_Init+0xa8>)
 8009132:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8009134:	4b1f      	ldr	r3, [pc, #124]	@ (80091b4 <MX_TIM5_Init+0xa4>)
 8009136:	2200      	movs	r2, #0
 8009138:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800913a:	4b1e      	ldr	r3, [pc, #120]	@ (80091b4 <MX_TIM5_Init+0xa4>)
 800913c:	2200      	movs	r2, #0
 800913e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8009140:	4b1c      	ldr	r3, [pc, #112]	@ (80091b4 <MX_TIM5_Init+0xa4>)
 8009142:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009146:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009148:	4b1a      	ldr	r3, [pc, #104]	@ (80091b4 <MX_TIM5_Init+0xa4>)
 800914a:	2200      	movs	r2, #0
 800914c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800914e:	4b19      	ldr	r3, [pc, #100]	@ (80091b4 <MX_TIM5_Init+0xa4>)
 8009150:	2200      	movs	r2, #0
 8009152:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009154:	2303      	movs	r3, #3
 8009156:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009158:	2300      	movs	r3, #0
 800915a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800915c:	2301      	movs	r3, #1
 800915e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009160:	2300      	movs	r3, #0
 8009162:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009164:	2300      	movs	r3, #0
 8009166:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009168:	2300      	movs	r3, #0
 800916a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800916c:	2301      	movs	r3, #1
 800916e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009170:	2300      	movs	r3, #0
 8009172:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8009174:	2300      	movs	r3, #0
 8009176:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8009178:	f107 030c 	add.w	r3, r7, #12
 800917c:	4619      	mov	r1, r3
 800917e:	480d      	ldr	r0, [pc, #52]	@ (80091b4 <MX_TIM5_Init+0xa4>)
 8009180:	f004 fbae 	bl	800d8e0 <HAL_TIM_Encoder_Init>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800918a:	f7fe ff91 	bl	80080b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800918e:	2300      	movs	r3, #0
 8009190:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009192:	2300      	movs	r3, #0
 8009194:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009196:	463b      	mov	r3, r7
 8009198:	4619      	mov	r1, r3
 800919a:	4806      	ldr	r0, [pc, #24]	@ (80091b4 <MX_TIM5_Init+0xa4>)
 800919c:	f005 ff56 	bl	800f04c <HAL_TIMEx_MasterConfigSynchronization>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d001      	beq.n	80091aa <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80091a6:	f7fe ff83 	bl	80080b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80091aa:	bf00      	nop
 80091ac:	3730      	adds	r7, #48	@ 0x30
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	20001cbc 	.word	0x20001cbc
 80091b8:	40000c00 	.word	0x40000c00

080091bc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b09c      	sub	sp, #112	@ 0x70
 80091c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80091c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80091c6:	2200      	movs	r2, #0
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	605a      	str	r2, [r3, #4]
 80091cc:	609a      	str	r2, [r3, #8]
 80091ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80091d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80091d4:	2200      	movs	r2, #0
 80091d6:	601a      	str	r2, [r3, #0]
 80091d8:	605a      	str	r2, [r3, #4]
 80091da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80091dc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80091e0:	2200      	movs	r2, #0
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	605a      	str	r2, [r3, #4]
 80091e6:	609a      	str	r2, [r3, #8]
 80091e8:	60da      	str	r2, [r3, #12]
 80091ea:	611a      	str	r2, [r3, #16]
 80091ec:	615a      	str	r2, [r3, #20]
 80091ee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80091f0:	1d3b      	adds	r3, r7, #4
 80091f2:	2234      	movs	r2, #52	@ 0x34
 80091f4:	2100      	movs	r1, #0
 80091f6:	4618      	mov	r0, r3
 80091f8:	f008 fc7e 	bl	8011af8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80091fc:	4b4c      	ldr	r3, [pc, #304]	@ (8009330 <MX_TIM8_Init+0x174>)
 80091fe:	4a4d      	ldr	r2, [pc, #308]	@ (8009334 <MX_TIM8_Init+0x178>)
 8009200:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009202:	4b4b      	ldr	r3, [pc, #300]	@ (8009330 <MX_TIM8_Init+0x174>)
 8009204:	2200      	movs	r2, #0
 8009206:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009208:	4b49      	ldr	r3, [pc, #292]	@ (8009330 <MX_TIM8_Init+0x174>)
 800920a:	2200      	movs	r2, #0
 800920c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800920e:	4b48      	ldr	r3, [pc, #288]	@ (8009330 <MX_TIM8_Init+0x174>)
 8009210:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009214:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8009216:	4b46      	ldr	r3, [pc, #280]	@ (8009330 <MX_TIM8_Init+0x174>)
 8009218:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800921c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800921e:	4b44      	ldr	r3, [pc, #272]	@ (8009330 <MX_TIM8_Init+0x174>)
 8009220:	2200      	movs	r2, #0
 8009222:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009224:	4b42      	ldr	r3, [pc, #264]	@ (8009330 <MX_TIM8_Init+0x174>)
 8009226:	2200      	movs	r2, #0
 8009228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800922a:	4841      	ldr	r0, [pc, #260]	@ (8009330 <MX_TIM8_Init+0x174>)
 800922c:	f003 ffa0 	bl	800d170 <HAL_TIM_Base_Init>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8009236:	f7fe ff3b 	bl	80080b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800923a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800923e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8009240:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8009244:	4619      	mov	r1, r3
 8009246:	483a      	ldr	r0, [pc, #232]	@ (8009330 <MX_TIM8_Init+0x174>)
 8009248:	f004 ff1a 	bl	800e080 <HAL_TIM_ConfigClockSource>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d001      	beq.n	8009256 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8009252:	f7fe ff2d 	bl	80080b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009256:	4836      	ldr	r0, [pc, #216]	@ (8009330 <MX_TIM8_Init+0x174>)
 8009258:	f004 f8d6 	bl	800d408 <HAL_TIM_PWM_Init>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8009262:	f7fe ff25 	bl	80080b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009266:	2300      	movs	r3, #0
 8009268:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800926a:	2300      	movs	r3, #0
 800926c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800926e:	2300      	movs	r3, #0
 8009270:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009272:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009276:	4619      	mov	r1, r3
 8009278:	482d      	ldr	r0, [pc, #180]	@ (8009330 <MX_TIM8_Init+0x174>)
 800927a:	f005 fee7 	bl	800f04c <HAL_TIMEx_MasterConfigSynchronization>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8009284:	f7fe ff14 	bl	80080b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009288:	2360      	movs	r3, #96	@ 0x60
 800928a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800928c:	2300      	movs	r3, #0
 800928e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009290:	2300      	movs	r3, #0
 8009292:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009294:	2300      	movs	r3, #0
 8009296:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009298:	2300      	movs	r3, #0
 800929a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800929c:	2300      	movs	r3, #0
 800929e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80092a0:	2300      	movs	r3, #0
 80092a2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80092a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80092a8:	2200      	movs	r2, #0
 80092aa:	4619      	mov	r1, r3
 80092ac:	4820      	ldr	r0, [pc, #128]	@ (8009330 <MX_TIM8_Init+0x174>)
 80092ae:	f004 fdd3 	bl	800de58 <HAL_TIM_PWM_ConfigChannel>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d001      	beq.n	80092bc <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 80092b8:	f7fe fefa 	bl	80080b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80092bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80092c0:	2204      	movs	r2, #4
 80092c2:	4619      	mov	r1, r3
 80092c4:	481a      	ldr	r0, [pc, #104]	@ (8009330 <MX_TIM8_Init+0x174>)
 80092c6:	f004 fdc7 	bl	800de58 <HAL_TIM_PWM_ConfigChannel>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 80092d0:	f7fe feee 	bl	80080b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80092d4:	2300      	movs	r3, #0
 80092d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80092d8:	2300      	movs	r3, #0
 80092da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80092dc:	2300      	movs	r3, #0
 80092de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80092e0:	2300      	movs	r3, #0
 80092e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80092e4:	2300      	movs	r3, #0
 80092e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80092e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80092ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80092ee:	2300      	movs	r3, #0
 80092f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80092f2:	2300      	movs	r3, #0
 80092f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80092f6:	2300      	movs	r3, #0
 80092f8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80092fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80092fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009304:	2300      	movs	r3, #0
 8009306:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009308:	2300      	movs	r3, #0
 800930a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800930c:	1d3b      	adds	r3, r7, #4
 800930e:	4619      	mov	r1, r3
 8009310:	4807      	ldr	r0, [pc, #28]	@ (8009330 <MX_TIM8_Init+0x174>)
 8009312:	f005 ff31 	bl	800f178 <HAL_TIMEx_ConfigBreakDeadTime>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d001      	beq.n	8009320 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 800931c:	f7fe fec8 	bl	80080b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8009320:	4803      	ldr	r0, [pc, #12]	@ (8009330 <MX_TIM8_Init+0x174>)
 8009322:	f000 f969 	bl	80095f8 <HAL_TIM_MspPostInit>

}
 8009326:	bf00      	nop
 8009328:	3770      	adds	r7, #112	@ 0x70
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	20001d88 	.word	0x20001d88
 8009334:	40013400 	.word	0x40013400

08009338 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800933c:	4b14      	ldr	r3, [pc, #80]	@ (8009390 <MX_TIM16_Init+0x58>)
 800933e:	4a15      	ldr	r2, [pc, #84]	@ (8009394 <MX_TIM16_Init+0x5c>)
 8009340:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8009342:	4b13      	ldr	r3, [pc, #76]	@ (8009390 <MX_TIM16_Init+0x58>)
 8009344:	22a9      	movs	r2, #169	@ 0xa9
 8009346:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009348:	4b11      	ldr	r3, [pc, #68]	@ (8009390 <MX_TIM16_Init+0x58>)
 800934a:	2200      	movs	r2, #0
 800934c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800934e:	4b10      	ldr	r3, [pc, #64]	@ (8009390 <MX_TIM16_Init+0x58>)
 8009350:	f240 4279 	movw	r2, #1145	@ 0x479
 8009354:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009356:	4b0e      	ldr	r3, [pc, #56]	@ (8009390 <MX_TIM16_Init+0x58>)
 8009358:	2200      	movs	r2, #0
 800935a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800935c:	4b0c      	ldr	r3, [pc, #48]	@ (8009390 <MX_TIM16_Init+0x58>)
 800935e:	2200      	movs	r2, #0
 8009360:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009362:	4b0b      	ldr	r3, [pc, #44]	@ (8009390 <MX_TIM16_Init+0x58>)
 8009364:	2200      	movs	r2, #0
 8009366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8009368:	4809      	ldr	r0, [pc, #36]	@ (8009390 <MX_TIM16_Init+0x58>)
 800936a:	f003 ff01 	bl	800d170 <HAL_TIM_Base_Init>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8009374:	f7fe fe9c 	bl	80080b0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8009378:	2108      	movs	r1, #8
 800937a:	4805      	ldr	r0, [pc, #20]	@ (8009390 <MX_TIM16_Init+0x58>)
 800937c:	f004 f9ba 	bl	800d6f4 <HAL_TIM_OnePulse_Init>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8009386:	f7fe fe93 	bl	80080b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800938a:	bf00      	nop
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	20001e54 	.word	0x20001e54
 8009394:	40014400 	.word	0x40014400

08009398 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a0d      	ldr	r2, [pc, #52]	@ (80093dc <HAL_TIM_PWM_MspInit+0x44>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d113      	bne.n	80093d2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80093aa:	4b0d      	ldr	r3, [pc, #52]	@ (80093e0 <HAL_TIM_PWM_MspInit+0x48>)
 80093ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093ae:	4a0c      	ldr	r2, [pc, #48]	@ (80093e0 <HAL_TIM_PWM_MspInit+0x48>)
 80093b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80093b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80093b6:	4b0a      	ldr	r3, [pc, #40]	@ (80093e0 <HAL_TIM_PWM_MspInit+0x48>)
 80093b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80093be:	60fb      	str	r3, [r7, #12]
 80093c0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80093c2:	2200      	movs	r2, #0
 80093c4:	2100      	movs	r1, #0
 80093c6:	2019      	movs	r0, #25
 80093c8:	f002 f957 	bl	800b67a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80093cc:	2019      	movs	r0, #25
 80093ce:	f002 f96e 	bl	800b6ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80093d2:	bf00      	nop
 80093d4:	3710      	adds	r7, #16
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
 80093da:	bf00      	nop
 80093dc:	40012c00 	.word	0x40012c00
 80093e0:	40021000 	.word	0x40021000

080093e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093f4:	d114      	bne.n	8009420 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80093f6:	4b22      	ldr	r3, [pc, #136]	@ (8009480 <HAL_TIM_Base_MspInit+0x9c>)
 80093f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093fa:	4a21      	ldr	r2, [pc, #132]	@ (8009480 <HAL_TIM_Base_MspInit+0x9c>)
 80093fc:	f043 0301 	orr.w	r3, r3, #1
 8009400:	6593      	str	r3, [r2, #88]	@ 0x58
 8009402:	4b1f      	ldr	r3, [pc, #124]	@ (8009480 <HAL_TIM_Base_MspInit+0x9c>)
 8009404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009406:	f003 0301 	and.w	r3, r3, #1
 800940a:	617b      	str	r3, [r7, #20]
 800940c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800940e:	2200      	movs	r2, #0
 8009410:	2100      	movs	r1, #0
 8009412:	201c      	movs	r0, #28
 8009414:	f002 f931 	bl	800b67a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009418:	201c      	movs	r0, #28
 800941a:	f002 f948 	bl	800b6ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800941e:	e02a      	b.n	8009476 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a17      	ldr	r2, [pc, #92]	@ (8009484 <HAL_TIM_Base_MspInit+0xa0>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d10c      	bne.n	8009444 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800942a:	4b15      	ldr	r3, [pc, #84]	@ (8009480 <HAL_TIM_Base_MspInit+0x9c>)
 800942c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800942e:	4a14      	ldr	r2, [pc, #80]	@ (8009480 <HAL_TIM_Base_MspInit+0x9c>)
 8009430:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009434:	6613      	str	r3, [r2, #96]	@ 0x60
 8009436:	4b12      	ldr	r3, [pc, #72]	@ (8009480 <HAL_TIM_Base_MspInit+0x9c>)
 8009438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800943a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800943e:	613b      	str	r3, [r7, #16]
 8009440:	693b      	ldr	r3, [r7, #16]
}
 8009442:	e018      	b.n	8009476 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a0f      	ldr	r2, [pc, #60]	@ (8009488 <HAL_TIM_Base_MspInit+0xa4>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d113      	bne.n	8009476 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800944e:	4b0c      	ldr	r3, [pc, #48]	@ (8009480 <HAL_TIM_Base_MspInit+0x9c>)
 8009450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009452:	4a0b      	ldr	r2, [pc, #44]	@ (8009480 <HAL_TIM_Base_MspInit+0x9c>)
 8009454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009458:	6613      	str	r3, [r2, #96]	@ 0x60
 800945a:	4b09      	ldr	r3, [pc, #36]	@ (8009480 <HAL_TIM_Base_MspInit+0x9c>)
 800945c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800945e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009462:	60fb      	str	r3, [r7, #12]
 8009464:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8009466:	2200      	movs	r2, #0
 8009468:	2100      	movs	r1, #0
 800946a:	2019      	movs	r0, #25
 800946c:	f002 f905 	bl	800b67a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009470:	2019      	movs	r0, #25
 8009472:	f002 f91c 	bl	800b6ae <HAL_NVIC_EnableIRQ>
}
 8009476:	bf00      	nop
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	40021000 	.word	0x40021000
 8009484:	40013400 	.word	0x40013400
 8009488:	40014400 	.word	0x40014400

0800948c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08e      	sub	sp, #56	@ 0x38
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009494:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009498:	2200      	movs	r2, #0
 800949a:	601a      	str	r2, [r3, #0]
 800949c:	605a      	str	r2, [r3, #4]
 800949e:	609a      	str	r2, [r3, #8]
 80094a0:	60da      	str	r2, [r3, #12]
 80094a2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a4f      	ldr	r2, [pc, #316]	@ (80095e8 <HAL_TIM_Encoder_MspInit+0x15c>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d131      	bne.n	8009512 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80094ae:	4b4f      	ldr	r3, [pc, #316]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 80094b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094b2:	4a4e      	ldr	r2, [pc, #312]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 80094b4:	f043 0302 	orr.w	r3, r3, #2
 80094b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80094ba:	4b4c      	ldr	r3, [pc, #304]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 80094bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094be:	f003 0302 	and.w	r3, r3, #2
 80094c2:	623b      	str	r3, [r7, #32]
 80094c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094c6:	4b49      	ldr	r3, [pc, #292]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 80094c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094ca:	4a48      	ldr	r2, [pc, #288]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 80094cc:	f043 0301 	orr.w	r3, r3, #1
 80094d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80094d2:	4b46      	ldr	r3, [pc, #280]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 80094d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	61fb      	str	r3, [r7, #28]
 80094dc:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80094de:	23c0      	movs	r3, #192	@ 0xc0
 80094e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094e2:	2302      	movs	r3, #2
 80094e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094ea:	2300      	movs	r3, #0
 80094ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80094ee:	2302      	movs	r3, #2
 80094f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80094f6:	4619      	mov	r1, r3
 80094f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80094fc:	f002 fc24 	bl	800bd48 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8009500:	2200      	movs	r2, #0
 8009502:	2100      	movs	r1, #0
 8009504:	201d      	movs	r0, #29
 8009506:	f002 f8b8 	bl	800b67a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800950a:	201d      	movs	r0, #29
 800950c:	f002 f8cf 	bl	800b6ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8009510:	e065      	b.n	80095de <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a36      	ldr	r2, [pc, #216]	@ (80095f0 <HAL_TIM_Encoder_MspInit+0x164>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d132      	bne.n	8009582 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800951c:	4b33      	ldr	r3, [pc, #204]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 800951e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009520:	4a32      	ldr	r2, [pc, #200]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 8009522:	f043 0304 	orr.w	r3, r3, #4
 8009526:	6593      	str	r3, [r2, #88]	@ 0x58
 8009528:	4b30      	ldr	r3, [pc, #192]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 800952a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800952c:	f003 0304 	and.w	r3, r3, #4
 8009530:	61bb      	str	r3, [r7, #24]
 8009532:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009534:	4b2d      	ldr	r3, [pc, #180]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 8009536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009538:	4a2c      	ldr	r2, [pc, #176]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 800953a:	f043 0301 	orr.w	r3, r3, #1
 800953e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009540:	4b2a      	ldr	r3, [pc, #168]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 8009542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009544:	f003 0301 	and.w	r3, r3, #1
 8009548:	617b      	str	r3, [r7, #20]
 800954a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800954c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009550:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009552:	2302      	movs	r3, #2
 8009554:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009556:	2300      	movs	r3, #0
 8009558:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800955a:	2300      	movs	r3, #0
 800955c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800955e:	230a      	movs	r3, #10
 8009560:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009562:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009566:	4619      	mov	r1, r3
 8009568:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800956c:	f002 fbec 	bl	800bd48 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8009570:	2200      	movs	r2, #0
 8009572:	2100      	movs	r1, #0
 8009574:	201e      	movs	r0, #30
 8009576:	f002 f880 	bl	800b67a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800957a:	201e      	movs	r0, #30
 800957c:	f002 f897 	bl	800b6ae <HAL_NVIC_EnableIRQ>
}
 8009580:	e02d      	b.n	80095de <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a1b      	ldr	r2, [pc, #108]	@ (80095f4 <HAL_TIM_Encoder_MspInit+0x168>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d128      	bne.n	80095de <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800958c:	4b17      	ldr	r3, [pc, #92]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 800958e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009590:	4a16      	ldr	r2, [pc, #88]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 8009592:	f043 0308 	orr.w	r3, r3, #8
 8009596:	6593      	str	r3, [r2, #88]	@ 0x58
 8009598:	4b14      	ldr	r3, [pc, #80]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 800959a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800959c:	f003 0308 	and.w	r3, r3, #8
 80095a0:	613b      	str	r3, [r7, #16]
 80095a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095a4:	4b11      	ldr	r3, [pc, #68]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 80095a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095a8:	4a10      	ldr	r2, [pc, #64]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 80095aa:	f043 0301 	orr.w	r3, r3, #1
 80095ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80095b0:	4b0e      	ldr	r3, [pc, #56]	@ (80095ec <HAL_TIM_Encoder_MspInit+0x160>)
 80095b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095b4:	f003 0301 	and.w	r3, r3, #1
 80095b8:	60fb      	str	r3, [r7, #12]
 80095ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80095bc:	2303      	movs	r3, #3
 80095be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80095c0:	2302      	movs	r3, #2
 80095c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095c4:	2300      	movs	r3, #0
 80095c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095c8:	2300      	movs	r3, #0
 80095ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80095cc:	2302      	movs	r3, #2
 80095ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80095d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095d4:	4619      	mov	r1, r3
 80095d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80095da:	f002 fbb5 	bl	800bd48 <HAL_GPIO_Init>
}
 80095de:	bf00      	nop
 80095e0:	3738      	adds	r7, #56	@ 0x38
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	40000400 	.word	0x40000400
 80095ec:	40021000 	.word	0x40021000
 80095f0:	40000800 	.word	0x40000800
 80095f4:	40000c00 	.word	0x40000c00

080095f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b08a      	sub	sp, #40	@ 0x28
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009600:	f107 0314 	add.w	r3, r7, #20
 8009604:	2200      	movs	r2, #0
 8009606:	601a      	str	r2, [r3, #0]
 8009608:	605a      	str	r2, [r3, #4]
 800960a:	609a      	str	r2, [r3, #8]
 800960c:	60da      	str	r2, [r3, #12]
 800960e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a22      	ldr	r2, [pc, #136]	@ (80096a0 <HAL_TIM_MspPostInit+0xa8>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d11c      	bne.n	8009654 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800961a:	4b22      	ldr	r3, [pc, #136]	@ (80096a4 <HAL_TIM_MspPostInit+0xac>)
 800961c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800961e:	4a21      	ldr	r2, [pc, #132]	@ (80096a4 <HAL_TIM_MspPostInit+0xac>)
 8009620:	f043 0304 	orr.w	r3, r3, #4
 8009624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009626:	4b1f      	ldr	r3, [pc, #124]	@ (80096a4 <HAL_TIM_MspPostInit+0xac>)
 8009628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800962a:	f003 0304 	and.w	r3, r3, #4
 800962e:	613b      	str	r3, [r7, #16]
 8009630:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009632:	2308      	movs	r3, #8
 8009634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009636:	2302      	movs	r3, #2
 8009638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800963a:	2300      	movs	r3, #0
 800963c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800963e:	2300      	movs	r3, #0
 8009640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8009642:	2302      	movs	r3, #2
 8009644:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009646:	f107 0314 	add.w	r3, r7, #20
 800964a:	4619      	mov	r1, r3
 800964c:	4816      	ldr	r0, [pc, #88]	@ (80096a8 <HAL_TIM_MspPostInit+0xb0>)
 800964e:	f002 fb7b 	bl	800bd48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8009652:	e020      	b.n	8009696 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a14      	ldr	r2, [pc, #80]	@ (80096ac <HAL_TIM_MspPostInit+0xb4>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d11b      	bne.n	8009696 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800965e:	4b11      	ldr	r3, [pc, #68]	@ (80096a4 <HAL_TIM_MspPostInit+0xac>)
 8009660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009662:	4a10      	ldr	r2, [pc, #64]	@ (80096a4 <HAL_TIM_MspPostInit+0xac>)
 8009664:	f043 0304 	orr.w	r3, r3, #4
 8009668:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800966a:	4b0e      	ldr	r3, [pc, #56]	@ (80096a4 <HAL_TIM_MspPostInit+0xac>)
 800966c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800966e:	f003 0304 	and.w	r3, r3, #4
 8009672:	60fb      	str	r3, [r7, #12]
 8009674:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009676:	23c0      	movs	r3, #192	@ 0xc0
 8009678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800967a:	2302      	movs	r3, #2
 800967c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800967e:	2300      	movs	r3, #0
 8009680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009682:	2300      	movs	r3, #0
 8009684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8009686:	2304      	movs	r3, #4
 8009688:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800968a:	f107 0314 	add.w	r3, r7, #20
 800968e:	4619      	mov	r1, r3
 8009690:	4805      	ldr	r0, [pc, #20]	@ (80096a8 <HAL_TIM_MspPostInit+0xb0>)
 8009692:	f002 fb59 	bl	800bd48 <HAL_GPIO_Init>
}
 8009696:	bf00      	nop
 8009698:	3728      	adds	r7, #40	@ 0x28
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	40012c00 	.word	0x40012c00
 80096a4:	40021000 	.word	0x40021000
 80096a8:	48000800 	.word	0x48000800
 80096ac:	40013400 	.word	0x40013400

080096b0 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80096b4:	4b20      	ldr	r3, [pc, #128]	@ (8009738 <MX_LPUART1_UART_Init+0x88>)
 80096b6:	4a21      	ldr	r2, [pc, #132]	@ (800973c <MX_LPUART1_UART_Init+0x8c>)
 80096b8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 80096ba:	4b1f      	ldr	r3, [pc, #124]	@ (8009738 <MX_LPUART1_UART_Init+0x88>)
 80096bc:	4a20      	ldr	r2, [pc, #128]	@ (8009740 <MX_LPUART1_UART_Init+0x90>)
 80096be:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80096c0:	4b1d      	ldr	r3, [pc, #116]	@ (8009738 <MX_LPUART1_UART_Init+0x88>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80096c6:	4b1c      	ldr	r3, [pc, #112]	@ (8009738 <MX_LPUART1_UART_Init+0x88>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80096cc:	4b1a      	ldr	r3, [pc, #104]	@ (8009738 <MX_LPUART1_UART_Init+0x88>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80096d2:	4b19      	ldr	r3, [pc, #100]	@ (8009738 <MX_LPUART1_UART_Init+0x88>)
 80096d4:	220c      	movs	r2, #12
 80096d6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80096d8:	4b17      	ldr	r3, [pc, #92]	@ (8009738 <MX_LPUART1_UART_Init+0x88>)
 80096da:	2200      	movs	r2, #0
 80096dc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80096de:	4b16      	ldr	r3, [pc, #88]	@ (8009738 <MX_LPUART1_UART_Init+0x88>)
 80096e0:	2200      	movs	r2, #0
 80096e2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80096e4:	4b14      	ldr	r3, [pc, #80]	@ (8009738 <MX_LPUART1_UART_Init+0x88>)
 80096e6:	2200      	movs	r2, #0
 80096e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80096ea:	4b13      	ldr	r3, [pc, #76]	@ (8009738 <MX_LPUART1_UART_Init+0x88>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80096f0:	4811      	ldr	r0, [pc, #68]	@ (8009738 <MX_LPUART1_UART_Init+0x88>)
 80096f2:	f005 fe25 	bl	800f340 <HAL_UART_Init>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d001      	beq.n	8009700 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80096fc:	f7fe fcd8 	bl	80080b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009700:	2100      	movs	r1, #0
 8009702:	480d      	ldr	r0, [pc, #52]	@ (8009738 <MX_LPUART1_UART_Init+0x88>)
 8009704:	f007 fb82 	bl	8010e0c <HAL_UARTEx_SetTxFifoThreshold>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800970e:	f7fe fccf 	bl	80080b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009712:	2100      	movs	r1, #0
 8009714:	4808      	ldr	r0, [pc, #32]	@ (8009738 <MX_LPUART1_UART_Init+0x88>)
 8009716:	f007 fbb7 	bl	8010e88 <HAL_UARTEx_SetRxFifoThreshold>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8009720:	f7fe fcc6 	bl	80080b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8009724:	4804      	ldr	r0, [pc, #16]	@ (8009738 <MX_LPUART1_UART_Init+0x88>)
 8009726:	f007 fb38 	bl	8010d9a <HAL_UARTEx_DisableFifoMode>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8009730:	f7fe fcbe 	bl	80080b0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8009734:	bf00      	nop
 8009736:	bd80      	pop	{r7, pc}
 8009738:	20001f20 	.word	0x20001f20
 800973c:	40008000 	.word	0x40008000
 8009740:	001e8480 	.word	0x001e8480

08009744 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009748:	4b23      	ldr	r3, [pc, #140]	@ (80097d8 <MX_USART2_UART_Init+0x94>)
 800974a:	4a24      	ldr	r2, [pc, #144]	@ (80097dc <MX_USART2_UART_Init+0x98>)
 800974c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800974e:	4b22      	ldr	r3, [pc, #136]	@ (80097d8 <MX_USART2_UART_Init+0x94>)
 8009750:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8009754:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8009756:	4b20      	ldr	r3, [pc, #128]	@ (80097d8 <MX_USART2_UART_Init+0x94>)
 8009758:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800975c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800975e:	4b1e      	ldr	r3, [pc, #120]	@ (80097d8 <MX_USART2_UART_Init+0x94>)
 8009760:	2200      	movs	r2, #0
 8009762:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8009764:	4b1c      	ldr	r3, [pc, #112]	@ (80097d8 <MX_USART2_UART_Init+0x94>)
 8009766:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800976a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800976c:	4b1a      	ldr	r3, [pc, #104]	@ (80097d8 <MX_USART2_UART_Init+0x94>)
 800976e:	220c      	movs	r2, #12
 8009770:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009772:	4b19      	ldr	r3, [pc, #100]	@ (80097d8 <MX_USART2_UART_Init+0x94>)
 8009774:	2200      	movs	r2, #0
 8009776:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009778:	4b17      	ldr	r3, [pc, #92]	@ (80097d8 <MX_USART2_UART_Init+0x94>)
 800977a:	2200      	movs	r2, #0
 800977c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800977e:	4b16      	ldr	r3, [pc, #88]	@ (80097d8 <MX_USART2_UART_Init+0x94>)
 8009780:	2200      	movs	r2, #0
 8009782:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009784:	4b14      	ldr	r3, [pc, #80]	@ (80097d8 <MX_USART2_UART_Init+0x94>)
 8009786:	2200      	movs	r2, #0
 8009788:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800978a:	4b13      	ldr	r3, [pc, #76]	@ (80097d8 <MX_USART2_UART_Init+0x94>)
 800978c:	2200      	movs	r2, #0
 800978e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009790:	4811      	ldr	r0, [pc, #68]	@ (80097d8 <MX_USART2_UART_Init+0x94>)
 8009792:	f005 fdd5 	bl	800f340 <HAL_UART_Init>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d001      	beq.n	80097a0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800979c:	f7fe fc88 	bl	80080b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80097a0:	2100      	movs	r1, #0
 80097a2:	480d      	ldr	r0, [pc, #52]	@ (80097d8 <MX_USART2_UART_Init+0x94>)
 80097a4:	f007 fb32 	bl	8010e0c <HAL_UARTEx_SetTxFifoThreshold>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d001      	beq.n	80097b2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80097ae:	f7fe fc7f 	bl	80080b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80097b2:	2100      	movs	r1, #0
 80097b4:	4808      	ldr	r0, [pc, #32]	@ (80097d8 <MX_USART2_UART_Init+0x94>)
 80097b6:	f007 fb67 	bl	8010e88 <HAL_UARTEx_SetRxFifoThreshold>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d001      	beq.n	80097c4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80097c0:	f7fe fc76 	bl	80080b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80097c4:	4804      	ldr	r0, [pc, #16]	@ (80097d8 <MX_USART2_UART_Init+0x94>)
 80097c6:	f007 fae8 	bl	8010d9a <HAL_UARTEx_DisableFifoMode>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d001      	beq.n	80097d4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80097d0:	f7fe fc6e 	bl	80080b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80097d4:	bf00      	nop
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	20001fec 	.word	0x20001fec
 80097dc:	40004400 	.word	0x40004400

080097e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b0a0      	sub	sp, #128	@ 0x80
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097e8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80097ec:	2200      	movs	r2, #0
 80097ee:	601a      	str	r2, [r3, #0]
 80097f0:	605a      	str	r2, [r3, #4]
 80097f2:	609a      	str	r2, [r3, #8]
 80097f4:	60da      	str	r2, [r3, #12]
 80097f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80097f8:	f107 0318 	add.w	r3, r7, #24
 80097fc:	2254      	movs	r2, #84	@ 0x54
 80097fe:	2100      	movs	r1, #0
 8009800:	4618      	mov	r0, r3
 8009802:	f008 f979 	bl	8011af8 <memset>
  if(uartHandle->Instance==LPUART1)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a99      	ldr	r2, [pc, #612]	@ (8009a70 <HAL_UART_MspInit+0x290>)
 800980c:	4293      	cmp	r3, r2
 800980e:	f040 8093 	bne.w	8009938 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8009812:	2320      	movs	r3, #32
 8009814:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8009816:	2300      	movs	r3, #0
 8009818:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800981a:	f107 0318 	add.w	r3, r7, #24
 800981e:	4618      	mov	r0, r3
 8009820:	f003 fa58 	bl	800ccd4 <HAL_RCCEx_PeriphCLKConfig>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800982a:	f7fe fc41 	bl	80080b0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800982e:	4b91      	ldr	r3, [pc, #580]	@ (8009a74 <HAL_UART_MspInit+0x294>)
 8009830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009832:	4a90      	ldr	r2, [pc, #576]	@ (8009a74 <HAL_UART_MspInit+0x294>)
 8009834:	f043 0301 	orr.w	r3, r3, #1
 8009838:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800983a:	4b8e      	ldr	r3, [pc, #568]	@ (8009a74 <HAL_UART_MspInit+0x294>)
 800983c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800983e:	f003 0301 	and.w	r3, r3, #1
 8009842:	617b      	str	r3, [r7, #20]
 8009844:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009846:	4b8b      	ldr	r3, [pc, #556]	@ (8009a74 <HAL_UART_MspInit+0x294>)
 8009848:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800984a:	4a8a      	ldr	r2, [pc, #552]	@ (8009a74 <HAL_UART_MspInit+0x294>)
 800984c:	f043 0302 	orr.w	r3, r3, #2
 8009850:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009852:	4b88      	ldr	r3, [pc, #544]	@ (8009a74 <HAL_UART_MspInit+0x294>)
 8009854:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009856:	f003 0302 	and.w	r3, r3, #2
 800985a:	613b      	str	r3, [r7, #16]
 800985c:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800985e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8009862:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009864:	2302      	movs	r3, #2
 8009866:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009868:	2300      	movs	r3, #0
 800986a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800986c:	2300      	movs	r3, #0
 800986e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8009870:	2308      	movs	r3, #8
 8009872:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009874:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009878:	4619      	mov	r1, r3
 800987a:	487f      	ldr	r0, [pc, #508]	@ (8009a78 <HAL_UART_MspInit+0x298>)
 800987c:	f002 fa64 	bl	800bd48 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8009880:	4b7e      	ldr	r3, [pc, #504]	@ (8009a7c <HAL_UART_MspInit+0x29c>)
 8009882:	4a7f      	ldr	r2, [pc, #508]	@ (8009a80 <HAL_UART_MspInit+0x2a0>)
 8009884:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8009886:	4b7d      	ldr	r3, [pc, #500]	@ (8009a7c <HAL_UART_MspInit+0x29c>)
 8009888:	2222      	movs	r2, #34	@ 0x22
 800988a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800988c:	4b7b      	ldr	r3, [pc, #492]	@ (8009a7c <HAL_UART_MspInit+0x29c>)
 800988e:	2200      	movs	r2, #0
 8009890:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009892:	4b7a      	ldr	r3, [pc, #488]	@ (8009a7c <HAL_UART_MspInit+0x29c>)
 8009894:	2200      	movs	r2, #0
 8009896:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009898:	4b78      	ldr	r3, [pc, #480]	@ (8009a7c <HAL_UART_MspInit+0x29c>)
 800989a:	2280      	movs	r2, #128	@ 0x80
 800989c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800989e:	4b77      	ldr	r3, [pc, #476]	@ (8009a7c <HAL_UART_MspInit+0x29c>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80098a4:	4b75      	ldr	r3, [pc, #468]	@ (8009a7c <HAL_UART_MspInit+0x29c>)
 80098a6:	2200      	movs	r2, #0
 80098a8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80098aa:	4b74      	ldr	r3, [pc, #464]	@ (8009a7c <HAL_UART_MspInit+0x29c>)
 80098ac:	2200      	movs	r2, #0
 80098ae:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80098b0:	4b72      	ldr	r3, [pc, #456]	@ (8009a7c <HAL_UART_MspInit+0x29c>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80098b6:	4871      	ldr	r0, [pc, #452]	@ (8009a7c <HAL_UART_MspInit+0x29c>)
 80098b8:	f001 ff14 	bl	800b6e4 <HAL_DMA_Init>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d001      	beq.n	80098c6 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80098c2:	f7fe fbf5 	bl	80080b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a6c      	ldr	r2, [pc, #432]	@ (8009a7c <HAL_UART_MspInit+0x29c>)
 80098ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80098ce:	4a6b      	ldr	r2, [pc, #428]	@ (8009a7c <HAL_UART_MspInit+0x29c>)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 80098d4:	4b6b      	ldr	r3, [pc, #428]	@ (8009a84 <HAL_UART_MspInit+0x2a4>)
 80098d6:	4a6c      	ldr	r2, [pc, #432]	@ (8009a88 <HAL_UART_MspInit+0x2a8>)
 80098d8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80098da:	4b6a      	ldr	r3, [pc, #424]	@ (8009a84 <HAL_UART_MspInit+0x2a4>)
 80098dc:	2223      	movs	r2, #35	@ 0x23
 80098de:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80098e0:	4b68      	ldr	r3, [pc, #416]	@ (8009a84 <HAL_UART_MspInit+0x2a4>)
 80098e2:	2210      	movs	r2, #16
 80098e4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80098e6:	4b67      	ldr	r3, [pc, #412]	@ (8009a84 <HAL_UART_MspInit+0x2a4>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80098ec:	4b65      	ldr	r3, [pc, #404]	@ (8009a84 <HAL_UART_MspInit+0x2a4>)
 80098ee:	2280      	movs	r2, #128	@ 0x80
 80098f0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80098f2:	4b64      	ldr	r3, [pc, #400]	@ (8009a84 <HAL_UART_MspInit+0x2a4>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80098f8:	4b62      	ldr	r3, [pc, #392]	@ (8009a84 <HAL_UART_MspInit+0x2a4>)
 80098fa:	2200      	movs	r2, #0
 80098fc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80098fe:	4b61      	ldr	r3, [pc, #388]	@ (8009a84 <HAL_UART_MspInit+0x2a4>)
 8009900:	2200      	movs	r2, #0
 8009902:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009904:	4b5f      	ldr	r3, [pc, #380]	@ (8009a84 <HAL_UART_MspInit+0x2a4>)
 8009906:	2200      	movs	r2, #0
 8009908:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800990a:	485e      	ldr	r0, [pc, #376]	@ (8009a84 <HAL_UART_MspInit+0x2a4>)
 800990c:	f001 feea 	bl	800b6e4 <HAL_DMA_Init>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8009916:	f7fe fbcb 	bl	80080b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a59      	ldr	r2, [pc, #356]	@ (8009a84 <HAL_UART_MspInit+0x2a4>)
 800991e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009920:	4a58      	ldr	r2, [pc, #352]	@ (8009a84 <HAL_UART_MspInit+0x2a4>)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8009926:	2200      	movs	r2, #0
 8009928:	2100      	movs	r1, #0
 800992a:	205b      	movs	r0, #91	@ 0x5b
 800992c:	f001 fea5 	bl	800b67a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8009930:	205b      	movs	r0, #91	@ 0x5b
 8009932:	f001 febc 	bl	800b6ae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009936:	e097      	b.n	8009a68 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a53      	ldr	r2, [pc, #332]	@ (8009a8c <HAL_UART_MspInit+0x2ac>)
 800993e:	4293      	cmp	r3, r2
 8009940:	f040 8092 	bne.w	8009a68 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009944:	2302      	movs	r3, #2
 8009946:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009948:	2300      	movs	r3, #0
 800994a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800994c:	f107 0318 	add.w	r3, r7, #24
 8009950:	4618      	mov	r0, r3
 8009952:	f003 f9bf 	bl	800ccd4 <HAL_RCCEx_PeriphCLKConfig>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <HAL_UART_MspInit+0x180>
      Error_Handler();
 800995c:	f7fe fba8 	bl	80080b0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009960:	4b44      	ldr	r3, [pc, #272]	@ (8009a74 <HAL_UART_MspInit+0x294>)
 8009962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009964:	4a43      	ldr	r2, [pc, #268]	@ (8009a74 <HAL_UART_MspInit+0x294>)
 8009966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800996a:	6593      	str	r3, [r2, #88]	@ 0x58
 800996c:	4b41      	ldr	r3, [pc, #260]	@ (8009a74 <HAL_UART_MspInit+0x294>)
 800996e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009974:	60fb      	str	r3, [r7, #12]
 8009976:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009978:	4b3e      	ldr	r3, [pc, #248]	@ (8009a74 <HAL_UART_MspInit+0x294>)
 800997a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800997c:	4a3d      	ldr	r2, [pc, #244]	@ (8009a74 <HAL_UART_MspInit+0x294>)
 800997e:	f043 0301 	orr.w	r3, r3, #1
 8009982:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009984:	4b3b      	ldr	r3, [pc, #236]	@ (8009a74 <HAL_UART_MspInit+0x294>)
 8009986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009988:	f003 0301 	and.w	r3, r3, #1
 800998c:	60bb      	str	r3, [r7, #8]
 800998e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009990:	230c      	movs	r3, #12
 8009992:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009994:	2302      	movs	r3, #2
 8009996:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009998:	2300      	movs	r3, #0
 800999a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800999c:	2300      	movs	r3, #0
 800999e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80099a0:	2307      	movs	r3, #7
 80099a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80099a8:	4619      	mov	r1, r3
 80099aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80099ae:	f002 f9cb 	bl	800bd48 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80099b2:	4b37      	ldr	r3, [pc, #220]	@ (8009a90 <HAL_UART_MspInit+0x2b0>)
 80099b4:	4a37      	ldr	r2, [pc, #220]	@ (8009a94 <HAL_UART_MspInit+0x2b4>)
 80099b6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80099b8:	4b35      	ldr	r3, [pc, #212]	@ (8009a90 <HAL_UART_MspInit+0x2b0>)
 80099ba:	221a      	movs	r2, #26
 80099bc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80099be:	4b34      	ldr	r3, [pc, #208]	@ (8009a90 <HAL_UART_MspInit+0x2b0>)
 80099c0:	2200      	movs	r2, #0
 80099c2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80099c4:	4b32      	ldr	r3, [pc, #200]	@ (8009a90 <HAL_UART_MspInit+0x2b0>)
 80099c6:	2200      	movs	r2, #0
 80099c8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80099ca:	4b31      	ldr	r3, [pc, #196]	@ (8009a90 <HAL_UART_MspInit+0x2b0>)
 80099cc:	2280      	movs	r2, #128	@ 0x80
 80099ce:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80099d0:	4b2f      	ldr	r3, [pc, #188]	@ (8009a90 <HAL_UART_MspInit+0x2b0>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80099d6:	4b2e      	ldr	r3, [pc, #184]	@ (8009a90 <HAL_UART_MspInit+0x2b0>)
 80099d8:	2200      	movs	r2, #0
 80099da:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80099dc:	4b2c      	ldr	r3, [pc, #176]	@ (8009a90 <HAL_UART_MspInit+0x2b0>)
 80099de:	2200      	movs	r2, #0
 80099e0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80099e2:	4b2b      	ldr	r3, [pc, #172]	@ (8009a90 <HAL_UART_MspInit+0x2b0>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80099e8:	4829      	ldr	r0, [pc, #164]	@ (8009a90 <HAL_UART_MspInit+0x2b0>)
 80099ea:	f001 fe7b 	bl	800b6e4 <HAL_DMA_Init>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d001      	beq.n	80099f8 <HAL_UART_MspInit+0x218>
      Error_Handler();
 80099f4:	f7fe fb5c 	bl	80080b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a25      	ldr	r2, [pc, #148]	@ (8009a90 <HAL_UART_MspInit+0x2b0>)
 80099fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8009a00:	4a23      	ldr	r2, [pc, #140]	@ (8009a90 <HAL_UART_MspInit+0x2b0>)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8009a06:	4b24      	ldr	r3, [pc, #144]	@ (8009a98 <HAL_UART_MspInit+0x2b8>)
 8009a08:	4a24      	ldr	r2, [pc, #144]	@ (8009a9c <HAL_UART_MspInit+0x2bc>)
 8009a0a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8009a0c:	4b22      	ldr	r3, [pc, #136]	@ (8009a98 <HAL_UART_MspInit+0x2b8>)
 8009a0e:	221b      	movs	r2, #27
 8009a10:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009a12:	4b21      	ldr	r3, [pc, #132]	@ (8009a98 <HAL_UART_MspInit+0x2b8>)
 8009a14:	2210      	movs	r2, #16
 8009a16:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a18:	4b1f      	ldr	r3, [pc, #124]	@ (8009a98 <HAL_UART_MspInit+0x2b8>)
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8009a98 <HAL_UART_MspInit+0x2b8>)
 8009a20:	2280      	movs	r2, #128	@ 0x80
 8009a22:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a24:	4b1c      	ldr	r3, [pc, #112]	@ (8009a98 <HAL_UART_MspInit+0x2b8>)
 8009a26:	2200      	movs	r2, #0
 8009a28:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009a2a:	4b1b      	ldr	r3, [pc, #108]	@ (8009a98 <HAL_UART_MspInit+0x2b8>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009a30:	4b19      	ldr	r3, [pc, #100]	@ (8009a98 <HAL_UART_MspInit+0x2b8>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009a36:	4b18      	ldr	r3, [pc, #96]	@ (8009a98 <HAL_UART_MspInit+0x2b8>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8009a3c:	4816      	ldr	r0, [pc, #88]	@ (8009a98 <HAL_UART_MspInit+0x2b8>)
 8009a3e:	f001 fe51 	bl	800b6e4 <HAL_DMA_Init>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8009a48:	f7fe fb32 	bl	80080b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a12      	ldr	r2, [pc, #72]	@ (8009a98 <HAL_UART_MspInit+0x2b8>)
 8009a50:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009a52:	4a11      	ldr	r2, [pc, #68]	@ (8009a98 <HAL_UART_MspInit+0x2b8>)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009a58:	2200      	movs	r2, #0
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	2026      	movs	r0, #38	@ 0x26
 8009a5e:	f001 fe0c 	bl	800b67a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009a62:	2026      	movs	r0, #38	@ 0x26
 8009a64:	f001 fe23 	bl	800b6ae <HAL_NVIC_EnableIRQ>
}
 8009a68:	bf00      	nop
 8009a6a:	3780      	adds	r7, #128	@ 0x80
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	40008000 	.word	0x40008000
 8009a74:	40021000 	.word	0x40021000
 8009a78:	48000400 	.word	0x48000400
 8009a7c:	200020b8 	.word	0x200020b8
 8009a80:	40020044 	.word	0x40020044
 8009a84:	20002118 	.word	0x20002118
 8009a88:	40020058 	.word	0x40020058
 8009a8c:	40004400 	.word	0x40004400
 8009a90:	20002178 	.word	0x20002178
 8009a94:	4002001c 	.word	0x4002001c
 8009a98:	200021d8 	.word	0x200021d8
 8009a9c:	40020030 	.word	0x40020030

08009aa0 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8009aa0:	480d      	ldr	r0, [pc, #52]	@ (8009ad8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009aa2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/

    bl  SystemInit
 8009aa4:	f7ff f994 	bl	8008dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009aa8:	480c      	ldr	r0, [pc, #48]	@ (8009adc <LoopForever+0x6>)
  ldr r1, =_edata
 8009aaa:	490d      	ldr	r1, [pc, #52]	@ (8009ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009aac:	4a0d      	ldr	r2, [pc, #52]	@ (8009ae4 <LoopForever+0xe>)
  movs r3, #0
 8009aae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8009ab0:	e002      	b.n	8009ab8 <LoopCopyDataInit>

08009ab2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009ab2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009ab4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009ab6:	3304      	adds	r3, #4

08009ab8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009ab8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009aba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009abc:	d3f9      	bcc.n	8009ab2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009abe:	4a0a      	ldr	r2, [pc, #40]	@ (8009ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009ac0:	4c0a      	ldr	r4, [pc, #40]	@ (8009aec <LoopForever+0x16>)
  movs r3, #0
 8009ac2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009ac4:	e001      	b.n	8009aca <LoopFillZerobss>

08009ac6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009ac6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009ac8:	3204      	adds	r2, #4

08009aca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009aca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009acc:	d3fb      	bcc.n	8009ac6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009ace:	f008 f831 	bl	8011b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009ad2:	f7fb fb95 	bl	8005200 <main>

08009ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8009ad6:	e7fe      	b.n	8009ad6 <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8009ad8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009ae0:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8009ae4:	08014038 	.word	0x08014038
  ldr r2, =_sbss
 8009ae8:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8009aec:	20002384 	.word	0x20002384

08009af0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009af0:	e7fe      	b.n	8009af0 <ADC1_2_IRQHandler>

08009af2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b082      	sub	sp, #8
 8009af6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009af8:	2300      	movs	r3, #0
 8009afa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009afc:	2003      	movs	r0, #3
 8009afe:	f001 fdb1 	bl	800b664 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009b02:	2000      	movs	r0, #0
 8009b04:	f000 f80e 	bl	8009b24 <HAL_InitTick>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d002      	beq.n	8009b14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	71fb      	strb	r3, [r7, #7]
 8009b12:	e001      	b.n	8009b18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009b14:	f7ff f834 	bl	8008b80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009b18:	79fb      	ldrb	r3, [r7, #7]

}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
	...

08009b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8009b30:	4b16      	ldr	r3, [pc, #88]	@ (8009b8c <HAL_InitTick+0x68>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d022      	beq.n	8009b7e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8009b38:	4b15      	ldr	r3, [pc, #84]	@ (8009b90 <HAL_InitTick+0x6c>)
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	4b13      	ldr	r3, [pc, #76]	@ (8009b8c <HAL_InitTick+0x68>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009b44:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f001 fdbc 	bl	800b6ca <HAL_SYSTICK_Config>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10f      	bne.n	8009b78 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b0f      	cmp	r3, #15
 8009b5c:	d809      	bhi.n	8009b72 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009b5e:	2200      	movs	r2, #0
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	f04f 30ff 	mov.w	r0, #4294967295
 8009b66:	f001 fd88 	bl	800b67a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8009b94 <HAL_InitTick+0x70>)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6013      	str	r3, [r2, #0]
 8009b70:	e007      	b.n	8009b82 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	73fb      	strb	r3, [r7, #15]
 8009b76:	e004      	b.n	8009b82 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	73fb      	strb	r3, [r7, #15]
 8009b7c:	e001      	b.n	8009b82 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	20000140 	.word	0x20000140
 8009b90:	20000138 	.word	0x20000138
 8009b94:	2000013c 	.word	0x2000013c

08009b98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009b9c:	4b05      	ldr	r3, [pc, #20]	@ (8009bb4 <HAL_IncTick+0x1c>)
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	4b05      	ldr	r3, [pc, #20]	@ (8009bb8 <HAL_IncTick+0x20>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	4a03      	ldr	r2, [pc, #12]	@ (8009bb4 <HAL_IncTick+0x1c>)
 8009ba8:	6013      	str	r3, [r2, #0]
}
 8009baa:	bf00      	nop
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	20002238 	.word	0x20002238
 8009bb8:	20000140 	.word	0x20000140

08009bbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8009bc0:	4b03      	ldr	r3, [pc, #12]	@ (8009bd0 <HAL_GetTick+0x14>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	20002238 	.word	0x20002238

08009bd4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	689b      	ldr	r3, [r3, #8]
 8009be2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	431a      	orrs	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	609a      	str	r2, [r3, #8]
}
 8009bee:	bf00      	nop
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009bfa:	b480      	push	{r7}
 8009bfc:	b083      	sub	sp, #12
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	431a      	orrs	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	609a      	str	r2, [r3, #8]
}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr

08009c3c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b087      	sub	sp, #28
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
 8009c48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	3360      	adds	r3, #96	@ 0x60
 8009c4e:	461a      	mov	r2, r3
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	4b08      	ldr	r3, [pc, #32]	@ (8009c80 <LL_ADC_SetOffset+0x44>)
 8009c5e:	4013      	ands	r3, r2
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8009c66:	683a      	ldr	r2, [r7, #0]
 8009c68:	430a      	orrs	r2, r1
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8009c74:	bf00      	nop
 8009c76:	371c      	adds	r7, #28
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7e:	4770      	bx	lr
 8009c80:	03fff000 	.word	0x03fff000

08009c84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	3360      	adds	r3, #96	@ 0x60
 8009c92:	461a      	mov	r2, r3
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4413      	add	r3, r2
 8009c9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3714      	adds	r7, #20
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b087      	sub	sp, #28
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	3360      	adds	r3, #96	@ 0x60
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	4413      	add	r3, r2
 8009cc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	431a      	orrs	r2, r3
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009cda:	bf00      	nop
 8009cdc:	371c      	adds	r7, #28
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b087      	sub	sp, #28
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	60f8      	str	r0, [r7, #12]
 8009cee:	60b9      	str	r1, [r7, #8]
 8009cf0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	3360      	adds	r3, #96	@ 0x60
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	009b      	lsls	r3, r3, #2
 8009cfc:	4413      	add	r3, r2
 8009cfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8009d10:	bf00      	nop
 8009d12:	371c      	adds	r7, #28
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b087      	sub	sp, #28
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	3360      	adds	r3, #96	@ 0x60
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	431a      	orrs	r2, r3
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8009d46:	bf00      	nop
 8009d48:	371c      	adds	r7, #28
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8009d52:	b480      	push	{r7}
 8009d54:	b083      	sub	sp, #12
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
 8009d5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	695b      	ldr	r3, [r3, #20]
 8009d60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	431a      	orrs	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	615a      	str	r2, [r3, #20]
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d101      	bne.n	8009d90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e000      	b.n	8009d92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b087      	sub	sp, #28
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	60f8      	str	r0, [r7, #12]
 8009da6:	60b9      	str	r1, [r7, #8]
 8009da8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	3330      	adds	r3, #48	@ 0x30
 8009dae:	461a      	mov	r2, r3
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	0a1b      	lsrs	r3, r3, #8
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	f003 030c 	and.w	r3, r3, #12
 8009dba:	4413      	add	r3, r2
 8009dbc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	f003 031f 	and.w	r3, r3, #31
 8009dc8:	211f      	movs	r1, #31
 8009dca:	fa01 f303 	lsl.w	r3, r1, r3
 8009dce:	43db      	mvns	r3, r3
 8009dd0:	401a      	ands	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	0e9b      	lsrs	r3, r3, #26
 8009dd6:	f003 011f 	and.w	r1, r3, #31
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	f003 031f 	and.w	r3, r3, #31
 8009de0:	fa01 f303 	lsl.w	r3, r1, r3
 8009de4:	431a      	orrs	r2, r3
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009dea:	bf00      	nop
 8009dec:	371c      	adds	r7, #28
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009df6:	b480      	push	{r7}
 8009df8:	b087      	sub	sp, #28
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	60f8      	str	r0, [r7, #12]
 8009dfe:	60b9      	str	r1, [r7, #8]
 8009e00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	3314      	adds	r3, #20
 8009e06:	461a      	mov	r2, r3
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	0e5b      	lsrs	r3, r3, #25
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	f003 0304 	and.w	r3, r3, #4
 8009e12:	4413      	add	r3, r2
 8009e14:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	0d1b      	lsrs	r3, r3, #20
 8009e1e:	f003 031f 	and.w	r3, r3, #31
 8009e22:	2107      	movs	r1, #7
 8009e24:	fa01 f303 	lsl.w	r3, r1, r3
 8009e28:	43db      	mvns	r3, r3
 8009e2a:	401a      	ands	r2, r3
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	0d1b      	lsrs	r3, r3, #20
 8009e30:	f003 031f 	and.w	r3, r3, #31
 8009e34:	6879      	ldr	r1, [r7, #4]
 8009e36:	fa01 f303 	lsl.w	r3, r1, r3
 8009e3a:	431a      	orrs	r2, r3
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009e40:	bf00      	nop
 8009e42:	371c      	adds	r7, #28
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b085      	sub	sp, #20
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	60f8      	str	r0, [r7, #12]
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e64:	43db      	mvns	r3, r3
 8009e66:	401a      	ands	r2, r3
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f003 0318 	and.w	r3, r3, #24
 8009e6e:	4908      	ldr	r1, [pc, #32]	@ (8009e90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8009e70:	40d9      	lsrs	r1, r3
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	400b      	ands	r3, r1
 8009e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e7a:	431a      	orrs	r2, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8009e82:	bf00      	nop
 8009e84:	3714      	adds	r7, #20
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	0007ffff 	.word	0x0007ffff

08009e94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	f003 031f 	and.w	r3, r3, #31
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8009ec0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009ec4:	687a      	ldr	r2, [r7, #4]
 8009ec6:	6093      	str	r3, [r2, #8]
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ee4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ee8:	d101      	bne.n	8009eee <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009eea:	2301      	movs	r3, #1
 8009eec:	e000      	b.n	8009ef0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	370c      	adds	r7, #12
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr

08009efc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8009f0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009f10:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009f18:	bf00      	nop
 8009f1a:	370c      	adds	r7, #12
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr

08009f24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f38:	d101      	bne.n	8009f3e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e000      	b.n	8009f40 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8009f3e:	2300      	movs	r3, #0
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009f60:	f043 0201 	orr.w	r2, r3, #1
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009f68:	bf00      	nop
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009f88:	f043 0202 	orr.w	r2, r3, #2
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d101      	bne.n	8009fb4 <LL_ADC_IsEnabled+0x18>
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e000      	b.n	8009fb6 <LL_ADC_IsEnabled+0x1a>
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8009fc2:	b480      	push	{r7}
 8009fc4:	b083      	sub	sp, #12
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	f003 0302 	and.w	r3, r3, #2
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d101      	bne.n	8009fda <LL_ADC_IsDisableOngoing+0x18>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e000      	b.n	8009fdc <LL_ADC_IsDisableOngoing+0x1a>
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ff8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009ffc:	f043 0204 	orr.w	r2, r3, #4
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a004:	bf00      	nop
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	f003 0304 	and.w	r3, r3, #4
 800a020:	2b04      	cmp	r3, #4
 800a022:	d101      	bne.n	800a028 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a024:	2301      	movs	r3, #1
 800a026:	e000      	b.n	800a02a <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a036:	b480      	push	{r7}
 800a038:	b083      	sub	sp, #12
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	f003 0308 	and.w	r3, r3, #8
 800a046:	2b08      	cmp	r3, #8
 800a048:	d101      	bne.n	800a04e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a04a:	2301      	movs	r3, #1
 800a04c:	e000      	b.n	800a050 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	370c      	adds	r7, #12
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a05c:	b590      	push	{r4, r7, lr}
 800a05e:	b089      	sub	sp, #36	@ 0x24
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a064:	2300      	movs	r3, #0
 800a066:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800a068:	2300      	movs	r3, #0
 800a06a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e1a9      	b.n	800a3ca <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a080:	2b00      	cmp	r3, #0
 800a082:	d109      	bne.n	800a098 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7fa fbd5 	bl	8004834 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7ff ff19 	bl	8009ed4 <LL_ADC_IsDeepPowerDownEnabled>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d004      	beq.n	800a0b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7ff feff 	bl	8009eb0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f7ff ff34 	bl	8009f24 <LL_ADC_IsInternalRegulatorEnabled>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d115      	bne.n	800a0ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7ff ff18 	bl	8009efc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a0cc:	4b9c      	ldr	r3, [pc, #624]	@ (800a340 <HAL_ADC_Init+0x2e4>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	099b      	lsrs	r3, r3, #6
 800a0d2:	4a9c      	ldr	r2, [pc, #624]	@ (800a344 <HAL_ADC_Init+0x2e8>)
 800a0d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0d8:	099b      	lsrs	r3, r3, #6
 800a0da:	3301      	adds	r3, #1
 800a0dc:	005b      	lsls	r3, r3, #1
 800a0de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a0e0:	e002      	b.n	800a0e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d1f9      	bne.n	800a0e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff ff16 	bl	8009f24 <LL_ADC_IsInternalRegulatorEnabled>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10d      	bne.n	800a11a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a102:	f043 0210 	orr.w	r2, r3, #16
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a10e:	f043 0201 	orr.w	r2, r3, #1
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800a116:	2301      	movs	r3, #1
 800a118:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4618      	mov	r0, r3
 800a120:	f7ff ff76 	bl	800a010 <LL_ADC_REG_IsConversionOngoing>
 800a124:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a12a:	f003 0310 	and.w	r3, r3, #16
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f040 8142 	bne.w	800a3b8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	2b00      	cmp	r3, #0
 800a138:	f040 813e 	bne.w	800a3b8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a140:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800a144:	f043 0202 	orr.w	r2, r3, #2
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4618      	mov	r0, r3
 800a152:	f7ff ff23 	bl	8009f9c <LL_ADC_IsEnabled>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d141      	bne.n	800a1e0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a164:	d004      	beq.n	800a170 <HAL_ADC_Init+0x114>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a77      	ldr	r2, [pc, #476]	@ (800a348 <HAL_ADC_Init+0x2ec>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d10f      	bne.n	800a190 <HAL_ADC_Init+0x134>
 800a170:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800a174:	f7ff ff12 	bl	8009f9c <LL_ADC_IsEnabled>
 800a178:	4604      	mov	r4, r0
 800a17a:	4873      	ldr	r0, [pc, #460]	@ (800a348 <HAL_ADC_Init+0x2ec>)
 800a17c:	f7ff ff0e 	bl	8009f9c <LL_ADC_IsEnabled>
 800a180:	4603      	mov	r3, r0
 800a182:	4323      	orrs	r3, r4
 800a184:	2b00      	cmp	r3, #0
 800a186:	bf0c      	ite	eq
 800a188:	2301      	moveq	r3, #1
 800a18a:	2300      	movne	r3, #0
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	e012      	b.n	800a1b6 <HAL_ADC_Init+0x15a>
 800a190:	486e      	ldr	r0, [pc, #440]	@ (800a34c <HAL_ADC_Init+0x2f0>)
 800a192:	f7ff ff03 	bl	8009f9c <LL_ADC_IsEnabled>
 800a196:	4604      	mov	r4, r0
 800a198:	486d      	ldr	r0, [pc, #436]	@ (800a350 <HAL_ADC_Init+0x2f4>)
 800a19a:	f7ff feff 	bl	8009f9c <LL_ADC_IsEnabled>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	431c      	orrs	r4, r3
 800a1a2:	486c      	ldr	r0, [pc, #432]	@ (800a354 <HAL_ADC_Init+0x2f8>)
 800a1a4:	f7ff fefa 	bl	8009f9c <LL_ADC_IsEnabled>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	4323      	orrs	r3, r4
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	bf0c      	ite	eq
 800a1b0:	2301      	moveq	r3, #1
 800a1b2:	2300      	movne	r3, #0
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d012      	beq.n	800a1e0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a1c2:	d004      	beq.n	800a1ce <HAL_ADC_Init+0x172>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a5f      	ldr	r2, [pc, #380]	@ (800a348 <HAL_ADC_Init+0x2ec>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d101      	bne.n	800a1d2 <HAL_ADC_Init+0x176>
 800a1ce:	4a62      	ldr	r2, [pc, #392]	@ (800a358 <HAL_ADC_Init+0x2fc>)
 800a1d0:	e000      	b.n	800a1d4 <HAL_ADC_Init+0x178>
 800a1d2:	4a62      	ldr	r2, [pc, #392]	@ (800a35c <HAL_ADC_Init+0x300>)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	4619      	mov	r1, r3
 800a1da:	4610      	mov	r0, r2
 800a1dc:	f7ff fcfa 	bl	8009bd4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	7f5b      	ldrb	r3, [r3, #29]
 800a1e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a1ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800a1f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800a1f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a1fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a200:	4313      	orrs	r3, r2
 800a202:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d106      	bne.n	800a21c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a212:	3b01      	subs	r3, #1
 800a214:	045b      	lsls	r3, r3, #17
 800a216:	69ba      	ldr	r2, [r7, #24]
 800a218:	4313      	orrs	r3, r2
 800a21a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a220:	2b00      	cmp	r3, #0
 800a222:	d009      	beq.n	800a238 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a228:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a230:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a232:	69ba      	ldr	r2, [r7, #24]
 800a234:	4313      	orrs	r3, r2
 800a236:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68da      	ldr	r2, [r3, #12]
 800a23e:	4b48      	ldr	r3, [pc, #288]	@ (800a360 <HAL_ADC_Init+0x304>)
 800a240:	4013      	ands	r3, r2
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	6812      	ldr	r2, [r2, #0]
 800a246:	69b9      	ldr	r1, [r7, #24]
 800a248:	430b      	orrs	r3, r1
 800a24a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	691b      	ldr	r3, [r3, #16]
 800a252:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	430a      	orrs	r2, r1
 800a260:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4618      	mov	r0, r3
 800a268:	f7ff fee5 	bl	800a036 <LL_ADC_INJ_IsConversionOngoing>
 800a26c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d17f      	bne.n	800a374 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d17c      	bne.n	800a374 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a27e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a286:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a288:	4313      	orrs	r3, r2
 800a28a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a296:	f023 0302 	bic.w	r3, r3, #2
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	6812      	ldr	r2, [r2, #0]
 800a29e:	69b9      	ldr	r1, [r7, #24]
 800a2a0:	430b      	orrs	r3, r1
 800a2a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d017      	beq.n	800a2dc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	691a      	ldr	r2, [r3, #16]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a2ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a2c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800a2c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	6911      	ldr	r1, [r2, #16]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	6812      	ldr	r2, [r2, #0]
 800a2d4:	430b      	orrs	r3, r1
 800a2d6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800a2da:	e013      	b.n	800a304 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	691a      	ldr	r2, [r3, #16]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a2ea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	6812      	ldr	r2, [r2, #0]
 800a2f8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800a2fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a300:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d12a      	bne.n	800a364 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a318:	f023 0304 	bic.w	r3, r3, #4
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a324:	4311      	orrs	r1, r2
 800a326:	687a      	ldr	r2, [r7, #4]
 800a328:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a32a:	4311      	orrs	r1, r2
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a330:	430a      	orrs	r2, r1
 800a332:	431a      	orrs	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f042 0201 	orr.w	r2, r2, #1
 800a33c:	611a      	str	r2, [r3, #16]
 800a33e:	e019      	b.n	800a374 <HAL_ADC_Init+0x318>
 800a340:	20000138 	.word	0x20000138
 800a344:	053e2d63 	.word	0x053e2d63
 800a348:	50000100 	.word	0x50000100
 800a34c:	50000400 	.word	0x50000400
 800a350:	50000500 	.word	0x50000500
 800a354:	50000600 	.word	0x50000600
 800a358:	50000300 	.word	0x50000300
 800a35c:	50000700 	.word	0x50000700
 800a360:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	691a      	ldr	r2, [r3, #16]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f022 0201 	bic.w	r2, r2, #1
 800a372:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	695b      	ldr	r3, [r3, #20]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d10c      	bne.n	800a396 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a382:	f023 010f 	bic.w	r1, r3, #15
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	1e5a      	subs	r2, r3, #1
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	430a      	orrs	r2, r1
 800a392:	631a      	str	r2, [r3, #48]	@ 0x30
 800a394:	e007      	b.n	800a3a6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f022 020f 	bic.w	r2, r2, #15
 800a3a4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3aa:	f023 0303 	bic.w	r3, r3, #3
 800a3ae:	f043 0201 	orr.w	r2, r3, #1
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a3b6:	e007      	b.n	800a3c8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a3bc:	f043 0210 	orr.w	r2, r3, #16
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a3c8:	7ffb      	ldrb	r3, [r7, #31]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3724      	adds	r7, #36	@ 0x24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd90      	pop	{r4, r7, pc}
 800a3d2:	bf00      	nop

0800a3d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3e8:	d004      	beq.n	800a3f4 <HAL_ADC_Start_DMA+0x20>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a5a      	ldr	r2, [pc, #360]	@ (800a558 <HAL_ADC_Start_DMA+0x184>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d101      	bne.n	800a3f8 <HAL_ADC_Start_DMA+0x24>
 800a3f4:	4b59      	ldr	r3, [pc, #356]	@ (800a55c <HAL_ADC_Start_DMA+0x188>)
 800a3f6:	e000      	b.n	800a3fa <HAL_ADC_Start_DMA+0x26>
 800a3f8:	4b59      	ldr	r3, [pc, #356]	@ (800a560 <HAL_ADC_Start_DMA+0x18c>)
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7ff fd4a 	bl	8009e94 <LL_ADC_GetMultimode>
 800a400:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4618      	mov	r0, r3
 800a408:	f7ff fe02 	bl	800a010 <LL_ADC_REG_IsConversionOngoing>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f040 809b 	bne.w	800a54a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d101      	bne.n	800a422 <HAL_ADC_Start_DMA+0x4e>
 800a41e:	2302      	movs	r3, #2
 800a420:	e096      	b.n	800a550 <HAL_ADC_Start_DMA+0x17c>
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2201      	movs	r2, #1
 800a426:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a4d      	ldr	r2, [pc, #308]	@ (800a564 <HAL_ADC_Start_DMA+0x190>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d008      	beq.n	800a446 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d005      	beq.n	800a446 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	2b05      	cmp	r3, #5
 800a43e:	d002      	beq.n	800a446 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	2b09      	cmp	r3, #9
 800a444:	d17a      	bne.n	800a53c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f000 fcf6 	bl	800ae38 <ADC_Enable>
 800a44c:	4603      	mov	r3, r0
 800a44e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800a450:	7dfb      	ldrb	r3, [r7, #23]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d16d      	bne.n	800a532 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a45a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a45e:	f023 0301 	bic.w	r3, r3, #1
 800a462:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a3a      	ldr	r2, [pc, #232]	@ (800a558 <HAL_ADC_Start_DMA+0x184>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d009      	beq.n	800a488 <HAL_ADC_Start_DMA+0xb4>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a3b      	ldr	r2, [pc, #236]	@ (800a568 <HAL_ADC_Start_DMA+0x194>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d002      	beq.n	800a484 <HAL_ADC_Start_DMA+0xb0>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	e003      	b.n	800a48c <HAL_ADC_Start_DMA+0xb8>
 800a484:	4b39      	ldr	r3, [pc, #228]	@ (800a56c <HAL_ADC_Start_DMA+0x198>)
 800a486:	e001      	b.n	800a48c <HAL_ADC_Start_DMA+0xb8>
 800a488:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	6812      	ldr	r2, [r2, #0]
 800a490:	4293      	cmp	r3, r2
 800a492:	d002      	beq.n	800a49a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d105      	bne.n	800a4a6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a49e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d006      	beq.n	800a4c0 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a4b6:	f023 0206 	bic.w	r2, r3, #6
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	661a      	str	r2, [r3, #96]	@ 0x60
 800a4be:	e002      	b.n	800a4c6 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ca:	4a29      	ldr	r2, [pc, #164]	@ (800a570 <HAL_ADC_Start_DMA+0x19c>)
 800a4cc:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4d2:	4a28      	ldr	r2, [pc, #160]	@ (800a574 <HAL_ADC_Start_DMA+0x1a0>)
 800a4d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4da:	4a27      	ldr	r2, [pc, #156]	@ (800a578 <HAL_ADC_Start_DMA+0x1a4>)
 800a4dc:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	221c      	movs	r2, #28
 800a4e4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f042 0210 	orr.w	r2, r2, #16
 800a4fc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	68da      	ldr	r2, [r3, #12]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f042 0201 	orr.w	r2, r2, #1
 800a50c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	3340      	adds	r3, #64	@ 0x40
 800a518:	4619      	mov	r1, r3
 800a51a:	68ba      	ldr	r2, [r7, #8]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f001 f989 	bl	800b834 <HAL_DMA_Start_IT>
 800a522:	4603      	mov	r3, r0
 800a524:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7ff fd5c 	bl	8009fe8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a530:	e00d      	b.n	800a54e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2200      	movs	r2, #0
 800a536:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800a53a:	e008      	b.n	800a54e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800a548:	e001      	b.n	800a54e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a54a:	2302      	movs	r3, #2
 800a54c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a54e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3718      	adds	r7, #24
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	50000100 	.word	0x50000100
 800a55c:	50000300 	.word	0x50000300
 800a560:	50000700 	.word	0x50000700
 800a564:	50000600 	.word	0x50000600
 800a568:	50000500 	.word	0x50000500
 800a56c:	50000400 	.word	0x50000400
 800a570:	0800b023 	.word	0x0800b023
 800a574:	0800b0fb 	.word	0x0800b0fb
 800a578:	0800b117 	.word	0x0800b117

0800a57c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr

0800a5b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b0b6      	sub	sp, #216	@ 0xd8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d102      	bne.n	800a5dc <HAL_ADC_ConfigChannel+0x24>
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	f000 bc13 	b.w	800ae02 <HAL_ADC_ConfigChannel+0x84a>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7ff fd11 	bl	800a010 <LL_ADC_REG_IsConversionOngoing>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f040 83f3 	bne.w	800addc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6818      	ldr	r0, [r3, #0]
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	6859      	ldr	r1, [r3, #4]
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	461a      	mov	r2, r3
 800a604:	f7ff fbcb 	bl	8009d9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7ff fcff 	bl	800a010 <LL_ADC_REG_IsConversionOngoing>
 800a612:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7ff fd0b 	bl	800a036 <LL_ADC_INJ_IsConversionOngoing>
 800a620:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a624:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f040 81d9 	bne.w	800a9e0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a62e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a632:	2b00      	cmp	r3, #0
 800a634:	f040 81d4 	bne.w	800a9e0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a640:	d10f      	bne.n	800a662 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6818      	ldr	r0, [r3, #0]
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2200      	movs	r2, #0
 800a64c:	4619      	mov	r1, r3
 800a64e:	f7ff fbd2 	bl	8009df6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800a65a:	4618      	mov	r0, r3
 800a65c:	f7ff fb79 	bl	8009d52 <LL_ADC_SetSamplingTimeCommonConfig>
 800a660:	e00e      	b.n	800a680 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6818      	ldr	r0, [r3, #0]
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	6819      	ldr	r1, [r3, #0]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	461a      	mov	r2, r3
 800a670:	f7ff fbc1 	bl	8009df6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2100      	movs	r1, #0
 800a67a:	4618      	mov	r0, r3
 800a67c:	f7ff fb69 	bl	8009d52 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	695a      	ldr	r2, [r3, #20]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	08db      	lsrs	r3, r3, #3
 800a68c:	f003 0303 	and.w	r3, r3, #3
 800a690:	005b      	lsls	r3, r3, #1
 800a692:	fa02 f303 	lsl.w	r3, r2, r3
 800a696:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	2b04      	cmp	r3, #4
 800a6a0:	d022      	beq.n	800a6e8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6818      	ldr	r0, [r3, #0]
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	6919      	ldr	r1, [r3, #16]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a6b2:	f7ff fac3 	bl	8009c3c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6818      	ldr	r0, [r3, #0]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	6919      	ldr	r1, [r3, #16]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	699b      	ldr	r3, [r3, #24]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	f7ff fb0f 	bl	8009ce6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6818      	ldr	r0, [r3, #0]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d102      	bne.n	800a6de <HAL_ADC_ConfigChannel+0x126>
 800a6d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a6dc:	e000      	b.n	800a6e0 <HAL_ADC_ConfigChannel+0x128>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	f7ff fb1b 	bl	8009d1c <LL_ADC_SetOffsetSaturation>
 800a6e6:	e17b      	b.n	800a9e0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7ff fac8 	bl	8009c84 <LL_ADC_GetOffsetChannel>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d10a      	bne.n	800a714 <HAL_ADC_ConfigChannel+0x15c>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2100      	movs	r1, #0
 800a704:	4618      	mov	r0, r3
 800a706:	f7ff fabd 	bl	8009c84 <LL_ADC_GetOffsetChannel>
 800a70a:	4603      	mov	r3, r0
 800a70c:	0e9b      	lsrs	r3, r3, #26
 800a70e:	f003 021f 	and.w	r2, r3, #31
 800a712:	e01e      	b.n	800a752 <HAL_ADC_ConfigChannel+0x19a>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2100      	movs	r1, #0
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7ff fab2 	bl	8009c84 <LL_ADC_GetOffsetChannel>
 800a720:	4603      	mov	r3, r0
 800a722:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a726:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a72a:	fa93 f3a3 	rbit	r3, r3
 800a72e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a732:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a736:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a73a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d101      	bne.n	800a746 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800a742:	2320      	movs	r3, #32
 800a744:	e004      	b.n	800a750 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800a746:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a74a:	fab3 f383 	clz	r3, r3
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d105      	bne.n	800a76a <HAL_ADC_ConfigChannel+0x1b2>
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	0e9b      	lsrs	r3, r3, #26
 800a764:	f003 031f 	and.w	r3, r3, #31
 800a768:	e018      	b.n	800a79c <HAL_ADC_ConfigChannel+0x1e4>
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a772:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a776:	fa93 f3a3 	rbit	r3, r3
 800a77a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800a77e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a782:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800a786:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d101      	bne.n	800a792 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800a78e:	2320      	movs	r3, #32
 800a790:	e004      	b.n	800a79c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800a792:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a796:	fab3 f383 	clz	r3, r3
 800a79a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d106      	bne.n	800a7ae <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7ff fa81 	bl	8009cb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	2101      	movs	r1, #1
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7ff fa65 	bl	8009c84 <LL_ADC_GetOffsetChannel>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10a      	bne.n	800a7da <HAL_ADC_ConfigChannel+0x222>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2101      	movs	r1, #1
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7ff fa5a 	bl	8009c84 <LL_ADC_GetOffsetChannel>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	0e9b      	lsrs	r3, r3, #26
 800a7d4:	f003 021f 	and.w	r2, r3, #31
 800a7d8:	e01e      	b.n	800a818 <HAL_ADC_ConfigChannel+0x260>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2101      	movs	r1, #1
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7ff fa4f 	bl	8009c84 <LL_ADC_GetOffsetChannel>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a7f0:	fa93 f3a3 	rbit	r3, r3
 800a7f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800a7f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a7fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800a800:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a804:	2b00      	cmp	r3, #0
 800a806:	d101      	bne.n	800a80c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800a808:	2320      	movs	r3, #32
 800a80a:	e004      	b.n	800a816 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800a80c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a810:	fab3 f383 	clz	r3, r3
 800a814:	b2db      	uxtb	r3, r3
 800a816:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a820:	2b00      	cmp	r3, #0
 800a822:	d105      	bne.n	800a830 <HAL_ADC_ConfigChannel+0x278>
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	0e9b      	lsrs	r3, r3, #26
 800a82a:	f003 031f 	and.w	r3, r3, #31
 800a82e:	e018      	b.n	800a862 <HAL_ADC_ConfigChannel+0x2aa>
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a838:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a83c:	fa93 f3a3 	rbit	r3, r3
 800a840:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800a844:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a848:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800a84c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800a854:	2320      	movs	r3, #32
 800a856:	e004      	b.n	800a862 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800a858:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a85c:	fab3 f383 	clz	r3, r3
 800a860:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a862:	429a      	cmp	r2, r3
 800a864:	d106      	bne.n	800a874 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2200      	movs	r2, #0
 800a86c:	2101      	movs	r1, #1
 800a86e:	4618      	mov	r0, r3
 800a870:	f7ff fa1e 	bl	8009cb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	2102      	movs	r1, #2
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7ff fa02 	bl	8009c84 <LL_ADC_GetOffsetChannel>
 800a880:	4603      	mov	r3, r0
 800a882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a886:	2b00      	cmp	r3, #0
 800a888:	d10a      	bne.n	800a8a0 <HAL_ADC_ConfigChannel+0x2e8>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2102      	movs	r1, #2
 800a890:	4618      	mov	r0, r3
 800a892:	f7ff f9f7 	bl	8009c84 <LL_ADC_GetOffsetChannel>
 800a896:	4603      	mov	r3, r0
 800a898:	0e9b      	lsrs	r3, r3, #26
 800a89a:	f003 021f 	and.w	r2, r3, #31
 800a89e:	e01e      	b.n	800a8de <HAL_ADC_ConfigChannel+0x326>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2102      	movs	r1, #2
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f7ff f9ec 	bl	8009c84 <LL_ADC_GetOffsetChannel>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a8b6:	fa93 f3a3 	rbit	r3, r3
 800a8ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800a8be:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a8c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800a8c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d101      	bne.n	800a8d2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800a8ce:	2320      	movs	r3, #32
 800a8d0:	e004      	b.n	800a8dc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800a8d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a8d6:	fab3 f383 	clz	r3, r3
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d105      	bne.n	800a8f6 <HAL_ADC_ConfigChannel+0x33e>
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	0e9b      	lsrs	r3, r3, #26
 800a8f0:	f003 031f 	and.w	r3, r3, #31
 800a8f4:	e016      	b.n	800a924 <HAL_ADC_ConfigChannel+0x36c>
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a902:	fa93 f3a3 	rbit	r3, r3
 800a906:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800a908:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a90a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800a90e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a912:	2b00      	cmp	r3, #0
 800a914:	d101      	bne.n	800a91a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800a916:	2320      	movs	r3, #32
 800a918:	e004      	b.n	800a924 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800a91a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a91e:	fab3 f383 	clz	r3, r3
 800a922:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a924:	429a      	cmp	r2, r3
 800a926:	d106      	bne.n	800a936 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2200      	movs	r2, #0
 800a92e:	2102      	movs	r1, #2
 800a930:	4618      	mov	r0, r3
 800a932:	f7ff f9bd 	bl	8009cb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2103      	movs	r1, #3
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7ff f9a1 	bl	8009c84 <LL_ADC_GetOffsetChannel>
 800a942:	4603      	mov	r3, r0
 800a944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10a      	bne.n	800a962 <HAL_ADC_ConfigChannel+0x3aa>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2103      	movs	r1, #3
 800a952:	4618      	mov	r0, r3
 800a954:	f7ff f996 	bl	8009c84 <LL_ADC_GetOffsetChannel>
 800a958:	4603      	mov	r3, r0
 800a95a:	0e9b      	lsrs	r3, r3, #26
 800a95c:	f003 021f 	and.w	r2, r3, #31
 800a960:	e017      	b.n	800a992 <HAL_ADC_ConfigChannel+0x3da>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2103      	movs	r1, #3
 800a968:	4618      	mov	r0, r3
 800a96a:	f7ff f98b 	bl	8009c84 <LL_ADC_GetOffsetChannel>
 800a96e:	4603      	mov	r3, r0
 800a970:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a972:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a974:	fa93 f3a3 	rbit	r3, r3
 800a978:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800a97a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a97c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800a97e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a980:	2b00      	cmp	r3, #0
 800a982:	d101      	bne.n	800a988 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800a984:	2320      	movs	r3, #32
 800a986:	e003      	b.n	800a990 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800a988:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a98a:	fab3 f383 	clz	r3, r3
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d105      	bne.n	800a9aa <HAL_ADC_ConfigChannel+0x3f2>
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	0e9b      	lsrs	r3, r3, #26
 800a9a4:	f003 031f 	and.w	r3, r3, #31
 800a9a8:	e011      	b.n	800a9ce <HAL_ADC_ConfigChannel+0x416>
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a9b2:	fa93 f3a3 	rbit	r3, r3
 800a9b6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800a9b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a9ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800a9bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d101      	bne.n	800a9c6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800a9c2:	2320      	movs	r3, #32
 800a9c4:	e003      	b.n	800a9ce <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800a9c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a9c8:	fab3 f383 	clz	r3, r3
 800a9cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d106      	bne.n	800a9e0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	2103      	movs	r1, #3
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7ff f968 	bl	8009cb0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7ff fad9 	bl	8009f9c <LL_ADC_IsEnabled>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f040 813d 	bne.w	800ac6c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6818      	ldr	r0, [r3, #0]
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	6819      	ldr	r1, [r3, #0]
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	68db      	ldr	r3, [r3, #12]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	f7ff fa24 	bl	8009e4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800aa04:	683b      	ldr	r3, [r7, #0]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	4aa2      	ldr	r2, [pc, #648]	@ (800ac94 <HAL_ADC_ConfigChannel+0x6dc>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	f040 812e 	bne.w	800ac6c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d10b      	bne.n	800aa38 <HAL_ADC_ConfigChannel+0x480>
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	0e9b      	lsrs	r3, r3, #26
 800aa26:	3301      	adds	r3, #1
 800aa28:	f003 031f 	and.w	r3, r3, #31
 800aa2c:	2b09      	cmp	r3, #9
 800aa2e:	bf94      	ite	ls
 800aa30:	2301      	movls	r3, #1
 800aa32:	2300      	movhi	r3, #0
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	e019      	b.n	800aa6c <HAL_ADC_ConfigChannel+0x4b4>
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa40:	fa93 f3a3 	rbit	r3, r3
 800aa44:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800aa46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aa48:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800aa4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800aa50:	2320      	movs	r3, #32
 800aa52:	e003      	b.n	800aa5c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800aa54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800aa56:	fab3 f383 	clz	r3, r3
 800aa5a:	b2db      	uxtb	r3, r3
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	f003 031f 	and.w	r3, r3, #31
 800aa62:	2b09      	cmp	r3, #9
 800aa64:	bf94      	ite	ls
 800aa66:	2301      	movls	r3, #1
 800aa68:	2300      	movhi	r3, #0
 800aa6a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d079      	beq.n	800ab64 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d107      	bne.n	800aa8c <HAL_ADC_ConfigChannel+0x4d4>
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	0e9b      	lsrs	r3, r3, #26
 800aa82:	3301      	adds	r3, #1
 800aa84:	069b      	lsls	r3, r3, #26
 800aa86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800aa8a:	e015      	b.n	800aab8 <HAL_ADC_ConfigChannel+0x500>
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa94:	fa93 f3a3 	rbit	r3, r3
 800aa98:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800aa9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa9c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800aa9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d101      	bne.n	800aaa8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800aaa4:	2320      	movs	r3, #32
 800aaa6:	e003      	b.n	800aab0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800aaa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aaaa:	fab3 f383 	clz	r3, r3
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	3301      	adds	r3, #1
 800aab2:	069b      	lsls	r3, r3, #26
 800aab4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d109      	bne.n	800aad8 <HAL_ADC_ConfigChannel+0x520>
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	0e9b      	lsrs	r3, r3, #26
 800aaca:	3301      	adds	r3, #1
 800aacc:	f003 031f 	and.w	r3, r3, #31
 800aad0:	2101      	movs	r1, #1
 800aad2:	fa01 f303 	lsl.w	r3, r1, r3
 800aad6:	e017      	b.n	800ab08 <HAL_ADC_ConfigChannel+0x550>
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aae0:	fa93 f3a3 	rbit	r3, r3
 800aae4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800aae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aae8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800aaea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d101      	bne.n	800aaf4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800aaf0:	2320      	movs	r3, #32
 800aaf2:	e003      	b.n	800aafc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800aaf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aaf6:	fab3 f383 	clz	r3, r3
 800aafa:	b2db      	uxtb	r3, r3
 800aafc:	3301      	adds	r3, #1
 800aafe:	f003 031f 	and.w	r3, r3, #31
 800ab02:	2101      	movs	r1, #1
 800ab04:	fa01 f303 	lsl.w	r3, r1, r3
 800ab08:	ea42 0103 	orr.w	r1, r2, r3
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d10a      	bne.n	800ab2e <HAL_ADC_ConfigChannel+0x576>
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	0e9b      	lsrs	r3, r3, #26
 800ab1e:	3301      	adds	r3, #1
 800ab20:	f003 021f 	and.w	r2, r3, #31
 800ab24:	4613      	mov	r3, r2
 800ab26:	005b      	lsls	r3, r3, #1
 800ab28:	4413      	add	r3, r2
 800ab2a:	051b      	lsls	r3, r3, #20
 800ab2c:	e018      	b.n	800ab60 <HAL_ADC_ConfigChannel+0x5a8>
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab36:	fa93 f3a3 	rbit	r3, r3
 800ab3a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800ab3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800ab40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d101      	bne.n	800ab4a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800ab46:	2320      	movs	r3, #32
 800ab48:	e003      	b.n	800ab52 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800ab4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab4c:	fab3 f383 	clz	r3, r3
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	3301      	adds	r3, #1
 800ab54:	f003 021f 	and.w	r2, r3, #31
 800ab58:	4613      	mov	r3, r2
 800ab5a:	005b      	lsls	r3, r3, #1
 800ab5c:	4413      	add	r3, r2
 800ab5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ab60:	430b      	orrs	r3, r1
 800ab62:	e07e      	b.n	800ac62 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d107      	bne.n	800ab80 <HAL_ADC_ConfigChannel+0x5c8>
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	0e9b      	lsrs	r3, r3, #26
 800ab76:	3301      	adds	r3, #1
 800ab78:	069b      	lsls	r3, r3, #26
 800ab7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ab7e:	e015      	b.n	800abac <HAL_ADC_ConfigChannel+0x5f4>
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab88:	fa93 f3a3 	rbit	r3, r3
 800ab8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800ab8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab90:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800ab92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d101      	bne.n	800ab9c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800ab98:	2320      	movs	r3, #32
 800ab9a:	e003      	b.n	800aba4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9e:	fab3 f383 	clz	r3, r3
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	3301      	adds	r3, #1
 800aba6:	069b      	lsls	r3, r3, #26
 800aba8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d109      	bne.n	800abcc <HAL_ADC_ConfigChannel+0x614>
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	0e9b      	lsrs	r3, r3, #26
 800abbe:	3301      	adds	r3, #1
 800abc0:	f003 031f 	and.w	r3, r3, #31
 800abc4:	2101      	movs	r1, #1
 800abc6:	fa01 f303 	lsl.w	r3, r1, r3
 800abca:	e017      	b.n	800abfc <HAL_ADC_ConfigChannel+0x644>
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abd2:	6a3b      	ldr	r3, [r7, #32]
 800abd4:	fa93 f3a3 	rbit	r3, r3
 800abd8:	61fb      	str	r3, [r7, #28]
  return result;
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800abde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d101      	bne.n	800abe8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800abe4:	2320      	movs	r3, #32
 800abe6:	e003      	b.n	800abf0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800abe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abea:	fab3 f383 	clz	r3, r3
 800abee:	b2db      	uxtb	r3, r3
 800abf0:	3301      	adds	r3, #1
 800abf2:	f003 031f 	and.w	r3, r3, #31
 800abf6:	2101      	movs	r1, #1
 800abf8:	fa01 f303 	lsl.w	r3, r1, r3
 800abfc:	ea42 0103 	orr.w	r1, r2, r3
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10d      	bne.n	800ac28 <HAL_ADC_ConfigChannel+0x670>
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	0e9b      	lsrs	r3, r3, #26
 800ac12:	3301      	adds	r3, #1
 800ac14:	f003 021f 	and.w	r2, r3, #31
 800ac18:	4613      	mov	r3, r2
 800ac1a:	005b      	lsls	r3, r3, #1
 800ac1c:	4413      	add	r3, r2
 800ac1e:	3b1e      	subs	r3, #30
 800ac20:	051b      	lsls	r3, r3, #20
 800ac22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ac26:	e01b      	b.n	800ac60 <HAL_ADC_ConfigChannel+0x6a8>
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	fa93 f3a3 	rbit	r3, r3
 800ac34:	613b      	str	r3, [r7, #16]
  return result;
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d101      	bne.n	800ac44 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800ac40:	2320      	movs	r3, #32
 800ac42:	e003      	b.n	800ac4c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	fab3 f383 	clz	r3, r3
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	f003 021f 	and.w	r2, r3, #31
 800ac52:	4613      	mov	r3, r2
 800ac54:	005b      	lsls	r3, r3, #1
 800ac56:	4413      	add	r3, r2
 800ac58:	3b1e      	subs	r3, #30
 800ac5a:	051b      	lsls	r3, r3, #20
 800ac5c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ac60:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ac66:	4619      	mov	r1, r3
 800ac68:	f7ff f8c5 	bl	8009df6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	4b09      	ldr	r3, [pc, #36]	@ (800ac98 <HAL_ADC_ConfigChannel+0x6e0>)
 800ac72:	4013      	ands	r3, r2
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f000 80be 	beq.w	800adf6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac82:	d004      	beq.n	800ac8e <HAL_ADC_ConfigChannel+0x6d6>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4a04      	ldr	r2, [pc, #16]	@ (800ac9c <HAL_ADC_ConfigChannel+0x6e4>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d10a      	bne.n	800aca4 <HAL_ADC_ConfigChannel+0x6ec>
 800ac8e:	4b04      	ldr	r3, [pc, #16]	@ (800aca0 <HAL_ADC_ConfigChannel+0x6e8>)
 800ac90:	e009      	b.n	800aca6 <HAL_ADC_ConfigChannel+0x6ee>
 800ac92:	bf00      	nop
 800ac94:	407f0000 	.word	0x407f0000
 800ac98:	80080000 	.word	0x80080000
 800ac9c:	50000100 	.word	0x50000100
 800aca0:	50000300 	.word	0x50000300
 800aca4:	4b59      	ldr	r3, [pc, #356]	@ (800ae0c <HAL_ADC_ConfigChannel+0x854>)
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fe ffba 	bl	8009c20 <LL_ADC_GetCommonPathInternalCh>
 800acac:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a56      	ldr	r2, [pc, #344]	@ (800ae10 <HAL_ADC_ConfigChannel+0x858>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d004      	beq.n	800acc4 <HAL_ADC_ConfigChannel+0x70c>
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a55      	ldr	r2, [pc, #340]	@ (800ae14 <HAL_ADC_ConfigChannel+0x85c>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d13a      	bne.n	800ad3a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800acc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800acc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800accc:	2b00      	cmp	r3, #0
 800acce:	d134      	bne.n	800ad3a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800acd8:	d005      	beq.n	800ace6 <HAL_ADC_ConfigChannel+0x72e>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a4e      	ldr	r2, [pc, #312]	@ (800ae18 <HAL_ADC_ConfigChannel+0x860>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	f040 8085 	bne.w	800adf0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800acee:	d004      	beq.n	800acfa <HAL_ADC_ConfigChannel+0x742>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a49      	ldr	r2, [pc, #292]	@ (800ae1c <HAL_ADC_ConfigChannel+0x864>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d101      	bne.n	800acfe <HAL_ADC_ConfigChannel+0x746>
 800acfa:	4a49      	ldr	r2, [pc, #292]	@ (800ae20 <HAL_ADC_ConfigChannel+0x868>)
 800acfc:	e000      	b.n	800ad00 <HAL_ADC_ConfigChannel+0x748>
 800acfe:	4a43      	ldr	r2, [pc, #268]	@ (800ae0c <HAL_ADC_ConfigChannel+0x854>)
 800ad00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ad04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ad08:	4619      	mov	r1, r3
 800ad0a:	4610      	mov	r0, r2
 800ad0c:	f7fe ff75 	bl	8009bfa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ad10:	4b44      	ldr	r3, [pc, #272]	@ (800ae24 <HAL_ADC_ConfigChannel+0x86c>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	099b      	lsrs	r3, r3, #6
 800ad16:	4a44      	ldr	r2, [pc, #272]	@ (800ae28 <HAL_ADC_ConfigChannel+0x870>)
 800ad18:	fba2 2303 	umull	r2, r3, r2, r3
 800ad1c:	099b      	lsrs	r3, r3, #6
 800ad1e:	1c5a      	adds	r2, r3, #1
 800ad20:	4613      	mov	r3, r2
 800ad22:	005b      	lsls	r3, r3, #1
 800ad24:	4413      	add	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800ad2a:	e002      	b.n	800ad32 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d1f9      	bne.n	800ad2c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ad38:	e05a      	b.n	800adf0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4a3b      	ldr	r2, [pc, #236]	@ (800ae2c <HAL_ADC_ConfigChannel+0x874>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d125      	bne.n	800ad90 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800ad44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ad48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d11f      	bne.n	800ad90 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a31      	ldr	r2, [pc, #196]	@ (800ae1c <HAL_ADC_ConfigChannel+0x864>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d104      	bne.n	800ad64 <HAL_ADC_ConfigChannel+0x7ac>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a34      	ldr	r2, [pc, #208]	@ (800ae30 <HAL_ADC_ConfigChannel+0x878>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d047      	beq.n	800adf4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ad6c:	d004      	beq.n	800ad78 <HAL_ADC_ConfigChannel+0x7c0>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a2a      	ldr	r2, [pc, #168]	@ (800ae1c <HAL_ADC_ConfigChannel+0x864>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d101      	bne.n	800ad7c <HAL_ADC_ConfigChannel+0x7c4>
 800ad78:	4a29      	ldr	r2, [pc, #164]	@ (800ae20 <HAL_ADC_ConfigChannel+0x868>)
 800ad7a:	e000      	b.n	800ad7e <HAL_ADC_ConfigChannel+0x7c6>
 800ad7c:	4a23      	ldr	r2, [pc, #140]	@ (800ae0c <HAL_ADC_ConfigChannel+0x854>)
 800ad7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ad82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ad86:	4619      	mov	r1, r3
 800ad88:	4610      	mov	r0, r2
 800ad8a:	f7fe ff36 	bl	8009bfa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800ad8e:	e031      	b.n	800adf4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a27      	ldr	r2, [pc, #156]	@ (800ae34 <HAL_ADC_ConfigChannel+0x87c>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d12d      	bne.n	800adf6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800ad9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ad9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d127      	bne.n	800adf6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a1c      	ldr	r2, [pc, #112]	@ (800ae1c <HAL_ADC_ConfigChannel+0x864>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d022      	beq.n	800adf6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800adb8:	d004      	beq.n	800adc4 <HAL_ADC_ConfigChannel+0x80c>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a17      	ldr	r2, [pc, #92]	@ (800ae1c <HAL_ADC_ConfigChannel+0x864>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d101      	bne.n	800adc8 <HAL_ADC_ConfigChannel+0x810>
 800adc4:	4a16      	ldr	r2, [pc, #88]	@ (800ae20 <HAL_ADC_ConfigChannel+0x868>)
 800adc6:	e000      	b.n	800adca <HAL_ADC_ConfigChannel+0x812>
 800adc8:	4a10      	ldr	r2, [pc, #64]	@ (800ae0c <HAL_ADC_ConfigChannel+0x854>)
 800adca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800adce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800add2:	4619      	mov	r1, r3
 800add4:	4610      	mov	r0, r2
 800add6:	f7fe ff10 	bl	8009bfa <LL_ADC_SetCommonPathInternalCh>
 800adda:	e00c      	b.n	800adf6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ade0:	f043 0220 	orr.w	r2, r3, #32
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800adee:	e002      	b.n	800adf6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800adf0:	bf00      	nop
 800adf2:	e000      	b.n	800adf6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800adf4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800adfe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	37d8      	adds	r7, #216	@ 0xd8
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	50000700 	.word	0x50000700
 800ae10:	c3210000 	.word	0xc3210000
 800ae14:	90c00010 	.word	0x90c00010
 800ae18:	50000600 	.word	0x50000600
 800ae1c:	50000100 	.word	0x50000100
 800ae20:	50000300 	.word	0x50000300
 800ae24:	20000138 	.word	0x20000138
 800ae28:	053e2d63 	.word	0x053e2d63
 800ae2c:	c7520000 	.word	0xc7520000
 800ae30:	50000500 	.word	0x50000500
 800ae34:	cb840000 	.word	0xcb840000

0800ae38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800ae40:	2300      	movs	r3, #0
 800ae42:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7ff f8a7 	bl	8009f9c <LL_ADC_IsEnabled>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d176      	bne.n	800af42 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	689a      	ldr	r2, [r3, #8]
 800ae5a:	4b3c      	ldr	r3, [pc, #240]	@ (800af4c <ADC_Enable+0x114>)
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00d      	beq.n	800ae7e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae66:	f043 0210 	orr.w	r2, r3, #16
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae72:	f043 0201 	orr.w	r2, r3, #1
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e062      	b.n	800af44 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7ff f862 	bl	8009f4c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ae90:	d004      	beq.n	800ae9c <ADC_Enable+0x64>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a2e      	ldr	r2, [pc, #184]	@ (800af50 <ADC_Enable+0x118>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d101      	bne.n	800aea0 <ADC_Enable+0x68>
 800ae9c:	4b2d      	ldr	r3, [pc, #180]	@ (800af54 <ADC_Enable+0x11c>)
 800ae9e:	e000      	b.n	800aea2 <ADC_Enable+0x6a>
 800aea0:	4b2d      	ldr	r3, [pc, #180]	@ (800af58 <ADC_Enable+0x120>)
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7fe febc 	bl	8009c20 <LL_ADC_GetCommonPathInternalCh>
 800aea8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800aeaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d013      	beq.n	800aeda <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800aeb2:	4b2a      	ldr	r3, [pc, #168]	@ (800af5c <ADC_Enable+0x124>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	099b      	lsrs	r3, r3, #6
 800aeb8:	4a29      	ldr	r2, [pc, #164]	@ (800af60 <ADC_Enable+0x128>)
 800aeba:	fba2 2303 	umull	r2, r3, r2, r3
 800aebe:	099b      	lsrs	r3, r3, #6
 800aec0:	1c5a      	adds	r2, r3, #1
 800aec2:	4613      	mov	r3, r2
 800aec4:	005b      	lsls	r3, r3, #1
 800aec6:	4413      	add	r3, r2
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800aecc:	e002      	b.n	800aed4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	3b01      	subs	r3, #1
 800aed2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1f9      	bne.n	800aece <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800aeda:	f7fe fe6f 	bl	8009bbc <HAL_GetTick>
 800aede:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800aee0:	e028      	b.n	800af34 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7ff f858 	bl	8009f9c <LL_ADC_IsEnabled>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d104      	bne.n	800aefc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7ff f828 	bl	8009f4c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800aefc:	f7fe fe5e 	bl	8009bbc <HAL_GetTick>
 800af00:	4602      	mov	r2, r0
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	2b02      	cmp	r3, #2
 800af08:	d914      	bls.n	800af34 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 0301 	and.w	r3, r3, #1
 800af14:	2b01      	cmp	r3, #1
 800af16:	d00d      	beq.n	800af34 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af1c:	f043 0210 	orr.w	r2, r3, #16
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af28:	f043 0201 	orr.w	r2, r3, #1
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	e007      	b.n	800af44 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	f003 0301 	and.w	r3, r3, #1
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d1cf      	bne.n	800aee2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800af42:	2300      	movs	r3, #0
}
 800af44:	4618      	mov	r0, r3
 800af46:	3710      	adds	r7, #16
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	8000003f 	.word	0x8000003f
 800af50:	50000100 	.word	0x50000100
 800af54:	50000300 	.word	0x50000300
 800af58:	50000700 	.word	0x50000700
 800af5c:	20000138 	.word	0x20000138
 800af60:	053e2d63 	.word	0x053e2d63

0800af64 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4618      	mov	r0, r3
 800af72:	f7ff f826 	bl	8009fc2 <LL_ADC_IsDisableOngoing>
 800af76:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4618      	mov	r0, r3
 800af7e:	f7ff f80d 	bl	8009f9c <LL_ADC_IsEnabled>
 800af82:	4603      	mov	r3, r0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d047      	beq.n	800b018 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d144      	bne.n	800b018 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	f003 030d 	and.w	r3, r3, #13
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d10c      	bne.n	800afb6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7fe ffe7 	bl	8009f74 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2203      	movs	r2, #3
 800afac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800afae:	f7fe fe05 	bl	8009bbc <HAL_GetTick>
 800afb2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800afb4:	e029      	b.n	800b00a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afba:	f043 0210 	orr.w	r2, r3, #16
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afc6:	f043 0201 	orr.w	r2, r3, #1
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e023      	b.n	800b01a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800afd2:	f7fe fdf3 	bl	8009bbc <HAL_GetTick>
 800afd6:	4602      	mov	r2, r0
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d914      	bls.n	800b00a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	f003 0301 	and.w	r3, r3, #1
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00d      	beq.n	800b00a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aff2:	f043 0210 	orr.w	r2, r3, #16
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800affe:	f043 0201 	orr.w	r2, r3, #1
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	e007      	b.n	800b01a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	689b      	ldr	r3, [r3, #8]
 800b010:	f003 0301 	and.w	r3, r3, #1
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1dc      	bne.n	800afd2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b018:	2300      	movs	r3, #0
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b084      	sub	sp, #16
 800b026:	af00      	add	r7, sp, #0
 800b028:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b02e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b034:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d14b      	bne.n	800b0d4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b040:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f003 0308 	and.w	r3, r3, #8
 800b052:	2b00      	cmp	r3, #0
 800b054:	d021      	beq.n	800b09a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7fe fe8c 	bl	8009d78 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d032      	beq.n	800b0cc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68db      	ldr	r3, [r3, #12]
 800b06c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b070:	2b00      	cmp	r3, #0
 800b072:	d12b      	bne.n	800b0cc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b078:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b084:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d11f      	bne.n	800b0cc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b090:	f043 0201 	orr.w	r2, r3, #1
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b098:	e018      	b.n	800b0cc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	f003 0302 	and.w	r3, r3, #2
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d111      	bne.n	800b0cc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d105      	bne.n	800b0cc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0c4:	f043 0201 	orr.w	r2, r3, #1
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	f7ff fa55 	bl	800a57c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b0d2:	e00e      	b.n	800b0f2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0d8:	f003 0310 	and.w	r3, r3, #16
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d003      	beq.n	800b0e8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f7ff fa5f 	bl	800a5a4 <HAL_ADC_ErrorCallback>
}
 800b0e6:	e004      	b.n	800b0f2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	4798      	blx	r3
}
 800b0f2:	bf00      	nop
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b084      	sub	sp, #16
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b106:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f7ff fa41 	bl	800a590 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b10e:	bf00      	nop
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}

0800b116 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b116:	b580      	push	{r7, lr}
 800b118:	b084      	sub	sp, #16
 800b11a:	af00      	add	r7, sp, #0
 800b11c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b122:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b128:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b134:	f043 0204 	orr.w	r2, r3, #4
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b13c:	68f8      	ldr	r0, [r7, #12]
 800b13e:	f7ff fa31 	bl	800a5a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b142:	bf00      	nop
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <LL_ADC_IsEnabled>:
{
 800b14a:	b480      	push	{r7}
 800b14c:	b083      	sub	sp, #12
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	f003 0301 	and.w	r3, r3, #1
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d101      	bne.n	800b162 <LL_ADC_IsEnabled+0x18>
 800b15e:	2301      	movs	r3, #1
 800b160:	e000      	b.n	800b164 <LL_ADC_IsEnabled+0x1a>
 800b162:	2300      	movs	r3, #0
}
 800b164:	4618      	mov	r0, r3
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <LL_ADC_StartCalibration>:
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800b182:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b186:	683a      	ldr	r2, [r7, #0]
 800b188:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800b18c:	4313      	orrs	r3, r2
 800b18e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	609a      	str	r2, [r3, #8]
}
 800b196:	bf00      	nop
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <LL_ADC_IsCalibrationOnGoing>:
{
 800b1a2:	b480      	push	{r7}
 800b1a4:	b083      	sub	sp, #12
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b1b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1b6:	d101      	bne.n	800b1bc <LL_ADC_IsCalibrationOnGoing+0x1a>
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e000      	b.n	800b1be <LL_ADC_IsCalibrationOnGoing+0x1c>
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	370c      	adds	r7, #12
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <LL_ADC_REG_IsConversionOngoing>:
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b083      	sub	sp, #12
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	f003 0304 	and.w	r3, r3, #4
 800b1da:	2b04      	cmp	r3, #4
 800b1dc:	d101      	bne.n	800b1e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e000      	b.n	800b1e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	370c      	adds	r7, #12
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b204:	2b01      	cmp	r3, #1
 800b206:	d101      	bne.n	800b20c <HAL_ADCEx_Calibration_Start+0x1c>
 800b208:	2302      	movs	r3, #2
 800b20a:	e04d      	b.n	800b2a8 <HAL_ADCEx_Calibration_Start+0xb8>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f7ff fea5 	bl	800af64 <ADC_Disable>
 800b21a:	4603      	mov	r3, r0
 800b21c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800b21e:	7bfb      	ldrb	r3, [r7, #15]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d136      	bne.n	800b292 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b228:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800b22c:	f023 0302 	bic.w	r3, r3, #2
 800b230:	f043 0202 	orr.w	r2, r3, #2
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6839      	ldr	r1, [r7, #0]
 800b23e:	4618      	mov	r0, r3
 800b240:	f7ff ff96 	bl	800b170 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800b244:	e014      	b.n	800b270 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	3301      	adds	r3, #1
 800b24a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	4a18      	ldr	r2, [pc, #96]	@ (800b2b0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d90d      	bls.n	800b270 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b258:	f023 0312 	bic.w	r3, r3, #18
 800b25c:	f043 0210 	orr.w	r2, r3, #16
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	e01b      	b.n	800b2a8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4618      	mov	r0, r3
 800b276:	f7ff ff94 	bl	800b1a2 <LL_ADC_IsCalibrationOnGoing>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d1e2      	bne.n	800b246 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b284:	f023 0303 	bic.w	r3, r3, #3
 800b288:	f043 0201 	orr.w	r2, r3, #1
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b290:	e005      	b.n	800b29e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b296:	f043 0210 	orr.w	r2, r3, #16
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800b2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}
 800b2b0:	0004de01 	.word	0x0004de01

0800b2b4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800b2b4:	b590      	push	{r4, r7, lr}
 800b2b6:	b0a1      	sub	sp, #132	@ 0x84
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d101      	bne.n	800b2d2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800b2ce:	2302      	movs	r3, #2
 800b2d0:	e0e7      	b.n	800b4a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800b2da:	2300      	movs	r3, #0
 800b2dc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800b2de:	2300      	movs	r3, #0
 800b2e0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b2ea:	d102      	bne.n	800b2f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800b2ec:	4b6f      	ldr	r3, [pc, #444]	@ (800b4ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b2ee:	60bb      	str	r3, [r7, #8]
 800b2f0:	e009      	b.n	800b306 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a6e      	ldr	r2, [pc, #440]	@ (800b4b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d102      	bne.n	800b302 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800b2fc:	4b6d      	ldr	r3, [pc, #436]	@ (800b4b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b2fe:	60bb      	str	r3, [r7, #8]
 800b300:	e001      	b.n	800b306 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800b302:	2300      	movs	r3, #0
 800b304:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d10b      	bne.n	800b324 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b310:	f043 0220 	orr.w	r2, r3, #32
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2200      	movs	r2, #0
 800b31c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800b320:	2301      	movs	r3, #1
 800b322:	e0be      	b.n	800b4a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	4618      	mov	r0, r3
 800b328:	f7ff ff4f 	bl	800b1ca <LL_ADC_REG_IsConversionOngoing>
 800b32c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4618      	mov	r0, r3
 800b334:	f7ff ff49 	bl	800b1ca <LL_ADC_REG_IsConversionOngoing>
 800b338:	4603      	mov	r3, r0
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f040 80a0 	bne.w	800b480 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800b340:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b342:	2b00      	cmp	r3, #0
 800b344:	f040 809c 	bne.w	800b480 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b350:	d004      	beq.n	800b35c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a55      	ldr	r2, [pc, #340]	@ (800b4ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d101      	bne.n	800b360 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800b35c:	4b56      	ldr	r3, [pc, #344]	@ (800b4b8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800b35e:	e000      	b.n	800b362 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800b360:	4b56      	ldr	r3, [pc, #344]	@ (800b4bc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800b362:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d04b      	beq.n	800b404 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800b36c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	6859      	ldr	r1, [r3, #4]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b37e:	035b      	lsls	r3, r3, #13
 800b380:	430b      	orrs	r3, r1
 800b382:	431a      	orrs	r2, r3
 800b384:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b386:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b390:	d004      	beq.n	800b39c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a45      	ldr	r2, [pc, #276]	@ (800b4ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d10f      	bne.n	800b3bc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800b39c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800b3a0:	f7ff fed3 	bl	800b14a <LL_ADC_IsEnabled>
 800b3a4:	4604      	mov	r4, r0
 800b3a6:	4841      	ldr	r0, [pc, #260]	@ (800b4ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b3a8:	f7ff fecf 	bl	800b14a <LL_ADC_IsEnabled>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	4323      	orrs	r3, r4
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	bf0c      	ite	eq
 800b3b4:	2301      	moveq	r3, #1
 800b3b6:	2300      	movne	r3, #0
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	e012      	b.n	800b3e2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800b3bc:	483c      	ldr	r0, [pc, #240]	@ (800b4b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b3be:	f7ff fec4 	bl	800b14a <LL_ADC_IsEnabled>
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	483b      	ldr	r0, [pc, #236]	@ (800b4b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b3c6:	f7ff fec0 	bl	800b14a <LL_ADC_IsEnabled>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	431c      	orrs	r4, r3
 800b3ce:	483c      	ldr	r0, [pc, #240]	@ (800b4c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800b3d0:	f7ff febb 	bl	800b14a <LL_ADC_IsEnabled>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	4323      	orrs	r3, r4
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	bf0c      	ite	eq
 800b3dc:	2301      	moveq	r3, #1
 800b3de:	2300      	movne	r3, #0
 800b3e0:	b2db      	uxtb	r3, r3
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d056      	beq.n	800b494 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800b3e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800b3ee:	f023 030f 	bic.w	r3, r3, #15
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	6811      	ldr	r1, [r2, #0]
 800b3f6:	683a      	ldr	r2, [r7, #0]
 800b3f8:	6892      	ldr	r2, [r2, #8]
 800b3fa:	430a      	orrs	r2, r1
 800b3fc:	431a      	orrs	r2, r3
 800b3fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b400:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b402:	e047      	b.n	800b494 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800b404:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b40c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b40e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b418:	d004      	beq.n	800b424 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a23      	ldr	r2, [pc, #140]	@ (800b4ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d10f      	bne.n	800b444 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800b424:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800b428:	f7ff fe8f 	bl	800b14a <LL_ADC_IsEnabled>
 800b42c:	4604      	mov	r4, r0
 800b42e:	481f      	ldr	r0, [pc, #124]	@ (800b4ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b430:	f7ff fe8b 	bl	800b14a <LL_ADC_IsEnabled>
 800b434:	4603      	mov	r3, r0
 800b436:	4323      	orrs	r3, r4
 800b438:	2b00      	cmp	r3, #0
 800b43a:	bf0c      	ite	eq
 800b43c:	2301      	moveq	r3, #1
 800b43e:	2300      	movne	r3, #0
 800b440:	b2db      	uxtb	r3, r3
 800b442:	e012      	b.n	800b46a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800b444:	481a      	ldr	r0, [pc, #104]	@ (800b4b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b446:	f7ff fe80 	bl	800b14a <LL_ADC_IsEnabled>
 800b44a:	4604      	mov	r4, r0
 800b44c:	4819      	ldr	r0, [pc, #100]	@ (800b4b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b44e:	f7ff fe7c 	bl	800b14a <LL_ADC_IsEnabled>
 800b452:	4603      	mov	r3, r0
 800b454:	431c      	orrs	r4, r3
 800b456:	481a      	ldr	r0, [pc, #104]	@ (800b4c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800b458:	f7ff fe77 	bl	800b14a <LL_ADC_IsEnabled>
 800b45c:	4603      	mov	r3, r0
 800b45e:	4323      	orrs	r3, r4
 800b460:	2b00      	cmp	r3, #0
 800b462:	bf0c      	ite	eq
 800b464:	2301      	moveq	r3, #1
 800b466:	2300      	movne	r3, #0
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d012      	beq.n	800b494 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800b46e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800b476:	f023 030f 	bic.w	r3, r3, #15
 800b47a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b47c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b47e:	e009      	b.n	800b494 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b484:	f043 0220 	orr.w	r2, r3, #32
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800b492:	e000      	b.n	800b496 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b494:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800b49e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3784      	adds	r7, #132	@ 0x84
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd90      	pop	{r4, r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	50000100 	.word	0x50000100
 800b4b0:	50000400 	.word	0x50000400
 800b4b4:	50000500 	.word	0x50000500
 800b4b8:	50000300 	.word	0x50000300
 800b4bc:	50000700 	.word	0x50000700
 800b4c0:	50000600 	.word	0x50000600

0800b4c4 <__NVIC_SetPriorityGrouping>:
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f003 0307 	and.w	r3, r3, #7
 800b4d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b4d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b508 <__NVIC_SetPriorityGrouping+0x44>)
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b4e0:	4013      	ands	r3, r2
 800b4e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b4ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b4f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b4f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b4f6:	4a04      	ldr	r2, [pc, #16]	@ (800b508 <__NVIC_SetPriorityGrouping+0x44>)
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	60d3      	str	r3, [r2, #12]
}
 800b4fc:	bf00      	nop
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr
 800b508:	e000ed00 	.word	0xe000ed00

0800b50c <__NVIC_GetPriorityGrouping>:
{
 800b50c:	b480      	push	{r7}
 800b50e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b510:	4b04      	ldr	r3, [pc, #16]	@ (800b524 <__NVIC_GetPriorityGrouping+0x18>)
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	0a1b      	lsrs	r3, r3, #8
 800b516:	f003 0307 	and.w	r3, r3, #7
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr
 800b524:	e000ed00 	.word	0xe000ed00

0800b528 <__NVIC_EnableIRQ>:
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	4603      	mov	r3, r0
 800b530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b536:	2b00      	cmp	r3, #0
 800b538:	db0b      	blt.n	800b552 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b53a:	79fb      	ldrb	r3, [r7, #7]
 800b53c:	f003 021f 	and.w	r2, r3, #31
 800b540:	4907      	ldr	r1, [pc, #28]	@ (800b560 <__NVIC_EnableIRQ+0x38>)
 800b542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b546:	095b      	lsrs	r3, r3, #5
 800b548:	2001      	movs	r0, #1
 800b54a:	fa00 f202 	lsl.w	r2, r0, r2
 800b54e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b552:	bf00      	nop
 800b554:	370c      	adds	r7, #12
 800b556:	46bd      	mov	sp, r7
 800b558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop
 800b560:	e000e100 	.word	0xe000e100

0800b564 <__NVIC_SetPriority>:
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
 800b56a:	4603      	mov	r3, r0
 800b56c:	6039      	str	r1, [r7, #0]
 800b56e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b574:	2b00      	cmp	r3, #0
 800b576:	db0a      	blt.n	800b58e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	b2da      	uxtb	r2, r3
 800b57c:	490c      	ldr	r1, [pc, #48]	@ (800b5b0 <__NVIC_SetPriority+0x4c>)
 800b57e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b582:	0112      	lsls	r2, r2, #4
 800b584:	b2d2      	uxtb	r2, r2
 800b586:	440b      	add	r3, r1
 800b588:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b58c:	e00a      	b.n	800b5a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	b2da      	uxtb	r2, r3
 800b592:	4908      	ldr	r1, [pc, #32]	@ (800b5b4 <__NVIC_SetPriority+0x50>)
 800b594:	79fb      	ldrb	r3, [r7, #7]
 800b596:	f003 030f 	and.w	r3, r3, #15
 800b59a:	3b04      	subs	r3, #4
 800b59c:	0112      	lsls	r2, r2, #4
 800b59e:	b2d2      	uxtb	r2, r2
 800b5a0:	440b      	add	r3, r1
 800b5a2:	761a      	strb	r2, [r3, #24]
}
 800b5a4:	bf00      	nop
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr
 800b5b0:	e000e100 	.word	0xe000e100
 800b5b4:	e000ed00 	.word	0xe000ed00

0800b5b8 <NVIC_EncodePriority>:
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b089      	sub	sp, #36	@ 0x24
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f003 0307 	and.w	r3, r3, #7
 800b5ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	f1c3 0307 	rsb	r3, r3, #7
 800b5d2:	2b04      	cmp	r3, #4
 800b5d4:	bf28      	it	cs
 800b5d6:	2304      	movcs	r3, #4
 800b5d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	3304      	adds	r3, #4
 800b5de:	2b06      	cmp	r3, #6
 800b5e0:	d902      	bls.n	800b5e8 <NVIC_EncodePriority+0x30>
 800b5e2:	69fb      	ldr	r3, [r7, #28]
 800b5e4:	3b03      	subs	r3, #3
 800b5e6:	e000      	b.n	800b5ea <NVIC_EncodePriority+0x32>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b5f6:	43da      	mvns	r2, r3
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	401a      	ands	r2, r3
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b600:	f04f 31ff 	mov.w	r1, #4294967295
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	fa01 f303 	lsl.w	r3, r1, r3
 800b60a:	43d9      	mvns	r1, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b610:	4313      	orrs	r3, r2
}
 800b612:	4618      	mov	r0, r3
 800b614:	3724      	adds	r7, #36	@ 0x24
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
	...

0800b620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	3b01      	subs	r3, #1
 800b62c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b630:	d301      	bcc.n	800b636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b632:	2301      	movs	r3, #1
 800b634:	e00f      	b.n	800b656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b636:	4a0a      	ldr	r2, [pc, #40]	@ (800b660 <SysTick_Config+0x40>)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	3b01      	subs	r3, #1
 800b63c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b63e:	210f      	movs	r1, #15
 800b640:	f04f 30ff 	mov.w	r0, #4294967295
 800b644:	f7ff ff8e 	bl	800b564 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b648:	4b05      	ldr	r3, [pc, #20]	@ (800b660 <SysTick_Config+0x40>)
 800b64a:	2200      	movs	r2, #0
 800b64c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b64e:	4b04      	ldr	r3, [pc, #16]	@ (800b660 <SysTick_Config+0x40>)
 800b650:	2207      	movs	r2, #7
 800b652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3708      	adds	r7, #8
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	e000e010 	.word	0xe000e010

0800b664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f7ff ff29 	bl	800b4c4 <__NVIC_SetPriorityGrouping>
}
 800b672:	bf00      	nop
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b086      	sub	sp, #24
 800b67e:	af00      	add	r7, sp, #0
 800b680:	4603      	mov	r3, r0
 800b682:	60b9      	str	r1, [r7, #8]
 800b684:	607a      	str	r2, [r7, #4]
 800b686:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b688:	f7ff ff40 	bl	800b50c <__NVIC_GetPriorityGrouping>
 800b68c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	68b9      	ldr	r1, [r7, #8]
 800b692:	6978      	ldr	r0, [r7, #20]
 800b694:	f7ff ff90 	bl	800b5b8 <NVIC_EncodePriority>
 800b698:	4602      	mov	r2, r0
 800b69a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b69e:	4611      	mov	r1, r2
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7ff ff5f 	bl	800b564 <__NVIC_SetPriority>
}
 800b6a6:	bf00      	nop
 800b6a8:	3718      	adds	r7, #24
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b082      	sub	sp, #8
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b6b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f7ff ff33 	bl	800b528 <__NVIC_EnableIRQ>
}
 800b6c2:	bf00      	nop
 800b6c4:	3708      	adds	r7, #8
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b082      	sub	sp, #8
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7ff ffa4 	bl	800b620 <SysTick_Config>
 800b6d8:	4603      	mov	r3, r0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
	...

0800b6e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b084      	sub	sp, #16
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d101      	bne.n	800b6f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e08d      	b.n	800b812 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	4b47      	ldr	r3, [pc, #284]	@ (800b81c <HAL_DMA_Init+0x138>)
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d80f      	bhi.n	800b722 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	461a      	mov	r2, r3
 800b708:	4b45      	ldr	r3, [pc, #276]	@ (800b820 <HAL_DMA_Init+0x13c>)
 800b70a:	4413      	add	r3, r2
 800b70c:	4a45      	ldr	r2, [pc, #276]	@ (800b824 <HAL_DMA_Init+0x140>)
 800b70e:	fba2 2303 	umull	r2, r3, r2, r3
 800b712:	091b      	lsrs	r3, r3, #4
 800b714:	009a      	lsls	r2, r3, #2
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a42      	ldr	r2, [pc, #264]	@ (800b828 <HAL_DMA_Init+0x144>)
 800b71e:	641a      	str	r2, [r3, #64]	@ 0x40
 800b720:	e00e      	b.n	800b740 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	461a      	mov	r2, r3
 800b728:	4b40      	ldr	r3, [pc, #256]	@ (800b82c <HAL_DMA_Init+0x148>)
 800b72a:	4413      	add	r3, r2
 800b72c:	4a3d      	ldr	r2, [pc, #244]	@ (800b824 <HAL_DMA_Init+0x140>)
 800b72e:	fba2 2303 	umull	r2, r3, r2, r3
 800b732:	091b      	lsrs	r3, r3, #4
 800b734:	009a      	lsls	r2, r3, #2
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a3c      	ldr	r2, [pc, #240]	@ (800b830 <HAL_DMA_Init+0x14c>)
 800b73e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2202      	movs	r2, #2
 800b744:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800b756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b75a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	691b      	ldr	r3, [r3, #16]
 800b76a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	699b      	ldr	r3, [r3, #24]
 800b776:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b77c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a1b      	ldr	r3, [r3, #32]
 800b782:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	4313      	orrs	r3, r2
 800b788:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 fa76 	bl	800bc84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	689b      	ldr	r3, [r3, #8]
 800b79c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b7a0:	d102      	bne.n	800b7a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685a      	ldr	r2, [r3, #4]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b7b0:	b2d2      	uxtb	r2, r2
 800b7b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b7bc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d010      	beq.n	800b7e8 <HAL_DMA_Init+0x104>
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	2b04      	cmp	r3, #4
 800b7cc:	d80c      	bhi.n	800b7e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 fa96 	bl	800bd00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b7d8:	2200      	movs	r2, #0
 800b7da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800b7e4:	605a      	str	r2, [r3, #4]
 800b7e6:	e008      	b.n	800b7fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2200      	movs	r2, #0
 800b80c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	40020407 	.word	0x40020407
 800b820:	bffdfff8 	.word	0xbffdfff8
 800b824:	cccccccd 	.word	0xcccccccd
 800b828:	40020000 	.word	0x40020000
 800b82c:	bffdfbf8 	.word	0xbffdfbf8
 800b830:	40020400 	.word	0x40020400

0800b834 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	607a      	str	r2, [r7, #4]
 800b840:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b842:	2300      	movs	r3, #0
 800b844:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d101      	bne.n	800b854 <HAL_DMA_Start_IT+0x20>
 800b850:	2302      	movs	r3, #2
 800b852:	e066      	b.n	800b922 <HAL_DMA_Start_IT+0xee>
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b862:	b2db      	uxtb	r3, r3
 800b864:	2b01      	cmp	r3, #1
 800b866:	d155      	bne.n	800b914 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2202      	movs	r2, #2
 800b86c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2200      	movs	r2, #0
 800b874:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f022 0201 	bic.w	r2, r2, #1
 800b884:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	68b9      	ldr	r1, [r7, #8]
 800b88c:	68f8      	ldr	r0, [r7, #12]
 800b88e:	f000 f9bb 	bl	800bc08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b896:	2b00      	cmp	r3, #0
 800b898:	d008      	beq.n	800b8ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f042 020e 	orr.w	r2, r2, #14
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	e00f      	b.n	800b8cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f022 0204 	bic.w	r2, r2, #4
 800b8ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f042 020a 	orr.w	r2, r2, #10
 800b8ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d007      	beq.n	800b8ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b8e4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b8e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d007      	beq.n	800b902 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8f6:	681a      	ldr	r2, [r3, #0]
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b900:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f042 0201 	orr.w	r2, r2, #1
 800b910:	601a      	str	r2, [r3, #0]
 800b912:	e005      	b.n	800b920 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2200      	movs	r2, #0
 800b918:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b91c:	2302      	movs	r3, #2
 800b91e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b920:	7dfb      	ldrb	r3, [r7, #23]
}
 800b922:	4618      	mov	r0, r3
 800b924:	3718      	adds	r7, #24
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b92a:	b480      	push	{r7}
 800b92c:	b085      	sub	sp, #20
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b932:	2300      	movs	r3, #0
 800b934:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	2b02      	cmp	r3, #2
 800b940:	d005      	beq.n	800b94e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2204      	movs	r2, #4
 800b946:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800b948:	2301      	movs	r3, #1
 800b94a:	73fb      	strb	r3, [r7, #15]
 800b94c:	e037      	b.n	800b9be <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f022 020e 	bic.w	r2, r2, #14
 800b95c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b968:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b96c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f022 0201 	bic.w	r2, r2, #1
 800b97c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b982:	f003 021f 	and.w	r2, r3, #31
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b98a:	2101      	movs	r1, #1
 800b98c:	fa01 f202 	lsl.w	r2, r1, r2
 800b990:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b99a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00c      	beq.n	800b9be <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b9b2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9b8:	687a      	ldr	r2, [r7, #4]
 800b9ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800b9bc:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800b9ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3714      	adds	r7, #20
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	2b02      	cmp	r3, #2
 800b9f2:	d00d      	beq.n	800ba10 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2204      	movs	r2, #4
 800b9f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	73fb      	strb	r3, [r7, #15]
 800ba0e:	e047      	b.n	800baa0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f022 020e 	bic.w	r2, r2, #14
 800ba1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f022 0201 	bic.w	r2, r2, #1
 800ba2e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ba3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba44:	f003 021f 	and.w	r2, r3, #31
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba4c:	2101      	movs	r1, #1
 800ba4e:	fa01 f202 	lsl.w	r2, r1, r2
 800ba52:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ba5c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00c      	beq.n	800ba80 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ba74:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ba7e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d003      	beq.n	800baa0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	4798      	blx	r3
    }
  }
  return status;
 800baa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b084      	sub	sp, #16
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bac6:	f003 031f 	and.w	r3, r3, #31
 800baca:	2204      	movs	r2, #4
 800bacc:	409a      	lsls	r2, r3
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	4013      	ands	r3, r2
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d026      	beq.n	800bb24 <HAL_DMA_IRQHandler+0x7a>
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	f003 0304 	and.w	r3, r3, #4
 800badc:	2b00      	cmp	r3, #0
 800bade:	d021      	beq.n	800bb24 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f003 0320 	and.w	r3, r3, #32
 800baea:	2b00      	cmp	r3, #0
 800baec:	d107      	bne.n	800bafe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f022 0204 	bic.w	r2, r2, #4
 800bafc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb02:	f003 021f 	and.w	r2, r3, #31
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb0a:	2104      	movs	r1, #4
 800bb0c:	fa01 f202 	lsl.w	r2, r1, r2
 800bb10:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d071      	beq.n	800bbfe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800bb22:	e06c      	b.n	800bbfe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb28:	f003 031f 	and.w	r3, r3, #31
 800bb2c:	2202      	movs	r2, #2
 800bb2e:	409a      	lsls	r2, r3
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	4013      	ands	r3, r2
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d02e      	beq.n	800bb96 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	f003 0302 	and.w	r3, r3, #2
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d029      	beq.n	800bb96 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f003 0320 	and.w	r3, r3, #32
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d10b      	bne.n	800bb68 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	681a      	ldr	r2, [r3, #0]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f022 020a 	bic.w	r2, r2, #10
 800bb5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2201      	movs	r2, #1
 800bb64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb6c:	f003 021f 	and.w	r2, r3, #31
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb74:	2102      	movs	r1, #2
 800bb76:	fa01 f202 	lsl.w	r2, r1, r2
 800bb7a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d038      	beq.n	800bbfe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800bb94:	e033      	b.n	800bbfe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb9a:	f003 031f 	and.w	r3, r3, #31
 800bb9e:	2208      	movs	r2, #8
 800bba0:	409a      	lsls	r2, r3
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	4013      	ands	r3, r2
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d02a      	beq.n	800bc00 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	f003 0308 	and.w	r3, r3, #8
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d025      	beq.n	800bc00 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f022 020e 	bic.w	r2, r2, #14
 800bbc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbc8:	f003 021f 	and.w	r2, r3, #31
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	fa01 f202 	lsl.w	r2, r1, r2
 800bbd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d004      	beq.n	800bc00 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800bbfe:	bf00      	nop
 800bc00:	bf00      	nop
}
 800bc02:	3710      	adds	r7, #16
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	607a      	str	r2, [r7, #4]
 800bc14:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc1a:	68fa      	ldr	r2, [r7, #12]
 800bc1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bc1e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d004      	beq.n	800bc32 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800bc30:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc36:	f003 021f 	and.w	r2, r3, #31
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc3e:	2101      	movs	r1, #1
 800bc40:	fa01 f202 	lsl.w	r2, r1, r2
 800bc44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	683a      	ldr	r2, [r7, #0]
 800bc4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	689b      	ldr	r3, [r3, #8]
 800bc52:	2b10      	cmp	r3, #16
 800bc54:	d108      	bne.n	800bc68 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	68ba      	ldr	r2, [r7, #8]
 800bc64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800bc66:	e007      	b.n	800bc78 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	68ba      	ldr	r2, [r7, #8]
 800bc6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	687a      	ldr	r2, [r7, #4]
 800bc76:	60da      	str	r2, [r3, #12]
}
 800bc78:	bf00      	nop
 800bc7a:	3714      	adds	r7, #20
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b087      	sub	sp, #28
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	461a      	mov	r2, r3
 800bc92:	4b16      	ldr	r3, [pc, #88]	@ (800bcec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d802      	bhi.n	800bc9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800bc98:	4b15      	ldr	r3, [pc, #84]	@ (800bcf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800bc9a:	617b      	str	r3, [r7, #20]
 800bc9c:	e001      	b.n	800bca2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800bc9e:	4b15      	ldr	r3, [pc, #84]	@ (800bcf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800bca0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	3b08      	subs	r3, #8
 800bcae:	4a12      	ldr	r2, [pc, #72]	@ (800bcf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800bcb0:	fba2 2303 	umull	r2, r3, r2, r3
 800bcb4:	091b      	lsrs	r3, r3, #4
 800bcb6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcbc:	089b      	lsrs	r3, r3, #2
 800bcbe:	009a      	lsls	r2, r3, #2
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	4a0b      	ldr	r2, [pc, #44]	@ (800bcfc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800bcce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f003 031f 	and.w	r3, r3, #31
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	409a      	lsls	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800bcde:	bf00      	nop
 800bce0:	371c      	adds	r7, #28
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	40020407 	.word	0x40020407
 800bcf0:	40020800 	.word	0x40020800
 800bcf4:	40020820 	.word	0x40020820
 800bcf8:	cccccccd 	.word	0xcccccccd
 800bcfc:	40020880 	.word	0x40020880

0800bd00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b085      	sub	sp, #20
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	685b      	ldr	r3, [r3, #4]
 800bd0c:	b2db      	uxtb	r3, r3
 800bd0e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bd10:	68fa      	ldr	r2, [r7, #12]
 800bd12:	4b0b      	ldr	r3, [pc, #44]	@ (800bd40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800bd14:	4413      	add	r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	461a      	mov	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4a08      	ldr	r2, [pc, #32]	@ (800bd44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800bd22:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	3b01      	subs	r3, #1
 800bd28:	f003 031f 	and.w	r3, r3, #31
 800bd2c:	2201      	movs	r2, #1
 800bd2e:	409a      	lsls	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800bd34:	bf00      	nop
 800bd36:	3714      	adds	r7, #20
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr
 800bd40:	1000823f 	.word	0x1000823f
 800bd44:	40020940 	.word	0x40020940

0800bd48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b087      	sub	sp, #28
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bd52:	2300      	movs	r3, #0
 800bd54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bd56:	e15a      	b.n	800c00e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	2101      	movs	r1, #1
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	fa01 f303 	lsl.w	r3, r1, r3
 800bd64:	4013      	ands	r3, r2
 800bd66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	f000 814c 	beq.w	800c008 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	f003 0303 	and.w	r3, r3, #3
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d005      	beq.n	800bd88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800bd84:	2b02      	cmp	r3, #2
 800bd86:	d130      	bne.n	800bdea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	005b      	lsls	r3, r3, #1
 800bd92:	2203      	movs	r2, #3
 800bd94:	fa02 f303 	lsl.w	r3, r2, r3
 800bd98:	43db      	mvns	r3, r3
 800bd9a:	693a      	ldr	r2, [r7, #16]
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	68da      	ldr	r2, [r3, #12]
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	005b      	lsls	r3, r3, #1
 800bda8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdac:	693a      	ldr	r2, [r7, #16]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	fa02 f303 	lsl.w	r3, r2, r3
 800bdc6:	43db      	mvns	r3, r3
 800bdc8:	693a      	ldr	r2, [r7, #16]
 800bdca:	4013      	ands	r3, r2
 800bdcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	091b      	lsrs	r3, r3, #4
 800bdd4:	f003 0201 	and.w	r2, r3, #1
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	fa02 f303 	lsl.w	r3, r2, r3
 800bdde:	693a      	ldr	r2, [r7, #16]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	693a      	ldr	r2, [r7, #16]
 800bde8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	f003 0303 	and.w	r3, r3, #3
 800bdf2:	2b03      	cmp	r3, #3
 800bdf4:	d017      	beq.n	800be26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	005b      	lsls	r3, r3, #1
 800be00:	2203      	movs	r2, #3
 800be02:	fa02 f303 	lsl.w	r3, r2, r3
 800be06:	43db      	mvns	r3, r3
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	4013      	ands	r3, r2
 800be0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	689a      	ldr	r2, [r3, #8]
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	005b      	lsls	r3, r3, #1
 800be16:	fa02 f303 	lsl.w	r3, r2, r3
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	693a      	ldr	r2, [r7, #16]
 800be24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	f003 0303 	and.w	r3, r3, #3
 800be2e:	2b02      	cmp	r3, #2
 800be30:	d123      	bne.n	800be7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	08da      	lsrs	r2, r3, #3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	3208      	adds	r2, #8
 800be3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	f003 0307 	and.w	r3, r3, #7
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	220f      	movs	r2, #15
 800be4a:	fa02 f303 	lsl.w	r3, r2, r3
 800be4e:	43db      	mvns	r3, r3
 800be50:	693a      	ldr	r2, [r7, #16]
 800be52:	4013      	ands	r3, r2
 800be54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	691a      	ldr	r2, [r3, #16]
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	f003 0307 	and.w	r3, r3, #7
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	fa02 f303 	lsl.w	r3, r2, r3
 800be66:	693a      	ldr	r2, [r7, #16]
 800be68:	4313      	orrs	r3, r2
 800be6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	08da      	lsrs	r2, r3, #3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	3208      	adds	r2, #8
 800be74:	6939      	ldr	r1, [r7, #16]
 800be76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800be80:	697b      	ldr	r3, [r7, #20]
 800be82:	005b      	lsls	r3, r3, #1
 800be84:	2203      	movs	r2, #3
 800be86:	fa02 f303 	lsl.w	r3, r2, r3
 800be8a:	43db      	mvns	r3, r3
 800be8c:	693a      	ldr	r2, [r7, #16]
 800be8e:	4013      	ands	r3, r2
 800be90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	f003 0203 	and.w	r2, r3, #3
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	005b      	lsls	r3, r3, #1
 800be9e:	fa02 f303 	lsl.w	r3, r2, r3
 800bea2:	693a      	ldr	r2, [r7, #16]
 800bea4:	4313      	orrs	r3, r2
 800bea6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	685b      	ldr	r3, [r3, #4]
 800beb2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f000 80a6 	beq.w	800c008 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bebc:	4b5b      	ldr	r3, [pc, #364]	@ (800c02c <HAL_GPIO_Init+0x2e4>)
 800bebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bec0:	4a5a      	ldr	r2, [pc, #360]	@ (800c02c <HAL_GPIO_Init+0x2e4>)
 800bec2:	f043 0301 	orr.w	r3, r3, #1
 800bec6:	6613      	str	r3, [r2, #96]	@ 0x60
 800bec8:	4b58      	ldr	r3, [pc, #352]	@ (800c02c <HAL_GPIO_Init+0x2e4>)
 800beca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800becc:	f003 0301 	and.w	r3, r3, #1
 800bed0:	60bb      	str	r3, [r7, #8]
 800bed2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bed4:	4a56      	ldr	r2, [pc, #344]	@ (800c030 <HAL_GPIO_Init+0x2e8>)
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	089b      	lsrs	r3, r3, #2
 800beda:	3302      	adds	r3, #2
 800bedc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	f003 0303 	and.w	r3, r3, #3
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	220f      	movs	r2, #15
 800beec:	fa02 f303 	lsl.w	r3, r2, r3
 800bef0:	43db      	mvns	r3, r3
 800bef2:	693a      	ldr	r2, [r7, #16]
 800bef4:	4013      	ands	r3, r2
 800bef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800befe:	d01f      	beq.n	800bf40 <HAL_GPIO_Init+0x1f8>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	4a4c      	ldr	r2, [pc, #304]	@ (800c034 <HAL_GPIO_Init+0x2ec>)
 800bf04:	4293      	cmp	r3, r2
 800bf06:	d019      	beq.n	800bf3c <HAL_GPIO_Init+0x1f4>
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	4a4b      	ldr	r2, [pc, #300]	@ (800c038 <HAL_GPIO_Init+0x2f0>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d013      	beq.n	800bf38 <HAL_GPIO_Init+0x1f0>
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	4a4a      	ldr	r2, [pc, #296]	@ (800c03c <HAL_GPIO_Init+0x2f4>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d00d      	beq.n	800bf34 <HAL_GPIO_Init+0x1ec>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4a49      	ldr	r2, [pc, #292]	@ (800c040 <HAL_GPIO_Init+0x2f8>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d007      	beq.n	800bf30 <HAL_GPIO_Init+0x1e8>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	4a48      	ldr	r2, [pc, #288]	@ (800c044 <HAL_GPIO_Init+0x2fc>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d101      	bne.n	800bf2c <HAL_GPIO_Init+0x1e4>
 800bf28:	2305      	movs	r3, #5
 800bf2a:	e00a      	b.n	800bf42 <HAL_GPIO_Init+0x1fa>
 800bf2c:	2306      	movs	r3, #6
 800bf2e:	e008      	b.n	800bf42 <HAL_GPIO_Init+0x1fa>
 800bf30:	2304      	movs	r3, #4
 800bf32:	e006      	b.n	800bf42 <HAL_GPIO_Init+0x1fa>
 800bf34:	2303      	movs	r3, #3
 800bf36:	e004      	b.n	800bf42 <HAL_GPIO_Init+0x1fa>
 800bf38:	2302      	movs	r3, #2
 800bf3a:	e002      	b.n	800bf42 <HAL_GPIO_Init+0x1fa>
 800bf3c:	2301      	movs	r3, #1
 800bf3e:	e000      	b.n	800bf42 <HAL_GPIO_Init+0x1fa>
 800bf40:	2300      	movs	r3, #0
 800bf42:	697a      	ldr	r2, [r7, #20]
 800bf44:	f002 0203 	and.w	r2, r2, #3
 800bf48:	0092      	lsls	r2, r2, #2
 800bf4a:	4093      	lsls	r3, r2
 800bf4c:	693a      	ldr	r2, [r7, #16]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bf52:	4937      	ldr	r1, [pc, #220]	@ (800c030 <HAL_GPIO_Init+0x2e8>)
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	089b      	lsrs	r3, r3, #2
 800bf58:	3302      	adds	r3, #2
 800bf5a:	693a      	ldr	r2, [r7, #16]
 800bf5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bf60:	4b39      	ldr	r3, [pc, #228]	@ (800c048 <HAL_GPIO_Init+0x300>)
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	43db      	mvns	r3, r3
 800bf6a:	693a      	ldr	r2, [r7, #16]
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d003      	beq.n	800bf84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800bf7c:	693a      	ldr	r2, [r7, #16]
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	4313      	orrs	r3, r2
 800bf82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bf84:	4a30      	ldr	r2, [pc, #192]	@ (800c048 <HAL_GPIO_Init+0x300>)
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800bf8a:	4b2f      	ldr	r3, [pc, #188]	@ (800c048 <HAL_GPIO_Init+0x300>)
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	43db      	mvns	r3, r3
 800bf94:	693a      	ldr	r2, [r7, #16]
 800bf96:	4013      	ands	r3, r2
 800bf98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d003      	beq.n	800bfae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800bfa6:	693a      	ldr	r2, [r7, #16]
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bfae:	4a26      	ldr	r2, [pc, #152]	@ (800c048 <HAL_GPIO_Init+0x300>)
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800bfb4:	4b24      	ldr	r3, [pc, #144]	@ (800c048 <HAL_GPIO_Init+0x300>)
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	43db      	mvns	r3, r3
 800bfbe:	693a      	ldr	r2, [r7, #16]
 800bfc0:	4013      	ands	r3, r2
 800bfc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d003      	beq.n	800bfd8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800bfd0:	693a      	ldr	r2, [r7, #16]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bfd8:	4a1b      	ldr	r2, [pc, #108]	@ (800c048 <HAL_GPIO_Init+0x300>)
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800bfde:	4b1a      	ldr	r3, [pc, #104]	@ (800c048 <HAL_GPIO_Init+0x300>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	43db      	mvns	r3, r3
 800bfe8:	693a      	ldr	r2, [r7, #16]
 800bfea:	4013      	ands	r3, r2
 800bfec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d003      	beq.n	800c002 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800bffa:	693a      	ldr	r2, [r7, #16]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	4313      	orrs	r3, r2
 800c000:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c002:	4a11      	ldr	r2, [pc, #68]	@ (800c048 <HAL_GPIO_Init+0x300>)
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	3301      	adds	r3, #1
 800c00c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	fa22 f303 	lsr.w	r3, r2, r3
 800c018:	2b00      	cmp	r3, #0
 800c01a:	f47f ae9d 	bne.w	800bd58 <HAL_GPIO_Init+0x10>
  }
}
 800c01e:	bf00      	nop
 800c020:	bf00      	nop
 800c022:	371c      	adds	r7, #28
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr
 800c02c:	40021000 	.word	0x40021000
 800c030:	40010000 	.word	0x40010000
 800c034:	48000400 	.word	0x48000400
 800c038:	48000800 	.word	0x48000800
 800c03c:	48000c00 	.word	0x48000c00
 800c040:	48001000 	.word	0x48001000
 800c044:	48001400 	.word	0x48001400
 800c048:	40010400 	.word	0x40010400

0800c04c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	460b      	mov	r3, r1
 800c056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	691a      	ldr	r2, [r3, #16]
 800c05c:	887b      	ldrh	r3, [r7, #2]
 800c05e:	4013      	ands	r3, r2
 800c060:	2b00      	cmp	r3, #0
 800c062:	d002      	beq.n	800c06a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c064:	2301      	movs	r3, #1
 800c066:	73fb      	strb	r3, [r7, #15]
 800c068:	e001      	b.n	800c06e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c06a:	2300      	movs	r3, #0
 800c06c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3714      	adds	r7, #20
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	460b      	mov	r3, r1
 800c086:	807b      	strh	r3, [r7, #2]
 800c088:	4613      	mov	r3, r2
 800c08a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c08c:	787b      	ldrb	r3, [r7, #1]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d003      	beq.n	800c09a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c092:	887a      	ldrh	r2, [r7, #2]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c098:	e002      	b.n	800c0a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c09a:	887a      	ldrh	r2, [r7, #2]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c0a0:	bf00      	nop
 800c0a2:	370c      	adds	r7, #12
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	695b      	ldr	r3, [r3, #20]
 800c0bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c0be:	887a      	ldrh	r2, [r7, #2]
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	041a      	lsls	r2, r3, #16
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	43d9      	mvns	r1, r3
 800c0ca:	887b      	ldrh	r3, [r7, #2]
 800c0cc:	400b      	ands	r3, r1
 800c0ce:	431a      	orrs	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	619a      	str	r2, [r3, #24]
}
 800c0d4:	bf00      	nop
 800c0d6:	3714      	adds	r7, #20
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800c0ea:	4b08      	ldr	r3, [pc, #32]	@ (800c10c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c0ec:	695a      	ldr	r2, [r3, #20]
 800c0ee:	88fb      	ldrh	r3, [r7, #6]
 800c0f0:	4013      	ands	r3, r2
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d006      	beq.n	800c104 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c0f6:	4a05      	ldr	r2, [pc, #20]	@ (800c10c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c0f8:	88fb      	ldrh	r3, [r7, #6]
 800c0fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c0fc:	88fb      	ldrh	r3, [r7, #6]
 800c0fe:	4618      	mov	r0, r3
 800c100:	f7fb fdb0 	bl	8007c64 <HAL_GPIO_EXTI_Callback>
  }
}
 800c104:	bf00      	nop
 800c106:	3708      	adds	r7, #8
 800c108:	46bd      	mov	sp, r7
 800c10a:	bd80      	pop	{r7, pc}
 800c10c:	40010400 	.word	0x40010400

0800c110 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c110:	b480      	push	{r7}
 800c112:	b085      	sub	sp, #20
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d141      	bne.n	800c1a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c11e:	4b4b      	ldr	r3, [pc, #300]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c12a:	d131      	bne.n	800c190 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c12c:	4b47      	ldr	r3, [pc, #284]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c12e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c132:	4a46      	ldr	r2, [pc, #280]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c138:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c13c:	4b43      	ldr	r3, [pc, #268]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c144:	4a41      	ldr	r2, [pc, #260]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c146:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c14a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c14c:	4b40      	ldr	r3, [pc, #256]	@ (800c250 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2232      	movs	r2, #50	@ 0x32
 800c152:	fb02 f303 	mul.w	r3, r2, r3
 800c156:	4a3f      	ldr	r2, [pc, #252]	@ (800c254 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c158:	fba2 2303 	umull	r2, r3, r2, r3
 800c15c:	0c9b      	lsrs	r3, r3, #18
 800c15e:	3301      	adds	r3, #1
 800c160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c162:	e002      	b.n	800c16a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	3b01      	subs	r3, #1
 800c168:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c16a:	4b38      	ldr	r3, [pc, #224]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c16c:	695b      	ldr	r3, [r3, #20]
 800c16e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c176:	d102      	bne.n	800c17e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1f2      	bne.n	800c164 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c17e:	4b33      	ldr	r3, [pc, #204]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c180:	695b      	ldr	r3, [r3, #20]
 800c182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c18a:	d158      	bne.n	800c23e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c18c:	2303      	movs	r3, #3
 800c18e:	e057      	b.n	800c240 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c190:	4b2e      	ldr	r3, [pc, #184]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c196:	4a2d      	ldr	r2, [pc, #180]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c198:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c19c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800c1a0:	e04d      	b.n	800c23e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1a8:	d141      	bne.n	800c22e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c1aa:	4b28      	ldr	r3, [pc, #160]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c1b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1b6:	d131      	bne.n	800c21c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c1b8:	4b24      	ldr	r3, [pc, #144]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1be:	4a23      	ldr	r2, [pc, #140]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c1c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c1c8:	4b20      	ldr	r3, [pc, #128]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c1d0:	4a1e      	ldr	r2, [pc, #120]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c1d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c1d8:	4b1d      	ldr	r3, [pc, #116]	@ (800c250 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2232      	movs	r2, #50	@ 0x32
 800c1de:	fb02 f303 	mul.w	r3, r2, r3
 800c1e2:	4a1c      	ldr	r2, [pc, #112]	@ (800c254 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c1e4:	fba2 2303 	umull	r2, r3, r2, r3
 800c1e8:	0c9b      	lsrs	r3, r3, #18
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c1ee:	e002      	b.n	800c1f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	3b01      	subs	r3, #1
 800c1f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c1f6:	4b15      	ldr	r3, [pc, #84]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1f8:	695b      	ldr	r3, [r3, #20]
 800c1fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c1fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c202:	d102      	bne.n	800c20a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1f2      	bne.n	800c1f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c20a:	4b10      	ldr	r3, [pc, #64]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c216:	d112      	bne.n	800c23e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c218:	2303      	movs	r3, #3
 800c21a:	e011      	b.n	800c240 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c21c:	4b0b      	ldr	r3, [pc, #44]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c21e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c222:	4a0a      	ldr	r2, [pc, #40]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c228:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800c22c:	e007      	b.n	800c23e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c22e:	4b07      	ldr	r3, [pc, #28]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c236:	4a05      	ldr	r2, [pc, #20]	@ (800c24c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c238:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c23c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	3714      	adds	r7, #20
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr
 800c24c:	40007000 	.word	0x40007000
 800c250:	20000138 	.word	0x20000138
 800c254:	431bde83 	.word	0x431bde83

0800c258 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800c258:	b480      	push	{r7}
 800c25a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800c25c:	4b05      	ldr	r3, [pc, #20]	@ (800c274 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	4a04      	ldr	r2, [pc, #16]	@ (800c274 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c262:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c266:	6093      	str	r3, [r2, #8]
}
 800c268:	bf00      	nop
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	40007000 	.word	0x40007000

0800c278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b088      	sub	sp, #32
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d101      	bne.n	800c28a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c286:	2301      	movs	r3, #1
 800c288:	e2fe      	b.n	800c888 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f003 0301 	and.w	r3, r3, #1
 800c292:	2b00      	cmp	r3, #0
 800c294:	d075      	beq.n	800c382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c296:	4b97      	ldr	r3, [pc, #604]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	f003 030c 	and.w	r3, r3, #12
 800c29e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c2a0:	4b94      	ldr	r3, [pc, #592]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	f003 0303 	and.w	r3, r3, #3
 800c2a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c2aa:	69bb      	ldr	r3, [r7, #24]
 800c2ac:	2b0c      	cmp	r3, #12
 800c2ae:	d102      	bne.n	800c2b6 <HAL_RCC_OscConfig+0x3e>
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	2b03      	cmp	r3, #3
 800c2b4:	d002      	beq.n	800c2bc <HAL_RCC_OscConfig+0x44>
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	2b08      	cmp	r3, #8
 800c2ba:	d10b      	bne.n	800c2d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c2bc:	4b8d      	ldr	r3, [pc, #564]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d05b      	beq.n	800c380 <HAL_RCC_OscConfig+0x108>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d157      	bne.n	800c380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e2d9      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2dc:	d106      	bne.n	800c2ec <HAL_RCC_OscConfig+0x74>
 800c2de:	4b85      	ldr	r3, [pc, #532]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a84      	ldr	r2, [pc, #528]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c2e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c2e8:	6013      	str	r3, [r2, #0]
 800c2ea:	e01d      	b.n	800c328 <HAL_RCC_OscConfig+0xb0>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	685b      	ldr	r3, [r3, #4]
 800c2f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c2f4:	d10c      	bne.n	800c310 <HAL_RCC_OscConfig+0x98>
 800c2f6:	4b7f      	ldr	r3, [pc, #508]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4a7e      	ldr	r2, [pc, #504]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c2fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c300:	6013      	str	r3, [r2, #0]
 800c302:	4b7c      	ldr	r3, [pc, #496]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a7b      	ldr	r2, [pc, #492]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c30c:	6013      	str	r3, [r2, #0]
 800c30e:	e00b      	b.n	800c328 <HAL_RCC_OscConfig+0xb0>
 800c310:	4b78      	ldr	r3, [pc, #480]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a77      	ldr	r2, [pc, #476]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c31a:	6013      	str	r3, [r2, #0]
 800c31c:	4b75      	ldr	r3, [pc, #468]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a74      	ldr	r2, [pc, #464]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c322:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d013      	beq.n	800c358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c330:	f7fd fc44 	bl	8009bbc <HAL_GetTick>
 800c334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c336:	e008      	b.n	800c34a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c338:	f7fd fc40 	bl	8009bbc <HAL_GetTick>
 800c33c:	4602      	mov	r2, r0
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	1ad3      	subs	r3, r2, r3
 800c342:	2b64      	cmp	r3, #100	@ 0x64
 800c344:	d901      	bls.n	800c34a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c346:	2303      	movs	r3, #3
 800c348:	e29e      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c34a:	4b6a      	ldr	r3, [pc, #424]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c352:	2b00      	cmp	r3, #0
 800c354:	d0f0      	beq.n	800c338 <HAL_RCC_OscConfig+0xc0>
 800c356:	e014      	b.n	800c382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c358:	f7fd fc30 	bl	8009bbc <HAL_GetTick>
 800c35c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c35e:	e008      	b.n	800c372 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c360:	f7fd fc2c 	bl	8009bbc <HAL_GetTick>
 800c364:	4602      	mov	r2, r0
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	1ad3      	subs	r3, r2, r3
 800c36a:	2b64      	cmp	r3, #100	@ 0x64
 800c36c:	d901      	bls.n	800c372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c36e:	2303      	movs	r3, #3
 800c370:	e28a      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c372:	4b60      	ldr	r3, [pc, #384]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d1f0      	bne.n	800c360 <HAL_RCC_OscConfig+0xe8>
 800c37e:	e000      	b.n	800c382 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f003 0302 	and.w	r3, r3, #2
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d075      	beq.n	800c47a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c38e:	4b59      	ldr	r3, [pc, #356]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	f003 030c 	and.w	r3, r3, #12
 800c396:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c398:	4b56      	ldr	r3, [pc, #344]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c39a:	68db      	ldr	r3, [r3, #12]
 800c39c:	f003 0303 	and.w	r3, r3, #3
 800c3a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	2b0c      	cmp	r3, #12
 800c3a6:	d102      	bne.n	800c3ae <HAL_RCC_OscConfig+0x136>
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	2b02      	cmp	r3, #2
 800c3ac:	d002      	beq.n	800c3b4 <HAL_RCC_OscConfig+0x13c>
 800c3ae:	69bb      	ldr	r3, [r7, #24]
 800c3b0:	2b04      	cmp	r3, #4
 800c3b2:	d11f      	bne.n	800c3f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c3b4:	4b4f      	ldr	r3, [pc, #316]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d005      	beq.n	800c3cc <HAL_RCC_OscConfig+0x154>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d101      	bne.n	800c3cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	e25d      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3cc:	4b49      	ldr	r3, [pc, #292]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	061b      	lsls	r3, r3, #24
 800c3da:	4946      	ldr	r1, [pc, #280]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c3e0:	4b45      	ldr	r3, [pc, #276]	@ (800c4f8 <HAL_RCC_OscConfig+0x280>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7fd fb9d 	bl	8009b24 <HAL_InitTick>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d043      	beq.n	800c478 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	e249      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	68db      	ldr	r3, [r3, #12]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d023      	beq.n	800c444 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c3fc:	4b3d      	ldr	r3, [pc, #244]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a3c      	ldr	r2, [pc, #240]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c408:	f7fd fbd8 	bl	8009bbc <HAL_GetTick>
 800c40c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c40e:	e008      	b.n	800c422 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c410:	f7fd fbd4 	bl	8009bbc <HAL_GetTick>
 800c414:	4602      	mov	r2, r0
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	1ad3      	subs	r3, r2, r3
 800c41a:	2b02      	cmp	r3, #2
 800c41c:	d901      	bls.n	800c422 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c41e:	2303      	movs	r3, #3
 800c420:	e232      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c422:	4b34      	ldr	r3, [pc, #208]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d0f0      	beq.n	800c410 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c42e:	4b31      	ldr	r3, [pc, #196]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	691b      	ldr	r3, [r3, #16]
 800c43a:	061b      	lsls	r3, r3, #24
 800c43c:	492d      	ldr	r1, [pc, #180]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c43e:	4313      	orrs	r3, r2
 800c440:	604b      	str	r3, [r1, #4]
 800c442:	e01a      	b.n	800c47a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c444:	4b2b      	ldr	r3, [pc, #172]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a2a      	ldr	r2, [pc, #168]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c44a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c44e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c450:	f7fd fbb4 	bl	8009bbc <HAL_GetTick>
 800c454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c456:	e008      	b.n	800c46a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c458:	f7fd fbb0 	bl	8009bbc <HAL_GetTick>
 800c45c:	4602      	mov	r2, r0
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	1ad3      	subs	r3, r2, r3
 800c462:	2b02      	cmp	r3, #2
 800c464:	d901      	bls.n	800c46a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c466:	2303      	movs	r3, #3
 800c468:	e20e      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c46a:	4b22      	ldr	r3, [pc, #136]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1f0      	bne.n	800c458 <HAL_RCC_OscConfig+0x1e0>
 800c476:	e000      	b.n	800c47a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c478:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	f003 0308 	and.w	r3, r3, #8
 800c482:	2b00      	cmp	r3, #0
 800c484:	d041      	beq.n	800c50a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	695b      	ldr	r3, [r3, #20]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d01c      	beq.n	800c4c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c48e:	4b19      	ldr	r3, [pc, #100]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c494:	4a17      	ldr	r2, [pc, #92]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c496:	f043 0301 	orr.w	r3, r3, #1
 800c49a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c49e:	f7fd fb8d 	bl	8009bbc <HAL_GetTick>
 800c4a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c4a4:	e008      	b.n	800c4b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c4a6:	f7fd fb89 	bl	8009bbc <HAL_GetTick>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	1ad3      	subs	r3, r2, r3
 800c4b0:	2b02      	cmp	r3, #2
 800c4b2:	d901      	bls.n	800c4b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c4b4:	2303      	movs	r3, #3
 800c4b6:	e1e7      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c4b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c4ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4be:	f003 0302 	and.w	r3, r3, #2
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d0ef      	beq.n	800c4a6 <HAL_RCC_OscConfig+0x22e>
 800c4c6:	e020      	b.n	800c50a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c4c8:	4b0a      	ldr	r3, [pc, #40]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c4ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4ce:	4a09      	ldr	r2, [pc, #36]	@ (800c4f4 <HAL_RCC_OscConfig+0x27c>)
 800c4d0:	f023 0301 	bic.w	r3, r3, #1
 800c4d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4d8:	f7fd fb70 	bl	8009bbc <HAL_GetTick>
 800c4dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c4de:	e00d      	b.n	800c4fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c4e0:	f7fd fb6c 	bl	8009bbc <HAL_GetTick>
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	1ad3      	subs	r3, r2, r3
 800c4ea:	2b02      	cmp	r3, #2
 800c4ec:	d906      	bls.n	800c4fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c4ee:	2303      	movs	r3, #3
 800c4f0:	e1ca      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
 800c4f2:	bf00      	nop
 800c4f4:	40021000 	.word	0x40021000
 800c4f8:	2000013c 	.word	0x2000013c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c4fc:	4b8c      	ldr	r3, [pc, #560]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c4fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c502:	f003 0302 	and.w	r3, r3, #2
 800c506:	2b00      	cmp	r3, #0
 800c508:	d1ea      	bne.n	800c4e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f003 0304 	and.w	r3, r3, #4
 800c512:	2b00      	cmp	r3, #0
 800c514:	f000 80a6 	beq.w	800c664 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c518:	2300      	movs	r3, #0
 800c51a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c51c:	4b84      	ldr	r3, [pc, #528]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c51e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c524:	2b00      	cmp	r3, #0
 800c526:	d101      	bne.n	800c52c <HAL_RCC_OscConfig+0x2b4>
 800c528:	2301      	movs	r3, #1
 800c52a:	e000      	b.n	800c52e <HAL_RCC_OscConfig+0x2b6>
 800c52c:	2300      	movs	r3, #0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00d      	beq.n	800c54e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c532:	4b7f      	ldr	r3, [pc, #508]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c536:	4a7e      	ldr	r2, [pc, #504]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c53c:	6593      	str	r3, [r2, #88]	@ 0x58
 800c53e:	4b7c      	ldr	r3, [pc, #496]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c546:	60fb      	str	r3, [r7, #12]
 800c548:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c54a:	2301      	movs	r3, #1
 800c54c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c54e:	4b79      	ldr	r3, [pc, #484]	@ (800c734 <HAL_RCC_OscConfig+0x4bc>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c556:	2b00      	cmp	r3, #0
 800c558:	d118      	bne.n	800c58c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c55a:	4b76      	ldr	r3, [pc, #472]	@ (800c734 <HAL_RCC_OscConfig+0x4bc>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4a75      	ldr	r2, [pc, #468]	@ (800c734 <HAL_RCC_OscConfig+0x4bc>)
 800c560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c566:	f7fd fb29 	bl	8009bbc <HAL_GetTick>
 800c56a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c56c:	e008      	b.n	800c580 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c56e:	f7fd fb25 	bl	8009bbc <HAL_GetTick>
 800c572:	4602      	mov	r2, r0
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	2b02      	cmp	r3, #2
 800c57a:	d901      	bls.n	800c580 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800c57c:	2303      	movs	r3, #3
 800c57e:	e183      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c580:	4b6c      	ldr	r3, [pc, #432]	@ (800c734 <HAL_RCC_OscConfig+0x4bc>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d0f0      	beq.n	800c56e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	2b01      	cmp	r3, #1
 800c592:	d108      	bne.n	800c5a6 <HAL_RCC_OscConfig+0x32e>
 800c594:	4b66      	ldr	r3, [pc, #408]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c59a:	4a65      	ldr	r2, [pc, #404]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c59c:	f043 0301 	orr.w	r3, r3, #1
 800c5a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c5a4:	e024      	b.n	800c5f0 <HAL_RCC_OscConfig+0x378>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	2b05      	cmp	r3, #5
 800c5ac:	d110      	bne.n	800c5d0 <HAL_RCC_OscConfig+0x358>
 800c5ae:	4b60      	ldr	r3, [pc, #384]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5b4:	4a5e      	ldr	r2, [pc, #376]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c5b6:	f043 0304 	orr.w	r3, r3, #4
 800c5ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c5be:	4b5c      	ldr	r3, [pc, #368]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c5c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5c4:	4a5a      	ldr	r2, [pc, #360]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c5c6:	f043 0301 	orr.w	r3, r3, #1
 800c5ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c5ce:	e00f      	b.n	800c5f0 <HAL_RCC_OscConfig+0x378>
 800c5d0:	4b57      	ldr	r3, [pc, #348]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c5d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5d6:	4a56      	ldr	r2, [pc, #344]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c5d8:	f023 0301 	bic.w	r3, r3, #1
 800c5dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c5e0:	4b53      	ldr	r3, [pc, #332]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c5e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5e6:	4a52      	ldr	r2, [pc, #328]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c5e8:	f023 0304 	bic.w	r3, r3, #4
 800c5ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d016      	beq.n	800c626 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5f8:	f7fd fae0 	bl	8009bbc <HAL_GetTick>
 800c5fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c5fe:	e00a      	b.n	800c616 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c600:	f7fd fadc 	bl	8009bbc <HAL_GetTick>
 800c604:	4602      	mov	r2, r0
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	1ad3      	subs	r3, r2, r3
 800c60a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c60e:	4293      	cmp	r3, r2
 800c610:	d901      	bls.n	800c616 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800c612:	2303      	movs	r3, #3
 800c614:	e138      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c616:	4b46      	ldr	r3, [pc, #280]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c61c:	f003 0302 	and.w	r3, r3, #2
 800c620:	2b00      	cmp	r3, #0
 800c622:	d0ed      	beq.n	800c600 <HAL_RCC_OscConfig+0x388>
 800c624:	e015      	b.n	800c652 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c626:	f7fd fac9 	bl	8009bbc <HAL_GetTick>
 800c62a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c62c:	e00a      	b.n	800c644 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c62e:	f7fd fac5 	bl	8009bbc <HAL_GetTick>
 800c632:	4602      	mov	r2, r0
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	1ad3      	subs	r3, r2, r3
 800c638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d901      	bls.n	800c644 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800c640:	2303      	movs	r3, #3
 800c642:	e121      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c644:	4b3a      	ldr	r3, [pc, #232]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c64a:	f003 0302 	and.w	r3, r3, #2
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d1ed      	bne.n	800c62e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c652:	7ffb      	ldrb	r3, [r7, #31]
 800c654:	2b01      	cmp	r3, #1
 800c656:	d105      	bne.n	800c664 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c658:	4b35      	ldr	r3, [pc, #212]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c65a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c65c:	4a34      	ldr	r2, [pc, #208]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c65e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c662:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f003 0320 	and.w	r3, r3, #32
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d03c      	beq.n	800c6ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	699b      	ldr	r3, [r3, #24]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d01c      	beq.n	800c6b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c678:	4b2d      	ldr	r3, [pc, #180]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c67a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c67e:	4a2c      	ldr	r2, [pc, #176]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c680:	f043 0301 	orr.w	r3, r3, #1
 800c684:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c688:	f7fd fa98 	bl	8009bbc <HAL_GetTick>
 800c68c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c68e:	e008      	b.n	800c6a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c690:	f7fd fa94 	bl	8009bbc <HAL_GetTick>
 800c694:	4602      	mov	r2, r0
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	2b02      	cmp	r3, #2
 800c69c:	d901      	bls.n	800c6a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800c69e:	2303      	movs	r3, #3
 800c6a0:	e0f2      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c6a2:	4b23      	ldr	r3, [pc, #140]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c6a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c6a8:	f003 0302 	and.w	r3, r3, #2
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d0ef      	beq.n	800c690 <HAL_RCC_OscConfig+0x418>
 800c6b0:	e01b      	b.n	800c6ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c6b2:	4b1f      	ldr	r3, [pc, #124]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c6b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c6b8:	4a1d      	ldr	r2, [pc, #116]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c6ba:	f023 0301 	bic.w	r3, r3, #1
 800c6be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6c2:	f7fd fa7b 	bl	8009bbc <HAL_GetTick>
 800c6c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c6c8:	e008      	b.n	800c6dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c6ca:	f7fd fa77 	bl	8009bbc <HAL_GetTick>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	d901      	bls.n	800c6dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800c6d8:	2303      	movs	r3, #3
 800c6da:	e0d5      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c6dc:	4b14      	ldr	r3, [pc, #80]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c6de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c6e2:	f003 0302 	and.w	r3, r3, #2
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d1ef      	bne.n	800c6ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	69db      	ldr	r3, [r3, #28]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	f000 80c9 	beq.w	800c886 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c6f4:	4b0e      	ldr	r3, [pc, #56]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	f003 030c 	and.w	r3, r3, #12
 800c6fc:	2b0c      	cmp	r3, #12
 800c6fe:	f000 8083 	beq.w	800c808 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	69db      	ldr	r3, [r3, #28]
 800c706:	2b02      	cmp	r3, #2
 800c708:	d15e      	bne.n	800c7c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c70a:	4b09      	ldr	r3, [pc, #36]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	4a08      	ldr	r2, [pc, #32]	@ (800c730 <HAL_RCC_OscConfig+0x4b8>)
 800c710:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c716:	f7fd fa51 	bl	8009bbc <HAL_GetTick>
 800c71a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c71c:	e00c      	b.n	800c738 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c71e:	f7fd fa4d 	bl	8009bbc <HAL_GetTick>
 800c722:	4602      	mov	r2, r0
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	1ad3      	subs	r3, r2, r3
 800c728:	2b02      	cmp	r3, #2
 800c72a:	d905      	bls.n	800c738 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800c72c:	2303      	movs	r3, #3
 800c72e:	e0ab      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
 800c730:	40021000 	.word	0x40021000
 800c734:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c738:	4b55      	ldr	r3, [pc, #340]	@ (800c890 <HAL_RCC_OscConfig+0x618>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c740:	2b00      	cmp	r3, #0
 800c742:	d1ec      	bne.n	800c71e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c744:	4b52      	ldr	r3, [pc, #328]	@ (800c890 <HAL_RCC_OscConfig+0x618>)
 800c746:	68da      	ldr	r2, [r3, #12]
 800c748:	4b52      	ldr	r3, [pc, #328]	@ (800c894 <HAL_RCC_OscConfig+0x61c>)
 800c74a:	4013      	ands	r3, r2
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	6a11      	ldr	r1, [r2, #32]
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c754:	3a01      	subs	r2, #1
 800c756:	0112      	lsls	r2, r2, #4
 800c758:	4311      	orrs	r1, r2
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800c75e:	0212      	lsls	r2, r2, #8
 800c760:	4311      	orrs	r1, r2
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c766:	0852      	lsrs	r2, r2, #1
 800c768:	3a01      	subs	r2, #1
 800c76a:	0552      	lsls	r2, r2, #21
 800c76c:	4311      	orrs	r1, r2
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c772:	0852      	lsrs	r2, r2, #1
 800c774:	3a01      	subs	r2, #1
 800c776:	0652      	lsls	r2, r2, #25
 800c778:	4311      	orrs	r1, r2
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c77e:	06d2      	lsls	r2, r2, #27
 800c780:	430a      	orrs	r2, r1
 800c782:	4943      	ldr	r1, [pc, #268]	@ (800c890 <HAL_RCC_OscConfig+0x618>)
 800c784:	4313      	orrs	r3, r2
 800c786:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c788:	4b41      	ldr	r3, [pc, #260]	@ (800c890 <HAL_RCC_OscConfig+0x618>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	4a40      	ldr	r2, [pc, #256]	@ (800c890 <HAL_RCC_OscConfig+0x618>)
 800c78e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c792:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c794:	4b3e      	ldr	r3, [pc, #248]	@ (800c890 <HAL_RCC_OscConfig+0x618>)
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	4a3d      	ldr	r2, [pc, #244]	@ (800c890 <HAL_RCC_OscConfig+0x618>)
 800c79a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c79e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7a0:	f7fd fa0c 	bl	8009bbc <HAL_GetTick>
 800c7a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7a6:	e008      	b.n	800c7ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7a8:	f7fd fa08 	bl	8009bbc <HAL_GetTick>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	1ad3      	subs	r3, r2, r3
 800c7b2:	2b02      	cmp	r3, #2
 800c7b4:	d901      	bls.n	800c7ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800c7b6:	2303      	movs	r3, #3
 800c7b8:	e066      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c7ba:	4b35      	ldr	r3, [pc, #212]	@ (800c890 <HAL_RCC_OscConfig+0x618>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d0f0      	beq.n	800c7a8 <HAL_RCC_OscConfig+0x530>
 800c7c6:	e05e      	b.n	800c886 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7c8:	4b31      	ldr	r3, [pc, #196]	@ (800c890 <HAL_RCC_OscConfig+0x618>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a30      	ldr	r2, [pc, #192]	@ (800c890 <HAL_RCC_OscConfig+0x618>)
 800c7ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c7d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7d4:	f7fd f9f2 	bl	8009bbc <HAL_GetTick>
 800c7d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7da:	e008      	b.n	800c7ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7dc:	f7fd f9ee 	bl	8009bbc <HAL_GetTick>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	693b      	ldr	r3, [r7, #16]
 800c7e4:	1ad3      	subs	r3, r2, r3
 800c7e6:	2b02      	cmp	r3, #2
 800c7e8:	d901      	bls.n	800c7ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800c7ea:	2303      	movs	r3, #3
 800c7ec:	e04c      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7ee:	4b28      	ldr	r3, [pc, #160]	@ (800c890 <HAL_RCC_OscConfig+0x618>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d1f0      	bne.n	800c7dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800c7fa:	4b25      	ldr	r3, [pc, #148]	@ (800c890 <HAL_RCC_OscConfig+0x618>)
 800c7fc:	68da      	ldr	r2, [r3, #12]
 800c7fe:	4924      	ldr	r1, [pc, #144]	@ (800c890 <HAL_RCC_OscConfig+0x618>)
 800c800:	4b25      	ldr	r3, [pc, #148]	@ (800c898 <HAL_RCC_OscConfig+0x620>)
 800c802:	4013      	ands	r3, r2
 800c804:	60cb      	str	r3, [r1, #12]
 800c806:	e03e      	b.n	800c886 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	69db      	ldr	r3, [r3, #28]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d101      	bne.n	800c814 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800c810:	2301      	movs	r3, #1
 800c812:	e039      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800c814:	4b1e      	ldr	r3, [pc, #120]	@ (800c890 <HAL_RCC_OscConfig+0x618>)
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	f003 0203 	and.w	r2, r3, #3
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6a1b      	ldr	r3, [r3, #32]
 800c824:	429a      	cmp	r2, r3
 800c826:	d12c      	bne.n	800c882 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c832:	3b01      	subs	r3, #1
 800c834:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c836:	429a      	cmp	r2, r3
 800c838:	d123      	bne.n	800c882 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c844:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c846:	429a      	cmp	r2, r3
 800c848:	d11b      	bne.n	800c882 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c854:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c856:	429a      	cmp	r2, r3
 800c858:	d113      	bne.n	800c882 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c864:	085b      	lsrs	r3, r3, #1
 800c866:	3b01      	subs	r3, #1
 800c868:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d109      	bne.n	800c882 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c878:	085b      	lsrs	r3, r3, #1
 800c87a:	3b01      	subs	r3, #1
 800c87c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c87e:	429a      	cmp	r2, r3
 800c880:	d001      	beq.n	800c886 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800c882:	2301      	movs	r3, #1
 800c884:	e000      	b.n	800c888 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800c886:	2300      	movs	r3, #0
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3720      	adds	r7, #32
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	40021000 	.word	0x40021000
 800c894:	019f800c 	.word	0x019f800c
 800c898:	feeefffc 	.word	0xfeeefffc

0800c89c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b086      	sub	sp, #24
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d101      	bne.n	800c8b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e11e      	b.n	800caf2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c8b4:	4b91      	ldr	r3, [pc, #580]	@ (800cafc <HAL_RCC_ClockConfig+0x260>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f003 030f 	and.w	r3, r3, #15
 800c8bc:	683a      	ldr	r2, [r7, #0]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d910      	bls.n	800c8e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c8c2:	4b8e      	ldr	r3, [pc, #568]	@ (800cafc <HAL_RCC_ClockConfig+0x260>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f023 020f 	bic.w	r2, r3, #15
 800c8ca:	498c      	ldr	r1, [pc, #560]	@ (800cafc <HAL_RCC_ClockConfig+0x260>)
 800c8cc:	683b      	ldr	r3, [r7, #0]
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c8d2:	4b8a      	ldr	r3, [pc, #552]	@ (800cafc <HAL_RCC_ClockConfig+0x260>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f003 030f 	and.w	r3, r3, #15
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d001      	beq.n	800c8e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e106      	b.n	800caf2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f003 0301 	and.w	r3, r3, #1
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d073      	beq.n	800c9d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	2b03      	cmp	r3, #3
 800c8f6:	d129      	bne.n	800c94c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c8f8:	4b81      	ldr	r3, [pc, #516]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c900:	2b00      	cmp	r3, #0
 800c902:	d101      	bne.n	800c908 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800c904:	2301      	movs	r3, #1
 800c906:	e0f4      	b.n	800caf2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800c908:	f000 f99e 	bl	800cc48 <RCC_GetSysClockFreqFromPLLSource>
 800c90c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	4a7c      	ldr	r2, [pc, #496]	@ (800cb04 <HAL_RCC_ClockConfig+0x268>)
 800c912:	4293      	cmp	r3, r2
 800c914:	d93f      	bls.n	800c996 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c916:	4b7a      	ldr	r3, [pc, #488]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d009      	beq.n	800c936 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d033      	beq.n	800c996 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c932:	2b00      	cmp	r3, #0
 800c934:	d12f      	bne.n	800c996 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c936:	4b72      	ldr	r3, [pc, #456]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c93e:	4a70      	ldr	r2, [pc, #448]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800c940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c944:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800c946:	2380      	movs	r3, #128	@ 0x80
 800c948:	617b      	str	r3, [r7, #20]
 800c94a:	e024      	b.n	800c996 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	685b      	ldr	r3, [r3, #4]
 800c950:	2b02      	cmp	r3, #2
 800c952:	d107      	bne.n	800c964 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c954:	4b6a      	ldr	r3, [pc, #424]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d109      	bne.n	800c974 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c960:	2301      	movs	r3, #1
 800c962:	e0c6      	b.n	800caf2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c964:	4b66      	ldr	r3, [pc, #408]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d101      	bne.n	800c974 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c970:	2301      	movs	r3, #1
 800c972:	e0be      	b.n	800caf2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800c974:	f000 f8ce 	bl	800cb14 <HAL_RCC_GetSysClockFreq>
 800c978:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	4a61      	ldr	r2, [pc, #388]	@ (800cb04 <HAL_RCC_ClockConfig+0x268>)
 800c97e:	4293      	cmp	r3, r2
 800c980:	d909      	bls.n	800c996 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c982:	4b5f      	ldr	r3, [pc, #380]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c98a:	4a5d      	ldr	r2, [pc, #372]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800c98c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c990:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800c992:	2380      	movs	r3, #128	@ 0x80
 800c994:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c996:	4b5a      	ldr	r3, [pc, #360]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	f023 0203 	bic.w	r2, r3, #3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	4957      	ldr	r1, [pc, #348]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800c9a4:	4313      	orrs	r3, r2
 800c9a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9a8:	f7fd f908 	bl	8009bbc <HAL_GetTick>
 800c9ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9ae:	e00a      	b.n	800c9c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c9b0:	f7fd f904 	bl	8009bbc <HAL_GetTick>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	1ad3      	subs	r3, r2, r3
 800c9ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d901      	bls.n	800c9c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800c9c2:	2303      	movs	r3, #3
 800c9c4:	e095      	b.n	800caf2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c9c6:	4b4e      	ldr	r3, [pc, #312]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	f003 020c 	and.w	r2, r3, #12
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	429a      	cmp	r2, r3
 800c9d6:	d1eb      	bne.n	800c9b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f003 0302 	and.w	r3, r3, #2
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d023      	beq.n	800ca2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f003 0304 	and.w	r3, r3, #4
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d005      	beq.n	800c9fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c9f0:	4b43      	ldr	r3, [pc, #268]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	4a42      	ldr	r2, [pc, #264]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800c9f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800c9fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f003 0308 	and.w	r3, r3, #8
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d007      	beq.n	800ca18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ca08:	4b3d      	ldr	r3, [pc, #244]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ca10:	4a3b      	ldr	r2, [pc, #236]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800ca12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ca16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ca18:	4b39      	ldr	r3, [pc, #228]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	689b      	ldr	r3, [r3, #8]
 800ca24:	4936      	ldr	r1, [pc, #216]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800ca26:	4313      	orrs	r3, r2
 800ca28:	608b      	str	r3, [r1, #8]
 800ca2a:	e008      	b.n	800ca3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	2b80      	cmp	r3, #128	@ 0x80
 800ca30:	d105      	bne.n	800ca3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800ca32:	4b33      	ldr	r3, [pc, #204]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	4a32      	ldr	r2, [pc, #200]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800ca38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ca3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ca3e:	4b2f      	ldr	r3, [pc, #188]	@ (800cafc <HAL_RCC_ClockConfig+0x260>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f003 030f 	and.w	r3, r3, #15
 800ca46:	683a      	ldr	r2, [r7, #0]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d21d      	bcs.n	800ca88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca4c:	4b2b      	ldr	r3, [pc, #172]	@ (800cafc <HAL_RCC_ClockConfig+0x260>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f023 020f 	bic.w	r2, r3, #15
 800ca54:	4929      	ldr	r1, [pc, #164]	@ (800cafc <HAL_RCC_ClockConfig+0x260>)
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ca5c:	f7fd f8ae 	bl	8009bbc <HAL_GetTick>
 800ca60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca62:	e00a      	b.n	800ca7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca64:	f7fd f8aa 	bl	8009bbc <HAL_GetTick>
 800ca68:	4602      	mov	r2, r0
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	1ad3      	subs	r3, r2, r3
 800ca6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d901      	bls.n	800ca7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ca76:	2303      	movs	r3, #3
 800ca78:	e03b      	b.n	800caf2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca7a:	4b20      	ldr	r3, [pc, #128]	@ (800cafc <HAL_RCC_ClockConfig+0x260>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f003 030f 	and.w	r3, r3, #15
 800ca82:	683a      	ldr	r2, [r7, #0]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d1ed      	bne.n	800ca64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f003 0304 	and.w	r3, r3, #4
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d008      	beq.n	800caa6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ca94:	4b1a      	ldr	r3, [pc, #104]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800ca96:	689b      	ldr	r3, [r3, #8]
 800ca98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	4917      	ldr	r1, [pc, #92]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800caa2:	4313      	orrs	r3, r2
 800caa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f003 0308 	and.w	r3, r3, #8
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d009      	beq.n	800cac6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cab2:	4b13      	ldr	r3, [pc, #76]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	691b      	ldr	r3, [r3, #16]
 800cabe:	00db      	lsls	r3, r3, #3
 800cac0:	490f      	ldr	r1, [pc, #60]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800cac2:	4313      	orrs	r3, r2
 800cac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cac6:	f000 f825 	bl	800cb14 <HAL_RCC_GetSysClockFreq>
 800caca:	4602      	mov	r2, r0
 800cacc:	4b0c      	ldr	r3, [pc, #48]	@ (800cb00 <HAL_RCC_ClockConfig+0x264>)
 800cace:	689b      	ldr	r3, [r3, #8]
 800cad0:	091b      	lsrs	r3, r3, #4
 800cad2:	f003 030f 	and.w	r3, r3, #15
 800cad6:	490c      	ldr	r1, [pc, #48]	@ (800cb08 <HAL_RCC_ClockConfig+0x26c>)
 800cad8:	5ccb      	ldrb	r3, [r1, r3]
 800cada:	f003 031f 	and.w	r3, r3, #31
 800cade:	fa22 f303 	lsr.w	r3, r2, r3
 800cae2:	4a0a      	ldr	r2, [pc, #40]	@ (800cb0c <HAL_RCC_ClockConfig+0x270>)
 800cae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800cae6:	4b0a      	ldr	r3, [pc, #40]	@ (800cb10 <HAL_RCC_ClockConfig+0x274>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4618      	mov	r0, r3
 800caec:	f7fd f81a 	bl	8009b24 <HAL_InitTick>
 800caf0:	4603      	mov	r3, r0
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3718      	adds	r7, #24
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	40022000 	.word	0x40022000
 800cb00:	40021000 	.word	0x40021000
 800cb04:	04c4b400 	.word	0x04c4b400
 800cb08:	08013a38 	.word	0x08013a38
 800cb0c:	20000138 	.word	0x20000138
 800cb10:	2000013c 	.word	0x2000013c

0800cb14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b087      	sub	sp, #28
 800cb18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800cb1a:	4b2c      	ldr	r3, [pc, #176]	@ (800cbcc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	f003 030c 	and.w	r3, r3, #12
 800cb22:	2b04      	cmp	r3, #4
 800cb24:	d102      	bne.n	800cb2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cb26:	4b2a      	ldr	r3, [pc, #168]	@ (800cbd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cb28:	613b      	str	r3, [r7, #16]
 800cb2a:	e047      	b.n	800cbbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800cb2c:	4b27      	ldr	r3, [pc, #156]	@ (800cbcc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	f003 030c 	and.w	r3, r3, #12
 800cb34:	2b08      	cmp	r3, #8
 800cb36:	d102      	bne.n	800cb3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cb38:	4b26      	ldr	r3, [pc, #152]	@ (800cbd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cb3a:	613b      	str	r3, [r7, #16]
 800cb3c:	e03e      	b.n	800cbbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800cb3e:	4b23      	ldr	r3, [pc, #140]	@ (800cbcc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb40:	689b      	ldr	r3, [r3, #8]
 800cb42:	f003 030c 	and.w	r3, r3, #12
 800cb46:	2b0c      	cmp	r3, #12
 800cb48:	d136      	bne.n	800cbb8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cb4a:	4b20      	ldr	r3, [pc, #128]	@ (800cbcc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	f003 0303 	and.w	r3, r3, #3
 800cb52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cb54:	4b1d      	ldr	r3, [pc, #116]	@ (800cbcc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	091b      	lsrs	r3, r3, #4
 800cb5a:	f003 030f 	and.w	r3, r3, #15
 800cb5e:	3301      	adds	r3, #1
 800cb60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2b03      	cmp	r3, #3
 800cb66:	d10c      	bne.n	800cb82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cb68:	4a1a      	ldr	r2, [pc, #104]	@ (800cbd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb70:	4a16      	ldr	r2, [pc, #88]	@ (800cbcc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb72:	68d2      	ldr	r2, [r2, #12]
 800cb74:	0a12      	lsrs	r2, r2, #8
 800cb76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800cb7a:	fb02 f303 	mul.w	r3, r2, r3
 800cb7e:	617b      	str	r3, [r7, #20]
      break;
 800cb80:	e00c      	b.n	800cb9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cb82:	4a13      	ldr	r2, [pc, #76]	@ (800cbd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cb84:	68bb      	ldr	r3, [r7, #8]
 800cb86:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb8a:	4a10      	ldr	r2, [pc, #64]	@ (800cbcc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb8c:	68d2      	ldr	r2, [r2, #12]
 800cb8e:	0a12      	lsrs	r2, r2, #8
 800cb90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800cb94:	fb02 f303 	mul.w	r3, r2, r3
 800cb98:	617b      	str	r3, [r7, #20]
      break;
 800cb9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cb9c:	4b0b      	ldr	r3, [pc, #44]	@ (800cbcc <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	0e5b      	lsrs	r3, r3, #25
 800cba2:	f003 0303 	and.w	r3, r3, #3
 800cba6:	3301      	adds	r3, #1
 800cba8:	005b      	lsls	r3, r3, #1
 800cbaa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800cbac:	697a      	ldr	r2, [r7, #20]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbb4:	613b      	str	r3, [r7, #16]
 800cbb6:	e001      	b.n	800cbbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cbbc:	693b      	ldr	r3, [r7, #16]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	371c      	adds	r7, #28
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
 800cbca:	bf00      	nop
 800cbcc:	40021000 	.word	0x40021000
 800cbd0:	00f42400 	.word	0x00f42400
 800cbd4:	016e3600 	.word	0x016e3600

0800cbd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cbdc:	4b03      	ldr	r3, [pc, #12]	@ (800cbec <HAL_RCC_GetHCLKFreq+0x14>)
 800cbde:	681b      	ldr	r3, [r3, #0]
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop
 800cbec:	20000138 	.word	0x20000138

0800cbf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cbf4:	f7ff fff0 	bl	800cbd8 <HAL_RCC_GetHCLKFreq>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	4b06      	ldr	r3, [pc, #24]	@ (800cc14 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cbfc:	689b      	ldr	r3, [r3, #8]
 800cbfe:	0a1b      	lsrs	r3, r3, #8
 800cc00:	f003 0307 	and.w	r3, r3, #7
 800cc04:	4904      	ldr	r1, [pc, #16]	@ (800cc18 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cc06:	5ccb      	ldrb	r3, [r1, r3]
 800cc08:	f003 031f 	and.w	r3, r3, #31
 800cc0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	40021000 	.word	0x40021000
 800cc18:	08013a48 	.word	0x08013a48

0800cc1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cc20:	f7ff ffda 	bl	800cbd8 <HAL_RCC_GetHCLKFreq>
 800cc24:	4602      	mov	r2, r0
 800cc26:	4b06      	ldr	r3, [pc, #24]	@ (800cc40 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cc28:	689b      	ldr	r3, [r3, #8]
 800cc2a:	0adb      	lsrs	r3, r3, #11
 800cc2c:	f003 0307 	and.w	r3, r3, #7
 800cc30:	4904      	ldr	r1, [pc, #16]	@ (800cc44 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cc32:	5ccb      	ldrb	r3, [r1, r3]
 800cc34:	f003 031f 	and.w	r3, r3, #31
 800cc38:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	40021000 	.word	0x40021000
 800cc44:	08013a48 	.word	0x08013a48

0800cc48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b087      	sub	sp, #28
 800cc4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cc4e:	4b1e      	ldr	r3, [pc, #120]	@ (800ccc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	f003 0303 	and.w	r3, r3, #3
 800cc56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cc58:	4b1b      	ldr	r3, [pc, #108]	@ (800ccc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	091b      	lsrs	r3, r3, #4
 800cc5e:	f003 030f 	and.w	r3, r3, #15
 800cc62:	3301      	adds	r3, #1
 800cc64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	2b03      	cmp	r3, #3
 800cc6a:	d10c      	bne.n	800cc86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cc6c:	4a17      	ldr	r2, [pc, #92]	@ (800cccc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc74:	4a14      	ldr	r2, [pc, #80]	@ (800ccc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc76:	68d2      	ldr	r2, [r2, #12]
 800cc78:	0a12      	lsrs	r2, r2, #8
 800cc7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800cc7e:	fb02 f303 	mul.w	r3, r2, r3
 800cc82:	617b      	str	r3, [r7, #20]
    break;
 800cc84:	e00c      	b.n	800cca0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cc86:	4a12      	ldr	r2, [pc, #72]	@ (800ccd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc8e:	4a0e      	ldr	r2, [pc, #56]	@ (800ccc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc90:	68d2      	ldr	r2, [r2, #12]
 800cc92:	0a12      	lsrs	r2, r2, #8
 800cc94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800cc98:	fb02 f303 	mul.w	r3, r2, r3
 800cc9c:	617b      	str	r3, [r7, #20]
    break;
 800cc9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cca0:	4b09      	ldr	r3, [pc, #36]	@ (800ccc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	0e5b      	lsrs	r3, r3, #25
 800cca6:	f003 0303 	and.w	r3, r3, #3
 800ccaa:	3301      	adds	r3, #1
 800ccac:	005b      	lsls	r3, r3, #1
 800ccae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800ccb0:	697a      	ldr	r2, [r7, #20]
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccb8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800ccba:	687b      	ldr	r3, [r7, #4]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	371c      	adds	r7, #28
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr
 800ccc8:	40021000 	.word	0x40021000
 800cccc:	016e3600 	.word	0x016e3600
 800ccd0:	00f42400 	.word	0x00f42400

0800ccd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b086      	sub	sp, #24
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ccdc:	2300      	movs	r3, #0
 800ccde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cce0:	2300      	movs	r3, #0
 800cce2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	f000 8098 	beq.w	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ccf6:	4b43      	ldr	r3, [pc, #268]	@ (800ce04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ccf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ccfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d10d      	bne.n	800cd1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd02:	4b40      	ldr	r3, [pc, #256]	@ (800ce04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd06:	4a3f      	ldr	r2, [pc, #252]	@ (800ce04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cd0c:	6593      	str	r3, [r2, #88]	@ 0x58
 800cd0e:	4b3d      	ldr	r3, [pc, #244]	@ (800ce04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cd16:	60bb      	str	r3, [r7, #8]
 800cd18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd1e:	4b3a      	ldr	r3, [pc, #232]	@ (800ce08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	4a39      	ldr	r2, [pc, #228]	@ (800ce08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cd24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cd28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cd2a:	f7fc ff47 	bl	8009bbc <HAL_GetTick>
 800cd2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd30:	e009      	b.n	800cd46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd32:	f7fc ff43 	bl	8009bbc <HAL_GetTick>
 800cd36:	4602      	mov	r2, r0
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	1ad3      	subs	r3, r2, r3
 800cd3c:	2b02      	cmp	r3, #2
 800cd3e:	d902      	bls.n	800cd46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800cd40:	2303      	movs	r3, #3
 800cd42:	74fb      	strb	r3, [r7, #19]
        break;
 800cd44:	e005      	b.n	800cd52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd46:	4b30      	ldr	r3, [pc, #192]	@ (800ce08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d0ef      	beq.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800cd52:	7cfb      	ldrb	r3, [r7, #19]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d159      	bne.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cd58:	4b2a      	ldr	r3, [pc, #168]	@ (800ce04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cd62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d01e      	beq.n	800cda8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd6e:	697a      	ldr	r2, [r7, #20]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d019      	beq.n	800cda8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cd74:	4b23      	ldr	r3, [pc, #140]	@ (800ce04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cd7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cd80:	4b20      	ldr	r3, [pc, #128]	@ (800ce04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd86:	4a1f      	ldr	r2, [pc, #124]	@ (800ce04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cd8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cd90:	4b1c      	ldr	r3, [pc, #112]	@ (800ce04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd96:	4a1b      	ldr	r2, [pc, #108]	@ (800ce04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cd9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cda0:	4a18      	ldr	r2, [pc, #96]	@ (800ce04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	f003 0301 	and.w	r3, r3, #1
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d016      	beq.n	800cde0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdb2:	f7fc ff03 	bl	8009bbc <HAL_GetTick>
 800cdb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cdb8:	e00b      	b.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cdba:	f7fc feff 	bl	8009bbc <HAL_GetTick>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	1ad3      	subs	r3, r2, r3
 800cdc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d902      	bls.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800cdcc:	2303      	movs	r3, #3
 800cdce:	74fb      	strb	r3, [r7, #19]
            break;
 800cdd0:	e006      	b.n	800cde0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cdd2:	4b0c      	ldr	r3, [pc, #48]	@ (800ce04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdd8:	f003 0302 	and.w	r3, r3, #2
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d0ec      	beq.n	800cdba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800cde0:	7cfb      	ldrb	r3, [r7, #19]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d10b      	bne.n	800cdfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cde6:	4b07      	ldr	r3, [pc, #28]	@ (800ce04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cde8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdf4:	4903      	ldr	r1, [pc, #12]	@ (800ce04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800cdfc:	e008      	b.n	800ce10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cdfe:	7cfb      	ldrb	r3, [r7, #19]
 800ce00:	74bb      	strb	r3, [r7, #18]
 800ce02:	e005      	b.n	800ce10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ce04:	40021000 	.word	0x40021000
 800ce08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce0c:	7cfb      	ldrb	r3, [r7, #19]
 800ce0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ce10:	7c7b      	ldrb	r3, [r7, #17]
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d105      	bne.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce16:	4ba7      	ldr	r3, [pc, #668]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce1a:	4aa6      	ldr	r2, [pc, #664]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ce20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f003 0301 	and.w	r3, r3, #1
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00a      	beq.n	800ce44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ce2e:	4ba1      	ldr	r3, [pc, #644]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce34:	f023 0203 	bic.w	r2, r3, #3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	499d      	ldr	r1, [pc, #628]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f003 0302 	and.w	r3, r3, #2
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00a      	beq.n	800ce66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ce50:	4b98      	ldr	r3, [pc, #608]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce56:	f023 020c 	bic.w	r2, r3, #12
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	4995      	ldr	r1, [pc, #596]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce60:	4313      	orrs	r3, r2
 800ce62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f003 0304 	and.w	r3, r3, #4
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00a      	beq.n	800ce88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ce72:	4b90      	ldr	r3, [pc, #576]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	68db      	ldr	r3, [r3, #12]
 800ce80:	498c      	ldr	r1, [pc, #560]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce82:	4313      	orrs	r3, r2
 800ce84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	f003 0308 	and.w	r3, r3, #8
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d00a      	beq.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ce94:	4b87      	ldr	r3, [pc, #540]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ce96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	691b      	ldr	r3, [r3, #16]
 800cea2:	4984      	ldr	r1, [pc, #528]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cea4:	4313      	orrs	r3, r2
 800cea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f003 0310 	and.w	r3, r3, #16
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00a      	beq.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ceb6:	4b7f      	ldr	r3, [pc, #508]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ceb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cebc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	695b      	ldr	r3, [r3, #20]
 800cec4:	497b      	ldr	r1, [pc, #492]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cec6:	4313      	orrs	r3, r2
 800cec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f003 0320 	and.w	r3, r3, #32
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d00a      	beq.n	800ceee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ced8:	4b76      	ldr	r3, [pc, #472]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ceda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cede:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	699b      	ldr	r3, [r3, #24]
 800cee6:	4973      	ldr	r1, [pc, #460]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cee8:	4313      	orrs	r3, r2
 800ceea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d00a      	beq.n	800cf10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cefa:	4b6e      	ldr	r3, [pc, #440]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cefc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf00:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	69db      	ldr	r3, [r3, #28]
 800cf08:	496a      	ldr	r1, [pc, #424]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d00a      	beq.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cf1c:	4b65      	ldr	r3, [pc, #404]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf22:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6a1b      	ldr	r3, [r3, #32]
 800cf2a:	4962      	ldr	r1, [pc, #392]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d00a      	beq.n	800cf54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cf3e:	4b5d      	ldr	r3, [pc, #372]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf4c:	4959      	ldr	r1, [pc, #356]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf4e:	4313      	orrs	r3, r2
 800cf50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00a      	beq.n	800cf76 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cf60:	4b54      	ldr	r3, [pc, #336]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cf66:	f023 0203 	bic.w	r2, r3, #3
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf6e:	4951      	ldr	r1, [pc, #324]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf70:	4313      	orrs	r3, r2
 800cf72:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d00a      	beq.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cf82:	4b4c      	ldr	r3, [pc, #304]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf88:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf90:	4948      	ldr	r1, [pc, #288]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf92:	4313      	orrs	r3, r2
 800cf94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d015      	beq.n	800cfd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cfa4:	4b43      	ldr	r3, [pc, #268]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfaa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfb2:	4940      	ldr	r1, [pc, #256]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cfbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cfc2:	d105      	bne.n	800cfd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cfc4:	4b3b      	ldr	r3, [pc, #236]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfc6:	68db      	ldr	r3, [r3, #12]
 800cfc8:	4a3a      	ldr	r2, [pc, #232]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cfce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d015      	beq.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800cfdc:	4b35      	ldr	r3, [pc, #212]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfe2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfea:	4932      	ldr	r1, [pc, #200]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfec:	4313      	orrs	r3, r2
 800cfee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cff6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cffa:	d105      	bne.n	800d008 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cffc:	4b2d      	ldr	r3, [pc, #180]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cffe:	68db      	ldr	r3, [r3, #12]
 800d000:	4a2c      	ldr	r2, [pc, #176]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d002:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d006:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d010:	2b00      	cmp	r3, #0
 800d012:	d015      	beq.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d014:	4b27      	ldr	r3, [pc, #156]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d01a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d022:	4924      	ldr	r1, [pc, #144]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d024:	4313      	orrs	r3, r2
 800d026:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d02e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d032:	d105      	bne.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d034:	4b1f      	ldr	r3, [pc, #124]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	4a1e      	ldr	r2, [pc, #120]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d03a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d03e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d015      	beq.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d04c:	4b19      	ldr	r3, [pc, #100]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d04e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d052:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d05a:	4916      	ldr	r1, [pc, #88]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d05c:	4313      	orrs	r3, r2
 800d05e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d066:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d06a:	d105      	bne.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d06c:	4b11      	ldr	r3, [pc, #68]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	4a10      	ldr	r2, [pc, #64]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d072:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d076:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d080:	2b00      	cmp	r3, #0
 800d082:	d019      	beq.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d084:	4b0b      	ldr	r3, [pc, #44]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d08a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d092:	4908      	ldr	r1, [pc, #32]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d094:	4313      	orrs	r3, r2
 800d096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d09e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d0a2:	d109      	bne.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d0a4:	4b03      	ldr	r3, [pc, #12]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	4a02      	ldr	r2, [pc, #8]	@ (800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d0aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d0ae:	60d3      	str	r3, [r2, #12]
 800d0b0:	e002      	b.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d0b2:	bf00      	nop
 800d0b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d015      	beq.n	800d0f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d0c4:	4b29      	ldr	r3, [pc, #164]	@ (800d16c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0d2:	4926      	ldr	r1, [pc, #152]	@ (800d16c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d0e2:	d105      	bne.n	800d0f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d0e4:	4b21      	ldr	r3, [pc, #132]	@ (800d16c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	4a20      	ldr	r2, [pc, #128]	@ (800d16c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d0ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d0ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d015      	beq.n	800d128 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d0fc:	4b1b      	ldr	r3, [pc, #108]	@ (800d16c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d0fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d102:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d10a:	4918      	ldr	r1, [pc, #96]	@ (800d16c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d10c:	4313      	orrs	r3, r2
 800d10e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d11a:	d105      	bne.n	800d128 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d11c:	4b13      	ldr	r3, [pc, #76]	@ (800d16c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	4a12      	ldr	r2, [pc, #72]	@ (800d16c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d122:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d126:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d130:	2b00      	cmp	r3, #0
 800d132:	d015      	beq.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d134:	4b0d      	ldr	r3, [pc, #52]	@ (800d16c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d136:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d13a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d142:	490a      	ldr	r1, [pc, #40]	@ (800d16c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d144:	4313      	orrs	r3, r2
 800d146:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d14e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d152:	d105      	bne.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d154:	4b05      	ldr	r3, [pc, #20]	@ (800d16c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	4a04      	ldr	r2, [pc, #16]	@ (800d16c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d15a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d15e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d160:	7cbb      	ldrb	r3, [r7, #18]
}
 800d162:	4618      	mov	r0, r3
 800d164:	3718      	adds	r7, #24
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
 800d16a:	bf00      	nop
 800d16c:	40021000 	.word	0x40021000

0800d170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d101      	bne.n	800d182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	e054      	b.n	800d22c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d111      	bne.n	800d1b2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	2200      	movs	r2, #0
 800d192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f001 fee2 	bl	800ef60 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d102      	bne.n	800d1aa <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	4a23      	ldr	r2, [pc, #140]	@ (800d234 <HAL_TIM_Base_Init+0xc4>)
 800d1a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2202      	movs	r2, #2
 800d1b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	3304      	adds	r3, #4
 800d1c2:	4619      	mov	r1, r3
 800d1c4:	4610      	mov	r0, r2
 800d1c6:	f001 fa2b 	bl	800e620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2201      	movs	r2, #1
 800d1d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2201      	movs	r2, #1
 800d1fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2201      	movs	r2, #1
 800d206:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2201      	movs	r2, #1
 800d20e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2201      	movs	r2, #1
 800d216:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2201      	movs	r2, #1
 800d21e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2201      	movs	r2, #1
 800d226:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d22a:	2300      	movs	r3, #0
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3708      	adds	r7, #8
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	080093e5 	.word	0x080093e5

0800d238 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d238:	b480      	push	{r7}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d246:	b2db      	uxtb	r3, r3
 800d248:	2b01      	cmp	r3, #1
 800d24a:	d001      	beq.n	800d250 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d24c:	2301      	movs	r3, #1
 800d24e:	e04c      	b.n	800d2ea <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2202      	movs	r2, #2
 800d254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	4a26      	ldr	r2, [pc, #152]	@ (800d2f8 <HAL_TIM_Base_Start+0xc0>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d022      	beq.n	800d2a8 <HAL_TIM_Base_Start+0x70>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d26a:	d01d      	beq.n	800d2a8 <HAL_TIM_Base_Start+0x70>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a22      	ldr	r2, [pc, #136]	@ (800d2fc <HAL_TIM_Base_Start+0xc4>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d018      	beq.n	800d2a8 <HAL_TIM_Base_Start+0x70>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	4a21      	ldr	r2, [pc, #132]	@ (800d300 <HAL_TIM_Base_Start+0xc8>)
 800d27c:	4293      	cmp	r3, r2
 800d27e:	d013      	beq.n	800d2a8 <HAL_TIM_Base_Start+0x70>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a1f      	ldr	r2, [pc, #124]	@ (800d304 <HAL_TIM_Base_Start+0xcc>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d00e      	beq.n	800d2a8 <HAL_TIM_Base_Start+0x70>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	4a1e      	ldr	r2, [pc, #120]	@ (800d308 <HAL_TIM_Base_Start+0xd0>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d009      	beq.n	800d2a8 <HAL_TIM_Base_Start+0x70>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4a1c      	ldr	r2, [pc, #112]	@ (800d30c <HAL_TIM_Base_Start+0xd4>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d004      	beq.n	800d2a8 <HAL_TIM_Base_Start+0x70>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	4a1b      	ldr	r2, [pc, #108]	@ (800d310 <HAL_TIM_Base_Start+0xd8>)
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d115      	bne.n	800d2d4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	689a      	ldr	r2, [r3, #8]
 800d2ae:	4b19      	ldr	r3, [pc, #100]	@ (800d314 <HAL_TIM_Base_Start+0xdc>)
 800d2b0:	4013      	ands	r3, r2
 800d2b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2b06      	cmp	r3, #6
 800d2b8:	d015      	beq.n	800d2e6 <HAL_TIM_Base_Start+0xae>
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2c0:	d011      	beq.n	800d2e6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	f042 0201 	orr.w	r2, r2, #1
 800d2d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2d2:	e008      	b.n	800d2e6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f042 0201 	orr.w	r2, r2, #1
 800d2e2:	601a      	str	r2, [r3, #0]
 800d2e4:	e000      	b.n	800d2e8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d2e8:	2300      	movs	r3, #0
}
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	3714      	adds	r7, #20
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr
 800d2f6:	bf00      	nop
 800d2f8:	40012c00 	.word	0x40012c00
 800d2fc:	40000400 	.word	0x40000400
 800d300:	40000800 	.word	0x40000800
 800d304:	40000c00 	.word	0x40000c00
 800d308:	40013400 	.word	0x40013400
 800d30c:	40014000 	.word	0x40014000
 800d310:	40015000 	.word	0x40015000
 800d314:	00010007 	.word	0x00010007

0800d318 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d318:	b480      	push	{r7}
 800d31a:	b085      	sub	sp, #20
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d326:	b2db      	uxtb	r3, r3
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d001      	beq.n	800d330 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d32c:	2301      	movs	r3, #1
 800d32e:	e054      	b.n	800d3da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2202      	movs	r2, #2
 800d334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	68da      	ldr	r2, [r3, #12]
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f042 0201 	orr.w	r2, r2, #1
 800d346:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	4a26      	ldr	r2, [pc, #152]	@ (800d3e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d022      	beq.n	800d398 <HAL_TIM_Base_Start_IT+0x80>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d35a:	d01d      	beq.n	800d398 <HAL_TIM_Base_Start_IT+0x80>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a22      	ldr	r2, [pc, #136]	@ (800d3ec <HAL_TIM_Base_Start_IT+0xd4>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d018      	beq.n	800d398 <HAL_TIM_Base_Start_IT+0x80>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4a21      	ldr	r2, [pc, #132]	@ (800d3f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d013      	beq.n	800d398 <HAL_TIM_Base_Start_IT+0x80>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4a1f      	ldr	r2, [pc, #124]	@ (800d3f4 <HAL_TIM_Base_Start_IT+0xdc>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d00e      	beq.n	800d398 <HAL_TIM_Base_Start_IT+0x80>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a1e      	ldr	r2, [pc, #120]	@ (800d3f8 <HAL_TIM_Base_Start_IT+0xe0>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d009      	beq.n	800d398 <HAL_TIM_Base_Start_IT+0x80>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4a1c      	ldr	r2, [pc, #112]	@ (800d3fc <HAL_TIM_Base_Start_IT+0xe4>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d004      	beq.n	800d398 <HAL_TIM_Base_Start_IT+0x80>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4a1b      	ldr	r2, [pc, #108]	@ (800d400 <HAL_TIM_Base_Start_IT+0xe8>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d115      	bne.n	800d3c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	689a      	ldr	r2, [r3, #8]
 800d39e:	4b19      	ldr	r3, [pc, #100]	@ (800d404 <HAL_TIM_Base_Start_IT+0xec>)
 800d3a0:	4013      	ands	r3, r2
 800d3a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	2b06      	cmp	r3, #6
 800d3a8:	d015      	beq.n	800d3d6 <HAL_TIM_Base_Start_IT+0xbe>
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3b0:	d011      	beq.n	800d3d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f042 0201 	orr.w	r2, r2, #1
 800d3c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3c2:	e008      	b.n	800d3d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f042 0201 	orr.w	r2, r2, #1
 800d3d2:	601a      	str	r2, [r3, #0]
 800d3d4:	e000      	b.n	800d3d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d3d8:	2300      	movs	r3, #0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3714      	adds	r7, #20
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop
 800d3e8:	40012c00 	.word	0x40012c00
 800d3ec:	40000400 	.word	0x40000400
 800d3f0:	40000800 	.word	0x40000800
 800d3f4:	40000c00 	.word	0x40000c00
 800d3f8:	40013400 	.word	0x40013400
 800d3fc:	40014000 	.word	0x40014000
 800d400:	40015000 	.word	0x40015000
 800d404:	00010007 	.word	0x00010007

0800d408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d101      	bne.n	800d41a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d416:	2301      	movs	r3, #1
 800d418:	e054      	b.n	800d4c4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d420:	b2db      	uxtb	r3, r3
 800d422:	2b00      	cmp	r3, #0
 800d424:	d111      	bne.n	800d44a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2200      	movs	r2, #0
 800d42a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f001 fd96 	bl	800ef60 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d102      	bne.n	800d442 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	4a23      	ldr	r2, [pc, #140]	@ (800d4cc <HAL_TIM_PWM_Init+0xc4>)
 800d440:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2202      	movs	r2, #2
 800d44e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	3304      	adds	r3, #4
 800d45a:	4619      	mov	r1, r3
 800d45c:	4610      	mov	r0, r2
 800d45e:	f001 f8df 	bl	800e620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2201      	movs	r2, #1
 800d466:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2201      	movs	r2, #1
 800d46e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2201      	movs	r2, #1
 800d476:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2201      	movs	r2, #1
 800d47e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2201      	movs	r2, #1
 800d486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2201      	movs	r2, #1
 800d48e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2201      	movs	r2, #1
 800d496:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2201      	movs	r2, #1
 800d49e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2201      	movs	r2, #1
 800d4be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d4c2:	2300      	movs	r3, #0
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3708      	adds	r7, #8
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	08009399 	.word	0x08009399

0800d4d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d109      	bne.n	800d4f4 <HAL_TIM_PWM_Start+0x24>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d4e6:	b2db      	uxtb	r3, r3
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	bf14      	ite	ne
 800d4ec:	2301      	movne	r3, #1
 800d4ee:	2300      	moveq	r3, #0
 800d4f0:	b2db      	uxtb	r3, r3
 800d4f2:	e03c      	b.n	800d56e <HAL_TIM_PWM_Start+0x9e>
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	2b04      	cmp	r3, #4
 800d4f8:	d109      	bne.n	800d50e <HAL_TIM_PWM_Start+0x3e>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d500:	b2db      	uxtb	r3, r3
 800d502:	2b01      	cmp	r3, #1
 800d504:	bf14      	ite	ne
 800d506:	2301      	movne	r3, #1
 800d508:	2300      	moveq	r3, #0
 800d50a:	b2db      	uxtb	r3, r3
 800d50c:	e02f      	b.n	800d56e <HAL_TIM_PWM_Start+0x9e>
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	2b08      	cmp	r3, #8
 800d512:	d109      	bne.n	800d528 <HAL_TIM_PWM_Start+0x58>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	bf14      	ite	ne
 800d520:	2301      	movne	r3, #1
 800d522:	2300      	moveq	r3, #0
 800d524:	b2db      	uxtb	r3, r3
 800d526:	e022      	b.n	800d56e <HAL_TIM_PWM_Start+0x9e>
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	2b0c      	cmp	r3, #12
 800d52c:	d109      	bne.n	800d542 <HAL_TIM_PWM_Start+0x72>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d534:	b2db      	uxtb	r3, r3
 800d536:	2b01      	cmp	r3, #1
 800d538:	bf14      	ite	ne
 800d53a:	2301      	movne	r3, #1
 800d53c:	2300      	moveq	r3, #0
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	e015      	b.n	800d56e <HAL_TIM_PWM_Start+0x9e>
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	2b10      	cmp	r3, #16
 800d546:	d109      	bne.n	800d55c <HAL_TIM_PWM_Start+0x8c>
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	2b01      	cmp	r3, #1
 800d552:	bf14      	ite	ne
 800d554:	2301      	movne	r3, #1
 800d556:	2300      	moveq	r3, #0
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	e008      	b.n	800d56e <HAL_TIM_PWM_Start+0x9e>
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d562:	b2db      	uxtb	r3, r3
 800d564:	2b01      	cmp	r3, #1
 800d566:	bf14      	ite	ne
 800d568:	2301      	movne	r3, #1
 800d56a:	2300      	moveq	r3, #0
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d001      	beq.n	800d576 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d572:	2301      	movs	r3, #1
 800d574:	e0a6      	b.n	800d6c4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d104      	bne.n	800d586 <HAL_TIM_PWM_Start+0xb6>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2202      	movs	r2, #2
 800d580:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d584:	e023      	b.n	800d5ce <HAL_TIM_PWM_Start+0xfe>
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	2b04      	cmp	r3, #4
 800d58a:	d104      	bne.n	800d596 <HAL_TIM_PWM_Start+0xc6>
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2202      	movs	r2, #2
 800d590:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d594:	e01b      	b.n	800d5ce <HAL_TIM_PWM_Start+0xfe>
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	2b08      	cmp	r3, #8
 800d59a:	d104      	bne.n	800d5a6 <HAL_TIM_PWM_Start+0xd6>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2202      	movs	r2, #2
 800d5a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d5a4:	e013      	b.n	800d5ce <HAL_TIM_PWM_Start+0xfe>
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	2b0c      	cmp	r3, #12
 800d5aa:	d104      	bne.n	800d5b6 <HAL_TIM_PWM_Start+0xe6>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2202      	movs	r2, #2
 800d5b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d5b4:	e00b      	b.n	800d5ce <HAL_TIM_PWM_Start+0xfe>
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	2b10      	cmp	r3, #16
 800d5ba:	d104      	bne.n	800d5c6 <HAL_TIM_PWM_Start+0xf6>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2202      	movs	r2, #2
 800d5c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d5c4:	e003      	b.n	800d5ce <HAL_TIM_PWM_Start+0xfe>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2202      	movs	r2, #2
 800d5ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	6839      	ldr	r1, [r7, #0]
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f001 fc9c 	bl	800ef14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a3a      	ldr	r2, [pc, #232]	@ (800d6cc <HAL_TIM_PWM_Start+0x1fc>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d018      	beq.n	800d618 <HAL_TIM_PWM_Start+0x148>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4a39      	ldr	r2, [pc, #228]	@ (800d6d0 <HAL_TIM_PWM_Start+0x200>)
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	d013      	beq.n	800d618 <HAL_TIM_PWM_Start+0x148>
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4a37      	ldr	r2, [pc, #220]	@ (800d6d4 <HAL_TIM_PWM_Start+0x204>)
 800d5f6:	4293      	cmp	r3, r2
 800d5f8:	d00e      	beq.n	800d618 <HAL_TIM_PWM_Start+0x148>
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a36      	ldr	r2, [pc, #216]	@ (800d6d8 <HAL_TIM_PWM_Start+0x208>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d009      	beq.n	800d618 <HAL_TIM_PWM_Start+0x148>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a34      	ldr	r2, [pc, #208]	@ (800d6dc <HAL_TIM_PWM_Start+0x20c>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d004      	beq.n	800d618 <HAL_TIM_PWM_Start+0x148>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a33      	ldr	r2, [pc, #204]	@ (800d6e0 <HAL_TIM_PWM_Start+0x210>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d101      	bne.n	800d61c <HAL_TIM_PWM_Start+0x14c>
 800d618:	2301      	movs	r3, #1
 800d61a:	e000      	b.n	800d61e <HAL_TIM_PWM_Start+0x14e>
 800d61c:	2300      	movs	r3, #0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d007      	beq.n	800d632 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d630:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	4a25      	ldr	r2, [pc, #148]	@ (800d6cc <HAL_TIM_PWM_Start+0x1fc>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d022      	beq.n	800d682 <HAL_TIM_PWM_Start+0x1b2>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d644:	d01d      	beq.n	800d682 <HAL_TIM_PWM_Start+0x1b2>
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a26      	ldr	r2, [pc, #152]	@ (800d6e4 <HAL_TIM_PWM_Start+0x214>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d018      	beq.n	800d682 <HAL_TIM_PWM_Start+0x1b2>
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	4a24      	ldr	r2, [pc, #144]	@ (800d6e8 <HAL_TIM_PWM_Start+0x218>)
 800d656:	4293      	cmp	r3, r2
 800d658:	d013      	beq.n	800d682 <HAL_TIM_PWM_Start+0x1b2>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	4a23      	ldr	r2, [pc, #140]	@ (800d6ec <HAL_TIM_PWM_Start+0x21c>)
 800d660:	4293      	cmp	r3, r2
 800d662:	d00e      	beq.n	800d682 <HAL_TIM_PWM_Start+0x1b2>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	4a19      	ldr	r2, [pc, #100]	@ (800d6d0 <HAL_TIM_PWM_Start+0x200>)
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d009      	beq.n	800d682 <HAL_TIM_PWM_Start+0x1b2>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	4a18      	ldr	r2, [pc, #96]	@ (800d6d4 <HAL_TIM_PWM_Start+0x204>)
 800d674:	4293      	cmp	r3, r2
 800d676:	d004      	beq.n	800d682 <HAL_TIM_PWM_Start+0x1b2>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	4a18      	ldr	r2, [pc, #96]	@ (800d6e0 <HAL_TIM_PWM_Start+0x210>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d115      	bne.n	800d6ae <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	689a      	ldr	r2, [r3, #8]
 800d688:	4b19      	ldr	r3, [pc, #100]	@ (800d6f0 <HAL_TIM_PWM_Start+0x220>)
 800d68a:	4013      	ands	r3, r2
 800d68c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2b06      	cmp	r3, #6
 800d692:	d015      	beq.n	800d6c0 <HAL_TIM_PWM_Start+0x1f0>
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d69a:	d011      	beq.n	800d6c0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	681a      	ldr	r2, [r3, #0]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f042 0201 	orr.w	r2, r2, #1
 800d6aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6ac:	e008      	b.n	800d6c0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f042 0201 	orr.w	r2, r2, #1
 800d6bc:	601a      	str	r2, [r3, #0]
 800d6be:	e000      	b.n	800d6c2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d6c2:	2300      	movs	r3, #0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3710      	adds	r7, #16
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	40012c00 	.word	0x40012c00
 800d6d0:	40013400 	.word	0x40013400
 800d6d4:	40014000 	.word	0x40014000
 800d6d8:	40014400 	.word	0x40014400
 800d6dc:	40014800 	.word	0x40014800
 800d6e0:	40015000 	.word	0x40015000
 800d6e4:	40000400 	.word	0x40000400
 800d6e8:	40000800 	.word	0x40000800
 800d6ec:	40000c00 	.word	0x40000c00
 800d6f0:	00010007 	.word	0x00010007

0800d6f4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d101      	bne.n	800d708 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800d704:	2301      	movs	r3, #1
 800d706:	e04c      	b.n	800d7a2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	2b00      	cmp	r3, #0
 800d712:	d111      	bne.n	800d738 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f001 fc1f 	bl	800ef60 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d726:	2b00      	cmp	r3, #0
 800d728:	d102      	bne.n	800d730 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	4a1f      	ldr	r2, [pc, #124]	@ (800d7ac <HAL_TIM_OnePulse_Init+0xb8>)
 800d72e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2202      	movs	r2, #2
 800d73c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	3304      	adds	r3, #4
 800d748:	4619      	mov	r1, r3
 800d74a:	4610      	mov	r0, r2
 800d74c:	f000 ff68 	bl	800e620 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	681a      	ldr	r2, [r3, #0]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f022 0208 	bic.w	r2, r2, #8
 800d75e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	6819      	ldr	r1, [r3, #0]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	683a      	ldr	r2, [r7, #0]
 800d76c:	430a      	orrs	r2, r1
 800d76e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2201      	movs	r2, #1
 800d774:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2201      	movs	r2, #1
 800d77c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2201      	movs	r2, #1
 800d784:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2201      	movs	r2, #1
 800d78c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2201      	movs	r2, #1
 800d794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2201      	movs	r2, #1
 800d79c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d7a0:	2300      	movs	r3, #0
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3708      	adds	r7, #8
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	0800d7b1 	.word	0x0800d7b1

0800d7b0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	b083      	sub	sp, #12
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800d7b8:	bf00      	nop
 800d7ba:	370c      	adds	r7, #12
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr

0800d7c4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d7d4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d7dc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d7e4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7ec:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d7ee:	7bfb      	ldrb	r3, [r7, #15]
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d108      	bne.n	800d806 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d7f4:	7bbb      	ldrb	r3, [r7, #14]
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d105      	bne.n	800d806 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d7fa:	7b7b      	ldrb	r3, [r7, #13]
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d102      	bne.n	800d806 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d800:	7b3b      	ldrb	r3, [r7, #12]
 800d802:	2b01      	cmp	r3, #1
 800d804:	d001      	beq.n	800d80a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800d806:	2301      	movs	r3, #1
 800d808:	e059      	b.n	800d8be <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2202      	movs	r2, #2
 800d80e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2202      	movs	r2, #2
 800d816:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2202      	movs	r2, #2
 800d81e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2202      	movs	r2, #2
 800d826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	68da      	ldr	r2, [r3, #12]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f042 0202 	orr.w	r2, r2, #2
 800d838:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	68da      	ldr	r2, [r3, #12]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f042 0204 	orr.w	r2, r2, #4
 800d848:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	2201      	movs	r2, #1
 800d850:	2100      	movs	r1, #0
 800d852:	4618      	mov	r0, r3
 800d854:	f001 fb5e 	bl	800ef14 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	2201      	movs	r2, #1
 800d85e:	2104      	movs	r1, #4
 800d860:	4618      	mov	r0, r3
 800d862:	f001 fb57 	bl	800ef14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4a17      	ldr	r2, [pc, #92]	@ (800d8c8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d018      	beq.n	800d8a2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a15      	ldr	r2, [pc, #84]	@ (800d8cc <HAL_TIM_OnePulse_Start_IT+0x108>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d013      	beq.n	800d8a2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	4a14      	ldr	r2, [pc, #80]	@ (800d8d0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800d880:	4293      	cmp	r3, r2
 800d882:	d00e      	beq.n	800d8a2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4a12      	ldr	r2, [pc, #72]	@ (800d8d4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800d88a:	4293      	cmp	r3, r2
 800d88c:	d009      	beq.n	800d8a2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	4a11      	ldr	r2, [pc, #68]	@ (800d8d8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d004      	beq.n	800d8a2 <HAL_TIM_OnePulse_Start_IT+0xde>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a0f      	ldr	r2, [pc, #60]	@ (800d8dc <HAL_TIM_OnePulse_Start_IT+0x118>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d101      	bne.n	800d8a6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800d8a2:	2301      	movs	r3, #1
 800d8a4:	e000      	b.n	800d8a8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d007      	beq.n	800d8bc <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d8ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800d8bc:	2300      	movs	r3, #0
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	40012c00 	.word	0x40012c00
 800d8cc:	40013400 	.word	0x40013400
 800d8d0:	40014000 	.word	0x40014000
 800d8d4:	40014400 	.word	0x40014400
 800d8d8:	40014800 	.word	0x40014800
 800d8dc:	40015000 	.word	0x40015000

0800d8e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b086      	sub	sp, #24
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d101      	bne.n	800d8f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e0a2      	b.n	800da3a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d111      	bne.n	800d924 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2200      	movs	r2, #0
 800d904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f001 fb29 	bl	800ef60 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d912:	2b00      	cmp	r3, #0
 800d914:	d102      	bne.n	800d91c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	4a4a      	ldr	r2, [pc, #296]	@ (800da44 <HAL_TIM_Encoder_Init+0x164>)
 800d91a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2202      	movs	r2, #2
 800d928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	689b      	ldr	r3, [r3, #8]
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	6812      	ldr	r2, [r2, #0]
 800d936:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800d93a:	f023 0307 	bic.w	r3, r3, #7
 800d93e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681a      	ldr	r2, [r3, #0]
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	3304      	adds	r3, #4
 800d948:	4619      	mov	r1, r3
 800d94a:	4610      	mov	r0, r2
 800d94c:	f000 fe68 	bl	800e620 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	689b      	ldr	r3, [r3, #8]
 800d956:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	699b      	ldr	r3, [r3, #24]
 800d95e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	6a1b      	ldr	r3, [r3, #32]
 800d966:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	697a      	ldr	r2, [r7, #20]
 800d96e:	4313      	orrs	r3, r2
 800d970:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d978:	f023 0303 	bic.w	r3, r3, #3
 800d97c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	689a      	ldr	r2, [r3, #8]
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	699b      	ldr	r3, [r3, #24]
 800d986:	021b      	lsls	r3, r3, #8
 800d988:	4313      	orrs	r3, r2
 800d98a:	693a      	ldr	r2, [r7, #16]
 800d98c:	4313      	orrs	r3, r2
 800d98e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800d996:	f023 030c 	bic.w	r3, r3, #12
 800d99a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d9a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d9a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	68da      	ldr	r2, [r3, #12]
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	69db      	ldr	r3, [r3, #28]
 800d9b0:	021b      	lsls	r3, r3, #8
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	693a      	ldr	r2, [r7, #16]
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	691b      	ldr	r3, [r3, #16]
 800d9be:	011a      	lsls	r2, r3, #4
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	6a1b      	ldr	r3, [r3, #32]
 800d9c4:	031b      	lsls	r3, r3, #12
 800d9c6:	4313      	orrs	r3, r2
 800d9c8:	693a      	ldr	r2, [r7, #16]
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800d9d4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800d9dc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	685a      	ldr	r2, [r3, #4]
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	695b      	ldr	r3, [r3, #20]
 800d9e6:	011b      	lsls	r3, r3, #4
 800d9e8:	4313      	orrs	r3, r2
 800d9ea:	68fa      	ldr	r2, [r7, #12]
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	697a      	ldr	r2, [r7, #20]
 800d9f6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	693a      	ldr	r2, [r7, #16]
 800d9fe:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2201      	movs	r2, #1
 800da0c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2201      	movs	r2, #1
 800da14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	2201      	movs	r2, #1
 800da1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2201      	movs	r2, #1
 800da24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2201      	movs	r2, #1
 800da2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2201      	movs	r2, #1
 800da34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800da38:	2300      	movs	r3, #0
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3718      	adds	r7, #24
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	0800948d 	.word	0x0800948d

0800da48 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800da58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800da60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800da68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d110      	bne.n	800da9a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800da78:	7bfb      	ldrb	r3, [r7, #15]
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	d102      	bne.n	800da84 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800da7e:	7b7b      	ldrb	r3, [r7, #13]
 800da80:	2b01      	cmp	r3, #1
 800da82:	d001      	beq.n	800da88 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800da84:	2301      	movs	r3, #1
 800da86:	e069      	b.n	800db5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2202      	movs	r2, #2
 800da8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2202      	movs	r2, #2
 800da94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800da98:	e031      	b.n	800dafe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	2b04      	cmp	r3, #4
 800da9e:	d110      	bne.n	800dac2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800daa0:	7bbb      	ldrb	r3, [r7, #14]
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d102      	bne.n	800daac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800daa6:	7b3b      	ldrb	r3, [r7, #12]
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d001      	beq.n	800dab0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800daac:	2301      	movs	r3, #1
 800daae:	e055      	b.n	800db5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2202      	movs	r2, #2
 800dab4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2202      	movs	r2, #2
 800dabc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dac0:	e01d      	b.n	800dafe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dac2:	7bfb      	ldrb	r3, [r7, #15]
 800dac4:	2b01      	cmp	r3, #1
 800dac6:	d108      	bne.n	800dada <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dac8:	7bbb      	ldrb	r3, [r7, #14]
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d105      	bne.n	800dada <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dace:	7b7b      	ldrb	r3, [r7, #13]
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d102      	bne.n	800dada <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dad4:	7b3b      	ldrb	r3, [r7, #12]
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d001      	beq.n	800dade <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800dada:	2301      	movs	r3, #1
 800dadc:	e03e      	b.n	800db5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2202      	movs	r2, #2
 800dae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2202      	movs	r2, #2
 800daea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2202      	movs	r2, #2
 800daf2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2202      	movs	r2, #2
 800dafa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d003      	beq.n	800db0c <HAL_TIM_Encoder_Start+0xc4>
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	2b04      	cmp	r3, #4
 800db08:	d008      	beq.n	800db1c <HAL_TIM_Encoder_Start+0xd4>
 800db0a:	e00f      	b.n	800db2c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2201      	movs	r2, #1
 800db12:	2100      	movs	r1, #0
 800db14:	4618      	mov	r0, r3
 800db16:	f001 f9fd 	bl	800ef14 <TIM_CCxChannelCmd>
      break;
 800db1a:	e016      	b.n	800db4a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2201      	movs	r2, #1
 800db22:	2104      	movs	r1, #4
 800db24:	4618      	mov	r0, r3
 800db26:	f001 f9f5 	bl	800ef14 <TIM_CCxChannelCmd>
      break;
 800db2a:	e00e      	b.n	800db4a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2201      	movs	r2, #1
 800db32:	2100      	movs	r1, #0
 800db34:	4618      	mov	r0, r3
 800db36:	f001 f9ed 	bl	800ef14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	2201      	movs	r2, #1
 800db40:	2104      	movs	r1, #4
 800db42:	4618      	mov	r0, r3
 800db44:	f001 f9e6 	bl	800ef14 <TIM_CCxChannelCmd>
      break;
 800db48:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f042 0201 	orr.w	r2, r2, #1
 800db58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3710      	adds	r7, #16
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	68db      	ldr	r3, [r3, #12]
 800db72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800db7c:	68bb      	ldr	r3, [r7, #8]
 800db7e:	f003 0302 	and.w	r3, r3, #2
 800db82:	2b00      	cmp	r3, #0
 800db84:	d026      	beq.n	800dbd4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	f003 0302 	and.w	r3, r3, #2
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d021      	beq.n	800dbd4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f06f 0202 	mvn.w	r2, #2
 800db98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2201      	movs	r2, #1
 800db9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	699b      	ldr	r3, [r3, #24]
 800dba6:	f003 0303 	and.w	r3, r3, #3
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d005      	beq.n	800dbba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	4798      	blx	r3
 800dbb8:	e009      	b.n	800dbce <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	f003 0304 	and.w	r3, r3, #4
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d026      	beq.n	800dc2c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f003 0304 	and.w	r3, r3, #4
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d021      	beq.n	800dc2c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f06f 0204 	mvn.w	r2, #4
 800dbf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2202      	movs	r2, #2
 800dbf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	699b      	ldr	r3, [r3, #24]
 800dbfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d005      	beq.n	800dc12 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	4798      	blx	r3
 800dc10:	e009      	b.n	800dc26 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2200      	movs	r2, #0
 800dc2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	f003 0308 	and.w	r3, r3, #8
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d026      	beq.n	800dc84 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f003 0308 	and.w	r3, r3, #8
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d021      	beq.n	800dc84 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f06f 0208 	mvn.w	r2, #8
 800dc48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2204      	movs	r2, #4
 800dc4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	69db      	ldr	r3, [r3, #28]
 800dc56:	f003 0303 	and.w	r3, r3, #3
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d005      	beq.n	800dc6a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	4798      	blx	r3
 800dc68:	e009      	b.n	800dc7e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2200      	movs	r2, #0
 800dc82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	f003 0310 	and.w	r3, r3, #16
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d026      	beq.n	800dcdc <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	f003 0310 	and.w	r3, r3, #16
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d021      	beq.n	800dcdc <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f06f 0210 	mvn.w	r2, #16
 800dca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2208      	movs	r2, #8
 800dca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	69db      	ldr	r3, [r3, #28]
 800dcae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d005      	beq.n	800dcc2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	4798      	blx	r3
 800dcc0:	e009      	b.n	800dcd6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dcdc:	68bb      	ldr	r3, [r7, #8]
 800dcde:	f003 0301 	and.w	r3, r3, #1
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d00e      	beq.n	800dd04 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f003 0301 	and.w	r3, r3, #1
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d009      	beq.n	800dd04 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	f06f 0201 	mvn.w	r2, #1
 800dcf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d104      	bne.n	800dd18 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d00e      	beq.n	800dd36 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d009      	beq.n	800dd36 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800dd2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d00e      	beq.n	800dd5e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d009      	beq.n	800dd5e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800dd52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d00e      	beq.n	800dd86 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d009      	beq.n	800dd86 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dd7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dd82:	6878      	ldr	r0, [r7, #4]
 800dd84:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	f003 0320 	and.w	r3, r3, #32
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d00e      	beq.n	800ddae <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f003 0320 	and.w	r3, r3, #32
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d009      	beq.n	800ddae <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f06f 0220 	mvn.w	r2, #32
 800dda2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d00e      	beq.n	800ddd6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d009      	beq.n	800ddd6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800ddca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d00e      	beq.n	800ddfe <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d009      	beq.n	800ddfe <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800ddf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800de04:	2b00      	cmp	r3, #0
 800de06:	d00e      	beq.n	800de26 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d009      	beq.n	800de26 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800de1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d00e      	beq.n	800de4e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800de36:	2b00      	cmp	r3, #0
 800de38:	d009      	beq.n	800de4e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800de42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800de4e:	bf00      	nop
 800de50:	3710      	adds	r7, #16
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
	...

0800de58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b086      	sub	sp, #24
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	60f8      	str	r0, [r7, #12]
 800de60:	60b9      	str	r1, [r7, #8]
 800de62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800de64:	2300      	movs	r3, #0
 800de66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d101      	bne.n	800de76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800de72:	2302      	movs	r3, #2
 800de74:	e0ff      	b.n	800e076 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2201      	movs	r2, #1
 800de7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2b14      	cmp	r3, #20
 800de82:	f200 80f0 	bhi.w	800e066 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800de86:	a201      	add	r2, pc, #4	@ (adr r2, 800de8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800de88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de8c:	0800dee1 	.word	0x0800dee1
 800de90:	0800e067 	.word	0x0800e067
 800de94:	0800e067 	.word	0x0800e067
 800de98:	0800e067 	.word	0x0800e067
 800de9c:	0800df21 	.word	0x0800df21
 800dea0:	0800e067 	.word	0x0800e067
 800dea4:	0800e067 	.word	0x0800e067
 800dea8:	0800e067 	.word	0x0800e067
 800deac:	0800df63 	.word	0x0800df63
 800deb0:	0800e067 	.word	0x0800e067
 800deb4:	0800e067 	.word	0x0800e067
 800deb8:	0800e067 	.word	0x0800e067
 800debc:	0800dfa3 	.word	0x0800dfa3
 800dec0:	0800e067 	.word	0x0800e067
 800dec4:	0800e067 	.word	0x0800e067
 800dec8:	0800e067 	.word	0x0800e067
 800decc:	0800dfe5 	.word	0x0800dfe5
 800ded0:	0800e067 	.word	0x0800e067
 800ded4:	0800e067 	.word	0x0800e067
 800ded8:	0800e067 	.word	0x0800e067
 800dedc:	0800e025 	.word	0x0800e025
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	68b9      	ldr	r1, [r7, #8]
 800dee6:	4618      	mov	r0, r3
 800dee8:	f000 fc4e 	bl	800e788 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	699a      	ldr	r2, [r3, #24]
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f042 0208 	orr.w	r2, r2, #8
 800defa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	699a      	ldr	r2, [r3, #24]
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f022 0204 	bic.w	r2, r2, #4
 800df0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	6999      	ldr	r1, [r3, #24]
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	691a      	ldr	r2, [r3, #16]
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	430a      	orrs	r2, r1
 800df1c:	619a      	str	r2, [r3, #24]
      break;
 800df1e:	e0a5      	b.n	800e06c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	68b9      	ldr	r1, [r7, #8]
 800df26:	4618      	mov	r0, r3
 800df28:	f000 fcc8 	bl	800e8bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	699a      	ldr	r2, [r3, #24]
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800df3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	699a      	ldr	r2, [r3, #24]
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800df4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	6999      	ldr	r1, [r3, #24]
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	691b      	ldr	r3, [r3, #16]
 800df56:	021a      	lsls	r2, r3, #8
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	430a      	orrs	r2, r1
 800df5e:	619a      	str	r2, [r3, #24]
      break;
 800df60:	e084      	b.n	800e06c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	68b9      	ldr	r1, [r7, #8]
 800df68:	4618      	mov	r0, r3
 800df6a:	f000 fd3b 	bl	800e9e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	69da      	ldr	r2, [r3, #28]
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f042 0208 	orr.w	r2, r2, #8
 800df7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	69da      	ldr	r2, [r3, #28]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f022 0204 	bic.w	r2, r2, #4
 800df8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	69d9      	ldr	r1, [r3, #28]
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	691a      	ldr	r2, [r3, #16]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	430a      	orrs	r2, r1
 800df9e:	61da      	str	r2, [r3, #28]
      break;
 800dfa0:	e064      	b.n	800e06c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	68b9      	ldr	r1, [r7, #8]
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f000 fdad 	bl	800eb08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	69da      	ldr	r2, [r3, #28]
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800dfbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	69da      	ldr	r2, [r3, #28]
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800dfcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	69d9      	ldr	r1, [r3, #28]
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	691b      	ldr	r3, [r3, #16]
 800dfd8:	021a      	lsls	r2, r3, #8
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	430a      	orrs	r2, r1
 800dfe0:	61da      	str	r2, [r3, #28]
      break;
 800dfe2:	e043      	b.n	800e06c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	68b9      	ldr	r1, [r7, #8]
 800dfea:	4618      	mov	r0, r3
 800dfec:	f000 fe20 	bl	800ec30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f042 0208 	orr.w	r2, r2, #8
 800dffe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f022 0204 	bic.w	r2, r2, #4
 800e00e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	691a      	ldr	r2, [r3, #16]
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	430a      	orrs	r2, r1
 800e020:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e022:	e023      	b.n	800e06c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	68b9      	ldr	r1, [r7, #8]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f000 fe6a 	bl	800ed04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e03e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e04e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	691b      	ldr	r3, [r3, #16]
 800e05a:	021a      	lsls	r2, r3, #8
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	430a      	orrs	r2, r1
 800e062:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e064:	e002      	b.n	800e06c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e066:	2301      	movs	r3, #1
 800e068:	75fb      	strb	r3, [r7, #23]
      break;
 800e06a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2200      	movs	r2, #0
 800e070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e074:	7dfb      	ldrb	r3, [r7, #23]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3718      	adds	r7, #24
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop

0800e080 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b084      	sub	sp, #16
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e08a:	2300      	movs	r3, #0
 800e08c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e094:	2b01      	cmp	r3, #1
 800e096:	d101      	bne.n	800e09c <HAL_TIM_ConfigClockSource+0x1c>
 800e098:	2302      	movs	r3, #2
 800e09a:	e0f6      	b.n	800e28a <HAL_TIM_ConfigClockSource+0x20a>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2201      	movs	r2, #1
 800e0a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2202      	movs	r2, #2
 800e0a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	689b      	ldr	r3, [r3, #8]
 800e0b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800e0ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e0be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e0c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	68ba      	ldr	r2, [r7, #8]
 800e0ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	4a6f      	ldr	r2, [pc, #444]	@ (800e294 <HAL_TIM_ConfigClockSource+0x214>)
 800e0d6:	4293      	cmp	r3, r2
 800e0d8:	f000 80c1 	beq.w	800e25e <HAL_TIM_ConfigClockSource+0x1de>
 800e0dc:	4a6d      	ldr	r2, [pc, #436]	@ (800e294 <HAL_TIM_ConfigClockSource+0x214>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	f200 80c6 	bhi.w	800e270 <HAL_TIM_ConfigClockSource+0x1f0>
 800e0e4:	4a6c      	ldr	r2, [pc, #432]	@ (800e298 <HAL_TIM_ConfigClockSource+0x218>)
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	f000 80b9 	beq.w	800e25e <HAL_TIM_ConfigClockSource+0x1de>
 800e0ec:	4a6a      	ldr	r2, [pc, #424]	@ (800e298 <HAL_TIM_ConfigClockSource+0x218>)
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	f200 80be 	bhi.w	800e270 <HAL_TIM_ConfigClockSource+0x1f0>
 800e0f4:	4a69      	ldr	r2, [pc, #420]	@ (800e29c <HAL_TIM_ConfigClockSource+0x21c>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	f000 80b1 	beq.w	800e25e <HAL_TIM_ConfigClockSource+0x1de>
 800e0fc:	4a67      	ldr	r2, [pc, #412]	@ (800e29c <HAL_TIM_ConfigClockSource+0x21c>)
 800e0fe:	4293      	cmp	r3, r2
 800e100:	f200 80b6 	bhi.w	800e270 <HAL_TIM_ConfigClockSource+0x1f0>
 800e104:	4a66      	ldr	r2, [pc, #408]	@ (800e2a0 <HAL_TIM_ConfigClockSource+0x220>)
 800e106:	4293      	cmp	r3, r2
 800e108:	f000 80a9 	beq.w	800e25e <HAL_TIM_ConfigClockSource+0x1de>
 800e10c:	4a64      	ldr	r2, [pc, #400]	@ (800e2a0 <HAL_TIM_ConfigClockSource+0x220>)
 800e10e:	4293      	cmp	r3, r2
 800e110:	f200 80ae 	bhi.w	800e270 <HAL_TIM_ConfigClockSource+0x1f0>
 800e114:	4a63      	ldr	r2, [pc, #396]	@ (800e2a4 <HAL_TIM_ConfigClockSource+0x224>)
 800e116:	4293      	cmp	r3, r2
 800e118:	f000 80a1 	beq.w	800e25e <HAL_TIM_ConfigClockSource+0x1de>
 800e11c:	4a61      	ldr	r2, [pc, #388]	@ (800e2a4 <HAL_TIM_ConfigClockSource+0x224>)
 800e11e:	4293      	cmp	r3, r2
 800e120:	f200 80a6 	bhi.w	800e270 <HAL_TIM_ConfigClockSource+0x1f0>
 800e124:	4a60      	ldr	r2, [pc, #384]	@ (800e2a8 <HAL_TIM_ConfigClockSource+0x228>)
 800e126:	4293      	cmp	r3, r2
 800e128:	f000 8099 	beq.w	800e25e <HAL_TIM_ConfigClockSource+0x1de>
 800e12c:	4a5e      	ldr	r2, [pc, #376]	@ (800e2a8 <HAL_TIM_ConfigClockSource+0x228>)
 800e12e:	4293      	cmp	r3, r2
 800e130:	f200 809e 	bhi.w	800e270 <HAL_TIM_ConfigClockSource+0x1f0>
 800e134:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e138:	f000 8091 	beq.w	800e25e <HAL_TIM_ConfigClockSource+0x1de>
 800e13c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e140:	f200 8096 	bhi.w	800e270 <HAL_TIM_ConfigClockSource+0x1f0>
 800e144:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e148:	f000 8089 	beq.w	800e25e <HAL_TIM_ConfigClockSource+0x1de>
 800e14c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e150:	f200 808e 	bhi.w	800e270 <HAL_TIM_ConfigClockSource+0x1f0>
 800e154:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e158:	d03e      	beq.n	800e1d8 <HAL_TIM_ConfigClockSource+0x158>
 800e15a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e15e:	f200 8087 	bhi.w	800e270 <HAL_TIM_ConfigClockSource+0x1f0>
 800e162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e166:	f000 8086 	beq.w	800e276 <HAL_TIM_ConfigClockSource+0x1f6>
 800e16a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e16e:	d87f      	bhi.n	800e270 <HAL_TIM_ConfigClockSource+0x1f0>
 800e170:	2b70      	cmp	r3, #112	@ 0x70
 800e172:	d01a      	beq.n	800e1aa <HAL_TIM_ConfigClockSource+0x12a>
 800e174:	2b70      	cmp	r3, #112	@ 0x70
 800e176:	d87b      	bhi.n	800e270 <HAL_TIM_ConfigClockSource+0x1f0>
 800e178:	2b60      	cmp	r3, #96	@ 0x60
 800e17a:	d050      	beq.n	800e21e <HAL_TIM_ConfigClockSource+0x19e>
 800e17c:	2b60      	cmp	r3, #96	@ 0x60
 800e17e:	d877      	bhi.n	800e270 <HAL_TIM_ConfigClockSource+0x1f0>
 800e180:	2b50      	cmp	r3, #80	@ 0x50
 800e182:	d03c      	beq.n	800e1fe <HAL_TIM_ConfigClockSource+0x17e>
 800e184:	2b50      	cmp	r3, #80	@ 0x50
 800e186:	d873      	bhi.n	800e270 <HAL_TIM_ConfigClockSource+0x1f0>
 800e188:	2b40      	cmp	r3, #64	@ 0x40
 800e18a:	d058      	beq.n	800e23e <HAL_TIM_ConfigClockSource+0x1be>
 800e18c:	2b40      	cmp	r3, #64	@ 0x40
 800e18e:	d86f      	bhi.n	800e270 <HAL_TIM_ConfigClockSource+0x1f0>
 800e190:	2b30      	cmp	r3, #48	@ 0x30
 800e192:	d064      	beq.n	800e25e <HAL_TIM_ConfigClockSource+0x1de>
 800e194:	2b30      	cmp	r3, #48	@ 0x30
 800e196:	d86b      	bhi.n	800e270 <HAL_TIM_ConfigClockSource+0x1f0>
 800e198:	2b20      	cmp	r3, #32
 800e19a:	d060      	beq.n	800e25e <HAL_TIM_ConfigClockSource+0x1de>
 800e19c:	2b20      	cmp	r3, #32
 800e19e:	d867      	bhi.n	800e270 <HAL_TIM_ConfigClockSource+0x1f0>
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d05c      	beq.n	800e25e <HAL_TIM_ConfigClockSource+0x1de>
 800e1a4:	2b10      	cmp	r3, #16
 800e1a6:	d05a      	beq.n	800e25e <HAL_TIM_ConfigClockSource+0x1de>
 800e1a8:	e062      	b.n	800e270 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e1ba:	f000 fe8b 	bl	800eed4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	689b      	ldr	r3, [r3, #8]
 800e1c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e1cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	68ba      	ldr	r2, [r7, #8]
 800e1d4:	609a      	str	r2, [r3, #8]
      break;
 800e1d6:	e04f      	b.n	800e278 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e1e8:	f000 fe74 	bl	800eed4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	689a      	ldr	r2, [r3, #8]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e1fa:	609a      	str	r2, [r3, #8]
      break;
 800e1fc:	e03c      	b.n	800e278 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e20a:	461a      	mov	r2, r3
 800e20c:	f000 fde6 	bl	800eddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	2150      	movs	r1, #80	@ 0x50
 800e216:	4618      	mov	r0, r3
 800e218:	f000 fe3f 	bl	800ee9a <TIM_ITRx_SetConfig>
      break;
 800e21c:	e02c      	b.n	800e278 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e22a:	461a      	mov	r2, r3
 800e22c:	f000 fe05 	bl	800ee3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2160      	movs	r1, #96	@ 0x60
 800e236:	4618      	mov	r0, r3
 800e238:	f000 fe2f 	bl	800ee9a <TIM_ITRx_SetConfig>
      break;
 800e23c:	e01c      	b.n	800e278 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e242:	683b      	ldr	r3, [r7, #0]
 800e244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e24a:	461a      	mov	r2, r3
 800e24c:	f000 fdc6 	bl	800eddc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	2140      	movs	r1, #64	@ 0x40
 800e256:	4618      	mov	r0, r3
 800e258:	f000 fe1f 	bl	800ee9a <TIM_ITRx_SetConfig>
      break;
 800e25c:	e00c      	b.n	800e278 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681a      	ldr	r2, [r3, #0]
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4619      	mov	r1, r3
 800e268:	4610      	mov	r0, r2
 800e26a:	f000 fe16 	bl	800ee9a <TIM_ITRx_SetConfig>
      break;
 800e26e:	e003      	b.n	800e278 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800e270:	2301      	movs	r3, #1
 800e272:	73fb      	strb	r3, [r7, #15]
      break;
 800e274:	e000      	b.n	800e278 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800e276:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2201      	movs	r2, #1
 800e27c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2200      	movs	r2, #0
 800e284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e288:	7bfb      	ldrb	r3, [r7, #15]
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3710      	adds	r7, #16
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
 800e292:	bf00      	nop
 800e294:	00100070 	.word	0x00100070
 800e298:	00100060 	.word	0x00100060
 800e29c:	00100050 	.word	0x00100050
 800e2a0:	00100040 	.word	0x00100040
 800e2a4:	00100030 	.word	0x00100030
 800e2a8:	00100020 	.word	0x00100020

0800e2ac <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b083      	sub	sp, #12
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800e2b4:	bf00      	nop
 800e2b6:	370c      	adds	r7, #12
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2be:	4770      	bx	lr

0800e2c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e2c8:	bf00      	nop
 800e2ca:	370c      	adds	r7, #12
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr

0800e2d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e2dc:	bf00      	nop
 800e2de:	370c      	adds	r7, #12
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e6:	4770      	bx	lr

0800e2e8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800e2f0:	bf00      	nop
 800e2f2:	370c      	adds	r7, #12
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fa:	4770      	bx	lr

0800e2fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	b083      	sub	sp, #12
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e304:	bf00      	nop
 800e306:	370c      	adds	r7, #12
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e310:	b480      	push	{r7}
 800e312:	b083      	sub	sp, #12
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800e318:	bf00      	nop
 800e31a:	370c      	adds	r7, #12
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e324:	b480      	push	{r7}
 800e326:	b083      	sub	sp, #12
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e32c:	bf00      	nop
 800e32e:	370c      	adds	r7, #12
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr

0800e338 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e338:	b480      	push	{r7}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800e340:	bf00      	nop
 800e342:	370c      	adds	r7, #12
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e34c:	b480      	push	{r7}
 800e34e:	b083      	sub	sp, #12
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800e354:	bf00      	nop
 800e356:	370c      	adds	r7, #12
 800e358:	46bd      	mov	sp, r7
 800e35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35e:	4770      	bx	lr

0800e360 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800e360:	b480      	push	{r7}
 800e362:	b087      	sub	sp, #28
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	460b      	mov	r3, r1
 800e36a:	607a      	str	r2, [r7, #4]
 800e36c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800e36e:	2300      	movs	r3, #0
 800e370:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d101      	bne.n	800e37c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800e378:	2301      	movs	r3, #1
 800e37a:	e14a      	b.n	800e612 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e382:	b2db      	uxtb	r3, r3
 800e384:	2b01      	cmp	r3, #1
 800e386:	f040 80dd 	bne.w	800e544 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800e38a:	7afb      	ldrb	r3, [r7, #11]
 800e38c:	2b1f      	cmp	r3, #31
 800e38e:	f200 80d6 	bhi.w	800e53e <HAL_TIM_RegisterCallback+0x1de>
 800e392:	a201      	add	r2, pc, #4	@ (adr r2, 800e398 <HAL_TIM_RegisterCallback+0x38>)
 800e394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e398:	0800e419 	.word	0x0800e419
 800e39c:	0800e421 	.word	0x0800e421
 800e3a0:	0800e429 	.word	0x0800e429
 800e3a4:	0800e431 	.word	0x0800e431
 800e3a8:	0800e439 	.word	0x0800e439
 800e3ac:	0800e441 	.word	0x0800e441
 800e3b0:	0800e449 	.word	0x0800e449
 800e3b4:	0800e451 	.word	0x0800e451
 800e3b8:	0800e459 	.word	0x0800e459
 800e3bc:	0800e461 	.word	0x0800e461
 800e3c0:	0800e469 	.word	0x0800e469
 800e3c4:	0800e471 	.word	0x0800e471
 800e3c8:	0800e479 	.word	0x0800e479
 800e3cc:	0800e481 	.word	0x0800e481
 800e3d0:	0800e48b 	.word	0x0800e48b
 800e3d4:	0800e495 	.word	0x0800e495
 800e3d8:	0800e49f 	.word	0x0800e49f
 800e3dc:	0800e4a9 	.word	0x0800e4a9
 800e3e0:	0800e4b3 	.word	0x0800e4b3
 800e3e4:	0800e4bd 	.word	0x0800e4bd
 800e3e8:	0800e4c7 	.word	0x0800e4c7
 800e3ec:	0800e4d1 	.word	0x0800e4d1
 800e3f0:	0800e4db 	.word	0x0800e4db
 800e3f4:	0800e4e5 	.word	0x0800e4e5
 800e3f8:	0800e4ef 	.word	0x0800e4ef
 800e3fc:	0800e4f9 	.word	0x0800e4f9
 800e400:	0800e503 	.word	0x0800e503
 800e404:	0800e50d 	.word	0x0800e50d
 800e408:	0800e517 	.word	0x0800e517
 800e40c:	0800e521 	.word	0x0800e521
 800e410:	0800e52b 	.word	0x0800e52b
 800e414:	0800e535 	.word	0x0800e535
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	687a      	ldr	r2, [r7, #4]
 800e41c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800e41e:	e0f7      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	687a      	ldr	r2, [r7, #4]
 800e424:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800e426:	e0f3      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	687a      	ldr	r2, [r7, #4]
 800e42c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800e42e:	e0ef      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800e436:	e0eb      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800e43e:	e0e7      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800e446:	e0e3      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	687a      	ldr	r2, [r7, #4]
 800e44c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800e44e:	e0df      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	687a      	ldr	r2, [r7, #4]
 800e454:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800e456:	e0db      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800e45e:	e0d7      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	687a      	ldr	r2, [r7, #4]
 800e464:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800e466:	e0d3      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	687a      	ldr	r2, [r7, #4]
 800e46c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800e46e:	e0cf      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	687a      	ldr	r2, [r7, #4]
 800e474:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800e476:	e0cb      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800e47e:	e0c7      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	687a      	ldr	r2, [r7, #4]
 800e484:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800e488:	e0c2      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	687a      	ldr	r2, [r7, #4]
 800e48e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800e492:	e0bd      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800e49c:	e0b8      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800e4a6:	e0b3      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800e4b0:	e0ae      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	687a      	ldr	r2, [r7, #4]
 800e4b6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800e4ba:	e0a9      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800e4c4:	e0a4      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800e4ce:	e09f      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	687a      	ldr	r2, [r7, #4]
 800e4d4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800e4d8:	e09a      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	687a      	ldr	r2, [r7, #4]
 800e4de:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800e4e2:	e095      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	687a      	ldr	r2, [r7, #4]
 800e4e8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800e4ec:	e090      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	687a      	ldr	r2, [r7, #4]
 800e4f2:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800e4f6:	e08b      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	687a      	ldr	r2, [r7, #4]
 800e4fc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800e500:	e086      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800e50a:	e081      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800e514:	e07c      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	687a      	ldr	r2, [r7, #4]
 800e51a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800e51e:	e077      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	687a      	ldr	r2, [r7, #4]
 800e524:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800e528:	e072      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	687a      	ldr	r2, [r7, #4]
 800e52e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800e532:	e06d      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	687a      	ldr	r2, [r7, #4]
 800e538:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800e53c:	e068      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800e53e:	2301      	movs	r3, #1
 800e540:	75fb      	strb	r3, [r7, #23]
        break;
 800e542:	e065      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d15d      	bne.n	800e60c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800e550:	7afb      	ldrb	r3, [r7, #11]
 800e552:	2b0d      	cmp	r3, #13
 800e554:	d857      	bhi.n	800e606 <HAL_TIM_RegisterCallback+0x2a6>
 800e556:	a201      	add	r2, pc, #4	@ (adr r2, 800e55c <HAL_TIM_RegisterCallback+0x1fc>)
 800e558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e55c:	0800e595 	.word	0x0800e595
 800e560:	0800e59d 	.word	0x0800e59d
 800e564:	0800e5a5 	.word	0x0800e5a5
 800e568:	0800e5ad 	.word	0x0800e5ad
 800e56c:	0800e5b5 	.word	0x0800e5b5
 800e570:	0800e5bd 	.word	0x0800e5bd
 800e574:	0800e5c5 	.word	0x0800e5c5
 800e578:	0800e5cd 	.word	0x0800e5cd
 800e57c:	0800e5d5 	.word	0x0800e5d5
 800e580:	0800e5dd 	.word	0x0800e5dd
 800e584:	0800e5e5 	.word	0x0800e5e5
 800e588:	0800e5ed 	.word	0x0800e5ed
 800e58c:	0800e5f5 	.word	0x0800e5f5
 800e590:	0800e5fd 	.word	0x0800e5fd
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800e59a:	e039      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800e5a2:	e035      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800e5aa:	e031      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800e5b2:	e02d      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800e5ba:	e029      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800e5c2:	e025      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800e5ca:	e021      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800e5d2:	e01d      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	687a      	ldr	r2, [r7, #4]
 800e5d8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800e5da:	e019      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800e5e2:	e015      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800e5ea:	e011      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	687a      	ldr	r2, [r7, #4]
 800e5f0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800e5f2:	e00d      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800e5fa:	e009      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	687a      	ldr	r2, [r7, #4]
 800e600:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800e604:	e004      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800e606:	2301      	movs	r3, #1
 800e608:	75fb      	strb	r3, [r7, #23]
        break;
 800e60a:	e001      	b.n	800e610 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800e60c:	2301      	movs	r3, #1
 800e60e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e610:	7dfb      	ldrb	r3, [r7, #23]
}
 800e612:	4618      	mov	r0, r3
 800e614:	371c      	adds	r7, #28
 800e616:	46bd      	mov	sp, r7
 800e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop

0800e620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e620:	b480      	push	{r7}
 800e622:	b085      	sub	sp, #20
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	4a4c      	ldr	r2, [pc, #304]	@ (800e764 <TIM_Base_SetConfig+0x144>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d017      	beq.n	800e668 <TIM_Base_SetConfig+0x48>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e63e:	d013      	beq.n	800e668 <TIM_Base_SetConfig+0x48>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4a49      	ldr	r2, [pc, #292]	@ (800e768 <TIM_Base_SetConfig+0x148>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d00f      	beq.n	800e668 <TIM_Base_SetConfig+0x48>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	4a48      	ldr	r2, [pc, #288]	@ (800e76c <TIM_Base_SetConfig+0x14c>)
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d00b      	beq.n	800e668 <TIM_Base_SetConfig+0x48>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	4a47      	ldr	r2, [pc, #284]	@ (800e770 <TIM_Base_SetConfig+0x150>)
 800e654:	4293      	cmp	r3, r2
 800e656:	d007      	beq.n	800e668 <TIM_Base_SetConfig+0x48>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	4a46      	ldr	r2, [pc, #280]	@ (800e774 <TIM_Base_SetConfig+0x154>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d003      	beq.n	800e668 <TIM_Base_SetConfig+0x48>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	4a45      	ldr	r2, [pc, #276]	@ (800e778 <TIM_Base_SetConfig+0x158>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d108      	bne.n	800e67a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e66e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	685b      	ldr	r3, [r3, #4]
 800e674:	68fa      	ldr	r2, [r7, #12]
 800e676:	4313      	orrs	r3, r2
 800e678:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	4a39      	ldr	r2, [pc, #228]	@ (800e764 <TIM_Base_SetConfig+0x144>)
 800e67e:	4293      	cmp	r3, r2
 800e680:	d023      	beq.n	800e6ca <TIM_Base_SetConfig+0xaa>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e688:	d01f      	beq.n	800e6ca <TIM_Base_SetConfig+0xaa>
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	4a36      	ldr	r2, [pc, #216]	@ (800e768 <TIM_Base_SetConfig+0x148>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d01b      	beq.n	800e6ca <TIM_Base_SetConfig+0xaa>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	4a35      	ldr	r2, [pc, #212]	@ (800e76c <TIM_Base_SetConfig+0x14c>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d017      	beq.n	800e6ca <TIM_Base_SetConfig+0xaa>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	4a34      	ldr	r2, [pc, #208]	@ (800e770 <TIM_Base_SetConfig+0x150>)
 800e69e:	4293      	cmp	r3, r2
 800e6a0:	d013      	beq.n	800e6ca <TIM_Base_SetConfig+0xaa>
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	4a33      	ldr	r2, [pc, #204]	@ (800e774 <TIM_Base_SetConfig+0x154>)
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	d00f      	beq.n	800e6ca <TIM_Base_SetConfig+0xaa>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	4a33      	ldr	r2, [pc, #204]	@ (800e77c <TIM_Base_SetConfig+0x15c>)
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	d00b      	beq.n	800e6ca <TIM_Base_SetConfig+0xaa>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	4a32      	ldr	r2, [pc, #200]	@ (800e780 <TIM_Base_SetConfig+0x160>)
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d007      	beq.n	800e6ca <TIM_Base_SetConfig+0xaa>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	4a31      	ldr	r2, [pc, #196]	@ (800e784 <TIM_Base_SetConfig+0x164>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d003      	beq.n	800e6ca <TIM_Base_SetConfig+0xaa>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	4a2c      	ldr	r2, [pc, #176]	@ (800e778 <TIM_Base_SetConfig+0x158>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d108      	bne.n	800e6dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e6d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	68db      	ldr	r3, [r3, #12]
 800e6d6:	68fa      	ldr	r2, [r7, #12]
 800e6d8:	4313      	orrs	r3, r2
 800e6da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	695b      	ldr	r3, [r3, #20]
 800e6e6:	4313      	orrs	r3, r2
 800e6e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	689a      	ldr	r2, [r3, #8]
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	4a18      	ldr	r2, [pc, #96]	@ (800e764 <TIM_Base_SetConfig+0x144>)
 800e704:	4293      	cmp	r3, r2
 800e706:	d013      	beq.n	800e730 <TIM_Base_SetConfig+0x110>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	4a1a      	ldr	r2, [pc, #104]	@ (800e774 <TIM_Base_SetConfig+0x154>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d00f      	beq.n	800e730 <TIM_Base_SetConfig+0x110>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	4a1a      	ldr	r2, [pc, #104]	@ (800e77c <TIM_Base_SetConfig+0x15c>)
 800e714:	4293      	cmp	r3, r2
 800e716:	d00b      	beq.n	800e730 <TIM_Base_SetConfig+0x110>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	4a19      	ldr	r2, [pc, #100]	@ (800e780 <TIM_Base_SetConfig+0x160>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d007      	beq.n	800e730 <TIM_Base_SetConfig+0x110>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	4a18      	ldr	r2, [pc, #96]	@ (800e784 <TIM_Base_SetConfig+0x164>)
 800e724:	4293      	cmp	r3, r2
 800e726:	d003      	beq.n	800e730 <TIM_Base_SetConfig+0x110>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	4a13      	ldr	r2, [pc, #76]	@ (800e778 <TIM_Base_SetConfig+0x158>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d103      	bne.n	800e738 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	691a      	ldr	r2, [r3, #16]
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2201      	movs	r2, #1
 800e73c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	691b      	ldr	r3, [r3, #16]
 800e742:	f003 0301 	and.w	r3, r3, #1
 800e746:	2b01      	cmp	r3, #1
 800e748:	d105      	bne.n	800e756 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	691b      	ldr	r3, [r3, #16]
 800e74e:	f023 0201 	bic.w	r2, r3, #1
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	611a      	str	r2, [r3, #16]
  }
}
 800e756:	bf00      	nop
 800e758:	3714      	adds	r7, #20
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr
 800e762:	bf00      	nop
 800e764:	40012c00 	.word	0x40012c00
 800e768:	40000400 	.word	0x40000400
 800e76c:	40000800 	.word	0x40000800
 800e770:	40000c00 	.word	0x40000c00
 800e774:	40013400 	.word	0x40013400
 800e778:	40015000 	.word	0x40015000
 800e77c:	40014000 	.word	0x40014000
 800e780:	40014400 	.word	0x40014400
 800e784:	40014800 	.word	0x40014800

0800e788 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e788:	b480      	push	{r7}
 800e78a:	b087      	sub	sp, #28
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
 800e790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6a1b      	ldr	r3, [r3, #32]
 800e796:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6a1b      	ldr	r3, [r3, #32]
 800e79c:	f023 0201 	bic.w	r2, r3, #1
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	699b      	ldr	r3, [r3, #24]
 800e7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e7b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e7ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	f023 0303 	bic.w	r3, r3, #3
 800e7c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	68fa      	ldr	r2, [r7, #12]
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	f023 0302 	bic.w	r3, r3, #2
 800e7d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	689b      	ldr	r3, [r3, #8]
 800e7da:	697a      	ldr	r2, [r7, #20]
 800e7dc:	4313      	orrs	r3, r2
 800e7de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	4a30      	ldr	r2, [pc, #192]	@ (800e8a4 <TIM_OC1_SetConfig+0x11c>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d013      	beq.n	800e810 <TIM_OC1_SetConfig+0x88>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	4a2f      	ldr	r2, [pc, #188]	@ (800e8a8 <TIM_OC1_SetConfig+0x120>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d00f      	beq.n	800e810 <TIM_OC1_SetConfig+0x88>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	4a2e      	ldr	r2, [pc, #184]	@ (800e8ac <TIM_OC1_SetConfig+0x124>)
 800e7f4:	4293      	cmp	r3, r2
 800e7f6:	d00b      	beq.n	800e810 <TIM_OC1_SetConfig+0x88>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	4a2d      	ldr	r2, [pc, #180]	@ (800e8b0 <TIM_OC1_SetConfig+0x128>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d007      	beq.n	800e810 <TIM_OC1_SetConfig+0x88>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	4a2c      	ldr	r2, [pc, #176]	@ (800e8b4 <TIM_OC1_SetConfig+0x12c>)
 800e804:	4293      	cmp	r3, r2
 800e806:	d003      	beq.n	800e810 <TIM_OC1_SetConfig+0x88>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	4a2b      	ldr	r2, [pc, #172]	@ (800e8b8 <TIM_OC1_SetConfig+0x130>)
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d10c      	bne.n	800e82a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	f023 0308 	bic.w	r3, r3, #8
 800e816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	68db      	ldr	r3, [r3, #12]
 800e81c:	697a      	ldr	r2, [r7, #20]
 800e81e:	4313      	orrs	r3, r2
 800e820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	f023 0304 	bic.w	r3, r3, #4
 800e828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	4a1d      	ldr	r2, [pc, #116]	@ (800e8a4 <TIM_OC1_SetConfig+0x11c>)
 800e82e:	4293      	cmp	r3, r2
 800e830:	d013      	beq.n	800e85a <TIM_OC1_SetConfig+0xd2>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	4a1c      	ldr	r2, [pc, #112]	@ (800e8a8 <TIM_OC1_SetConfig+0x120>)
 800e836:	4293      	cmp	r3, r2
 800e838:	d00f      	beq.n	800e85a <TIM_OC1_SetConfig+0xd2>
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	4a1b      	ldr	r2, [pc, #108]	@ (800e8ac <TIM_OC1_SetConfig+0x124>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d00b      	beq.n	800e85a <TIM_OC1_SetConfig+0xd2>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	4a1a      	ldr	r2, [pc, #104]	@ (800e8b0 <TIM_OC1_SetConfig+0x128>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d007      	beq.n	800e85a <TIM_OC1_SetConfig+0xd2>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	4a19      	ldr	r2, [pc, #100]	@ (800e8b4 <TIM_OC1_SetConfig+0x12c>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d003      	beq.n	800e85a <TIM_OC1_SetConfig+0xd2>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	4a18      	ldr	r2, [pc, #96]	@ (800e8b8 <TIM_OC1_SetConfig+0x130>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d111      	bne.n	800e87e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	695b      	ldr	r3, [r3, #20]
 800e86e:	693a      	ldr	r2, [r7, #16]
 800e870:	4313      	orrs	r3, r2
 800e872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	699b      	ldr	r3, [r3, #24]
 800e878:	693a      	ldr	r2, [r7, #16]
 800e87a:	4313      	orrs	r3, r2
 800e87c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	693a      	ldr	r2, [r7, #16]
 800e882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	68fa      	ldr	r2, [r7, #12]
 800e888:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	685a      	ldr	r2, [r3, #4]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	697a      	ldr	r2, [r7, #20]
 800e896:	621a      	str	r2, [r3, #32]
}
 800e898:	bf00      	nop
 800e89a:	371c      	adds	r7, #28
 800e89c:	46bd      	mov	sp, r7
 800e89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a2:	4770      	bx	lr
 800e8a4:	40012c00 	.word	0x40012c00
 800e8a8:	40013400 	.word	0x40013400
 800e8ac:	40014000 	.word	0x40014000
 800e8b0:	40014400 	.word	0x40014400
 800e8b4:	40014800 	.word	0x40014800
 800e8b8:	40015000 	.word	0x40015000

0800e8bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b087      	sub	sp, #28
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6a1b      	ldr	r3, [r3, #32]
 800e8ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6a1b      	ldr	r3, [r3, #32]
 800e8d0:	f023 0210 	bic.w	r2, r3, #16
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	685b      	ldr	r3, [r3, #4]
 800e8dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	699b      	ldr	r3, [r3, #24]
 800e8e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800e8ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e8ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e8f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	021b      	lsls	r3, r3, #8
 800e8fe:	68fa      	ldr	r2, [r7, #12]
 800e900:	4313      	orrs	r3, r2
 800e902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	f023 0320 	bic.w	r3, r3, #32
 800e90a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	689b      	ldr	r3, [r3, #8]
 800e910:	011b      	lsls	r3, r3, #4
 800e912:	697a      	ldr	r2, [r7, #20]
 800e914:	4313      	orrs	r3, r2
 800e916:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	4a2c      	ldr	r2, [pc, #176]	@ (800e9cc <TIM_OC2_SetConfig+0x110>)
 800e91c:	4293      	cmp	r3, r2
 800e91e:	d007      	beq.n	800e930 <TIM_OC2_SetConfig+0x74>
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	4a2b      	ldr	r2, [pc, #172]	@ (800e9d0 <TIM_OC2_SetConfig+0x114>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d003      	beq.n	800e930 <TIM_OC2_SetConfig+0x74>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	4a2a      	ldr	r2, [pc, #168]	@ (800e9d4 <TIM_OC2_SetConfig+0x118>)
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d10d      	bne.n	800e94c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	68db      	ldr	r3, [r3, #12]
 800e93c:	011b      	lsls	r3, r3, #4
 800e93e:	697a      	ldr	r2, [r7, #20]
 800e940:	4313      	orrs	r3, r2
 800e942:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e94a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	4a1f      	ldr	r2, [pc, #124]	@ (800e9cc <TIM_OC2_SetConfig+0x110>)
 800e950:	4293      	cmp	r3, r2
 800e952:	d013      	beq.n	800e97c <TIM_OC2_SetConfig+0xc0>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	4a1e      	ldr	r2, [pc, #120]	@ (800e9d0 <TIM_OC2_SetConfig+0x114>)
 800e958:	4293      	cmp	r3, r2
 800e95a:	d00f      	beq.n	800e97c <TIM_OC2_SetConfig+0xc0>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	4a1e      	ldr	r2, [pc, #120]	@ (800e9d8 <TIM_OC2_SetConfig+0x11c>)
 800e960:	4293      	cmp	r3, r2
 800e962:	d00b      	beq.n	800e97c <TIM_OC2_SetConfig+0xc0>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	4a1d      	ldr	r2, [pc, #116]	@ (800e9dc <TIM_OC2_SetConfig+0x120>)
 800e968:	4293      	cmp	r3, r2
 800e96a:	d007      	beq.n	800e97c <TIM_OC2_SetConfig+0xc0>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	4a1c      	ldr	r2, [pc, #112]	@ (800e9e0 <TIM_OC2_SetConfig+0x124>)
 800e970:	4293      	cmp	r3, r2
 800e972:	d003      	beq.n	800e97c <TIM_OC2_SetConfig+0xc0>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	4a17      	ldr	r2, [pc, #92]	@ (800e9d4 <TIM_OC2_SetConfig+0x118>)
 800e978:	4293      	cmp	r3, r2
 800e97a:	d113      	bne.n	800e9a4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e982:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e984:	693b      	ldr	r3, [r7, #16]
 800e986:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e98a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	695b      	ldr	r3, [r3, #20]
 800e990:	009b      	lsls	r3, r3, #2
 800e992:	693a      	ldr	r2, [r7, #16]
 800e994:	4313      	orrs	r3, r2
 800e996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	699b      	ldr	r3, [r3, #24]
 800e99c:	009b      	lsls	r3, r3, #2
 800e99e:	693a      	ldr	r2, [r7, #16]
 800e9a0:	4313      	orrs	r3, r2
 800e9a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	693a      	ldr	r2, [r7, #16]
 800e9a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	68fa      	ldr	r2, [r7, #12]
 800e9ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	685a      	ldr	r2, [r3, #4]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	697a      	ldr	r2, [r7, #20]
 800e9bc:	621a      	str	r2, [r3, #32]
}
 800e9be:	bf00      	nop
 800e9c0:	371c      	adds	r7, #28
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr
 800e9ca:	bf00      	nop
 800e9cc:	40012c00 	.word	0x40012c00
 800e9d0:	40013400 	.word	0x40013400
 800e9d4:	40015000 	.word	0x40015000
 800e9d8:	40014000 	.word	0x40014000
 800e9dc:	40014400 	.word	0x40014400
 800e9e0:	40014800 	.word	0x40014800

0800e9e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b087      	sub	sp, #28
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6a1b      	ldr	r3, [r3, #32]
 800e9f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6a1b      	ldr	r3, [r3, #32]
 800e9f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	69db      	ldr	r3, [r3, #28]
 800ea0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ea12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f023 0303 	bic.w	r3, r3, #3
 800ea1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	68fa      	ldr	r2, [r7, #12]
 800ea26:	4313      	orrs	r3, r2
 800ea28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ea30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	689b      	ldr	r3, [r3, #8]
 800ea36:	021b      	lsls	r3, r3, #8
 800ea38:	697a      	ldr	r2, [r7, #20]
 800ea3a:	4313      	orrs	r3, r2
 800ea3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4a2b      	ldr	r2, [pc, #172]	@ (800eaf0 <TIM_OC3_SetConfig+0x10c>)
 800ea42:	4293      	cmp	r3, r2
 800ea44:	d007      	beq.n	800ea56 <TIM_OC3_SetConfig+0x72>
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	4a2a      	ldr	r2, [pc, #168]	@ (800eaf4 <TIM_OC3_SetConfig+0x110>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	d003      	beq.n	800ea56 <TIM_OC3_SetConfig+0x72>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4a29      	ldr	r2, [pc, #164]	@ (800eaf8 <TIM_OC3_SetConfig+0x114>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d10d      	bne.n	800ea72 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ea5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	021b      	lsls	r3, r3, #8
 800ea64:	697a      	ldr	r2, [r7, #20]
 800ea66:	4313      	orrs	r3, r2
 800ea68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ea70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	4a1e      	ldr	r2, [pc, #120]	@ (800eaf0 <TIM_OC3_SetConfig+0x10c>)
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d013      	beq.n	800eaa2 <TIM_OC3_SetConfig+0xbe>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	4a1d      	ldr	r2, [pc, #116]	@ (800eaf4 <TIM_OC3_SetConfig+0x110>)
 800ea7e:	4293      	cmp	r3, r2
 800ea80:	d00f      	beq.n	800eaa2 <TIM_OC3_SetConfig+0xbe>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	4a1d      	ldr	r2, [pc, #116]	@ (800eafc <TIM_OC3_SetConfig+0x118>)
 800ea86:	4293      	cmp	r3, r2
 800ea88:	d00b      	beq.n	800eaa2 <TIM_OC3_SetConfig+0xbe>
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	4a1c      	ldr	r2, [pc, #112]	@ (800eb00 <TIM_OC3_SetConfig+0x11c>)
 800ea8e:	4293      	cmp	r3, r2
 800ea90:	d007      	beq.n	800eaa2 <TIM_OC3_SetConfig+0xbe>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	4a1b      	ldr	r2, [pc, #108]	@ (800eb04 <TIM_OC3_SetConfig+0x120>)
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d003      	beq.n	800eaa2 <TIM_OC3_SetConfig+0xbe>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	4a16      	ldr	r2, [pc, #88]	@ (800eaf8 <TIM_OC3_SetConfig+0x114>)
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	d113      	bne.n	800eaca <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eaa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	695b      	ldr	r3, [r3, #20]
 800eab6:	011b      	lsls	r3, r3, #4
 800eab8:	693a      	ldr	r2, [r7, #16]
 800eaba:	4313      	orrs	r3, r2
 800eabc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	699b      	ldr	r3, [r3, #24]
 800eac2:	011b      	lsls	r3, r3, #4
 800eac4:	693a      	ldr	r2, [r7, #16]
 800eac6:	4313      	orrs	r3, r2
 800eac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	693a      	ldr	r2, [r7, #16]
 800eace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	68fa      	ldr	r2, [r7, #12]
 800ead4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	685a      	ldr	r2, [r3, #4]
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	697a      	ldr	r2, [r7, #20]
 800eae2:	621a      	str	r2, [r3, #32]
}
 800eae4:	bf00      	nop
 800eae6:	371c      	adds	r7, #28
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr
 800eaf0:	40012c00 	.word	0x40012c00
 800eaf4:	40013400 	.word	0x40013400
 800eaf8:	40015000 	.word	0x40015000
 800eafc:	40014000 	.word	0x40014000
 800eb00:	40014400 	.word	0x40014400
 800eb04:	40014800 	.word	0x40014800

0800eb08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b087      	sub	sp, #28
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6a1b      	ldr	r3, [r3, #32]
 800eb16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6a1b      	ldr	r3, [r3, #32]
 800eb1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	69db      	ldr	r3, [r3, #28]
 800eb2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800eb36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eb3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eb42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	021b      	lsls	r3, r3, #8
 800eb4a:	68fa      	ldr	r2, [r7, #12]
 800eb4c:	4313      	orrs	r3, r2
 800eb4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eb56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	689b      	ldr	r3, [r3, #8]
 800eb5c:	031b      	lsls	r3, r3, #12
 800eb5e:	697a      	ldr	r2, [r7, #20]
 800eb60:	4313      	orrs	r3, r2
 800eb62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	4a2c      	ldr	r2, [pc, #176]	@ (800ec18 <TIM_OC4_SetConfig+0x110>)
 800eb68:	4293      	cmp	r3, r2
 800eb6a:	d007      	beq.n	800eb7c <TIM_OC4_SetConfig+0x74>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	4a2b      	ldr	r2, [pc, #172]	@ (800ec1c <TIM_OC4_SetConfig+0x114>)
 800eb70:	4293      	cmp	r3, r2
 800eb72:	d003      	beq.n	800eb7c <TIM_OC4_SetConfig+0x74>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	4a2a      	ldr	r2, [pc, #168]	@ (800ec20 <TIM_OC4_SetConfig+0x118>)
 800eb78:	4293      	cmp	r3, r2
 800eb7a:	d10d      	bne.n	800eb98 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800eb82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	68db      	ldr	r3, [r3, #12]
 800eb88:	031b      	lsls	r3, r3, #12
 800eb8a:	697a      	ldr	r2, [r7, #20]
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800eb96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	4a1f      	ldr	r2, [pc, #124]	@ (800ec18 <TIM_OC4_SetConfig+0x110>)
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d013      	beq.n	800ebc8 <TIM_OC4_SetConfig+0xc0>
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	4a1e      	ldr	r2, [pc, #120]	@ (800ec1c <TIM_OC4_SetConfig+0x114>)
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d00f      	beq.n	800ebc8 <TIM_OC4_SetConfig+0xc0>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	4a1e      	ldr	r2, [pc, #120]	@ (800ec24 <TIM_OC4_SetConfig+0x11c>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d00b      	beq.n	800ebc8 <TIM_OC4_SetConfig+0xc0>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	4a1d      	ldr	r2, [pc, #116]	@ (800ec28 <TIM_OC4_SetConfig+0x120>)
 800ebb4:	4293      	cmp	r3, r2
 800ebb6:	d007      	beq.n	800ebc8 <TIM_OC4_SetConfig+0xc0>
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	4a1c      	ldr	r2, [pc, #112]	@ (800ec2c <TIM_OC4_SetConfig+0x124>)
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	d003      	beq.n	800ebc8 <TIM_OC4_SetConfig+0xc0>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	4a17      	ldr	r2, [pc, #92]	@ (800ec20 <TIM_OC4_SetConfig+0x118>)
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d113      	bne.n	800ebf0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ebce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ebd6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	695b      	ldr	r3, [r3, #20]
 800ebdc:	019b      	lsls	r3, r3, #6
 800ebde:	693a      	ldr	r2, [r7, #16]
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	699b      	ldr	r3, [r3, #24]
 800ebe8:	019b      	lsls	r3, r3, #6
 800ebea:	693a      	ldr	r2, [r7, #16]
 800ebec:	4313      	orrs	r3, r2
 800ebee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	693a      	ldr	r2, [r7, #16]
 800ebf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	68fa      	ldr	r2, [r7, #12]
 800ebfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	685a      	ldr	r2, [r3, #4]
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	697a      	ldr	r2, [r7, #20]
 800ec08:	621a      	str	r2, [r3, #32]
}
 800ec0a:	bf00      	nop
 800ec0c:	371c      	adds	r7, #28
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr
 800ec16:	bf00      	nop
 800ec18:	40012c00 	.word	0x40012c00
 800ec1c:	40013400 	.word	0x40013400
 800ec20:	40015000 	.word	0x40015000
 800ec24:	40014000 	.word	0x40014000
 800ec28:	40014400 	.word	0x40014400
 800ec2c:	40014800 	.word	0x40014800

0800ec30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b087      	sub	sp, #28
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	6a1b      	ldr	r3, [r3, #32]
 800ec3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6a1b      	ldr	r3, [r3, #32]
 800ec44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ec56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ec5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	68fa      	ldr	r2, [r7, #12]
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ec6e:	693b      	ldr	r3, [r7, #16]
 800ec70:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ec74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	689b      	ldr	r3, [r3, #8]
 800ec7a:	041b      	lsls	r3, r3, #16
 800ec7c:	693a      	ldr	r2, [r7, #16]
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	4a19      	ldr	r2, [pc, #100]	@ (800ecec <TIM_OC5_SetConfig+0xbc>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d013      	beq.n	800ecb2 <TIM_OC5_SetConfig+0x82>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	4a18      	ldr	r2, [pc, #96]	@ (800ecf0 <TIM_OC5_SetConfig+0xc0>)
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	d00f      	beq.n	800ecb2 <TIM_OC5_SetConfig+0x82>
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	4a17      	ldr	r2, [pc, #92]	@ (800ecf4 <TIM_OC5_SetConfig+0xc4>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d00b      	beq.n	800ecb2 <TIM_OC5_SetConfig+0x82>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	4a16      	ldr	r2, [pc, #88]	@ (800ecf8 <TIM_OC5_SetConfig+0xc8>)
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d007      	beq.n	800ecb2 <TIM_OC5_SetConfig+0x82>
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4a15      	ldr	r2, [pc, #84]	@ (800ecfc <TIM_OC5_SetConfig+0xcc>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d003      	beq.n	800ecb2 <TIM_OC5_SetConfig+0x82>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4a14      	ldr	r2, [pc, #80]	@ (800ed00 <TIM_OC5_SetConfig+0xd0>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d109      	bne.n	800ecc6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ecb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	695b      	ldr	r3, [r3, #20]
 800ecbe:	021b      	lsls	r3, r3, #8
 800ecc0:	697a      	ldr	r2, [r7, #20]
 800ecc2:	4313      	orrs	r3, r2
 800ecc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	697a      	ldr	r2, [r7, #20]
 800ecca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	68fa      	ldr	r2, [r7, #12]
 800ecd0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	685a      	ldr	r2, [r3, #4]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	693a      	ldr	r2, [r7, #16]
 800ecde:	621a      	str	r2, [r3, #32]
}
 800ece0:	bf00      	nop
 800ece2:	371c      	adds	r7, #28
 800ece4:	46bd      	mov	sp, r7
 800ece6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecea:	4770      	bx	lr
 800ecec:	40012c00 	.word	0x40012c00
 800ecf0:	40013400 	.word	0x40013400
 800ecf4:	40014000 	.word	0x40014000
 800ecf8:	40014400 	.word	0x40014400
 800ecfc:	40014800 	.word	0x40014800
 800ed00:	40015000 	.word	0x40015000

0800ed04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b087      	sub	sp, #28
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6a1b      	ldr	r3, [r3, #32]
 800ed12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6a1b      	ldr	r3, [r3, #32]
 800ed18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ed32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ed36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	021b      	lsls	r3, r3, #8
 800ed3e:	68fa      	ldr	r2, [r7, #12]
 800ed40:	4313      	orrs	r3, r2
 800ed42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ed4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	689b      	ldr	r3, [r3, #8]
 800ed50:	051b      	lsls	r3, r3, #20
 800ed52:	693a      	ldr	r2, [r7, #16]
 800ed54:	4313      	orrs	r3, r2
 800ed56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	4a1a      	ldr	r2, [pc, #104]	@ (800edc4 <TIM_OC6_SetConfig+0xc0>)
 800ed5c:	4293      	cmp	r3, r2
 800ed5e:	d013      	beq.n	800ed88 <TIM_OC6_SetConfig+0x84>
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	4a19      	ldr	r2, [pc, #100]	@ (800edc8 <TIM_OC6_SetConfig+0xc4>)
 800ed64:	4293      	cmp	r3, r2
 800ed66:	d00f      	beq.n	800ed88 <TIM_OC6_SetConfig+0x84>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	4a18      	ldr	r2, [pc, #96]	@ (800edcc <TIM_OC6_SetConfig+0xc8>)
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d00b      	beq.n	800ed88 <TIM_OC6_SetConfig+0x84>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	4a17      	ldr	r2, [pc, #92]	@ (800edd0 <TIM_OC6_SetConfig+0xcc>)
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d007      	beq.n	800ed88 <TIM_OC6_SetConfig+0x84>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	4a16      	ldr	r2, [pc, #88]	@ (800edd4 <TIM_OC6_SetConfig+0xd0>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d003      	beq.n	800ed88 <TIM_OC6_SetConfig+0x84>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	4a15      	ldr	r2, [pc, #84]	@ (800edd8 <TIM_OC6_SetConfig+0xd4>)
 800ed84:	4293      	cmp	r3, r2
 800ed86:	d109      	bne.n	800ed9c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ed8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	695b      	ldr	r3, [r3, #20]
 800ed94:	029b      	lsls	r3, r3, #10
 800ed96:	697a      	ldr	r2, [r7, #20]
 800ed98:	4313      	orrs	r3, r2
 800ed9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	697a      	ldr	r2, [r7, #20]
 800eda0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	68fa      	ldr	r2, [r7, #12]
 800eda6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	685a      	ldr	r2, [r3, #4]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	693a      	ldr	r2, [r7, #16]
 800edb4:	621a      	str	r2, [r3, #32]
}
 800edb6:	bf00      	nop
 800edb8:	371c      	adds	r7, #28
 800edba:	46bd      	mov	sp, r7
 800edbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc0:	4770      	bx	lr
 800edc2:	bf00      	nop
 800edc4:	40012c00 	.word	0x40012c00
 800edc8:	40013400 	.word	0x40013400
 800edcc:	40014000 	.word	0x40014000
 800edd0:	40014400 	.word	0x40014400
 800edd4:	40014800 	.word	0x40014800
 800edd8:	40015000 	.word	0x40015000

0800eddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eddc:	b480      	push	{r7}
 800edde:	b087      	sub	sp, #28
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	60f8      	str	r0, [r7, #12]
 800ede4:	60b9      	str	r1, [r7, #8]
 800ede6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	6a1b      	ldr	r3, [r3, #32]
 800edec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	6a1b      	ldr	r3, [r3, #32]
 800edf2:	f023 0201 	bic.w	r2, r3, #1
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	699b      	ldr	r3, [r3, #24]
 800edfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ee06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	011b      	lsls	r3, r3, #4
 800ee0c:	693a      	ldr	r2, [r7, #16]
 800ee0e:	4313      	orrs	r3, r2
 800ee10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	f023 030a 	bic.w	r3, r3, #10
 800ee18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ee1a:	697a      	ldr	r2, [r7, #20]
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	4313      	orrs	r3, r2
 800ee20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	693a      	ldr	r2, [r7, #16]
 800ee26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	697a      	ldr	r2, [r7, #20]
 800ee2c:	621a      	str	r2, [r3, #32]
}
 800ee2e:	bf00      	nop
 800ee30:	371c      	adds	r7, #28
 800ee32:	46bd      	mov	sp, r7
 800ee34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee38:	4770      	bx	lr

0800ee3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ee3a:	b480      	push	{r7}
 800ee3c:	b087      	sub	sp, #28
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	60f8      	str	r0, [r7, #12]
 800ee42:	60b9      	str	r1, [r7, #8]
 800ee44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	6a1b      	ldr	r3, [r3, #32]
 800ee4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	6a1b      	ldr	r3, [r3, #32]
 800ee50:	f023 0210 	bic.w	r2, r3, #16
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	699b      	ldr	r3, [r3, #24]
 800ee5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ee5e:	693b      	ldr	r3, [r7, #16]
 800ee60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ee64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	031b      	lsls	r3, r3, #12
 800ee6a:	693a      	ldr	r2, [r7, #16]
 800ee6c:	4313      	orrs	r3, r2
 800ee6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ee76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	011b      	lsls	r3, r3, #4
 800ee7c:	697a      	ldr	r2, [r7, #20]
 800ee7e:	4313      	orrs	r3, r2
 800ee80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	693a      	ldr	r2, [r7, #16]
 800ee86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	697a      	ldr	r2, [r7, #20]
 800ee8c:	621a      	str	r2, [r3, #32]
}
 800ee8e:	bf00      	nop
 800ee90:	371c      	adds	r7, #28
 800ee92:	46bd      	mov	sp, r7
 800ee94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee98:	4770      	bx	lr

0800ee9a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ee9a:	b480      	push	{r7}
 800ee9c:	b085      	sub	sp, #20
 800ee9e:	af00      	add	r7, sp, #0
 800eea0:	6078      	str	r0, [r7, #4]
 800eea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	689b      	ldr	r3, [r3, #8]
 800eea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800eeb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eeb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eeb6:	683a      	ldr	r2, [r7, #0]
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	4313      	orrs	r3, r2
 800eebc:	f043 0307 	orr.w	r3, r3, #7
 800eec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	68fa      	ldr	r2, [r7, #12]
 800eec6:	609a      	str	r2, [r3, #8]
}
 800eec8:	bf00      	nop
 800eeca:	3714      	adds	r7, #20
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	4770      	bx	lr

0800eed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b087      	sub	sp, #28
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	607a      	str	r2, [r7, #4]
 800eee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	689b      	ldr	r3, [r3, #8]
 800eee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eeee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	021a      	lsls	r2, r3, #8
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	431a      	orrs	r2, r3
 800eef8:	68bb      	ldr	r3, [r7, #8]
 800eefa:	4313      	orrs	r3, r2
 800eefc:	697a      	ldr	r2, [r7, #20]
 800eefe:	4313      	orrs	r3, r2
 800ef00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	697a      	ldr	r2, [r7, #20]
 800ef06:	609a      	str	r2, [r3, #8]
}
 800ef08:	bf00      	nop
 800ef0a:	371c      	adds	r7, #28
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ef14:	b480      	push	{r7}
 800ef16:	b087      	sub	sp, #28
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	f003 031f 	and.w	r3, r3, #31
 800ef26:	2201      	movs	r2, #1
 800ef28:	fa02 f303 	lsl.w	r3, r2, r3
 800ef2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	6a1a      	ldr	r2, [r3, #32]
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	43db      	mvns	r3, r3
 800ef36:	401a      	ands	r2, r3
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	6a1a      	ldr	r2, [r3, #32]
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	f003 031f 	and.w	r3, r3, #31
 800ef46:	6879      	ldr	r1, [r7, #4]
 800ef48:	fa01 f303 	lsl.w	r3, r1, r3
 800ef4c:	431a      	orrs	r2, r3
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	621a      	str	r2, [r3, #32]
}
 800ef52:	bf00      	nop
 800ef54:	371c      	adds	r7, #28
 800ef56:	46bd      	mov	sp, r7
 800ef58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5c:	4770      	bx	lr
	...

0800ef60 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800ef60:	b480      	push	{r7}
 800ef62:	b083      	sub	sp, #12
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	4a26      	ldr	r2, [pc, #152]	@ (800f004 <TIM_ResetCallback+0xa4>)
 800ef6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	4a25      	ldr	r2, [pc, #148]	@ (800f008 <TIM_ResetCallback+0xa8>)
 800ef74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	4a24      	ldr	r2, [pc, #144]	@ (800f00c <TIM_ResetCallback+0xac>)
 800ef7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	4a23      	ldr	r2, [pc, #140]	@ (800f010 <TIM_ResetCallback+0xb0>)
 800ef84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	4a22      	ldr	r2, [pc, #136]	@ (800f014 <TIM_ResetCallback+0xb4>)
 800ef8c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	4a21      	ldr	r2, [pc, #132]	@ (800f018 <TIM_ResetCallback+0xb8>)
 800ef94:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	4a20      	ldr	r2, [pc, #128]	@ (800f01c <TIM_ResetCallback+0xbc>)
 800ef9c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	4a1f      	ldr	r2, [pc, #124]	@ (800f020 <TIM_ResetCallback+0xc0>)
 800efa4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	4a1e      	ldr	r2, [pc, #120]	@ (800f024 <TIM_ResetCallback+0xc4>)
 800efac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	4a1d      	ldr	r2, [pc, #116]	@ (800f028 <TIM_ResetCallback+0xc8>)
 800efb4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	4a1c      	ldr	r2, [pc, #112]	@ (800f02c <TIM_ResetCallback+0xcc>)
 800efbc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	4a1b      	ldr	r2, [pc, #108]	@ (800f030 <TIM_ResetCallback+0xd0>)
 800efc4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	4a1a      	ldr	r2, [pc, #104]	@ (800f034 <TIM_ResetCallback+0xd4>)
 800efcc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	4a19      	ldr	r2, [pc, #100]	@ (800f038 <TIM_ResetCallback+0xd8>)
 800efd4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	4a18      	ldr	r2, [pc, #96]	@ (800f03c <TIM_ResetCallback+0xdc>)
 800efdc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	4a17      	ldr	r2, [pc, #92]	@ (800f040 <TIM_ResetCallback+0xe0>)
 800efe4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	4a16      	ldr	r2, [pc, #88]	@ (800f044 <TIM_ResetCallback+0xe4>)
 800efec:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	4a15      	ldr	r2, [pc, #84]	@ (800f048 <TIM_ResetCallback+0xe8>)
 800eff4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800eff8:	bf00      	nop
 800effa:	370c      	adds	r7, #12
 800effc:	46bd      	mov	sp, r7
 800effe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f002:	4770      	bx	lr
 800f004:	08007ddd 	.word	0x08007ddd
 800f008:	0800e2ad 	.word	0x0800e2ad
 800f00c:	0800e325 	.word	0x0800e325
 800f010:	0800e339 	.word	0x0800e339
 800f014:	0800e2d5 	.word	0x0800e2d5
 800f018:	0800e2e9 	.word	0x0800e2e9
 800f01c:	0800e2c1 	.word	0x0800e2c1
 800f020:	0800e2fd 	.word	0x0800e2fd
 800f024:	0800e311 	.word	0x0800e311
 800f028:	0800e34d 	.word	0x0800e34d
 800f02c:	0800f2a1 	.word	0x0800f2a1
 800f030:	0800f2b5 	.word	0x0800f2b5
 800f034:	0800f2c9 	.word	0x0800f2c9
 800f038:	0800f2dd 	.word	0x0800f2dd
 800f03c:	0800f2f1 	.word	0x0800f2f1
 800f040:	0800f305 	.word	0x0800f305
 800f044:	0800f319 	.word	0x0800f319
 800f048:	0800f32d 	.word	0x0800f32d

0800f04c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f04c:	b480      	push	{r7}
 800f04e:	b085      	sub	sp, #20
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
 800f054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f05c:	2b01      	cmp	r3, #1
 800f05e:	d101      	bne.n	800f064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f060:	2302      	movs	r3, #2
 800f062:	e074      	b.n	800f14e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2201      	movs	r2, #1
 800f068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2202      	movs	r2, #2
 800f070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	685b      	ldr	r3, [r3, #4]
 800f07a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	689b      	ldr	r3, [r3, #8]
 800f082:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	4a34      	ldr	r2, [pc, #208]	@ (800f15c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d009      	beq.n	800f0a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	4a33      	ldr	r2, [pc, #204]	@ (800f160 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f094:	4293      	cmp	r3, r2
 800f096:	d004      	beq.n	800f0a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	4a31      	ldr	r2, [pc, #196]	@ (800f164 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f09e:	4293      	cmp	r3, r2
 800f0a0:	d108      	bne.n	800f0b4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f0a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	68fa      	ldr	r2, [r7, #12]
 800f0b0:	4313      	orrs	r3, r2
 800f0b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f0ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f0be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	68fa      	ldr	r2, [r7, #12]
 800f0c6:	4313      	orrs	r3, r2
 800f0c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	68fa      	ldr	r2, [r7, #12]
 800f0d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	4a21      	ldr	r2, [pc, #132]	@ (800f15c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d022      	beq.n	800f122 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f0e4:	d01d      	beq.n	800f122 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	4a1f      	ldr	r2, [pc, #124]	@ (800f168 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d018      	beq.n	800f122 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	4a1d      	ldr	r2, [pc, #116]	@ (800f16c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d013      	beq.n	800f122 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	4a1c      	ldr	r2, [pc, #112]	@ (800f170 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f100:	4293      	cmp	r3, r2
 800f102:	d00e      	beq.n	800f122 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4a15      	ldr	r2, [pc, #84]	@ (800f160 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f10a:	4293      	cmp	r3, r2
 800f10c:	d009      	beq.n	800f122 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	4a18      	ldr	r2, [pc, #96]	@ (800f174 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f114:	4293      	cmp	r3, r2
 800f116:	d004      	beq.n	800f122 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	4a11      	ldr	r2, [pc, #68]	@ (800f164 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d10c      	bne.n	800f13c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f128:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	689b      	ldr	r3, [r3, #8]
 800f12e:	68ba      	ldr	r2, [r7, #8]
 800f130:	4313      	orrs	r3, r2
 800f132:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	68ba      	ldr	r2, [r7, #8]
 800f13a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2201      	movs	r2, #1
 800f140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2200      	movs	r2, #0
 800f148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f14c:	2300      	movs	r3, #0
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3714      	adds	r7, #20
 800f152:	46bd      	mov	sp, r7
 800f154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f158:	4770      	bx	lr
 800f15a:	bf00      	nop
 800f15c:	40012c00 	.word	0x40012c00
 800f160:	40013400 	.word	0x40013400
 800f164:	40015000 	.word	0x40015000
 800f168:	40000400 	.word	0x40000400
 800f16c:	40000800 	.word	0x40000800
 800f170:	40000c00 	.word	0x40000c00
 800f174:	40014000 	.word	0x40014000

0800f178 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f178:	b480      	push	{r7}
 800f17a:	b085      	sub	sp, #20
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
 800f180:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f182:	2300      	movs	r3, #0
 800f184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	d101      	bne.n	800f194 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f190:	2302      	movs	r3, #2
 800f192:	e078      	b.n	800f286 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	2201      	movs	r2, #1
 800f198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	68db      	ldr	r3, [r3, #12]
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	4313      	orrs	r3, r2
 800f1b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	685b      	ldr	r3, [r3, #4]
 800f1c2:	4313      	orrs	r3, r2
 800f1c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	691b      	ldr	r3, [r3, #16]
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	695b      	ldr	r3, [r3, #20]
 800f1ec:	4313      	orrs	r3, r2
 800f1ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1fa:	4313      	orrs	r3, r2
 800f1fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	699b      	ldr	r3, [r3, #24]
 800f208:	041b      	lsls	r3, r3, #16
 800f20a:	4313      	orrs	r3, r2
 800f20c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	69db      	ldr	r3, [r3, #28]
 800f218:	4313      	orrs	r3, r2
 800f21a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	4a1c      	ldr	r2, [pc, #112]	@ (800f294 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800f222:	4293      	cmp	r3, r2
 800f224:	d009      	beq.n	800f23a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	4a1b      	ldr	r2, [pc, #108]	@ (800f298 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d004      	beq.n	800f23a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4a19      	ldr	r2, [pc, #100]	@ (800f29c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d11c      	bne.n	800f274 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f244:	051b      	lsls	r3, r3, #20
 800f246:	4313      	orrs	r3, r2
 800f248:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	6a1b      	ldr	r3, [r3, #32]
 800f254:	4313      	orrs	r3, r2
 800f256:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f262:	4313      	orrs	r3, r2
 800f264:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f270:	4313      	orrs	r3, r2
 800f272:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	68fa      	ldr	r2, [r7, #12]
 800f27a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2200      	movs	r2, #0
 800f280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f284:	2300      	movs	r3, #0
}
 800f286:	4618      	mov	r0, r3
 800f288:	3714      	adds	r7, #20
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr
 800f292:	bf00      	nop
 800f294:	40012c00 	.word	0x40012c00
 800f298:	40013400 	.word	0x40013400
 800f29c:	40015000 	.word	0x40015000

0800f2a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b083      	sub	sp, #12
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f2a8:	bf00      	nop
 800f2aa:	370c      	adds	r7, #12
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr

0800f2b4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b083      	sub	sp, #12
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800f2bc:	bf00      	nop
 800f2be:	370c      	adds	r7, #12
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b083      	sub	sp, #12
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f2d0:	bf00      	nop
 800f2d2:	370c      	adds	r7, #12
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2da:	4770      	bx	lr

0800f2dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b083      	sub	sp, #12
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f2e4:	bf00      	nop
 800f2e6:	370c      	adds	r7, #12
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr

0800f2f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b083      	sub	sp, #12
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800f2f8:	bf00      	nop
 800f2fa:	370c      	adds	r7, #12
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr

0800f304 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800f304:	b480      	push	{r7}
 800f306:	b083      	sub	sp, #12
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800f30c:	bf00      	nop
 800f30e:	370c      	adds	r7, #12
 800f310:	46bd      	mov	sp, r7
 800f312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f316:	4770      	bx	lr

0800f318 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800f318:	b480      	push	{r7}
 800f31a:	b083      	sub	sp, #12
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800f320:	bf00      	nop
 800f322:	370c      	adds	r7, #12
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800f32c:	b480      	push	{r7}
 800f32e:	b083      	sub	sp, #12
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800f334:	bf00      	nop
 800f336:	370c      	adds	r7, #12
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr

0800f340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b082      	sub	sp, #8
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d101      	bne.n	800f352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f34e:	2301      	movs	r3, #1
 800f350:	e050      	b.n	800f3f4 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d114      	bne.n	800f386 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2200      	movs	r2, #0
 800f360:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800f364:	6878      	ldr	r0, [r7, #4]
 800f366:	f000 fd65 	bl	800fe34 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f370:	2b00      	cmp	r3, #0
 800f372:	d103      	bne.n	800f37c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	4a21      	ldr	r2, [pc, #132]	@ (800f3fc <HAL_UART_Init+0xbc>)
 800f378:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2224      	movs	r2, #36	@ 0x24
 800f38a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	681a      	ldr	r2, [r3, #0]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	f022 0201 	bic.w	r2, r2, #1
 800f39c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d002      	beq.n	800f3ac <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f001 f892 	bl	80104d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 fd93 	bl	800fed8 <UART_SetConfig>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d101      	bne.n	800f3bc <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	e01b      	b.n	800f3f4 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	685a      	ldr	r2, [r3, #4]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f3ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	689a      	ldr	r2, [r3, #8]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f3da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	681a      	ldr	r2, [r3, #0]
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f042 0201 	orr.w	r2, r2, #1
 800f3ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f001 f911 	bl	8010614 <UART_CheckIdleState>
 800f3f2:	4603      	mov	r3, r0
}
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	3708      	adds	r7, #8
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	bd80      	pop	{r7, pc}
 800f3fc:	080097e1 	.word	0x080097e1

0800f400 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800f400:	b480      	push	{r7}
 800f402:	b087      	sub	sp, #28
 800f404:	af00      	add	r7, sp, #0
 800f406:	60f8      	str	r0, [r7, #12]
 800f408:	460b      	mov	r3, r1
 800f40a:	607a      	str	r2, [r7, #4]
 800f40c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800f40e:	2300      	movs	r3, #0
 800f410:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d109      	bne.n	800f42c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f41e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800f428:	2301      	movs	r3, #1
 800f42a:	e09c      	b.n	800f566 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f432:	2b20      	cmp	r3, #32
 800f434:	d16c      	bne.n	800f510 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800f436:	7afb      	ldrb	r3, [r7, #11]
 800f438:	2b0c      	cmp	r3, #12
 800f43a:	d85e      	bhi.n	800f4fa <HAL_UART_RegisterCallback+0xfa>
 800f43c:	a201      	add	r2, pc, #4	@ (adr r2, 800f444 <HAL_UART_RegisterCallback+0x44>)
 800f43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f442:	bf00      	nop
 800f444:	0800f479 	.word	0x0800f479
 800f448:	0800f483 	.word	0x0800f483
 800f44c:	0800f48d 	.word	0x0800f48d
 800f450:	0800f497 	.word	0x0800f497
 800f454:	0800f4a1 	.word	0x0800f4a1
 800f458:	0800f4ab 	.word	0x0800f4ab
 800f45c:	0800f4b5 	.word	0x0800f4b5
 800f460:	0800f4bf 	.word	0x0800f4bf
 800f464:	0800f4c9 	.word	0x0800f4c9
 800f468:	0800f4d3 	.word	0x0800f4d3
 800f46c:	0800f4dd 	.word	0x0800f4dd
 800f470:	0800f4e7 	.word	0x0800f4e7
 800f474:	0800f4f1 	.word	0x0800f4f1
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	687a      	ldr	r2, [r7, #4]
 800f47c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800f480:	e070      	b.n	800f564 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	687a      	ldr	r2, [r7, #4]
 800f486:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800f48a:	e06b      	b.n	800f564 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800f494:	e066      	b.n	800f564 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	687a      	ldr	r2, [r7, #4]
 800f49a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800f49e:	e061      	b.n	800f564 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	687a      	ldr	r2, [r7, #4]
 800f4a4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800f4a8:	e05c      	b.n	800f564 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	687a      	ldr	r2, [r7, #4]
 800f4ae:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800f4b2:	e057      	b.n	800f564 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	687a      	ldr	r2, [r7, #4]
 800f4b8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800f4bc:	e052      	b.n	800f564 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	687a      	ldr	r2, [r7, #4]
 800f4c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800f4c6:	e04d      	b.n	800f564 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	687a      	ldr	r2, [r7, #4]
 800f4cc:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800f4d0:	e048      	b.n	800f564 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	687a      	ldr	r2, [r7, #4]
 800f4d6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800f4da:	e043      	b.n	800f564 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	687a      	ldr	r2, [r7, #4]
 800f4e0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800f4e4:	e03e      	b.n	800f564 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	687a      	ldr	r2, [r7, #4]
 800f4ea:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800f4ee:	e039      	b.n	800f564 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800f4f8:	e034      	b.n	800f564 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f500:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800f50a:	2301      	movs	r3, #1
 800f50c:	75fb      	strb	r3, [r7, #23]
        break;
 800f50e:	e029      	b.n	800f564 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f516:	2b00      	cmp	r3, #0
 800f518:	d11a      	bne.n	800f550 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800f51a:	7afb      	ldrb	r3, [r7, #11]
 800f51c:	2b0b      	cmp	r3, #11
 800f51e:	d002      	beq.n	800f526 <HAL_UART_RegisterCallback+0x126>
 800f520:	2b0c      	cmp	r3, #12
 800f522:	d005      	beq.n	800f530 <HAL_UART_RegisterCallback+0x130>
 800f524:	e009      	b.n	800f53a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800f52e:	e019      	b.n	800f564 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800f538:	e014      	b.n	800f564 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f540:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800f54a:	2301      	movs	r3, #1
 800f54c:	75fb      	strb	r3, [r7, #23]
        break;
 800f54e:	e009      	b.n	800f564 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f556:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800f560:	2301      	movs	r3, #1
 800f562:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f564:	7dfb      	ldrb	r3, [r7, #23]
}
 800f566:	4618      	mov	r0, r3
 800f568:	371c      	adds	r7, #28
 800f56a:	46bd      	mov	sp, r7
 800f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f570:	4770      	bx	lr
 800f572:	bf00      	nop

0800f574 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b08a      	sub	sp, #40	@ 0x28
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	4613      	mov	r3, r2
 800f580:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f588:	2b20      	cmp	r3, #32
 800f58a:	d137      	bne.n	800f5fc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d002      	beq.n	800f598 <HAL_UART_Receive_DMA+0x24>
 800f592:	88fb      	ldrh	r3, [r7, #6]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d101      	bne.n	800f59c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f598:	2301      	movs	r3, #1
 800f59a:	e030      	b.n	800f5fe <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	2200      	movs	r2, #0
 800f5a0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	4a18      	ldr	r2, [pc, #96]	@ (800f608 <HAL_UART_Receive_DMA+0x94>)
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d01f      	beq.n	800f5ec <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d018      	beq.n	800f5ec <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	e853 3f00 	ldrex	r3, [r3]
 800f5c6:	613b      	str	r3, [r7, #16]
   return(result);
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f5ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5d8:	623b      	str	r3, [r7, #32]
 800f5da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5dc:	69f9      	ldr	r1, [r7, #28]
 800f5de:	6a3a      	ldr	r2, [r7, #32]
 800f5e0:	e841 2300 	strex	r3, r2, [r1]
 800f5e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d1e6      	bne.n	800f5ba <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f5ec:	88fb      	ldrh	r3, [r7, #6]
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	68b9      	ldr	r1, [r7, #8]
 800f5f2:	68f8      	ldr	r0, [r7, #12]
 800f5f4:	f001 f926 	bl	8010844 <UART_Start_Receive_DMA>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	e000      	b.n	800f5fe <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f5fc:	2302      	movs	r3, #2
  }
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3728      	adds	r7, #40	@ 0x28
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
 800f606:	bf00      	nop
 800f608:	40008000 	.word	0x40008000

0800f60c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b0ba      	sub	sp, #232	@ 0xe8
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	69db      	ldr	r3, [r3, #28]
 800f61a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	689b      	ldr	r3, [r3, #8]
 800f62e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f632:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f636:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f63a:	4013      	ands	r3, r2
 800f63c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f644:	2b00      	cmp	r3, #0
 800f646:	d11b      	bne.n	800f680 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f64c:	f003 0320 	and.w	r3, r3, #32
 800f650:	2b00      	cmp	r3, #0
 800f652:	d015      	beq.n	800f680 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f658:	f003 0320 	and.w	r3, r3, #32
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d105      	bne.n	800f66c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d009      	beq.n	800f680 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f670:	2b00      	cmp	r3, #0
 800f672:	f000 8312 	beq.w	800fc9a <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	4798      	blx	r3
      }
      return;
 800f67e:	e30c      	b.n	800fc9a <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f680:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f684:	2b00      	cmp	r3, #0
 800f686:	f000 8129 	beq.w	800f8dc <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f68a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f68e:	4b90      	ldr	r3, [pc, #576]	@ (800f8d0 <HAL_UART_IRQHandler+0x2c4>)
 800f690:	4013      	ands	r3, r2
 800f692:	2b00      	cmp	r3, #0
 800f694:	d106      	bne.n	800f6a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f696:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f69a:	4b8e      	ldr	r3, [pc, #568]	@ (800f8d4 <HAL_UART_IRQHandler+0x2c8>)
 800f69c:	4013      	ands	r3, r2
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	f000 811c 	beq.w	800f8dc <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f6a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6a8:	f003 0301 	and.w	r3, r3, #1
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d011      	beq.n	800f6d4 <HAL_UART_IRQHandler+0xc8>
 800f6b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d00b      	beq.n	800f6d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	2201      	movs	r2, #1
 800f6c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6ca:	f043 0201 	orr.w	r2, r3, #1
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f6d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6d8:	f003 0302 	and.w	r3, r3, #2
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d011      	beq.n	800f704 <HAL_UART_IRQHandler+0xf8>
 800f6e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f6e4:	f003 0301 	and.w	r3, r3, #1
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d00b      	beq.n	800f704 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	2202      	movs	r2, #2
 800f6f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6fa:	f043 0204 	orr.w	r2, r3, #4
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f708:	f003 0304 	and.w	r3, r3, #4
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d011      	beq.n	800f734 <HAL_UART_IRQHandler+0x128>
 800f710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f714:	f003 0301 	and.w	r3, r3, #1
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d00b      	beq.n	800f734 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	2204      	movs	r2, #4
 800f722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f72a:	f043 0202 	orr.w	r2, r3, #2
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f738:	f003 0308 	and.w	r3, r3, #8
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d017      	beq.n	800f770 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f744:	f003 0320 	and.w	r3, r3, #32
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d105      	bne.n	800f758 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f74c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f750:	4b5f      	ldr	r3, [pc, #380]	@ (800f8d0 <HAL_UART_IRQHandler+0x2c4>)
 800f752:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f754:	2b00      	cmp	r3, #0
 800f756:	d00b      	beq.n	800f770 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	2208      	movs	r2, #8
 800f75e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f766:	f043 0208 	orr.w	r2, r3, #8
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f774:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d012      	beq.n	800f7a2 <HAL_UART_IRQHandler+0x196>
 800f77c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f780:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f784:	2b00      	cmp	r3, #0
 800f786:	d00c      	beq.n	800f7a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f790:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f798:	f043 0220 	orr.w	r2, r3, #32
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	f000 8278 	beq.w	800fc9e <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f7ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7b2:	f003 0320 	and.w	r3, r3, #32
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d013      	beq.n	800f7e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f7ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7be:	f003 0320 	and.w	r3, r3, #32
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d105      	bne.n	800f7d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f7c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f7ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d007      	beq.n	800f7e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d003      	beq.n	800f7e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	689b      	ldr	r3, [r3, #8]
 800f7f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7f6:	2b40      	cmp	r3, #64	@ 0x40
 800f7f8:	d005      	beq.n	800f806 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f7fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f7fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f802:	2b00      	cmp	r3, #0
 800f804:	d058      	beq.n	800f8b8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f001 f903 	bl	8010a12 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	689b      	ldr	r3, [r3, #8]
 800f812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f816:	2b40      	cmp	r3, #64	@ 0x40
 800f818:	d148      	bne.n	800f8ac <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	3308      	adds	r3, #8
 800f820:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f824:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f828:	e853 3f00 	ldrex	r3, [r3]
 800f82c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f830:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	3308      	adds	r3, #8
 800f842:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f846:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f84a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f84e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f852:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f856:	e841 2300 	strex	r3, r2, [r1]
 800f85a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f85e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f862:	2b00      	cmp	r3, #0
 800f864:	d1d9      	bne.n	800f81a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d017      	beq.n	800f8a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f876:	4a18      	ldr	r2, [pc, #96]	@ (800f8d8 <HAL_UART_IRQHandler+0x2cc>)
 800f878:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f880:	4618      	mov	r0, r3
 800f882:	f7fc f8ab 	bl	800b9dc <HAL_DMA_Abort_IT>
 800f886:	4603      	mov	r3, r0
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d01f      	beq.n	800f8cc <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f894:	687a      	ldr	r2, [r7, #4]
 800f896:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f89a:	4610      	mov	r0, r2
 800f89c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f89e:	e015      	b.n	800f8cc <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8aa:	e00f      	b.n	800f8cc <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8b6:	e009      	b.n	800f8cc <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800f8ca:	e1e8      	b.n	800fc9e <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8cc:	bf00      	nop
    return;
 800f8ce:	e1e6      	b.n	800fc9e <HAL_UART_IRQHandler+0x692>
 800f8d0:	10000001 	.word	0x10000001
 800f8d4:	04000120 	.word	0x04000120
 800f8d8:	08010cdd 	.word	0x08010cdd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8e0:	2b01      	cmp	r3, #1
 800f8e2:	f040 8176 	bne.w	800fbd2 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f8e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8ea:	f003 0310 	and.w	r3, r3, #16
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	f000 816f 	beq.w	800fbd2 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f8f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8f8:	f003 0310 	and.w	r3, r3, #16
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	f000 8168 	beq.w	800fbd2 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	2210      	movs	r2, #16
 800f908:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	689b      	ldr	r3, [r3, #8]
 800f910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f914:	2b40      	cmp	r3, #64	@ 0x40
 800f916:	f040 80dc 	bne.w	800fad2 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	685b      	ldr	r3, [r3, #4]
 800f924:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f928:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f000 80b1 	beq.w	800fa94 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800f938:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f93c:	429a      	cmp	r2, r3
 800f93e:	f080 80a9 	bcs.w	800fa94 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f948:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	f003 0320 	and.w	r3, r3, #32
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	f040 8087 	bne.w	800fa6e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f968:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f96c:	e853 3f00 	ldrex	r3, [r3]
 800f970:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f974:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f97c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	461a      	mov	r2, r3
 800f986:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f98a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800f98e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f992:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f996:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f99a:	e841 2300 	strex	r3, r2, [r1]
 800f99e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f9a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d1da      	bne.n	800f960 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	3308      	adds	r3, #8
 800f9b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f9b4:	e853 3f00 	ldrex	r3, [r3]
 800f9b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f9ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f9bc:	f023 0301 	bic.w	r3, r3, #1
 800f9c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	3308      	adds	r3, #8
 800f9ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f9ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f9d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f9d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f9da:	e841 2300 	strex	r3, r2, [r1]
 800f9de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f9e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d1e1      	bne.n	800f9aa <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	3308      	adds	r3, #8
 800f9ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f9f0:	e853 3f00 	ldrex	r3, [r3]
 800f9f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f9f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f9f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f9fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	3308      	adds	r3, #8
 800fa06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fa0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fa0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fa10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fa12:	e841 2300 	strex	r3, r2, [r1]
 800fa16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fa18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d1e3      	bne.n	800f9e6 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2220      	movs	r2, #32
 800fa22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fa34:	e853 3f00 	ldrex	r3, [r3]
 800fa38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fa3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fa3c:	f023 0310 	bic.w	r3, r3, #16
 800fa40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	461a      	mov	r2, r3
 800fa4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fa4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fa50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fa54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fa56:	e841 2300 	strex	r3, r2, [r1]
 800fa5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fa5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d1e4      	bne.n	800fa2c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f7fb ff5e 	bl	800b92a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2202      	movs	r2, #2
 800fa72:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fa7a:	687a      	ldr	r2, [r7, #4]
 800fa7c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800fa80:	687a      	ldr	r2, [r7, #4]
 800fa82:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800fa86:	b292      	uxth	r2, r2
 800fa88:	1a8a      	subs	r2, r1, r2
 800fa8a:	b292      	uxth	r2, r2
 800fa8c:	4611      	mov	r1, r2
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800fa92:	e106      	b.n	800fca2 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fa9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	f040 80ff 	bne.w	800fca2 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	f003 0320 	and.w	r3, r3, #32
 800fab2:	2b20      	cmp	r3, #32
 800fab4:	f040 80f5 	bne.w	800fca2 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2202      	movs	r2, #2
 800fabc:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fac4:	687a      	ldr	r2, [r7, #4]
 800fac6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800faca:	4611      	mov	r1, r2
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	4798      	blx	r3
      return;
 800fad0:	e0e7      	b.n	800fca2 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fade:	b29b      	uxth	r3, r3
 800fae0:	1ad3      	subs	r3, r2, r3
 800fae2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800faec:	b29b      	uxth	r3, r3
 800faee:	2b00      	cmp	r3, #0
 800faf0:	f000 80d9 	beq.w	800fca6 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800faf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	f000 80d4 	beq.w	800fca6 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb06:	e853 3f00 	ldrex	r3, [r3]
 800fb0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fb0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fb12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fb20:	647b      	str	r3, [r7, #68]	@ 0x44
 800fb22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fb26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fb28:	e841 2300 	strex	r3, r2, [r1]
 800fb2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fb2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d1e4      	bne.n	800fafe <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	3308      	adds	r3, #8
 800fb3a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb3e:	e853 3f00 	ldrex	r3, [r3]
 800fb42:	623b      	str	r3, [r7, #32]
   return(result);
 800fb44:	6a3b      	ldr	r3, [r7, #32]
 800fb46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fb4a:	f023 0301 	bic.w	r3, r3, #1
 800fb4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	3308      	adds	r3, #8
 800fb58:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fb5c:	633a      	str	r2, [r7, #48]	@ 0x30
 800fb5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fb62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb64:	e841 2300 	strex	r3, r2, [r1]
 800fb68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fb6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d1e1      	bne.n	800fb34 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2220      	movs	r2, #32
 800fb74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	2200      	movs	r2, #0
 800fb82:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	e853 3f00 	ldrex	r3, [r3]
 800fb90:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	f023 0310 	bic.w	r3, r3, #16
 800fb98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	461a      	mov	r2, r3
 800fba2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fba6:	61fb      	str	r3, [r7, #28]
 800fba8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbaa:	69b9      	ldr	r1, [r7, #24]
 800fbac:	69fa      	ldr	r2, [r7, #28]
 800fbae:	e841 2300 	strex	r3, r2, [r1]
 800fbb2:	617b      	str	r3, [r7, #20]
   return(result);
 800fbb4:	697b      	ldr	r3, [r7, #20]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d1e4      	bne.n	800fb84 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	2202      	movs	r2, #2
 800fbbe:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fbc6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800fbca:	4611      	mov	r1, r2
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fbd0:	e069      	b.n	800fca6 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fbd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fbd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d010      	beq.n	800fc00 <HAL_UART_IRQHandler+0x5f4>
 800fbde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fbe2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d00a      	beq.n	800fc00 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800fbf2:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fbfe:	e055      	b.n	800fcac <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fc00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d014      	beq.n	800fc36 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fc0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d105      	bne.n	800fc24 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fc18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fc1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d008      	beq.n	800fc36 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d03e      	beq.n	800fcaa <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	4798      	blx	r3
    }
    return;
 800fc34:	e039      	b.n	800fcaa <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fc36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d009      	beq.n	800fc56 <HAL_UART_IRQHandler+0x64a>
 800fc42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d003      	beq.n	800fc56 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800fc4e:	6878      	ldr	r0, [r7, #4]
 800fc50:	f001 f858 	bl	8010d04 <UART_EndTransmit_IT>
    return;
 800fc54:	e02a      	b.n	800fcac <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fc56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d00b      	beq.n	800fc7a <HAL_UART_IRQHandler+0x66e>
 800fc62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc66:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d005      	beq.n	800fc7a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fc78:	e018      	b.n	800fcac <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fc7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fc7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d012      	beq.n	800fcac <HAL_UART_IRQHandler+0x6a0>
 800fc86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	da0e      	bge.n	800fcac <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fc98:	e008      	b.n	800fcac <HAL_UART_IRQHandler+0x6a0>
      return;
 800fc9a:	bf00      	nop
 800fc9c:	e006      	b.n	800fcac <HAL_UART_IRQHandler+0x6a0>
    return;
 800fc9e:	bf00      	nop
 800fca0:	e004      	b.n	800fcac <HAL_UART_IRQHandler+0x6a0>
      return;
 800fca2:	bf00      	nop
 800fca4:	e002      	b.n	800fcac <HAL_UART_IRQHandler+0x6a0>
      return;
 800fca6:	bf00      	nop
 800fca8:	e000      	b.n	800fcac <HAL_UART_IRQHandler+0x6a0>
    return;
 800fcaa:	bf00      	nop
  }
}
 800fcac:	37e8      	adds	r7, #232	@ 0xe8
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}
 800fcb2:	bf00      	nop

0800fcb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b083      	sub	sp, #12
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fcbc:	bf00      	nop
 800fcbe:	370c      	adds	r7, #12
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc6:	4770      	bx	lr

0800fcc8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fcc8:	b480      	push	{r7}
 800fcca:	b083      	sub	sp, #12
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800fcd0:	bf00      	nop
 800fcd2:	370c      	adds	r7, #12
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr

0800fcdc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b083      	sub	sp, #12
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fce4:	bf00      	nop
 800fce6:	370c      	adds	r7, #12
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr

0800fcf0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	b083      	sub	sp, #12
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fcf8:	bf00      	nop
 800fcfa:	370c      	adds	r7, #12
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd02:	4770      	bx	lr

0800fd04 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fd04:	b480      	push	{r7}
 800fd06:	b083      	sub	sp, #12
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fd0c:	bf00      	nop
 800fd0e:	370c      	adds	r7, #12
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr

0800fd18 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800fd18:	b480      	push	{r7}
 800fd1a:	b083      	sub	sp, #12
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800fd20:	bf00      	nop
 800fd22:	370c      	adds	r7, #12
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr

0800fd2c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b083      	sub	sp, #12
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800fd34:	bf00      	nop
 800fd36:	370c      	adds	r7, #12
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3e:	4770      	bx	lr

0800fd40 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800fd40:	b480      	push	{r7}
 800fd42:	b083      	sub	sp, #12
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800fd48:	bf00      	nop
 800fd4a:	370c      	adds	r7, #12
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd52:	4770      	bx	lr

0800fd54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fd54:	b480      	push	{r7}
 800fd56:	b083      	sub	sp, #12
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	460b      	mov	r3, r1
 800fd5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fd60:	bf00      	nop
 800fd62:	370c      	adds	r7, #12
 800fd64:	46bd      	mov	sp, r7
 800fd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6a:	4770      	bx	lr

0800fd6c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	4a09      	ldr	r2, [pc, #36]	@ (800fda0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d009      	beq.n	800fd94 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	695b      	ldr	r3, [r3, #20]
 800fd86:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	683a      	ldr	r2, [r7, #0]
 800fd90:	430a      	orrs	r2, r1
 800fd92:	615a      	str	r2, [r3, #20]
  }
}
 800fd94:	bf00      	nop
 800fd96:	370c      	adds	r7, #12
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr
 800fda0:	40008000 	.word	0x40008000

0800fda4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800fda4:	b480      	push	{r7}
 800fda6:	b083      	sub	sp, #12
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4a18      	ldr	r2, [pc, #96]	@ (800fe14 <HAL_UART_EnableReceiverTimeout+0x70>)
 800fdb2:	4293      	cmp	r3, r2
 800fdb4:	d027      	beq.n	800fe06 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fdbc:	2b20      	cmp	r3, #32
 800fdbe:	d120      	bne.n	800fe02 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d101      	bne.n	800fdce <HAL_UART_EnableReceiverTimeout+0x2a>
 800fdca:	2302      	movs	r3, #2
 800fdcc:	e01c      	b.n	800fe08 <HAL_UART_EnableReceiverTimeout+0x64>
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2201      	movs	r2, #1
 800fdd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2224      	movs	r2, #36	@ 0x24
 800fdda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	685a      	ldr	r2, [r3, #4]
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800fdec:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2220      	movs	r2, #32
 800fdf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	e002      	b.n	800fe08 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800fe02:	2302      	movs	r3, #2
 800fe04:	e000      	b.n	800fe08 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800fe06:	2301      	movs	r3, #1
  }
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	370c      	adds	r7, #12
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe12:	4770      	bx	lr
 800fe14:	40008000 	.word	0x40008000

0800fe18 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b083      	sub	sp, #12
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	370c      	adds	r7, #12
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr
	...

0800fe34 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b083      	sub	sp, #12
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	4a1a      	ldr	r2, [pc, #104]	@ (800fea8 <UART_InitCallbacksToDefault+0x74>)
 800fe40:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	4a19      	ldr	r2, [pc, #100]	@ (800feac <UART_InitCallbacksToDefault+0x78>)
 800fe48:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	4a18      	ldr	r2, [pc, #96]	@ (800feb0 <UART_InitCallbacksToDefault+0x7c>)
 800fe50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	4a17      	ldr	r2, [pc, #92]	@ (800feb4 <UART_InitCallbacksToDefault+0x80>)
 800fe58:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	4a16      	ldr	r2, [pc, #88]	@ (800feb8 <UART_InitCallbacksToDefault+0x84>)
 800fe60:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	4a15      	ldr	r2, [pc, #84]	@ (800febc <UART_InitCallbacksToDefault+0x88>)
 800fe68:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	4a14      	ldr	r2, [pc, #80]	@ (800fec0 <UART_InitCallbacksToDefault+0x8c>)
 800fe70:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	4a13      	ldr	r2, [pc, #76]	@ (800fec4 <UART_InitCallbacksToDefault+0x90>)
 800fe78:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	4a12      	ldr	r2, [pc, #72]	@ (800fec8 <UART_InitCallbacksToDefault+0x94>)
 800fe80:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	4a11      	ldr	r2, [pc, #68]	@ (800fecc <UART_InitCallbacksToDefault+0x98>)
 800fe88:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	4a10      	ldr	r2, [pc, #64]	@ (800fed0 <UART_InitCallbacksToDefault+0x9c>)
 800fe90:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	4a0f      	ldr	r2, [pc, #60]	@ (800fed4 <UART_InitCallbacksToDefault+0xa0>)
 800fe98:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800fe9c:	bf00      	nop
 800fe9e:	370c      	adds	r7, #12
 800fea0:	46bd      	mov	sp, r7
 800fea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea6:	4770      	bx	lr
 800fea8:	0800fcc9 	.word	0x0800fcc9
 800feac:	0800fcb5 	.word	0x0800fcb5
 800feb0:	0800fcf1 	.word	0x0800fcf1
 800feb4:	0800fcdd 	.word	0x0800fcdd
 800feb8:	0800fd05 	.word	0x0800fd05
 800febc:	0800fd19 	.word	0x0800fd19
 800fec0:	0800fd2d 	.word	0x0800fd2d
 800fec4:	0800fd41 	.word	0x0800fd41
 800fec8:	08010d5f 	.word	0x08010d5f
 800fecc:	08010d73 	.word	0x08010d73
 800fed0:	08010d87 	.word	0x08010d87
 800fed4:	0800fd55 	.word	0x0800fd55

0800fed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fedc:	b08c      	sub	sp, #48	@ 0x30
 800fede:	af00      	add	r7, sp, #0
 800fee0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fee2:	2300      	movs	r3, #0
 800fee4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	689a      	ldr	r2, [r3, #8]
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	691b      	ldr	r3, [r3, #16]
 800fef0:	431a      	orrs	r2, r3
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	695b      	ldr	r3, [r3, #20]
 800fef6:	431a      	orrs	r2, r3
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	69db      	ldr	r3, [r3, #28]
 800fefc:	4313      	orrs	r3, r2
 800fefe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ff00:	697b      	ldr	r3, [r7, #20]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	681a      	ldr	r2, [r3, #0]
 800ff06:	4baa      	ldr	r3, [pc, #680]	@ (80101b0 <UART_SetConfig+0x2d8>)
 800ff08:	4013      	ands	r3, r2
 800ff0a:	697a      	ldr	r2, [r7, #20]
 800ff0c:	6812      	ldr	r2, [r2, #0]
 800ff0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ff10:	430b      	orrs	r3, r1
 800ff12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	68da      	ldr	r2, [r3, #12]
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	430a      	orrs	r2, r1
 800ff28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	699b      	ldr	r3, [r3, #24]
 800ff2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	4a9f      	ldr	r2, [pc, #636]	@ (80101b4 <UART_SetConfig+0x2dc>)
 800ff36:	4293      	cmp	r3, r2
 800ff38:	d004      	beq.n	800ff44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	6a1b      	ldr	r3, [r3, #32]
 800ff3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ff40:	4313      	orrs	r3, r2
 800ff42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	689b      	ldr	r3, [r3, #8]
 800ff4a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ff4e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ff52:	697a      	ldr	r2, [r7, #20]
 800ff54:	6812      	ldr	r2, [r2, #0]
 800ff56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ff58:	430b      	orrs	r3, r1
 800ff5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff62:	f023 010f 	bic.w	r1, r3, #15
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	430a      	orrs	r2, r1
 800ff70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	4a90      	ldr	r2, [pc, #576]	@ (80101b8 <UART_SetConfig+0x2e0>)
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	d125      	bne.n	800ffc8 <UART_SetConfig+0xf0>
 800ff7c:	4b8f      	ldr	r3, [pc, #572]	@ (80101bc <UART_SetConfig+0x2e4>)
 800ff7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ff82:	f003 0303 	and.w	r3, r3, #3
 800ff86:	2b03      	cmp	r3, #3
 800ff88:	d81a      	bhi.n	800ffc0 <UART_SetConfig+0xe8>
 800ff8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ff90 <UART_SetConfig+0xb8>)
 800ff8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff90:	0800ffa1 	.word	0x0800ffa1
 800ff94:	0800ffb1 	.word	0x0800ffb1
 800ff98:	0800ffa9 	.word	0x0800ffa9
 800ff9c:	0800ffb9 	.word	0x0800ffb9
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffa6:	e116      	b.n	80101d6 <UART_SetConfig+0x2fe>
 800ffa8:	2302      	movs	r3, #2
 800ffaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffae:	e112      	b.n	80101d6 <UART_SetConfig+0x2fe>
 800ffb0:	2304      	movs	r3, #4
 800ffb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffb6:	e10e      	b.n	80101d6 <UART_SetConfig+0x2fe>
 800ffb8:	2308      	movs	r3, #8
 800ffba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffbe:	e10a      	b.n	80101d6 <UART_SetConfig+0x2fe>
 800ffc0:	2310      	movs	r3, #16
 800ffc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ffc6:	e106      	b.n	80101d6 <UART_SetConfig+0x2fe>
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	4a7c      	ldr	r2, [pc, #496]	@ (80101c0 <UART_SetConfig+0x2e8>)
 800ffce:	4293      	cmp	r3, r2
 800ffd0:	d138      	bne.n	8010044 <UART_SetConfig+0x16c>
 800ffd2:	4b7a      	ldr	r3, [pc, #488]	@ (80101bc <UART_SetConfig+0x2e4>)
 800ffd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ffd8:	f003 030c 	and.w	r3, r3, #12
 800ffdc:	2b0c      	cmp	r3, #12
 800ffde:	d82d      	bhi.n	801003c <UART_SetConfig+0x164>
 800ffe0:	a201      	add	r2, pc, #4	@ (adr r2, 800ffe8 <UART_SetConfig+0x110>)
 800ffe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffe6:	bf00      	nop
 800ffe8:	0801001d 	.word	0x0801001d
 800ffec:	0801003d 	.word	0x0801003d
 800fff0:	0801003d 	.word	0x0801003d
 800fff4:	0801003d 	.word	0x0801003d
 800fff8:	0801002d 	.word	0x0801002d
 800fffc:	0801003d 	.word	0x0801003d
 8010000:	0801003d 	.word	0x0801003d
 8010004:	0801003d 	.word	0x0801003d
 8010008:	08010025 	.word	0x08010025
 801000c:	0801003d 	.word	0x0801003d
 8010010:	0801003d 	.word	0x0801003d
 8010014:	0801003d 	.word	0x0801003d
 8010018:	08010035 	.word	0x08010035
 801001c:	2300      	movs	r3, #0
 801001e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010022:	e0d8      	b.n	80101d6 <UART_SetConfig+0x2fe>
 8010024:	2302      	movs	r3, #2
 8010026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801002a:	e0d4      	b.n	80101d6 <UART_SetConfig+0x2fe>
 801002c:	2304      	movs	r3, #4
 801002e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010032:	e0d0      	b.n	80101d6 <UART_SetConfig+0x2fe>
 8010034:	2308      	movs	r3, #8
 8010036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801003a:	e0cc      	b.n	80101d6 <UART_SetConfig+0x2fe>
 801003c:	2310      	movs	r3, #16
 801003e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010042:	e0c8      	b.n	80101d6 <UART_SetConfig+0x2fe>
 8010044:	697b      	ldr	r3, [r7, #20]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4a5e      	ldr	r2, [pc, #376]	@ (80101c4 <UART_SetConfig+0x2ec>)
 801004a:	4293      	cmp	r3, r2
 801004c:	d125      	bne.n	801009a <UART_SetConfig+0x1c2>
 801004e:	4b5b      	ldr	r3, [pc, #364]	@ (80101bc <UART_SetConfig+0x2e4>)
 8010050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010054:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8010058:	2b30      	cmp	r3, #48	@ 0x30
 801005a:	d016      	beq.n	801008a <UART_SetConfig+0x1b2>
 801005c:	2b30      	cmp	r3, #48	@ 0x30
 801005e:	d818      	bhi.n	8010092 <UART_SetConfig+0x1ba>
 8010060:	2b20      	cmp	r3, #32
 8010062:	d00a      	beq.n	801007a <UART_SetConfig+0x1a2>
 8010064:	2b20      	cmp	r3, #32
 8010066:	d814      	bhi.n	8010092 <UART_SetConfig+0x1ba>
 8010068:	2b00      	cmp	r3, #0
 801006a:	d002      	beq.n	8010072 <UART_SetConfig+0x19a>
 801006c:	2b10      	cmp	r3, #16
 801006e:	d008      	beq.n	8010082 <UART_SetConfig+0x1aa>
 8010070:	e00f      	b.n	8010092 <UART_SetConfig+0x1ba>
 8010072:	2300      	movs	r3, #0
 8010074:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010078:	e0ad      	b.n	80101d6 <UART_SetConfig+0x2fe>
 801007a:	2302      	movs	r3, #2
 801007c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010080:	e0a9      	b.n	80101d6 <UART_SetConfig+0x2fe>
 8010082:	2304      	movs	r3, #4
 8010084:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010088:	e0a5      	b.n	80101d6 <UART_SetConfig+0x2fe>
 801008a:	2308      	movs	r3, #8
 801008c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010090:	e0a1      	b.n	80101d6 <UART_SetConfig+0x2fe>
 8010092:	2310      	movs	r3, #16
 8010094:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010098:	e09d      	b.n	80101d6 <UART_SetConfig+0x2fe>
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	4a4a      	ldr	r2, [pc, #296]	@ (80101c8 <UART_SetConfig+0x2f0>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d125      	bne.n	80100f0 <UART_SetConfig+0x218>
 80100a4:	4b45      	ldr	r3, [pc, #276]	@ (80101bc <UART_SetConfig+0x2e4>)
 80100a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80100aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80100ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80100b0:	d016      	beq.n	80100e0 <UART_SetConfig+0x208>
 80100b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80100b4:	d818      	bhi.n	80100e8 <UART_SetConfig+0x210>
 80100b6:	2b80      	cmp	r3, #128	@ 0x80
 80100b8:	d00a      	beq.n	80100d0 <UART_SetConfig+0x1f8>
 80100ba:	2b80      	cmp	r3, #128	@ 0x80
 80100bc:	d814      	bhi.n	80100e8 <UART_SetConfig+0x210>
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d002      	beq.n	80100c8 <UART_SetConfig+0x1f0>
 80100c2:	2b40      	cmp	r3, #64	@ 0x40
 80100c4:	d008      	beq.n	80100d8 <UART_SetConfig+0x200>
 80100c6:	e00f      	b.n	80100e8 <UART_SetConfig+0x210>
 80100c8:	2300      	movs	r3, #0
 80100ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100ce:	e082      	b.n	80101d6 <UART_SetConfig+0x2fe>
 80100d0:	2302      	movs	r3, #2
 80100d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100d6:	e07e      	b.n	80101d6 <UART_SetConfig+0x2fe>
 80100d8:	2304      	movs	r3, #4
 80100da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100de:	e07a      	b.n	80101d6 <UART_SetConfig+0x2fe>
 80100e0:	2308      	movs	r3, #8
 80100e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100e6:	e076      	b.n	80101d6 <UART_SetConfig+0x2fe>
 80100e8:	2310      	movs	r3, #16
 80100ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80100ee:	e072      	b.n	80101d6 <UART_SetConfig+0x2fe>
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	4a35      	ldr	r2, [pc, #212]	@ (80101cc <UART_SetConfig+0x2f4>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d12a      	bne.n	8010150 <UART_SetConfig+0x278>
 80100fa:	4b30      	ldr	r3, [pc, #192]	@ (80101bc <UART_SetConfig+0x2e4>)
 80100fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010100:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010104:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010108:	d01a      	beq.n	8010140 <UART_SetConfig+0x268>
 801010a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801010e:	d81b      	bhi.n	8010148 <UART_SetConfig+0x270>
 8010110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010114:	d00c      	beq.n	8010130 <UART_SetConfig+0x258>
 8010116:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801011a:	d815      	bhi.n	8010148 <UART_SetConfig+0x270>
 801011c:	2b00      	cmp	r3, #0
 801011e:	d003      	beq.n	8010128 <UART_SetConfig+0x250>
 8010120:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010124:	d008      	beq.n	8010138 <UART_SetConfig+0x260>
 8010126:	e00f      	b.n	8010148 <UART_SetConfig+0x270>
 8010128:	2300      	movs	r3, #0
 801012a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801012e:	e052      	b.n	80101d6 <UART_SetConfig+0x2fe>
 8010130:	2302      	movs	r3, #2
 8010132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010136:	e04e      	b.n	80101d6 <UART_SetConfig+0x2fe>
 8010138:	2304      	movs	r3, #4
 801013a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801013e:	e04a      	b.n	80101d6 <UART_SetConfig+0x2fe>
 8010140:	2308      	movs	r3, #8
 8010142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010146:	e046      	b.n	80101d6 <UART_SetConfig+0x2fe>
 8010148:	2310      	movs	r3, #16
 801014a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801014e:	e042      	b.n	80101d6 <UART_SetConfig+0x2fe>
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	4a17      	ldr	r2, [pc, #92]	@ (80101b4 <UART_SetConfig+0x2dc>)
 8010156:	4293      	cmp	r3, r2
 8010158:	d13a      	bne.n	80101d0 <UART_SetConfig+0x2f8>
 801015a:	4b18      	ldr	r3, [pc, #96]	@ (80101bc <UART_SetConfig+0x2e4>)
 801015c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010160:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8010164:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010168:	d01a      	beq.n	80101a0 <UART_SetConfig+0x2c8>
 801016a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801016e:	d81b      	bhi.n	80101a8 <UART_SetConfig+0x2d0>
 8010170:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010174:	d00c      	beq.n	8010190 <UART_SetConfig+0x2b8>
 8010176:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801017a:	d815      	bhi.n	80101a8 <UART_SetConfig+0x2d0>
 801017c:	2b00      	cmp	r3, #0
 801017e:	d003      	beq.n	8010188 <UART_SetConfig+0x2b0>
 8010180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010184:	d008      	beq.n	8010198 <UART_SetConfig+0x2c0>
 8010186:	e00f      	b.n	80101a8 <UART_SetConfig+0x2d0>
 8010188:	2300      	movs	r3, #0
 801018a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801018e:	e022      	b.n	80101d6 <UART_SetConfig+0x2fe>
 8010190:	2302      	movs	r3, #2
 8010192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010196:	e01e      	b.n	80101d6 <UART_SetConfig+0x2fe>
 8010198:	2304      	movs	r3, #4
 801019a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801019e:	e01a      	b.n	80101d6 <UART_SetConfig+0x2fe>
 80101a0:	2308      	movs	r3, #8
 80101a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80101a6:	e016      	b.n	80101d6 <UART_SetConfig+0x2fe>
 80101a8:	2310      	movs	r3, #16
 80101aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80101ae:	e012      	b.n	80101d6 <UART_SetConfig+0x2fe>
 80101b0:	cfff69f3 	.word	0xcfff69f3
 80101b4:	40008000 	.word	0x40008000
 80101b8:	40013800 	.word	0x40013800
 80101bc:	40021000 	.word	0x40021000
 80101c0:	40004400 	.word	0x40004400
 80101c4:	40004800 	.word	0x40004800
 80101c8:	40004c00 	.word	0x40004c00
 80101cc:	40005000 	.word	0x40005000
 80101d0:	2310      	movs	r3, #16
 80101d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	4aae      	ldr	r2, [pc, #696]	@ (8010494 <UART_SetConfig+0x5bc>)
 80101dc:	4293      	cmp	r3, r2
 80101de:	f040 8097 	bne.w	8010310 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80101e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80101e6:	2b08      	cmp	r3, #8
 80101e8:	d823      	bhi.n	8010232 <UART_SetConfig+0x35a>
 80101ea:	a201      	add	r2, pc, #4	@ (adr r2, 80101f0 <UART_SetConfig+0x318>)
 80101ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101f0:	08010215 	.word	0x08010215
 80101f4:	08010233 	.word	0x08010233
 80101f8:	0801021d 	.word	0x0801021d
 80101fc:	08010233 	.word	0x08010233
 8010200:	08010223 	.word	0x08010223
 8010204:	08010233 	.word	0x08010233
 8010208:	08010233 	.word	0x08010233
 801020c:	08010233 	.word	0x08010233
 8010210:	0801022b 	.word	0x0801022b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010214:	f7fc fcec 	bl	800cbf0 <HAL_RCC_GetPCLK1Freq>
 8010218:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801021a:	e010      	b.n	801023e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801021c:	4b9e      	ldr	r3, [pc, #632]	@ (8010498 <UART_SetConfig+0x5c0>)
 801021e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010220:	e00d      	b.n	801023e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010222:	f7fc fc77 	bl	800cb14 <HAL_RCC_GetSysClockFreq>
 8010226:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010228:	e009      	b.n	801023e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801022a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801022e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010230:	e005      	b.n	801023e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8010232:	2300      	movs	r3, #0
 8010234:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010236:	2301      	movs	r3, #1
 8010238:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801023c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801023e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010240:	2b00      	cmp	r3, #0
 8010242:	f000 8130 	beq.w	80104a6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801024a:	4a94      	ldr	r2, [pc, #592]	@ (801049c <UART_SetConfig+0x5c4>)
 801024c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010250:	461a      	mov	r2, r3
 8010252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010254:	fbb3 f3f2 	udiv	r3, r3, r2
 8010258:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	685a      	ldr	r2, [r3, #4]
 801025e:	4613      	mov	r3, r2
 8010260:	005b      	lsls	r3, r3, #1
 8010262:	4413      	add	r3, r2
 8010264:	69ba      	ldr	r2, [r7, #24]
 8010266:	429a      	cmp	r2, r3
 8010268:	d305      	bcc.n	8010276 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801026a:	697b      	ldr	r3, [r7, #20]
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010270:	69ba      	ldr	r2, [r7, #24]
 8010272:	429a      	cmp	r2, r3
 8010274:	d903      	bls.n	801027e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8010276:	2301      	movs	r3, #1
 8010278:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801027c:	e113      	b.n	80104a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801027e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010280:	2200      	movs	r2, #0
 8010282:	60bb      	str	r3, [r7, #8]
 8010284:	60fa      	str	r2, [r7, #12]
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801028a:	4a84      	ldr	r2, [pc, #528]	@ (801049c <UART_SetConfig+0x5c4>)
 801028c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010290:	b29b      	uxth	r3, r3
 8010292:	2200      	movs	r2, #0
 8010294:	603b      	str	r3, [r7, #0]
 8010296:	607a      	str	r2, [r7, #4]
 8010298:	e9d7 2300 	ldrd	r2, r3, [r7]
 801029c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80102a0:	f7f0 fca8 	bl	8000bf4 <__aeabi_uldivmod>
 80102a4:	4602      	mov	r2, r0
 80102a6:	460b      	mov	r3, r1
 80102a8:	4610      	mov	r0, r2
 80102aa:	4619      	mov	r1, r3
 80102ac:	f04f 0200 	mov.w	r2, #0
 80102b0:	f04f 0300 	mov.w	r3, #0
 80102b4:	020b      	lsls	r3, r1, #8
 80102b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80102ba:	0202      	lsls	r2, r0, #8
 80102bc:	6979      	ldr	r1, [r7, #20]
 80102be:	6849      	ldr	r1, [r1, #4]
 80102c0:	0849      	lsrs	r1, r1, #1
 80102c2:	2000      	movs	r0, #0
 80102c4:	460c      	mov	r4, r1
 80102c6:	4605      	mov	r5, r0
 80102c8:	eb12 0804 	adds.w	r8, r2, r4
 80102cc:	eb43 0905 	adc.w	r9, r3, r5
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	2200      	movs	r2, #0
 80102d6:	469a      	mov	sl, r3
 80102d8:	4693      	mov	fp, r2
 80102da:	4652      	mov	r2, sl
 80102dc:	465b      	mov	r3, fp
 80102de:	4640      	mov	r0, r8
 80102e0:	4649      	mov	r1, r9
 80102e2:	f7f0 fc87 	bl	8000bf4 <__aeabi_uldivmod>
 80102e6:	4602      	mov	r2, r0
 80102e8:	460b      	mov	r3, r1
 80102ea:	4613      	mov	r3, r2
 80102ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80102ee:	6a3b      	ldr	r3, [r7, #32]
 80102f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80102f4:	d308      	bcc.n	8010308 <UART_SetConfig+0x430>
 80102f6:	6a3b      	ldr	r3, [r7, #32]
 80102f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80102fc:	d204      	bcs.n	8010308 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	6a3a      	ldr	r2, [r7, #32]
 8010304:	60da      	str	r2, [r3, #12]
 8010306:	e0ce      	b.n	80104a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8010308:	2301      	movs	r3, #1
 801030a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801030e:	e0ca      	b.n	80104a6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	69db      	ldr	r3, [r3, #28]
 8010314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010318:	d166      	bne.n	80103e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801031a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801031e:	2b08      	cmp	r3, #8
 8010320:	d827      	bhi.n	8010372 <UART_SetConfig+0x49a>
 8010322:	a201      	add	r2, pc, #4	@ (adr r2, 8010328 <UART_SetConfig+0x450>)
 8010324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010328:	0801034d 	.word	0x0801034d
 801032c:	08010355 	.word	0x08010355
 8010330:	0801035d 	.word	0x0801035d
 8010334:	08010373 	.word	0x08010373
 8010338:	08010363 	.word	0x08010363
 801033c:	08010373 	.word	0x08010373
 8010340:	08010373 	.word	0x08010373
 8010344:	08010373 	.word	0x08010373
 8010348:	0801036b 	.word	0x0801036b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801034c:	f7fc fc50 	bl	800cbf0 <HAL_RCC_GetPCLK1Freq>
 8010350:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010352:	e014      	b.n	801037e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010354:	f7fc fc62 	bl	800cc1c <HAL_RCC_GetPCLK2Freq>
 8010358:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801035a:	e010      	b.n	801037e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801035c:	4b4e      	ldr	r3, [pc, #312]	@ (8010498 <UART_SetConfig+0x5c0>)
 801035e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010360:	e00d      	b.n	801037e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010362:	f7fc fbd7 	bl	800cb14 <HAL_RCC_GetSysClockFreq>
 8010366:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010368:	e009      	b.n	801037e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801036a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801036e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010370:	e005      	b.n	801037e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8010372:	2300      	movs	r3, #0
 8010374:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010376:	2301      	movs	r3, #1
 8010378:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801037c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801037e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010380:	2b00      	cmp	r3, #0
 8010382:	f000 8090 	beq.w	80104a6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801038a:	4a44      	ldr	r2, [pc, #272]	@ (801049c <UART_SetConfig+0x5c4>)
 801038c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010390:	461a      	mov	r2, r3
 8010392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010394:	fbb3 f3f2 	udiv	r3, r3, r2
 8010398:	005a      	lsls	r2, r3, #1
 801039a:	697b      	ldr	r3, [r7, #20]
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	085b      	lsrs	r3, r3, #1
 80103a0:	441a      	add	r2, r3
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80103aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80103ac:	6a3b      	ldr	r3, [r7, #32]
 80103ae:	2b0f      	cmp	r3, #15
 80103b0:	d916      	bls.n	80103e0 <UART_SetConfig+0x508>
 80103b2:	6a3b      	ldr	r3, [r7, #32]
 80103b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80103b8:	d212      	bcs.n	80103e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80103ba:	6a3b      	ldr	r3, [r7, #32]
 80103bc:	b29b      	uxth	r3, r3
 80103be:	f023 030f 	bic.w	r3, r3, #15
 80103c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80103c4:	6a3b      	ldr	r3, [r7, #32]
 80103c6:	085b      	lsrs	r3, r3, #1
 80103c8:	b29b      	uxth	r3, r3
 80103ca:	f003 0307 	and.w	r3, r3, #7
 80103ce:	b29a      	uxth	r2, r3
 80103d0:	8bfb      	ldrh	r3, [r7, #30]
 80103d2:	4313      	orrs	r3, r2
 80103d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	8bfa      	ldrh	r2, [r7, #30]
 80103dc:	60da      	str	r2, [r3, #12]
 80103de:	e062      	b.n	80104a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80103e0:	2301      	movs	r3, #1
 80103e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80103e6:	e05e      	b.n	80104a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80103e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80103ec:	2b08      	cmp	r3, #8
 80103ee:	d828      	bhi.n	8010442 <UART_SetConfig+0x56a>
 80103f0:	a201      	add	r2, pc, #4	@ (adr r2, 80103f8 <UART_SetConfig+0x520>)
 80103f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103f6:	bf00      	nop
 80103f8:	0801041d 	.word	0x0801041d
 80103fc:	08010425 	.word	0x08010425
 8010400:	0801042d 	.word	0x0801042d
 8010404:	08010443 	.word	0x08010443
 8010408:	08010433 	.word	0x08010433
 801040c:	08010443 	.word	0x08010443
 8010410:	08010443 	.word	0x08010443
 8010414:	08010443 	.word	0x08010443
 8010418:	0801043b 	.word	0x0801043b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801041c:	f7fc fbe8 	bl	800cbf0 <HAL_RCC_GetPCLK1Freq>
 8010420:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010422:	e014      	b.n	801044e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010424:	f7fc fbfa 	bl	800cc1c <HAL_RCC_GetPCLK2Freq>
 8010428:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801042a:	e010      	b.n	801044e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801042c:	4b1a      	ldr	r3, [pc, #104]	@ (8010498 <UART_SetConfig+0x5c0>)
 801042e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010430:	e00d      	b.n	801044e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010432:	f7fc fb6f 	bl	800cb14 <HAL_RCC_GetSysClockFreq>
 8010436:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010438:	e009      	b.n	801044e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801043a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801043e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010440:	e005      	b.n	801044e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8010442:	2300      	movs	r3, #0
 8010444:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010446:	2301      	movs	r3, #1
 8010448:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 801044c:	bf00      	nop
    }

    if (pclk != 0U)
 801044e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010450:	2b00      	cmp	r3, #0
 8010452:	d028      	beq.n	80104a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010458:	4a10      	ldr	r2, [pc, #64]	@ (801049c <UART_SetConfig+0x5c4>)
 801045a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801045e:	461a      	mov	r2, r3
 8010460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010462:	fbb3 f2f2 	udiv	r2, r3, r2
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	085b      	lsrs	r3, r3, #1
 801046c:	441a      	add	r2, r3
 801046e:	697b      	ldr	r3, [r7, #20]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	fbb2 f3f3 	udiv	r3, r2, r3
 8010476:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010478:	6a3b      	ldr	r3, [r7, #32]
 801047a:	2b0f      	cmp	r3, #15
 801047c:	d910      	bls.n	80104a0 <UART_SetConfig+0x5c8>
 801047e:	6a3b      	ldr	r3, [r7, #32]
 8010480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010484:	d20c      	bcs.n	80104a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010486:	6a3b      	ldr	r3, [r7, #32]
 8010488:	b29a      	uxth	r2, r3
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	60da      	str	r2, [r3, #12]
 8010490:	e009      	b.n	80104a6 <UART_SetConfig+0x5ce>
 8010492:	bf00      	nop
 8010494:	40008000 	.word	0x40008000
 8010498:	00f42400 	.word	0x00f42400
 801049c:	08013a50 	.word	0x08013a50
      }
      else
      {
        ret = HAL_ERROR;
 80104a0:	2301      	movs	r3, #1
 80104a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	2201      	movs	r2, #1
 80104aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80104ae:	697b      	ldr	r3, [r7, #20]
 80104b0:	2201      	movs	r2, #1
 80104b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	2200      	movs	r2, #0
 80104ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	2200      	movs	r2, #0
 80104c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80104c2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3730      	adds	r7, #48	@ 0x30
 80104ca:	46bd      	mov	sp, r7
 80104cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080104d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80104d0:	b480      	push	{r7}
 80104d2:	b083      	sub	sp, #12
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104dc:	f003 0308 	and.w	r3, r3, #8
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d00a      	beq.n	80104fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	685b      	ldr	r3, [r3, #4]
 80104ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	430a      	orrs	r2, r1
 80104f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104fe:	f003 0301 	and.w	r3, r3, #1
 8010502:	2b00      	cmp	r3, #0
 8010504:	d00a      	beq.n	801051c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	685b      	ldr	r3, [r3, #4]
 801050c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	430a      	orrs	r2, r1
 801051a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010520:	f003 0302 	and.w	r3, r3, #2
 8010524:	2b00      	cmp	r3, #0
 8010526:	d00a      	beq.n	801053e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	685b      	ldr	r3, [r3, #4]
 801052e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	430a      	orrs	r2, r1
 801053c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010542:	f003 0304 	and.w	r3, r3, #4
 8010546:	2b00      	cmp	r3, #0
 8010548:	d00a      	beq.n	8010560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	430a      	orrs	r2, r1
 801055e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010564:	f003 0310 	and.w	r3, r3, #16
 8010568:	2b00      	cmp	r3, #0
 801056a:	d00a      	beq.n	8010582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	689b      	ldr	r3, [r3, #8]
 8010572:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	430a      	orrs	r2, r1
 8010580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010586:	f003 0320 	and.w	r3, r3, #32
 801058a:	2b00      	cmp	r3, #0
 801058c:	d00a      	beq.n	80105a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	689b      	ldr	r3, [r3, #8]
 8010594:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	430a      	orrs	r2, r1
 80105a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d01a      	beq.n	80105e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	685b      	ldr	r3, [r3, #4]
 80105b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	430a      	orrs	r2, r1
 80105c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80105ce:	d10a      	bne.n	80105e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	430a      	orrs	r2, r1
 80105e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d00a      	beq.n	8010608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	685b      	ldr	r3, [r3, #4]
 80105f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	430a      	orrs	r2, r1
 8010606:	605a      	str	r2, [r3, #4]
  }
}
 8010608:	bf00      	nop
 801060a:	370c      	adds	r7, #12
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b098      	sub	sp, #96	@ 0x60
 8010618:	af02      	add	r7, sp, #8
 801061a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2200      	movs	r2, #0
 8010620:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010624:	f7f9 faca 	bl	8009bbc <HAL_GetTick>
 8010628:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	f003 0308 	and.w	r3, r3, #8
 8010634:	2b08      	cmp	r3, #8
 8010636:	d12f      	bne.n	8010698 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010638:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801063c:	9300      	str	r3, [sp, #0]
 801063e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010640:	2200      	movs	r2, #0
 8010642:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f000 f88e 	bl	8010768 <UART_WaitOnFlagUntilTimeout>
 801064c:	4603      	mov	r3, r0
 801064e:	2b00      	cmp	r3, #0
 8010650:	d022      	beq.n	8010698 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801065a:	e853 3f00 	ldrex	r3, [r3]
 801065e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010662:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010666:	653b      	str	r3, [r7, #80]	@ 0x50
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	461a      	mov	r2, r3
 801066e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010670:	647b      	str	r3, [r7, #68]	@ 0x44
 8010672:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010674:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010676:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010678:	e841 2300 	strex	r3, r2, [r1]
 801067c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801067e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010680:	2b00      	cmp	r3, #0
 8010682:	d1e6      	bne.n	8010652 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2220      	movs	r2, #32
 8010688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2200      	movs	r2, #0
 8010690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010694:	2303      	movs	r3, #3
 8010696:	e063      	b.n	8010760 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	f003 0304 	and.w	r3, r3, #4
 80106a2:	2b04      	cmp	r3, #4
 80106a4:	d149      	bne.n	801073a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80106a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80106aa:	9300      	str	r3, [sp, #0]
 80106ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106ae:	2200      	movs	r2, #0
 80106b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f000 f857 	bl	8010768 <UART_WaitOnFlagUntilTimeout>
 80106ba:	4603      	mov	r3, r0
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d03c      	beq.n	801073a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106c8:	e853 3f00 	ldrex	r3, [r3]
 80106cc:	623b      	str	r3, [r7, #32]
   return(result);
 80106ce:	6a3b      	ldr	r3, [r7, #32]
 80106d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80106d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	461a      	mov	r2, r3
 80106dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106de:	633b      	str	r3, [r7, #48]	@ 0x30
 80106e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80106e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80106e6:	e841 2300 	strex	r3, r2, [r1]
 80106ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80106ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d1e6      	bne.n	80106c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	3308      	adds	r3, #8
 80106f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	e853 3f00 	ldrex	r3, [r3]
 8010700:	60fb      	str	r3, [r7, #12]
   return(result);
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	f023 0301 	bic.w	r3, r3, #1
 8010708:	64bb      	str	r3, [r7, #72]	@ 0x48
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	3308      	adds	r3, #8
 8010710:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010712:	61fa      	str	r2, [r7, #28]
 8010714:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010716:	69b9      	ldr	r1, [r7, #24]
 8010718:	69fa      	ldr	r2, [r7, #28]
 801071a:	e841 2300 	strex	r3, r2, [r1]
 801071e:	617b      	str	r3, [r7, #20]
   return(result);
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d1e5      	bne.n	80106f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2220      	movs	r2, #32
 801072a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2200      	movs	r2, #0
 8010732:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010736:	2303      	movs	r3, #3
 8010738:	e012      	b.n	8010760 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2220      	movs	r2, #32
 801073e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2220      	movs	r2, #32
 8010746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2200      	movs	r2, #0
 801074e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2200      	movs	r2, #0
 8010754:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2200      	movs	r2, #0
 801075a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801075e:	2300      	movs	r3, #0
}
 8010760:	4618      	mov	r0, r3
 8010762:	3758      	adds	r7, #88	@ 0x58
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}

08010768 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010768:	b580      	push	{r7, lr}
 801076a:	b084      	sub	sp, #16
 801076c:	af00      	add	r7, sp, #0
 801076e:	60f8      	str	r0, [r7, #12]
 8010770:	60b9      	str	r1, [r7, #8]
 8010772:	603b      	str	r3, [r7, #0]
 8010774:	4613      	mov	r3, r2
 8010776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010778:	e04f      	b.n	801081a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801077a:	69bb      	ldr	r3, [r7, #24]
 801077c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010780:	d04b      	beq.n	801081a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010782:	f7f9 fa1b 	bl	8009bbc <HAL_GetTick>
 8010786:	4602      	mov	r2, r0
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	1ad3      	subs	r3, r2, r3
 801078c:	69ba      	ldr	r2, [r7, #24]
 801078e:	429a      	cmp	r2, r3
 8010790:	d302      	bcc.n	8010798 <UART_WaitOnFlagUntilTimeout+0x30>
 8010792:	69bb      	ldr	r3, [r7, #24]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d101      	bne.n	801079c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010798:	2303      	movs	r3, #3
 801079a:	e04e      	b.n	801083a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	f003 0304 	and.w	r3, r3, #4
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d037      	beq.n	801081a <UART_WaitOnFlagUntilTimeout+0xb2>
 80107aa:	68bb      	ldr	r3, [r7, #8]
 80107ac:	2b80      	cmp	r3, #128	@ 0x80
 80107ae:	d034      	beq.n	801081a <UART_WaitOnFlagUntilTimeout+0xb2>
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	2b40      	cmp	r3, #64	@ 0x40
 80107b4:	d031      	beq.n	801081a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	69db      	ldr	r3, [r3, #28]
 80107bc:	f003 0308 	and.w	r3, r3, #8
 80107c0:	2b08      	cmp	r3, #8
 80107c2:	d110      	bne.n	80107e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	2208      	movs	r2, #8
 80107ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80107cc:	68f8      	ldr	r0, [r7, #12]
 80107ce:	f000 f920 	bl	8010a12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	2208      	movs	r2, #8
 80107d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	2200      	movs	r2, #0
 80107de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80107e2:	2301      	movs	r3, #1
 80107e4:	e029      	b.n	801083a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	69db      	ldr	r3, [r3, #28]
 80107ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80107f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80107f4:	d111      	bne.n	801081a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80107fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010800:	68f8      	ldr	r0, [r7, #12]
 8010802:	f000 f906 	bl	8010a12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	2220      	movs	r2, #32
 801080a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	2200      	movs	r2, #0
 8010812:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010816:	2303      	movs	r3, #3
 8010818:	e00f      	b.n	801083a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	69da      	ldr	r2, [r3, #28]
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	4013      	ands	r3, r2
 8010824:	68ba      	ldr	r2, [r7, #8]
 8010826:	429a      	cmp	r2, r3
 8010828:	bf0c      	ite	eq
 801082a:	2301      	moveq	r3, #1
 801082c:	2300      	movne	r3, #0
 801082e:	b2db      	uxtb	r3, r3
 8010830:	461a      	mov	r2, r3
 8010832:	79fb      	ldrb	r3, [r7, #7]
 8010834:	429a      	cmp	r2, r3
 8010836:	d0a0      	beq.n	801077a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010838:	2300      	movs	r3, #0
}
 801083a:	4618      	mov	r0, r3
 801083c:	3710      	adds	r7, #16
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}
	...

08010844 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b096      	sub	sp, #88	@ 0x58
 8010848:	af00      	add	r7, sp, #0
 801084a:	60f8      	str	r0, [r7, #12]
 801084c:	60b9      	str	r1, [r7, #8]
 801084e:	4613      	mov	r3, r2
 8010850:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	68ba      	ldr	r2, [r7, #8]
 8010856:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	88fa      	ldrh	r2, [r7, #6]
 801085c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	2200      	movs	r2, #0
 8010864:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	2222      	movs	r2, #34	@ 0x22
 801086c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010876:	2b00      	cmp	r3, #0
 8010878:	d02d      	beq.n	80108d6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010880:	4a40      	ldr	r2, [pc, #256]	@ (8010984 <UART_Start_Receive_DMA+0x140>)
 8010882:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801088a:	4a3f      	ldr	r2, [pc, #252]	@ (8010988 <UART_Start_Receive_DMA+0x144>)
 801088c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010894:	4a3d      	ldr	r2, [pc, #244]	@ (801098c <UART_Start_Receive_DMA+0x148>)
 8010896:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801089e:	2200      	movs	r2, #0
 80108a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	3324      	adds	r3, #36	@ 0x24
 80108ae:	4619      	mov	r1, r3
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80108b4:	461a      	mov	r2, r3
 80108b6:	88fb      	ldrh	r3, [r7, #6]
 80108b8:	f7fa ffbc 	bl	800b834 <HAL_DMA_Start_IT>
 80108bc:	4603      	mov	r3, r0
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d009      	beq.n	80108d6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	2210      	movs	r2, #16
 80108c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	2220      	movs	r2, #32
 80108ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80108d2:	2301      	movs	r3, #1
 80108d4:	e051      	b.n	801097a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	691b      	ldr	r3, [r3, #16]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d018      	beq.n	8010910 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108e6:	e853 3f00 	ldrex	r3, [r3]
 80108ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80108ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80108ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80108f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	461a      	mov	r2, r3
 80108fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80108fe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010900:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010902:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010904:	e841 2300 	strex	r3, r2, [r1]
 8010908:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801090a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801090c:	2b00      	cmp	r3, #0
 801090e:	d1e6      	bne.n	80108de <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	3308      	adds	r3, #8
 8010916:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801091a:	e853 3f00 	ldrex	r3, [r3]
 801091e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010922:	f043 0301 	orr.w	r3, r3, #1
 8010926:	653b      	str	r3, [r7, #80]	@ 0x50
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	3308      	adds	r3, #8
 801092e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010930:	637a      	str	r2, [r7, #52]	@ 0x34
 8010932:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010934:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010936:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010938:	e841 2300 	strex	r3, r2, [r1]
 801093c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801093e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010940:	2b00      	cmp	r3, #0
 8010942:	d1e5      	bne.n	8010910 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	3308      	adds	r3, #8
 801094a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801094c:	697b      	ldr	r3, [r7, #20]
 801094e:	e853 3f00 	ldrex	r3, [r3]
 8010952:	613b      	str	r3, [r7, #16]
   return(result);
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801095a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	3308      	adds	r3, #8
 8010962:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010964:	623a      	str	r2, [r7, #32]
 8010966:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010968:	69f9      	ldr	r1, [r7, #28]
 801096a:	6a3a      	ldr	r2, [r7, #32]
 801096c:	e841 2300 	strex	r3, r2, [r1]
 8010970:	61bb      	str	r3, [r7, #24]
   return(result);
 8010972:	69bb      	ldr	r3, [r7, #24]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d1e5      	bne.n	8010944 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010978:	2300      	movs	r3, #0
}
 801097a:	4618      	mov	r0, r3
 801097c:	3758      	adds	r7, #88	@ 0x58
 801097e:	46bd      	mov	sp, r7
 8010980:	bd80      	pop	{r7, pc}
 8010982:	bf00      	nop
 8010984:	08010adf 	.word	0x08010adf
 8010988:	08010c13 	.word	0x08010c13
 801098c:	08010c59 	.word	0x08010c59

08010990 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010990:	b480      	push	{r7}
 8010992:	b08f      	sub	sp, #60	@ 0x3c
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801099e:	6a3b      	ldr	r3, [r7, #32]
 80109a0:	e853 3f00 	ldrex	r3, [r3]
 80109a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80109a6:	69fb      	ldr	r3, [r7, #28]
 80109a8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80109ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	461a      	mov	r2, r3
 80109b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80109b8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80109bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80109be:	e841 2300 	strex	r3, r2, [r1]
 80109c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80109c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d1e6      	bne.n	8010998 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	3308      	adds	r3, #8
 80109d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	e853 3f00 	ldrex	r3, [r3]
 80109d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80109e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	3308      	adds	r3, #8
 80109e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80109ea:	61ba      	str	r2, [r7, #24]
 80109ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ee:	6979      	ldr	r1, [r7, #20]
 80109f0:	69ba      	ldr	r2, [r7, #24]
 80109f2:	e841 2300 	strex	r3, r2, [r1]
 80109f6:	613b      	str	r3, [r7, #16]
   return(result);
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d1e5      	bne.n	80109ca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2220      	movs	r2, #32
 8010a02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010a06:	bf00      	nop
 8010a08:	373c      	adds	r7, #60	@ 0x3c
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a10:	4770      	bx	lr

08010a12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010a12:	b480      	push	{r7}
 8010a14:	b095      	sub	sp, #84	@ 0x54
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a22:	e853 3f00 	ldrex	r3, [r3]
 8010a26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	461a      	mov	r2, r3
 8010a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010a38:	643b      	str	r3, [r7, #64]	@ 0x40
 8010a3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010a3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010a40:	e841 2300 	strex	r3, r2, [r1]
 8010a44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d1e6      	bne.n	8010a1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	3308      	adds	r3, #8
 8010a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a54:	6a3b      	ldr	r3, [r7, #32]
 8010a56:	e853 3f00 	ldrex	r3, [r3]
 8010a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8010a5c:	69fb      	ldr	r3, [r7, #28]
 8010a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010a62:	f023 0301 	bic.w	r3, r3, #1
 8010a66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	3308      	adds	r3, #8
 8010a6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010a70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010a72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010a76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a78:	e841 2300 	strex	r3, r2, [r1]
 8010a7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d1e3      	bne.n	8010a4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a88:	2b01      	cmp	r3, #1
 8010a8a:	d118      	bne.n	8010abe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	e853 3f00 	ldrex	r3, [r3]
 8010a98:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	f023 0310 	bic.w	r3, r3, #16
 8010aa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	461a      	mov	r2, r3
 8010aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010aaa:	61bb      	str	r3, [r7, #24]
 8010aac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aae:	6979      	ldr	r1, [r7, #20]
 8010ab0:	69ba      	ldr	r2, [r7, #24]
 8010ab2:	e841 2300 	strex	r3, r2, [r1]
 8010ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d1e6      	bne.n	8010a8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2220      	movs	r2, #32
 8010ac2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2200      	movs	r2, #0
 8010ad0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010ad2:	bf00      	nop
 8010ad4:	3754      	adds	r7, #84	@ 0x54
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010adc:	4770      	bx	lr

08010ade <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010ade:	b580      	push	{r7, lr}
 8010ae0:	b09c      	sub	sp, #112	@ 0x70
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010aea:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	f003 0320 	and.w	r3, r3, #32
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d171      	bne.n	8010bde <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8010afa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010afc:	2200      	movs	r2, #0
 8010afe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010b02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b0a:	e853 3f00 	ldrex	r3, [r3]
 8010b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010b10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010b12:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010b16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010b18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	461a      	mov	r2, r3
 8010b1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010b20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010b22:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b24:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010b26:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010b28:	e841 2300 	strex	r3, r2, [r1]
 8010b2c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010b2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d1e6      	bne.n	8010b02 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	3308      	adds	r3, #8
 8010b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b3e:	e853 3f00 	ldrex	r3, [r3]
 8010b42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b46:	f023 0301 	bic.w	r3, r3, #1
 8010b4a:	667b      	str	r3, [r7, #100]	@ 0x64
 8010b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	3308      	adds	r3, #8
 8010b52:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010b54:	647a      	str	r2, [r7, #68]	@ 0x44
 8010b56:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010b5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010b5c:	e841 2300 	strex	r3, r2, [r1]
 8010b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d1e5      	bne.n	8010b34 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010b68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	3308      	adds	r3, #8
 8010b6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b72:	e853 3f00 	ldrex	r3, [r3]
 8010b76:	623b      	str	r3, [r7, #32]
   return(result);
 8010b78:	6a3b      	ldr	r3, [r7, #32]
 8010b7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010b7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8010b80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	3308      	adds	r3, #8
 8010b86:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010b88:	633a      	str	r2, [r7, #48]	@ 0x30
 8010b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010b8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b90:	e841 2300 	strex	r3, r2, [r1]
 8010b94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d1e5      	bne.n	8010b68 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010b9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b9e:	2220      	movs	r2, #32
 8010ba0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ba6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010ba8:	2b01      	cmp	r3, #1
 8010baa:	d118      	bne.n	8010bde <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bb2:	693b      	ldr	r3, [r7, #16]
 8010bb4:	e853 3f00 	ldrex	r3, [r3]
 8010bb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	f023 0310 	bic.w	r3, r3, #16
 8010bc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010bc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	461a      	mov	r2, r3
 8010bc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010bca:	61fb      	str	r3, [r7, #28]
 8010bcc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bce:	69b9      	ldr	r1, [r7, #24]
 8010bd0:	69fa      	ldr	r2, [r7, #28]
 8010bd2:	e841 2300 	strex	r3, r2, [r1]
 8010bd6:	617b      	str	r3, [r7, #20]
   return(result);
 8010bd8:	697b      	ldr	r3, [r7, #20]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d1e6      	bne.n	8010bac <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010bde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010be0:	2200      	movs	r2, #0
 8010be2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010be8:	2b01      	cmp	r3, #1
 8010bea:	d109      	bne.n	8010c00 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8010bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010bee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010bf2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010bf4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8010bf8:	4611      	mov	r1, r2
 8010bfa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010bfc:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010bfe:	e004      	b.n	8010c0a <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8010c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010c06:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010c08:	4798      	blx	r3
}
 8010c0a:	bf00      	nop
 8010c0c:	3770      	adds	r7, #112	@ 0x70
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	bd80      	pop	{r7, pc}

08010c12 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b084      	sub	sp, #16
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c1e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	2201      	movs	r2, #1
 8010c24:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010c2a:	2b01      	cmp	r3, #1
 8010c2c:	d10b      	bne.n	8010c46 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010c34:	68fa      	ldr	r2, [r7, #12]
 8010c36:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8010c3a:	0852      	lsrs	r2, r2, #1
 8010c3c:	b292      	uxth	r2, r2
 8010c3e:	4611      	mov	r1, r2
 8010c40:	68f8      	ldr	r0, [r7, #12]
 8010c42:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010c44:	e004      	b.n	8010c50 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010c4c:	68f8      	ldr	r0, [r7, #12]
 8010c4e:	4798      	blx	r3
}
 8010c50:	bf00      	nop
 8010c52:	3710      	adds	r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b086      	sub	sp, #24
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c64:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010c6c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010c74:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	689b      	ldr	r3, [r3, #8]
 8010c7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c80:	2b80      	cmp	r3, #128	@ 0x80
 8010c82:	d109      	bne.n	8010c98 <UART_DMAError+0x40>
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	2b21      	cmp	r3, #33	@ 0x21
 8010c88:	d106      	bne.n	8010c98 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010c92:	6978      	ldr	r0, [r7, #20]
 8010c94:	f7ff fe7c 	bl	8010990 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	689b      	ldr	r3, [r3, #8]
 8010c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010ca2:	2b40      	cmp	r3, #64	@ 0x40
 8010ca4:	d109      	bne.n	8010cba <UART_DMAError+0x62>
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	2b22      	cmp	r3, #34	@ 0x22
 8010caa:	d106      	bne.n	8010cba <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010cb4:	6978      	ldr	r0, [r7, #20]
 8010cb6:	f7ff feac 	bl	8010a12 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010cc0:	f043 0210 	orr.w	r2, r3, #16
 8010cc4:	697b      	ldr	r3, [r7, #20]
 8010cc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8010cca:	697b      	ldr	r3, [r7, #20]
 8010ccc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010cd0:	6978      	ldr	r0, [r7, #20]
 8010cd2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010cd4:	bf00      	nop
 8010cd6:	3718      	adds	r7, #24
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}

08010cdc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b084      	sub	sp, #16
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ce8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	2200      	movs	r2, #0
 8010cee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010cf8:	68f8      	ldr	r0, [r7, #12]
 8010cfa:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010cfc:	bf00      	nop
 8010cfe:	3710      	adds	r7, #16
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b088      	sub	sp, #32
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	e853 3f00 	ldrex	r3, [r3]
 8010d18:	60bb      	str	r3, [r7, #8]
   return(result);
 8010d1a:	68bb      	ldr	r3, [r7, #8]
 8010d1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d20:	61fb      	str	r3, [r7, #28]
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	461a      	mov	r2, r3
 8010d28:	69fb      	ldr	r3, [r7, #28]
 8010d2a:	61bb      	str	r3, [r7, #24]
 8010d2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d2e:	6979      	ldr	r1, [r7, #20]
 8010d30:	69ba      	ldr	r2, [r7, #24]
 8010d32:	e841 2300 	strex	r3, r2, [r1]
 8010d36:	613b      	str	r3, [r7, #16]
   return(result);
 8010d38:	693b      	ldr	r3, [r7, #16]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d1e6      	bne.n	8010d0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2220      	movs	r2, #32
 8010d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	2200      	movs	r2, #0
 8010d4a:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d56:	bf00      	nop
 8010d58:	3720      	adds	r7, #32
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}

08010d5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010d5e:	b480      	push	{r7}
 8010d60:	b083      	sub	sp, #12
 8010d62:	af00      	add	r7, sp, #0
 8010d64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010d66:	bf00      	nop
 8010d68:	370c      	adds	r7, #12
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d70:	4770      	bx	lr

08010d72 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010d72:	b480      	push	{r7}
 8010d74:	b083      	sub	sp, #12
 8010d76:	af00      	add	r7, sp, #0
 8010d78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010d7a:	bf00      	nop
 8010d7c:	370c      	adds	r7, #12
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d84:	4770      	bx	lr

08010d86 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010d86:	b480      	push	{r7}
 8010d88:	b083      	sub	sp, #12
 8010d8a:	af00      	add	r7, sp, #0
 8010d8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010d8e:	bf00      	nop
 8010d90:	370c      	adds	r7, #12
 8010d92:	46bd      	mov	sp, r7
 8010d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d98:	4770      	bx	lr

08010d9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010d9a:	b480      	push	{r7}
 8010d9c:	b085      	sub	sp, #20
 8010d9e:	af00      	add	r7, sp, #0
 8010da0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010da8:	2b01      	cmp	r3, #1
 8010daa:	d101      	bne.n	8010db0 <HAL_UARTEx_DisableFifoMode+0x16>
 8010dac:	2302      	movs	r3, #2
 8010dae:	e027      	b.n	8010e00 <HAL_UARTEx_DisableFifoMode+0x66>
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2201      	movs	r2, #1
 8010db4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2224      	movs	r2, #36	@ 0x24
 8010dbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	681a      	ldr	r2, [r3, #0]
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	f022 0201 	bic.w	r2, r2, #1
 8010dd6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010dde:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	2200      	movs	r2, #0
 8010de4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	68fa      	ldr	r2, [r7, #12]
 8010dec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	2220      	movs	r2, #32
 8010df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2200      	movs	r2, #0
 8010dfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010dfe:	2300      	movs	r3, #0
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3714      	adds	r7, #20
 8010e04:	46bd      	mov	sp, r7
 8010e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0a:	4770      	bx	lr

08010e0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010e1c:	2b01      	cmp	r3, #1
 8010e1e:	d101      	bne.n	8010e24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010e20:	2302      	movs	r3, #2
 8010e22:	e02d      	b.n	8010e80 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2201      	movs	r2, #1
 8010e28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2224      	movs	r2, #36	@ 0x24
 8010e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	681a      	ldr	r2, [r3, #0]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	f022 0201 	bic.w	r2, r2, #1
 8010e4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	689b      	ldr	r3, [r3, #8]
 8010e52:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	683a      	ldr	r2, [r7, #0]
 8010e5c:	430a      	orrs	r2, r1
 8010e5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f000 f84f 	bl	8010f04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	68fa      	ldr	r2, [r7, #12]
 8010e6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	2220      	movs	r2, #32
 8010e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	2200      	movs	r2, #0
 8010e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010e7e:	2300      	movs	r3, #0
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3710      	adds	r7, #16
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b084      	sub	sp, #16
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010e98:	2b01      	cmp	r3, #1
 8010e9a:	d101      	bne.n	8010ea0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010e9c:	2302      	movs	r3, #2
 8010e9e:	e02d      	b.n	8010efc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	2201      	movs	r2, #1
 8010ea4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	2224      	movs	r2, #36	@ 0x24
 8010eac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	681a      	ldr	r2, [r3, #0]
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	f022 0201 	bic.w	r2, r2, #1
 8010ec6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	689b      	ldr	r3, [r3, #8]
 8010ece:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	683a      	ldr	r2, [r7, #0]
 8010ed8:	430a      	orrs	r2, r1
 8010eda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010edc:	6878      	ldr	r0, [r7, #4]
 8010ede:	f000 f811 	bl	8010f04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	68fa      	ldr	r2, [r7, #12]
 8010ee8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2220      	movs	r2, #32
 8010eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010efa:	2300      	movs	r3, #0
}
 8010efc:	4618      	mov	r0, r3
 8010efe:	3710      	adds	r7, #16
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}

08010f04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010f04:	b480      	push	{r7}
 8010f06:	b085      	sub	sp, #20
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d108      	bne.n	8010f26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2201      	movs	r2, #1
 8010f18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2201      	movs	r2, #1
 8010f20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010f24:	e031      	b.n	8010f8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010f26:	2308      	movs	r3, #8
 8010f28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010f2a:	2308      	movs	r3, #8
 8010f2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	689b      	ldr	r3, [r3, #8]
 8010f34:	0e5b      	lsrs	r3, r3, #25
 8010f36:	b2db      	uxtb	r3, r3
 8010f38:	f003 0307 	and.w	r3, r3, #7
 8010f3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	689b      	ldr	r3, [r3, #8]
 8010f44:	0f5b      	lsrs	r3, r3, #29
 8010f46:	b2db      	uxtb	r3, r3
 8010f48:	f003 0307 	and.w	r3, r3, #7
 8010f4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010f4e:	7bbb      	ldrb	r3, [r7, #14]
 8010f50:	7b3a      	ldrb	r2, [r7, #12]
 8010f52:	4911      	ldr	r1, [pc, #68]	@ (8010f98 <UARTEx_SetNbDataToProcess+0x94>)
 8010f54:	5c8a      	ldrb	r2, [r1, r2]
 8010f56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010f5a:	7b3a      	ldrb	r2, [r7, #12]
 8010f5c:	490f      	ldr	r1, [pc, #60]	@ (8010f9c <UARTEx_SetNbDataToProcess+0x98>)
 8010f5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010f60:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f64:	b29a      	uxth	r2, r3
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010f6c:	7bfb      	ldrb	r3, [r7, #15]
 8010f6e:	7b7a      	ldrb	r2, [r7, #13]
 8010f70:	4909      	ldr	r1, [pc, #36]	@ (8010f98 <UARTEx_SetNbDataToProcess+0x94>)
 8010f72:	5c8a      	ldrb	r2, [r1, r2]
 8010f74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010f78:	7b7a      	ldrb	r2, [r7, #13]
 8010f7a:	4908      	ldr	r1, [pc, #32]	@ (8010f9c <UARTEx_SetNbDataToProcess+0x98>)
 8010f7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010f7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f82:	b29a      	uxth	r2, r3
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010f8a:	bf00      	nop
 8010f8c:	3714      	adds	r7, #20
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f94:	4770      	bx	lr
 8010f96:	bf00      	nop
 8010f98:	08013a68 	.word	0x08013a68
 8010f9c:	08013a70 	.word	0x08013a70

08010fa0 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b08b      	sub	sp, #44	@ 0x2c
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	60f8      	str	r0, [r7, #12]
 8010fa8:	60b9      	str	r1, [r7, #8]
 8010faa:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	685b      	ldr	r3, [r3, #4]
 8010fb0:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	685b      	ldr	r3, [r3, #4]
 8010fb6:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	685b      	ldr	r3, [r3, #4]
 8010fbc:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	881b      	ldrh	r3, [r3, #0]
 8010fc2:	461a      	mov	r2, r3
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	885b      	ldrh	r3, [r3, #2]
 8010fc8:	fb02 f303 	mul.w	r3, r2, r3
 8010fcc:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8010fce:	697b      	ldr	r3, [r7, #20]
 8010fd0:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8010fd2:	e013      	b.n	8010ffc <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8010fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd6:	1d1a      	adds	r2, r3, #4
 8010fd8:	627a      	str	r2, [r7, #36]	@ 0x24
 8010fda:	ed93 7a00 	vldr	s14, [r3]
 8010fde:	6a3b      	ldr	r3, [r7, #32]
 8010fe0:	1d1a      	adds	r2, r3, #4
 8010fe2:	623a      	str	r2, [r7, #32]
 8010fe4:	edd3 7a00 	vldr	s15, [r3]
 8010fe8:	69fb      	ldr	r3, [r7, #28]
 8010fea:	1d1a      	adds	r2, r3, #4
 8010fec:	61fa      	str	r2, [r7, #28]
 8010fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ff2:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8010ff6:	69bb      	ldr	r3, [r7, #24]
 8010ff8:	3b01      	subs	r3, #1
 8010ffa:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8010ffc:	69bb      	ldr	r3, [r7, #24]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d1e8      	bne.n	8010fd4 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011002:	2300      	movs	r3, #0
 8011004:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8011006:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801100a:	4618      	mov	r0, r3
 801100c:	372c      	adds	r7, #44	@ 0x2c
 801100e:	46bd      	mov	sp, r7
 8011010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011014:	4770      	bx	lr

08011016 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 8011016:	b480      	push	{r7}
 8011018:	b085      	sub	sp, #20
 801101a:	af00      	add	r7, sp, #0
 801101c:	60f8      	str	r0, [r7, #12]
 801101e:	607b      	str	r3, [r7, #4]
 8011020:	460b      	mov	r3, r1
 8011022:	817b      	strh	r3, [r7, #10]
 8011024:	4613      	mov	r3, r2
 8011026:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	897a      	ldrh	r2, [r7, #10]
 801102c:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	893a      	ldrh	r2, [r7, #8]
 8011032:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	687a      	ldr	r2, [r7, #4]
 8011038:	605a      	str	r2, [r3, #4]
}
 801103a:	bf00      	nop
 801103c:	3714      	adds	r7, #20
 801103e:	46bd      	mov	sp, r7
 8011040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011044:	4770      	bx	lr

08011046 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8011046:	b480      	push	{r7}
 8011048:	b0bb      	sub	sp, #236	@ 0xec
 801104a:	af00      	add	r7, sp, #0
 801104c:	6078      	str	r0, [r7, #4]
 801104e:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	685b      	ldr	r3, [r3, #4]
 8011054:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8011056:	683b      	ldr	r3, [r7, #0]
 8011058:	685b      	ldr	r3, [r3, #4]
 801105a:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	881b      	ldrh	r3, [r3, #0]
 8011060:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	885b      	ldrh	r3, [r3, #2]
 8011066:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8011068:	f04f 0300 	mov.w	r3, #0
 801106c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8011070:	f04f 0300 	mov.w	r3, #0
 8011074:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 8011076:	2300      	movs	r3, #0
 8011078:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 801107c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801107e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 8011082:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011084:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8011088:	e03b      	b.n	8011102 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 801108a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801108c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011090:	1ad3      	subs	r3, r2, r3
 8011092:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011096:	e00c      	b.n	80110b2 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8011098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801109c:	1d1a      	adds	r2, r3, #4
 801109e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80110a2:	f04f 0200 	mov.w	r2, #0
 80110a6:	601a      	str	r2, [r3, #0]
        j--;
 80110a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80110ac:	3b01      	subs	r3, #1
 80110ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 80110b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d1ee      	bne.n	8011098 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 80110ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110be:	1d1a      	adds	r2, r3, #4
 80110c0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80110c4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80110c8:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 80110ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80110ce:	3b01      	subs	r3, #1
 80110d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 80110d4:	e00c      	b.n	80110f0 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 80110d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110da:	1d1a      	adds	r2, r3, #4
 80110dc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80110e0:	f04f 0200 	mov.w	r2, #0
 80110e4:	601a      	str	r2, [r3, #0]
        j--;
 80110e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80110ea:	3b01      	subs	r3, #1
 80110ec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 80110f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d1ee      	bne.n	80110d6 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 80110f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80110fc:	3b01      	subs	r3, #1
 80110fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 8011102:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011106:	2b00      	cmp	r3, #0
 8011108:	d1bf      	bne.n	801108a <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 801110a:	2300      	movs	r3, #0
 801110c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011110:	e2c7      	b.n	80116a2 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8011112:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011116:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	685a      	ldr	r2, [r3, #4]
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	885b      	ldrh	r3, [r3, #2]
 8011120:	3301      	adds	r3, #1
 8011122:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 8011126:	fb01 f303 	mul.w	r3, r1, r3
 801112a:	009b      	lsls	r3, r3, #2
 801112c:	4413      	add	r3, r2
 801112e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 8011132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 801113c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011140:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8011144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011148:	3301      	adds	r3, #1
 801114a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801114e:	e02c      	b.n	80111aa <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	685a      	ldr	r2, [r3, #4]
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	885b      	ldrh	r3, [r3, #2]
 8011158:	4619      	mov	r1, r3
 801115a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801115e:	fb03 f101 	mul.w	r1, r3, r1
 8011162:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011166:	440b      	add	r3, r1
 8011168:	009b      	lsls	r3, r3, #2
 801116a:	4413      	add	r3, r2
 801116c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 8011170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8011178:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 801117c:	eeb0 7ae7 	vabs.f32	s14, s15
 8011180:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011184:	eef0 7ae7 	vabs.f32	s15, s15
 8011188:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801118c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011190:	dd06      	ble.n	80111a0 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 8011192:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011196:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 801119a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801119c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80111a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80111a4:	3301      	adds	r3, #1
 80111a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80111aa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80111ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80111b0:	429a      	cmp	r2, r3
 80111b2:	d3cd      	bcc.n	8011150 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 80111b4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80111b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80111bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111c0:	f000 809b 	beq.w	80112fa <arm_mat_inverse_f32+0x2b4>
 80111c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80111c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80111cc:	429a      	cmp	r2, r3
 80111ce:	f000 8094 	beq.w	80112fa <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	885b      	ldrh	r3, [r3, #2]
 80111e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80111e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80111ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80111ee:	1ad3      	subs	r3, r2, r3
 80111f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80111f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80111f6:	fb03 f202 	mul.w	r2, r3, r2
 80111fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80111fe:	4413      	add	r3, r2
 8011200:	009b      	lsls	r3, r3, #2
 8011202:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8011206:	4413      	add	r3, r2
 8011208:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801120c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801120e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011212:	fb03 f202 	mul.w	r2, r3, r2
 8011216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801121a:	4413      	add	r3, r2
 801121c:	009b      	lsls	r3, r3, #2
 801121e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011222:	4413      	add	r3, r2
 8011224:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011228:	2300      	movs	r3, #0
 801122a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801122e:	e018      	b.n	8011262 <arm_mat_inverse_f32+0x21c>
 8011230:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011238:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801123c:	1d1a      	adds	r2, r3, #4
 801123e:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8011242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011246:	6812      	ldr	r2, [r2, #0]
 8011248:	601a      	str	r2, [r3, #0]
 801124a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801124e:	1d1a      	adds	r2, r3, #4
 8011250:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8011254:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011256:	601a      	str	r2, [r3, #0]
 8011258:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801125c:	3301      	adds	r3, #1
 801125e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011262:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8011266:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011268:	429a      	cmp	r2, r3
 801126a:	dbe1      	blt.n	8011230 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	685b      	ldr	r3, [r3, #4]
 8011278:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	885b      	ldrh	r3, [r3, #2]
 8011280:	647b      	str	r3, [r7, #68]	@ 0x44
 8011282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011284:	643b      	str	r3, [r7, #64]	@ 0x40
 8011286:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011288:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801128a:	fb02 f303 	mul.w	r3, r2, r3
 801128e:	009b      	lsls	r3, r3, #2
 8011290:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8011294:	4413      	add	r3, r2
 8011296:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801129a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801129c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80112a0:	fb02 f303 	mul.w	r3, r2, r3
 80112a4:	009b      	lsls	r3, r3, #2
 80112a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80112aa:	4413      	add	r3, r2
 80112ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80112b0:	2300      	movs	r3, #0
 80112b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80112b6:	e018      	b.n	80112ea <arm_mat_inverse_f32+0x2a4>
 80112b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80112c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112c4:	1d1a      	adds	r2, r3, #4
 80112c6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80112ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80112ce:	6812      	ldr	r2, [r2, #0]
 80112d0:	601a      	str	r2, [r3, #0]
 80112d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80112d6:	1d1a      	adds	r2, r3, #4
 80112d8:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80112dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80112de:	601a      	str	r2, [r3, #0]
 80112e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80112e4:	3301      	adds	r3, #1
 80112e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80112ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80112ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80112f0:	429a      	cmp	r2, r3
 80112f2:	dbe1      	blt.n	80112b8 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 80112f4:	2301      	movs	r3, #1
 80112f6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 80112fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80112fe:	2b01      	cmp	r3, #1
 8011300:	d009      	beq.n	8011316 <arm_mat_inverse_f32+0x2d0>
 8011302:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011306:	eef5 7a40 	vcmp.f32	s15, #0.0
 801130a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801130e:	d102      	bne.n	8011316 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8011310:	f06f 0304 	mvn.w	r3, #4
 8011314:	e208      	b.n	8011728 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 8011316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801131a:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 801131e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011322:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	685b      	ldr	r3, [r3, #4]
 801132a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	885b      	ldrh	r3, [r3, #2]
 8011332:	637b      	str	r3, [r7, #52]	@ 0x34
 8011334:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011336:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801133a:	1ad3      	subs	r3, r2, r3
 801133c:	633b      	str	r3, [r7, #48]	@ 0x30
 801133e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011340:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011342:	fb03 f202 	mul.w	r2, r3, r2
 8011346:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801134a:	4413      	add	r3, r2
 801134c:	009b      	lsls	r3, r3, #2
 801134e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8011352:	4413      	add	r3, r2
 8011354:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011358:	2300      	movs	r3, #0
 801135a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801135e:	e011      	b.n	8011384 <arm_mat_inverse_f32+0x33e>
 8011360:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011364:	1d1a      	adds	r2, r3, #4
 8011366:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 801136a:	ed93 7a00 	vldr	s14, [r3]
 801136e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011376:	edc3 7a00 	vstr	s15, [r3]
 801137a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801137e:	3301      	adds	r3, #1
 8011380:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011384:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8011388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801138a:	429a      	cmp	r2, r3
 801138c:	dbe8      	blt.n	8011360 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 801138e:	683b      	ldr	r3, [r7, #0]
 8011390:	685b      	ldr	r3, [r3, #4]
 8011392:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	885b      	ldrh	r3, [r3, #2]
 801139a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801139c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801139e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80113a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80113a4:	fb02 f303 	mul.w	r3, r2, r3
 80113a8:	009b      	lsls	r3, r3, #2
 80113aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80113ae:	4413      	add	r3, r2
 80113b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80113b4:	2300      	movs	r3, #0
 80113b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80113ba:	e011      	b.n	80113e0 <arm_mat_inverse_f32+0x39a>
 80113bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80113c0:	1d1a      	adds	r2, r3, #4
 80113c2:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 80113c6:	ed93 7a00 	vldr	s14, [r3]
 80113ca:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80113ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80113d2:	edc3 7a00 	vstr	s15, [r3]
 80113d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80113da:	3301      	adds	r3, #1
 80113dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80113e0:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80113e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113e6:	429a      	cmp	r2, r3
 80113e8:	dbe8      	blt.n	80113bc <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 80113ea:	2300      	movs	r3, #0
 80113ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 80113f0:	e0ae      	b.n	8011550 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	685a      	ldr	r2, [r3, #4]
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	885b      	ldrh	r3, [r3, #2]
 80113fa:	4619      	mov	r1, r3
 80113fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011400:	fb03 f101 	mul.w	r1, r3, r1
 8011404:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011408:	440b      	add	r3, r1
 801140a:	009b      	lsls	r3, r3, #2
 801140c:	4413      	add	r3, r2
 801140e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8011412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	885b      	ldrh	r3, [r3, #2]
 8011430:	617b      	str	r3, [r7, #20]
 8011432:	697a      	ldr	r2, [r7, #20]
 8011434:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011438:	1ad3      	subs	r3, r2, r3
 801143a:	613b      	str	r3, [r7, #16]
 801143c:	697b      	ldr	r3, [r7, #20]
 801143e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011442:	fb03 f202 	mul.w	r2, r3, r2
 8011446:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801144a:	4413      	add	r3, r2
 801144c:	009b      	lsls	r3, r3, #2
 801144e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8011452:	4413      	add	r3, r2
 8011454:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801145c:	fb03 f202 	mul.w	r2, r3, r2
 8011460:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011464:	4413      	add	r3, r2
 8011466:	009b      	lsls	r3, r3, #2
 8011468:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 801146c:	4413      	add	r3, r2
 801146e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011472:	2300      	movs	r3, #0
 8011474:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011478:	e01a      	b.n	80114b0 <arm_mat_inverse_f32+0x46a>
 801147a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801147e:	1d1a      	adds	r2, r3, #4
 8011480:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8011484:	ed93 7a00 	vldr	s14, [r3]
 8011488:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801148c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011490:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011494:	1d1a      	adds	r2, r3, #4
 8011496:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 801149a:	ed93 7a00 	vldr	s14, [r3]
 801149e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80114a2:	edc3 7a00 	vstr	s15, [r3]
 80114a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80114aa:	3301      	adds	r3, #1
 80114ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80114b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80114b4:	693b      	ldr	r3, [r7, #16]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	dbdf      	blt.n	801147a <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	885b      	ldrh	r3, [r3, #2]
 80114ce:	60fb      	str	r3, [r7, #12]
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	60bb      	str	r3, [r7, #8]
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80114da:	fb02 f303 	mul.w	r3, r2, r3
 80114de:	009b      	lsls	r3, r3, #2
 80114e0:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80114e4:	4413      	add	r3, r2
 80114e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80114ee:	fb02 f303 	mul.w	r3, r2, r3
 80114f2:	009b      	lsls	r3, r3, #2
 80114f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80114f8:	4413      	add	r3, r2
 80114fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80114fe:	2300      	movs	r3, #0
 8011500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011504:	e01a      	b.n	801153c <arm_mat_inverse_f32+0x4f6>
 8011506:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801150a:	1d1a      	adds	r2, r3, #4
 801150c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8011510:	ed93 7a00 	vldr	s14, [r3]
 8011514:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011518:	ee67 7a27 	vmul.f32	s15, s14, s15
 801151c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011520:	1d1a      	adds	r2, r3, #4
 8011522:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8011526:	ed93 7a00 	vldr	s14, [r3]
 801152a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801152e:	edc3 7a00 	vstr	s15, [r3]
 8011532:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8011536:	3301      	adds	r3, #1
 8011538:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801153c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	429a      	cmp	r2, r3
 8011544:	dbdf      	blt.n	8011506 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8011546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801154a:	3301      	adds	r3, #1
 801154c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011550:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011554:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011556:	429a      	cmp	r2, r3
 8011558:	f4ff af4b 	bcc.w	80113f2 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 801155c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801155e:	3301      	adds	r3, #1
 8011560:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8011564:	e092      	b.n	801168c <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	685a      	ldr	r2, [r3, #4]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	885b      	ldrh	r3, [r3, #2]
 801156e:	4619      	mov	r1, r3
 8011570:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011574:	fb03 f101 	mul.w	r1, r3, r1
 8011578:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801157c:	440b      	add	r3, r1
 801157e:	009b      	lsls	r3, r3, #2
 8011580:	4413      	add	r3, r2
 8011582:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8011586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	685b      	ldr	r3, [r3, #4]
 8011594:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	677b      	str	r3, [r7, #116]	@ 0x74
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	885b      	ldrh	r3, [r3, #2]
 80115a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80115a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80115a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80115a8:	1ad3      	subs	r3, r2, r3
 80115aa:	623b      	str	r3, [r7, #32]
 80115ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ae:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80115b2:	fb03 f202 	mul.w	r2, r3, r2
 80115b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80115ba:	4413      	add	r3, r2
 80115bc:	009b      	lsls	r3, r3, #2
 80115be:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80115c0:	4413      	add	r3, r2
 80115c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80115c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80115c8:	fb03 f202 	mul.w	r2, r3, r2
 80115cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80115d0:	4413      	add	r3, r2
 80115d2:	009b      	lsls	r3, r3, #2
 80115d4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80115d6:	4413      	add	r3, r2
 80115d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80115da:	2300      	movs	r3, #0
 80115dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80115de:	e014      	b.n	801160a <arm_mat_inverse_f32+0x5c4>
 80115e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80115e2:	1d1a      	adds	r2, r3, #4
 80115e4:	677a      	str	r2, [r7, #116]	@ 0x74
 80115e6:	ed93 7a00 	vldr	s14, [r3]
 80115ea:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80115ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80115f4:	1d1a      	adds	r2, r3, #4
 80115f6:	67ba      	str	r2, [r7, #120]	@ 0x78
 80115f8:	ed93 7a00 	vldr	s14, [r3]
 80115fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011600:	edc3 7a00 	vstr	s15, [r3]
 8011604:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011606:	3301      	adds	r3, #1
 8011608:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801160a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801160c:	6a3b      	ldr	r3, [r7, #32]
 801160e:	429a      	cmp	r2, r3
 8011610:	dbe6      	blt.n	80115e0 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8011612:	683b      	ldr	r3, [r7, #0]
 8011614:	685b      	ldr	r3, [r3, #4]
 8011616:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	685b      	ldr	r3, [r3, #4]
 801161c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	885b      	ldrh	r3, [r3, #2]
 8011622:	61fb      	str	r3, [r7, #28]
 8011624:	69fb      	ldr	r3, [r7, #28]
 8011626:	61bb      	str	r3, [r7, #24]
 8011628:	69fb      	ldr	r3, [r7, #28]
 801162a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801162e:	fb02 f303 	mul.w	r3, r2, r3
 8011632:	009b      	lsls	r3, r3, #2
 8011634:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011636:	4413      	add	r3, r2
 8011638:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801163a:	69fb      	ldr	r3, [r7, #28]
 801163c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801163e:	fb02 f303 	mul.w	r3, r2, r3
 8011642:	009b      	lsls	r3, r3, #2
 8011644:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011646:	4413      	add	r3, r2
 8011648:	66bb      	str	r3, [r7, #104]	@ 0x68
 801164a:	2300      	movs	r3, #0
 801164c:	673b      	str	r3, [r7, #112]	@ 0x70
 801164e:	e014      	b.n	801167a <arm_mat_inverse_f32+0x634>
 8011650:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011652:	1d1a      	adds	r2, r3, #4
 8011654:	66ba      	str	r2, [r7, #104]	@ 0x68
 8011656:	ed93 7a00 	vldr	s14, [r3]
 801165a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801165e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011664:	1d1a      	adds	r2, r3, #4
 8011666:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011668:	ed93 7a00 	vldr	s14, [r3]
 801166c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011670:	edc3 7a00 	vstr	s15, [r3]
 8011674:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011676:	3301      	adds	r3, #1
 8011678:	673b      	str	r3, [r7, #112]	@ 0x70
 801167a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801167c:	69bb      	ldr	r3, [r7, #24]
 801167e:	429a      	cmp	r2, r3
 8011680:	dbe6      	blt.n	8011650 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8011682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011686:	3301      	adds	r3, #1
 8011688:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801168c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011690:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011692:	429a      	cmp	r2, r3
 8011694:	f4ff af67 	bcc.w	8011566 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8011698:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801169c:	3301      	adds	r3, #1
 801169e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80116a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80116a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80116a8:	429a      	cmp	r2, r3
 80116aa:	f4ff ad32 	bcc.w	8011112 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80116ae:	2300      	movs	r3, #0
 80116b0:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 80116b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80116b8:	2b01      	cmp	r3, #1
 80116ba:	d033      	beq.n	8011724 <arm_mat_inverse_f32+0x6de>
 80116bc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80116c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80116c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116c8:	d12c      	bne.n	8011724 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	685b      	ldr	r3, [r3, #4]
 80116ce:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 80116d0:	2300      	movs	r3, #0
 80116d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80116d6:	e010      	b.n	80116fa <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 80116d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80116dc:	009b      	lsls	r3, r3, #2
 80116de:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80116e0:	4413      	add	r3, r2
 80116e2:	edd3 7a00 	vldr	s15, [r3]
 80116e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80116ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116ee:	d10d      	bne.n	801170c <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 80116f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80116f4:	3301      	adds	r3, #1
 80116f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80116fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80116fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80116fe:	fb02 f303 	mul.w	r3, r2, r3
 8011702:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8011706:	429a      	cmp	r2, r3
 8011708:	d3e6      	bcc.n	80116d8 <arm_mat_inverse_f32+0x692>
 801170a:	e000      	b.n	801170e <arm_mat_inverse_f32+0x6c8>
            break;
 801170c:	bf00      	nop
      }

      if (i == numRows * numCols)
 801170e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011710:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011712:	fb02 f303 	mul.w	r3, r2, r3
 8011716:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801171a:	429a      	cmp	r2, r3
 801171c:	d102      	bne.n	8011724 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 801171e:	23fb      	movs	r3, #251	@ 0xfb
 8011720:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 8011724:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 8011728:	4618      	mov	r0, r3
 801172a:	37ec      	adds	r7, #236	@ 0xec
 801172c:	46bd      	mov	sp, r7
 801172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011732:	4770      	bx	lr

08011734 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8011734:	b480      	push	{r7}
 8011736:	b093      	sub	sp, #76	@ 0x4c
 8011738:	af00      	add	r7, sp, #0
 801173a:	60f8      	str	r0, [r7, #12]
 801173c:	60b9      	str	r1, [r7, #8]
 801173e:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	685b      	ldr	r3, [r3, #4]
 8011750:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	685b      	ldr	r3, [r3, #4]
 801175c:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	881b      	ldrh	r3, [r3, #0]
 8011762:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	885b      	ldrh	r3, [r3, #2]
 8011768:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	885b      	ldrh	r3, [r3, #2]
 801176e:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8011770:	2300      	movs	r3, #0
 8011772:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011774:	8b7b      	ldrh	r3, [r7, #26]
 8011776:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8011778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801177a:	009b      	lsls	r3, r3, #2
 801177c:	69fa      	ldr	r2, [r7, #28]
 801177e:	4413      	add	r3, r2
 8011780:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8011782:	8b3b      	ldrh	r3, [r7, #24]
 8011784:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	685b      	ldr	r3, [r3, #4]
 801178a:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 801178c:	f04f 0300 	mov.w	r3, #0
 8011790:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8011792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011794:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8011796:	8afb      	ldrh	r3, [r7, #22]
 8011798:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 801179a:	e017      	b.n	80117cc <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 801179c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801179e:	1d1a      	adds	r2, r3, #4
 80117a0:	647a      	str	r2, [r7, #68]	@ 0x44
 80117a2:	ed93 7a00 	vldr	s14, [r3]
 80117a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117a8:	edd3 7a00 	vldr	s15, [r3]
 80117ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117b0:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80117b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117b8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 80117bc:	8b3b      	ldrh	r3, [r7, #24]
 80117be:	009b      	lsls	r3, r3, #2
 80117c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80117c2:	4413      	add	r3, r2
 80117c4:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 80117c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117c8:	3b01      	subs	r3, #1
 80117ca:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 80117cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d1e4      	bne.n	801179c <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 80117d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117d4:	1d1a      	adds	r2, r3, #4
 80117d6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80117d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80117da:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 80117dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117de:	3b01      	subs	r3, #1
 80117e0:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 80117e2:	8b3a      	ldrh	r2, [r7, #24]
 80117e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117e6:	1ad3      	subs	r3, r2, r3
 80117e8:	009b      	lsls	r3, r3, #2
 80117ea:	6a3a      	ldr	r2, [r7, #32]
 80117ec:	4413      	add	r3, r2
 80117ee:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 80117f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d1ca      	bne.n	801178c <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 80117f6:	8b3b      	ldrh	r3, [r7, #24]
 80117f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80117fa:	4413      	add	r3, r2
 80117fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 80117fe:	8afb      	ldrh	r3, [r7, #22]
 8011800:	009b      	lsls	r3, r3, #2
 8011802:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011804:	4413      	add	r3, r2
 8011806:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8011808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801180a:	3b01      	subs	r3, #1
 801180c:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 801180e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011810:	2b00      	cmp	r3, #0
 8011812:	d1b1      	bne.n	8011778 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011814:	2300      	movs	r3, #0
 8011816:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8011818:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 801181c:	4618      	mov	r0, r3
 801181e:	374c      	adds	r7, #76	@ 0x4c
 8011820:	46bd      	mov	sp, r7
 8011822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011826:	4770      	bx	lr

08011828 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8011828:	b480      	push	{r7}
 801182a:	b08b      	sub	sp, #44	@ 0x2c
 801182c:	af00      	add	r7, sp, #0
 801182e:	60f8      	str	r0, [r7, #12]
 8011830:	ed87 0a02 	vstr	s0, [r7, #8]
 8011834:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	685b      	ldr	r3, [r3, #4]
 801183a:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	685b      	ldr	r3, [r3, #4]
 8011840:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	881b      	ldrh	r3, [r3, #0]
 8011846:	461a      	mov	r2, r3
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	885b      	ldrh	r3, [r3, #2]
 801184c:	fb02 f303 	mul.w	r3, r2, r3
 8011850:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8011852:	69bb      	ldr	r3, [r7, #24]
 8011854:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8011856:	e010      	b.n	801187a <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8011858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801185a:	1d1a      	adds	r2, r3, #4
 801185c:	627a      	str	r2, [r7, #36]	@ 0x24
 801185e:	ed93 7a00 	vldr	s14, [r3]
 8011862:	6a3b      	ldr	r3, [r7, #32]
 8011864:	1d1a      	adds	r2, r3, #4
 8011866:	623a      	str	r2, [r7, #32]
 8011868:	edd7 7a02 	vldr	s15, [r7, #8]
 801186c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011870:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8011874:	69fb      	ldr	r3, [r7, #28]
 8011876:	3b01      	subs	r3, #1
 8011878:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 801187a:	69fb      	ldr	r3, [r7, #28]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d1eb      	bne.n	8011858 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011880:	2300      	movs	r3, #0
 8011882:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8011884:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011888:	4618      	mov	r0, r3
 801188a:	372c      	adds	r7, #44	@ 0x2c
 801188c:	46bd      	mov	sp, r7
 801188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011892:	4770      	bx	lr

08011894 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8011894:	b480      	push	{r7}
 8011896:	b08b      	sub	sp, #44	@ 0x2c
 8011898:	af00      	add	r7, sp, #0
 801189a:	60f8      	str	r0, [r7, #12]
 801189c:	60b9      	str	r1, [r7, #8]
 801189e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	685b      	ldr	r3, [r3, #4]
 80118a4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 80118a6:	68bb      	ldr	r3, [r7, #8]
 80118a8:	685b      	ldr	r3, [r3, #4]
 80118aa:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	685b      	ldr	r3, [r3, #4]
 80118b0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	881b      	ldrh	r3, [r3, #0]
 80118b6:	461a      	mov	r2, r3
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	885b      	ldrh	r3, [r3, #2]
 80118bc:	fb02 f303 	mul.w	r3, r2, r3
 80118c0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80118c6:	e013      	b.n	80118f0 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 80118c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118ca:	1d1a      	adds	r2, r3, #4
 80118cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80118ce:	ed93 7a00 	vldr	s14, [r3]
 80118d2:	6a3b      	ldr	r3, [r7, #32]
 80118d4:	1d1a      	adds	r2, r3, #4
 80118d6:	623a      	str	r2, [r7, #32]
 80118d8:	edd3 7a00 	vldr	s15, [r3]
 80118dc:	69fb      	ldr	r3, [r7, #28]
 80118de:	1d1a      	adds	r2, r3, #4
 80118e0:	61fa      	str	r2, [r7, #28]
 80118e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80118e6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80118ea:	69bb      	ldr	r3, [r7, #24]
 80118ec:	3b01      	subs	r3, #1
 80118ee:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80118f0:	69bb      	ldr	r3, [r7, #24]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d1e8      	bne.n	80118c8 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80118f6:	2300      	movs	r3, #0
 80118f8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80118fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80118fe:	4618      	mov	r0, r3
 8011900:	372c      	adds	r7, #44	@ 0x2c
 8011902:	46bd      	mov	sp, r7
 8011904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011908:	4770      	bx	lr

0801190a <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 801190a:	b480      	push	{r7}
 801190c:	b08b      	sub	sp, #44	@ 0x2c
 801190e:	af00      	add	r7, sp, #0
 8011910:	6078      	str	r0, [r7, #4]
 8011912:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	685b      	ldr	r3, [r3, #4]
 8011918:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801191a:	683b      	ldr	r3, [r7, #0]
 801191c:	685b      	ldr	r3, [r3, #4]
 801191e:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	881b      	ldrh	r3, [r3, #0]
 8011924:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	885b      	ldrh	r3, [r3, #2]
 801192a:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 801192c:	89fb      	ldrh	r3, [r7, #14]
 801192e:	61bb      	str	r3, [r7, #24]
 8011930:	2300      	movs	r3, #0
 8011932:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8011934:	697b      	ldr	r3, [r7, #20]
 8011936:	009b      	lsls	r3, r3, #2
 8011938:	693a      	ldr	r2, [r7, #16]
 801193a:	4413      	add	r3, r2
 801193c:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 801193e:	89bb      	ldrh	r3, [r7, #12]
 8011940:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8011942:	e00d      	b.n	8011960 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8011944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011946:	1d1a      	adds	r2, r3, #4
 8011948:	627a      	str	r2, [r7, #36]	@ 0x24
 801194a:	681a      	ldr	r2, [r3, #0]
 801194c:	6a3b      	ldr	r3, [r7, #32]
 801194e:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8011950:	89fb      	ldrh	r3, [r7, #14]
 8011952:	009b      	lsls	r3, r3, #2
 8011954:	6a3a      	ldr	r2, [r7, #32]
 8011956:	4413      	add	r3, r2
 8011958:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 801195a:	69fb      	ldr	r3, [r7, #28]
 801195c:	3b01      	subs	r3, #1
 801195e:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8011960:	69fb      	ldr	r3, [r7, #28]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d1ee      	bne.n	8011944 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	3301      	adds	r3, #1
 801196a:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 801196c:	69bb      	ldr	r3, [r7, #24]
 801196e:	3b01      	subs	r3, #1
 8011970:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8011972:	69bb      	ldr	r3, [r7, #24]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d1dd      	bne.n	8011934 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011978:	2300      	movs	r3, #0
 801197a:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 801197c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011980:	4618      	mov	r0, r3
 8011982:	372c      	adds	r7, #44	@ 0x2c
 8011984:	46bd      	mov	sp, r7
 8011986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198a:	4770      	bx	lr

0801198c <malloc>:
 801198c:	4b02      	ldr	r3, [pc, #8]	@ (8011998 <malloc+0xc>)
 801198e:	4601      	mov	r1, r0
 8011990:	6818      	ldr	r0, [r3, #0]
 8011992:	f000 b825 	b.w	80119e0 <_malloc_r>
 8011996:	bf00      	nop
 8011998:	20000144 	.word	0x20000144

0801199c <sbrk_aligned>:
 801199c:	b570      	push	{r4, r5, r6, lr}
 801199e:	4e0f      	ldr	r6, [pc, #60]	@ (80119dc <sbrk_aligned+0x40>)
 80119a0:	460c      	mov	r4, r1
 80119a2:	6831      	ldr	r1, [r6, #0]
 80119a4:	4605      	mov	r5, r0
 80119a6:	b911      	cbnz	r1, 80119ae <sbrk_aligned+0x12>
 80119a8:	f000 f8ae 	bl	8011b08 <_sbrk_r>
 80119ac:	6030      	str	r0, [r6, #0]
 80119ae:	4621      	mov	r1, r4
 80119b0:	4628      	mov	r0, r5
 80119b2:	f000 f8a9 	bl	8011b08 <_sbrk_r>
 80119b6:	1c43      	adds	r3, r0, #1
 80119b8:	d103      	bne.n	80119c2 <sbrk_aligned+0x26>
 80119ba:	f04f 34ff 	mov.w	r4, #4294967295
 80119be:	4620      	mov	r0, r4
 80119c0:	bd70      	pop	{r4, r5, r6, pc}
 80119c2:	1cc4      	adds	r4, r0, #3
 80119c4:	f024 0403 	bic.w	r4, r4, #3
 80119c8:	42a0      	cmp	r0, r4
 80119ca:	d0f8      	beq.n	80119be <sbrk_aligned+0x22>
 80119cc:	1a21      	subs	r1, r4, r0
 80119ce:	4628      	mov	r0, r5
 80119d0:	f000 f89a 	bl	8011b08 <_sbrk_r>
 80119d4:	3001      	adds	r0, #1
 80119d6:	d1f2      	bne.n	80119be <sbrk_aligned+0x22>
 80119d8:	e7ef      	b.n	80119ba <sbrk_aligned+0x1e>
 80119da:	bf00      	nop
 80119dc:	2000223c 	.word	0x2000223c

080119e0 <_malloc_r>:
 80119e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80119e4:	1ccd      	adds	r5, r1, #3
 80119e6:	f025 0503 	bic.w	r5, r5, #3
 80119ea:	3508      	adds	r5, #8
 80119ec:	2d0c      	cmp	r5, #12
 80119ee:	bf38      	it	cc
 80119f0:	250c      	movcc	r5, #12
 80119f2:	2d00      	cmp	r5, #0
 80119f4:	4606      	mov	r6, r0
 80119f6:	db01      	blt.n	80119fc <_malloc_r+0x1c>
 80119f8:	42a9      	cmp	r1, r5
 80119fa:	d904      	bls.n	8011a06 <_malloc_r+0x26>
 80119fc:	230c      	movs	r3, #12
 80119fe:	6033      	str	r3, [r6, #0]
 8011a00:	2000      	movs	r0, #0
 8011a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011adc <_malloc_r+0xfc>
 8011a0a:	f000 f869 	bl	8011ae0 <__malloc_lock>
 8011a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8011a12:	461c      	mov	r4, r3
 8011a14:	bb44      	cbnz	r4, 8011a68 <_malloc_r+0x88>
 8011a16:	4629      	mov	r1, r5
 8011a18:	4630      	mov	r0, r6
 8011a1a:	f7ff ffbf 	bl	801199c <sbrk_aligned>
 8011a1e:	1c43      	adds	r3, r0, #1
 8011a20:	4604      	mov	r4, r0
 8011a22:	d158      	bne.n	8011ad6 <_malloc_r+0xf6>
 8011a24:	f8d8 4000 	ldr.w	r4, [r8]
 8011a28:	4627      	mov	r7, r4
 8011a2a:	2f00      	cmp	r7, #0
 8011a2c:	d143      	bne.n	8011ab6 <_malloc_r+0xd6>
 8011a2e:	2c00      	cmp	r4, #0
 8011a30:	d04b      	beq.n	8011aca <_malloc_r+0xea>
 8011a32:	6823      	ldr	r3, [r4, #0]
 8011a34:	4639      	mov	r1, r7
 8011a36:	4630      	mov	r0, r6
 8011a38:	eb04 0903 	add.w	r9, r4, r3
 8011a3c:	f000 f864 	bl	8011b08 <_sbrk_r>
 8011a40:	4581      	cmp	r9, r0
 8011a42:	d142      	bne.n	8011aca <_malloc_r+0xea>
 8011a44:	6821      	ldr	r1, [r4, #0]
 8011a46:	1a6d      	subs	r5, r5, r1
 8011a48:	4629      	mov	r1, r5
 8011a4a:	4630      	mov	r0, r6
 8011a4c:	f7ff ffa6 	bl	801199c <sbrk_aligned>
 8011a50:	3001      	adds	r0, #1
 8011a52:	d03a      	beq.n	8011aca <_malloc_r+0xea>
 8011a54:	6823      	ldr	r3, [r4, #0]
 8011a56:	442b      	add	r3, r5
 8011a58:	6023      	str	r3, [r4, #0]
 8011a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8011a5e:	685a      	ldr	r2, [r3, #4]
 8011a60:	bb62      	cbnz	r2, 8011abc <_malloc_r+0xdc>
 8011a62:	f8c8 7000 	str.w	r7, [r8]
 8011a66:	e00f      	b.n	8011a88 <_malloc_r+0xa8>
 8011a68:	6822      	ldr	r2, [r4, #0]
 8011a6a:	1b52      	subs	r2, r2, r5
 8011a6c:	d420      	bmi.n	8011ab0 <_malloc_r+0xd0>
 8011a6e:	2a0b      	cmp	r2, #11
 8011a70:	d917      	bls.n	8011aa2 <_malloc_r+0xc2>
 8011a72:	1961      	adds	r1, r4, r5
 8011a74:	42a3      	cmp	r3, r4
 8011a76:	6025      	str	r5, [r4, #0]
 8011a78:	bf18      	it	ne
 8011a7a:	6059      	strne	r1, [r3, #4]
 8011a7c:	6863      	ldr	r3, [r4, #4]
 8011a7e:	bf08      	it	eq
 8011a80:	f8c8 1000 	streq.w	r1, [r8]
 8011a84:	5162      	str	r2, [r4, r5]
 8011a86:	604b      	str	r3, [r1, #4]
 8011a88:	4630      	mov	r0, r6
 8011a8a:	f000 f82f 	bl	8011aec <__malloc_unlock>
 8011a8e:	f104 000b 	add.w	r0, r4, #11
 8011a92:	1d23      	adds	r3, r4, #4
 8011a94:	f020 0007 	bic.w	r0, r0, #7
 8011a98:	1ac2      	subs	r2, r0, r3
 8011a9a:	bf1c      	itt	ne
 8011a9c:	1a1b      	subne	r3, r3, r0
 8011a9e:	50a3      	strne	r3, [r4, r2]
 8011aa0:	e7af      	b.n	8011a02 <_malloc_r+0x22>
 8011aa2:	6862      	ldr	r2, [r4, #4]
 8011aa4:	42a3      	cmp	r3, r4
 8011aa6:	bf0c      	ite	eq
 8011aa8:	f8c8 2000 	streq.w	r2, [r8]
 8011aac:	605a      	strne	r2, [r3, #4]
 8011aae:	e7eb      	b.n	8011a88 <_malloc_r+0xa8>
 8011ab0:	4623      	mov	r3, r4
 8011ab2:	6864      	ldr	r4, [r4, #4]
 8011ab4:	e7ae      	b.n	8011a14 <_malloc_r+0x34>
 8011ab6:	463c      	mov	r4, r7
 8011ab8:	687f      	ldr	r7, [r7, #4]
 8011aba:	e7b6      	b.n	8011a2a <_malloc_r+0x4a>
 8011abc:	461a      	mov	r2, r3
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	42a3      	cmp	r3, r4
 8011ac2:	d1fb      	bne.n	8011abc <_malloc_r+0xdc>
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	6053      	str	r3, [r2, #4]
 8011ac8:	e7de      	b.n	8011a88 <_malloc_r+0xa8>
 8011aca:	230c      	movs	r3, #12
 8011acc:	6033      	str	r3, [r6, #0]
 8011ace:	4630      	mov	r0, r6
 8011ad0:	f000 f80c 	bl	8011aec <__malloc_unlock>
 8011ad4:	e794      	b.n	8011a00 <_malloc_r+0x20>
 8011ad6:	6005      	str	r5, [r0, #0]
 8011ad8:	e7d6      	b.n	8011a88 <_malloc_r+0xa8>
 8011ada:	bf00      	nop
 8011adc:	20002240 	.word	0x20002240

08011ae0 <__malloc_lock>:
 8011ae0:	4801      	ldr	r0, [pc, #4]	@ (8011ae8 <__malloc_lock+0x8>)
 8011ae2:	f000 b84b 	b.w	8011b7c <__retarget_lock_acquire_recursive>
 8011ae6:	bf00      	nop
 8011ae8:	20002380 	.word	0x20002380

08011aec <__malloc_unlock>:
 8011aec:	4801      	ldr	r0, [pc, #4]	@ (8011af4 <__malloc_unlock+0x8>)
 8011aee:	f000 b846 	b.w	8011b7e <__retarget_lock_release_recursive>
 8011af2:	bf00      	nop
 8011af4:	20002380 	.word	0x20002380

08011af8 <memset>:
 8011af8:	4402      	add	r2, r0
 8011afa:	4603      	mov	r3, r0
 8011afc:	4293      	cmp	r3, r2
 8011afe:	d100      	bne.n	8011b02 <memset+0xa>
 8011b00:	4770      	bx	lr
 8011b02:	f803 1b01 	strb.w	r1, [r3], #1
 8011b06:	e7f9      	b.n	8011afc <memset+0x4>

08011b08 <_sbrk_r>:
 8011b08:	b538      	push	{r3, r4, r5, lr}
 8011b0a:	4d06      	ldr	r5, [pc, #24]	@ (8011b24 <_sbrk_r+0x1c>)
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	4604      	mov	r4, r0
 8011b10:	4608      	mov	r0, r1
 8011b12:	602b      	str	r3, [r5, #0]
 8011b14:	f7f7 f926 	bl	8008d64 <_sbrk>
 8011b18:	1c43      	adds	r3, r0, #1
 8011b1a:	d102      	bne.n	8011b22 <_sbrk_r+0x1a>
 8011b1c:	682b      	ldr	r3, [r5, #0]
 8011b1e:	b103      	cbz	r3, 8011b22 <_sbrk_r+0x1a>
 8011b20:	6023      	str	r3, [r4, #0]
 8011b22:	bd38      	pop	{r3, r4, r5, pc}
 8011b24:	2000237c 	.word	0x2000237c

08011b28 <__errno>:
 8011b28:	4b01      	ldr	r3, [pc, #4]	@ (8011b30 <__errno+0x8>)
 8011b2a:	6818      	ldr	r0, [r3, #0]
 8011b2c:	4770      	bx	lr
 8011b2e:	bf00      	nop
 8011b30:	20000144 	.word	0x20000144

08011b34 <__libc_init_array>:
 8011b34:	b570      	push	{r4, r5, r6, lr}
 8011b36:	4d0d      	ldr	r5, [pc, #52]	@ (8011b6c <__libc_init_array+0x38>)
 8011b38:	4c0d      	ldr	r4, [pc, #52]	@ (8011b70 <__libc_init_array+0x3c>)
 8011b3a:	1b64      	subs	r4, r4, r5
 8011b3c:	10a4      	asrs	r4, r4, #2
 8011b3e:	2600      	movs	r6, #0
 8011b40:	42a6      	cmp	r6, r4
 8011b42:	d109      	bne.n	8011b58 <__libc_init_array+0x24>
 8011b44:	4d0b      	ldr	r5, [pc, #44]	@ (8011b74 <__libc_init_array+0x40>)
 8011b46:	4c0c      	ldr	r4, [pc, #48]	@ (8011b78 <__libc_init_array+0x44>)
 8011b48:	f001 ff32 	bl	80139b0 <_init>
 8011b4c:	1b64      	subs	r4, r4, r5
 8011b4e:	10a4      	asrs	r4, r4, #2
 8011b50:	2600      	movs	r6, #0
 8011b52:	42a6      	cmp	r6, r4
 8011b54:	d105      	bne.n	8011b62 <__libc_init_array+0x2e>
 8011b56:	bd70      	pop	{r4, r5, r6, pc}
 8011b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b5c:	4798      	blx	r3
 8011b5e:	3601      	adds	r6, #1
 8011b60:	e7ee      	b.n	8011b40 <__libc_init_array+0xc>
 8011b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8011b66:	4798      	blx	r3
 8011b68:	3601      	adds	r6, #1
 8011b6a:	e7f2      	b.n	8011b52 <__libc_init_array+0x1e>
 8011b6c:	08014030 	.word	0x08014030
 8011b70:	08014030 	.word	0x08014030
 8011b74:	08014030 	.word	0x08014030
 8011b78:	08014034 	.word	0x08014034

08011b7c <__retarget_lock_acquire_recursive>:
 8011b7c:	4770      	bx	lr

08011b7e <__retarget_lock_release_recursive>:
 8011b7e:	4770      	bx	lr

08011b80 <memcpy>:
 8011b80:	440a      	add	r2, r1
 8011b82:	4291      	cmp	r1, r2
 8011b84:	f100 33ff 	add.w	r3, r0, #4294967295
 8011b88:	d100      	bne.n	8011b8c <memcpy+0xc>
 8011b8a:	4770      	bx	lr
 8011b8c:	b510      	push	{r4, lr}
 8011b8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b96:	4291      	cmp	r1, r2
 8011b98:	d1f9      	bne.n	8011b8e <memcpy+0xe>
 8011b9a:	bd10      	pop	{r4, pc}
 8011b9c:	0000      	movs	r0, r0
	...

08011ba0 <cos>:
 8011ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ba2:	ec53 2b10 	vmov	r2, r3, d0
 8011ba6:	4826      	ldr	r0, [pc, #152]	@ (8011c40 <cos+0xa0>)
 8011ba8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011bac:	4281      	cmp	r1, r0
 8011bae:	d806      	bhi.n	8011bbe <cos+0x1e>
 8011bb0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011c38 <cos+0x98>
 8011bb4:	b005      	add	sp, #20
 8011bb6:	f85d eb04 	ldr.w	lr, [sp], #4
 8011bba:	f000 b9bd 	b.w	8011f38 <__kernel_cos>
 8011bbe:	4821      	ldr	r0, [pc, #132]	@ (8011c44 <cos+0xa4>)
 8011bc0:	4281      	cmp	r1, r0
 8011bc2:	d908      	bls.n	8011bd6 <cos+0x36>
 8011bc4:	4610      	mov	r0, r2
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	f7ee fb2a 	bl	8000220 <__aeabi_dsub>
 8011bcc:	ec41 0b10 	vmov	d0, r0, r1
 8011bd0:	b005      	add	sp, #20
 8011bd2:	f85d fb04 	ldr.w	pc, [sp], #4
 8011bd6:	4668      	mov	r0, sp
 8011bd8:	f000 fb32 	bl	8012240 <__ieee754_rem_pio2>
 8011bdc:	f000 0003 	and.w	r0, r0, #3
 8011be0:	2801      	cmp	r0, #1
 8011be2:	d00b      	beq.n	8011bfc <cos+0x5c>
 8011be4:	2802      	cmp	r0, #2
 8011be6:	d015      	beq.n	8011c14 <cos+0x74>
 8011be8:	b9d8      	cbnz	r0, 8011c22 <cos+0x82>
 8011bea:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011bee:	ed9d 0b00 	vldr	d0, [sp]
 8011bf2:	f000 f9a1 	bl	8011f38 <__kernel_cos>
 8011bf6:	ec51 0b10 	vmov	r0, r1, d0
 8011bfa:	e7e7      	b.n	8011bcc <cos+0x2c>
 8011bfc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c00:	ed9d 0b00 	vldr	d0, [sp]
 8011c04:	f000 fa60 	bl	80120c8 <__kernel_sin>
 8011c08:	ec53 2b10 	vmov	r2, r3, d0
 8011c0c:	4610      	mov	r0, r2
 8011c0e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011c12:	e7db      	b.n	8011bcc <cos+0x2c>
 8011c14:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c18:	ed9d 0b00 	vldr	d0, [sp]
 8011c1c:	f000 f98c 	bl	8011f38 <__kernel_cos>
 8011c20:	e7f2      	b.n	8011c08 <cos+0x68>
 8011c22:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c26:	ed9d 0b00 	vldr	d0, [sp]
 8011c2a:	2001      	movs	r0, #1
 8011c2c:	f000 fa4c 	bl	80120c8 <__kernel_sin>
 8011c30:	e7e1      	b.n	8011bf6 <cos+0x56>
 8011c32:	bf00      	nop
 8011c34:	f3af 8000 	nop.w
	...
 8011c40:	3fe921fb 	.word	0x3fe921fb
 8011c44:	7fefffff 	.word	0x7fefffff

08011c48 <sin>:
 8011c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011c4a:	ec53 2b10 	vmov	r2, r3, d0
 8011c4e:	4826      	ldr	r0, [pc, #152]	@ (8011ce8 <sin+0xa0>)
 8011c50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011c54:	4281      	cmp	r1, r0
 8011c56:	d807      	bhi.n	8011c68 <sin+0x20>
 8011c58:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011ce0 <sin+0x98>
 8011c5c:	2000      	movs	r0, #0
 8011c5e:	b005      	add	sp, #20
 8011c60:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c64:	f000 ba30 	b.w	80120c8 <__kernel_sin>
 8011c68:	4820      	ldr	r0, [pc, #128]	@ (8011cec <sin+0xa4>)
 8011c6a:	4281      	cmp	r1, r0
 8011c6c:	d908      	bls.n	8011c80 <sin+0x38>
 8011c6e:	4610      	mov	r0, r2
 8011c70:	4619      	mov	r1, r3
 8011c72:	f7ee fad5 	bl	8000220 <__aeabi_dsub>
 8011c76:	ec41 0b10 	vmov	d0, r0, r1
 8011c7a:	b005      	add	sp, #20
 8011c7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011c80:	4668      	mov	r0, sp
 8011c82:	f000 fadd 	bl	8012240 <__ieee754_rem_pio2>
 8011c86:	f000 0003 	and.w	r0, r0, #3
 8011c8a:	2801      	cmp	r0, #1
 8011c8c:	d00c      	beq.n	8011ca8 <sin+0x60>
 8011c8e:	2802      	cmp	r0, #2
 8011c90:	d011      	beq.n	8011cb6 <sin+0x6e>
 8011c92:	b9e8      	cbnz	r0, 8011cd0 <sin+0x88>
 8011c94:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011c98:	ed9d 0b00 	vldr	d0, [sp]
 8011c9c:	2001      	movs	r0, #1
 8011c9e:	f000 fa13 	bl	80120c8 <__kernel_sin>
 8011ca2:	ec51 0b10 	vmov	r0, r1, d0
 8011ca6:	e7e6      	b.n	8011c76 <sin+0x2e>
 8011ca8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011cac:	ed9d 0b00 	vldr	d0, [sp]
 8011cb0:	f000 f942 	bl	8011f38 <__kernel_cos>
 8011cb4:	e7f5      	b.n	8011ca2 <sin+0x5a>
 8011cb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011cba:	ed9d 0b00 	vldr	d0, [sp]
 8011cbe:	2001      	movs	r0, #1
 8011cc0:	f000 fa02 	bl	80120c8 <__kernel_sin>
 8011cc4:	ec53 2b10 	vmov	r2, r3, d0
 8011cc8:	4610      	mov	r0, r2
 8011cca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011cce:	e7d2      	b.n	8011c76 <sin+0x2e>
 8011cd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011cd4:	ed9d 0b00 	vldr	d0, [sp]
 8011cd8:	f000 f92e 	bl	8011f38 <__kernel_cos>
 8011cdc:	e7f2      	b.n	8011cc4 <sin+0x7c>
 8011cde:	bf00      	nop
	...
 8011ce8:	3fe921fb 	.word	0x3fe921fb
 8011cec:	7fefffff 	.word	0x7fefffff

08011cf0 <fmodf>:
 8011cf0:	b508      	push	{r3, lr}
 8011cf2:	ed2d 8b02 	vpush	{d8}
 8011cf6:	eef0 8a40 	vmov.f32	s17, s0
 8011cfa:	eeb0 8a60 	vmov.f32	s16, s1
 8011cfe:	f000 fd43 	bl	8012788 <__ieee754_fmodf>
 8011d02:	eef4 8a48 	vcmp.f32	s17, s16
 8011d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d0a:	d60c      	bvs.n	8011d26 <fmodf+0x36>
 8011d0c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8011d2c <fmodf+0x3c>
 8011d10:	eeb4 8a68 	vcmp.f32	s16, s17
 8011d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d18:	d105      	bne.n	8011d26 <fmodf+0x36>
 8011d1a:	f7ff ff05 	bl	8011b28 <__errno>
 8011d1e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011d22:	2321      	movs	r3, #33	@ 0x21
 8011d24:	6003      	str	r3, [r0, #0]
 8011d26:	ecbd 8b02 	vpop	{d8}
 8011d2a:	bd08      	pop	{r3, pc}
 8011d2c:	00000000 	.word	0x00000000

08011d30 <sqrtf>:
 8011d30:	b508      	push	{r3, lr}
 8011d32:	ed2d 8b02 	vpush	{d8}
 8011d36:	eeb0 8a40 	vmov.f32	s16, s0
 8011d3a:	f000 f8f7 	bl	8011f2c <__ieee754_sqrtf>
 8011d3e:	eeb4 8a48 	vcmp.f32	s16, s16
 8011d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d46:	d60c      	bvs.n	8011d62 <sqrtf+0x32>
 8011d48:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8011d68 <sqrtf+0x38>
 8011d4c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d54:	d505      	bpl.n	8011d62 <sqrtf+0x32>
 8011d56:	f7ff fee7 	bl	8011b28 <__errno>
 8011d5a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011d5e:	2321      	movs	r3, #33	@ 0x21
 8011d60:	6003      	str	r3, [r0, #0]
 8011d62:	ecbd 8b02 	vpop	{d8}
 8011d66:	bd08      	pop	{r3, pc}
 8011d68:	00000000 	.word	0x00000000

08011d6c <cosf>:
 8011d6c:	ee10 3a10 	vmov	r3, s0
 8011d70:	b507      	push	{r0, r1, r2, lr}
 8011d72:	4a1e      	ldr	r2, [pc, #120]	@ (8011dec <cosf+0x80>)
 8011d74:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011d78:	4293      	cmp	r3, r2
 8011d7a:	d806      	bhi.n	8011d8a <cosf+0x1e>
 8011d7c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8011df0 <cosf+0x84>
 8011d80:	b003      	add	sp, #12
 8011d82:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d86:	f000 bc5f 	b.w	8012648 <__kernel_cosf>
 8011d8a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011d8e:	d304      	bcc.n	8011d9a <cosf+0x2e>
 8011d90:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011d94:	b003      	add	sp, #12
 8011d96:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d9a:	4668      	mov	r0, sp
 8011d9c:	f000 fd76 	bl	801288c <__ieee754_rem_pio2f>
 8011da0:	f000 0003 	and.w	r0, r0, #3
 8011da4:	2801      	cmp	r0, #1
 8011da6:	d009      	beq.n	8011dbc <cosf+0x50>
 8011da8:	2802      	cmp	r0, #2
 8011daa:	d010      	beq.n	8011dce <cosf+0x62>
 8011dac:	b9b0      	cbnz	r0, 8011ddc <cosf+0x70>
 8011dae:	eddd 0a01 	vldr	s1, [sp, #4]
 8011db2:	ed9d 0a00 	vldr	s0, [sp]
 8011db6:	f000 fc47 	bl	8012648 <__kernel_cosf>
 8011dba:	e7eb      	b.n	8011d94 <cosf+0x28>
 8011dbc:	eddd 0a01 	vldr	s1, [sp, #4]
 8011dc0:	ed9d 0a00 	vldr	s0, [sp]
 8011dc4:	f000 fc98 	bl	80126f8 <__kernel_sinf>
 8011dc8:	eeb1 0a40 	vneg.f32	s0, s0
 8011dcc:	e7e2      	b.n	8011d94 <cosf+0x28>
 8011dce:	eddd 0a01 	vldr	s1, [sp, #4]
 8011dd2:	ed9d 0a00 	vldr	s0, [sp]
 8011dd6:	f000 fc37 	bl	8012648 <__kernel_cosf>
 8011dda:	e7f5      	b.n	8011dc8 <cosf+0x5c>
 8011ddc:	eddd 0a01 	vldr	s1, [sp, #4]
 8011de0:	ed9d 0a00 	vldr	s0, [sp]
 8011de4:	2001      	movs	r0, #1
 8011de6:	f000 fc87 	bl	80126f8 <__kernel_sinf>
 8011dea:	e7d3      	b.n	8011d94 <cosf+0x28>
 8011dec:	3f490fd8 	.word	0x3f490fd8
 8011df0:	00000000 	.word	0x00000000

08011df4 <sinf>:
 8011df4:	ee10 3a10 	vmov	r3, s0
 8011df8:	b507      	push	{r0, r1, r2, lr}
 8011dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8011e78 <sinf+0x84>)
 8011dfc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011e00:	4293      	cmp	r3, r2
 8011e02:	d807      	bhi.n	8011e14 <sinf+0x20>
 8011e04:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8011e7c <sinf+0x88>
 8011e08:	2000      	movs	r0, #0
 8011e0a:	b003      	add	sp, #12
 8011e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e10:	f000 bc72 	b.w	80126f8 <__kernel_sinf>
 8011e14:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011e18:	d304      	bcc.n	8011e24 <sinf+0x30>
 8011e1a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011e1e:	b003      	add	sp, #12
 8011e20:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e24:	4668      	mov	r0, sp
 8011e26:	f000 fd31 	bl	801288c <__ieee754_rem_pio2f>
 8011e2a:	f000 0003 	and.w	r0, r0, #3
 8011e2e:	2801      	cmp	r0, #1
 8011e30:	d00a      	beq.n	8011e48 <sinf+0x54>
 8011e32:	2802      	cmp	r0, #2
 8011e34:	d00f      	beq.n	8011e56 <sinf+0x62>
 8011e36:	b9c0      	cbnz	r0, 8011e6a <sinf+0x76>
 8011e38:	eddd 0a01 	vldr	s1, [sp, #4]
 8011e3c:	ed9d 0a00 	vldr	s0, [sp]
 8011e40:	2001      	movs	r0, #1
 8011e42:	f000 fc59 	bl	80126f8 <__kernel_sinf>
 8011e46:	e7ea      	b.n	8011e1e <sinf+0x2a>
 8011e48:	eddd 0a01 	vldr	s1, [sp, #4]
 8011e4c:	ed9d 0a00 	vldr	s0, [sp]
 8011e50:	f000 fbfa 	bl	8012648 <__kernel_cosf>
 8011e54:	e7e3      	b.n	8011e1e <sinf+0x2a>
 8011e56:	eddd 0a01 	vldr	s1, [sp, #4]
 8011e5a:	ed9d 0a00 	vldr	s0, [sp]
 8011e5e:	2001      	movs	r0, #1
 8011e60:	f000 fc4a 	bl	80126f8 <__kernel_sinf>
 8011e64:	eeb1 0a40 	vneg.f32	s0, s0
 8011e68:	e7d9      	b.n	8011e1e <sinf+0x2a>
 8011e6a:	eddd 0a01 	vldr	s1, [sp, #4]
 8011e6e:	ed9d 0a00 	vldr	s0, [sp]
 8011e72:	f000 fbe9 	bl	8012648 <__kernel_cosf>
 8011e76:	e7f5      	b.n	8011e64 <sinf+0x70>
 8011e78:	3f490fd8 	.word	0x3f490fd8
 8011e7c:	00000000 	.word	0x00000000

08011e80 <fmaxf>:
 8011e80:	b508      	push	{r3, lr}
 8011e82:	ed2d 8b02 	vpush	{d8}
 8011e86:	eeb0 8a40 	vmov.f32	s16, s0
 8011e8a:	eef0 8a60 	vmov.f32	s17, s1
 8011e8e:	f000 f831 	bl	8011ef4 <__fpclassifyf>
 8011e92:	b930      	cbnz	r0, 8011ea2 <fmaxf+0x22>
 8011e94:	eeb0 8a68 	vmov.f32	s16, s17
 8011e98:	eeb0 0a48 	vmov.f32	s0, s16
 8011e9c:	ecbd 8b02 	vpop	{d8}
 8011ea0:	bd08      	pop	{r3, pc}
 8011ea2:	eeb0 0a68 	vmov.f32	s0, s17
 8011ea6:	f000 f825 	bl	8011ef4 <__fpclassifyf>
 8011eaa:	2800      	cmp	r0, #0
 8011eac:	d0f4      	beq.n	8011e98 <fmaxf+0x18>
 8011eae:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb6:	dded      	ble.n	8011e94 <fmaxf+0x14>
 8011eb8:	e7ee      	b.n	8011e98 <fmaxf+0x18>

08011eba <fminf>:
 8011eba:	b508      	push	{r3, lr}
 8011ebc:	ed2d 8b02 	vpush	{d8}
 8011ec0:	eeb0 8a40 	vmov.f32	s16, s0
 8011ec4:	eef0 8a60 	vmov.f32	s17, s1
 8011ec8:	f000 f814 	bl	8011ef4 <__fpclassifyf>
 8011ecc:	b930      	cbnz	r0, 8011edc <fminf+0x22>
 8011ece:	eeb0 8a68 	vmov.f32	s16, s17
 8011ed2:	eeb0 0a48 	vmov.f32	s0, s16
 8011ed6:	ecbd 8b02 	vpop	{d8}
 8011eda:	bd08      	pop	{r3, pc}
 8011edc:	eeb0 0a68 	vmov.f32	s0, s17
 8011ee0:	f000 f808 	bl	8011ef4 <__fpclassifyf>
 8011ee4:	2800      	cmp	r0, #0
 8011ee6:	d0f4      	beq.n	8011ed2 <fminf+0x18>
 8011ee8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ef0:	d5ed      	bpl.n	8011ece <fminf+0x14>
 8011ef2:	e7ee      	b.n	8011ed2 <fminf+0x18>

08011ef4 <__fpclassifyf>:
 8011ef4:	ee10 3a10 	vmov	r3, s0
 8011ef8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8011efc:	d00d      	beq.n	8011f1a <__fpclassifyf+0x26>
 8011efe:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8011f02:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8011f06:	d30a      	bcc.n	8011f1e <__fpclassifyf+0x2a>
 8011f08:	4b07      	ldr	r3, [pc, #28]	@ (8011f28 <__fpclassifyf+0x34>)
 8011f0a:	1e42      	subs	r2, r0, #1
 8011f0c:	429a      	cmp	r2, r3
 8011f0e:	d908      	bls.n	8011f22 <__fpclassifyf+0x2e>
 8011f10:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8011f14:	4258      	negs	r0, r3
 8011f16:	4158      	adcs	r0, r3
 8011f18:	4770      	bx	lr
 8011f1a:	2002      	movs	r0, #2
 8011f1c:	4770      	bx	lr
 8011f1e:	2004      	movs	r0, #4
 8011f20:	4770      	bx	lr
 8011f22:	2003      	movs	r0, #3
 8011f24:	4770      	bx	lr
 8011f26:	bf00      	nop
 8011f28:	007ffffe 	.word	0x007ffffe

08011f2c <__ieee754_sqrtf>:
 8011f2c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011f30:	4770      	bx	lr
 8011f32:	0000      	movs	r0, r0
 8011f34:	0000      	movs	r0, r0
	...

08011f38 <__kernel_cos>:
 8011f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f3c:	ec57 6b10 	vmov	r6, r7, d0
 8011f40:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8011f44:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8011f48:	ed8d 1b00 	vstr	d1, [sp]
 8011f4c:	d206      	bcs.n	8011f5c <__kernel_cos+0x24>
 8011f4e:	4630      	mov	r0, r6
 8011f50:	4639      	mov	r1, r7
 8011f52:	f7ee fdb7 	bl	8000ac4 <__aeabi_d2iz>
 8011f56:	2800      	cmp	r0, #0
 8011f58:	f000 8088 	beq.w	801206c <__kernel_cos+0x134>
 8011f5c:	4632      	mov	r2, r6
 8011f5e:	463b      	mov	r3, r7
 8011f60:	4630      	mov	r0, r6
 8011f62:	4639      	mov	r1, r7
 8011f64:	f7ee fb14 	bl	8000590 <__aeabi_dmul>
 8011f68:	4b51      	ldr	r3, [pc, #324]	@ (80120b0 <__kernel_cos+0x178>)
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	4604      	mov	r4, r0
 8011f6e:	460d      	mov	r5, r1
 8011f70:	f7ee fb0e 	bl	8000590 <__aeabi_dmul>
 8011f74:	a340      	add	r3, pc, #256	@ (adr r3, 8012078 <__kernel_cos+0x140>)
 8011f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f7a:	4682      	mov	sl, r0
 8011f7c:	468b      	mov	fp, r1
 8011f7e:	4620      	mov	r0, r4
 8011f80:	4629      	mov	r1, r5
 8011f82:	f7ee fb05 	bl	8000590 <__aeabi_dmul>
 8011f86:	a33e      	add	r3, pc, #248	@ (adr r3, 8012080 <__kernel_cos+0x148>)
 8011f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f8c:	f7ee f94a 	bl	8000224 <__adddf3>
 8011f90:	4622      	mov	r2, r4
 8011f92:	462b      	mov	r3, r5
 8011f94:	f7ee fafc 	bl	8000590 <__aeabi_dmul>
 8011f98:	a33b      	add	r3, pc, #236	@ (adr r3, 8012088 <__kernel_cos+0x150>)
 8011f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f9e:	f7ee f93f 	bl	8000220 <__aeabi_dsub>
 8011fa2:	4622      	mov	r2, r4
 8011fa4:	462b      	mov	r3, r5
 8011fa6:	f7ee faf3 	bl	8000590 <__aeabi_dmul>
 8011faa:	a339      	add	r3, pc, #228	@ (adr r3, 8012090 <__kernel_cos+0x158>)
 8011fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fb0:	f7ee f938 	bl	8000224 <__adddf3>
 8011fb4:	4622      	mov	r2, r4
 8011fb6:	462b      	mov	r3, r5
 8011fb8:	f7ee faea 	bl	8000590 <__aeabi_dmul>
 8011fbc:	a336      	add	r3, pc, #216	@ (adr r3, 8012098 <__kernel_cos+0x160>)
 8011fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc2:	f7ee f92d 	bl	8000220 <__aeabi_dsub>
 8011fc6:	4622      	mov	r2, r4
 8011fc8:	462b      	mov	r3, r5
 8011fca:	f7ee fae1 	bl	8000590 <__aeabi_dmul>
 8011fce:	a334      	add	r3, pc, #208	@ (adr r3, 80120a0 <__kernel_cos+0x168>)
 8011fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd4:	f7ee f926 	bl	8000224 <__adddf3>
 8011fd8:	4622      	mov	r2, r4
 8011fda:	462b      	mov	r3, r5
 8011fdc:	f7ee fad8 	bl	8000590 <__aeabi_dmul>
 8011fe0:	4622      	mov	r2, r4
 8011fe2:	462b      	mov	r3, r5
 8011fe4:	f7ee fad4 	bl	8000590 <__aeabi_dmul>
 8011fe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011fec:	4604      	mov	r4, r0
 8011fee:	460d      	mov	r5, r1
 8011ff0:	4630      	mov	r0, r6
 8011ff2:	4639      	mov	r1, r7
 8011ff4:	f7ee facc 	bl	8000590 <__aeabi_dmul>
 8011ff8:	460b      	mov	r3, r1
 8011ffa:	4602      	mov	r2, r0
 8011ffc:	4629      	mov	r1, r5
 8011ffe:	4620      	mov	r0, r4
 8012000:	f7ee f90e 	bl	8000220 <__aeabi_dsub>
 8012004:	4b2b      	ldr	r3, [pc, #172]	@ (80120b4 <__kernel_cos+0x17c>)
 8012006:	4598      	cmp	r8, r3
 8012008:	4606      	mov	r6, r0
 801200a:	460f      	mov	r7, r1
 801200c:	d810      	bhi.n	8012030 <__kernel_cos+0xf8>
 801200e:	4602      	mov	r2, r0
 8012010:	460b      	mov	r3, r1
 8012012:	4650      	mov	r0, sl
 8012014:	4659      	mov	r1, fp
 8012016:	f7ee f903 	bl	8000220 <__aeabi_dsub>
 801201a:	460b      	mov	r3, r1
 801201c:	4926      	ldr	r1, [pc, #152]	@ (80120b8 <__kernel_cos+0x180>)
 801201e:	4602      	mov	r2, r0
 8012020:	2000      	movs	r0, #0
 8012022:	f7ee f8fd 	bl	8000220 <__aeabi_dsub>
 8012026:	ec41 0b10 	vmov	d0, r0, r1
 801202a:	b003      	add	sp, #12
 801202c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012030:	4b22      	ldr	r3, [pc, #136]	@ (80120bc <__kernel_cos+0x184>)
 8012032:	4921      	ldr	r1, [pc, #132]	@ (80120b8 <__kernel_cos+0x180>)
 8012034:	4598      	cmp	r8, r3
 8012036:	bf8c      	ite	hi
 8012038:	4d21      	ldrhi	r5, [pc, #132]	@ (80120c0 <__kernel_cos+0x188>)
 801203a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801203e:	2400      	movs	r4, #0
 8012040:	4622      	mov	r2, r4
 8012042:	462b      	mov	r3, r5
 8012044:	2000      	movs	r0, #0
 8012046:	f7ee f8eb 	bl	8000220 <__aeabi_dsub>
 801204a:	4622      	mov	r2, r4
 801204c:	4680      	mov	r8, r0
 801204e:	4689      	mov	r9, r1
 8012050:	462b      	mov	r3, r5
 8012052:	4650      	mov	r0, sl
 8012054:	4659      	mov	r1, fp
 8012056:	f7ee f8e3 	bl	8000220 <__aeabi_dsub>
 801205a:	4632      	mov	r2, r6
 801205c:	463b      	mov	r3, r7
 801205e:	f7ee f8df 	bl	8000220 <__aeabi_dsub>
 8012062:	4602      	mov	r2, r0
 8012064:	460b      	mov	r3, r1
 8012066:	4640      	mov	r0, r8
 8012068:	4649      	mov	r1, r9
 801206a:	e7da      	b.n	8012022 <__kernel_cos+0xea>
 801206c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80120a8 <__kernel_cos+0x170>
 8012070:	e7db      	b.n	801202a <__kernel_cos+0xf2>
 8012072:	bf00      	nop
 8012074:	f3af 8000 	nop.w
 8012078:	be8838d4 	.word	0xbe8838d4
 801207c:	bda8fae9 	.word	0xbda8fae9
 8012080:	bdb4b1c4 	.word	0xbdb4b1c4
 8012084:	3e21ee9e 	.word	0x3e21ee9e
 8012088:	809c52ad 	.word	0x809c52ad
 801208c:	3e927e4f 	.word	0x3e927e4f
 8012090:	19cb1590 	.word	0x19cb1590
 8012094:	3efa01a0 	.word	0x3efa01a0
 8012098:	16c15177 	.word	0x16c15177
 801209c:	3f56c16c 	.word	0x3f56c16c
 80120a0:	5555554c 	.word	0x5555554c
 80120a4:	3fa55555 	.word	0x3fa55555
 80120a8:	00000000 	.word	0x00000000
 80120ac:	3ff00000 	.word	0x3ff00000
 80120b0:	3fe00000 	.word	0x3fe00000
 80120b4:	3fd33332 	.word	0x3fd33332
 80120b8:	3ff00000 	.word	0x3ff00000
 80120bc:	3fe90000 	.word	0x3fe90000
 80120c0:	3fd20000 	.word	0x3fd20000
 80120c4:	00000000 	.word	0x00000000

080120c8 <__kernel_sin>:
 80120c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120cc:	ec55 4b10 	vmov	r4, r5, d0
 80120d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80120d4:	b085      	sub	sp, #20
 80120d6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80120da:	ed8d 1b02 	vstr	d1, [sp, #8]
 80120de:	4680      	mov	r8, r0
 80120e0:	d205      	bcs.n	80120ee <__kernel_sin+0x26>
 80120e2:	4620      	mov	r0, r4
 80120e4:	4629      	mov	r1, r5
 80120e6:	f7ee fced 	bl	8000ac4 <__aeabi_d2iz>
 80120ea:	2800      	cmp	r0, #0
 80120ec:	d052      	beq.n	8012194 <__kernel_sin+0xcc>
 80120ee:	4622      	mov	r2, r4
 80120f0:	462b      	mov	r3, r5
 80120f2:	4620      	mov	r0, r4
 80120f4:	4629      	mov	r1, r5
 80120f6:	f7ee fa4b 	bl	8000590 <__aeabi_dmul>
 80120fa:	4682      	mov	sl, r0
 80120fc:	468b      	mov	fp, r1
 80120fe:	4602      	mov	r2, r0
 8012100:	460b      	mov	r3, r1
 8012102:	4620      	mov	r0, r4
 8012104:	4629      	mov	r1, r5
 8012106:	f7ee fa43 	bl	8000590 <__aeabi_dmul>
 801210a:	a342      	add	r3, pc, #264	@ (adr r3, 8012214 <__kernel_sin+0x14c>)
 801210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012110:	e9cd 0100 	strd	r0, r1, [sp]
 8012114:	4650      	mov	r0, sl
 8012116:	4659      	mov	r1, fp
 8012118:	f7ee fa3a 	bl	8000590 <__aeabi_dmul>
 801211c:	a33f      	add	r3, pc, #252	@ (adr r3, 801221c <__kernel_sin+0x154>)
 801211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012122:	f7ee f87d 	bl	8000220 <__aeabi_dsub>
 8012126:	4652      	mov	r2, sl
 8012128:	465b      	mov	r3, fp
 801212a:	f7ee fa31 	bl	8000590 <__aeabi_dmul>
 801212e:	a33d      	add	r3, pc, #244	@ (adr r3, 8012224 <__kernel_sin+0x15c>)
 8012130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012134:	f7ee f876 	bl	8000224 <__adddf3>
 8012138:	4652      	mov	r2, sl
 801213a:	465b      	mov	r3, fp
 801213c:	f7ee fa28 	bl	8000590 <__aeabi_dmul>
 8012140:	a33a      	add	r3, pc, #232	@ (adr r3, 801222c <__kernel_sin+0x164>)
 8012142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012146:	f7ee f86b 	bl	8000220 <__aeabi_dsub>
 801214a:	4652      	mov	r2, sl
 801214c:	465b      	mov	r3, fp
 801214e:	f7ee fa1f 	bl	8000590 <__aeabi_dmul>
 8012152:	a338      	add	r3, pc, #224	@ (adr r3, 8012234 <__kernel_sin+0x16c>)
 8012154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012158:	f7ee f864 	bl	8000224 <__adddf3>
 801215c:	4606      	mov	r6, r0
 801215e:	460f      	mov	r7, r1
 8012160:	f1b8 0f00 	cmp.w	r8, #0
 8012164:	d11b      	bne.n	801219e <__kernel_sin+0xd6>
 8012166:	4602      	mov	r2, r0
 8012168:	460b      	mov	r3, r1
 801216a:	4650      	mov	r0, sl
 801216c:	4659      	mov	r1, fp
 801216e:	f7ee fa0f 	bl	8000590 <__aeabi_dmul>
 8012172:	a325      	add	r3, pc, #148	@ (adr r3, 8012208 <__kernel_sin+0x140>)
 8012174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012178:	f7ee f852 	bl	8000220 <__aeabi_dsub>
 801217c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012180:	f7ee fa06 	bl	8000590 <__aeabi_dmul>
 8012184:	4602      	mov	r2, r0
 8012186:	460b      	mov	r3, r1
 8012188:	4620      	mov	r0, r4
 801218a:	4629      	mov	r1, r5
 801218c:	f7ee f84a 	bl	8000224 <__adddf3>
 8012190:	4604      	mov	r4, r0
 8012192:	460d      	mov	r5, r1
 8012194:	ec45 4b10 	vmov	d0, r4, r5
 8012198:	b005      	add	sp, #20
 801219a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801219e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121a2:	4b1b      	ldr	r3, [pc, #108]	@ (8012210 <__kernel_sin+0x148>)
 80121a4:	2200      	movs	r2, #0
 80121a6:	f7ee f9f3 	bl	8000590 <__aeabi_dmul>
 80121aa:	4632      	mov	r2, r6
 80121ac:	4680      	mov	r8, r0
 80121ae:	4689      	mov	r9, r1
 80121b0:	463b      	mov	r3, r7
 80121b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121b6:	f7ee f9eb 	bl	8000590 <__aeabi_dmul>
 80121ba:	4602      	mov	r2, r0
 80121bc:	460b      	mov	r3, r1
 80121be:	4640      	mov	r0, r8
 80121c0:	4649      	mov	r1, r9
 80121c2:	f7ee f82d 	bl	8000220 <__aeabi_dsub>
 80121c6:	4652      	mov	r2, sl
 80121c8:	465b      	mov	r3, fp
 80121ca:	f7ee f9e1 	bl	8000590 <__aeabi_dmul>
 80121ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80121d2:	f7ee f825 	bl	8000220 <__aeabi_dsub>
 80121d6:	a30c      	add	r3, pc, #48	@ (adr r3, 8012208 <__kernel_sin+0x140>)
 80121d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121dc:	4606      	mov	r6, r0
 80121de:	460f      	mov	r7, r1
 80121e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121e4:	f7ee f9d4 	bl	8000590 <__aeabi_dmul>
 80121e8:	4602      	mov	r2, r0
 80121ea:	460b      	mov	r3, r1
 80121ec:	4630      	mov	r0, r6
 80121ee:	4639      	mov	r1, r7
 80121f0:	f7ee f818 	bl	8000224 <__adddf3>
 80121f4:	4602      	mov	r2, r0
 80121f6:	460b      	mov	r3, r1
 80121f8:	4620      	mov	r0, r4
 80121fa:	4629      	mov	r1, r5
 80121fc:	f7ee f810 	bl	8000220 <__aeabi_dsub>
 8012200:	e7c6      	b.n	8012190 <__kernel_sin+0xc8>
 8012202:	bf00      	nop
 8012204:	f3af 8000 	nop.w
 8012208:	55555549 	.word	0x55555549
 801220c:	3fc55555 	.word	0x3fc55555
 8012210:	3fe00000 	.word	0x3fe00000
 8012214:	5acfd57c 	.word	0x5acfd57c
 8012218:	3de5d93a 	.word	0x3de5d93a
 801221c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012220:	3e5ae5e6 	.word	0x3e5ae5e6
 8012224:	57b1fe7d 	.word	0x57b1fe7d
 8012228:	3ec71de3 	.word	0x3ec71de3
 801222c:	19c161d5 	.word	0x19c161d5
 8012230:	3f2a01a0 	.word	0x3f2a01a0
 8012234:	1110f8a6 	.word	0x1110f8a6
 8012238:	3f811111 	.word	0x3f811111
 801223c:	00000000 	.word	0x00000000

08012240 <__ieee754_rem_pio2>:
 8012240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012244:	ec57 6b10 	vmov	r6, r7, d0
 8012248:	4bc5      	ldr	r3, [pc, #788]	@ (8012560 <__ieee754_rem_pio2+0x320>)
 801224a:	b08d      	sub	sp, #52	@ 0x34
 801224c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8012250:	4598      	cmp	r8, r3
 8012252:	4604      	mov	r4, r0
 8012254:	9704      	str	r7, [sp, #16]
 8012256:	d807      	bhi.n	8012268 <__ieee754_rem_pio2+0x28>
 8012258:	2200      	movs	r2, #0
 801225a:	2300      	movs	r3, #0
 801225c:	ed80 0b00 	vstr	d0, [r0]
 8012260:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012264:	2500      	movs	r5, #0
 8012266:	e028      	b.n	80122ba <__ieee754_rem_pio2+0x7a>
 8012268:	4bbe      	ldr	r3, [pc, #760]	@ (8012564 <__ieee754_rem_pio2+0x324>)
 801226a:	4598      	cmp	r8, r3
 801226c:	d878      	bhi.n	8012360 <__ieee754_rem_pio2+0x120>
 801226e:	9b04      	ldr	r3, [sp, #16]
 8012270:	4dbd      	ldr	r5, [pc, #756]	@ (8012568 <__ieee754_rem_pio2+0x328>)
 8012272:	2b00      	cmp	r3, #0
 8012274:	4630      	mov	r0, r6
 8012276:	a3ac      	add	r3, pc, #688	@ (adr r3, 8012528 <__ieee754_rem_pio2+0x2e8>)
 8012278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801227c:	4639      	mov	r1, r7
 801227e:	dd38      	ble.n	80122f2 <__ieee754_rem_pio2+0xb2>
 8012280:	f7ed ffce 	bl	8000220 <__aeabi_dsub>
 8012284:	45a8      	cmp	r8, r5
 8012286:	4606      	mov	r6, r0
 8012288:	460f      	mov	r7, r1
 801228a:	d01a      	beq.n	80122c2 <__ieee754_rem_pio2+0x82>
 801228c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8012530 <__ieee754_rem_pio2+0x2f0>)
 801228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012292:	f7ed ffc5 	bl	8000220 <__aeabi_dsub>
 8012296:	4602      	mov	r2, r0
 8012298:	460b      	mov	r3, r1
 801229a:	4680      	mov	r8, r0
 801229c:	4689      	mov	r9, r1
 801229e:	4630      	mov	r0, r6
 80122a0:	4639      	mov	r1, r7
 80122a2:	f7ed ffbd 	bl	8000220 <__aeabi_dsub>
 80122a6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8012530 <__ieee754_rem_pio2+0x2f0>)
 80122a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ac:	f7ed ffb8 	bl	8000220 <__aeabi_dsub>
 80122b0:	e9c4 8900 	strd	r8, r9, [r4]
 80122b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80122b8:	2501      	movs	r5, #1
 80122ba:	4628      	mov	r0, r5
 80122bc:	b00d      	add	sp, #52	@ 0x34
 80122be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122c2:	a39d      	add	r3, pc, #628	@ (adr r3, 8012538 <__ieee754_rem_pio2+0x2f8>)
 80122c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c8:	f7ed ffaa 	bl	8000220 <__aeabi_dsub>
 80122cc:	a39c      	add	r3, pc, #624	@ (adr r3, 8012540 <__ieee754_rem_pio2+0x300>)
 80122ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d2:	4606      	mov	r6, r0
 80122d4:	460f      	mov	r7, r1
 80122d6:	f7ed ffa3 	bl	8000220 <__aeabi_dsub>
 80122da:	4602      	mov	r2, r0
 80122dc:	460b      	mov	r3, r1
 80122de:	4680      	mov	r8, r0
 80122e0:	4689      	mov	r9, r1
 80122e2:	4630      	mov	r0, r6
 80122e4:	4639      	mov	r1, r7
 80122e6:	f7ed ff9b 	bl	8000220 <__aeabi_dsub>
 80122ea:	a395      	add	r3, pc, #596	@ (adr r3, 8012540 <__ieee754_rem_pio2+0x300>)
 80122ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f0:	e7dc      	b.n	80122ac <__ieee754_rem_pio2+0x6c>
 80122f2:	f7ed ff97 	bl	8000224 <__adddf3>
 80122f6:	45a8      	cmp	r8, r5
 80122f8:	4606      	mov	r6, r0
 80122fa:	460f      	mov	r7, r1
 80122fc:	d018      	beq.n	8012330 <__ieee754_rem_pio2+0xf0>
 80122fe:	a38c      	add	r3, pc, #560	@ (adr r3, 8012530 <__ieee754_rem_pio2+0x2f0>)
 8012300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012304:	f7ed ff8e 	bl	8000224 <__adddf3>
 8012308:	4602      	mov	r2, r0
 801230a:	460b      	mov	r3, r1
 801230c:	4680      	mov	r8, r0
 801230e:	4689      	mov	r9, r1
 8012310:	4630      	mov	r0, r6
 8012312:	4639      	mov	r1, r7
 8012314:	f7ed ff84 	bl	8000220 <__aeabi_dsub>
 8012318:	a385      	add	r3, pc, #532	@ (adr r3, 8012530 <__ieee754_rem_pio2+0x2f0>)
 801231a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801231e:	f7ed ff81 	bl	8000224 <__adddf3>
 8012322:	f04f 35ff 	mov.w	r5, #4294967295
 8012326:	e9c4 8900 	strd	r8, r9, [r4]
 801232a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801232e:	e7c4      	b.n	80122ba <__ieee754_rem_pio2+0x7a>
 8012330:	a381      	add	r3, pc, #516	@ (adr r3, 8012538 <__ieee754_rem_pio2+0x2f8>)
 8012332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012336:	f7ed ff75 	bl	8000224 <__adddf3>
 801233a:	a381      	add	r3, pc, #516	@ (adr r3, 8012540 <__ieee754_rem_pio2+0x300>)
 801233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012340:	4606      	mov	r6, r0
 8012342:	460f      	mov	r7, r1
 8012344:	f7ed ff6e 	bl	8000224 <__adddf3>
 8012348:	4602      	mov	r2, r0
 801234a:	460b      	mov	r3, r1
 801234c:	4680      	mov	r8, r0
 801234e:	4689      	mov	r9, r1
 8012350:	4630      	mov	r0, r6
 8012352:	4639      	mov	r1, r7
 8012354:	f7ed ff64 	bl	8000220 <__aeabi_dsub>
 8012358:	a379      	add	r3, pc, #484	@ (adr r3, 8012540 <__ieee754_rem_pio2+0x300>)
 801235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801235e:	e7de      	b.n	801231e <__ieee754_rem_pio2+0xde>
 8012360:	4b82      	ldr	r3, [pc, #520]	@ (801256c <__ieee754_rem_pio2+0x32c>)
 8012362:	4598      	cmp	r8, r3
 8012364:	f200 80d1 	bhi.w	801250a <__ieee754_rem_pio2+0x2ca>
 8012368:	f000 f966 	bl	8012638 <fabs>
 801236c:	ec57 6b10 	vmov	r6, r7, d0
 8012370:	a375      	add	r3, pc, #468	@ (adr r3, 8012548 <__ieee754_rem_pio2+0x308>)
 8012372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012376:	4630      	mov	r0, r6
 8012378:	4639      	mov	r1, r7
 801237a:	f7ee f909 	bl	8000590 <__aeabi_dmul>
 801237e:	4b7c      	ldr	r3, [pc, #496]	@ (8012570 <__ieee754_rem_pio2+0x330>)
 8012380:	2200      	movs	r2, #0
 8012382:	f7ed ff4f 	bl	8000224 <__adddf3>
 8012386:	f7ee fb9d 	bl	8000ac4 <__aeabi_d2iz>
 801238a:	4605      	mov	r5, r0
 801238c:	f7ee f896 	bl	80004bc <__aeabi_i2d>
 8012390:	4602      	mov	r2, r0
 8012392:	460b      	mov	r3, r1
 8012394:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012398:	a363      	add	r3, pc, #396	@ (adr r3, 8012528 <__ieee754_rem_pio2+0x2e8>)
 801239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801239e:	f7ee f8f7 	bl	8000590 <__aeabi_dmul>
 80123a2:	4602      	mov	r2, r0
 80123a4:	460b      	mov	r3, r1
 80123a6:	4630      	mov	r0, r6
 80123a8:	4639      	mov	r1, r7
 80123aa:	f7ed ff39 	bl	8000220 <__aeabi_dsub>
 80123ae:	a360      	add	r3, pc, #384	@ (adr r3, 8012530 <__ieee754_rem_pio2+0x2f0>)
 80123b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b4:	4682      	mov	sl, r0
 80123b6:	468b      	mov	fp, r1
 80123b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123bc:	f7ee f8e8 	bl	8000590 <__aeabi_dmul>
 80123c0:	2d1f      	cmp	r5, #31
 80123c2:	4606      	mov	r6, r0
 80123c4:	460f      	mov	r7, r1
 80123c6:	dc0c      	bgt.n	80123e2 <__ieee754_rem_pio2+0x1a2>
 80123c8:	4b6a      	ldr	r3, [pc, #424]	@ (8012574 <__ieee754_rem_pio2+0x334>)
 80123ca:	1e6a      	subs	r2, r5, #1
 80123cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123d0:	4543      	cmp	r3, r8
 80123d2:	d006      	beq.n	80123e2 <__ieee754_rem_pio2+0x1a2>
 80123d4:	4632      	mov	r2, r6
 80123d6:	463b      	mov	r3, r7
 80123d8:	4650      	mov	r0, sl
 80123da:	4659      	mov	r1, fp
 80123dc:	f7ed ff20 	bl	8000220 <__aeabi_dsub>
 80123e0:	e00e      	b.n	8012400 <__ieee754_rem_pio2+0x1c0>
 80123e2:	463b      	mov	r3, r7
 80123e4:	4632      	mov	r2, r6
 80123e6:	4650      	mov	r0, sl
 80123e8:	4659      	mov	r1, fp
 80123ea:	f7ed ff19 	bl	8000220 <__aeabi_dsub>
 80123ee:	ea4f 5328 	mov.w	r3, r8, asr #20
 80123f2:	9305      	str	r3, [sp, #20]
 80123f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80123f8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80123fc:	2b10      	cmp	r3, #16
 80123fe:	dc02      	bgt.n	8012406 <__ieee754_rem_pio2+0x1c6>
 8012400:	e9c4 0100 	strd	r0, r1, [r4]
 8012404:	e039      	b.n	801247a <__ieee754_rem_pio2+0x23a>
 8012406:	a34c      	add	r3, pc, #304	@ (adr r3, 8012538 <__ieee754_rem_pio2+0x2f8>)
 8012408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801240c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012410:	f7ee f8be 	bl	8000590 <__aeabi_dmul>
 8012414:	4606      	mov	r6, r0
 8012416:	460f      	mov	r7, r1
 8012418:	4602      	mov	r2, r0
 801241a:	460b      	mov	r3, r1
 801241c:	4650      	mov	r0, sl
 801241e:	4659      	mov	r1, fp
 8012420:	f7ed fefe 	bl	8000220 <__aeabi_dsub>
 8012424:	4602      	mov	r2, r0
 8012426:	460b      	mov	r3, r1
 8012428:	4680      	mov	r8, r0
 801242a:	4689      	mov	r9, r1
 801242c:	4650      	mov	r0, sl
 801242e:	4659      	mov	r1, fp
 8012430:	f7ed fef6 	bl	8000220 <__aeabi_dsub>
 8012434:	4632      	mov	r2, r6
 8012436:	463b      	mov	r3, r7
 8012438:	f7ed fef2 	bl	8000220 <__aeabi_dsub>
 801243c:	a340      	add	r3, pc, #256	@ (adr r3, 8012540 <__ieee754_rem_pio2+0x300>)
 801243e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012442:	4606      	mov	r6, r0
 8012444:	460f      	mov	r7, r1
 8012446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801244a:	f7ee f8a1 	bl	8000590 <__aeabi_dmul>
 801244e:	4632      	mov	r2, r6
 8012450:	463b      	mov	r3, r7
 8012452:	f7ed fee5 	bl	8000220 <__aeabi_dsub>
 8012456:	4602      	mov	r2, r0
 8012458:	460b      	mov	r3, r1
 801245a:	4606      	mov	r6, r0
 801245c:	460f      	mov	r7, r1
 801245e:	4640      	mov	r0, r8
 8012460:	4649      	mov	r1, r9
 8012462:	f7ed fedd 	bl	8000220 <__aeabi_dsub>
 8012466:	9a05      	ldr	r2, [sp, #20]
 8012468:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801246c:	1ad3      	subs	r3, r2, r3
 801246e:	2b31      	cmp	r3, #49	@ 0x31
 8012470:	dc20      	bgt.n	80124b4 <__ieee754_rem_pio2+0x274>
 8012472:	e9c4 0100 	strd	r0, r1, [r4]
 8012476:	46c2      	mov	sl, r8
 8012478:	46cb      	mov	fp, r9
 801247a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801247e:	4650      	mov	r0, sl
 8012480:	4642      	mov	r2, r8
 8012482:	464b      	mov	r3, r9
 8012484:	4659      	mov	r1, fp
 8012486:	f7ed fecb 	bl	8000220 <__aeabi_dsub>
 801248a:	463b      	mov	r3, r7
 801248c:	4632      	mov	r2, r6
 801248e:	f7ed fec7 	bl	8000220 <__aeabi_dsub>
 8012492:	9b04      	ldr	r3, [sp, #16]
 8012494:	2b00      	cmp	r3, #0
 8012496:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801249a:	f6bf af0e 	bge.w	80122ba <__ieee754_rem_pio2+0x7a>
 801249e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80124a2:	6063      	str	r3, [r4, #4]
 80124a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80124a8:	f8c4 8000 	str.w	r8, [r4]
 80124ac:	60a0      	str	r0, [r4, #8]
 80124ae:	60e3      	str	r3, [r4, #12]
 80124b0:	426d      	negs	r5, r5
 80124b2:	e702      	b.n	80122ba <__ieee754_rem_pio2+0x7a>
 80124b4:	a326      	add	r3, pc, #152	@ (adr r3, 8012550 <__ieee754_rem_pio2+0x310>)
 80124b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124be:	f7ee f867 	bl	8000590 <__aeabi_dmul>
 80124c2:	4606      	mov	r6, r0
 80124c4:	460f      	mov	r7, r1
 80124c6:	4602      	mov	r2, r0
 80124c8:	460b      	mov	r3, r1
 80124ca:	4640      	mov	r0, r8
 80124cc:	4649      	mov	r1, r9
 80124ce:	f7ed fea7 	bl	8000220 <__aeabi_dsub>
 80124d2:	4602      	mov	r2, r0
 80124d4:	460b      	mov	r3, r1
 80124d6:	4682      	mov	sl, r0
 80124d8:	468b      	mov	fp, r1
 80124da:	4640      	mov	r0, r8
 80124dc:	4649      	mov	r1, r9
 80124de:	f7ed fe9f 	bl	8000220 <__aeabi_dsub>
 80124e2:	4632      	mov	r2, r6
 80124e4:	463b      	mov	r3, r7
 80124e6:	f7ed fe9b 	bl	8000220 <__aeabi_dsub>
 80124ea:	a31b      	add	r3, pc, #108	@ (adr r3, 8012558 <__ieee754_rem_pio2+0x318>)
 80124ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f0:	4606      	mov	r6, r0
 80124f2:	460f      	mov	r7, r1
 80124f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124f8:	f7ee f84a 	bl	8000590 <__aeabi_dmul>
 80124fc:	4632      	mov	r2, r6
 80124fe:	463b      	mov	r3, r7
 8012500:	f7ed fe8e 	bl	8000220 <__aeabi_dsub>
 8012504:	4606      	mov	r6, r0
 8012506:	460f      	mov	r7, r1
 8012508:	e764      	b.n	80123d4 <__ieee754_rem_pio2+0x194>
 801250a:	4b1b      	ldr	r3, [pc, #108]	@ (8012578 <__ieee754_rem_pio2+0x338>)
 801250c:	4598      	cmp	r8, r3
 801250e:	d935      	bls.n	801257c <__ieee754_rem_pio2+0x33c>
 8012510:	4632      	mov	r2, r6
 8012512:	463b      	mov	r3, r7
 8012514:	4630      	mov	r0, r6
 8012516:	4639      	mov	r1, r7
 8012518:	f7ed fe82 	bl	8000220 <__aeabi_dsub>
 801251c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012520:	e9c4 0100 	strd	r0, r1, [r4]
 8012524:	e69e      	b.n	8012264 <__ieee754_rem_pio2+0x24>
 8012526:	bf00      	nop
 8012528:	54400000 	.word	0x54400000
 801252c:	3ff921fb 	.word	0x3ff921fb
 8012530:	1a626331 	.word	0x1a626331
 8012534:	3dd0b461 	.word	0x3dd0b461
 8012538:	1a600000 	.word	0x1a600000
 801253c:	3dd0b461 	.word	0x3dd0b461
 8012540:	2e037073 	.word	0x2e037073
 8012544:	3ba3198a 	.word	0x3ba3198a
 8012548:	6dc9c883 	.word	0x6dc9c883
 801254c:	3fe45f30 	.word	0x3fe45f30
 8012550:	2e000000 	.word	0x2e000000
 8012554:	3ba3198a 	.word	0x3ba3198a
 8012558:	252049c1 	.word	0x252049c1
 801255c:	397b839a 	.word	0x397b839a
 8012560:	3fe921fb 	.word	0x3fe921fb
 8012564:	4002d97b 	.word	0x4002d97b
 8012568:	3ff921fb 	.word	0x3ff921fb
 801256c:	413921fb 	.word	0x413921fb
 8012570:	3fe00000 	.word	0x3fe00000
 8012574:	08013a78 	.word	0x08013a78
 8012578:	7fefffff 	.word	0x7fefffff
 801257c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012580:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8012584:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012588:	4630      	mov	r0, r6
 801258a:	460f      	mov	r7, r1
 801258c:	f7ee fa9a 	bl	8000ac4 <__aeabi_d2iz>
 8012590:	f7ed ff94 	bl	80004bc <__aeabi_i2d>
 8012594:	4602      	mov	r2, r0
 8012596:	460b      	mov	r3, r1
 8012598:	4630      	mov	r0, r6
 801259a:	4639      	mov	r1, r7
 801259c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80125a0:	f7ed fe3e 	bl	8000220 <__aeabi_dsub>
 80125a4:	4b22      	ldr	r3, [pc, #136]	@ (8012630 <__ieee754_rem_pio2+0x3f0>)
 80125a6:	2200      	movs	r2, #0
 80125a8:	f7ed fff2 	bl	8000590 <__aeabi_dmul>
 80125ac:	460f      	mov	r7, r1
 80125ae:	4606      	mov	r6, r0
 80125b0:	f7ee fa88 	bl	8000ac4 <__aeabi_d2iz>
 80125b4:	f7ed ff82 	bl	80004bc <__aeabi_i2d>
 80125b8:	4602      	mov	r2, r0
 80125ba:	460b      	mov	r3, r1
 80125bc:	4630      	mov	r0, r6
 80125be:	4639      	mov	r1, r7
 80125c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80125c4:	f7ed fe2c 	bl	8000220 <__aeabi_dsub>
 80125c8:	4b19      	ldr	r3, [pc, #100]	@ (8012630 <__ieee754_rem_pio2+0x3f0>)
 80125ca:	2200      	movs	r2, #0
 80125cc:	f7ed ffe0 	bl	8000590 <__aeabi_dmul>
 80125d0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80125d4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80125d8:	f04f 0803 	mov.w	r8, #3
 80125dc:	2600      	movs	r6, #0
 80125de:	2700      	movs	r7, #0
 80125e0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80125e4:	4632      	mov	r2, r6
 80125e6:	463b      	mov	r3, r7
 80125e8:	46c2      	mov	sl, r8
 80125ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80125ee:	f7ee fa37 	bl	8000a60 <__aeabi_dcmpeq>
 80125f2:	2800      	cmp	r0, #0
 80125f4:	d1f4      	bne.n	80125e0 <__ieee754_rem_pio2+0x3a0>
 80125f6:	4b0f      	ldr	r3, [pc, #60]	@ (8012634 <__ieee754_rem_pio2+0x3f4>)
 80125f8:	9301      	str	r3, [sp, #4]
 80125fa:	2302      	movs	r3, #2
 80125fc:	9300      	str	r3, [sp, #0]
 80125fe:	462a      	mov	r2, r5
 8012600:	4653      	mov	r3, sl
 8012602:	4621      	mov	r1, r4
 8012604:	a806      	add	r0, sp, #24
 8012606:	f000 fb5b 	bl	8012cc0 <__kernel_rem_pio2>
 801260a:	9b04      	ldr	r3, [sp, #16]
 801260c:	2b00      	cmp	r3, #0
 801260e:	4605      	mov	r5, r0
 8012610:	f6bf ae53 	bge.w	80122ba <__ieee754_rem_pio2+0x7a>
 8012614:	e9d4 2100 	ldrd	r2, r1, [r4]
 8012618:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801261c:	e9c4 2300 	strd	r2, r3, [r4]
 8012620:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8012624:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012628:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801262c:	e740      	b.n	80124b0 <__ieee754_rem_pio2+0x270>
 801262e:	bf00      	nop
 8012630:	41700000 	.word	0x41700000
 8012634:	08013af8 	.word	0x08013af8

08012638 <fabs>:
 8012638:	ec51 0b10 	vmov	r0, r1, d0
 801263c:	4602      	mov	r2, r0
 801263e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8012642:	ec43 2b10 	vmov	d0, r2, r3
 8012646:	4770      	bx	lr

08012648 <__kernel_cosf>:
 8012648:	ee10 3a10 	vmov	r3, s0
 801264c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012650:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012654:	eef0 6a40 	vmov.f32	s13, s0
 8012658:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801265c:	d204      	bcs.n	8012668 <__kernel_cosf+0x20>
 801265e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8012662:	ee17 2a90 	vmov	r2, s15
 8012666:	b342      	cbz	r2, 80126ba <__kernel_cosf+0x72>
 8012668:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801266c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80126d8 <__kernel_cosf+0x90>
 8012670:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80126dc <__kernel_cosf+0x94>
 8012674:	4a1a      	ldr	r2, [pc, #104]	@ (80126e0 <__kernel_cosf+0x98>)
 8012676:	eea7 6a27 	vfma.f32	s12, s14, s15
 801267a:	4293      	cmp	r3, r2
 801267c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80126e4 <__kernel_cosf+0x9c>
 8012680:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012684:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80126e8 <__kernel_cosf+0xa0>
 8012688:	eea7 6a87 	vfma.f32	s12, s15, s14
 801268c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80126ec <__kernel_cosf+0xa4>
 8012690:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012694:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80126f0 <__kernel_cosf+0xa8>
 8012698:	eea7 6a87 	vfma.f32	s12, s15, s14
 801269c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80126a0:	ee26 6a07 	vmul.f32	s12, s12, s14
 80126a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80126a8:	eee7 0a06 	vfma.f32	s1, s14, s12
 80126ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80126b0:	d804      	bhi.n	80126bc <__kernel_cosf+0x74>
 80126b2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80126b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80126ba:	4770      	bx	lr
 80126bc:	4a0d      	ldr	r2, [pc, #52]	@ (80126f4 <__kernel_cosf+0xac>)
 80126be:	4293      	cmp	r3, r2
 80126c0:	bf9a      	itte	ls
 80126c2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80126c6:	ee07 3a10 	vmovls	s14, r3
 80126ca:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80126ce:	ee30 0a47 	vsub.f32	s0, s0, s14
 80126d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80126d6:	e7ec      	b.n	80126b2 <__kernel_cosf+0x6a>
 80126d8:	ad47d74e 	.word	0xad47d74e
 80126dc:	310f74f6 	.word	0x310f74f6
 80126e0:	3e999999 	.word	0x3e999999
 80126e4:	b493f27c 	.word	0xb493f27c
 80126e8:	37d00d01 	.word	0x37d00d01
 80126ec:	bab60b61 	.word	0xbab60b61
 80126f0:	3d2aaaab 	.word	0x3d2aaaab
 80126f4:	3f480000 	.word	0x3f480000

080126f8 <__kernel_sinf>:
 80126f8:	ee10 3a10 	vmov	r3, s0
 80126fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012700:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012704:	d204      	bcs.n	8012710 <__kernel_sinf+0x18>
 8012706:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801270a:	ee17 3a90 	vmov	r3, s15
 801270e:	b35b      	cbz	r3, 8012768 <__kernel_sinf+0x70>
 8012710:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012714:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801276c <__kernel_sinf+0x74>
 8012718:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8012770 <__kernel_sinf+0x78>
 801271c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012720:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8012774 <__kernel_sinf+0x7c>
 8012724:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012728:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8012778 <__kernel_sinf+0x80>
 801272c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012730:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801277c <__kernel_sinf+0x84>
 8012734:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012738:	eee6 7a07 	vfma.f32	s15, s12, s14
 801273c:	b930      	cbnz	r0, 801274c <__kernel_sinf+0x54>
 801273e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8012780 <__kernel_sinf+0x88>
 8012742:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012746:	eea6 0a26 	vfma.f32	s0, s12, s13
 801274a:	4770      	bx	lr
 801274c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8012750:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8012754:	eee0 7a86 	vfma.f32	s15, s1, s12
 8012758:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801275c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8012784 <__kernel_sinf+0x8c>
 8012760:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8012764:	ee30 0a60 	vsub.f32	s0, s0, s1
 8012768:	4770      	bx	lr
 801276a:	bf00      	nop
 801276c:	2f2ec9d3 	.word	0x2f2ec9d3
 8012770:	b2d72f34 	.word	0xb2d72f34
 8012774:	3638ef1b 	.word	0x3638ef1b
 8012778:	b9500d01 	.word	0xb9500d01
 801277c:	3c088889 	.word	0x3c088889
 8012780:	be2aaaab 	.word	0xbe2aaaab
 8012784:	3e2aaaab 	.word	0x3e2aaaab

08012788 <__ieee754_fmodf>:
 8012788:	b570      	push	{r4, r5, r6, lr}
 801278a:	ee10 6a90 	vmov	r6, s1
 801278e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012792:	1e5a      	subs	r2, r3, #1
 8012794:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8012798:	d206      	bcs.n	80127a8 <__ieee754_fmodf+0x20>
 801279a:	ee10 4a10 	vmov	r4, s0
 801279e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 80127a2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80127a6:	d304      	bcc.n	80127b2 <__ieee754_fmodf+0x2a>
 80127a8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80127ac:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80127b0:	bd70      	pop	{r4, r5, r6, pc}
 80127b2:	4299      	cmp	r1, r3
 80127b4:	dbfc      	blt.n	80127b0 <__ieee754_fmodf+0x28>
 80127b6:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 80127ba:	d105      	bne.n	80127c8 <__ieee754_fmodf+0x40>
 80127bc:	4b32      	ldr	r3, [pc, #200]	@ (8012888 <__ieee754_fmodf+0x100>)
 80127be:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 80127c2:	ed93 0a00 	vldr	s0, [r3]
 80127c6:	e7f3      	b.n	80127b0 <__ieee754_fmodf+0x28>
 80127c8:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80127cc:	d146      	bne.n	801285c <__ieee754_fmodf+0xd4>
 80127ce:	020a      	lsls	r2, r1, #8
 80127d0:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 80127d4:	2a00      	cmp	r2, #0
 80127d6:	dc3e      	bgt.n	8012856 <__ieee754_fmodf+0xce>
 80127d8:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80127dc:	bf01      	itttt	eq
 80127de:	021a      	lsleq	r2, r3, #8
 80127e0:	fab2 f282 	clzeq	r2, r2
 80127e4:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 80127e8:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 80127ec:	bf16      	itet	ne
 80127ee:	15da      	asrne	r2, r3, #23
 80127f0:	3282      	addeq	r2, #130	@ 0x82
 80127f2:	3a7f      	subne	r2, #127	@ 0x7f
 80127f4:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 80127f8:	bfbb      	ittet	lt
 80127fa:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 80127fe:	1a24      	sublt	r4, r4, r0
 8012800:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8012804:	40a1      	lsllt	r1, r4
 8012806:	bfa8      	it	ge
 8012808:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 801280c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8012810:	bfb5      	itete	lt
 8012812:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8012816:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 801281a:	1aa4      	sublt	r4, r4, r2
 801281c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8012820:	bfb8      	it	lt
 8012822:	fa03 f404 	lsllt.w	r4, r3, r4
 8012826:	1a80      	subs	r0, r0, r2
 8012828:	1b0b      	subs	r3, r1, r4
 801282a:	b9d0      	cbnz	r0, 8012862 <__ieee754_fmodf+0xda>
 801282c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8012830:	bf28      	it	cs
 8012832:	460b      	movcs	r3, r1
 8012834:	2b00      	cmp	r3, #0
 8012836:	d0c1      	beq.n	80127bc <__ieee754_fmodf+0x34>
 8012838:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801283c:	db19      	blt.n	8012872 <__ieee754_fmodf+0xea>
 801283e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8012842:	db19      	blt.n	8012878 <__ieee754_fmodf+0xf0>
 8012844:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8012848:	327f      	adds	r2, #127	@ 0x7f
 801284a:	432b      	orrs	r3, r5
 801284c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012850:	ee00 3a10 	vmov	s0, r3
 8012854:	e7ac      	b.n	80127b0 <__ieee754_fmodf+0x28>
 8012856:	3801      	subs	r0, #1
 8012858:	0052      	lsls	r2, r2, #1
 801285a:	e7bb      	b.n	80127d4 <__ieee754_fmodf+0x4c>
 801285c:	15c8      	asrs	r0, r1, #23
 801285e:	387f      	subs	r0, #127	@ 0x7f
 8012860:	e7ba      	b.n	80127d8 <__ieee754_fmodf+0x50>
 8012862:	2b00      	cmp	r3, #0
 8012864:	da02      	bge.n	801286c <__ieee754_fmodf+0xe4>
 8012866:	0049      	lsls	r1, r1, #1
 8012868:	3801      	subs	r0, #1
 801286a:	e7dd      	b.n	8012828 <__ieee754_fmodf+0xa0>
 801286c:	d0a6      	beq.n	80127bc <__ieee754_fmodf+0x34>
 801286e:	0059      	lsls	r1, r3, #1
 8012870:	e7fa      	b.n	8012868 <__ieee754_fmodf+0xe0>
 8012872:	005b      	lsls	r3, r3, #1
 8012874:	3a01      	subs	r2, #1
 8012876:	e7df      	b.n	8012838 <__ieee754_fmodf+0xb0>
 8012878:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 801287c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8012880:	3282      	adds	r2, #130	@ 0x82
 8012882:	4113      	asrs	r3, r2
 8012884:	432b      	orrs	r3, r5
 8012886:	e7e3      	b.n	8012850 <__ieee754_fmodf+0xc8>
 8012888:	08013c00 	.word	0x08013c00

0801288c <__ieee754_rem_pio2f>:
 801288c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801288e:	ee10 6a10 	vmov	r6, s0
 8012892:	4b88      	ldr	r3, [pc, #544]	@ (8012ab4 <__ieee754_rem_pio2f+0x228>)
 8012894:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8012898:	429d      	cmp	r5, r3
 801289a:	b087      	sub	sp, #28
 801289c:	4604      	mov	r4, r0
 801289e:	d805      	bhi.n	80128ac <__ieee754_rem_pio2f+0x20>
 80128a0:	2300      	movs	r3, #0
 80128a2:	ed80 0a00 	vstr	s0, [r0]
 80128a6:	6043      	str	r3, [r0, #4]
 80128a8:	2000      	movs	r0, #0
 80128aa:	e022      	b.n	80128f2 <__ieee754_rem_pio2f+0x66>
 80128ac:	4b82      	ldr	r3, [pc, #520]	@ (8012ab8 <__ieee754_rem_pio2f+0x22c>)
 80128ae:	429d      	cmp	r5, r3
 80128b0:	d83a      	bhi.n	8012928 <__ieee754_rem_pio2f+0x9c>
 80128b2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80128b6:	2e00      	cmp	r6, #0
 80128b8:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8012abc <__ieee754_rem_pio2f+0x230>
 80128bc:	4a80      	ldr	r2, [pc, #512]	@ (8012ac0 <__ieee754_rem_pio2f+0x234>)
 80128be:	f023 030f 	bic.w	r3, r3, #15
 80128c2:	dd18      	ble.n	80128f6 <__ieee754_rem_pio2f+0x6a>
 80128c4:	4293      	cmp	r3, r2
 80128c6:	ee70 7a47 	vsub.f32	s15, s0, s14
 80128ca:	bf09      	itett	eq
 80128cc:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8012ac4 <__ieee754_rem_pio2f+0x238>
 80128d0:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8012ac8 <__ieee754_rem_pio2f+0x23c>
 80128d4:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8012acc <__ieee754_rem_pio2f+0x240>
 80128d8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80128dc:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80128e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80128e4:	ed80 7a00 	vstr	s14, [r0]
 80128e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80128ec:	edc0 7a01 	vstr	s15, [r0, #4]
 80128f0:	2001      	movs	r0, #1
 80128f2:	b007      	add	sp, #28
 80128f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128f6:	4293      	cmp	r3, r2
 80128f8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80128fc:	bf09      	itett	eq
 80128fe:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8012ac4 <__ieee754_rem_pio2f+0x238>
 8012902:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8012ac8 <__ieee754_rem_pio2f+0x23c>
 8012906:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8012acc <__ieee754_rem_pio2f+0x240>
 801290a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801290e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012912:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012916:	ed80 7a00 	vstr	s14, [r0]
 801291a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801291e:	edc0 7a01 	vstr	s15, [r0, #4]
 8012922:	f04f 30ff 	mov.w	r0, #4294967295
 8012926:	e7e4      	b.n	80128f2 <__ieee754_rem_pio2f+0x66>
 8012928:	4b69      	ldr	r3, [pc, #420]	@ (8012ad0 <__ieee754_rem_pio2f+0x244>)
 801292a:	429d      	cmp	r5, r3
 801292c:	d873      	bhi.n	8012a16 <__ieee754_rem_pio2f+0x18a>
 801292e:	f000 f8dd 	bl	8012aec <fabsf>
 8012932:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8012ad4 <__ieee754_rem_pio2f+0x248>
 8012936:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801293a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801293e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012946:	ee17 0a90 	vmov	r0, s15
 801294a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8012abc <__ieee754_rem_pio2f+0x230>
 801294e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8012952:	281f      	cmp	r0, #31
 8012954:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8012ac8 <__ieee754_rem_pio2f+0x23c>
 8012958:	ee67 7a27 	vmul.f32	s15, s14, s15
 801295c:	eeb1 6a47 	vneg.f32	s12, s14
 8012960:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012964:	ee16 1a90 	vmov	r1, s13
 8012968:	dc09      	bgt.n	801297e <__ieee754_rem_pio2f+0xf2>
 801296a:	4a5b      	ldr	r2, [pc, #364]	@ (8012ad8 <__ieee754_rem_pio2f+0x24c>)
 801296c:	1e47      	subs	r7, r0, #1
 801296e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012972:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8012976:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801297a:	4293      	cmp	r3, r2
 801297c:	d107      	bne.n	801298e <__ieee754_rem_pio2f+0x102>
 801297e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8012982:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8012986:	2a08      	cmp	r2, #8
 8012988:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801298c:	dc14      	bgt.n	80129b8 <__ieee754_rem_pio2f+0x12c>
 801298e:	6021      	str	r1, [r4, #0]
 8012990:	ed94 7a00 	vldr	s14, [r4]
 8012994:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012998:	2e00      	cmp	r6, #0
 801299a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801299e:	ed84 0a01 	vstr	s0, [r4, #4]
 80129a2:	daa6      	bge.n	80128f2 <__ieee754_rem_pio2f+0x66>
 80129a4:	eeb1 7a47 	vneg.f32	s14, s14
 80129a8:	eeb1 0a40 	vneg.f32	s0, s0
 80129ac:	ed84 7a00 	vstr	s14, [r4]
 80129b0:	ed84 0a01 	vstr	s0, [r4, #4]
 80129b4:	4240      	negs	r0, r0
 80129b6:	e79c      	b.n	80128f2 <__ieee754_rem_pio2f+0x66>
 80129b8:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8012ac4 <__ieee754_rem_pio2f+0x238>
 80129bc:	eef0 6a40 	vmov.f32	s13, s0
 80129c0:	eee6 6a25 	vfma.f32	s13, s12, s11
 80129c4:	ee70 7a66 	vsub.f32	s15, s0, s13
 80129c8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80129cc:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8012acc <__ieee754_rem_pio2f+0x240>
 80129d0:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80129d4:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80129d8:	ee15 2a90 	vmov	r2, s11
 80129dc:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80129e0:	1a5b      	subs	r3, r3, r1
 80129e2:	2b19      	cmp	r3, #25
 80129e4:	dc04      	bgt.n	80129f0 <__ieee754_rem_pio2f+0x164>
 80129e6:	edc4 5a00 	vstr	s11, [r4]
 80129ea:	eeb0 0a66 	vmov.f32	s0, s13
 80129ee:	e7cf      	b.n	8012990 <__ieee754_rem_pio2f+0x104>
 80129f0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8012adc <__ieee754_rem_pio2f+0x250>
 80129f4:	eeb0 0a66 	vmov.f32	s0, s13
 80129f8:	eea6 0a25 	vfma.f32	s0, s12, s11
 80129fc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8012a00:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8012ae0 <__ieee754_rem_pio2f+0x254>
 8012a04:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012a08:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8012a0c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012a10:	ed84 7a00 	vstr	s14, [r4]
 8012a14:	e7bc      	b.n	8012990 <__ieee754_rem_pio2f+0x104>
 8012a16:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8012a1a:	d306      	bcc.n	8012a2a <__ieee754_rem_pio2f+0x19e>
 8012a1c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012a20:	edc0 7a01 	vstr	s15, [r0, #4]
 8012a24:	edc0 7a00 	vstr	s15, [r0]
 8012a28:	e73e      	b.n	80128a8 <__ieee754_rem_pio2f+0x1c>
 8012a2a:	15ea      	asrs	r2, r5, #23
 8012a2c:	3a86      	subs	r2, #134	@ 0x86
 8012a2e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8012a32:	ee07 3a90 	vmov	s15, r3
 8012a36:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012a3a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8012ae4 <__ieee754_rem_pio2f+0x258>
 8012a3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012a42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a46:	ed8d 7a03 	vstr	s14, [sp, #12]
 8012a4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012a4e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012a52:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012a56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a5a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8012a5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012a62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a6a:	edcd 7a05 	vstr	s15, [sp, #20]
 8012a6e:	d11e      	bne.n	8012aae <__ieee754_rem_pio2f+0x222>
 8012a70:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a78:	bf0c      	ite	eq
 8012a7a:	2301      	moveq	r3, #1
 8012a7c:	2302      	movne	r3, #2
 8012a7e:	491a      	ldr	r1, [pc, #104]	@ (8012ae8 <__ieee754_rem_pio2f+0x25c>)
 8012a80:	9101      	str	r1, [sp, #4]
 8012a82:	2102      	movs	r1, #2
 8012a84:	9100      	str	r1, [sp, #0]
 8012a86:	a803      	add	r0, sp, #12
 8012a88:	4621      	mov	r1, r4
 8012a8a:	f000 fc69 	bl	8013360 <__kernel_rem_pio2f>
 8012a8e:	2e00      	cmp	r6, #0
 8012a90:	f6bf af2f 	bge.w	80128f2 <__ieee754_rem_pio2f+0x66>
 8012a94:	edd4 7a00 	vldr	s15, [r4]
 8012a98:	eef1 7a67 	vneg.f32	s15, s15
 8012a9c:	edc4 7a00 	vstr	s15, [r4]
 8012aa0:	edd4 7a01 	vldr	s15, [r4, #4]
 8012aa4:	eef1 7a67 	vneg.f32	s15, s15
 8012aa8:	edc4 7a01 	vstr	s15, [r4, #4]
 8012aac:	e782      	b.n	80129b4 <__ieee754_rem_pio2f+0x128>
 8012aae:	2303      	movs	r3, #3
 8012ab0:	e7e5      	b.n	8012a7e <__ieee754_rem_pio2f+0x1f2>
 8012ab2:	bf00      	nop
 8012ab4:	3f490fd8 	.word	0x3f490fd8
 8012ab8:	4016cbe3 	.word	0x4016cbe3
 8012abc:	3fc90f80 	.word	0x3fc90f80
 8012ac0:	3fc90fd0 	.word	0x3fc90fd0
 8012ac4:	37354400 	.word	0x37354400
 8012ac8:	37354443 	.word	0x37354443
 8012acc:	2e85a308 	.word	0x2e85a308
 8012ad0:	43490f80 	.word	0x43490f80
 8012ad4:	3f22f984 	.word	0x3f22f984
 8012ad8:	08013c08 	.word	0x08013c08
 8012adc:	2e85a300 	.word	0x2e85a300
 8012ae0:	248d3132 	.word	0x248d3132
 8012ae4:	43800000 	.word	0x43800000
 8012ae8:	08013c88 	.word	0x08013c88

08012aec <fabsf>:
 8012aec:	ee10 3a10 	vmov	r3, s0
 8012af0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012af4:	ee00 3a10 	vmov	s0, r3
 8012af8:	4770      	bx	lr
 8012afa:	0000      	movs	r0, r0
 8012afc:	0000      	movs	r0, r0
	...

08012b00 <scalbn>:
 8012b00:	b570      	push	{r4, r5, r6, lr}
 8012b02:	ec55 4b10 	vmov	r4, r5, d0
 8012b06:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012b0a:	4606      	mov	r6, r0
 8012b0c:	462b      	mov	r3, r5
 8012b0e:	b991      	cbnz	r1, 8012b36 <scalbn+0x36>
 8012b10:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012b14:	4323      	orrs	r3, r4
 8012b16:	d03b      	beq.n	8012b90 <scalbn+0x90>
 8012b18:	4b33      	ldr	r3, [pc, #204]	@ (8012be8 <scalbn+0xe8>)
 8012b1a:	4620      	mov	r0, r4
 8012b1c:	4629      	mov	r1, r5
 8012b1e:	2200      	movs	r2, #0
 8012b20:	f7ed fd36 	bl	8000590 <__aeabi_dmul>
 8012b24:	4b31      	ldr	r3, [pc, #196]	@ (8012bec <scalbn+0xec>)
 8012b26:	429e      	cmp	r6, r3
 8012b28:	4604      	mov	r4, r0
 8012b2a:	460d      	mov	r5, r1
 8012b2c:	da0f      	bge.n	8012b4e <scalbn+0x4e>
 8012b2e:	a326      	add	r3, pc, #152	@ (adr r3, 8012bc8 <scalbn+0xc8>)
 8012b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b34:	e01e      	b.n	8012b74 <scalbn+0x74>
 8012b36:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012b3a:	4291      	cmp	r1, r2
 8012b3c:	d10b      	bne.n	8012b56 <scalbn+0x56>
 8012b3e:	4622      	mov	r2, r4
 8012b40:	4620      	mov	r0, r4
 8012b42:	4629      	mov	r1, r5
 8012b44:	f7ed fb6e 	bl	8000224 <__adddf3>
 8012b48:	4604      	mov	r4, r0
 8012b4a:	460d      	mov	r5, r1
 8012b4c:	e020      	b.n	8012b90 <scalbn+0x90>
 8012b4e:	460b      	mov	r3, r1
 8012b50:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012b54:	3936      	subs	r1, #54	@ 0x36
 8012b56:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8012b5a:	4296      	cmp	r6, r2
 8012b5c:	dd0d      	ble.n	8012b7a <scalbn+0x7a>
 8012b5e:	2d00      	cmp	r5, #0
 8012b60:	a11b      	add	r1, pc, #108	@ (adr r1, 8012bd0 <scalbn+0xd0>)
 8012b62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b66:	da02      	bge.n	8012b6e <scalbn+0x6e>
 8012b68:	a11b      	add	r1, pc, #108	@ (adr r1, 8012bd8 <scalbn+0xd8>)
 8012b6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012b6e:	a318      	add	r3, pc, #96	@ (adr r3, 8012bd0 <scalbn+0xd0>)
 8012b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b74:	f7ed fd0c 	bl	8000590 <__aeabi_dmul>
 8012b78:	e7e6      	b.n	8012b48 <scalbn+0x48>
 8012b7a:	1872      	adds	r2, r6, r1
 8012b7c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8012b80:	428a      	cmp	r2, r1
 8012b82:	dcec      	bgt.n	8012b5e <scalbn+0x5e>
 8012b84:	2a00      	cmp	r2, #0
 8012b86:	dd06      	ble.n	8012b96 <scalbn+0x96>
 8012b88:	f36f 531e 	bfc	r3, #20, #11
 8012b8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012b90:	ec45 4b10 	vmov	d0, r4, r5
 8012b94:	bd70      	pop	{r4, r5, r6, pc}
 8012b96:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8012b9a:	da08      	bge.n	8012bae <scalbn+0xae>
 8012b9c:	2d00      	cmp	r5, #0
 8012b9e:	a10a      	add	r1, pc, #40	@ (adr r1, 8012bc8 <scalbn+0xc8>)
 8012ba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012ba4:	dac3      	bge.n	8012b2e <scalbn+0x2e>
 8012ba6:	a10e      	add	r1, pc, #56	@ (adr r1, 8012be0 <scalbn+0xe0>)
 8012ba8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012bac:	e7bf      	b.n	8012b2e <scalbn+0x2e>
 8012bae:	3236      	adds	r2, #54	@ 0x36
 8012bb0:	f36f 531e 	bfc	r3, #20, #11
 8012bb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012bb8:	4620      	mov	r0, r4
 8012bba:	4b0d      	ldr	r3, [pc, #52]	@ (8012bf0 <scalbn+0xf0>)
 8012bbc:	4629      	mov	r1, r5
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	e7d8      	b.n	8012b74 <scalbn+0x74>
 8012bc2:	bf00      	nop
 8012bc4:	f3af 8000 	nop.w
 8012bc8:	c2f8f359 	.word	0xc2f8f359
 8012bcc:	01a56e1f 	.word	0x01a56e1f
 8012bd0:	8800759c 	.word	0x8800759c
 8012bd4:	7e37e43c 	.word	0x7e37e43c
 8012bd8:	8800759c 	.word	0x8800759c
 8012bdc:	fe37e43c 	.word	0xfe37e43c
 8012be0:	c2f8f359 	.word	0xc2f8f359
 8012be4:	81a56e1f 	.word	0x81a56e1f
 8012be8:	43500000 	.word	0x43500000
 8012bec:	ffff3cb0 	.word	0xffff3cb0
 8012bf0:	3c900000 	.word	0x3c900000

08012bf4 <scalbnf>:
 8012bf4:	ee10 3a10 	vmov	r3, s0
 8012bf8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012bfc:	d02b      	beq.n	8012c56 <scalbnf+0x62>
 8012bfe:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8012c02:	d302      	bcc.n	8012c0a <scalbnf+0x16>
 8012c04:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012c08:	4770      	bx	lr
 8012c0a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8012c0e:	d123      	bne.n	8012c58 <scalbnf+0x64>
 8012c10:	4b24      	ldr	r3, [pc, #144]	@ (8012ca4 <scalbnf+0xb0>)
 8012c12:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8012ca8 <scalbnf+0xb4>
 8012c16:	4298      	cmp	r0, r3
 8012c18:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012c1c:	db17      	blt.n	8012c4e <scalbnf+0x5a>
 8012c1e:	ee10 3a10 	vmov	r3, s0
 8012c22:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012c26:	3a19      	subs	r2, #25
 8012c28:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8012c2c:	4288      	cmp	r0, r1
 8012c2e:	dd15      	ble.n	8012c5c <scalbnf+0x68>
 8012c30:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8012cac <scalbnf+0xb8>
 8012c34:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8012cb0 <scalbnf+0xbc>
 8012c38:	ee10 3a10 	vmov	r3, s0
 8012c3c:	eeb0 7a67 	vmov.f32	s14, s15
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	bfb8      	it	lt
 8012c44:	eef0 7a66 	vmovlt.f32	s15, s13
 8012c48:	ee27 0a87 	vmul.f32	s0, s15, s14
 8012c4c:	4770      	bx	lr
 8012c4e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012cb4 <scalbnf+0xc0>
 8012c52:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012c56:	4770      	bx	lr
 8012c58:	0dd2      	lsrs	r2, r2, #23
 8012c5a:	e7e5      	b.n	8012c28 <scalbnf+0x34>
 8012c5c:	4410      	add	r0, r2
 8012c5e:	28fe      	cmp	r0, #254	@ 0xfe
 8012c60:	dce6      	bgt.n	8012c30 <scalbnf+0x3c>
 8012c62:	2800      	cmp	r0, #0
 8012c64:	dd06      	ble.n	8012c74 <scalbnf+0x80>
 8012c66:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012c6a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012c6e:	ee00 3a10 	vmov	s0, r3
 8012c72:	4770      	bx	lr
 8012c74:	f110 0f16 	cmn.w	r0, #22
 8012c78:	da09      	bge.n	8012c8e <scalbnf+0x9a>
 8012c7a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8012cb4 <scalbnf+0xc0>
 8012c7e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8012cb8 <scalbnf+0xc4>
 8012c82:	ee10 3a10 	vmov	r3, s0
 8012c86:	eeb0 7a67 	vmov.f32	s14, s15
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	e7d9      	b.n	8012c42 <scalbnf+0x4e>
 8012c8e:	3019      	adds	r0, #25
 8012c90:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012c94:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012c98:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8012cbc <scalbnf+0xc8>
 8012c9c:	ee07 3a90 	vmov	s15, r3
 8012ca0:	e7d7      	b.n	8012c52 <scalbnf+0x5e>
 8012ca2:	bf00      	nop
 8012ca4:	ffff3cb0 	.word	0xffff3cb0
 8012ca8:	4c000000 	.word	0x4c000000
 8012cac:	7149f2ca 	.word	0x7149f2ca
 8012cb0:	f149f2ca 	.word	0xf149f2ca
 8012cb4:	0da24260 	.word	0x0da24260
 8012cb8:	8da24260 	.word	0x8da24260
 8012cbc:	33000000 	.word	0x33000000

08012cc0 <__kernel_rem_pio2>:
 8012cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cc4:	ed2d 8b02 	vpush	{d8}
 8012cc8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8012ccc:	f112 0f14 	cmn.w	r2, #20
 8012cd0:	9306      	str	r3, [sp, #24]
 8012cd2:	9104      	str	r1, [sp, #16]
 8012cd4:	4bc2      	ldr	r3, [pc, #776]	@ (8012fe0 <__kernel_rem_pio2+0x320>)
 8012cd6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8012cd8:	9008      	str	r0, [sp, #32]
 8012cda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012cde:	9300      	str	r3, [sp, #0]
 8012ce0:	9b06      	ldr	r3, [sp, #24]
 8012ce2:	f103 33ff 	add.w	r3, r3, #4294967295
 8012ce6:	bfa8      	it	ge
 8012ce8:	1ed4      	subge	r4, r2, #3
 8012cea:	9305      	str	r3, [sp, #20]
 8012cec:	bfb2      	itee	lt
 8012cee:	2400      	movlt	r4, #0
 8012cf0:	2318      	movge	r3, #24
 8012cf2:	fb94 f4f3 	sdivge	r4, r4, r3
 8012cf6:	f06f 0317 	mvn.w	r3, #23
 8012cfa:	fb04 3303 	mla	r3, r4, r3, r3
 8012cfe:	eb03 0b02 	add.w	fp, r3, r2
 8012d02:	9b00      	ldr	r3, [sp, #0]
 8012d04:	9a05      	ldr	r2, [sp, #20]
 8012d06:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8012fd0 <__kernel_rem_pio2+0x310>
 8012d0a:	eb03 0802 	add.w	r8, r3, r2
 8012d0e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8012d10:	1aa7      	subs	r7, r4, r2
 8012d12:	ae20      	add	r6, sp, #128	@ 0x80
 8012d14:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012d18:	2500      	movs	r5, #0
 8012d1a:	4545      	cmp	r5, r8
 8012d1c:	dd12      	ble.n	8012d44 <__kernel_rem_pio2+0x84>
 8012d1e:	9b06      	ldr	r3, [sp, #24]
 8012d20:	aa20      	add	r2, sp, #128	@ 0x80
 8012d22:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012d26:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8012d2a:	2700      	movs	r7, #0
 8012d2c:	9b00      	ldr	r3, [sp, #0]
 8012d2e:	429f      	cmp	r7, r3
 8012d30:	dc2e      	bgt.n	8012d90 <__kernel_rem_pio2+0xd0>
 8012d32:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8012fd0 <__kernel_rem_pio2+0x310>
 8012d36:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012d3a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012d3e:	46a8      	mov	r8, r5
 8012d40:	2600      	movs	r6, #0
 8012d42:	e01b      	b.n	8012d7c <__kernel_rem_pio2+0xbc>
 8012d44:	42ef      	cmn	r7, r5
 8012d46:	d407      	bmi.n	8012d58 <__kernel_rem_pio2+0x98>
 8012d48:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012d4c:	f7ed fbb6 	bl	80004bc <__aeabi_i2d>
 8012d50:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012d54:	3501      	adds	r5, #1
 8012d56:	e7e0      	b.n	8012d1a <__kernel_rem_pio2+0x5a>
 8012d58:	ec51 0b18 	vmov	r0, r1, d8
 8012d5c:	e7f8      	b.n	8012d50 <__kernel_rem_pio2+0x90>
 8012d5e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8012d62:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012d66:	f7ed fc13 	bl	8000590 <__aeabi_dmul>
 8012d6a:	4602      	mov	r2, r0
 8012d6c:	460b      	mov	r3, r1
 8012d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d72:	f7ed fa57 	bl	8000224 <__adddf3>
 8012d76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d7a:	3601      	adds	r6, #1
 8012d7c:	9b05      	ldr	r3, [sp, #20]
 8012d7e:	429e      	cmp	r6, r3
 8012d80:	dded      	ble.n	8012d5e <__kernel_rem_pio2+0x9e>
 8012d82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d86:	3701      	adds	r7, #1
 8012d88:	ecaa 7b02 	vstmia	sl!, {d7}
 8012d8c:	3508      	adds	r5, #8
 8012d8e:	e7cd      	b.n	8012d2c <__kernel_rem_pio2+0x6c>
 8012d90:	9b00      	ldr	r3, [sp, #0]
 8012d92:	f8dd 8000 	ldr.w	r8, [sp]
 8012d96:	aa0c      	add	r2, sp, #48	@ 0x30
 8012d98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012d9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8012d9e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8012da0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8012da6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8012daa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012dac:	ab98      	add	r3, sp, #608	@ 0x260
 8012dae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012db2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8012db6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012dba:	ac0c      	add	r4, sp, #48	@ 0x30
 8012dbc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8012dbe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8012dc2:	46a1      	mov	r9, r4
 8012dc4:	46c2      	mov	sl, r8
 8012dc6:	f1ba 0f00 	cmp.w	sl, #0
 8012dca:	dc77      	bgt.n	8012ebc <__kernel_rem_pio2+0x1fc>
 8012dcc:	4658      	mov	r0, fp
 8012dce:	ed9d 0b02 	vldr	d0, [sp, #8]
 8012dd2:	f7ff fe95 	bl	8012b00 <scalbn>
 8012dd6:	ec57 6b10 	vmov	r6, r7, d0
 8012dda:	2200      	movs	r2, #0
 8012ddc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8012de0:	4630      	mov	r0, r6
 8012de2:	4639      	mov	r1, r7
 8012de4:	f7ed fbd4 	bl	8000590 <__aeabi_dmul>
 8012de8:	ec41 0b10 	vmov	d0, r0, r1
 8012dec:	f000 fd20 	bl	8013830 <floor>
 8012df0:	4b7c      	ldr	r3, [pc, #496]	@ (8012fe4 <__kernel_rem_pio2+0x324>)
 8012df2:	ec51 0b10 	vmov	r0, r1, d0
 8012df6:	2200      	movs	r2, #0
 8012df8:	f7ed fbca 	bl	8000590 <__aeabi_dmul>
 8012dfc:	4602      	mov	r2, r0
 8012dfe:	460b      	mov	r3, r1
 8012e00:	4630      	mov	r0, r6
 8012e02:	4639      	mov	r1, r7
 8012e04:	f7ed fa0c 	bl	8000220 <__aeabi_dsub>
 8012e08:	460f      	mov	r7, r1
 8012e0a:	4606      	mov	r6, r0
 8012e0c:	f7ed fe5a 	bl	8000ac4 <__aeabi_d2iz>
 8012e10:	9002      	str	r0, [sp, #8]
 8012e12:	f7ed fb53 	bl	80004bc <__aeabi_i2d>
 8012e16:	4602      	mov	r2, r0
 8012e18:	460b      	mov	r3, r1
 8012e1a:	4630      	mov	r0, r6
 8012e1c:	4639      	mov	r1, r7
 8012e1e:	f7ed f9ff 	bl	8000220 <__aeabi_dsub>
 8012e22:	f1bb 0f00 	cmp.w	fp, #0
 8012e26:	4606      	mov	r6, r0
 8012e28:	460f      	mov	r7, r1
 8012e2a:	dd6c      	ble.n	8012f06 <__kernel_rem_pio2+0x246>
 8012e2c:	f108 31ff 	add.w	r1, r8, #4294967295
 8012e30:	ab0c      	add	r3, sp, #48	@ 0x30
 8012e32:	9d02      	ldr	r5, [sp, #8]
 8012e34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012e38:	f1cb 0018 	rsb	r0, fp, #24
 8012e3c:	fa43 f200 	asr.w	r2, r3, r0
 8012e40:	4415      	add	r5, r2
 8012e42:	4082      	lsls	r2, r0
 8012e44:	1a9b      	subs	r3, r3, r2
 8012e46:	aa0c      	add	r2, sp, #48	@ 0x30
 8012e48:	9502      	str	r5, [sp, #8]
 8012e4a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012e4e:	f1cb 0217 	rsb	r2, fp, #23
 8012e52:	fa43 f902 	asr.w	r9, r3, r2
 8012e56:	f1b9 0f00 	cmp.w	r9, #0
 8012e5a:	dd64      	ble.n	8012f26 <__kernel_rem_pio2+0x266>
 8012e5c:	9b02      	ldr	r3, [sp, #8]
 8012e5e:	2200      	movs	r2, #0
 8012e60:	3301      	adds	r3, #1
 8012e62:	9302      	str	r3, [sp, #8]
 8012e64:	4615      	mov	r5, r2
 8012e66:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8012e6a:	4590      	cmp	r8, r2
 8012e6c:	f300 80a1 	bgt.w	8012fb2 <__kernel_rem_pio2+0x2f2>
 8012e70:	f1bb 0f00 	cmp.w	fp, #0
 8012e74:	dd07      	ble.n	8012e86 <__kernel_rem_pio2+0x1c6>
 8012e76:	f1bb 0f01 	cmp.w	fp, #1
 8012e7a:	f000 80c1 	beq.w	8013000 <__kernel_rem_pio2+0x340>
 8012e7e:	f1bb 0f02 	cmp.w	fp, #2
 8012e82:	f000 80c8 	beq.w	8013016 <__kernel_rem_pio2+0x356>
 8012e86:	f1b9 0f02 	cmp.w	r9, #2
 8012e8a:	d14c      	bne.n	8012f26 <__kernel_rem_pio2+0x266>
 8012e8c:	4632      	mov	r2, r6
 8012e8e:	463b      	mov	r3, r7
 8012e90:	4955      	ldr	r1, [pc, #340]	@ (8012fe8 <__kernel_rem_pio2+0x328>)
 8012e92:	2000      	movs	r0, #0
 8012e94:	f7ed f9c4 	bl	8000220 <__aeabi_dsub>
 8012e98:	4606      	mov	r6, r0
 8012e9a:	460f      	mov	r7, r1
 8012e9c:	2d00      	cmp	r5, #0
 8012e9e:	d042      	beq.n	8012f26 <__kernel_rem_pio2+0x266>
 8012ea0:	4658      	mov	r0, fp
 8012ea2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8012fd8 <__kernel_rem_pio2+0x318>
 8012ea6:	f7ff fe2b 	bl	8012b00 <scalbn>
 8012eaa:	4630      	mov	r0, r6
 8012eac:	4639      	mov	r1, r7
 8012eae:	ec53 2b10 	vmov	r2, r3, d0
 8012eb2:	f7ed f9b5 	bl	8000220 <__aeabi_dsub>
 8012eb6:	4606      	mov	r6, r0
 8012eb8:	460f      	mov	r7, r1
 8012eba:	e034      	b.n	8012f26 <__kernel_rem_pio2+0x266>
 8012ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8012fec <__kernel_rem_pio2+0x32c>)
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ec4:	f7ed fb64 	bl	8000590 <__aeabi_dmul>
 8012ec8:	f7ed fdfc 	bl	8000ac4 <__aeabi_d2iz>
 8012ecc:	f7ed faf6 	bl	80004bc <__aeabi_i2d>
 8012ed0:	4b47      	ldr	r3, [pc, #284]	@ (8012ff0 <__kernel_rem_pio2+0x330>)
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	4606      	mov	r6, r0
 8012ed6:	460f      	mov	r7, r1
 8012ed8:	f7ed fb5a 	bl	8000590 <__aeabi_dmul>
 8012edc:	4602      	mov	r2, r0
 8012ede:	460b      	mov	r3, r1
 8012ee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ee4:	f7ed f99c 	bl	8000220 <__aeabi_dsub>
 8012ee8:	f7ed fdec 	bl	8000ac4 <__aeabi_d2iz>
 8012eec:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8012ef0:	f849 0b04 	str.w	r0, [r9], #4
 8012ef4:	4639      	mov	r1, r7
 8012ef6:	4630      	mov	r0, r6
 8012ef8:	f7ed f994 	bl	8000224 <__adddf3>
 8012efc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012f04:	e75f      	b.n	8012dc6 <__kernel_rem_pio2+0x106>
 8012f06:	d107      	bne.n	8012f18 <__kernel_rem_pio2+0x258>
 8012f08:	f108 33ff 	add.w	r3, r8, #4294967295
 8012f0c:	aa0c      	add	r2, sp, #48	@ 0x30
 8012f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f12:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8012f16:	e79e      	b.n	8012e56 <__kernel_rem_pio2+0x196>
 8012f18:	4b36      	ldr	r3, [pc, #216]	@ (8012ff4 <__kernel_rem_pio2+0x334>)
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	f7ed fdbe 	bl	8000a9c <__aeabi_dcmpge>
 8012f20:	2800      	cmp	r0, #0
 8012f22:	d143      	bne.n	8012fac <__kernel_rem_pio2+0x2ec>
 8012f24:	4681      	mov	r9, r0
 8012f26:	2200      	movs	r2, #0
 8012f28:	2300      	movs	r3, #0
 8012f2a:	4630      	mov	r0, r6
 8012f2c:	4639      	mov	r1, r7
 8012f2e:	f7ed fd97 	bl	8000a60 <__aeabi_dcmpeq>
 8012f32:	2800      	cmp	r0, #0
 8012f34:	f000 80c1 	beq.w	80130ba <__kernel_rem_pio2+0x3fa>
 8012f38:	f108 33ff 	add.w	r3, r8, #4294967295
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	9900      	ldr	r1, [sp, #0]
 8012f40:	428b      	cmp	r3, r1
 8012f42:	da70      	bge.n	8013026 <__kernel_rem_pio2+0x366>
 8012f44:	2a00      	cmp	r2, #0
 8012f46:	f000 808b 	beq.w	8013060 <__kernel_rem_pio2+0x3a0>
 8012f4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8012f4e:	ab0c      	add	r3, sp, #48	@ 0x30
 8012f50:	f1ab 0b18 	sub.w	fp, fp, #24
 8012f54:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d0f6      	beq.n	8012f4a <__kernel_rem_pio2+0x28a>
 8012f5c:	4658      	mov	r0, fp
 8012f5e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8012fd8 <__kernel_rem_pio2+0x318>
 8012f62:	f7ff fdcd 	bl	8012b00 <scalbn>
 8012f66:	f108 0301 	add.w	r3, r8, #1
 8012f6a:	00da      	lsls	r2, r3, #3
 8012f6c:	9205      	str	r2, [sp, #20]
 8012f6e:	ec55 4b10 	vmov	r4, r5, d0
 8012f72:	aa70      	add	r2, sp, #448	@ 0x1c0
 8012f74:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8012fec <__kernel_rem_pio2+0x32c>
 8012f78:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8012f7c:	4646      	mov	r6, r8
 8012f7e:	f04f 0a00 	mov.w	sl, #0
 8012f82:	2e00      	cmp	r6, #0
 8012f84:	f280 80d1 	bge.w	801312a <__kernel_rem_pio2+0x46a>
 8012f88:	4644      	mov	r4, r8
 8012f8a:	2c00      	cmp	r4, #0
 8012f8c:	f2c0 80ff 	blt.w	801318e <__kernel_rem_pio2+0x4ce>
 8012f90:	4b19      	ldr	r3, [pc, #100]	@ (8012ff8 <__kernel_rem_pio2+0x338>)
 8012f92:	461f      	mov	r7, r3
 8012f94:	ab70      	add	r3, sp, #448	@ 0x1c0
 8012f96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012f9a:	9306      	str	r3, [sp, #24]
 8012f9c:	f04f 0a00 	mov.w	sl, #0
 8012fa0:	f04f 0b00 	mov.w	fp, #0
 8012fa4:	2600      	movs	r6, #0
 8012fa6:	eba8 0504 	sub.w	r5, r8, r4
 8012faa:	e0e4      	b.n	8013176 <__kernel_rem_pio2+0x4b6>
 8012fac:	f04f 0902 	mov.w	r9, #2
 8012fb0:	e754      	b.n	8012e5c <__kernel_rem_pio2+0x19c>
 8012fb2:	f854 3b04 	ldr.w	r3, [r4], #4
 8012fb6:	bb0d      	cbnz	r5, 8012ffc <__kernel_rem_pio2+0x33c>
 8012fb8:	b123      	cbz	r3, 8012fc4 <__kernel_rem_pio2+0x304>
 8012fba:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8012fbe:	f844 3c04 	str.w	r3, [r4, #-4]
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	3201      	adds	r2, #1
 8012fc6:	461d      	mov	r5, r3
 8012fc8:	e74f      	b.n	8012e6a <__kernel_rem_pio2+0x1aa>
 8012fca:	bf00      	nop
 8012fcc:	f3af 8000 	nop.w
	...
 8012fdc:	3ff00000 	.word	0x3ff00000
 8012fe0:	08013fe0 	.word	0x08013fe0
 8012fe4:	40200000 	.word	0x40200000
 8012fe8:	3ff00000 	.word	0x3ff00000
 8012fec:	3e700000 	.word	0x3e700000
 8012ff0:	41700000 	.word	0x41700000
 8012ff4:	3fe00000 	.word	0x3fe00000
 8012ff8:	08013fa0 	.word	0x08013fa0
 8012ffc:	1acb      	subs	r3, r1, r3
 8012ffe:	e7de      	b.n	8012fbe <__kernel_rem_pio2+0x2fe>
 8013000:	f108 32ff 	add.w	r2, r8, #4294967295
 8013004:	ab0c      	add	r3, sp, #48	@ 0x30
 8013006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801300a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801300e:	a90c      	add	r1, sp, #48	@ 0x30
 8013010:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013014:	e737      	b.n	8012e86 <__kernel_rem_pio2+0x1c6>
 8013016:	f108 32ff 	add.w	r2, r8, #4294967295
 801301a:	ab0c      	add	r3, sp, #48	@ 0x30
 801301c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013020:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013024:	e7f3      	b.n	801300e <__kernel_rem_pio2+0x34e>
 8013026:	a90c      	add	r1, sp, #48	@ 0x30
 8013028:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801302c:	3b01      	subs	r3, #1
 801302e:	430a      	orrs	r2, r1
 8013030:	e785      	b.n	8012f3e <__kernel_rem_pio2+0x27e>
 8013032:	3401      	adds	r4, #1
 8013034:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013038:	2a00      	cmp	r2, #0
 801303a:	d0fa      	beq.n	8013032 <__kernel_rem_pio2+0x372>
 801303c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801303e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013042:	eb0d 0503 	add.w	r5, sp, r3
 8013046:	9b06      	ldr	r3, [sp, #24]
 8013048:	aa20      	add	r2, sp, #128	@ 0x80
 801304a:	4443      	add	r3, r8
 801304c:	f108 0701 	add.w	r7, r8, #1
 8013050:	3d98      	subs	r5, #152	@ 0x98
 8013052:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8013056:	4444      	add	r4, r8
 8013058:	42bc      	cmp	r4, r7
 801305a:	da04      	bge.n	8013066 <__kernel_rem_pio2+0x3a6>
 801305c:	46a0      	mov	r8, r4
 801305e:	e6a2      	b.n	8012da6 <__kernel_rem_pio2+0xe6>
 8013060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013062:	2401      	movs	r4, #1
 8013064:	e7e6      	b.n	8013034 <__kernel_rem_pio2+0x374>
 8013066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013068:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801306c:	f7ed fa26 	bl	80004bc <__aeabi_i2d>
 8013070:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8013330 <__kernel_rem_pio2+0x670>
 8013074:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013078:	ed8d 7b02 	vstr	d7, [sp, #8]
 801307c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013080:	46b2      	mov	sl, r6
 8013082:	f04f 0800 	mov.w	r8, #0
 8013086:	9b05      	ldr	r3, [sp, #20]
 8013088:	4598      	cmp	r8, r3
 801308a:	dd05      	ble.n	8013098 <__kernel_rem_pio2+0x3d8>
 801308c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013090:	3701      	adds	r7, #1
 8013092:	eca5 7b02 	vstmia	r5!, {d7}
 8013096:	e7df      	b.n	8013058 <__kernel_rem_pio2+0x398>
 8013098:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801309c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80130a0:	f7ed fa76 	bl	8000590 <__aeabi_dmul>
 80130a4:	4602      	mov	r2, r0
 80130a6:	460b      	mov	r3, r1
 80130a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130ac:	f7ed f8ba 	bl	8000224 <__adddf3>
 80130b0:	f108 0801 	add.w	r8, r8, #1
 80130b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130b8:	e7e5      	b.n	8013086 <__kernel_rem_pio2+0x3c6>
 80130ba:	f1cb 0000 	rsb	r0, fp, #0
 80130be:	ec47 6b10 	vmov	d0, r6, r7
 80130c2:	f7ff fd1d 	bl	8012b00 <scalbn>
 80130c6:	ec55 4b10 	vmov	r4, r5, d0
 80130ca:	4b9b      	ldr	r3, [pc, #620]	@ (8013338 <__kernel_rem_pio2+0x678>)
 80130cc:	2200      	movs	r2, #0
 80130ce:	4620      	mov	r0, r4
 80130d0:	4629      	mov	r1, r5
 80130d2:	f7ed fce3 	bl	8000a9c <__aeabi_dcmpge>
 80130d6:	b300      	cbz	r0, 801311a <__kernel_rem_pio2+0x45a>
 80130d8:	4b98      	ldr	r3, [pc, #608]	@ (801333c <__kernel_rem_pio2+0x67c>)
 80130da:	2200      	movs	r2, #0
 80130dc:	4620      	mov	r0, r4
 80130de:	4629      	mov	r1, r5
 80130e0:	f7ed fa56 	bl	8000590 <__aeabi_dmul>
 80130e4:	f7ed fcee 	bl	8000ac4 <__aeabi_d2iz>
 80130e8:	4606      	mov	r6, r0
 80130ea:	f7ed f9e7 	bl	80004bc <__aeabi_i2d>
 80130ee:	4b92      	ldr	r3, [pc, #584]	@ (8013338 <__kernel_rem_pio2+0x678>)
 80130f0:	2200      	movs	r2, #0
 80130f2:	f7ed fa4d 	bl	8000590 <__aeabi_dmul>
 80130f6:	460b      	mov	r3, r1
 80130f8:	4602      	mov	r2, r0
 80130fa:	4629      	mov	r1, r5
 80130fc:	4620      	mov	r0, r4
 80130fe:	f7ed f88f 	bl	8000220 <__aeabi_dsub>
 8013102:	f7ed fcdf 	bl	8000ac4 <__aeabi_d2iz>
 8013106:	ab0c      	add	r3, sp, #48	@ 0x30
 8013108:	f10b 0b18 	add.w	fp, fp, #24
 801310c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013110:	f108 0801 	add.w	r8, r8, #1
 8013114:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8013118:	e720      	b.n	8012f5c <__kernel_rem_pio2+0x29c>
 801311a:	4620      	mov	r0, r4
 801311c:	4629      	mov	r1, r5
 801311e:	f7ed fcd1 	bl	8000ac4 <__aeabi_d2iz>
 8013122:	ab0c      	add	r3, sp, #48	@ 0x30
 8013124:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013128:	e718      	b.n	8012f5c <__kernel_rem_pio2+0x29c>
 801312a:	ab0c      	add	r3, sp, #48	@ 0x30
 801312c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013130:	f7ed f9c4 	bl	80004bc <__aeabi_i2d>
 8013134:	4622      	mov	r2, r4
 8013136:	462b      	mov	r3, r5
 8013138:	f7ed fa2a 	bl	8000590 <__aeabi_dmul>
 801313c:	4652      	mov	r2, sl
 801313e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8013142:	465b      	mov	r3, fp
 8013144:	4620      	mov	r0, r4
 8013146:	4629      	mov	r1, r5
 8013148:	f7ed fa22 	bl	8000590 <__aeabi_dmul>
 801314c:	3e01      	subs	r6, #1
 801314e:	4604      	mov	r4, r0
 8013150:	460d      	mov	r5, r1
 8013152:	e716      	b.n	8012f82 <__kernel_rem_pio2+0x2c2>
 8013154:	9906      	ldr	r1, [sp, #24]
 8013156:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801315a:	9106      	str	r1, [sp, #24]
 801315c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8013160:	f7ed fa16 	bl	8000590 <__aeabi_dmul>
 8013164:	4602      	mov	r2, r0
 8013166:	460b      	mov	r3, r1
 8013168:	4650      	mov	r0, sl
 801316a:	4659      	mov	r1, fp
 801316c:	f7ed f85a 	bl	8000224 <__adddf3>
 8013170:	3601      	adds	r6, #1
 8013172:	4682      	mov	sl, r0
 8013174:	468b      	mov	fp, r1
 8013176:	9b00      	ldr	r3, [sp, #0]
 8013178:	429e      	cmp	r6, r3
 801317a:	dc01      	bgt.n	8013180 <__kernel_rem_pio2+0x4c0>
 801317c:	42ae      	cmp	r6, r5
 801317e:	dde9      	ble.n	8013154 <__kernel_rem_pio2+0x494>
 8013180:	ab48      	add	r3, sp, #288	@ 0x120
 8013182:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013186:	e9c5 ab00 	strd	sl, fp, [r5]
 801318a:	3c01      	subs	r4, #1
 801318c:	e6fd      	b.n	8012f8a <__kernel_rem_pio2+0x2ca>
 801318e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8013190:	2b02      	cmp	r3, #2
 8013192:	dc0b      	bgt.n	80131ac <__kernel_rem_pio2+0x4ec>
 8013194:	2b00      	cmp	r3, #0
 8013196:	dc35      	bgt.n	8013204 <__kernel_rem_pio2+0x544>
 8013198:	d059      	beq.n	801324e <__kernel_rem_pio2+0x58e>
 801319a:	9b02      	ldr	r3, [sp, #8]
 801319c:	f003 0007 	and.w	r0, r3, #7
 80131a0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80131a4:	ecbd 8b02 	vpop	{d8}
 80131a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ac:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80131ae:	2b03      	cmp	r3, #3
 80131b0:	d1f3      	bne.n	801319a <__kernel_rem_pio2+0x4da>
 80131b2:	9b05      	ldr	r3, [sp, #20]
 80131b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80131b8:	eb0d 0403 	add.w	r4, sp, r3
 80131bc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80131c0:	4625      	mov	r5, r4
 80131c2:	46c2      	mov	sl, r8
 80131c4:	f1ba 0f00 	cmp.w	sl, #0
 80131c8:	dc69      	bgt.n	801329e <__kernel_rem_pio2+0x5de>
 80131ca:	4645      	mov	r5, r8
 80131cc:	2d01      	cmp	r5, #1
 80131ce:	f300 8087 	bgt.w	80132e0 <__kernel_rem_pio2+0x620>
 80131d2:	9c05      	ldr	r4, [sp, #20]
 80131d4:	ab48      	add	r3, sp, #288	@ 0x120
 80131d6:	441c      	add	r4, r3
 80131d8:	2000      	movs	r0, #0
 80131da:	2100      	movs	r1, #0
 80131dc:	f1b8 0f01 	cmp.w	r8, #1
 80131e0:	f300 809c 	bgt.w	801331c <__kernel_rem_pio2+0x65c>
 80131e4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80131e8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80131ec:	f1b9 0f00 	cmp.w	r9, #0
 80131f0:	f040 80a6 	bne.w	8013340 <__kernel_rem_pio2+0x680>
 80131f4:	9b04      	ldr	r3, [sp, #16]
 80131f6:	e9c3 5600 	strd	r5, r6, [r3]
 80131fa:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80131fe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013202:	e7ca      	b.n	801319a <__kernel_rem_pio2+0x4da>
 8013204:	9d05      	ldr	r5, [sp, #20]
 8013206:	ab48      	add	r3, sp, #288	@ 0x120
 8013208:	441d      	add	r5, r3
 801320a:	4644      	mov	r4, r8
 801320c:	2000      	movs	r0, #0
 801320e:	2100      	movs	r1, #0
 8013210:	2c00      	cmp	r4, #0
 8013212:	da35      	bge.n	8013280 <__kernel_rem_pio2+0x5c0>
 8013214:	f1b9 0f00 	cmp.w	r9, #0
 8013218:	d038      	beq.n	801328c <__kernel_rem_pio2+0x5cc>
 801321a:	4602      	mov	r2, r0
 801321c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013220:	9c04      	ldr	r4, [sp, #16]
 8013222:	e9c4 2300 	strd	r2, r3, [r4]
 8013226:	4602      	mov	r2, r0
 8013228:	460b      	mov	r3, r1
 801322a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801322e:	f7ec fff7 	bl	8000220 <__aeabi_dsub>
 8013232:	ad4a      	add	r5, sp, #296	@ 0x128
 8013234:	2401      	movs	r4, #1
 8013236:	45a0      	cmp	r8, r4
 8013238:	da2b      	bge.n	8013292 <__kernel_rem_pio2+0x5d2>
 801323a:	f1b9 0f00 	cmp.w	r9, #0
 801323e:	d002      	beq.n	8013246 <__kernel_rem_pio2+0x586>
 8013240:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013244:	4619      	mov	r1, r3
 8013246:	9b04      	ldr	r3, [sp, #16]
 8013248:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801324c:	e7a5      	b.n	801319a <__kernel_rem_pio2+0x4da>
 801324e:	9c05      	ldr	r4, [sp, #20]
 8013250:	ab48      	add	r3, sp, #288	@ 0x120
 8013252:	441c      	add	r4, r3
 8013254:	2000      	movs	r0, #0
 8013256:	2100      	movs	r1, #0
 8013258:	f1b8 0f00 	cmp.w	r8, #0
 801325c:	da09      	bge.n	8013272 <__kernel_rem_pio2+0x5b2>
 801325e:	f1b9 0f00 	cmp.w	r9, #0
 8013262:	d002      	beq.n	801326a <__kernel_rem_pio2+0x5aa>
 8013264:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013268:	4619      	mov	r1, r3
 801326a:	9b04      	ldr	r3, [sp, #16]
 801326c:	e9c3 0100 	strd	r0, r1, [r3]
 8013270:	e793      	b.n	801319a <__kernel_rem_pio2+0x4da>
 8013272:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013276:	f7ec ffd5 	bl	8000224 <__adddf3>
 801327a:	f108 38ff 	add.w	r8, r8, #4294967295
 801327e:	e7eb      	b.n	8013258 <__kernel_rem_pio2+0x598>
 8013280:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8013284:	f7ec ffce 	bl	8000224 <__adddf3>
 8013288:	3c01      	subs	r4, #1
 801328a:	e7c1      	b.n	8013210 <__kernel_rem_pio2+0x550>
 801328c:	4602      	mov	r2, r0
 801328e:	460b      	mov	r3, r1
 8013290:	e7c6      	b.n	8013220 <__kernel_rem_pio2+0x560>
 8013292:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8013296:	f7ec ffc5 	bl	8000224 <__adddf3>
 801329a:	3401      	adds	r4, #1
 801329c:	e7cb      	b.n	8013236 <__kernel_rem_pio2+0x576>
 801329e:	ed35 7b02 	vldmdb	r5!, {d7}
 80132a2:	ed8d 7b00 	vstr	d7, [sp]
 80132a6:	ed95 7b02 	vldr	d7, [r5, #8]
 80132aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80132ae:	ec53 2b17 	vmov	r2, r3, d7
 80132b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80132b6:	f7ec ffb5 	bl	8000224 <__adddf3>
 80132ba:	4602      	mov	r2, r0
 80132bc:	460b      	mov	r3, r1
 80132be:	4606      	mov	r6, r0
 80132c0:	460f      	mov	r7, r1
 80132c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80132c6:	f7ec ffab 	bl	8000220 <__aeabi_dsub>
 80132ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80132ce:	f7ec ffa9 	bl	8000224 <__adddf3>
 80132d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80132d6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80132da:	e9c5 6700 	strd	r6, r7, [r5]
 80132de:	e771      	b.n	80131c4 <__kernel_rem_pio2+0x504>
 80132e0:	ed34 7b02 	vldmdb	r4!, {d7}
 80132e4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80132e8:	ec51 0b17 	vmov	r0, r1, d7
 80132ec:	4652      	mov	r2, sl
 80132ee:	465b      	mov	r3, fp
 80132f0:	ed8d 7b00 	vstr	d7, [sp]
 80132f4:	f7ec ff96 	bl	8000224 <__adddf3>
 80132f8:	4602      	mov	r2, r0
 80132fa:	460b      	mov	r3, r1
 80132fc:	4606      	mov	r6, r0
 80132fe:	460f      	mov	r7, r1
 8013300:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013304:	f7ec ff8c 	bl	8000220 <__aeabi_dsub>
 8013308:	4652      	mov	r2, sl
 801330a:	465b      	mov	r3, fp
 801330c:	f7ec ff8a 	bl	8000224 <__adddf3>
 8013310:	3d01      	subs	r5, #1
 8013312:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013316:	e9c4 6700 	strd	r6, r7, [r4]
 801331a:	e757      	b.n	80131cc <__kernel_rem_pio2+0x50c>
 801331c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013320:	f7ec ff80 	bl	8000224 <__adddf3>
 8013324:	f108 38ff 	add.w	r8, r8, #4294967295
 8013328:	e758      	b.n	80131dc <__kernel_rem_pio2+0x51c>
 801332a:	bf00      	nop
 801332c:	f3af 8000 	nop.w
	...
 8013338:	41700000 	.word	0x41700000
 801333c:	3e700000 	.word	0x3e700000
 8013340:	9b04      	ldr	r3, [sp, #16]
 8013342:	9a04      	ldr	r2, [sp, #16]
 8013344:	601d      	str	r5, [r3, #0]
 8013346:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 801334a:	605c      	str	r4, [r3, #4]
 801334c:	609f      	str	r7, [r3, #8]
 801334e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8013352:	60d3      	str	r3, [r2, #12]
 8013354:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013358:	6110      	str	r0, [r2, #16]
 801335a:	6153      	str	r3, [r2, #20]
 801335c:	e71d      	b.n	801319a <__kernel_rem_pio2+0x4da>
 801335e:	bf00      	nop

08013360 <__kernel_rem_pio2f>:
 8013360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013364:	ed2d 8b04 	vpush	{d8-d9}
 8013368:	b0d9      	sub	sp, #356	@ 0x164
 801336a:	4690      	mov	r8, r2
 801336c:	9001      	str	r0, [sp, #4]
 801336e:	4ab6      	ldr	r2, [pc, #728]	@ (8013648 <__kernel_rem_pio2f+0x2e8>)
 8013370:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8013372:	f118 0f04 	cmn.w	r8, #4
 8013376:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801337a:	460f      	mov	r7, r1
 801337c:	f103 3bff 	add.w	fp, r3, #4294967295
 8013380:	db26      	blt.n	80133d0 <__kernel_rem_pio2f+0x70>
 8013382:	f1b8 0203 	subs.w	r2, r8, #3
 8013386:	bf48      	it	mi
 8013388:	f108 0204 	addmi.w	r2, r8, #4
 801338c:	10d2      	asrs	r2, r2, #3
 801338e:	1c55      	adds	r5, r2, #1
 8013390:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013392:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8013658 <__kernel_rem_pio2f+0x2f8>
 8013396:	00e8      	lsls	r0, r5, #3
 8013398:	eba2 060b 	sub.w	r6, r2, fp
 801339c:	9002      	str	r0, [sp, #8]
 801339e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80133a2:	eb0a 0c0b 	add.w	ip, sl, fp
 80133a6:	ac1c      	add	r4, sp, #112	@ 0x70
 80133a8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80133ac:	2000      	movs	r0, #0
 80133ae:	4560      	cmp	r0, ip
 80133b0:	dd10      	ble.n	80133d4 <__kernel_rem_pio2f+0x74>
 80133b2:	a91c      	add	r1, sp, #112	@ 0x70
 80133b4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80133b8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80133bc:	2600      	movs	r6, #0
 80133be:	4556      	cmp	r6, sl
 80133c0:	dc24      	bgt.n	801340c <__kernel_rem_pio2f+0xac>
 80133c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80133c6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8013658 <__kernel_rem_pio2f+0x2f8>
 80133ca:	4684      	mov	ip, r0
 80133cc:	2400      	movs	r4, #0
 80133ce:	e016      	b.n	80133fe <__kernel_rem_pio2f+0x9e>
 80133d0:	2200      	movs	r2, #0
 80133d2:	e7dc      	b.n	801338e <__kernel_rem_pio2f+0x2e>
 80133d4:	42c6      	cmn	r6, r0
 80133d6:	bf5d      	ittte	pl
 80133d8:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 80133dc:	ee07 1a90 	vmovpl	s15, r1
 80133e0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80133e4:	eef0 7a47 	vmovmi.f32	s15, s14
 80133e8:	ece4 7a01 	vstmia	r4!, {s15}
 80133ec:	3001      	adds	r0, #1
 80133ee:	e7de      	b.n	80133ae <__kernel_rem_pio2f+0x4e>
 80133f0:	ecfe 6a01 	vldmia	lr!, {s13}
 80133f4:	ed3c 7a01 	vldmdb	ip!, {s14}
 80133f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80133fc:	3401      	adds	r4, #1
 80133fe:	455c      	cmp	r4, fp
 8013400:	ddf6      	ble.n	80133f0 <__kernel_rem_pio2f+0x90>
 8013402:	ece9 7a01 	vstmia	r9!, {s15}
 8013406:	3601      	adds	r6, #1
 8013408:	3004      	adds	r0, #4
 801340a:	e7d8      	b.n	80133be <__kernel_rem_pio2f+0x5e>
 801340c:	a908      	add	r1, sp, #32
 801340e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013412:	9104      	str	r1, [sp, #16]
 8013414:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013416:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8013654 <__kernel_rem_pio2f+0x2f4>
 801341a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8013650 <__kernel_rem_pio2f+0x2f0>
 801341e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013422:	9203      	str	r2, [sp, #12]
 8013424:	4654      	mov	r4, sl
 8013426:	00a2      	lsls	r2, r4, #2
 8013428:	9205      	str	r2, [sp, #20]
 801342a:	aa58      	add	r2, sp, #352	@ 0x160
 801342c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8013430:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8013434:	a944      	add	r1, sp, #272	@ 0x110
 8013436:	aa08      	add	r2, sp, #32
 8013438:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801343c:	4694      	mov	ip, r2
 801343e:	4626      	mov	r6, r4
 8013440:	2e00      	cmp	r6, #0
 8013442:	dc4c      	bgt.n	80134de <__kernel_rem_pio2f+0x17e>
 8013444:	4628      	mov	r0, r5
 8013446:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801344a:	f7ff fbd3 	bl	8012bf4 <scalbnf>
 801344e:	eeb0 8a40 	vmov.f32	s16, s0
 8013452:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8013456:	ee28 0a00 	vmul.f32	s0, s16, s0
 801345a:	f000 fa65 	bl	8013928 <floorf>
 801345e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8013462:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013466:	2d00      	cmp	r5, #0
 8013468:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801346c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8013470:	ee17 9a90 	vmov	r9, s15
 8013474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013478:	ee38 8a67 	vsub.f32	s16, s16, s15
 801347c:	dd41      	ble.n	8013502 <__kernel_rem_pio2f+0x1a2>
 801347e:	f104 3cff 	add.w	ip, r4, #4294967295
 8013482:	a908      	add	r1, sp, #32
 8013484:	f1c5 0e08 	rsb	lr, r5, #8
 8013488:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801348c:	fa46 f00e 	asr.w	r0, r6, lr
 8013490:	4481      	add	r9, r0
 8013492:	fa00 f00e 	lsl.w	r0, r0, lr
 8013496:	1a36      	subs	r6, r6, r0
 8013498:	f1c5 0007 	rsb	r0, r5, #7
 801349c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80134a0:	4106      	asrs	r6, r0
 80134a2:	2e00      	cmp	r6, #0
 80134a4:	dd3c      	ble.n	8013520 <__kernel_rem_pio2f+0x1c0>
 80134a6:	f04f 0e00 	mov.w	lr, #0
 80134aa:	f109 0901 	add.w	r9, r9, #1
 80134ae:	4670      	mov	r0, lr
 80134b0:	4574      	cmp	r4, lr
 80134b2:	dc68      	bgt.n	8013586 <__kernel_rem_pio2f+0x226>
 80134b4:	2d00      	cmp	r5, #0
 80134b6:	dd03      	ble.n	80134c0 <__kernel_rem_pio2f+0x160>
 80134b8:	2d01      	cmp	r5, #1
 80134ba:	d074      	beq.n	80135a6 <__kernel_rem_pio2f+0x246>
 80134bc:	2d02      	cmp	r5, #2
 80134be:	d07d      	beq.n	80135bc <__kernel_rem_pio2f+0x25c>
 80134c0:	2e02      	cmp	r6, #2
 80134c2:	d12d      	bne.n	8013520 <__kernel_rem_pio2f+0x1c0>
 80134c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80134c8:	ee30 8a48 	vsub.f32	s16, s0, s16
 80134cc:	b340      	cbz	r0, 8013520 <__kernel_rem_pio2f+0x1c0>
 80134ce:	4628      	mov	r0, r5
 80134d0:	9306      	str	r3, [sp, #24]
 80134d2:	f7ff fb8f 	bl	8012bf4 <scalbnf>
 80134d6:	9b06      	ldr	r3, [sp, #24]
 80134d8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80134dc:	e020      	b.n	8013520 <__kernel_rem_pio2f+0x1c0>
 80134de:	ee60 7a28 	vmul.f32	s15, s0, s17
 80134e2:	3e01      	subs	r6, #1
 80134e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80134e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134ec:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80134f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80134f4:	ecac 0a01 	vstmia	ip!, {s0}
 80134f8:	ed30 0a01 	vldmdb	r0!, {s0}
 80134fc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013500:	e79e      	b.n	8013440 <__kernel_rem_pio2f+0xe0>
 8013502:	d105      	bne.n	8013510 <__kernel_rem_pio2f+0x1b0>
 8013504:	1e60      	subs	r0, r4, #1
 8013506:	a908      	add	r1, sp, #32
 8013508:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801350c:	11f6      	asrs	r6, r6, #7
 801350e:	e7c8      	b.n	80134a2 <__kernel_rem_pio2f+0x142>
 8013510:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013514:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801351c:	da31      	bge.n	8013582 <__kernel_rem_pio2f+0x222>
 801351e:	2600      	movs	r6, #0
 8013520:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013528:	f040 8098 	bne.w	801365c <__kernel_rem_pio2f+0x2fc>
 801352c:	1e60      	subs	r0, r4, #1
 801352e:	2200      	movs	r2, #0
 8013530:	4550      	cmp	r0, sl
 8013532:	da4b      	bge.n	80135cc <__kernel_rem_pio2f+0x26c>
 8013534:	2a00      	cmp	r2, #0
 8013536:	d065      	beq.n	8013604 <__kernel_rem_pio2f+0x2a4>
 8013538:	3c01      	subs	r4, #1
 801353a:	ab08      	add	r3, sp, #32
 801353c:	3d08      	subs	r5, #8
 801353e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8013542:	2b00      	cmp	r3, #0
 8013544:	d0f8      	beq.n	8013538 <__kernel_rem_pio2f+0x1d8>
 8013546:	4628      	mov	r0, r5
 8013548:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801354c:	f7ff fb52 	bl	8012bf4 <scalbnf>
 8013550:	1c63      	adds	r3, r4, #1
 8013552:	aa44      	add	r2, sp, #272	@ 0x110
 8013554:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8013654 <__kernel_rem_pio2f+0x2f4>
 8013558:	0099      	lsls	r1, r3, #2
 801355a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801355e:	4623      	mov	r3, r4
 8013560:	2b00      	cmp	r3, #0
 8013562:	f280 80a9 	bge.w	80136b8 <__kernel_rem_pio2f+0x358>
 8013566:	4623      	mov	r3, r4
 8013568:	2b00      	cmp	r3, #0
 801356a:	f2c0 80c7 	blt.w	80136fc <__kernel_rem_pio2f+0x39c>
 801356e:	aa44      	add	r2, sp, #272	@ 0x110
 8013570:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8013574:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801364c <__kernel_rem_pio2f+0x2ec>
 8013578:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8013658 <__kernel_rem_pio2f+0x2f8>
 801357c:	2000      	movs	r0, #0
 801357e:	1ae2      	subs	r2, r4, r3
 8013580:	e0b1      	b.n	80136e6 <__kernel_rem_pio2f+0x386>
 8013582:	2602      	movs	r6, #2
 8013584:	e78f      	b.n	80134a6 <__kernel_rem_pio2f+0x146>
 8013586:	f852 1b04 	ldr.w	r1, [r2], #4
 801358a:	b948      	cbnz	r0, 80135a0 <__kernel_rem_pio2f+0x240>
 801358c:	b121      	cbz	r1, 8013598 <__kernel_rem_pio2f+0x238>
 801358e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8013592:	f842 1c04 	str.w	r1, [r2, #-4]
 8013596:	2101      	movs	r1, #1
 8013598:	f10e 0e01 	add.w	lr, lr, #1
 801359c:	4608      	mov	r0, r1
 801359e:	e787      	b.n	80134b0 <__kernel_rem_pio2f+0x150>
 80135a0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80135a4:	e7f5      	b.n	8013592 <__kernel_rem_pio2f+0x232>
 80135a6:	f104 3cff 	add.w	ip, r4, #4294967295
 80135aa:	aa08      	add	r2, sp, #32
 80135ac:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80135b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80135b4:	a908      	add	r1, sp, #32
 80135b6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80135ba:	e781      	b.n	80134c0 <__kernel_rem_pio2f+0x160>
 80135bc:	f104 3cff 	add.w	ip, r4, #4294967295
 80135c0:	aa08      	add	r2, sp, #32
 80135c2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80135c6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80135ca:	e7f3      	b.n	80135b4 <__kernel_rem_pio2f+0x254>
 80135cc:	a908      	add	r1, sp, #32
 80135ce:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80135d2:	3801      	subs	r0, #1
 80135d4:	430a      	orrs	r2, r1
 80135d6:	e7ab      	b.n	8013530 <__kernel_rem_pio2f+0x1d0>
 80135d8:	3201      	adds	r2, #1
 80135da:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80135de:	2e00      	cmp	r6, #0
 80135e0:	d0fa      	beq.n	80135d8 <__kernel_rem_pio2f+0x278>
 80135e2:	9905      	ldr	r1, [sp, #20]
 80135e4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80135e8:	eb0d 0001 	add.w	r0, sp, r1
 80135ec:	18e6      	adds	r6, r4, r3
 80135ee:	a91c      	add	r1, sp, #112	@ 0x70
 80135f0:	f104 0c01 	add.w	ip, r4, #1
 80135f4:	384c      	subs	r0, #76	@ 0x4c
 80135f6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80135fa:	4422      	add	r2, r4
 80135fc:	4562      	cmp	r2, ip
 80135fe:	da04      	bge.n	801360a <__kernel_rem_pio2f+0x2aa>
 8013600:	4614      	mov	r4, r2
 8013602:	e710      	b.n	8013426 <__kernel_rem_pio2f+0xc6>
 8013604:	9804      	ldr	r0, [sp, #16]
 8013606:	2201      	movs	r2, #1
 8013608:	e7e7      	b.n	80135da <__kernel_rem_pio2f+0x27a>
 801360a:	9903      	ldr	r1, [sp, #12]
 801360c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013610:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8013614:	9105      	str	r1, [sp, #20]
 8013616:	ee07 1a90 	vmov	s15, r1
 801361a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801361e:	2400      	movs	r4, #0
 8013620:	ece6 7a01 	vstmia	r6!, {s15}
 8013624:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8013658 <__kernel_rem_pio2f+0x2f8>
 8013628:	46b1      	mov	r9, r6
 801362a:	455c      	cmp	r4, fp
 801362c:	dd04      	ble.n	8013638 <__kernel_rem_pio2f+0x2d8>
 801362e:	ece0 7a01 	vstmia	r0!, {s15}
 8013632:	f10c 0c01 	add.w	ip, ip, #1
 8013636:	e7e1      	b.n	80135fc <__kernel_rem_pio2f+0x29c>
 8013638:	ecfe 6a01 	vldmia	lr!, {s13}
 801363c:	ed39 7a01 	vldmdb	r9!, {s14}
 8013640:	3401      	adds	r4, #1
 8013642:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013646:	e7f0      	b.n	801362a <__kernel_rem_pio2f+0x2ca>
 8013648:	0801401c 	.word	0x0801401c
 801364c:	08013ff0 	.word	0x08013ff0
 8013650:	43800000 	.word	0x43800000
 8013654:	3b800000 	.word	0x3b800000
 8013658:	00000000 	.word	0x00000000
 801365c:	9b02      	ldr	r3, [sp, #8]
 801365e:	eeb0 0a48 	vmov.f32	s0, s16
 8013662:	eba3 0008 	sub.w	r0, r3, r8
 8013666:	f7ff fac5 	bl	8012bf4 <scalbnf>
 801366a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8013650 <__kernel_rem_pio2f+0x2f0>
 801366e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013676:	db19      	blt.n	80136ac <__kernel_rem_pio2f+0x34c>
 8013678:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8013654 <__kernel_rem_pio2f+0x2f4>
 801367c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013680:	aa08      	add	r2, sp, #32
 8013682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013686:	3508      	adds	r5, #8
 8013688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801368c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013690:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013694:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013698:	ee10 3a10 	vmov	r3, s0
 801369c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80136a0:	ee17 3a90 	vmov	r3, s15
 80136a4:	3401      	adds	r4, #1
 80136a6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80136aa:	e74c      	b.n	8013546 <__kernel_rem_pio2f+0x1e6>
 80136ac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80136b0:	aa08      	add	r2, sp, #32
 80136b2:	ee10 3a10 	vmov	r3, s0
 80136b6:	e7f6      	b.n	80136a6 <__kernel_rem_pio2f+0x346>
 80136b8:	a808      	add	r0, sp, #32
 80136ba:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80136be:	9001      	str	r0, [sp, #4]
 80136c0:	ee07 0a90 	vmov	s15, r0
 80136c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136c8:	3b01      	subs	r3, #1
 80136ca:	ee67 7a80 	vmul.f32	s15, s15, s0
 80136ce:	ee20 0a07 	vmul.f32	s0, s0, s14
 80136d2:	ed62 7a01 	vstmdb	r2!, {s15}
 80136d6:	e743      	b.n	8013560 <__kernel_rem_pio2f+0x200>
 80136d8:	ecfc 6a01 	vldmia	ip!, {s13}
 80136dc:	ecb5 7a01 	vldmia	r5!, {s14}
 80136e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80136e4:	3001      	adds	r0, #1
 80136e6:	4550      	cmp	r0, sl
 80136e8:	dc01      	bgt.n	80136ee <__kernel_rem_pio2f+0x38e>
 80136ea:	4290      	cmp	r0, r2
 80136ec:	ddf4      	ble.n	80136d8 <__kernel_rem_pio2f+0x378>
 80136ee:	a858      	add	r0, sp, #352	@ 0x160
 80136f0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80136f4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80136f8:	3b01      	subs	r3, #1
 80136fa:	e735      	b.n	8013568 <__kernel_rem_pio2f+0x208>
 80136fc:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80136fe:	2b02      	cmp	r3, #2
 8013700:	dc09      	bgt.n	8013716 <__kernel_rem_pio2f+0x3b6>
 8013702:	2b00      	cmp	r3, #0
 8013704:	dc27      	bgt.n	8013756 <__kernel_rem_pio2f+0x3f6>
 8013706:	d040      	beq.n	801378a <__kernel_rem_pio2f+0x42a>
 8013708:	f009 0007 	and.w	r0, r9, #7
 801370c:	b059      	add	sp, #356	@ 0x164
 801370e:	ecbd 8b04 	vpop	{d8-d9}
 8013712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013716:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8013718:	2b03      	cmp	r3, #3
 801371a:	d1f5      	bne.n	8013708 <__kernel_rem_pio2f+0x3a8>
 801371c:	aa30      	add	r2, sp, #192	@ 0xc0
 801371e:	1f0b      	subs	r3, r1, #4
 8013720:	4413      	add	r3, r2
 8013722:	461a      	mov	r2, r3
 8013724:	4620      	mov	r0, r4
 8013726:	2800      	cmp	r0, #0
 8013728:	dc50      	bgt.n	80137cc <__kernel_rem_pio2f+0x46c>
 801372a:	4622      	mov	r2, r4
 801372c:	2a01      	cmp	r2, #1
 801372e:	dc5d      	bgt.n	80137ec <__kernel_rem_pio2f+0x48c>
 8013730:	ab30      	add	r3, sp, #192	@ 0xc0
 8013732:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8013658 <__kernel_rem_pio2f+0x2f8>
 8013736:	440b      	add	r3, r1
 8013738:	2c01      	cmp	r4, #1
 801373a:	dc67      	bgt.n	801380c <__kernel_rem_pio2f+0x4ac>
 801373c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8013740:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8013744:	2e00      	cmp	r6, #0
 8013746:	d167      	bne.n	8013818 <__kernel_rem_pio2f+0x4b8>
 8013748:	edc7 6a00 	vstr	s13, [r7]
 801374c:	ed87 7a01 	vstr	s14, [r7, #4]
 8013750:	edc7 7a02 	vstr	s15, [r7, #8]
 8013754:	e7d8      	b.n	8013708 <__kernel_rem_pio2f+0x3a8>
 8013756:	ab30      	add	r3, sp, #192	@ 0xc0
 8013758:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8013658 <__kernel_rem_pio2f+0x2f8>
 801375c:	440b      	add	r3, r1
 801375e:	4622      	mov	r2, r4
 8013760:	2a00      	cmp	r2, #0
 8013762:	da24      	bge.n	80137ae <__kernel_rem_pio2f+0x44e>
 8013764:	b34e      	cbz	r6, 80137ba <__kernel_rem_pio2f+0x45a>
 8013766:	eef1 7a47 	vneg.f32	s15, s14
 801376a:	edc7 7a00 	vstr	s15, [r7]
 801376e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8013772:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013776:	aa31      	add	r2, sp, #196	@ 0xc4
 8013778:	2301      	movs	r3, #1
 801377a:	429c      	cmp	r4, r3
 801377c:	da20      	bge.n	80137c0 <__kernel_rem_pio2f+0x460>
 801377e:	b10e      	cbz	r6, 8013784 <__kernel_rem_pio2f+0x424>
 8013780:	eef1 7a67 	vneg.f32	s15, s15
 8013784:	edc7 7a01 	vstr	s15, [r7, #4]
 8013788:	e7be      	b.n	8013708 <__kernel_rem_pio2f+0x3a8>
 801378a:	ab30      	add	r3, sp, #192	@ 0xc0
 801378c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8013658 <__kernel_rem_pio2f+0x2f8>
 8013790:	440b      	add	r3, r1
 8013792:	2c00      	cmp	r4, #0
 8013794:	da05      	bge.n	80137a2 <__kernel_rem_pio2f+0x442>
 8013796:	b10e      	cbz	r6, 801379c <__kernel_rem_pio2f+0x43c>
 8013798:	eef1 7a67 	vneg.f32	s15, s15
 801379c:	edc7 7a00 	vstr	s15, [r7]
 80137a0:	e7b2      	b.n	8013708 <__kernel_rem_pio2f+0x3a8>
 80137a2:	ed33 7a01 	vldmdb	r3!, {s14}
 80137a6:	3c01      	subs	r4, #1
 80137a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80137ac:	e7f1      	b.n	8013792 <__kernel_rem_pio2f+0x432>
 80137ae:	ed73 7a01 	vldmdb	r3!, {s15}
 80137b2:	3a01      	subs	r2, #1
 80137b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80137b8:	e7d2      	b.n	8013760 <__kernel_rem_pio2f+0x400>
 80137ba:	eef0 7a47 	vmov.f32	s15, s14
 80137be:	e7d4      	b.n	801376a <__kernel_rem_pio2f+0x40a>
 80137c0:	ecb2 7a01 	vldmia	r2!, {s14}
 80137c4:	3301      	adds	r3, #1
 80137c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80137ca:	e7d6      	b.n	801377a <__kernel_rem_pio2f+0x41a>
 80137cc:	ed72 7a01 	vldmdb	r2!, {s15}
 80137d0:	edd2 6a01 	vldr	s13, [r2, #4]
 80137d4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80137d8:	3801      	subs	r0, #1
 80137da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80137de:	ed82 7a00 	vstr	s14, [r2]
 80137e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80137e6:	edc2 7a01 	vstr	s15, [r2, #4]
 80137ea:	e79c      	b.n	8013726 <__kernel_rem_pio2f+0x3c6>
 80137ec:	ed73 7a01 	vldmdb	r3!, {s15}
 80137f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80137f4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80137f8:	3a01      	subs	r2, #1
 80137fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80137fe:	ed83 7a00 	vstr	s14, [r3]
 8013802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013806:	edc3 7a01 	vstr	s15, [r3, #4]
 801380a:	e78f      	b.n	801372c <__kernel_rem_pio2f+0x3cc>
 801380c:	ed33 7a01 	vldmdb	r3!, {s14}
 8013810:	3c01      	subs	r4, #1
 8013812:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013816:	e78f      	b.n	8013738 <__kernel_rem_pio2f+0x3d8>
 8013818:	eef1 6a66 	vneg.f32	s13, s13
 801381c:	eeb1 7a47 	vneg.f32	s14, s14
 8013820:	edc7 6a00 	vstr	s13, [r7]
 8013824:	ed87 7a01 	vstr	s14, [r7, #4]
 8013828:	eef1 7a67 	vneg.f32	s15, s15
 801382c:	e790      	b.n	8013750 <__kernel_rem_pio2f+0x3f0>
 801382e:	bf00      	nop

08013830 <floor>:
 8013830:	ec51 0b10 	vmov	r0, r1, d0
 8013834:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801383c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8013840:	2e13      	cmp	r6, #19
 8013842:	460c      	mov	r4, r1
 8013844:	4605      	mov	r5, r0
 8013846:	4680      	mov	r8, r0
 8013848:	dc34      	bgt.n	80138b4 <floor+0x84>
 801384a:	2e00      	cmp	r6, #0
 801384c:	da17      	bge.n	801387e <floor+0x4e>
 801384e:	a332      	add	r3, pc, #200	@ (adr r3, 8013918 <floor+0xe8>)
 8013850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013854:	f7ec fce6 	bl	8000224 <__adddf3>
 8013858:	2200      	movs	r2, #0
 801385a:	2300      	movs	r3, #0
 801385c:	f7ed f928 	bl	8000ab0 <__aeabi_dcmpgt>
 8013860:	b150      	cbz	r0, 8013878 <floor+0x48>
 8013862:	2c00      	cmp	r4, #0
 8013864:	da55      	bge.n	8013912 <floor+0xe2>
 8013866:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801386a:	432c      	orrs	r4, r5
 801386c:	2500      	movs	r5, #0
 801386e:	42ac      	cmp	r4, r5
 8013870:	4c2b      	ldr	r4, [pc, #172]	@ (8013920 <floor+0xf0>)
 8013872:	bf08      	it	eq
 8013874:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8013878:	4621      	mov	r1, r4
 801387a:	4628      	mov	r0, r5
 801387c:	e023      	b.n	80138c6 <floor+0x96>
 801387e:	4f29      	ldr	r7, [pc, #164]	@ (8013924 <floor+0xf4>)
 8013880:	4137      	asrs	r7, r6
 8013882:	ea01 0307 	and.w	r3, r1, r7
 8013886:	4303      	orrs	r3, r0
 8013888:	d01d      	beq.n	80138c6 <floor+0x96>
 801388a:	a323      	add	r3, pc, #140	@ (adr r3, 8013918 <floor+0xe8>)
 801388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013890:	f7ec fcc8 	bl	8000224 <__adddf3>
 8013894:	2200      	movs	r2, #0
 8013896:	2300      	movs	r3, #0
 8013898:	f7ed f90a 	bl	8000ab0 <__aeabi_dcmpgt>
 801389c:	2800      	cmp	r0, #0
 801389e:	d0eb      	beq.n	8013878 <floor+0x48>
 80138a0:	2c00      	cmp	r4, #0
 80138a2:	bfbe      	ittt	lt
 80138a4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80138a8:	4133      	asrlt	r3, r6
 80138aa:	18e4      	addlt	r4, r4, r3
 80138ac:	ea24 0407 	bic.w	r4, r4, r7
 80138b0:	2500      	movs	r5, #0
 80138b2:	e7e1      	b.n	8013878 <floor+0x48>
 80138b4:	2e33      	cmp	r6, #51	@ 0x33
 80138b6:	dd0a      	ble.n	80138ce <floor+0x9e>
 80138b8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80138bc:	d103      	bne.n	80138c6 <floor+0x96>
 80138be:	4602      	mov	r2, r0
 80138c0:	460b      	mov	r3, r1
 80138c2:	f7ec fcaf 	bl	8000224 <__adddf3>
 80138c6:	ec41 0b10 	vmov	d0, r0, r1
 80138ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138ce:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80138d2:	f04f 37ff 	mov.w	r7, #4294967295
 80138d6:	40df      	lsrs	r7, r3
 80138d8:	4207      	tst	r7, r0
 80138da:	d0f4      	beq.n	80138c6 <floor+0x96>
 80138dc:	a30e      	add	r3, pc, #56	@ (adr r3, 8013918 <floor+0xe8>)
 80138de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e2:	f7ec fc9f 	bl	8000224 <__adddf3>
 80138e6:	2200      	movs	r2, #0
 80138e8:	2300      	movs	r3, #0
 80138ea:	f7ed f8e1 	bl	8000ab0 <__aeabi_dcmpgt>
 80138ee:	2800      	cmp	r0, #0
 80138f0:	d0c2      	beq.n	8013878 <floor+0x48>
 80138f2:	2c00      	cmp	r4, #0
 80138f4:	da0a      	bge.n	801390c <floor+0xdc>
 80138f6:	2e14      	cmp	r6, #20
 80138f8:	d101      	bne.n	80138fe <floor+0xce>
 80138fa:	3401      	adds	r4, #1
 80138fc:	e006      	b.n	801390c <floor+0xdc>
 80138fe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013902:	2301      	movs	r3, #1
 8013904:	40b3      	lsls	r3, r6
 8013906:	441d      	add	r5, r3
 8013908:	4545      	cmp	r5, r8
 801390a:	d3f6      	bcc.n	80138fa <floor+0xca>
 801390c:	ea25 0507 	bic.w	r5, r5, r7
 8013910:	e7b2      	b.n	8013878 <floor+0x48>
 8013912:	2500      	movs	r5, #0
 8013914:	462c      	mov	r4, r5
 8013916:	e7af      	b.n	8013878 <floor+0x48>
 8013918:	8800759c 	.word	0x8800759c
 801391c:	7e37e43c 	.word	0x7e37e43c
 8013920:	bff00000 	.word	0xbff00000
 8013924:	000fffff 	.word	0x000fffff

08013928 <floorf>:
 8013928:	ee10 3a10 	vmov	r3, s0
 801392c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013930:	3a7f      	subs	r2, #127	@ 0x7f
 8013932:	2a16      	cmp	r2, #22
 8013934:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013938:	dc2b      	bgt.n	8013992 <floorf+0x6a>
 801393a:	2a00      	cmp	r2, #0
 801393c:	da12      	bge.n	8013964 <floorf+0x3c>
 801393e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80139a4 <floorf+0x7c>
 8013942:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013946:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801394a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801394e:	dd06      	ble.n	801395e <floorf+0x36>
 8013950:	2b00      	cmp	r3, #0
 8013952:	da24      	bge.n	801399e <floorf+0x76>
 8013954:	2900      	cmp	r1, #0
 8013956:	4b14      	ldr	r3, [pc, #80]	@ (80139a8 <floorf+0x80>)
 8013958:	bf08      	it	eq
 801395a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801395e:	ee00 3a10 	vmov	s0, r3
 8013962:	4770      	bx	lr
 8013964:	4911      	ldr	r1, [pc, #68]	@ (80139ac <floorf+0x84>)
 8013966:	4111      	asrs	r1, r2
 8013968:	420b      	tst	r3, r1
 801396a:	d0fa      	beq.n	8013962 <floorf+0x3a>
 801396c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80139a4 <floorf+0x7c>
 8013970:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013974:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801397c:	ddef      	ble.n	801395e <floorf+0x36>
 801397e:	2b00      	cmp	r3, #0
 8013980:	bfbe      	ittt	lt
 8013982:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8013986:	fa40 f202 	asrlt.w	r2, r0, r2
 801398a:	189b      	addlt	r3, r3, r2
 801398c:	ea23 0301 	bic.w	r3, r3, r1
 8013990:	e7e5      	b.n	801395e <floorf+0x36>
 8013992:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013996:	d3e4      	bcc.n	8013962 <floorf+0x3a>
 8013998:	ee30 0a00 	vadd.f32	s0, s0, s0
 801399c:	4770      	bx	lr
 801399e:	2300      	movs	r3, #0
 80139a0:	e7dd      	b.n	801395e <floorf+0x36>
 80139a2:	bf00      	nop
 80139a4:	7149f2ca 	.word	0x7149f2ca
 80139a8:	bf800000 	.word	0xbf800000
 80139ac:	007fffff 	.word	0x007fffff

080139b0 <_init>:
 80139b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139b2:	bf00      	nop
 80139b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139b6:	bc08      	pop	{r3}
 80139b8:	469e      	mov	lr, r3
 80139ba:	4770      	bx	lr

080139bc <_fini>:
 80139bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139be:	bf00      	nop
 80139c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80139c2:	bc08      	pop	{r3}
 80139c4:	469e      	mov	lr, r3
 80139c6:	4770      	bx	lr
