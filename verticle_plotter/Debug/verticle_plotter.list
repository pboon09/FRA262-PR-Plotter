
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014da8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08014f80  08014f80  00015f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080155d0  080155d0  00017618  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080155d0  080155d0  000165d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080155d8  080155d8  00017618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080155d8  080155d8  000165d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080155dc  080155dc  000165dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000618  20000000  080155e0  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002254  20000618  08015bf8  00017618  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000286c  08015bf8  0001786c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017618  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cc52  00000000  00000000  00017648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055e7  00000000  00000000  0004429a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d90  00000000  00000000  00049888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001744  00000000  00000000  0004b618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dbc2  00000000  00000000  0004cd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c306  00000000  00000000  0007a91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a62c  00000000  00000000  000a6c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c1250  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000086a0  00000000  00000000  001c1294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c9934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000618 	.word	0x20000618
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08014f68 	.word	0x08014f68

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000061c 	.word	0x2000061c
 8000214:	08014f68 	.word	0x08014f68

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00b fb02 	bl	800c5e8 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f00a fbeb 	bl	800b7cc <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe71 	bl	8001e22 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3328      	adds	r3, #40	@ 0x28
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f002 faf1 	bl	8003948 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8b3a      	ldrh	r2, [r7, #24]
 8001370:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001390:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800139a:	2b00      	cmp	r3, #0
 800139c:	d15f      	bne.n	800145e <MDXX_set_range+0xda>
		if (duty == 0) {
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d115      	bne.n	80013d8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3310      	adds	r3, #16
 80013b0:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001530 <MDXX_set_range+0x1ac>
 80013b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fbed 	bl	8003b98 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3328      	adds	r3, #40	@ 0x28
 80013c2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001530 <MDXX_set_range+0x1ac>
 80013c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 fbe4 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = 0;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80013d6:	e0a6      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80013d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	dd1a      	ble.n	800141c <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3310      	adds	r3, #16
 80013ea:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001530 <MDXX_set_range+0x1ac>
 80013ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fbd0 	bl	8003b98 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3328      	adds	r3, #40	@ 0x28
 80013fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8001400:	ed97 0a02 	vldr	s0, [r7, #8]
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fbc7 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = duty;
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001412:	ee17 2a90 	vmov	r2, s15
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800141a:	e084      	b.n	8001526 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3310      	adds	r3, #16
 8001420:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001534 <MDXX_set_range+0x1b0>
 8001424:	ed97 0a02 	vldr	s0, [r7, #8]
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fbb5 	bl	8003b98 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3328      	adds	r3, #40	@ 0x28
 8001432:	edd7 7a01 	vldr	s15, [r7, #4]
 8001436:	eef0 7ae7 	vabs.f32	s15, s15
 800143a:	eef0 0a67 	vmov.f32	s1, s15
 800143e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fba8 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	eef0 7ae7 	vabs.f32	s15, s15
 8001450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001454:	ee17 2a90 	vmov	r2, s15
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145c:	e063      	b.n	8001526 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001464:	2b01      	cmp	r3, #1
 8001466:	d15e      	bne.n	8001526 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001468:	edd7 7a01 	vldr	s15, [r7, #4]
 800146c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d115      	bne.n	80014a2 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	f00b fff6 	bl	800d474 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3328      	adds	r3, #40	@ 0x28
 800148c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001530 <MDXX_set_range+0x1ac>
 8001490:	ed97 0a02 	vldr	s0, [r7, #8]
 8001494:	4618      	mov	r0, r3
 8001496:	f002 fb7f 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = 0;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e041      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd1a      	ble.n	80014e6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	f00b ffd9 	bl	800d474 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3328      	adds	r3, #40	@ 0x28
 80014c6:	edd7 0a01 	vldr	s1, [r7, #4]
 80014ca:	ed97 0a02 	vldr	s0, [r7, #8]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 fb62 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = duty;
 80014d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 2a90 	vmov	r2, s15
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e01f      	b.n	8001526 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	f00b ffbe 	bl	800d474 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3328      	adds	r3, #40	@ 0x28
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	eef0 7ae7 	vabs.f32	s15, s15
 8001504:	eef0 0a67 	vmov.f32	s1, s15
 8001508:	ed97 0a02 	vldr	s0, [r7, #8]
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fb43 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001512:	edd7 7a01 	vldr	s15, [r7, #4]
 8001516:	eef0 7ae7 	vabs.f32	s15, s15
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 2a90 	vmov	r2, s15
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00000000 	.word	0x00000000
 8001534:	42c80000 	.word	0x42c80000

08001538 <REVOLUTE_MOTOR_FFD_Init>:
	.offset = 30.07e-3,
    .c = 24.13e-3,
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	ed2d 8b02 	vpush	{d8}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001574:	f7ff f80c 	bl	8000590 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001590:	f7fe fffe 	bl	8000590 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4620      	mov	r0, r4
 800159a:	4629      	mov	r1, r5
 800159c:	f7fe fe42 	bl	8000224 <__adddf3>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015b0:	f7ff f918 	bl	80007e4 <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff faca 	bl	8000b54 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 80015c4:	ed97 7a00 	vldr	s14, [r7]
 80015c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d0:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fab8 	bl	8000b54 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb1 8a67 	vneg.f32	s16, s15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff faab 	bl	8000b54 <__aeabi_d2f>
 80015fe:	4604      	mov	r4, r0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff faa2 	bl	8000b54 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef1 8a67 	vneg.f32	s17, s15
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fa95 	bl	8000b54 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	ee02 3a10 	vmov	s4, r3
 8001630:	eef0 1a68 	vmov.f32	s3, s17
 8001634:	ee01 4a10 	vmov	s2, r4
 8001638:	eef0 0a48 	vmov.f32	s1, s16
 800163c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001640:	f000 fbef 	bl	8001e22 <mapf>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
}
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	ecbd 8b02 	vpop	{d8}
 8001654:	bdb0      	pop	{r4, r5, r7, pc}

08001656 <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	605a      	str	r2, [r3, #4]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float s){
 800167a:	b5b0      	push	{r4, r5, r7, lr}
 800167c:	ed2d 8b02 	vpush	{d8}
 8001680:	b088      	sub	sp, #32
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	ed87 0a02 	vstr	s0, [r7, #8]
 800168a:	edc7 0a01 	vstr	s1, [r7, #4]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s + motor->En->offset);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	ed93 7a01 	vldr	s14, [r3, #4]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a2:	ee17 0a90 	vmov	r0, s15
 80016a6:	f7fe ff1b 	bl	80004e0 <__aeabi_f2d>
 80016aa:	4604      	mov	r4, r0
 80016ac:	460d      	mov	r5, r1
 80016ae:	68b8      	ldr	r0, [r7, #8]
 80016b0:	f7fe ff16 	bl	80004e0 <__aeabi_f2d>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	ec43 2b10 	vmov	d0, r2, r3
 80016bc:	f011 fda0 	bl	8013200 <sin>
 80016c0:	ec53 2b10 	vmov	r2, r3, d0
 80016c4:	4620      	mov	r0, r4
 80016c6:	4629      	mov	r1, r5
 80016c8:	f7fe ff62 	bl	8000590 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4614      	mov	r4, r2
 80016d2:	461d      	mov	r5, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	ed93 7a05 	vldr	s14, [r3, #20]
 80016dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	ee17 0a90 	vmov	r0, s15
 80016e8:	f7fe fefa 	bl	80004e0 <__aeabi_f2d>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4620      	mov	r0, r4
 80016f2:	4629      	mov	r1, r5
 80016f4:	f7fe ff4c 	bl	8000590 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa28 	bl	8000b54 <__aeabi_d2f>
 8001704:	4603      	mov	r3, r0
 8001706:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->slide_rail_mass * motor->En->g * sin(q) * (motor->En->c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171c:	ee17 0a90 	vmov	r0, s15
 8001720:	f7fe fede 	bl	80004e0 <__aeabi_f2d>
 8001724:	4604      	mov	r4, r0
 8001726:	460d      	mov	r5, r1
 8001728:	68b8      	ldr	r0, [r7, #8]
 800172a:	f7fe fed9 	bl	80004e0 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	ec43 2b10 	vmov	d0, r2, r3
 8001736:	f011 fd63 	bl	8013200 <sin>
 800173a:	ec53 2b10 	vmov	r2, r3, d0
 800173e:	4620      	mov	r0, r4
 8001740:	4629      	mov	r1, r5
 8001742:	f7fe ff25 	bl	8000590 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4614      	mov	r4, r2
 800174c:	461d      	mov	r5, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fec3 	bl	80004e0 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4620      	mov	r0, r4
 8001760:	4629      	mov	r1, r5
 8001762:	f7fe ff15 	bl	8000590 <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff f9f1 	bl	8000b54 <__aeabi_d2f>
 8001772:	4603      	mov	r3, r0
 8001774:	61bb      	str	r3, [r7, #24]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001786:	f7ff f82d 	bl	80007e4 <__aeabi_ddiv>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff f9df 	bl	8000b54 <__aeabi_d2f>
 8001796:	4603      	mov	r3, r0
 8001798:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter - gravity_compensate_rail) * transfer_function;
 800179a:	ed97 7a07 	vldr	s14, [r7, #28]
 800179e:	edd7 7a06 	vldr	s15, [r7, #24]
 80017a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80017aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ae:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff f9c9 	bl	8000b54 <__aeabi_d2f>
 80017c2:	4603      	mov	r3, r0
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eeb1 8a67 	vneg.f32	s16, s15
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f9bc 	bl	8000b54 <__aeabi_d2f>
 80017dc:	4604      	mov	r4, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff f9b3 	bl	8000b54 <__aeabi_d2f>
 80017ee:	4603      	mov	r3, r0
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef1 8a67 	vneg.f32	s17, s15
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f7ff f9a6 	bl	8000b54 <__aeabi_d2f>
 8001808:	4603      	mov	r3, r0
 800180a:	ee02 3a10 	vmov	s4, r3
 800180e:	eef0 1a68 	vmov.f32	s3, s17
 8001812:	ee01 4a10 	vmov	s2, r4
 8001816:	eef0 0a48 	vmov.f32	s1, s16
 800181a:	ed97 0a04 	vldr	s0, [r7, #16]
 800181e:	f000 fb00 	bl	8001e22 <mapf>
 8001822:	eef0 7a40 	vmov.f32	s15, s0
}
 8001826:	eeb0 0a67 	vmov.f32	s0, s15
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	ecbd 8b02 	vpop	{d8}
 8001832:	bdb0      	pop	{r4, r5, r7, pc}

08001834 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	ed2d 8b02 	vpush	{d8}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001870:	f7fe fe8e 	bl	8000590 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4614      	mov	r4, r2
 800187a:	461d      	mov	r5, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800188c:	f7fe fe80 	bl	8000590 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7fe fcc4 	bl	8000224 <__adddf3>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018ac:	f7fe ff9a 	bl	80007e4 <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f94c 	bl	8000b54 <__aeabi_d2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 80018c0:	ed97 7a00 	vldr	s14, [r7]
 80018c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	f7fe fe05 	bl	80004e0 <__aeabi_f2d>
 80018d6:	a326      	add	r3, pc, #152	@ (adr r3, 8001970 <PRISMATIC_MOTOR_FFD_Compute+0x120>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe fe58 	bl	8000590 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f7ff f934 	bl	8000b54 <__aeabi_d2f>
 80018ec:	4604      	mov	r4, r0
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff f92b 	bl	8000b54 <__aeabi_d2f>
 80018fe:	4603      	mov	r3, r0
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eeb1 8a67 	vneg.f32	s16, s15
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f91e 	bl	8000b54 <__aeabi_d2f>
 8001918:	4605      	mov	r5, r0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f7ff f915 	bl	8000b54 <__aeabi_d2f>
 800192a:	4603      	mov	r3, r0
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef1 8a67 	vneg.f32	s17, s15
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f908 	bl	8000b54 <__aeabi_d2f>
 8001944:	4603      	mov	r3, r0
 8001946:	ee02 3a10 	vmov	s4, r3
 800194a:	eef0 1a68 	vmov.f32	s3, s17
 800194e:	ee01 5a10 	vmov	s2, r5
 8001952:	eef0 0a48 	vmov.f32	s1, s16
 8001956:	ee00 4a10 	vmov	s0, r4
 800195a:	f000 fa62 	bl	8001e22 <mapf>
 800195e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001962:	eeb0 0a67 	vmov.f32	s0, s15
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	ecbd 8b02 	vpop	{d8}
 800196e:	bdb0      	pop	{r4, r5, r7, pc}
 8001970:	9999999a 	.word	0x9999999a
 8001974:	3fb99999 	.word	0x3fb99999

08001978 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	605a      	str	r2, [r3, #4]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	0000      	movs	r0, r0
	...

080019a0 <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 80019a0:	b5b0      	push	{r4, r5, r7, lr}
 80019a2:	ed2d 8b02 	vpush	{d8}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80019b0:	edc7 0a01 	vstr	s1, [r7, #4]
 80019b4:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019cc:	ee17 0a90 	vmov	r0, s15
 80019d0:	f7fe fd86 	bl	80004e0 <__aeabi_f2d>
 80019d4:	4604      	mov	r4, r0
 80019d6:	460d      	mov	r5, r1
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f7fe fd81 	bl	80004e0 <__aeabi_f2d>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	ec43 2b10 	vmov	d0, r2, r3
 80019e6:	f011 fbb7 	bl	8013158 <cos>
 80019ea:	ec53 2b10 	vmov	r2, r3, d0
 80019ee:	4620      	mov	r0, r4
 80019f0:	4629      	mov	r1, r5
 80019f2:	f7fe fdcd 	bl	8000590 <__aeabi_dmul>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff f8a9 	bl	8000b54 <__aeabi_d2f>
 8001a02:	4603      	mov	r3, r0
 8001a04:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1e:	ed97 7a00 	vldr	s14, [r7]
 8001a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a26:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd51 	bl	80004e0 <__aeabi_f2d>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4620      	mov	r0, r4
 8001a44:	4629      	mov	r1, r5
 8001a46:	f7fe fda3 	bl	8000590 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a5a:	f7fe fec3 	bl	80007e4 <__aeabi_ddiv>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	f7ff f875 	bl	8000b54 <__aeabi_d2f>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a72:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a82:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001a86:	6938      	ldr	r0, [r7, #16]
 8001a88:	f7fe fd2a 	bl	80004e0 <__aeabi_f2d>
 8001a8c:	a326      	add	r3, pc, #152	@ (adr r3, 8001b28 <PRISMATIC_MOTOR_DFD_Compute+0x188>)
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	f7fe fd7d 	bl	8000590 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7ff f859 	bl	8000b54 <__aeabi_d2f>
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f7ff f850 	bl	8000b54 <__aeabi_d2f>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eeb1 8a67 	vneg.f32	s16, s15
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7ff f843 	bl	8000b54 <__aeabi_d2f>
 8001ace:	4605      	mov	r5, r0
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff f83a 	bl	8000b54 <__aeabi_d2f>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eef1 8a67 	vneg.f32	s17, s15
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7ff f82d 	bl	8000b54 <__aeabi_d2f>
 8001afa:	4603      	mov	r3, r0
 8001afc:	ee02 3a10 	vmov	s4, r3
 8001b00:	eef0 1a68 	vmov.f32	s3, s17
 8001b04:	ee01 5a10 	vmov	s2, r5
 8001b08:	eef0 0a48 	vmov.f32	s1, s16
 8001b0c:	ee00 4a10 	vmov	s0, r4
 8001b10:	f000 f987 	bl	8001e22 <mapf>
 8001b14:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b18:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1c:	3720      	adds	r7, #32
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	ecbd 8b02 	vpop	{d8}
 8001b24:	bdb0      	pop	{r4, r5, r7, pc}
 8001b26:	bf00      	nop
 8001b28:	9999999a 	.word	0x9999999a
 8001b2c:	3fb99999 	.word	0x3fb99999

08001b30 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	ed2d 8b02 	vpush	{d8}
 8001b36:	b08a      	sub	sp, #40	@ 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b42:	edc7 0a00 	vstr	s1, [r7]
 8001b46:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b48:	897b      	ldrh	r3, [r7, #10]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <FIR_init+0x2a>
        numTaps += 1;
 8001b54:	897b      	ldrh	r3, [r7, #10]
 8001b56:	3301      	adds	r3, #1
 8001b58:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	897a      	ldrh	r2, [r7, #10]
 8001b5e:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b66:	897b      	ldrh	r3, [r7, #10]
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f011 f9ea 	bl	8012f44 <malloc>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f011 f9e1 	bl	8012f44 <malloc>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 80e0 	beq.w	8001d54 <FIR_init+0x224>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80db 	beq.w	8001d54 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001ba2:	e00a      	b.n	8001bba <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001bb4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bbc:	897b      	ldrh	r3, [r7, #10]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d3f0      	bcc.n	8001ba4 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001bc2:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bc6:	ed97 7a00 	vldr	s14, [r7]
 8001bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bce:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001bd2:	897b      	ldrh	r3, [r7, #10]
 8001bd4:	085b      	lsrs	r3, r3, #1
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001bda:	2300      	movs	r3, #0
 8001bdc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001bde:	e077      	b.n	8001cd0 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001be0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001be4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d10c      	bne.n	8001c06 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bfc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c00:	edc3 7a00 	vstr	s15, [r3]
 8001c04:	e02c      	b.n	8001c60 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001c06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c08:	8afb      	ldrh	r3, [r7, #22]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001c10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c14:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d60 <FIR_init+0x230>
 8001c18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c20:	ee07 3a90 	vmov	s15, r3
 8001c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c30:	f011 fbbc 	bl	80133ac <sinf>
 8001c34:	eef0 6a40 	vmov.f32	s13, s0
 8001c38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c44:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d64 <FIR_init+0x234>
 8001c48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c5c:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	ed93 8a00 	vldr	s16, [r3]
 8001c70:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d60 <FIR_init+0x230>
 8001c80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c84:	897b      	ldrh	r3, [r7, #10]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c94:	eeb0 0a66 	vmov.f32	s0, s13
 8001c98:	f011 fb44 	bl	8013324 <cosf>
 8001c9c:	eef0 7a40 	vmov.f32	s15, s0
 8001ca0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d68 <FIR_init+0x238>
 8001ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d6c <FIR_init+0x23c>
 8001cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cc0:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001cc4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001cd0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001cd4:	897b      	ldrh	r3, [r7, #10]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	db82      	blt.n	8001be0 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	83fb      	strh	r3, [r7, #30]
 8001ce4:	e00f      	b.n	8001d06 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	8bfb      	ldrh	r3, [r7, #30]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001d00:	8bfb      	ldrh	r3, [r7, #30]
 8001d02:	3301      	adds	r3, #1
 8001d04:	83fb      	strh	r3, [r7, #30]
 8001d06:	8bfa      	ldrh	r2, [r7, #30]
 8001d08:	897b      	ldrh	r3, [r7, #10]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d3eb      	bcc.n	8001ce6 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001d0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	d01b      	beq.n	8001d54 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	83bb      	strh	r3, [r7, #28]
 8001d20:	e014      	b.n	8001d4c <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	8bbb      	ldrh	r3, [r7, #28]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	edd3 6a00 	vldr	s13, [r3]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	8bbb      	ldrh	r3, [r7, #28]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d42:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d46:	8bbb      	ldrh	r3, [r7, #28]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	83bb      	strh	r3, [r7, #28]
 8001d4c:	8bba      	ldrh	r2, [r7, #28]
 8001d4e:	897b      	ldrh	r3, [r7, #10]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d3e6      	bcc.n	8001d22 <FIR_init+0x1f2>
            }
        }
    }
}
 8001d54:	bf00      	nop
 8001d56:	3728      	adds	r7, #40	@ 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	ecbd 8b02 	vpop	{d8}
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40c90fdb 	.word	0x40c90fdb
 8001d64:	40490fdb 	.word	0x40490fdb
 8001d68:	3eeb851f 	.word	0x3eeb851f
 8001d6c:	3f0a3d71 	.word	0x3f0a3d71

08001d70 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	895b      	ldrh	r3, [r3, #10]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	895b      	ldrh	r3, [r3, #10]
 8001d96:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001d98:	2300      	movs	r3, #0
 8001d9a:	813b      	strh	r3, [r7, #8]
 8001d9c:	e023      	b.n	8001de6 <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	897b      	ldrh	r3, [r7, #10]
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	ed93 7a00 	vldr	s14, [r3]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	893b      	ldrh	r3, [r7, #8]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dbe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 8001dca:	897b      	ldrh	r3, [r7, #10]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d104      	bne.n	8001dda <FIR_process+0x6a>
            index = fir->numTaps - 1;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	891b      	ldrh	r3, [r3, #8]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	817b      	strh	r3, [r7, #10]
 8001dd8:	e002      	b.n	8001de0 <FIR_process+0x70>
        } else {
            index--;
 8001dda:	897b      	ldrh	r3, [r7, #10]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001de0:	893b      	ldrh	r3, [r7, #8]
 8001de2:	3301      	adds	r3, #1
 8001de4:	813b      	strh	r3, [r7, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	891b      	ldrh	r3, [r3, #8]
 8001dea:	893a      	ldrh	r2, [r7, #8]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d3d6      	bcc.n	8001d9e <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	895b      	ldrh	r3, [r3, #10]
 8001df4:	3301      	adds	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	895a      	ldrh	r2, [r3, #10]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	891b      	ldrh	r3, [r3, #8]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d302      	bcc.n	8001e0e <FIR_process+0x9e>
        fir->bufferIndex = 0;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	815a      	strh	r2, [r3, #10]
    }

    return output;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	ee07 3a90 	vmov	s15, r3
}
 8001e14:	eeb0 0a67 	vmov.f32	s0, s15
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001e22:	b480      	push	{r7}
 8001e24:	b089      	sub	sp, #36	@ 0x24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e2c:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e30:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e34:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e38:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001e3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e40:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e44:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e48:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e58:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001e5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e68:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e70:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e78:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	ee07 3a90 	vmov	s15, r3
}
 8001e82:	eeb0 0a67 	vmov.f32	s0, s15
 8001e86:	3724      	adds	r7, #36	@ 0x24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001e94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <modbus_1t5_Timeout+0x3c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <modbus_1t5_Timeout+0x3c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <modbus_1t5_Timeout+0x3c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <modbus_1t5_Timeout+0x3c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000634 	.word	0x20000634

08001ed0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001ed8:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <modbus_3t5_Timeout+0x1c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2201      	movs	r2, #1
 8001ede:	755a      	strb	r2, [r3, #21]

}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	20000634 	.word	0x20000634

08001ef0 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f00f fa09 	bl	8011310 <HAL_UART_GetError>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d101      	bne.n	8001f08 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001f04:	f7ff ffc4 	bl	8001e90 <modbus_1t5_Timeout>

	}
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001f24:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001f2c:	4b29      	ldr	r3, [pc, #164]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001f34:	4b27      	ldr	r3, [pc, #156]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001f3c:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	7e3a      	ldrb	r2, [r7, #24]
 8001f42:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001f44:	4b23      	ldr	r3, [pc, #140]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	4a21      	ldr	r2, [pc, #132]	@ (8001fd8 <Modbus_init+0xc8>)
 8001f52:	210e      	movs	r1, #14
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00d fbff 	bl	800f758 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2110      	movs	r1, #16
 8001f60:	4618      	mov	r0, r3
 8001f62:	f00f f97f 	bl	8011264 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f00f f996 	bl	801129c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4a19      	ldr	r2, [pc, #100]	@ (8001fdc <Modbus_init+0xcc>)
 8001f76:	2104      	movs	r1, #4
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f00e fc3d 	bl	80107f8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001f90:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001f94:	4413      	add	r3, r2
 8001f96:	3302      	adds	r3, #2
 8001f98:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f00e fd65 	bl	8010a6c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <Modbus_init+0xc4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10c      	bne.n	8001fcc <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001fb2:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <Modbus_init+0xc4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f00c fba9 	bl	800e710 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001fbe:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <Modbus_init+0xc4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f00c fdf8 	bl	800ebbc <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000634 	.word	0x20000634
 8001fd8:	08001ed1 	.word	0x08001ed1
 8001fdc:	08001ef1 	.word	0x08001ef1

08001fe0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001fec:	23ff      	movs	r3, #255	@ 0xff
 8001fee:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001ff0:	23ff      	movs	r3, #255	@ 0xff
 8001ff2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001ff4:	e013      	b.n	800201e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	781a      	ldrb	r2, [r3, #0]
 8001ffe:	7bbb      	ldrb	r3, [r7, #14]
 8002000:	4053      	eors	r3, r2
 8002002:	b2db      	uxtb	r3, r3
 8002004:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8002006:	4a10      	ldr	r2, [pc, #64]	@ (8002048 <CRC16+0x68>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4413      	add	r3, r2
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	4053      	eors	r3, r2
 8002012:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8002014:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <CRC16+0x6c>)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	4413      	add	r3, r2
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800201e:	883b      	ldrh	r3, [r7, #0]
 8002020:	1e5a      	subs	r2, r3, #1
 8002022:	803a      	strh	r2, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e6      	bne.n	8001ff6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	b21b      	sxth	r3, r3
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	b21a      	sxth	r2, r3
 8002030:	7bbb      	ldrb	r3, [r7, #14]
 8002032:	b21b      	sxth	r3, r3
 8002034:	4313      	orrs	r3, r2
 8002036:	b21b      	sxth	r3, r3
 8002038:	b29b      	uxth	r3, r3
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000218 	.word	0x20000218
 800204c:	20000118 	.word	0x20000118

08002050 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8002056:	4b7e      	ldr	r3, [pc, #504]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	7ddb      	ldrb	r3, [r3, #23]
 800205c:	3b01      	subs	r3, #1
 800205e:	2b03      	cmp	r3, #3
 8002060:	d80a      	bhi.n	8002078 <Modbus_Protocal_Worker+0x28>
 8002062:	a201      	add	r2, pc, #4	@ (adr r2, 8002068 <Modbus_Protocal_Worker+0x18>)
 8002064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002068:	08002083 	.word	0x08002083
 800206c:	08002217 	.word	0x08002217
 8002070:	0800210f 	.word	0x0800210f
 8002074:	08002153 	.word	0x08002153
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8002078:	4b75      	ldr	r3, [pc, #468]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2201      	movs	r2, #1
 800207e:	75da      	strb	r2, [r3, #23]
		break;
 8002080:	e0e1      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8002082:	4b73      	ldr	r3, [pc, #460]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800208e:	4b70      	ldr	r3, [pc, #448]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2202      	movs	r2, #2
 8002094:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8002096:	f000 f9cd 	bl	8002434 <Modbus_Emission>
 800209a:	e018      	b.n	80020ce <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 800209c:	4b6c      	ldr	r3, [pc, #432]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80020a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d00b      	beq.n	80020ce <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80020b6:	4b66      	ldr	r3, [pc, #408]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80020be:	4b64      	ldr	r3, [pc, #400]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2200      	movs	r2, #0
 80020c4:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80020c6:	4b62      	ldr	r3, [pc, #392]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2203      	movs	r2, #3
 80020cc:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80020ce:	4b60      	ldr	r3, [pc, #384]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020d8:	2b20      	cmp	r3, #32
 80020da:	f040 80ad 	bne.w	8002238 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80020de:	4b5c      	ldr	r3, [pc, #368]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80020e8:	4b59      	ldr	r3, [pc, #356]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80020ee:	4b58      	ldr	r3, [pc, #352]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b57      	ldr	r3, [pc, #348]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80020fa:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80020fe:	4413      	add	r3, r2
 8002100:	3302      	adds	r3, #2
 8002102:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002106:	4619      	mov	r1, r3
 8002108:	f00e fcb0 	bl	8010a6c <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 800210c:	e094      	b.n	8002238 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800210e:	4b50      	ldr	r3, [pc, #320]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	7d1b      	ldrb	r3, [r3, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 8091 	beq.w	800223c <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800211a:	4b4d      	ldr	r3, [pc, #308]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	22fe      	movs	r2, #254	@ 0xfe
 8002120:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8002122:	4b4b      	ldr	r3, [pc, #300]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 800212c:	4b48      	ldr	r3, [pc, #288]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 800213c:	4b44      	ldr	r3, [pc, #272]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800213e:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8002140:	1a8a      	subs	r2, r1, r2
 8002142:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8002144:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8002148:	4b41      	ldr	r3, [pc, #260]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2204      	movs	r2, #4
 800214e:	75da      	strb	r2, [r3, #23]
		}
		break;
 8002150:	e074      	b.n	800223c <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8002152:	4b3f      	ldr	r3, [pc, #252]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800215a:	f113 0f02 	cmn.w	r3, #2
 800215e:	d150      	bne.n	8002202 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8002160:	4b3b      	ldr	r3, [pc, #236]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8002168:	4b39      	ldr	r3, [pc, #228]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8002170:	4b37      	ldr	r3, [pc, #220]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002178:	3b02      	subs	r3, #2
 800217a:	4619      	mov	r1, r3
 800217c:	4610      	mov	r0, r2
 800217e:	f7ff ff2f 	bl	8001fe0 <CRC16>
 8002182:	4603      	mov	r3, r0
 8002184:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002186:	793a      	ldrb	r2, [r7, #4]
 8002188:	4b31      	ldr	r3, [pc, #196]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800218a:	6819      	ldr	r1, [r3, #0]
 800218c:	4b30      	ldr	r3, [pc, #192]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002194:	3b02      	subs	r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 800219c:	429a      	cmp	r2, r3
 800219e:	d10c      	bne.n	80021ba <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80021a0:	797a      	ldrb	r2, [r7, #5]
 80021a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021a4:	6819      	ldr	r1, [r3, #0]
 80021a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021ae:	3b01      	subs	r3, #1
 80021b0:	440b      	add	r3, r1
 80021b2:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d004      	beq.n	80021c4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80021ba:	4b25      	ldr	r3, [pc, #148]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	22ff      	movs	r2, #255	@ 0xff
 80021c0:	759a      	strb	r2, [r3, #22]
				break;
 80021c2:	e040      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80021c4:	4b22      	ldr	r3, [pc, #136]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80021cc:	4b20      	ldr	r3, [pc, #128]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d113      	bne.n	80021fe <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80021d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80021de:	4b1c      	ldr	r3, [pc, #112]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80021e6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80021e8:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021f0:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80021f2:	461a      	mov	r2, r3
 80021f4:	f010 ffa0 	bl	8013138 <memcpy>

			//execute command
			Modbus_frame_response();
 80021f8:	f000 f904 	bl	8002404 <Modbus_frame_response>
 80021fc:	e001      	b.n	8002202 <Modbus_Protocal_Worker+0x1b2>
				break;
 80021fe:	bf00      	nop
					}
		break;


	}
}
 8002200:	e021      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8002202:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	7d5b      	ldrb	r3, [r3, #21]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d019      	beq.n	8002240 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 800220c:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2201      	movs	r2, #1
 8002212:	75da      	strb	r2, [r3, #23]
		break;
 8002214:	e014      	b.n	8002240 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002216:	4b0e      	ldr	r3, [pc, #56]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002220:	2b20      	cmp	r3, #32
 8002222:	d10f      	bne.n	8002244 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8002224:	4b0a      	ldr	r3, [pc, #40]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800222e:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2201      	movs	r2, #1
 8002234:	75da      	strb	r2, [r3, #23]
		break;
 8002236:	e005      	b.n	8002244 <Modbus_Protocal_Worker+0x1f4>
		break;
 8002238:	bf00      	nop
 800223a:	e004      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
		break;
 800223c:	bf00      	nop
 800223e:	e002      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
		break;
 8002240:	bf00      	nop
 8002242:	e000      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
		break;
 8002244:	bf00      	nop
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	20000634 	.word	0x20000634

08002254 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800225a:	4b1d      	ldr	r3, [pc, #116]	@ (80022d0 <modbusWrite1Register+0x7c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	7e5b      	ldrb	r3, [r3, #25]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	b29b      	uxth	r3, r3
 8002264:	4a1a      	ldr	r2, [pc, #104]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	7e92      	ldrb	r2, [r2, #26]
 800226a:	4413      	add	r3, r2
 800226c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	4b17      	ldr	r3, [pc, #92]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	429a      	cmp	r2, r3
 8002278:	d903      	bls.n	8002282 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800227a:	2002      	movs	r0, #2
 800227c:	f000 f8a0 	bl	80023c0 <ModbusErrorReply>
			 return;
 8002280:	e023      	b.n	80022ca <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8002282:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	440b      	add	r3, r1
 8002292:	7ed2      	ldrb	r2, [r2, #27]
 8002294:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8002296:	4b0e      	ldr	r3, [pc, #56]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b0d      	ldr	r3, [pc, #52]	@ (80022d0 <modbusWrite1Register+0x7c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	440b      	add	r3, r1
 80022a6:	7f12      	ldrb	r2, [r2, #28]
 80022a8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80022aa:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <modbusWrite1Register+0x7c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80022b2:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <modbusWrite1Register+0x7c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80022b8:	2208      	movs	r2, #8
 80022ba:	4619      	mov	r1, r3
 80022bc:	f010 ff3c 	bl	8013138 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80022c0:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <modbusWrite1Register+0x7c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2205      	movs	r2, #5
 80022c6:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000634 	.word	0x20000634

080022d4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80022da:	4b38      	ldr	r3, [pc, #224]	@ (80023bc <modbusRead1Register+0xe8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	7edb      	ldrb	r3, [r3, #27]
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4a35      	ldr	r2, [pc, #212]	@ (80023bc <modbusRead1Register+0xe8>)
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	7f12      	ldrb	r2, [r2, #28]
 80022ea:	4413      	add	r3, r2
 80022ec:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80022ee:	4b33      	ldr	r3, [pc, #204]	@ (80023bc <modbusRead1Register+0xe8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	7e5b      	ldrb	r3, [r3, #25]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	4a30      	ldr	r2, [pc, #192]	@ (80023bc <modbusRead1Register+0xe8>)
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	7e92      	ldrb	r2, [r2, #26]
 80022fe:	4413      	add	r3, r2
 8002300:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <modbusRead1Register+0x3a>
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	2b7d      	cmp	r3, #125	@ 0x7d
 800230c:	d903      	bls.n	8002316 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800230e:	2003      	movs	r0, #3
 8002310:	f000 f856 	bl	80023c0 <ModbusErrorReply>
		 return;
 8002314:	e04e      	b.n	80023b4 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8002316:	88ba      	ldrh	r2, [r7, #4]
 8002318:	4b28      	ldr	r3, [pc, #160]	@ (80023bc <modbusRead1Register+0xe8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	429a      	cmp	r2, r3
 8002320:	d808      	bhi.n	8002334 <modbusRead1Register+0x60>
 8002322:	88ba      	ldrh	r2, [r7, #4]
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	4413      	add	r3, r2
 8002328:	461a      	mov	r2, r3
 800232a:	4b24      	ldr	r3, [pc, #144]	@ (80023bc <modbusRead1Register+0xe8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	429a      	cmp	r2, r3
 8002332:	d903      	bls.n	800233c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002334:	2002      	movs	r0, #2
 8002336:	f000 f843 	bl	80023c0 <ModbusErrorReply>
		 return;
 800233a:	e03b      	b.n	80023b4 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800233c:	4b1f      	ldr	r3, [pc, #124]	@ (80023bc <modbusRead1Register+0xe8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2203      	movs	r2, #3
 8002342:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4b1c      	ldr	r3, [pc, #112]	@ (80023bc <modbusRead1Register+0xe8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	0052      	lsls	r2, r2, #1
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002356:	2400      	movs	r4, #0
 8002358:	e020      	b.n	800239c <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800235a:	4b18      	ldr	r3, [pc, #96]	@ (80023bc <modbusRead1Register+0xe8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	88bb      	ldrh	r3, [r7, #4]
 8002362:	4423      	add	r3, r4
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	18d1      	adds	r1, r2, r3
 8002368:	4b14      	ldr	r3, [pc, #80]	@ (80023bc <modbusRead1Register+0xe8>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	1c63      	adds	r3, r4, #1
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	7849      	ldrb	r1, [r1, #1]
 8002372:	4413      	add	r3, r2
 8002374:	460a      	mov	r2, r1
 8002376:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800237a:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <modbusRead1Register+0xe8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	88bb      	ldrh	r3, [r7, #4]
 8002382:	4423      	add	r3, r4
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	18d1      	adds	r1, r2, r3
 8002388:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <modbusRead1Register+0xe8>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	0063      	lsls	r3, r4, #1
 800238e:	3303      	adds	r3, #3
 8002390:	7809      	ldrb	r1, [r1, #0]
 8002392:	4413      	add	r3, r2
 8002394:	460a      	mov	r2, r1
 8002396:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 800239a:	3401      	adds	r4, #1
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	429c      	cmp	r4, r3
 80023a0:	dbdb      	blt.n	800235a <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	3301      	adds	r3, #1
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <modbusRead1Register+0xe8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	0052      	lsls	r2, r2, #1
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd90      	pop	{r4, r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000634 	.word	0x20000634

080023c0 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80023ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002400 <ModbusErrorReply+0x40>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	7e1a      	ldrb	r2, [r3, #24]
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <ModbusErrorReply+0x40>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80023de:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <ModbusErrorReply+0x40>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	79fa      	ldrb	r2, [r7, #7]
 80023e4:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <ModbusErrorReply+0x40>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2202      	movs	r2, #2
 80023ee:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000634 	.word	0x20000634

08002404 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002408:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <Modbus_frame_response+0x2c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	7e1b      	ldrb	r3, [r3, #24]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d004      	beq.n	800241c <Modbus_frame_response+0x18>
 8002412:	2b06      	cmp	r3, #6
 8002414:	d105      	bne.n	8002422 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8002416:	f7ff ff1d 	bl	8002254 <modbusWrite1Register>
		break;
 800241a:	e006      	b.n	800242a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800241c:	f7ff ff5a 	bl	80022d4 <modbusRead1Register>
		break;
 8002420:	e003      	b.n	800242a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8002422:	2001      	movs	r0, #1
 8002424:	f7ff ffcc 	bl	80023c0 <ModbusErrorReply>
		break;
 8002428:	bf00      	nop

	}
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000634 	.word	0x20000634

08002434 <Modbus_Emission>:

void Modbus_Emission()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800243a:	4b38      	ldr	r3, [pc, #224]	@ (800251c <Modbus_Emission+0xe8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002444:	2b20      	cmp	r3, #32
 8002446:	d15d      	bne.n	8002504 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002448:	4b34      	ldr	r3, [pc, #208]	@ (800251c <Modbus_Emission+0xe8>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b33      	ldr	r3, [pc, #204]	@ (800251c <Modbus_Emission+0xe8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	7812      	ldrb	r2, [r2, #0]
 8002452:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002456:	4b31      	ldr	r3, [pc, #196]	@ (800251c <Modbus_Emission+0xe8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800245e:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8002460:	4b2e      	ldr	r3, [pc, #184]	@ (800251c <Modbus_Emission+0xe8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8002468:	4b2c      	ldr	r3, [pc, #176]	@ (800251c <Modbus_Emission+0xe8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8002470:	461a      	mov	r2, r3
 8002472:	f010 fe61 	bl	8013138 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002476:	4b29      	ldr	r3, [pc, #164]	@ (800251c <Modbus_Emission+0xe8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800247e:	461a      	mov	r2, r3
 8002480:	4b26      	ldr	r3, [pc, #152]	@ (800251c <Modbus_Emission+0xe8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3203      	adds	r2, #3
 8002486:	b292      	uxth	r2, r2
 8002488:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800248c:	4b23      	ldr	r3, [pc, #140]	@ (800251c <Modbus_Emission+0xe8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002494:	4b21      	ldr	r3, [pc, #132]	@ (800251c <Modbus_Emission+0xe8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800249c:	3b02      	subs	r3, #2
 800249e:	4619      	mov	r1, r3
 80024a0:	4610      	mov	r0, r2
 80024a2:	f7ff fd9d 	bl	8001fe0 <CRC16>
 80024a6:	4603      	mov	r3, r0
 80024a8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80024aa:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <Modbus_Emission+0xe8>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <Modbus_Emission+0xe8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80024b6:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80024b8:	7939      	ldrb	r1, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	460a      	mov	r2, r1
 80024be:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80024c2:	4b16      	ldr	r3, [pc, #88]	@ (800251c <Modbus_Emission+0xe8>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <Modbus_Emission+0xe8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80024ce:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80024d0:	7979      	ldrb	r1, [r7, #5]
 80024d2:	4413      	add	r3, r2
 80024d4:	460a      	mov	r2, r1
 80024d6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80024da:	4b10      	ldr	r3, [pc, #64]	@ (800251c <Modbus_Emission+0xe8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d10d      	bne.n	8002504 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80024e8:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <Modbus_Emission+0xe8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80024ee:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <Modbus_Emission+0xe8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80024f6:	4b09      	ldr	r3, [pc, #36]	@ (800251c <Modbus_Emission+0xe8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80024fa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80024fe:	461a      	mov	r2, r3
 8002500:	f00e fa34 	bl	801096c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002504:	4b05      	ldr	r3, [pc, #20]	@ (800251c <Modbus_Emission+0xe8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2200      	movs	r2, #0
 800250a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 800250c:	4b03      	ldr	r3, [pc, #12]	@ (800251c <Modbus_Emission+0xe8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	755a      	strb	r2, [r3, #21]

}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000634 	.word	0x20000634

08002520 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	@ 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6278      	str	r0, [r7, #36]	@ 0x24
 8002528:	ed87 0a08 	vstr	s0, [r7, #32]
 800252c:	edc7 0a07 	vstr	s1, [r7, #28]
 8002530:	ed87 1a06 	vstr	s2, [r7, #24]
 8002534:	edc7 1a05 	vstr	s3, [r7, #20]
 8002538:	ed87 2a04 	vstr	s4, [r7, #16]
 800253c:	edc7 2a03 	vstr	s5, [r7, #12]
 8002540:	ed87 3a02 	vstr	s6, [r7, #8]
 8002544:	edc7 3a01 	vstr	s7, [r7, #4]
 8002548:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	6a3a      	ldr	r2, [r7, #32]
 8002550:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8002564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	2210      	movs	r2, #16
 8002588:	2100      	movs	r1, #0
 800258a:	4618      	mov	r0, r3
 800258c:	f010 fd90 	bl	80130b0 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	3310      	adds	r3, #16
 8002594:	2240      	movs	r2, #64	@ 0x40
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f010 fd89 	bl	80130b0 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800259e:	2300      	movs	r3, #0
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025a2:	e00c      	b.n	80025be <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 80025a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ae:	3304      	adds	r3, #4
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	4a79      	ldr	r2, [pc, #484]	@ (800279c <MotorKalman_Init+0x27c>)
 80025b6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ba:	3301      	adds	r3, #1
 80025bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	ddef      	ble.n	80025a4 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 80025ca:	2240      	movs	r2, #64	@ 0x40
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f010 fd6e 	bl	80130b0 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025d4:	2300      	movs	r3, #0
 80025d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025d8:	e00d      	b.n	80025f6 <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 80025da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e4:	33be      	adds	r3, #190	@ 0xbe
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80025ee:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f2:	3301      	adds	r3, #1
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	ddee      	ble.n	80025da <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	33f0      	adds	r3, #240	@ 0xf0
 8002600:	2210      	movs	r2, #16
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f010 fd53 	bl	80130b0 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002610:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800261a:	2210      	movs	r2, #16
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f010 fd46 	bl	80130b0 <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800262a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 800262e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002632:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002634:	f000 f922 	bl	800287c <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8002638:	ed97 0a00 	vldr	s0, [r7]
 800263c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800263e:	f000 f94d 	bl	80028dc <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	2201      	movs	r2, #1
 800264c:	2104      	movs	r1, #4
 800264e:	f00f ffbe 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	3310      	adds	r3, #16
 800265c:	2204      	movs	r2, #4
 800265e:	2104      	movs	r1, #4
 8002660:	f00f ffb5 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002670:	2204      	movs	r2, #4
 8002672:	2104      	movs	r1, #4
 8002674:	f00f ffab 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002684:	2201      	movs	r2, #1
 8002686:	2101      	movs	r1, #1
 8002688:	f00f ffa1 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8002698:	2201      	movs	r2, #1
 800269a:	2101      	movs	r1, #1
 800269c:	f00f ff97 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80026ac:	2201      	movs	r2, #1
 80026ae:	2101      	movs	r1, #1
 80026b0:	f00f ff8d 	bl	80125ce <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80026c0:	2204      	movs	r2, #4
 80026c2:	2104      	movs	r1, #4
 80026c4:	f00f ff83 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 80026d4:	2201      	movs	r2, #1
 80026d6:	2104      	movs	r1, #4
 80026d8:	f00f ff79 	bl	80125ce <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80026e8:	2201      	movs	r2, #1
 80026ea:	2104      	movs	r1, #4
 80026ec:	f00f ff6f 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 80026f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f2:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 80026fc:	2204      	movs	r2, #4
 80026fe:	2104      	movs	r1, #4
 8002700:	f00f ff65 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8002710:	2204      	movs	r2, #4
 8002712:	2101      	movs	r1, #1
 8002714:	f00f ff5b 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8002724:	2201      	movs	r2, #1
 8002726:	2101      	movs	r1, #1
 8002728:	f00f ff51 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8002738:	2201      	movs	r2, #1
 800273a:	2104      	movs	r1, #4
 800273c:	f00f ff47 	bl	80125ce <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002740:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002742:	f000 f82d 	bl	80027a0 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	3390      	adds	r3, #144	@ 0x90
 8002750:	2204      	movs	r2, #4
 8002752:	2104      	movs	r1, #4
 8002754:	f00f ff3b 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	33e0      	adds	r3, #224	@ 0xe0
 8002762:	2201      	movs	r2, #1
 8002764:	2104      	movs	r1, #4
 8002766:	f00f ff32 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002776:	2204      	movs	r2, #4
 8002778:	2104      	movs	r1, #4
 800277a:	f00f ff28 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800278a:	2201      	movs	r2, #1
 800278c:	2104      	movs	r1, #4
 800278e:	f00f ff1e 	bl	80125ce <arm_mat_init_f32>
}
 8002792:	bf00      	nop
 8002794:	3730      	adds	r7, #48	@ 0x30
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	42c80000 	.word	0x42c80000

080027a0 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 80027dc:	4619      	mov	r1, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	eeb0 3a64 	vmov.f32	s6, s9
 80027e4:	eef0 2a45 	vmov.f32	s5, s10
 80027e8:	eeb0 2a65 	vmov.f32	s4, s11
 80027ec:	eef0 1a46 	vmov.f32	s3, s12
 80027f0:	eeb0 1a66 	vmov.f32	s2, s13
 80027f4:	eef0 0a47 	vmov.f32	s1, s14
 80027f8:	eeb0 0a67 	vmov.f32	s0, s15
 80027fc:	f001 f83c 	bl	8003878 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002806:	2240      	movs	r2, #64	@ 0x40
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f010 fc50 	bl	80130b0 <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002816:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002874 <MotorKalman_DiscretizeModel+0xd4>
 800281a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800283a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800284a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002878 <MotorKalman_DiscretizeModel+0xd8>
 800284e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800285e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002874 <MotorKalman_DiscretizeModel+0xd4>
 8002862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	3c23d70a 	.word	0x3c23d70a
 8002878:	3dcccccd 	.word	0x3dcccccd

0800287c <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800288e:	2240      	movs	r2, #64	@ 0x40
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f010 fc0c 	bl	80130b0 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8002898:	edd7 7a00 	vldr	s15, [r7]
 800289c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80028b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028bc:	d107      	bne.n	80028ce <MotorKalman_SetProcessNoise+0x52>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80028c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028cc:	d002      	beq.n	80028d4 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ff66 	bl	80027a0 <MotorKalman_DiscretizeModel>
    }
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 80028e8:	ed97 0a00 	vldr	s0, [r7]
 80028ec:	f010 fcfc 	bl	80132e8 <sqrtf>
 80028f0:	eef0 7a40 	vmov.f32	s15, s0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 800290a:	b580      	push	{r7, lr}
 800290c:	b0b2      	sub	sp, #200	@ 0xc8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 800291e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800292c:	2300      	movs	r3, #0
 800292e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002932:	e041      	b.n	80029b8 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 8002934:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	33c8      	adds	r3, #200	@ 0xc8
 800293c:	443b      	add	r3, r7
 800293e:	3b3c      	subs	r3, #60	@ 0x3c
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002946:	2300      	movs	r3, #0
 8002948:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800294c:	e02b      	b.n	80029a6 <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 800294e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	33c8      	adds	r3, #200	@ 0xc8
 8002956:	443b      	add	r3, r7
 8002958:	3b3c      	subs	r3, #60	@ 0x3c
 800295a:	ed93 7a00 	vldr	s14, [r3]
 800295e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002962:	009a      	lsls	r2, r3, #2
 8002964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002968:	4413      	add	r3, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	3324      	adds	r3, #36	@ 0x24
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	edd3 6a00 	vldr	s13, [r3]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	edd3 7a00 	vldr	s15, [r3]
 8002984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	33c8      	adds	r3, #200	@ 0xc8
 8002994:	443b      	add	r3, r7
 8002996:	3b3c      	subs	r3, #60	@ 0x3c
 8002998:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800299c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029a0:	3301      	adds	r3, #1
 80029a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	ddcf      	ble.n	800294e <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029b2:	3301      	adds	r3, #1
 80029b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80029b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029bc:	2b03      	cmp	r3, #3
 80029be:	ddb9      	ble.n	8002934 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80029c6:	e021      	b.n	8002a0c <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 80029c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	33c8      	adds	r3, #200	@ 0xc8
 80029d0:	443b      	add	r3, r7
 80029d2:	3b3c      	subs	r3, #60	@ 0x3c
 80029d4:	ed93 7a00 	vldr	s14, [r3]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029de:	3338      	adds	r3, #56	@ 0x38
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	edd3 6a00 	vldr	s13, [r3]
 80029e8:	edd7 7a00 	vldr	s15, [r7]
 80029ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a06:	3301      	adds	r3, #1
 8002a08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002a0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	ddd9      	ble.n	80029c8 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a14:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a18:	2240      	movs	r2, #64	@ 0x40
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f010 fb47 	bl	80130b0 <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a22:	f107 030c 	add.w	r3, r7, #12
 8002a26:	2240      	movs	r2, #64	@ 0x40
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f010 fb40 	bl	80130b0 <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a36:	e05f      	b.n	8002af8 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a3e:	e052      	b.n	8002ae6 <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002a40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a44:	009a      	lsls	r2, r3, #2
 8002a46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	33c8      	adds	r3, #200	@ 0xc8
 8002a50:	443b      	add	r3, r7
 8002a52:	3b7c      	subs	r3, #124	@ 0x7c
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a60:	e038      	b.n	8002ad4 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002a62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a66:	009a      	lsls	r2, r3, #2
 8002a68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	33c8      	adds	r3, #200	@ 0xc8
 8002a72:	443b      	add	r3, r7
 8002a74:	3b7c      	subs	r3, #124	@ 0x7c
 8002a76:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 8002a7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a7e:	009a      	lsls	r2, r3, #2
 8002a80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a84:	4413      	add	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	3324      	adds	r3, #36	@ 0x24
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	edd3 6a00 	vldr	s13, [r3]
 8002a92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a96:	009a      	lsls	r2, r3, #2
 8002a98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a9c:	4413      	add	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002aae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ab2:	009a      	lsls	r2, r3, #2
 8002ab4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ab8:	4413      	add	r3, r2
 8002aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	33c8      	adds	r3, #200	@ 0xc8
 8002ac2:	443b      	add	r3, r7
 8002ac4:	3b7c      	subs	r3, #124	@ 0x7c
 8002ac6:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002aca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ad4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	ddc2      	ble.n	8002a62 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002adc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ae6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	dda8      	ble.n	8002a40 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002aee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002af2:	3301      	adds	r3, #1
 8002af4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002af8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	dd9b      	ble.n	8002a38 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b06:	e05f      	b.n	8002bc8 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b0e:	e052      	b.n	8002bb6 <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b14:	009a      	lsls	r2, r3, #2
 8002b16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	33c8      	adds	r3, #200	@ 0xc8
 8002b20:	443b      	add	r3, r7
 8002b22:	3bbc      	subs	r3, #188	@ 0xbc
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002b30:	e038      	b.n	8002ba4 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b36:	009a      	lsls	r2, r3, #2
 8002b38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	33c8      	adds	r3, #200	@ 0xc8
 8002b42:	443b      	add	r3, r7
 8002b44:	3bbc      	subs	r3, #188	@ 0xbc
 8002b46:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 8002b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b4e:	009a      	lsls	r2, r3, #2
 8002b50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	33c8      	adds	r3, #200	@ 0xc8
 8002b5a:	443b      	add	r3, r7
 8002b5c:	3b7c      	subs	r3, #124	@ 0x7c
 8002b5e:	edd3 6a00 	vldr	s13, [r3]
 8002b62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b66:	009a      	lsls	r2, r3, #2
 8002b68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b6c:	4413      	add	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	3324      	adds	r3, #36	@ 0x24
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	edd3 7a00 	vldr	s15, [r3]
 8002b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b82:	009a      	lsls	r2, r3, #2
 8002b84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b88:	4413      	add	r3, r2
 8002b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	33c8      	adds	r3, #200	@ 0xc8
 8002b92:	443b      	add	r3, r7
 8002b94:	3bbc      	subs	r3, #188	@ 0xbc
 8002b96:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002ba4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	ddc2      	ble.n	8002b32 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	dda8      	ble.n	8002b10 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	dd9b      	ble.n	8002b08 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bd6:	e037      	b.n	8002c48 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002bde:	e02a      	b.n	8002c36 <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002be0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002be4:	009a      	lsls	r2, r3, #2
 8002be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	33c8      	adds	r3, #200	@ 0xc8
 8002bf0:	443b      	add	r3, r7
 8002bf2:	3bbc      	subs	r3, #188	@ 0xbc
 8002bf4:	ed93 7a00 	vldr	s14, [r3]
 8002bf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bfc:	009a      	lsls	r2, r3, #2
 8002bfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c02:	4413      	add	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	3354      	adds	r3, #84	@ 0x54
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002c10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c14:	009a      	lsls	r2, r3, #2
 8002c16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c1a:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c30:	3301      	adds	r3, #1
 8002c32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	ddd0      	ble.n	8002be0 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c42:	3301      	adds	r3, #1
 8002c44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	ddc3      	ble.n	8002bd8 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	2104      	movs	r1, #4
 8002c84:	f00f fca3 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3310      	adds	r3, #16
 8002c92:	2204      	movs	r2, #4
 8002c94:	2104      	movs	r1, #4
 8002c96:	f00f fc9a 	bl	80125ce <arm_mat_init_f32>
}
 8002c9a:	bf00      	nop
 8002c9c:	37c8      	adds	r7, #200	@ 0xc8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b0d0      	sub	sp, #320	@ 0x140
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cb2:	6018      	str	r0, [r3, #0]
 8002cb4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cb8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002cbc:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002cc0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cc4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002cce:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002cd8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cdc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 8002ce6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	edd3 7a00 	vldr	s15, [r3]
 8002cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cfc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 8002d06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d0a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d18:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002d1c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d20:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 8002d2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d38:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002d3c:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002d40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d44:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002d4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d52:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d64:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8002d68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d6c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d70:	ed93 7a00 	vldr	s14, [r3]
 8002d74:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7c:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002d80:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002d94:	e04d      	b.n	8002e32 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 8002d96:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002da0:	443b      	add	r3, r7
 8002da2:	3b58      	subs	r3, #88	@ 0x58
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002daa:	2300      	movs	r3, #0
 8002dac:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002db0:	e036      	b.n	8002e20 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002db2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002dbc:	443b      	add	r3, r7
 8002dbe:	3b58      	subs	r3, #88	@ 0x58
 8002dc0:	ed93 7a00 	vldr	s14, [r3]
 8002dc4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002dc8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002dd2:	333c      	adds	r3, #60	@ 0x3c
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	edd3 6a00 	vldr	s13, [r3]
 8002ddc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002de0:	009a      	lsls	r2, r3, #2
 8002de2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002de6:	4413      	add	r3, r2
 8002de8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002dec:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	3304      	adds	r3, #4
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e04:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e0e:	443b      	add	r3, r7
 8002e10:	3b58      	subs	r3, #88	@ 0x58
 8002e12:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002e16:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002e20:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	ddc4      	ble.n	8002db2 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e28:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002e32:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	ddad      	ble.n	8002d96 <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002e48:	e021      	b.n	8002e8e <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 8002e4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e54:	443b      	add	r3, r7
 8002e56:	3b58      	subs	r3, #88	@ 0x58
 8002e58:	ed93 7a00 	vldr	s14, [r3]
 8002e5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e6a:	333c      	adds	r3, #60	@ 0x3c
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	edd3 7a00 	vldr	s15, [r3]
 8002e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e78:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e80:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e84:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002e8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	ddd9      	ble.n	8002e4a <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 8002e96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e9a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002ea4:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eac:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002eb0:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002ec4:	e04d      	b.n	8002f62 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 8002ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ed0:	443b      	add	r3, r7
 8002ed2:	3b68      	subs	r3, #104	@ 0x68
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002eda:	2300      	movs	r3, #0
 8002edc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002ee0:	e036      	b.n	8002f50 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 8002ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002eec:	443b      	add	r3, r7
 8002eee:	3b68      	subs	r3, #104	@ 0x68
 8002ef0:	ed93 7a00 	vldr	s14, [r3]
 8002ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002ef8:	009a      	lsls	r2, r3, #2
 8002efa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002efe:	4413      	add	r3, r2
 8002f00:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002f04:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	edd3 6a00 	vldr	s13, [r3]
 8002f14:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f18:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f22:	333c      	adds	r3, #60	@ 0x3c
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f3e:	443b      	add	r3, r7
 8002f40:	3b68      	subs	r3, #104	@ 0x68
 8002f42:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002f46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002f50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	ddc4      	ble.n	8002ee2 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	ddad      	ble.n	8002ec6 <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 8002f6a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002f7e:	e01a      	b.n	8002fb6 <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002f80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f8a:	443b      	add	r3, r7
 8002f8c:	3b68      	subs	r3, #104	@ 0x68
 8002f8e:	edd3 6a00 	vldr	s13, [r3]
 8002f92:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002fa4:	443b      	add	r3, r7
 8002fa6:	3b78      	subs	r3, #120	@ 0x78
 8002fa8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002fac:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002fb6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	dde0      	ble.n	8002f80 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002fc4:	e029      	b.n	800301a <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 8002fc6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fca:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	ed93 7a00 	vldr	s14, [r3]
 8002fdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002fe6:	443b      	add	r3, r7
 8002fe8:	3b78      	subs	r3, #120	@ 0x78
 8002fea:	edd3 6a00 	vldr	s13, [r3]
 8002fee:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ffe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003010:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003014:	3301      	adds	r3, #1
 8003016:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800301a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800301e:	2b03      	cmp	r3, #3
 8003020:	ddd1      	ble.n	8002fc6 <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8003022:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8003026:	2240      	movs	r2, #64	@ 0x40
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f010 f840 	bl	80130b0 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003030:	2300      	movs	r3, #0
 8003032:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003036:	e035      	b.n	80030a4 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003038:	2300      	movs	r3, #0
 800303a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800303e:	e028      	b.n	8003092 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8003040:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800304a:	443b      	add	r3, r7
 800304c:	3b78      	subs	r3, #120	@ 0x78
 800304e:	ed93 7a00 	vldr	s14, [r3]
 8003052:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003056:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003060:	333c      	adds	r3, #60	@ 0x3c
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	edd3 7a00 	vldr	s15, [r3]
 800306a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800306e:	009a      	lsls	r2, r3, #2
 8003070:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003074:	4413      	add	r3, r2
 8003076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003080:	443b      	add	r3, r7
 8003082:	3bb8      	subs	r3, #184	@ 0xb8
 8003084:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003088:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800308c:	3301      	adds	r3, #1
 800308e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003092:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003096:	2b03      	cmp	r3, #3
 8003098:	ddd2      	ble.n	8003040 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800309a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800309e:	3301      	adds	r3, #1
 80030a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80030a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	ddc5      	ble.n	8003038 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80030ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80030b0:	2240      	movs	r2, #64	@ 0x40
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f00f fffb 	bl	80130b0 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80030c0:	e038      	b.n	8003134 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80030c2:	2300      	movs	r3, #0
 80030c4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80030c8:	e02b      	b.n	8003122 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 80030ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80030ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d102      	bne.n	80030dc <MotorKalman_Update+0x438>
 80030d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80030da:	e001      	b.n	80030e0 <MotorKalman_Update+0x43c>
 80030dc:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 80032f8 <MotorKalman_Update+0x654>
 80030e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e4:	009a      	lsls	r2, r3, #2
 80030e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80030f2:	443b      	add	r3, r7
 80030f4:	3bb8      	subs	r3, #184	@ 0xb8
 80030f6:	edd3 7a00 	vldr	s15, [r3]
 80030fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030fe:	009a      	lsls	r2, r3, #2
 8003100:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003104:	4413      	add	r3, r2
 8003106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003110:	443b      	add	r3, r7
 8003112:	3bf8      	subs	r3, #248	@ 0xf8
 8003114:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003118:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800311c:	3301      	adds	r3, #1
 800311e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003122:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003126:	2b03      	cmp	r3, #3
 8003128:	ddcf      	ble.n	80030ca <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800312a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312e:	3301      	adds	r3, #1
 8003130:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003138:	2b03      	cmp	r3, #3
 800313a:	ddc2      	ble.n	80030c2 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 800313c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003140:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f103 0110 	add.w	r1, r3, #16
 800314a:	f107 0308 	add.w	r3, r7, #8
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	4618      	mov	r0, r3
 8003152:	f00f fff1 	bl	8013138 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800315c:	e06e      	b.n	800323c <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800315e:	2300      	movs	r3, #0
 8003160:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003164:	e061      	b.n	800322a <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8003166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800316a:	009a      	lsls	r2, r3, #2
 800316c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003170:	4413      	add	r3, r2
 8003172:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8003176:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	3304      	adds	r3, #4
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8003188:	2300      	movs	r3, #0
 800318a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800318e:	e043      	b.n	8003218 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8003190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003194:	009a      	lsls	r2, r3, #2
 8003196:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800319a:	4413      	add	r3, r2
 800319c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031a0:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	3304      	adds	r3, #4
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 80031b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031b4:	009a      	lsls	r2, r3, #2
 80031b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80031c2:	443b      	add	r3, r7
 80031c4:	3bf8      	subs	r3, #248	@ 0xf8
 80031c6:	edd3 6a00 	vldr	s13, [r3]
 80031ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ce:	009a      	lsls	r2, r3, #2
 80031d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031d4:	4413      	add	r3, r2
 80031d6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031da:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80031ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031ee:	009a      	lsls	r2, r3, #2
 80031f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031f4:	4413      	add	r3, r2
 80031f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fa:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031fe:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	3304      	adds	r3, #4
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800320e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003212:	3301      	adds	r3, #1
 8003214:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800321c:	2b03      	cmp	r3, #3
 800321e:	ddb7      	ble.n	8003190 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003220:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003224:	3301      	adds	r3, #1
 8003226:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800322a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800322e:	2b03      	cmp	r3, #3
 8003230:	dd99      	ble.n	8003166 <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003236:	3301      	adds	r3, #1
 8003238:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800323c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003240:	2b03      	cmp	r3, #3
 8003242:	dd8c      	ble.n	800315e <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8003244:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003248:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003254:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 800325e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003262:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800326e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8003278:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800327c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003288:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8003292:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003296:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80032ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032b0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 80032ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2201      	movs	r2, #1
 80032c6:	2104      	movs	r1, #4
 80032c8:	f00f f981 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 80032cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 80032da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032de:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3310      	adds	r3, #16
 80032e6:	2204      	movs	r2, #4
 80032e8:	2104      	movs	r1, #4
 80032ea:	f00f f970 	bl	80125ce <arm_mat_init_f32>
}
 80032ee:	bf00      	nop
 80032f0:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	00000000 	.word	0x00000000

080032fc <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	ed87 0a02 	vstr	s0, [r7, #8]
 8003308:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 800330c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7ff fafa 	bl	800290a <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8003316:	ed97 0a01 	vldr	s0, [r7, #4]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f7ff fcc2 	bl	8002ca4 <MotorKalman_Update>

    return filter->velocity;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8003326:	ee07 3a90 	vmov	s15, r3
}
 800332a:	eeb0 0a67 	vmov.f32	s0, s15
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	e00c      	b.n	8003360 <matrix_copy+0x2c>
        dst[i] = src[i];
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	441a      	add	r2, r3
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	440b      	add	r3, r1
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	3301      	adds	r3, #1
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	429a      	cmp	r2, r3
 8003366:	dbee      	blt.n	8003346 <matrix_copy+0x12>
    }
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 800337e:	af00      	add	r7, sp, #0
 8003380:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8003384:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8003388:	6020      	str	r0, [r4, #0]
 800338a:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 800338e:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8003392:	6001      	str	r1, [r0, #0]
 8003394:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8003398:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 800339c:	ed81 0a00 	vstr	s0, [r1]
 80033a0:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80033a4:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 80033a8:	600a      	str	r2, [r1, #0]
 80033aa:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 80033ae:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 80033b2:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 80033b4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033b8:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80033bc:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2204      	movs	r2, #4
 80033c4:	2104      	movs	r1, #4
 80033c6:	f00f f902 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 80033ca:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033ce:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80033d2:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2204      	movs	r2, #4
 80033da:	2104      	movs	r1, #4
 80033dc:	f00f f8f7 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 80033e0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033e4:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80033e8:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2201      	movs	r2, #1
 80033f0:	2104      	movs	r1, #4
 80033f2:	f00f f8ec 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 80033f6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033fa:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80033fe:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2201      	movs	r2, #1
 8003406:	2104      	movs	r1, #4
 8003408:	f00f f8e1 	bl	80125ce <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 800340c:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8003410:	2240      	movs	r2, #64	@ 0x40
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f00f fe4b 	bl	80130b0 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 800341a:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 800341e:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8003422:	2204      	movs	r2, #4
 8003424:	2104      	movs	r1, #4
 8003426:	f00f f8d2 	bl	80125ce <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 800342a:	2300      	movs	r3, #0
 800342c:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8003430:	e011      	b.n	8003456 <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8003432:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8003442:	443b      	add	r3, r7
 8003444:	3b6c      	subs	r3, #108	@ 0x6c
 8003446:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800344a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 800344c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8003450:	3301      	adds	r3, #1
 8003452:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8003456:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800345a:	2b03      	cmp	r3, #3
 800345c:	dde9      	ble.n	8003432 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 800345e:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8003462:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8003466:	2204      	movs	r2, #4
 8003468:	2104      	movs	r1, #4
 800346a:	f00f f8b0 	bl	80125ce <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 800346e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8003472:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003476:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800347a:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 800347e:	ed93 0a00 	vldr	s0, [r3]
 8003482:	4610      	mov	r0, r2
 8003484:	f00f fcac 	bl	8012de0 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8003488:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800348c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8003490:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8003494:	2210      	movs	r2, #16
 8003496:	6819      	ldr	r1, [r3, #0]
 8003498:	f7ff ff4c 	bl	8003334 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 800349c:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 80034a0:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 80034a4:	2204      	movs	r2, #4
 80034a6:	2104      	movs	r1, #4
 80034a8:	f00f f891 	bl	80125ce <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 80034ac:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80034b0:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 80034b4:	2204      	movs	r2, #4
 80034b6:	2104      	movs	r1, #4
 80034b8:	f00f f889 	bl	80125ce <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 80034bc:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 80034c0:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80034c4:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 80034c8:	4618      	mov	r0, r3
 80034ca:	f00f f845 	bl	8012558 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 80034ce:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 80034d2:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80034d6:	2210      	movs	r2, #16
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff2b 	bl	8003334 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 80034de:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80034e2:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 80034e6:	2302      	movs	r3, #2
 80034e8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80034ec:	e03a      	b.n	8003564 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 80034ee:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034fa:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 80034fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003502:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8003506:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 800350a:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 800350e:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8003512:	4618      	mov	r0, r3
 8003514:	f00f fbea 	bl	8012cec <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8003518:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 800351c:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8003520:	2210      	movs	r2, #16
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff ff06 	bl	8003334 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8003528:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800352c:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8003530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003534:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8003538:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800353c:	4611      	mov	r1, r2
 800353e:	eeb0 0a47 	vmov.f32	s0, s14
 8003542:	4618      	mov	r0, r3
 8003544:	f00f fc4c 	bl	8012de0 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8003548:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 800354c:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8003550:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8003554:	4618      	mov	r0, r3
 8003556:	f00e ffff 	bl	8012558 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 800355a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800355e:	3301      	adds	r3, #1
 8003560:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8003564:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8003568:	2b0a      	cmp	r3, #10
 800356a:	ddc0      	ble.n	80034ee <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 800356c:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8003570:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003574:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003578:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 800357c:	ed93 0a00 	vldr	s0, [r3]
 8003580:	4610      	mov	r0, r2
 8003582:	f00f fc2d 	bl	8012de0 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8003586:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800358a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800358e:	461a      	mov	r2, r3
 8003590:	2300      	movs	r3, #0
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	6053      	str	r3, [r2, #4]
 8003596:	6093      	str	r3, [r2, #8]
 8003598:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 800359a:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 800359e:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 80035a2:	2201      	movs	r2, #1
 80035a4:	2104      	movs	r1, #4
 80035a6:	f00f f812 	bl	80125ce <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 80035aa:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 80035ae:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80035b2:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80035b6:	4618      	mov	r0, r3
 80035b8:	f00f fb98 	bl	8012cec <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 80035bc:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80035c0:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 80035c4:	2201      	movs	r2, #1
 80035c6:	2104      	movs	r1, #4
 80035c8:	f00f f801 	bl	80125ce <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 80035cc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80035d0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80035d4:	edd3 7a00 	vldr	s15, [r3]
 80035d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80035dc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80035e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80035e4:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80035e8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80035ec:	4611      	mov	r1, r2
 80035ee:	eeb0 0a47 	vmov.f32	s0, s14
 80035f2:	4618      	mov	r0, r3
 80035f4:	f00f fbf4 	bl	8012de0 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80035f8:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80035fc:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003600:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003604:	4618      	mov	r0, r3
 8003606:	f00e ffa7 	bl	8012558 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 800360a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800360e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003612:	4618      	mov	r0, r3
 8003614:	2340      	movs	r3, #64	@ 0x40
 8003616:	461a      	mov	r2, r3
 8003618:	2100      	movs	r1, #0
 800361a:	f00f fd49 	bl	80130b0 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 800361e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8003622:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8003626:	2204      	movs	r2, #4
 8003628:	2104      	movs	r1, #4
 800362a:	f00e ffd0 	bl	80125ce <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 800362e:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8003632:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8003636:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 800363a:	4618      	mov	r0, r3
 800363c:	f00f fb56 	bl	8012cec <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003640:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003644:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003648:	461a      	mov	r2, r3
 800364a:	2300      	movs	r3, #0
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	6053      	str	r3, [r2, #4]
 8003650:	6093      	str	r3, [r2, #8]
 8003652:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8003654:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003658:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 800365c:	2201      	movs	r2, #1
 800365e:	2104      	movs	r1, #4
 8003660:	f00e ffb5 	bl	80125ce <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8003664:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8003668:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800366c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003670:	4618      	mov	r0, r3
 8003672:	f00f fb3b 	bl	8012cec <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 8003676:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800367a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800367e:	edd3 7a00 	vldr	s15, [r3]
 8003682:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003686:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800368a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003696:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800369a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800369e:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80036a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80036a6:	4611      	mov	r1, r2
 80036a8:	eeb0 0a47 	vmov.f32	s0, s14
 80036ac:	4618      	mov	r0, r3
 80036ae:	f00f fb97 	bl	8012de0 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80036b2:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80036b6:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80036ba:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80036be:	4618      	mov	r0, r3
 80036c0:	f00e ff4a 	bl	8012558 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 80036c4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036c8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80036cc:	4618      	mov	r0, r3
 80036ce:	2340      	movs	r3, #64	@ 0x40
 80036d0:	461a      	mov	r2, r3
 80036d2:	2100      	movs	r1, #0
 80036d4:	f00f fcec 	bl	80130b0 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 80036d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80036dc:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80036e0:	2204      	movs	r2, #4
 80036e2:	2104      	movs	r1, #4
 80036e4:	f00e ff73 	bl	80125ce <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 80036e8:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80036ec:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80036f0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80036f4:	4618      	mov	r0, r3
 80036f6:	f00f faf9 	bl	8012cec <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 80036fa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036fe:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003702:	461a      	mov	r2, r3
 8003704:	2300      	movs	r3, #0
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	6053      	str	r3, [r2, #4]
 800370a:	6093      	str	r3, [r2, #8]
 800370c:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 800370e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003712:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8003716:	2201      	movs	r2, #1
 8003718:	2104      	movs	r1, #4
 800371a:	f00e ff58 	bl	80125ce <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 800371e:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8003722:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003726:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800372a:	4618      	mov	r0, r3
 800372c:	f00f fade 	bl	8012cec <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8003730:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003734:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003738:	edd3 7a00 	vldr	s15, [r3]
 800373c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003740:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003744:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003748:	edd3 7a00 	vldr	s15, [r3]
 800374c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003750:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003754:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003758:	edd3 7a00 	vldr	s15, [r3]
 800375c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003760:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8003764:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003768:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800376c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003770:	4611      	mov	r1, r2
 8003772:	eeb0 0a47 	vmov.f32	s0, s14
 8003776:	4618      	mov	r0, r3
 8003778:	f00f fb32 	bl	8012de0 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800377c:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003780:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003784:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003788:	4618      	mov	r0, r3
 800378a:	f00e fee5 	bl	8012558 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 800378e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003792:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8003796:	4618      	mov	r0, r3
 8003798:	2340      	movs	r3, #64	@ 0x40
 800379a:	461a      	mov	r2, r3
 800379c:	2100      	movs	r1, #0
 800379e:	f00f fc87 	bl	80130b0 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 80037a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80037a6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80037aa:	2204      	movs	r2, #4
 80037ac:	2104      	movs	r1, #4
 80037ae:	f00e ff0e 	bl	80125ce <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 80037b2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80037b6:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80037ba:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80037be:	4618      	mov	r0, r3
 80037c0:	f00f fa94 	bl	8012cec <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 80037c4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037c8:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80037cc:	461a      	mov	r2, r3
 80037ce:	2300      	movs	r3, #0
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	6053      	str	r3, [r2, #4]
 80037d4:	6093      	str	r3, [r2, #8]
 80037d6:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 80037d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037dc:	f107 001c 	add.w	r0, r7, #28
 80037e0:	2201      	movs	r2, #1
 80037e2:	2104      	movs	r1, #4
 80037e4:	f00e fef3 	bl	80125ce <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 80037e8:	f107 021c 	add.w	r2, r7, #28
 80037ec:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80037f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80037f4:	4618      	mov	r0, r3
 80037f6:	f00f fa79 	bl	8012cec <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 80037fa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037fe:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003802:	edd3 7a00 	vldr	s15, [r3]
 8003806:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800380a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800380e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003812:	edd3 7a00 	vldr	s15, [r3]
 8003816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800381a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800381e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003822:	edd3 7a00 	vldr	s15, [r3]
 8003826:	ee27 7a27 	vmul.f32	s14, s14, s15
 800382a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800382e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003832:	edd3 7a00 	vldr	s15, [r3]
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003874 <discretize_system_with_arm+0x4fc>
 800383e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003842:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003846:	f107 031c 	add.w	r3, r7, #28
 800384a:	4611      	mov	r1, r2
 800384c:	eeb0 0a47 	vmov.f32	s0, s14
 8003850:	4618      	mov	r0, r3
 8003852:	f00f fac5 	bl	8012de0 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003856:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800385a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800385e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003862:	4618      	mov	r0, r3
 8003864:	f00e fe78 	bl	8012558 <arm_mat_add_f32>
}
 8003868:	bf00      	nop
 800386a:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 800386e:	46bd      	mov	sp, r7
 8003870:	bd90      	pop	{r4, r7, pc}
 8003872:	bf00      	nop
 8003874:	42f00000 	.word	0x42f00000

08003878 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8003878:	b580      	push	{r7, lr}
 800387a:	b09e      	sub	sp, #120	@ 0x78
 800387c:	af00      	add	r7, sp, #0
 800387e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003882:	edc7 0a08 	vstr	s1, [r7, #32]
 8003886:	ed87 1a07 	vstr	s2, [r7, #28]
 800388a:	edc7 1a06 	vstr	s3, [r7, #24]
 800388e:	ed87 2a05 	vstr	s4, [r7, #20]
 8003892:	edc7 2a04 	vstr	s5, [r7, #16]
 8003896:	ed87 3a03 	vstr	s6, [r7, #12]
 800389a:	60b8      	str	r0, [r7, #8]
 800389c:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 800389e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038a2:	2240      	movs	r2, #64	@ 0x40
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f00f fc02 	bl	80130b0 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 80038ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 80038ba:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80038be:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 80038c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80038c4:	eef1 6a67 	vneg.f32	s13, s15
 80038c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80038cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038d0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 80038d4:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 80038d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80038dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038e0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 80038e4:	edd7 6a04 	vldr	s13, [r7, #16]
 80038e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80038ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038f0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 80038f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80038f8:	eef1 6a67 	vneg.f32	s13, s15
 80038fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8003900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003904:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8003908:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800390c:	eef1 6a67 	vneg.f32	s13, s15
 8003910:	ed97 7a08 	vldr	s14, [r7, #32]
 8003914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003918:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 800391c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003920:	ed97 7a08 	vldr	s14, [r7, #32]
 8003924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003928:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    discretize_system_with_arm(A_c, B_c, dt, A, B);
 800392c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003930:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	ed97 0a03 	vldr	s0, [r7, #12]
 800393c:	f7ff fd1c 	bl	8003378 <discretize_system_with_arm>
}
 8003940:	bf00      	nop
 8003942:	3778      	adds	r7, #120	@ 0x78
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a0b      	ldr	r2, [pc, #44]	@ (8003988 <PWM_init+0x40>)
 800395a:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	88fa      	ldrh	r2, [r7, #6]
 8003966:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 800396e:	68b8      	ldr	r0, [r7, #8]
 8003970:	f00a fe5e 	bl	800e630 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	4619      	mov	r1, r3
 8003978:	68b8      	ldr	r0, [r7, #8]
 800397a:	f00a ffa5 	bl	800e8c8 <HAL_TIM_PWM_Start>
}
 800397e:	bf00      	nop
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	0a21fe80 	.word	0x0a21fe80

0800398c <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 800398c:	b5b0      	push	{r4, r5, r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	ed87 0a02 	vstr	s0, [r7, #8]
 8003998:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 800399c:	edd7 7a02 	vldr	s15, [r7, #8]
 80039a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a8:	d137      	bne.n	8003a1a <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	889b      	ldrh	r3, [r3, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d105      	bne.n	80039be <PWM_write_duty+0x32>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2200      	movs	r2, #0
 80039ba:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80039bc:	e0e1      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	889b      	ldrh	r3, [r3, #4]
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d105      	bne.n	80039d2 <PWM_write_duty+0x46>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	2300      	movs	r3, #0
 80039ce:	6393      	str	r3, [r2, #56]	@ 0x38
 80039d0:	e0d7      	b.n	8003b82 <PWM_write_duty+0x1f6>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	889b      	ldrh	r3, [r3, #4]
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d105      	bne.n	80039e6 <PWM_write_duty+0x5a>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	2300      	movs	r3, #0
 80039e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80039e4:	e0cd      	b.n	8003b82 <PWM_write_duty+0x1f6>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	889b      	ldrh	r3, [r3, #4]
 80039ea:	2b0c      	cmp	r3, #12
 80039ec:	d105      	bne.n	80039fa <PWM_write_duty+0x6e>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	2300      	movs	r3, #0
 80039f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80039f8:	e0c3      	b.n	8003b82 <PWM_write_duty+0x1f6>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	889b      	ldrh	r3, [r3, #4]
 80039fe:	2b10      	cmp	r3, #16
 8003a00:	d105      	bne.n	8003a0e <PWM_write_duty+0x82>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	6493      	str	r3, [r2, #72]	@ 0x48
 8003a0c:	e0b9      	b.n	8003b82 <PWM_write_duty+0x1f6>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2300      	movs	r3, #0
 8003a16:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003a18:	e0b3      	b.n	8003b82 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a26:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a32:	ee17 2a90 	vmov	r2, s15
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003a42:	33fe      	adds	r3, #254	@ 0xfe
 8003a44:	4a51      	ldr	r2, [pc, #324]	@ (8003b8c <PWM_write_duty+0x200>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	0bdb      	lsrs	r3, r3, #15
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	899b      	ldrh	r3, [r3, #12]
 8003a66:	3301      	adds	r3, #1
 8003a68:	ee07 3a90 	vmov	s15, r3
 8003a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a74:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a88:	ee17 3a90 	vmov	r3, s15
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	89db      	ldrh	r3, [r3, #14]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fc fd10 	bl	80004bc <__aeabi_i2d>
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	460d      	mov	r5, r1
 8003aa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aa4:	eef0 7ae7 	vabs.f32	s15, s15
 8003aa8:	ee17 0a90 	vmov	r0, s15
 8003aac:	f7fc fd18 	bl	80004e0 <__aeabi_f2d>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f7fc fd6a 	bl	8000590 <__aeabi_dmul>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	4b31      	ldr	r3, [pc, #196]	@ (8003b90 <PWM_write_duty+0x204>)
 8003aca:	f7fc fe8b 	bl	80007e4 <__aeabi_ddiv>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f7fd f81d 	bl	8000b14 <__aeabi_d2uiz>
 8003ada:	4603      	mov	r3, r0
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	899a      	ldrh	r2, [r3, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	89da      	ldrh	r2, [r3, #14]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	89da      	ldrh	r2, [r3, #14]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	889b      	ldrh	r3, [r3, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <PWM_write_duty+0x190>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	6952      	ldr	r2, [r2, #20]
 8003b18:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003b1a:	e032      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	889b      	ldrh	r3, [r3, #4]
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d106      	bne.n	8003b32 <PWM_write_duty+0x1a6>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003b30:	e027      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	889b      	ldrh	r3, [r3, #4]
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d106      	bne.n	8003b48 <PWM_write_duty+0x1bc>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003b46:	e01c      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	889b      	ldrh	r3, [r3, #4]
 8003b4c:	2b0c      	cmp	r3, #12
 8003b4e:	d106      	bne.n	8003b5e <PWM_write_duty+0x1d2>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003b5c:	e011      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	889b      	ldrh	r3, [r3, #4]
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d106      	bne.n	8003b74 <PWM_write_duty+0x1e8>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003b72:	e006      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003b80:	e7ff      	b.n	8003b82 <PWM_write_duty+0x1f6>
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bdb0      	pop	{r4, r5, r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	80008001 	.word	0x80008001
 8003b90:	40590000 	.word	0x40590000
 8003b94:	00000000 	.word	0x00000000

08003b98 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003b98:	b5b0      	push	{r4, r5, r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ba4:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003ba8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb4:	d137      	bne.n	8003c26 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	889b      	ldrh	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d105      	bne.n	8003bca <PWM_write_range+0x32>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003bc8:	e0e1      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	889b      	ldrh	r3, [r3, #4]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d105      	bne.n	8003bde <PWM_write_range+0x46>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	6393      	str	r3, [r2, #56]	@ 0x38
 8003bdc:	e0d7      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	889b      	ldrh	r3, [r3, #4]
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d105      	bne.n	8003bf2 <PWM_write_range+0x5a>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2300      	movs	r3, #0
 8003bee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003bf0:	e0cd      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	889b      	ldrh	r3, [r3, #4]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d105      	bne.n	8003c06 <PWM_write_range+0x6e>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	2300      	movs	r3, #0
 8003c02:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c04:	e0c3      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	889b      	ldrh	r3, [r3, #4]
 8003c0a:	2b10      	cmp	r3, #16
 8003c0c:	d105      	bne.n	8003c1a <PWM_write_range+0x82>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2300      	movs	r3, #0
 8003c16:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c18:	e0b9      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2300      	movs	r3, #0
 8003c22:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003c24:	e0b3      	b.n	8003d8e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c32:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c3e:	ee17 2a90 	vmov	r2, s15
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003c4e:	33fe      	adds	r3, #254	@ 0xfe
 8003c50:	4a53      	ldr	r2, [pc, #332]	@ (8003da0 <PWM_write_range+0x208>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	0bdb      	lsrs	r3, r3, #15
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	899b      	ldrh	r3, [r3, #12]
 8003c72:	3301      	adds	r3, #1
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c80:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c94:	ee17 3a90 	vmov	r3, s15
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	89db      	ldrh	r3, [r3, #14]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fc fc0a 	bl	80004bc <__aeabi_i2d>
 8003ca8:	4604      	mov	r4, r0
 8003caa:	460d      	mov	r5, r1
 8003cac:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cb0:	eef0 7ae7 	vabs.f32	s15, s15
 8003cb4:	ee17 0a90 	vmov	r0, s15
 8003cb8:	f7fc fc12 	bl	80004e0 <__aeabi_f2d>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	f7fc fc64 	bl	8000590 <__aeabi_dmul>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	a331      	add	r3, pc, #196	@ (adr r3, 8003d98 <PWM_write_range+0x200>)
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f7fc fd85 	bl	80007e4 <__aeabi_ddiv>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f7fc ff17 	bl	8000b14 <__aeabi_d2uiz>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	899a      	ldrh	r2, [r3, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	89da      	ldrh	r2, [r3, #14]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	89da      	ldrh	r2, [r3, #14]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	889b      	ldrh	r3, [r3, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <PWM_write_range+0x190>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	6952      	ldr	r2, [r2, #20]
 8003d24:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003d26:	e032      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	889b      	ldrh	r3, [r3, #4]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d106      	bne.n	8003d3e <PWM_write_range+0x1a6>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003d3c:	e027      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	889b      	ldrh	r3, [r3, #4]
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d106      	bne.n	8003d54 <PWM_write_range+0x1bc>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003d52:	e01c      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	889b      	ldrh	r3, [r3, #4]
 8003d58:	2b0c      	cmp	r3, #12
 8003d5a:	d106      	bne.n	8003d6a <PWM_write_range+0x1d2>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003d68:	e011      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	889b      	ldrh	r3, [r3, #4]
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d106      	bne.n	8003d80 <PWM_write_range+0x1e8>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003d7e:	e006      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003d8c:	e7ff      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bdb0      	pop	{r4, r5, r7, pc}
 8003d96:	bf00      	nop
 8003d98:	00000000 	.word	0x00000000
 8003d9c:	40efffe0 	.word	0x40efffe0
 8003da0:	80008001 	.word	0x80008001

08003da4 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6178      	str	r0, [r7, #20]
 8003dac:	6139      	str	r1, [r7, #16]
 8003dae:	60fa      	str	r2, [r7, #12]
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003db6:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2200      	movs	r2, #0
 8003de2:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8003e04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	fb93 f2f2 	sdiv	r2, r3, r2
 8003e0e:	68f9      	ldr	r1, [r7, #12]
 8003e10:	fb01 f202 	mul.w	r2, r1, r2
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2200      	movs	r2, #0
 8003e28:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003e72:	213c      	movs	r1, #60	@ 0x3c
 8003e74:	6938      	ldr	r0, [r7, #16]
 8003e76:	f00a ffe3 	bl	800ee40 <HAL_TIM_Encoder_Start>
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	0000      	movs	r0, r0
 8003e84:	0000      	movs	r0, r0
	...

08003e88 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003e88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	0fda      	lsrs	r2, r3, #31
 8003eb0:	4413      	add	r3, r2
 8003eb2:	105b      	asrs	r3, r3, #1
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	dd05      	ble.n	8003ec8 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	e00e      	b.n	8003ee6 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	0fda      	lsrs	r2, r3, #31
 8003ece:	4413      	add	r3, r2
 8003ed0:	105b      	asrs	r3, r3, #1
 8003ed2:	425b      	negs	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	da04      	bge.n	8003ee6 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	441a      	add	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	ee07 3a90 	vmov	s15, r3
 8003f08:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	ee07 3a90 	vmov	s15, r3
 8003f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f18:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fc fad3 	bl	80004e0 <__aeabi_f2d>
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	460d      	mov	r5, r1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003f5e:	ee17 0a90 	vmov	r0, s15
 8003f62:	f7fc fabd 	bl	80004e0 <__aeabi_f2d>
 8003f66:	a33c      	add	r3, pc, #240	@ (adr r3, 8004058 <QEI_get_diff_count+0x1d0>)
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f7fc fb10 	bl	8000590 <__aeabi_dmul>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4690      	mov	r8, r2
 8003f76:	4699      	mov	r9, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc faaf 	bl	80004e0 <__aeabi_f2d>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4640      	mov	r0, r8
 8003f88:	4649      	mov	r1, r9
 8003f8a:	f7fc fb01 	bl	8000590 <__aeabi_dmul>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4620      	mov	r0, r4
 8003f94:	4629      	mov	r1, r5
 8003f96:	f7fc f945 	bl	8000224 <__adddf3>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f7fc fdd7 	bl	8000b54 <__aeabi_d2f>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fc fa95 	bl	80004e0 <__aeabi_f2d>
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	460d      	mov	r5, r1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003fd6:	ee16 0a90 	vmov	r0, s13
 8003fda:	f7fc fa81 	bl	80004e0 <__aeabi_f2d>
 8003fde:	a31e      	add	r3, pc, #120	@ (adr r3, 8004058 <QEI_get_diff_count+0x1d0>)
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	f7fc fad4 	bl	8000590 <__aeabi_dmul>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4690      	mov	r8, r2
 8003fee:	4699      	mov	r9, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fc fa73 	bl	80004e0 <__aeabi_f2d>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4640      	mov	r0, r8
 8004000:	4649      	mov	r1, r9
 8004002:	f7fc fac5 	bl	8000590 <__aeabi_dmul>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4690      	mov	r8, r2
 800400c:	4699      	mov	r9, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004012:	4618      	mov	r0, r3
 8004014:	f7fc fa64 	bl	80004e0 <__aeabi_f2d>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4640      	mov	r0, r8
 800401e:	4649      	mov	r1, r9
 8004020:	f7fc fab6 	bl	8000590 <__aeabi_dmul>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4620      	mov	r0, r4
 800402a:	4629      	mov	r1, r5
 800402c:	f7fc f8fa 	bl	8000224 <__adddf3>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4610      	mov	r0, r2
 8004036:	4619      	mov	r1, r3
 8004038:	f7fc fd8c 	bl	8000b54 <__aeabi_d2f>
 800403c:	4602      	mov	r2, r0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	605a      	str	r2, [r3, #4]
}
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004054:	f3af 8000 	nop.w
 8004058:	54442d18 	.word	0x54442d18
 800405c:	400921fb 	.word	0x400921fb

08004060 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8004060:	b5b0      	push	{r4, r5, r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004070:	fb02 f303 	mul.w	r3, r2, r3
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc fa2a 	bl	80004e0 <__aeabi_f2d>
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	4b83      	ldr	r3, [pc, #524]	@ (80042a0 <QEI_compute_data+0x240>)
 8004092:	f7fc fa7d 	bl	8000590 <__aeabi_dmul>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4614      	mov	r4, r2
 800409c:	461d      	mov	r5, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040aa:	ee17 0a90 	vmov	r0, s15
 80040ae:	f7fc fa17 	bl	80004e0 <__aeabi_f2d>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4620      	mov	r0, r4
 80040b8:	4629      	mov	r1, r5
 80040ba:	f7fc fb93 	bl	80007e4 <__aeabi_ddiv>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4614      	mov	r4, r2
 80040c4:	461d      	mov	r5, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc fa08 	bl	80004e0 <__aeabi_f2d>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4620      	mov	r0, r4
 80040d6:	4629      	mov	r1, r5
 80040d8:	f7fc fa5a 	bl	8000590 <__aeabi_dmul>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	f7fc fd36 	bl	8000b54 <__aeabi_d2f>
 80040e8:	4602      	mov	r2, r0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80040f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040f8:	ee17 0a90 	vmov	r0, s15
 80040fc:	f7fc f9f0 	bl	80004e0 <__aeabi_f2d>
 8004100:	a365      	add	r3, pc, #404	@ (adr r3, 8004298 <QEI_compute_data+0x238>)
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	f7fc fa43 	bl	8000590 <__aeabi_dmul>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4614      	mov	r4, r2
 8004110:	461d      	mov	r5, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800411e:	ee17 0a90 	vmov	r0, s15
 8004122:	f7fc f9dd 	bl	80004e0 <__aeabi_f2d>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4620      	mov	r0, r4
 800412c:	4629      	mov	r1, r5
 800412e:	f7fc fb59 	bl	80007e4 <__aeabi_ddiv>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4614      	mov	r4, r2
 8004138:	461d      	mov	r5, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413e:	4618      	mov	r0, r3
 8004140:	f7fc f9ce 	bl	80004e0 <__aeabi_f2d>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4620      	mov	r0, r4
 800414a:	4629      	mov	r1, r5
 800414c:	f7fc fa20 	bl	8000590 <__aeabi_dmul>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4610      	mov	r0, r2
 8004156:	4619      	mov	r1, r3
 8004158:	f7fc fcfc 	bl	8000b54 <__aeabi_d2f>
 800415c:	4602      	mov	r2, r0
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004166:	4618      	mov	r0, r3
 8004168:	f7fc f9ba 	bl	80004e0 <__aeabi_f2d>
 800416c:	a34a      	add	r3, pc, #296	@ (adr r3, 8004298 <QEI_compute_data+0x238>)
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f7fc fa0d 	bl	8000590 <__aeabi_dmul>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4614      	mov	r4, r2
 800417c:	461d      	mov	r5, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004182:	4618      	mov	r0, r3
 8004184:	f7fc f9ac 	bl	80004e0 <__aeabi_f2d>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4620      	mov	r0, r4
 800418e:	4629      	mov	r1, r5
 8004190:	f7fc f9fe 	bl	8000590 <__aeabi_dmul>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4614      	mov	r4, r2
 800419a:	461d      	mov	r5, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041a8:	ee17 0a90 	vmov	r0, s15
 80041ac:	f7fc f998 	bl	80004e0 <__aeabi_f2d>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4620      	mov	r0, r4
 80041b6:	4629      	mov	r1, r5
 80041b8:	f7fc fb14 	bl	80007e4 <__aeabi_ddiv>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4614      	mov	r4, r2
 80041c2:	461d      	mov	r5, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fc f989 	bl	80004e0 <__aeabi_f2d>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4620      	mov	r0, r4
 80041d4:	4629      	mov	r1, r5
 80041d6:	f7fc f9db 	bl	8000590 <__aeabi_dmul>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4610      	mov	r0, r2
 80041e0:	4619      	mov	r1, r3
 80041e2:	f7fc fcb7 	bl	8000b54 <__aeabi_d2f>
 80041e6:	4602      	mov	r2, r0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	edd3 7a03 	vldr	s15, [r3, #12]
 8004208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800420c:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8004210:	edd7 7a03 	vldr	s15, [r7, #12]
 8004214:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421c:	d00a      	beq.n	8004234 <QEI_compute_data+0x1d4>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800422a:	edd7 7a03 	vldr	s15, [r7, #12]
 800422e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004232:	e001      	b.n	8004238 <QEI_compute_data+0x1d8>
 8004234:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80042a4 <QEI_compute_data+0x244>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	ed93 7a04 	vldr	s14, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	edd3 7a05 	vldr	s15, [r3, #20]
 800424a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800424e:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8004252:	edd7 7a02 	vldr	s15, [r7, #8]
 8004256:	eef5 7a40 	vcmp.f32	s15, #0.0
 800425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425e:	d00a      	beq.n	8004276 <QEI_compute_data+0x216>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004264:	ee07 3a90 	vmov	s15, r3
 8004268:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800426c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004274:	e001      	b.n	800427a <QEI_compute_data+0x21a>
 8004276:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80042a4 <QEI_compute_data+0x244>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	615a      	str	r2, [r3, #20]
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bdb0      	pop	{r4, r5, r7, pc}
 8004298:	54442d18 	.word	0x54442d18
 800429c:	400921fb 	.word	0x400921fb
 80042a0:	404e0000 	.word	0x404e0000
 80042a4:	00000000 	.word	0x00000000

080042a8 <QEI_reset>:

void QEI_reset(QEI *qei) {
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
    // Reset counter history
    qei->c[NOW] = 0;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->pulses = 0;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	649a      	str	r2, [r3, #72]	@ 0x48

    // Reset velocity history
    qei->r[NOW] = 0;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	615a      	str	r2, [r3, #20]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b08e      	sub	sp, #56	@ 0x38
 8004318:	af00      	add	r7, sp, #0
 800431a:	6178      	str	r0, [r7, #20]
 800431c:	ed87 0a04 	vstr	s0, [r7, #16]
 8004320:	edc7 0a03 	vstr	s1, [r7, #12]
 8004324:	ed87 1a02 	vstr	s2, [r7, #8]
 8004328:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2200      	movs	r2, #0
 8004330:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8004352:	ed97 7a03 	vldr	s14, [r7, #12]
 8004356:	edd7 7a04 	vldr	s15, [r7, #16]
 800435a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800435e:	eef0 7ae7 	vabs.f32	s15, s15
 8004362:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8004366:	ed97 7a03 	vldr	s14, [r7, #12]
 800436a:	edd7 7a04 	vldr	s15, [r7, #16]
 800436e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004372:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437a:	d503      	bpl.n	8004384 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	22ff      	movs	r2, #255	@ 0xff
 8004380:	741a      	strb	r2, [r3, #16]
 8004382:	e002      	b.n	800438a <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2201      	movs	r2, #1
 8004388:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 800438a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800438e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004396:	d006      	beq.n	80043a6 <Trapezoidal_Generator+0x92>
 8004398:	edd7 7a01 	vldr	s15, [r7, #4]
 800439c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a4:	d104      	bne.n	80043b0 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	60da      	str	r2, [r3, #12]
        return;
 80043ae:	e06f      	b.n	8004490 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 80043b0:	edd7 6a02 	vldr	s13, [r7, #8]
 80043b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80043b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043bc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 80043c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80043c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80043c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043cc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80043d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80043d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043dc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 80043e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 80043e4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80043e8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80043ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043f0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 80043f4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80043f8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80043fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004404:	db27      	blt.n	8004456 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8004406:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800440a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800440e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004412:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8004416:	edd7 6a07 	vldr	s13, [r7, #28]
 800441a:	ed97 7a02 	vldr	s14, [r7, #8]
 800441e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004422:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442a:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 800442c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004430:	edd7 7a06 	vldr	s15, [r7, #24]
 8004434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 800443e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004442:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004446:	edd7 7a06 	vldr	s15, [r7, #24]
 800444a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	edc3 7a02 	vstr	s15, [r3, #8]
 8004454:	e018      	b.n	8004488 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8004456:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800445a:	edd7 7a01 	vldr	s15, [r7, #4]
 800445e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004462:	eeb0 0a66 	vmov.f32	s0, s13
 8004466:	f00e ff3f 	bl	80132e8 <sqrtf>
 800446a:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	6a3a      	ldr	r2, [r7, #32]
 8004472:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	6a3a      	ldr	r2, [r7, #32]
 8004478:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 800447a:	edd7 7a08 	vldr	s15, [r7, #32]
 800447e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	60da      	str	r2, [r3, #12]
}
 8004490:	3738      	adds	r7, #56	@ 0x38
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8004498:	b480      	push	{r7}
 800449a:	b08d      	sub	sp, #52	@ 0x34
 800449c:	af00      	add	r7, sp, #0
 800449e:	6178      	str	r0, [r7, #20]
 80044a0:	6139      	str	r1, [r7, #16]
 80044a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80044a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80044aa:	ed87 1a01 	vstr	s2, [r7, #4]
 80044ae:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80044b8:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800473c <Trapezoidal_Evaluated+0x2a4>
 80044bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80044d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044da:	f200 811b 	bhi.w	8004714 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2200      	movs	r2, #0
 80044e2:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	7c1b      	ldrb	r3, [r3, #16]
 80044e8:	b25b      	sxtb	r3, r3
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044f2:	ed97 7a00 	vldr	s14, [r7]
 80044f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	ed93 7a00 	vldr	s14, [r3]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	edd3 7a01 	vldr	s15, [r3, #4]
 800450a:	eeb4 7a67 	vcmp.f32	s14, s15
 800450e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004512:	d109      	bne.n	8004528 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	edd3 7a00 	vldr	s15, [r3]
 800451a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800451e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004522:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8004526:	e00c      	b.n	8004542 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	7c1b      	ldrb	r3, [r3, #16]
 800452c:	b25b      	sxtb	r3, r3
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004536:	ed97 7a01 	vldr	s14, [r7, #4]
 800453a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	ed93 7a03 	vldr	s14, [r3, #12]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	edd3 7a00 	vldr	s15, [r3]
 800454e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004556:	d824      	bhi.n	80045a2 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8004558:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800455c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004560:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	edd3 7a03 	vldr	s15, [r3, #12]
 800456a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	edd3 7a03 	vldr	s15, [r3, #12]
 8004574:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004578:	edd7 7a03 	vldr	s15, [r7, #12]
 800457c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	ed93 7a03 	vldr	s14, [r3, #12]
 800458c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800459e:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 80045a0:	e0c6      	b.n	8004730 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80045ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b6:	d830      	bhi.n	800461a <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 80045b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80045bc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80045c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	edd3 7a00 	vldr	s15, [r3]
 80045ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	edd3 7a00 	vldr	s15, [r3]
 80045d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80045dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e0:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	edd3 7a00 	vldr	s15, [r3]
 80045f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045f4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80045f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8004600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800460e:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	609a      	str	r2, [r3, #8]
}
 8004618:	e08a      	b.n	8004730 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	edd3 7a02 	vldr	s15, [r3, #8]
 8004626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462e:	d900      	bls.n	8004632 <Trapezoidal_Evaluated+0x19a>
}
 8004630:	e07e      	b.n	8004730 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8004632:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004636:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800463a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	edd3 7a00 	vldr	s15, [r3]
 8004644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	edd3 7a00 	vldr	s15, [r3]
 800464e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004652:	ed97 7a03 	vldr	s14, [r7, #12]
 8004656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800465a:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	ed93 7a01 	vldr	s14, [r3, #4]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	edd3 7a00 	vldr	s15, [r3]
 800466e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004676:	dd11      	ble.n	800469c <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	ed93 7a01 	vldr	s14, [r3, #4]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	edd3 7a00 	vldr	s15, [r3]
 8004684:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004688:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800468c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004690:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004698:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	ed93 7a03 	vldr	s14, [r3, #12]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80046a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ac:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 80046b0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80046b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80046b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046bc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80046c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80046c8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80046cc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80046d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80046d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80046d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80046dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 80046ea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80046ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80046f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80046fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8004704:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004708:	eef1 7a67 	vneg.f32	s15, s15
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004712:	e00d      	b.n	8004730 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	2201      	movs	r2, #1
 8004718:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	609a      	str	r2, [r3, #8]
}
 8004730:	bf00      	nop
 8004732:	3734      	adds	r7, #52	@ 0x34
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	3a83126f 	.word	0x3a83126f

08004740 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	ed87 0a01 	vstr	s0, [r7, #4]
 800474a:	4603      	mov	r3, r0
 800474c:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	2b1a      	cmp	r3, #26
 8004752:	d018      	beq.n	8004786 <temperature_to_base+0x46>
 8004754:	2b1a      	cmp	r3, #26
 8004756:	dc1d      	bgt.n	8004794 <temperature_to_base+0x54>
 8004758:	2b18      	cmp	r3, #24
 800475a:	d002      	beq.n	8004762 <temperature_to_base+0x22>
 800475c:	2b19      	cmp	r3, #25
 800475e:	d003      	beq.n	8004768 <temperature_to_base+0x28>
 8004760:	e018      	b.n	8004794 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004762:	edd7 7a01 	vldr	s15, [r7, #4]
 8004766:	e017      	b.n	8004798 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8004768:	edd7 7a01 	vldr	s15, [r7, #4]
 800476c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80047a8 <temperature_to_base+0x68>
 8004770:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004774:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004778:	ee27 7a87 	vmul.f32	s14, s15, s14
 800477c:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8004780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004784:	e008      	b.n	8004798 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 8004786:	edd7 7a01 	vldr	s15, [r7, #4]
 800478a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80047ac <temperature_to_base+0x6c>
 800478e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004792:	e001      	b.n	8004798 <temperature_to_base+0x58>
        default:
            return value;
 8004794:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004798:	eeb0 0a67 	vmov.f32	s0, s15
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	42000000 	.word	0x42000000
 80047ac:	43889333 	.word	0x43889333

080047b0 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80047ba:	4603      	mov	r3, r0
 80047bc:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	2b1a      	cmp	r3, #26
 80047c2:	d018      	beq.n	80047f6 <temperature_from_base+0x46>
 80047c4:	2b1a      	cmp	r3, #26
 80047c6:	dc1d      	bgt.n	8004804 <temperature_from_base+0x54>
 80047c8:	2b18      	cmp	r3, #24
 80047ca:	d002      	beq.n	80047d2 <temperature_from_base+0x22>
 80047cc:	2b19      	cmp	r3, #25
 80047ce:	d003      	beq.n	80047d8 <temperature_from_base+0x28>
 80047d0:	e018      	b.n	8004804 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80047d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80047d6:	e017      	b.n	8004808 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 80047d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80047dc:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80047e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80047e4:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80047e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047ec:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004818 <temperature_from_base+0x68>
 80047f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047f4:	e008      	b.n	8004808 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 80047f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80047fa:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800481c <temperature_from_base+0x6c>
 80047fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004802:	e001      	b.n	8004808 <temperature_from_base+0x58>
        default:
            return value;
 8004804:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004808:	eeb0 0a67 	vmov.f32	s0, s15
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	42000000 	.word	0x42000000
 800481c:	43889333 	.word	0x43889333

08004820 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	e00a      	b.n	8004850 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	3304      	adds	r3, #4
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3301      	adds	r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b1a      	cmp	r3, #26
 8004854:	ddf1      	ble.n	800483a <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a11      	ldr	r2, [pc, #68]	@ (80048a0 <init_length_converter+0x80>)
 800485a:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a11      	ldr	r2, [pc, #68]	@ (80048a4 <init_length_converter+0x84>)
 8004860:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004868:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a0e      	ldr	r2, [pc, #56]	@ (80048a8 <init_length_converter+0x88>)
 800486e:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a0e      	ldr	r2, [pc, #56]	@ (80048ac <init_length_converter+0x8c>)
 8004874:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a0d      	ldr	r2, [pc, #52]	@ (80048b0 <init_length_converter+0x90>)
 800487a:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a0d      	ldr	r2, [pc, #52]	@ (80048b4 <init_length_converter+0x94>)
 8004880:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a0c      	ldr	r2, [pc, #48]	@ (80048b8 <init_length_converter+0x98>)
 8004886:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004894:	bf00      	nop
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	3a83126f 	.word	0x3a83126f
 80048a4:	3c23d70a 	.word	0x3c23d70a
 80048a8:	447a0000 	.word	0x447a0000
 80048ac:	3cd013a9 	.word	0x3cd013a9
 80048b0:	3e9c0ebf 	.word	0x3e9c0ebf
 80048b4:	3f6a161e 	.word	0x3f6a161e
 80048b8:	44c92b02 	.word	0x44c92b02

080048bc <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	220a      	movs	r2, #10
 80048ce:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e00a      	b.n	80048ec <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	3304      	adds	r3, #4
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3301      	adds	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b1a      	cmp	r3, #26
 80048f0:	ddf1      	ble.n	80048d6 <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004930 <init_mass_converter+0x74>)
 80048f6:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004934 <init_mass_converter+0x78>)
 80048fc:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004904:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a0b      	ldr	r2, [pc, #44]	@ (8004938 <init_mass_converter+0x7c>)
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a0b      	ldr	r2, [pc, #44]	@ (800493c <init_mass_converter+0x80>)
 8004910:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a0a      	ldr	r2, [pc, #40]	@ (8004940 <init_mass_converter+0x84>)
 8004916:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004924:	bf00      	nop
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	358637bd 	.word	0x358637bd
 8004934:	3a83126f 	.word	0x3a83126f
 8004938:	447a0000 	.word	0x447a0000
 800493c:	3ce83d36 	.word	0x3ce83d36
 8004940:	3ee83d36 	.word	0x3ee83d36

08004944 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	220f      	movs	r2, #15
 8004956:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	e00a      	b.n	8004974 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	3304      	adds	r3, #4
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3301      	adds	r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b1a      	cmp	r3, #26
 8004978:	ddf1      	ble.n	800495e <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a0a      	ldr	r2, [pc, #40]	@ (80049a8 <init_angle_converter+0x64>)
 800497e:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004986:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a08      	ldr	r2, [pc, #32]	@ (80049ac <init_angle_converter+0x68>)
 800498c:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	3c8efa35 	.word	0x3c8efa35
 80049ac:	3c80adfd 	.word	0x3c80adfd

080049b0 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2203      	movs	r2, #3
 80049bc:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2214      	movs	r2, #20
 80049c2:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e00a      	b.n	80049e0 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	3304      	adds	r3, #4
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3301      	adds	r3, #1
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b1a      	cmp	r3, #26
 80049e4:	ddf1      	ble.n	80049ca <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a10      	ldr	r2, [pc, #64]	@ (8004a2c <init_time_converter+0x7c>)
 80049ea:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a10      	ldr	r2, [pc, #64]	@ (8004a30 <init_time_converter+0x80>)
 80049f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a0f      	ldr	r2, [pc, #60]	@ (8004a34 <init_time_converter+0x84>)
 80049f6:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80049fe:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a0d      	ldr	r2, [pc, #52]	@ (8004a38 <init_time_converter+0x88>)
 8004a04:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a0c      	ldr	r2, [pc, #48]	@ (8004a3c <init_time_converter+0x8c>)
 8004a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004a40 <init_time_converter+0x90>)
 8004a10:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	3089705f 	.word	0x3089705f
 8004a30:	358637bd 	.word	0x358637bd
 8004a34:	3a83126f 	.word	0x3a83126f
 8004a38:	42700000 	.word	0x42700000
 8004a3c:	45610000 	.word	0x45610000
 8004a40:	47a8c000 	.word	0x47a8c000

08004a44 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2204      	movs	r2, #4
 8004a50:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2218      	movs	r2, #24
 8004a56:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e00a      	b.n	8004a74 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	3304      	adds	r3, #4
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3301      	adds	r3, #1
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b1a      	cmp	r3, #26
 8004a78:	ddf1      	ble.n	8004a5e <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a05      	ldr	r2, [pc, #20]	@ (8004a94 <init_temperature_converter+0x50>)
 8004a7e:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a05      	ldr	r2, [pc, #20]	@ (8004a98 <init_temperature_converter+0x54>)
 8004a84:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	08004741 	.word	0x08004741
 8004a98:	080047b1 	.word	0x080047b1

08004a9c <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff feba 	bl	8004820 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3378      	adds	r3, #120	@ 0x78
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff ff03 	bl	80048bc <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	33f0      	adds	r3, #240	@ 0xf0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff ff42 	bl	8004944 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff ff72 	bl	80049b0 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff ffb6 	bl	8004a44 <init_temperature_converter>
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	2b1a      	cmp	r3, #26
 8004aee:	d803      	bhi.n	8004af8 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	4a05      	ldr	r2, [pc, #20]	@ (8004b08 <UnitConverter_get_unit_type+0x28>)
 8004af4:	5cd3      	ldrb	r3, [r2, r3]
 8004af6:	e000      	b.n	8004afa <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20000318 	.word	0x20000318

08004b0c <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	71fb      	strb	r3, [r7, #7]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff ffdc 	bl	8004ae0 <UnitConverter_get_unit_type>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 8004b2c:	79bb      	ldrb	r3, [r7, #6]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff ffd6 	bl	8004ae0 <UnitConverter_get_unit_type>
 8004b34:	4603      	mov	r3, r0
 8004b36:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 8004b38:	7efa      	ldrb	r2, [r7, #27]
 8004b3a:	7ebb      	ldrb	r3, [r7, #26]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d002      	beq.n	8004b46 <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004b40:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b44:	e03b      	b.n	8004bbe <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 8004b46:	7efa      	ldrb	r2, [r7, #27]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	1a9b      	subs	r3, r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b62:	79fa      	ldrb	r2, [r7, #7]
 8004b64:	4610      	mov	r0, r2
 8004b66:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b6a:	4798      	blx	r3
 8004b6c:	ed87 0a07 	vstr	s0, [r7, #28]
 8004b70:	e00c      	b.n	8004b8c <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	edd3 7a00 	vldr	s15, [r3]
 8004b80:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b88:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d009      	beq.n	8004ba8 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b98:	79ba      	ldrb	r2, [r7, #6]
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	ed97 0a07 	vldr	s0, [r7, #28]
 8004ba0:	4798      	blx	r3
 8004ba2:	eef0 7a40 	vmov.f32	s15, s0
 8004ba6:	e00a      	b.n	8004bbe <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 8004ba8:	79bb      	ldrb	r3, [r7, #6]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	ed93 7a00 	vldr	s14, [r3]
 8004bb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 8004bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8004bc2:	3720      	adds	r7, #32
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	71fb      	strb	r3, [r7, #7]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff ff7e 	bl	8004ae0 <UnitConverter_get_unit_type>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d111      	bne.n	8004c0e <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 8004bea:	79bb      	ldrb	r3, [r7, #6]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff ff77 	bl	8004ae0 <UnitConverter_get_unit_type>
 8004bf2:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d10a      	bne.n	8004c0e <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 8004bf8:	79ba      	ldrb	r2, [r7, #6]
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	ed97 0a02 	vldr	s0, [r7, #8]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f7ff ff82 	bl	8004b0c <UnitConverter_convert>
 8004c08:	eef0 7a40 	vmov.f32	s15, s0
 8004c0c:	e001      	b.n	8004c12 <UnitConverter_angle+0x4a>
    }
    return value;
 8004c0e:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8004c12:	eeb0 0a67 	vmov.f32	s0, s15
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08c      	sub	sp, #48	@ 0x30
 8004c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	605a      	str	r2, [r3, #4]
 8004c2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004c2e:	1d3b      	adds	r3, r7, #4
 8004c30:	2220      	movs	r2, #32
 8004c32:	2100      	movs	r1, #0
 8004c34:	4618      	mov	r0, r3
 8004c36:	f00e fa3b 	bl	80130b0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004c3a:	4b39      	ldr	r3, [pc, #228]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c3c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004c40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004c42:	4b37      	ldr	r3, [pc, #220]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c44:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004c48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004c4a:	4b35      	ldr	r3, [pc, #212]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c50:	4b33      	ldr	r3, [pc, #204]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004c56:	4b32      	ldr	r3, [pc, #200]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004c5c:	4b30      	ldr	r3, [pc, #192]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004c62:	4b2f      	ldr	r3, [pc, #188]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c64:	2204      	movs	r2, #4
 8004c66:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004c68:	4b2d      	ldr	r3, [pc, #180]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004c74:	4b2a      	ldr	r3, [pc, #168]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c76:	2202      	movs	r2, #2
 8004c78:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004c7a:	4b29      	ldr	r3, [pc, #164]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c82:	4b27      	ldr	r3, [pc, #156]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c88:	4b25      	ldr	r3, [pc, #148]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004c8e:	4b24      	ldr	r3, [pc, #144]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004c96:	4b22      	ldr	r3, [pc, #136]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004c9c:	4b20      	ldr	r3, [pc, #128]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ca4:	481e      	ldr	r0, [pc, #120]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004ca6:	f006 fbd5 	bl	800b454 <HAL_ADC_Init>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004cb0:	f004 fbf0 	bl	8009494 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4818      	ldr	r0, [pc, #96]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004cc0:	f007 fcf4 	bl	800c6ac <HAL_ADCEx_MultiModeConfigChannel>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004cca:	f004 fbe3 	bl	8009494 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004cce:	4b15      	ldr	r3, [pc, #84]	@ (8004d24 <MX_ADC1_Init+0x108>)
 8004cd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004cd2:	2306      	movs	r3, #6
 8004cd4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004cd6:	2307      	movs	r3, #7
 8004cd8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004cda:	237f      	movs	r3, #127	@ 0x7f
 8004cdc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004cde:	2304      	movs	r3, #4
 8004ce0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ce6:	1d3b      	adds	r3, r7, #4
 8004ce8:	4619      	mov	r1, r3
 8004cea:	480d      	ldr	r0, [pc, #52]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004cec:	f006 fe60 	bl	800b9b0 <HAL_ADC_ConfigChannel>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8004cf6:	f004 fbcd 	bl	8009494 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004d28 <MX_ADC1_Init+0x10c>)
 8004cfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004cfe:	230c      	movs	r3, #12
 8004d00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d02:	1d3b      	adds	r3, r7, #4
 8004d04:	4619      	mov	r1, r3
 8004d06:	4806      	ldr	r0, [pc, #24]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004d08:	f006 fe52 	bl	800b9b0 <HAL_ADC_ConfigChannel>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004d12:	f004 fbbf 	bl	8009494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004d16:	bf00      	nop
 8004d18:	3730      	adds	r7, #48	@ 0x30
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	20000638 	.word	0x20000638
 8004d24:	19200040 	.word	0x19200040
 8004d28:	1d500080 	.word	0x1d500080

08004d2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b09e      	sub	sp, #120	@ 0x78
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	609a      	str	r2, [r3, #8]
 8004d40:	60da      	str	r2, [r3, #12]
 8004d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d44:	f107 0310 	add.w	r3, r7, #16
 8004d48:	2254      	movs	r2, #84	@ 0x54
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f00e f9af 	bl	80130b0 <memset>
  if(adcHandle->Instance==ADC1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d5a:	d15e      	bne.n	8004e1a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004d5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d60:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004d62:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004d66:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d68:	f107 0310 	add.w	r3, r7, #16
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f009 f9ad 	bl	800e0cc <HAL_RCCEx_PeriphCLKConfig>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004d78:	f004 fb8c 	bl	8009494 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004d7c:	4b29      	ldr	r3, [pc, #164]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d80:	4a28      	ldr	r2, [pc, #160]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d88:	4b26      	ldr	r3, [pc, #152]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d94:	4b23      	ldr	r3, [pc, #140]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d98:	4a22      	ldr	r2, [pc, #136]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d9a:	f043 0304 	orr.w	r3, r3, #4
 8004d9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004da0:	4b20      	ldr	r3, [pc, #128]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004dac:	2303      	movs	r3, #3
 8004dae:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004db0:	2303      	movs	r3, #3
 8004db2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004db8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	481a      	ldr	r0, [pc, #104]	@ (8004e28 <HAL_ADC_MspInit+0xfc>)
 8004dc0:	f008 f9be 	bl	800d140 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004dc4:	4b19      	ldr	r3, [pc, #100]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dc6:	4a1a      	ldr	r2, [pc, #104]	@ (8004e30 <HAL_ADC_MspInit+0x104>)
 8004dc8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004dca:	4b18      	ldr	r3, [pc, #96]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dcc:	2205      	movs	r2, #5
 8004dce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004dd0:	4b16      	ldr	r3, [pc, #88]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dd6:	4b15      	ldr	r3, [pc, #84]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004ddc:	4b13      	ldr	r3, [pc, #76]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dde:	2280      	movs	r2, #128	@ 0x80
 8004de0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004de2:	4b12      	ldr	r3, [pc, #72]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004de4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004de8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004dea:	4b10      	ldr	r3, [pc, #64]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004df0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004df2:	4b0e      	ldr	r3, [pc, #56]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004df4:	2220      	movs	r2, #32
 8004df6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004df8:	4b0c      	ldr	r3, [pc, #48]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004dfe:	480b      	ldr	r0, [pc, #44]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004e00:	f007 fe6c 	bl	800cadc <HAL_DMA_Init>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8004e0a:	f004 fb43 	bl	8009494 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a06      	ldr	r2, [pc, #24]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004e12:	655a      	str	r2, [r3, #84]	@ 0x54
 8004e14:	4a05      	ldr	r2, [pc, #20]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004e1a:	bf00      	nop
 8004e1c:	3778      	adds	r7, #120	@ 0x78
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40021000 	.word	0x40021000
 8004e28:	48000800 	.word	0x48000800
 8004e2c:	200006a4 	.word	0x200006a4
 8004e30:	40020008 	.word	0x40020008

08004e34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004e3a:	4b22      	ldr	r3, [pc, #136]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e3e:	4a21      	ldr	r2, [pc, #132]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e40:	f043 0304 	orr.w	r3, r3, #4
 8004e44:	6493      	str	r3, [r2, #72]	@ 0x48
 8004e46:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	607b      	str	r3, [r7, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e52:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e56:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e58:	f043 0301 	orr.w	r3, r3, #1
 8004e5c:	6493      	str	r3, [r2, #72]	@ 0x48
 8004e5e:	4b19      	ldr	r3, [pc, #100]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	200b      	movs	r0, #11
 8004e70:	f007 fdff 	bl	800ca72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004e74:	200b      	movs	r0, #11
 8004e76:	f007 fe16 	bl	800caa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	200c      	movs	r0, #12
 8004e80:	f007 fdf7 	bl	800ca72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004e84:	200c      	movs	r0, #12
 8004e86:	f007 fe0e 	bl	800caa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	200d      	movs	r0, #13
 8004e90:	f007 fdef 	bl	800ca72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004e94:	200d      	movs	r0, #13
 8004e96:	f007 fe06 	bl	800caa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	200e      	movs	r0, #14
 8004ea0:	f007 fde7 	bl	800ca72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004ea4:	200e      	movs	r0, #14
 8004ea6:	f007 fdfe 	bl	800caa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2100      	movs	r1, #0
 8004eae:	200f      	movs	r0, #15
 8004eb0:	f007 fddf 	bl	800ca72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004eb4:	200f      	movs	r0, #15
 8004eb6:	f007 fdf6 	bl	800caa6 <HAL_NVIC_EnableIRQ>

}
 8004eba:	bf00      	nop
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40021000 	.word	0x40021000

08004ec8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	@ 0x28
 8004ecc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ece:	f107 0314 	add.w	r3, r7, #20
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	605a      	str	r2, [r3, #4]
 8004ed8:	609a      	str	r2, [r3, #8]
 8004eda:	60da      	str	r2, [r3, #12]
 8004edc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ede:	4b7c      	ldr	r3, [pc, #496]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee2:	4a7b      	ldr	r2, [pc, #492]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004ee4:	f043 0304 	orr.w	r3, r3, #4
 8004ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004eea:	4b79      	ldr	r3, [pc, #484]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ef6:	4b76      	ldr	r3, [pc, #472]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004efa:	4a75      	ldr	r2, [pc, #468]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004efc:	f043 0320 	orr.w	r3, r3, #32
 8004f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f02:	4b73      	ldr	r3, [pc, #460]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f0e:	4b70      	ldr	r3, [pc, #448]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f12:	4a6f      	ldr	r2, [pc, #444]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f26:	4b6a      	ldr	r3, [pc, #424]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f2a:	4a69      	ldr	r2, [pc, #420]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f2c:	f043 0302 	orr.w	r3, r3, #2
 8004f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f32:	4b67      	ldr	r3, [pc, #412]	@ (80050d0 <MX_GPIO_Init+0x208>)
 8004f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	607b      	str	r3, [r7, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f48:	f008 fa94 	bl	800d474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f52:	4860      	ldr	r0, [pc, #384]	@ (80050d4 <MX_GPIO_Init+0x20c>)
 8004f54:	f008 fa8e 	bl	800d474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004f58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004f68:	f107 0314 	add.w	r3, r7, #20
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4859      	ldr	r0, [pc, #356]	@ (80050d4 <MX_GPIO_Init+0x20c>)
 8004f70:	f008 f8e6 	bl	800d140 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004f74:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f82:	2300      	movs	r3, #0
 8004f84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f90:	f008 f8d6 	bl	800d140 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 8004f94:	f241 0301 	movw	r3, #4097	@ 0x1001
 8004f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fa4:	f107 0314 	add.w	r3, r7, #20
 8004fa8:	4619      	mov	r1, r3
 8004faa:	484b      	ldr	r0, [pc, #300]	@ (80050d8 <MX_GPIO_Init+0x210>)
 8004fac:	f008 f8c8 	bl	800d140 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004fb0:	2306      	movs	r3, #6
 8004fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fbc:	f107 0314 	add.w	r3, r7, #20
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4845      	ldr	r0, [pc, #276]	@ (80050d8 <MX_GPIO_Init+0x210>)
 8004fc4:	f008 f8bc 	bl	800d140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fda:	f107 0314 	add.w	r3, r7, #20
 8004fde:	4619      	mov	r1, r3
 8004fe0:	483c      	ldr	r0, [pc, #240]	@ (80050d4 <MX_GPIO_Init+0x20c>)
 8004fe2:	f008 f8ad 	bl	800d140 <HAL_GPIO_Init>

  /*Configure GPIO pin : upperphoto_Pin */
  GPIO_InitStruct.Pin = upperphoto_Pin;
 8004fe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(upperphoto_GPIO_Port, &GPIO_InitStruct);
 8004ff6:	f107 0314 	add.w	r3, r7, #20
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005000:	f008 f89e 	bl	800d140 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 8005004:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005008:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800500a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800500e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005010:	2302      	movs	r3, #2
 8005012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005014:	f107 0314 	add.w	r3, r7, #20
 8005018:	4619      	mov	r1, r3
 800501a:	482e      	ldr	r0, [pc, #184]	@ (80050d4 <MX_GPIO_Init+0x20c>)
 800501c:	f008 f890 	bl	800d140 <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 8005020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005026:	2300      	movs	r3, #0
 8005028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800502a:	2302      	movs	r3, #2
 800502c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 800502e:	f107 0314 	add.w	r3, r7, #20
 8005032:	4619      	mov	r1, r3
 8005034:	4827      	ldr	r0, [pc, #156]	@ (80050d4 <MX_GPIO_Init+0x20c>)
 8005036:	f008 f883 	bl	800d140 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 800503a:	2310      	movs	r3, #16
 800503c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800503e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8005042:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005044:	2300      	movs	r3, #0
 8005046:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8005048:	f107 0314 	add.w	r3, r7, #20
 800504c:	4619      	mov	r1, r3
 800504e:	4822      	ldr	r0, [pc, #136]	@ (80050d8 <MX_GPIO_Init+0x210>)
 8005050:	f008 f876 	bl	800d140 <HAL_GPIO_Init>

  /*Configure GPIO pins : prox_Pin PROX_Pin */
  GPIO_InitStruct.Pin = prox_Pin|PROX_Pin;
 8005054:	2360      	movs	r3, #96	@ 0x60
 8005056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005058:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800505c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800505e:	2301      	movs	r3, #1
 8005060:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005062:	f107 0314 	add.w	r3, r7, #20
 8005066:	4619      	mov	r1, r3
 8005068:	481b      	ldr	r0, [pc, #108]	@ (80050d8 <MX_GPIO_Init+0x210>)
 800506a:	f008 f869 	bl	800d140 <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 800506e:	2380      	movs	r3, #128	@ 0x80
 8005070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005072:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005078:	2302      	movs	r3, #2
 800507a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 800507c:	f107 0314 	add.w	r3, r7, #20
 8005080:	4619      	mov	r1, r3
 8005082:	4815      	ldr	r0, [pc, #84]	@ (80050d8 <MX_GPIO_Init+0x210>)
 8005084:	f008 f85c 	bl	800d140 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005088:	2200      	movs	r2, #0
 800508a:	2100      	movs	r1, #0
 800508c:	2006      	movs	r0, #6
 800508e:	f007 fcf0 	bl	800ca72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005092:	2006      	movs	r0, #6
 8005094:	f007 fd07 	bl	800caa6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005098:	2200      	movs	r2, #0
 800509a:	2100      	movs	r1, #0
 800509c:	200a      	movs	r0, #10
 800509e:	f007 fce8 	bl	800ca72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80050a2:	200a      	movs	r0, #10
 80050a4:	f007 fcff 	bl	800caa6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80050a8:	2200      	movs	r2, #0
 80050aa:	2100      	movs	r1, #0
 80050ac:	2017      	movs	r0, #23
 80050ae:	f007 fce0 	bl	800ca72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80050b2:	2017      	movs	r0, #23
 80050b4:	f007 fcf7 	bl	800caa6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80050b8:	2200      	movs	r2, #0
 80050ba:	2100      	movs	r1, #0
 80050bc:	2028      	movs	r0, #40	@ 0x28
 80050be:	f007 fcd8 	bl	800ca72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80050c2:	2028      	movs	r0, #40	@ 0x28
 80050c4:	f007 fcef 	bl	800caa6 <HAL_NVIC_EnableIRQ>

}
 80050c8:	bf00      	nop
 80050ca:	3728      	adds	r7, #40	@ 0x28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40021000 	.word	0x40021000
 80050d4:	48000800 	.word	0x48000800
 80050d8:	48000400 	.word	0x48000400

080050dc <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 80050dc:	b580      	push	{r7, lr}
 80050de:	b096      	sub	sp, #88	@ 0x58
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80050e8:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80050f2:	1d3b      	adds	r3, r7, #4
 80050f4:	2201      	movs	r2, #1
 80050f6:	2101      	movs	r1, #1
 80050f8:	f00d fa69 	bl	80125ce <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f00d fed9 	bl	8012ec2 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f00d fecf 	bl	8012ec2 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f00d fec5 	bl	8012ec2 <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8005144:	4619      	mov	r1, r3
 8005146:	ed97 0a02 	vldr	s0, [r7, #8]
 800514a:	4610      	mov	r0, r2
 800514c:	f00d fe48 	bl	8012de0 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8005162:	461a      	mov	r2, r3
 8005164:	f00d fdc2 	bl	8012cec <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 800517a:	461a      	mov	r2, r3
 800517c:	f00d f9ec 	bl	8012558 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8005192:	461a      	mov	r2, r3
 8005194:	f00d fdaa 	bl	8012cec <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80051aa:	461a      	mov	r2, r3
 80051ac:	f00d fd9e 	bl	8012cec <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80051c2:	461a      	mov	r2, r3
 80051c4:	f00d fd92 	bl	8012cec <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80051da:	4619      	mov	r1, r3
 80051dc:	eeb0 0a67 	vmov.f32	s0, s15
 80051e0:	4610      	mov	r0, r2
 80051e2:	f00d fdfd 	bl	8012de0 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80051f8:	461a      	mov	r2, r3
 80051fa:	f00d f9ad 	bl	8012558 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8005210:	461a      	mov	r2, r3
 8005212:	f00d fd6b 	bl	8012cec <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8005228:	461a      	mov	r2, r3
 800522a:	f00d fd5f 	bl	8012cec <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8005240:	461a      	mov	r2, r3
 8005242:	f00d f989 	bl	8012558 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8005252:	4619      	mov	r1, r3
 8005254:	4610      	mov	r0, r2
 8005256:	f00d f9d2 	bl	80125fe <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 800526c:	461a      	mov	r2, r3
 800526e:	f00d fd3d 	bl	8012cec <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8005284:	461a      	mov	r2, r3
 8005286:	f00d fd31 	bl	8012cec <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 800529c:	461a      	mov	r2, r3
 800529e:	f00d fd25 	bl	8012cec <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 80052b4:	461a      	mov	r2, r3
 80052b6:	f00d fdc9 	bl	8012e4c <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 80052cc:	461a      	mov	r2, r3
 80052ce:	f00d fd0d 	bl	8012cec <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80052e4:	461a      	mov	r2, r3
 80052e6:	f00d f937 	bl	8012558 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80052fc:	461a      	mov	r2, r3
 80052fe:	f00d fcf5 	bl	8012cec <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 8005302:	f107 0310 	add.w	r3, r7, #16
 8005306:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 800530a:	2204      	movs	r2, #4
 800530c:	2104      	movs	r1, #4
 800530e:	f00d f95e 	bl	80125ce <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 800531e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8005322:	4619      	mov	r1, r3
 8005324:	f00d fce2 	bl	8012cec <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800532e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8005332:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8005336:	4618      	mov	r0, r3
 8005338:	f00d fd88 	bl	8012e4c <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8005348:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800534c:	4618      	mov	r0, r3
 800534e:	f00d fccd 	bl	8012cec <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005362:	ee07 3a90 	vmov	s15, r3
}
 8005366:	eeb0 0a67 	vmov.f32	s0, s15
 800536a:	3758      	adds	r7, #88	@ 0x58
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8005370:	b5b0      	push	{r4, r5, r7, lr}
 8005372:	b0a4      	sub	sp, #144	@ 0x90
 8005374:	af00      	add	r7, sp, #0
 8005376:	6178      	str	r0, [r7, #20]
 8005378:	6139      	str	r1, [r7, #16]
 800537a:	60fa      	str	r2, [r7, #12]
 800537c:	ed87 0a02 	vstr	s0, [r7, #8]
 8005380:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8005394:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005398:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053b8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80053bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	677b      	str	r3, [r7, #116]	@ 0x74
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 80053ca:	4bc6      	ldr	r3, [pc, #792]	@ (80056e4 <Kalman_Start+0x374>)
 80053cc:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80053d0:	461d      	mov	r5, r3
 80053d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80053e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 80053e6:	f107 031c 	add.w	r3, r7, #28
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	605a      	str	r2, [r3, #4]
 80053f0:	609a      	str	r2, [r3, #8]
 80053f2:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f04f 0200 	mov.w	r2, #0
 80053fa:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 80053fe:	2300      	movs	r3, #0
 8005400:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005404:	e028      	b.n	8005458 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8005406:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4413      	add	r3, r2
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	6979      	ldr	r1, [r7, #20]
 8005414:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005418:	3314      	adds	r3, #20
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8005420:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	3390      	adds	r3, #144	@ 0x90
 8005428:	443b      	add	r3, r7
 800542a:	3b64      	subs	r3, #100	@ 0x64
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	6979      	ldr	r1, [r7, #20]
 8005430:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005434:	3398      	adds	r3, #152	@ 0x98
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005442:	3304      	adds	r3, #4
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 800544e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005452:	3301      	adds	r3, #1
 8005454:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005458:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800545c:	2b0f      	cmp	r3, #15
 800545e:	ddd2      	ble.n	8005406 <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8005460:	2300      	movs	r3, #0
 8005462:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005466:	e03a      	b.n	80054de <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8005468:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	3390      	adds	r3, #144	@ 0x90
 8005470:	443b      	add	r3, r7
 8005472:	3b74      	subs	r3, #116	@ 0x74
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	6979      	ldr	r1, [r7, #20]
 8005478:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8005482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	6979      	ldr	r1, [r7, #20]
 8005490:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005494:	3324      	adds	r3, #36	@ 0x24
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 800549c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	3390      	adds	r3, #144	@ 0x90
 80054a4:	443b      	add	r3, r7
 80054a6:	3b14      	subs	r3, #20
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	6979      	ldr	r1, [r7, #20]
 80054ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054b0:	3328      	adds	r3, #40	@ 0x28
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 80054b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	3390      	adds	r3, #144	@ 0x90
 80054c0:	443b      	add	r3, r7
 80054c2:	3b24      	subs	r3, #36	@ 0x24
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	6979      	ldr	r1, [r7, #20]
 80054c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054cc:	332c      	adds	r3, #44	@ 0x2c
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	440b      	add	r3, r1
 80054d2:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 80054d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054d8:	3301      	adds	r3, #1
 80054da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80054de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054e2:	2b03      	cmp	r3, #3
 80054e4:	ddc0      	ble.n	8005468 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	2201      	movs	r2, #1
 80054f0:	2104      	movs	r1, #4
 80054f2:	f00d f86c 	bl	80125ce <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	3310      	adds	r3, #16
 8005500:	2204      	movs	r2, #4
 8005502:	2104      	movs	r1, #4
 8005504:	f00d f863 	bl	80125ce <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	3350      	adds	r3, #80	@ 0x50
 8005512:	2204      	movs	r2, #4
 8005514:	2104      	movs	r1, #4
 8005516:	f00d f85a 	bl	80125ce <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	3390      	adds	r3, #144	@ 0x90
 8005524:	2201      	movs	r2, #1
 8005526:	2104      	movs	r1, #4
 8005528:	f00d f851 	bl	80125ce <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	33a0      	adds	r3, #160	@ 0xa0
 8005536:	2204      	movs	r2, #4
 8005538:	2101      	movs	r1, #1
 800553a:	f00d f848 	bl	80125ce <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	33b0      	adds	r3, #176	@ 0xb0
 8005548:	2201      	movs	r2, #1
 800554a:	2104      	movs	r1, #4
 800554c:	f00d f83f 	bl	80125ce <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	33c8      	adds	r3, #200	@ 0xc8
 800555a:	2204      	movs	r2, #4
 800555c:	2104      	movs	r1, #4
 800555e:	f00d f836 	bl	80125ce <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800556e:	2201      	movs	r2, #1
 8005570:	2104      	movs	r1, #4
 8005572:	f00d f82c 	bl	80125ce <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8005582:	2204      	movs	r2, #4
 8005584:	2101      	movs	r1, #1
 8005586:	f00d f822 	bl	80125ce <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8005596:	2204      	movs	r2, #4
 8005598:	2104      	movs	r1, #4
 800559a:	f00d f818 	bl	80125ce <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80055aa:	2204      	movs	r2, #4
 80055ac:	2104      	movs	r1, #4
 80055ae:	f00d f80e 	bl	80125ce <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80055be:	2201      	movs	r2, #1
 80055c0:	2104      	movs	r1, #4
 80055c2:	f00d f804 	bl	80125ce <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80055d2:	2201      	movs	r2, #1
 80055d4:	2104      	movs	r1, #4
 80055d6:	f00c fffa 	bl	80125ce <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80055e6:	2204      	movs	r2, #4
 80055e8:	2101      	movs	r1, #1
 80055ea:	f00c fff0 	bl	80125ce <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80055fa:	2201      	movs	r2, #1
 80055fc:	2101      	movs	r1, #1
 80055fe:	f00c ffe6 	bl	80125ce <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 800560e:	2201      	movs	r2, #1
 8005610:	2101      	movs	r1, #1
 8005612:	f00c ffdc 	bl	80125ce <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8005622:	2201      	movs	r2, #1
 8005624:	2104      	movs	r1, #4
 8005626:	f00c ffd2 	bl	80125ce <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8005636:	2201      	movs	r2, #1
 8005638:	2104      	movs	r1, #4
 800563a:	f00c ffc8 	bl	80125ce <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800564a:	2201      	movs	r2, #1
 800564c:	2101      	movs	r1, #1
 800564e:	f00c ffbe 	bl	80125ce <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 800565e:	2201      	movs	r2, #1
 8005660:	2101      	movs	r1, #1
 8005662:	f00c ffb4 	bl	80125ce <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005672:	2201      	movs	r2, #1
 8005674:	2101      	movs	r1, #1
 8005676:	f00c ffaa 	bl	80125ce <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8005686:	2201      	movs	r2, #1
 8005688:	2104      	movs	r1, #4
 800568a:	f00c ffa0 	bl	80125ce <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800569a:	2201      	movs	r2, #1
 800569c:	2101      	movs	r1, #1
 800569e:	f00c ff96 	bl	80125ce <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80056ae:	2204      	movs	r2, #4
 80056b0:	2104      	movs	r1, #4
 80056b2:	f00c ff8c 	bl	80125ce <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	33c4      	adds	r3, #196	@ 0xc4
 80056c0:	2201      	movs	r2, #1
 80056c2:	2101      	movs	r1, #1
 80056c4:	f00c ff83 	bl	80125ce <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80056d4:	2201      	movs	r2, #1
 80056d6:	2101      	movs	r1, #1
 80056d8:	f00c ff79 	bl	80125ce <arm_mat_init_f32>
}
 80056dc:	bf00      	nop
 80056de:	3790      	adds	r7, #144	@ 0x90
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bdb0      	pop	{r4, r5, r7, pc}
 80056e4:	08014f80 	.word	0x08014f80

080056e8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80056ec:	f3bf 8f4f 	dsb	sy
}
 80056f0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80056f2:	4b06      	ldr	r3, [pc, #24]	@ (800570c <__NVIC_SystemReset+0x24>)
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80056fa:	4904      	ldr	r1, [pc, #16]	@ (800570c <__NVIC_SystemReset+0x24>)
 80056fc:	4b04      	ldr	r3, [pc, #16]	@ (8005710 <__NVIC_SystemReset+0x28>)
 80056fe:	4313      	orrs	r3, r2
 8005700:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005702:	f3bf 8f4f 	dsb	sy
}
 8005706:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005708:	bf00      	nop
 800570a:	e7fd      	b.n	8005708 <__NVIC_SystemReset+0x20>
 800570c:	e000ed00 	.word	0xe000ed00
 8005710:	05fa0004 	.word	0x05fa0004

08005714 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800571a:	f005 fbe6 	bl	800aeea <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800571e:	f000 f891 	bl	8005844 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005722:	f7ff fbd1 	bl	8004ec8 <MX_GPIO_Init>
	MX_DMA_Init();
 8005726:	f7ff fb85 	bl	8004e34 <MX_DMA_Init>
	MX_ADC1_Init();
 800572a:	f7ff fa77 	bl	8004c1c <MX_ADC1_Init>
	MX_TIM2_Init();
 800572e:	f004 fdf1 	bl	800a314 <MX_TIM2_Init>
	MX_TIM3_Init();
 8005732:	f004 fe3d 	bl	800a3b0 <MX_TIM3_Init>
	MX_TIM4_Init();
 8005736:	f004 fe91 	bl	800a45c <MX_TIM4_Init>
	MX_TIM5_Init();
 800573a:	f004 fee5 	bl	800a508 <MX_TIM5_Init>
	MX_TIM8_Init();
 800573e:	f004 ff39 	bl	800a5b4 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8005742:	f005 f9fb 	bl	800ab3c <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8005746:	f004 fff3 	bl	800a730 <MX_TIM16_Init>
	MX_TIM1_Init();
 800574a:	f004 fd4f 	bl	800a1ec <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 800574e:	f005 f9ab 	bl	800aaa8 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8005752:	f003 fea5 	bl	80094a0 <plotter_begin>

	plotter_pen_up();
 8005756:	f004 fb2d 	bl	8009db4 <plotter_pen_up>

	prismatic_axis.position = prismatic_encoder.mm;
 800575a:	4b29      	ldr	r3, [pc, #164]	@ (8005800 <main+0xec>)
 800575c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800575e:	4a29      	ldr	r2, [pc, #164]	@ (8005804 <main+0xf0>)
 8005760:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8005762:	4b29      	ldr	r3, [pc, #164]	@ (8005808 <main+0xf4>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005766:	4a29      	ldr	r2, [pc, #164]	@ (800580c <main+0xf8>)
 8005768:	6013      	str	r3, [r2, #0]

	safety_state = SAFETY_NORMAL;
 800576a:	4b29      	ldr	r3, [pc, #164]	@ (8005810 <main+0xfc>)
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8005770:	4b28      	ldr	r3, [pc, #160]	@ (8005814 <main+0x100>)
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
	pilot_light_state = false;
 8005776:	4b28      	ldr	r3, [pc, #160]	@ (8005818 <main+0x104>)
 8005778:	2200      	movs	r2, #0
 800577a:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 800577c:	4b27      	ldr	r3, [pc, #156]	@ (800581c <main+0x108>)
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
	position_control_tick = 0;
 8005782:	4b27      	ldr	r3, [pc, #156]	@ (8005820 <main+0x10c>)
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]

	if (first_startup) {
 8005788:	4b26      	ldr	r3, [pc, #152]	@ (8005824 <main+0x110>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d034      	beq.n	80057fa <main+0xe6>
		// Check if already at home position
		bool up_photo_detected = HAL_GPIO_ReadPin(upperphoto_GPIO_Port,
 8005790:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005794:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005798:	f007 fe54 	bl	800d444 <HAL_GPIO_ReadPin>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bf14      	ite	ne
 80057a2:	2301      	movne	r3, #1
 80057a4:	2300      	moveq	r3, #0
 80057a6:	71fb      	strb	r3, [r7, #7]
		upperphoto_Pin);
		bool prox_detected = HAL_GPIO_ReadPin(prox_GPIO_Port, prox_Pin);
 80057a8:	2120      	movs	r1, #32
 80057aa:	481f      	ldr	r0, [pc, #124]	@ (8005828 <main+0x114>)
 80057ac:	f007 fe4a 	bl	800d444 <HAL_GPIO_ReadPin>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	bf14      	ite	ne
 80057b6:	2301      	movne	r3, #1
 80057b8:	2300      	moveq	r3, #0
 80057ba:	71bb      	strb	r3, [r7, #6]

		if (up_photo_detected && prox_detected) {
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d018      	beq.n	80057f4 <main+0xe0>
 80057c2:	79bb      	ldrb	r3, [r7, #6]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d015      	beq.n	80057f4 <main+0xe0>
			// Already at home position - no need to home
			first_startup = false;
 80057c8:	4b16      	ldr	r3, [pc, #88]	@ (8005824 <main+0x110>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	701a      	strb	r2, [r3, #0]
			homing_active = false;
 80057ce:	4b17      	ldr	r3, [pc, #92]	@ (800582c <main+0x118>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80057d4:	4b16      	ldr	r3, [pc, #88]	@ (8005830 <main+0x11c>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	701a      	strb	r2, [r3, #0]

			// Clear any sensor flags
			up_photo = false;
 80057da:	4b16      	ldr	r3, [pc, #88]	@ (8005834 <main+0x120>)
 80057dc:	2200      	movs	r2, #0
 80057de:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80057e0:	4b15      	ldr	r3, [pc, #84]	@ (8005838 <main+0x124>)
 80057e2:	2200      	movs	r2, #0
 80057e4:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80057e6:	4b15      	ldr	r3, [pc, #84]	@ (800583c <main+0x128>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 80057ec:	4b14      	ldr	r3, [pc, #80]	@ (8005840 <main+0x12c>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	e002      	b.n	80057fa <main+0xe6>

		} else {
			start_homing_sequence(true);
 80057f4:	2001      	movs	r0, #1
 80057f6:	f000 f871 	bl	80058dc <start_homing_sequence>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		handle_b2_button_polling();
 80057fa:	f003 f84d 	bl	8008898 <handle_b2_button_polling>
 80057fe:	e7fc      	b.n	80057fa <main+0xe6>
 8005800:	20000980 	.word	0x20000980
 8005804:	20000704 	.word	0x20000704
 8005808:	200009dc 	.word	0x200009dc
 800580c:	20000748 	.word	0x20000748
 8005810:	200007ec 	.word	0x200007ec
 8005814:	200007f5 	.word	0x200007f5
 8005818:	200007f4 	.word	0x200007f4
 800581c:	200007f0 	.word	0x200007f0
 8005820:	200007f8 	.word	0x200007f8
 8005824:	20000333 	.word	0x20000333
 8005828:	48000400 	.word	0x48000400
 800582c:	200007eb 	.word	0x200007eb
 8005830:	200007ea 	.word	0x200007ea
 8005834:	200007e8 	.word	0x200007e8
 8005838:	200007e9 	.word	0x200007e9
 800583c:	200007e4 	.word	0x200007e4
 8005840:	2000078c 	.word	0x2000078c

08005844 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005844:	b580      	push	{r7, lr}
 8005846:	b094      	sub	sp, #80	@ 0x50
 8005848:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800584a:	f107 0318 	add.w	r3, r7, #24
 800584e:	2238      	movs	r2, #56	@ 0x38
 8005850:	2100      	movs	r1, #0
 8005852:	4618      	mov	r0, r3
 8005854:	f00d fc2c 	bl	80130b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005858:	1d3b      	adds	r3, r7, #4
 800585a:	2200      	movs	r2, #0
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	605a      	str	r2, [r3, #4]
 8005860:	609a      	str	r2, [r3, #8]
 8005862:	60da      	str	r2, [r3, #12]
 8005864:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8005866:	2000      	movs	r0, #0
 8005868:	f007 fe4e 	bl	800d508 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800586c:	2302      	movs	r3, #2
 800586e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005870:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005874:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005876:	2340      	movs	r3, #64	@ 0x40
 8005878:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800587a:	2302      	movs	r3, #2
 800587c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800587e:	2302      	movs	r3, #2
 8005880:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8005882:	2304      	movs	r3, #4
 8005884:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8005886:	2355      	movs	r3, #85	@ 0x55
 8005888:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800588a:	2302      	movs	r3, #2
 800588c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800588e:	2302      	movs	r3, #2
 8005890:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005892:	2302      	movs	r3, #2
 8005894:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005896:	f107 0318 	add.w	r3, r7, #24
 800589a:	4618      	mov	r0, r3
 800589c:	f007 fee8 	bl	800d670 <HAL_RCC_OscConfig>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <SystemClock_Config+0x66>
		Error_Handler();
 80058a6:	f003 fdf5 	bl	8009494 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80058aa:	230f      	movs	r3, #15
 80058ac:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80058ae:	2303      	movs	r3, #3
 80058b0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80058b6:	2300      	movs	r3, #0
 80058b8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80058ba:	2300      	movs	r3, #0
 80058bc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80058be:	1d3b      	adds	r3, r7, #4
 80058c0:	2104      	movs	r1, #4
 80058c2:	4618      	mov	r0, r3
 80058c4:	f008 f9e6 	bl	800dc94 <HAL_RCC_ClockConfig>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <SystemClock_Config+0x8e>
		Error_Handler();
 80058ce:	f003 fde1 	bl	8009494 <Error_Handler>
	}
}
 80058d2:	bf00      	nop
 80058d4:	3750      	adds	r7, #80	@ 0x50
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
	...

080058dc <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	71fb      	strb	r3, [r7, #7]
	//modbus set home state
	registerFrame[R_Theta_Status].U16 = 1;
 80058e6:	4b53      	ldr	r3, [pc, #332]	@ (8005a34 <start_homing_sequence+0x158>)
 80058e8:	2201      	movs	r2, #1
 80058ea:	841a      	strh	r2, [r3, #32]
	if (homing_active)
 80058ec:	4b52      	ldr	r3, [pc, #328]	@ (8005a38 <start_homing_sequence+0x15c>)
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f040 809a 	bne.w	8005a2a <start_homing_sequence+0x14e>
		return;

	// Check current sensor states
	bool up_photo_detected = HAL_GPIO_ReadPin(upperphoto_GPIO_Port,
 80058f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80058fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80058fe:	f007 fda1 	bl	800d444 <HAL_GPIO_ReadPin>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	bf14      	ite	ne
 8005908:	2301      	movne	r3, #1
 800590a:	2300      	moveq	r3, #0
 800590c:	73fb      	strb	r3, [r7, #15]
	upperphoto_Pin);
	bool prox_detected = HAL_GPIO_ReadPin(prox_GPIO_Port, prox_Pin);
 800590e:	2120      	movs	r1, #32
 8005910:	484a      	ldr	r0, [pc, #296]	@ (8005a3c <start_homing_sequence+0x160>)
 8005912:	f007 fd97 	bl	800d444 <HAL_GPIO_ReadPin>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	bf14      	ite	ne
 800591c:	2301      	movne	r3, #1
 800591e:	2300      	moveq	r3, #0
 8005920:	73bb      	strb	r3, [r7, #14]

	// Different logic for startup vs manual homing
	if (is_startup || first_startup) {
 8005922:	79fb      	ldrb	r3, [r7, #7]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d103      	bne.n	8005930 <start_homing_sequence+0x54>
 8005928:	4b45      	ldr	r3, [pc, #276]	@ (8005a40 <start_homing_sequence+0x164>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d02e      	beq.n	800598e <start_homing_sequence+0xb2>
		// STARTUP LOGIC: Skip homing if already at home position
		if (up_photo_detected && prox_detected) {
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d018      	beq.n	8005968 <start_homing_sequence+0x8c>
 8005936:	7bbb      	ldrb	r3, [r7, #14]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d015      	beq.n	8005968 <start_homing_sequence+0x8c>
			// Already at home position - no need to home
			homing_active = false;
 800593c:	4b3e      	ldr	r3, [pc, #248]	@ (8005a38 <start_homing_sequence+0x15c>)
 800593e:	2200      	movs	r2, #0
 8005940:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 8005942:	4b40      	ldr	r3, [pc, #256]	@ (8005a44 <start_homing_sequence+0x168>)
 8005944:	2200      	movs	r2, #0
 8005946:	701a      	strb	r2, [r3, #0]
			first_startup = false;
 8005948:	4b3d      	ldr	r3, [pc, #244]	@ (8005a40 <start_homing_sequence+0x164>)
 800594a:	2200      	movs	r2, #0
 800594c:	701a      	strb	r2, [r3, #0]

			// Clear sensor flags
			up_photo = false;
 800594e:	4b3e      	ldr	r3, [pc, #248]	@ (8005a48 <start_homing_sequence+0x16c>)
 8005950:	2200      	movs	r2, #0
 8005952:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005954:	4b3d      	ldr	r3, [pc, #244]	@ (8005a4c <start_homing_sequence+0x170>)
 8005956:	2200      	movs	r2, #0
 8005958:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 800595a:	4b3d      	ldr	r3, [pc, #244]	@ (8005a50 <start_homing_sequence+0x174>)
 800595c:	2200      	movs	r2, #0
 800595e:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 8005960:	4b3c      	ldr	r3, [pc, #240]	@ (8005a54 <start_homing_sequence+0x178>)
 8005962:	2200      	movs	r2, #0
 8005964:	701a      	strb	r2, [r3, #0]
			return;
 8005966:	e061      	b.n	8005a2c <start_homing_sequence+0x150>
		}

		// Not at home - start startup homing sequence (skip zero degrees)
		homing_active = true;
 8005968:	4b33      	ldr	r3, [pc, #204]	@ (8005a38 <start_homing_sequence+0x15c>)
 800596a:	2201      	movs	r2, #1
 800596c:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 800596e:	4b39      	ldr	r3, [pc, #228]	@ (8005a54 <start_homing_sequence+0x178>)
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
		prox_count = 0;
 8005974:	4b36      	ldr	r3, [pc, #216]	@ (8005a50 <start_homing_sequence+0x174>)
 8005976:	2200      	movs	r2, #0
 8005978:	601a      	str	r2, [r3, #0]
		up_photo = false;
 800597a:	4b33      	ldr	r3, [pc, #204]	@ (8005a48 <start_homing_sequence+0x16c>)
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
		low_photo = false;
 8005980:	4b32      	ldr	r3, [pc, #200]	@ (8005a4c <start_homing_sequence+0x170>)
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]
		homing_state = HOMING_PEN_UP;
 8005986:	4b2f      	ldr	r3, [pc, #188]	@ (8005a44 <start_homing_sequence+0x168>)
 8005988:	2201      	movs	r2, #1
 800598a:	701a      	strb	r2, [r3, #0]
 800598c:	e04e      	b.n	8005a2c <start_homing_sequence+0x150>

	} else {
		// MANUAL HOMING LOGIC: More sophisticated behavior
		if (up_photo_detected && prox_detected) {
 800598e:	7bfb      	ldrb	r3, [r7, #15]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d018      	beq.n	80059c6 <start_homing_sequence+0xea>
 8005994:	7bbb      	ldrb	r3, [r7, #14]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d015      	beq.n	80059c6 <start_homing_sequence+0xea>
			// Already perfectly homed - skip homing completely
			homing_active = false;
 800599a:	4b27      	ldr	r3, [pc, #156]	@ (8005a38 <start_homing_sequence+0x15c>)
 800599c:	2200      	movs	r2, #0
 800599e:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80059a0:	4b28      	ldr	r3, [pc, #160]	@ (8005a44 <start_homing_sequence+0x168>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	701a      	strb	r2, [r3, #0]
			first_startup = false;  // ← ADDED THIS LINE
 80059a6:	4b26      	ldr	r3, [pc, #152]	@ (8005a40 <start_homing_sequence+0x164>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	701a      	strb	r2, [r3, #0]
			up_photo = false;
 80059ac:	4b26      	ldr	r3, [pc, #152]	@ (8005a48 <start_homing_sequence+0x16c>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80059b2:	4b26      	ldr	r3, [pc, #152]	@ (8005a4c <start_homing_sequence+0x170>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80059b8:	4b25      	ldr	r3, [pc, #148]	@ (8005a50 <start_homing_sequence+0x174>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80059be:	4b25      	ldr	r3, [pc, #148]	@ (8005a54 <start_homing_sequence+0x178>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	701a      	strb	r2, [r3, #0]
			return;
 80059c4:	e032      	b.n	8005a2c <start_homing_sequence+0x150>
			 up_photo = false;
			 low_photo = false;
			 homing_state = HOMING_REV_TO_ZERO_DEG;
			 rev_to_zero_trajectory_started = false;
			 */
		} else if (up_photo_detected && !prox_detected) {
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01b      	beq.n	8005a04 <start_homing_sequence+0x128>
 80059cc:	7bbb      	ldrb	r3, [r7, #14]
 80059ce:	f083 0301 	eor.w	r3, r3, #1
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d015      	beq.n	8005a04 <start_homing_sequence+0x128>
			// At up photo but not at prox - go to zero degrees first
			homing_active = true;
 80059d8:	4b17      	ldr	r3, [pc, #92]	@ (8005a38 <start_homing_sequence+0x15c>)
 80059da:	2201      	movs	r2, #1
 80059dc:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80059de:	4b1d      	ldr	r3, [pc, #116]	@ (8005a54 <start_homing_sequence+0x178>)
 80059e0:	2200      	movs	r2, #0
 80059e2:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80059e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005a50 <start_homing_sequence+0x174>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]
			up_photo = false;
 80059ea:	4b17      	ldr	r3, [pc, #92]	@ (8005a48 <start_homing_sequence+0x16c>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80059f0:	4b16      	ldr	r3, [pc, #88]	@ (8005a4c <start_homing_sequence+0x170>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_REV_TO_ZERO_DEG;
 80059f6:	4b13      	ldr	r3, [pc, #76]	@ (8005a44 <start_homing_sequence+0x168>)
 80059f8:	2207      	movs	r2, #7
 80059fa:	701a      	strb	r2, [r3, #0]
			rev_to_zero_trajectory_started = false;
 80059fc:	4b16      	ldr	r3, [pc, #88]	@ (8005a58 <start_homing_sequence+0x17c>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	701a      	strb	r2, [r3, #0]
 8005a02:	e013      	b.n	8005a2c <start_homing_sequence+0x150>
		} else {
			// Not at up photo - start full homing sequence
			homing_active = true;
 8005a04:	4b0c      	ldr	r3, [pc, #48]	@ (8005a38 <start_homing_sequence+0x15c>)
 8005a06:	2201      	movs	r2, #1
 8005a08:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 8005a0a:	4b12      	ldr	r3, [pc, #72]	@ (8005a54 <start_homing_sequence+0x178>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005a10:	4b0f      	ldr	r3, [pc, #60]	@ (8005a50 <start_homing_sequence+0x174>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
			up_photo = false;
 8005a16:	4b0c      	ldr	r3, [pc, #48]	@ (8005a48 <start_homing_sequence+0x16c>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a4c <start_homing_sequence+0x170>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_PEN_UP;
 8005a22:	4b08      	ldr	r3, [pc, #32]	@ (8005a44 <start_homing_sequence+0x168>)
 8005a24:	2201      	movs	r2, #1
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	e000      	b.n	8005a2c <start_homing_sequence+0x150>
		return;
 8005a2a:	bf00      	nop
		}
	}
}
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	20001584 	.word	0x20001584
 8005a38:	200007eb 	.word	0x200007eb
 8005a3c:	48000400 	.word	0x48000400
 8005a40:	20000333 	.word	0x20000333
 8005a44:	200007ea 	.word	0x200007ea
 8005a48:	200007e8 	.word	0x200007e8
 8005a4c:	200007e9 	.word	0x200007e9
 8005a50:	200007e4 	.word	0x200007e4
 8005a54:	2000078c 	.word	0x2000078c
 8005a58:	200007f6 	.word	0x200007f6

08005a5c <update_homing_sequence>:

void update_homing_sequence(void) {
 8005a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a60:	ed2d 8b02 	vpush	{d8}
 8005a64:	b08b      	sub	sp, #44	@ 0x2c
 8005a66:	af00      	add	r7, sp, #0
	if (!homing_active)
 8005a68:	4b94      	ldr	r3, [pc, #592]	@ (8005cbc <update_homing_sequence+0x260>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	f083 0301 	eor.w	r3, r3, #1
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f040 8361 	bne.w	800613a <update_homing_sequence+0x6de>
		return;

	switch (homing_state) {
 8005a78:	4b91      	ldr	r3, [pc, #580]	@ (8005cc0 <update_homing_sequence+0x264>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	2b0a      	cmp	r3, #10
 8005a80:	f200 835d 	bhi.w	800613e <update_homing_sequence+0x6e2>
 8005a84:	a201      	add	r2, pc, #4	@ (adr r2, 8005a8c <update_homing_sequence+0x30>)
 8005a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8a:	bf00      	nop
 8005a8c:	08005ab9 	.word	0x08005ab9
 8005a90:	08005adb 	.word	0x08005adb
 8005a94:	08005b45 	.word	0x08005b45
 8005a98:	08005c91 	.word	0x08005c91
 8005a9c:	08005d01 	.word	0x08005d01
 8005aa0:	08005e45 	.word	0x08005e45
 8005aa4:	08005ebb 	.word	0x08005ebb
 8005aa8:	08005f4d 	.word	0x08005f4d
 8005aac:	08005ffd 	.word	0x08005ffd
 8005ab0:	08006103 	.word	0x08006103
 8005ab4:	0800612d 	.word	0x0800612d
	case HOMING_PEN_UP:
		// Ensure pen is up
		plotter_pen_up();
 8005ab8:	f004 f97c 	bl	8009db4 <plotter_pen_up>
		prismatic_axis.command_pos = 0.0f;
 8005abc:	4b81      	ldr	r3, [pc, #516]	@ (8005cc4 <update_homing_sequence+0x268>)
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005ac4:	4b80      	ldr	r3, [pc, #512]	@ (8005cc8 <update_homing_sequence+0x26c>)
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer = 0;
 8005acc:	4b7f      	ldr	r3, [pc, #508]	@ (8005ccc <update_homing_sequence+0x270>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]
		homing_state = HOMING_DELAY_AFTER_PEN_UP;
 8005ad2:	4b7b      	ldr	r3, [pc, #492]	@ (8005cc0 <update_homing_sequence+0x264>)
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	701a      	strb	r2, [r3, #0]
		break;
 8005ad8:	e344      	b.n	8006164 <update_homing_sequence+0x708>

	case HOMING_DELAY_AFTER_PEN_UP:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005ada:	4b7a      	ldr	r3, [pc, #488]	@ (8005cc4 <update_homing_sequence+0x268>)
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005ae2:	4b79      	ldr	r3, [pc, #484]	@ (8005cc8 <update_homing_sequence+0x26c>)
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005aea:	4b78      	ldr	r3, [pc, #480]	@ (8005ccc <update_homing_sequence+0x270>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	3301      	adds	r3, #1
 8005af0:	4a76      	ldr	r2, [pc, #472]	@ (8005ccc <update_homing_sequence+0x270>)
 8005af2:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 150) {
 8005af4:	4b75      	ldr	r3, [pc, #468]	@ (8005ccc <update_homing_sequence+0x270>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b95      	cmp	r3, #149	@ 0x95
 8005afa:	f240 8322 	bls.w	8006142 <update_homing_sequence+0x6e6>
			// Check if already at low photo sensor
			low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8005afe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005b02:	4873      	ldr	r0, [pc, #460]	@ (8005cd0 <update_homing_sequence+0x274>)
 8005b04:	f007 fc9e 	bl	800d444 <HAL_GPIO_ReadPin>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	bf14      	ite	ne
 8005b0e:	2301      	movne	r3, #1
 8005b10:	2300      	moveq	r3, #0
 8005b12:	b2da      	uxtb	r2, r3
 8005b14:	4b6f      	ldr	r3, [pc, #444]	@ (8005cd4 <update_homing_sequence+0x278>)
 8005b16:	701a      	strb	r2, [r3, #0]
			LOWER_PHOTO_Pin);

			if (low_photo) {
 8005b18:	4b6e      	ldr	r3, [pc, #440]	@ (8005cd4 <update_homing_sequence+0x278>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00c      	beq.n	8005b3c <update_homing_sequence+0xe0>
				// Already at low photo, skip moving down and go directly to delay
				motion_delay_timer = 0;
 8005b22:	4b6a      	ldr	r3, [pc, #424]	@ (8005ccc <update_homing_sequence+0x270>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005b28:	4b65      	ldr	r3, [pc, #404]	@ (8005cc0 <update_homing_sequence+0x264>)
 8005b2a:	2204      	movs	r2, #4
 8005b2c:	701a      	strb	r2, [r3, #0]
				low_photo = false; // Reset flag
 8005b2e:	4b69      	ldr	r3, [pc, #420]	@ (8005cd4 <update_homing_sequence+0x278>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	701a      	strb	r2, [r3, #0]
				up_photo = false;  // Reset for next detection
 8005b34:	4b68      	ldr	r3, [pc, #416]	@ (8005cd8 <update_homing_sequence+0x27c>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	701a      	strb	r2, [r3, #0]
			} else {
				// Not at low photo, need to move down
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
			}
		}
		break;
 8005b3a:	e302      	b.n	8006142 <update_homing_sequence+0x6e6>
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 8005b3c:	4b60      	ldr	r3, [pc, #384]	@ (8005cc0 <update_homing_sequence+0x264>)
 8005b3e:	2203      	movs	r2, #3
 8005b40:	701a      	strb	r2, [r3, #0]
		break;
 8005b42:	e2fe      	b.n	8006142 <update_homing_sequence+0x6e6>

	case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
		// Move prismatic down at constant velocity
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005b44:	4b5f      	ldr	r3, [pc, #380]	@ (8005cc4 <update_homing_sequence+0x268>)
 8005b46:	edd3 7a07 	vldr	s15, [r3, #28]
 8005b4a:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8005cdc <update_homing_sequence+0x280>
 8005b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
 8005b52:	4b5c      	ldr	r3, [pc, #368]	@ (8005cc4 <update_homing_sequence+0x268>)
 8005b54:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005b58:	4b5a      	ldr	r3, [pc, #360]	@ (8005cc4 <update_homing_sequence+0x268>)
 8005b5a:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b5e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b62:	485f      	ldr	r0, [pc, #380]	@ (8005ce0 <update_homing_sequence+0x284>)
 8005b64:	f7fb fb58 	bl	8001218 <PID_CONTROLLER_Compute>
 8005b68:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005b6c:	4b5d      	ldr	r3, [pc, #372]	@ (8005ce4 <update_homing_sequence+0x288>)
 8005b6e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005b72:	4610      	mov	r0, r2
 8005b74:	4619      	mov	r1, r3
 8005b76:	f7fa ffa5 	bl	8000ac4 <__aeabi_d2iz>
 8005b7a:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005b7c:	4b59      	ldr	r3, [pc, #356]	@ (8005ce4 <update_homing_sequence+0x288>)
 8005b7e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005b82:	613a      	str	r2, [r7, #16]
 8005b84:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005b88:	617b      	str	r3, [r7, #20]
		prismatic_axis.command_pos = PWM_Satuation(
 8005b8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b8e:	f7fa ff99 	bl	8000ac4 <__aeabi_d2iz>
 8005b92:	4603      	mov	r3, r0
 8005b94:	4619      	mov	r1, r3
 8005b96:	4620      	mov	r0, r4
 8005b98:	eeb0 0a48 	vmov.f32	s0, s16
 8005b9c:	f7fb fada 	bl	8001154 <PWM_Satuation>
 8005ba0:	ee07 0a90 	vmov	s15, r0
 8005ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ba8:	4b46      	ldr	r3, [pc, #280]	@ (8005cc4 <update_homing_sequence+0x268>)
 8005baa:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005bae:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005bb2:	484d      	ldr	r0, [pc, #308]	@ (8005ce8 <update_homing_sequence+0x28c>)
 8005bb4:	f7fb fe4c 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8005bb8:	eef0 7a40 	vmov.f32	s15, s0
 8005bbc:	4b41      	ldr	r3, [pc, #260]	@ (8005cc4 <update_homing_sequence+0x268>)
 8005bbe:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8005cec <update_homing_sequence+0x290>)
 8005bc4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005bc8:	4b49      	ldr	r3, [pc, #292]	@ (8005cf0 <update_homing_sequence+0x294>)
 8005bca:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005bce:	ed9f 6a49 	vldr	s12, [pc, #292]	@ 8005cf4 <update_homing_sequence+0x298>
 8005bd2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005bd6:	eeb0 1a66 	vmov.f32	s2, s13
 8005bda:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8005cf8 <update_homing_sequence+0x29c>
 8005bde:	eeb0 0a47 	vmov.f32	s0, s14
 8005be2:	4846      	ldr	r0, [pc, #280]	@ (8005cfc <update_homing_sequence+0x2a0>)
 8005be4:	f7fb fedc 	bl	80019a0 <PRISMATIC_MOTOR_DFD_Compute>
 8005be8:	eef0 7a40 	vmov.f32	s15, s0
 8005bec:	4b35      	ldr	r3, [pc, #212]	@ (8005cc4 <update_homing_sequence+0x268>)
 8005bee:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005bf2:	4b34      	ldr	r3, [pc, #208]	@ (8005cc4 <update_homing_sequence+0x268>)
 8005bf4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005bf8:	4b32      	ldr	r3, [pc, #200]	@ (8005cc4 <update_homing_sequence+0x268>)
 8005bfa:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005bfe:	4b31      	ldr	r3, [pc, #196]	@ (8005cc4 <update_homing_sequence+0x268>)
 8005c00:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005c04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8005cc4 <update_homing_sequence+0x268>)
 8005c0e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c12:	4b2c      	ldr	r3, [pc, #176]	@ (8005cc4 <update_homing_sequence+0x268>)
 8005c14:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005c18:	4b32      	ldr	r3, [pc, #200]	@ (8005ce4 <update_homing_sequence+0x288>)
 8005c1a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c1e:	4610      	mov	r0, r2
 8005c20:	4619      	mov	r1, r3
 8005c22:	f7fa ff4f 	bl	8000ac4 <__aeabi_d2iz>
 8005c26:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005c28:	4b2e      	ldr	r3, [pc, #184]	@ (8005ce4 <update_homing_sequence+0x288>)
 8005c2a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005c2e:	60ba      	str	r2, [r7, #8]
 8005c30:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005c34:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c3a:	f7fa ff43 	bl	8000ac4 <__aeabi_d2iz>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	4619      	mov	r1, r3
 8005c42:	4620      	mov	r0, r4
 8005c44:	eeb0 0a48 	vmov.f32	s0, s16
 8005c48:	f7fb fa84 	bl	8001154 <PWM_Satuation>
 8005c4c:	ee07 0a90 	vmov	s15, r0
 8005c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c54:	4b1b      	ldr	r3, [pc, #108]	@ (8005cc4 <update_homing_sequence+0x268>)
 8005c56:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (low_photo) {
 8005c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd4 <update_homing_sequence+0x278>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8270 	beq.w	8006146 <update_homing_sequence+0x6ea>
			// Found low photo, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005c66:	4b17      	ldr	r3, [pc, #92]	@ (8005cc4 <update_homing_sequence+0x268>)
 8005c68:	f04f 0200 	mov.w	r2, #0
 8005c6c:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005c6e:	4b16      	ldr	r3, [pc, #88]	@ (8005cc8 <update_homing_sequence+0x26c>)
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005c76:	4b15      	ldr	r3, [pc, #84]	@ (8005ccc <update_homing_sequence+0x270>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005c7c:	4b10      	ldr	r3, [pc, #64]	@ (8005cc0 <update_homing_sequence+0x264>)
 8005c7e:	2204      	movs	r2, #4
 8005c80:	701a      	strb	r2, [r3, #0]
			low_photo = false; // Reset flag after use
 8005c82:	4b14      	ldr	r3, [pc, #80]	@ (8005cd4 <update_homing_sequence+0x278>)
 8005c84:	2200      	movs	r2, #0
 8005c86:	701a      	strb	r2, [r3, #0]
			up_photo = false;  // Reset for next detection
 8005c88:	4b13      	ldr	r3, [pc, #76]	@ (8005cd8 <update_homing_sequence+0x27c>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005c8e:	e25a      	b.n	8006146 <update_homing_sequence+0x6ea>

	case HOMING_DELAY_AFTER_LOW_PHOTO:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005c90:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc4 <update_homing_sequence+0x268>)
 8005c92:	f04f 0200 	mov.w	r2, #0
 8005c96:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005c98:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc8 <update_homing_sequence+0x26c>)
 8005c9a:	f04f 0200 	mov.w	r2, #0
 8005c9e:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8005ccc <update_homing_sequence+0x270>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	4a09      	ldr	r2, [pc, #36]	@ (8005ccc <update_homing_sequence+0x270>)
 8005ca8:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 150) {
 8005caa:	4b08      	ldr	r3, [pc, #32]	@ (8005ccc <update_homing_sequence+0x270>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b95      	cmp	r3, #149	@ 0x95
 8005cb0:	f240 824b 	bls.w	800614a <update_homing_sequence+0x6ee>
			homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 8005cb4:	4b02      	ldr	r3, [pc, #8]	@ (8005cc0 <update_homing_sequence+0x264>)
 8005cb6:	2205      	movs	r2, #5
 8005cb8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005cba:	e246      	b.n	800614a <update_homing_sequence+0x6ee>
 8005cbc:	200007eb 	.word	0x200007eb
 8005cc0:	200007ea 	.word	0x200007ea
 8005cc4:	20000704 	.word	0x20000704
 8005cc8:	20000748 	.word	0x20000748
 8005ccc:	200007e0 	.word	0x200007e0
 8005cd0:	48000400 	.word	0x48000400
 8005cd4:	200007e9 	.word	0x200007e9
 8005cd8:	200007e8 	.word	0x200007e8
 8005cdc:	437a0000 	.word	0x437a0000
 8005ce0:	20000a60 	.word	0x20000a60
 8005ce4:	20000080 	.word	0x20000080
 8005ce8:	20000b00 	.word	0x20000b00
 8005cec:	200009dc 	.word	0x200009dc
 8005cf0:	20000980 	.word	0x20000980
 8005cf4:	447a0000 	.word	0x447a0000
 8005cf8:	00000000 	.word	0x00000000
 8005cfc:	20000b04 	.word	0x20000b04

	case HOMING_PRIS_UP_TO_UP_PHOTO:
		// Move prismatic up at constant velocity
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005d00:	4ba7      	ldr	r3, [pc, #668]	@ (8005fa0 <update_homing_sequence+0x544>)
 8005d02:	edd3 7a07 	vldr	s15, [r3, #28]
 8005d06:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8005fa4 <update_homing_sequence+0x548>
 8005d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
 8005d0e:	4ba4      	ldr	r3, [pc, #656]	@ (8005fa0 <update_homing_sequence+0x544>)
 8005d10:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005d14:	4ba2      	ldr	r3, [pc, #648]	@ (8005fa0 <update_homing_sequence+0x544>)
 8005d16:	edd3 7a06 	vldr	s15, [r3, #24]
 8005d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8005d1e:	48a2      	ldr	r0, [pc, #648]	@ (8005fa8 <update_homing_sequence+0x54c>)
 8005d20:	f7fb fa7a 	bl	8001218 <PID_CONTROLLER_Compute>
 8005d24:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005d28:	4ba0      	ldr	r3, [pc, #640]	@ (8005fac <update_homing_sequence+0x550>)
 8005d2a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005d2e:	4610      	mov	r0, r2
 8005d30:	4619      	mov	r1, r3
 8005d32:	f7fa fec7 	bl	8000ac4 <__aeabi_d2iz>
 8005d36:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005d38:	4b9c      	ldr	r3, [pc, #624]	@ (8005fac <update_homing_sequence+0x550>)
 8005d3a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005d3e:	603a      	str	r2, [r7, #0]
 8005d40:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005d44:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_pos = PWM_Satuation(
 8005d46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d4a:	f7fa febb 	bl	8000ac4 <__aeabi_d2iz>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	4619      	mov	r1, r3
 8005d52:	4620      	mov	r0, r4
 8005d54:	eeb0 0a48 	vmov.f32	s0, s16
 8005d58:	f7fb f9fc 	bl	8001154 <PWM_Satuation>
 8005d5c:	ee07 0a90 	vmov	s15, r0
 8005d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d64:	4b8e      	ldr	r3, [pc, #568]	@ (8005fa0 <update_homing_sequence+0x544>)
 8005d66:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005d6a:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 8005d6e:	4890      	ldr	r0, [pc, #576]	@ (8005fb0 <update_homing_sequence+0x554>)
 8005d70:	f7fb fd6e 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8005d74:	eef0 7a40 	vmov.f32	s15, s0
 8005d78:	4b89      	ldr	r3, [pc, #548]	@ (8005fa0 <update_homing_sequence+0x544>)
 8005d7a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005d7e:	4b8d      	ldr	r3, [pc, #564]	@ (8005fb4 <update_homing_sequence+0x558>)
 8005d80:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005d84:	4b8c      	ldr	r3, [pc, #560]	@ (8005fb8 <update_homing_sequence+0x55c>)
 8005d86:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005d8a:	ed9f 6a8c 	vldr	s12, [pc, #560]	@ 8005fbc <update_homing_sequence+0x560>
 8005d8e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005d92:	eeb0 1a66 	vmov.f32	s2, s13
 8005d96:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 8005fc0 <update_homing_sequence+0x564>
 8005d9a:	eeb0 0a47 	vmov.f32	s0, s14
 8005d9e:	4889      	ldr	r0, [pc, #548]	@ (8005fc4 <update_homing_sequence+0x568>)
 8005da0:	f7fb fdfe 	bl	80019a0 <PRISMATIC_MOTOR_DFD_Compute>
 8005da4:	eef0 7a40 	vmov.f32	s15, s0
 8005da8:	4b7d      	ldr	r3, [pc, #500]	@ (8005fa0 <update_homing_sequence+0x544>)
 8005daa:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005dae:	4b7c      	ldr	r3, [pc, #496]	@ (8005fa0 <update_homing_sequence+0x544>)
 8005db0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005db4:	4b7a      	ldr	r3, [pc, #488]	@ (8005fa0 <update_homing_sequence+0x544>)
 8005db6:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005dba:	4b79      	ldr	r3, [pc, #484]	@ (8005fa0 <update_homing_sequence+0x544>)
 8005dbc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005dc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dc8:	4b75      	ldr	r3, [pc, #468]	@ (8005fa0 <update_homing_sequence+0x544>)
 8005dca:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005dce:	4b74      	ldr	r3, [pc, #464]	@ (8005fa0 <update_homing_sequence+0x544>)
 8005dd0:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005dd4:	4b75      	ldr	r3, [pc, #468]	@ (8005fac <update_homing_sequence+0x550>)
 8005dd6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005dda:	4610      	mov	r0, r2
 8005ddc:	4619      	mov	r1, r3
 8005dde:	f7fa fe71 	bl	8000ac4 <__aeabi_d2iz>
 8005de2:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005de4:	4b71      	ldr	r3, [pc, #452]	@ (8005fac <update_homing_sequence+0x550>)
 8005de6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005dea:	4692      	mov	sl, r2
 8005dec:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005df0:	4650      	mov	r0, sl
 8005df2:	4659      	mov	r1, fp
 8005df4:	f7fa fe66 	bl	8000ac4 <__aeabi_d2iz>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	eeb0 0a48 	vmov.f32	s0, s16
 8005e02:	f7fb f9a7 	bl	8001154 <PWM_Satuation>
 8005e06:	ee07 0a90 	vmov	s15, r0
 8005e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e0e:	4b64      	ldr	r3, [pc, #400]	@ (8005fa0 <update_homing_sequence+0x544>)
 8005e10:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (up_photo) {
 8005e14:	4b6c      	ldr	r3, [pc, #432]	@ (8005fc8 <update_homing_sequence+0x56c>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 8197 	beq.w	800614e <update_homing_sequence+0x6f2>
			// Found up photo, stop and start delay before backup
			prismatic_axis.command_pos = 0.0f;
 8005e20:	4b5f      	ldr	r3, [pc, #380]	@ (8005fa0 <update_homing_sequence+0x544>)
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005e28:	4b68      	ldr	r3, [pc, #416]	@ (8005fcc <update_homing_sequence+0x570>)
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005e30:	4b67      	ldr	r3, [pc, #412]	@ (8005fd0 <update_homing_sequence+0x574>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 8005e36:	4b67      	ldr	r3, [pc, #412]	@ (8005fd4 <update_homing_sequence+0x578>)
 8005e38:	2206      	movs	r2, #6
 8005e3a:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag after use
 8005e3c:	4b62      	ldr	r3, [pc, #392]	@ (8005fc8 <update_homing_sequence+0x56c>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005e42:	e184      	b.n	800614e <update_homing_sequence+0x6f2>

	case HOMING_DELAY_AFTER_UP_PHOTO:
		// Stop motors and wait before starting backup procedure
		prismatic_axis.command_pos = 0.0f;
 8005e44:	4b56      	ldr	r3, [pc, #344]	@ (8005fa0 <update_homing_sequence+0x544>)
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005e4c:	4b5f      	ldr	r3, [pc, #380]	@ (8005fcc <update_homing_sequence+0x570>)
 8005e4e:	f04f 0200 	mov.w	r2, #0
 8005e52:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005e54:	4b5e      	ldr	r3, [pc, #376]	@ (8005fd0 <update_homing_sequence+0x574>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	4a5d      	ldr	r2, [pc, #372]	@ (8005fd0 <update_homing_sequence+0x574>)
 8005e5c:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 150) {
 8005e5e:	4b5c      	ldr	r3, [pc, #368]	@ (8005fd0 <update_homing_sequence+0x574>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b95      	cmp	r3, #149	@ 0x95
 8005e64:	f240 8175 	bls.w	8006152 <update_homing_sequence+0x6f6>
			if (first_startup) {
 8005e68:	4b5b      	ldr	r3, [pc, #364]	@ (8005fd8 <update_homing_sequence+0x57c>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01d      	beq.n	8005eac <update_homing_sequence+0x450>
				// STARTUP: Check if prox is already detected before searching
				bool prox_detected = HAL_GPIO_ReadPin(prox_GPIO_Port, prox_Pin);
 8005e70:	2120      	movs	r1, #32
 8005e72:	485a      	ldr	r0, [pc, #360]	@ (8005fdc <update_homing_sequence+0x580>)
 8005e74:	f007 fae6 	bl	800d444 <HAL_GPIO_ReadPin>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	bf14      	ite	ne
 8005e7e:	2301      	movne	r3, #1
 8005e80:	2300      	moveq	r3, #0
 8005e82:	76fb      	strb	r3, [r7, #27]

				if (prox_detected) {
 8005e84:	7efb      	ldrb	r3, [r7, #27]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d009      	beq.n	8005e9e <update_homing_sequence+0x442>
					// Already at prox - skip search and go to completion
					motion_delay_timer = 0;
 8005e8a:	4b51      	ldr	r3, [pc, #324]	@ (8005fd0 <update_homing_sequence+0x574>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]
					homing_state = HOMING_DELAY_AFTER_PROX;
 8005e90:	4b50      	ldr	r3, [pc, #320]	@ (8005fd4 <update_homing_sequence+0x578>)
 8005e92:	220a      	movs	r2, #10
 8005e94:	701a      	strb	r2, [r3, #0]
					prox_count = 1; // Set count to indicate prox found
 8005e96:	4b52      	ldr	r3, [pc, #328]	@ (8005fe0 <update_homing_sequence+0x584>)
 8005e98:	2201      	movs	r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_REV_TO_ZERO_DEG;
				// Initialize trajectory variables for zero degree movement
				rev_to_zero_trajectory_started = false;
			}
		}
		break;
 8005e9c:	e159      	b.n	8006152 <update_homing_sequence+0x6f6>
					homing_state = HOMING_REV_CW_TO_PROX1;
 8005e9e:	4b4d      	ldr	r3, [pc, #308]	@ (8005fd4 <update_homing_sequence+0x578>)
 8005ea0:	2209      	movs	r2, #9
 8005ea2:	701a      	strb	r2, [r3, #0]
					prox_count = 0; // Reset prox counter
 8005ea4:	4b4e      	ldr	r3, [pc, #312]	@ (8005fe0 <update_homing_sequence+0x584>)
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	601a      	str	r2, [r3, #0]
		break;
 8005eaa:	e152      	b.n	8006152 <update_homing_sequence+0x6f6>
				homing_state = HOMING_REV_TO_ZERO_DEG;
 8005eac:	4b49      	ldr	r3, [pc, #292]	@ (8005fd4 <update_homing_sequence+0x578>)
 8005eae:	2207      	movs	r2, #7
 8005eb0:	701a      	strb	r2, [r3, #0]
				rev_to_zero_trajectory_started = false;
 8005eb2:	4b4c      	ldr	r3, [pc, #304]	@ (8005fe4 <update_homing_sequence+0x588>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	701a      	strb	r2, [r3, #0]
		break;
 8005eb8:	e14b      	b.n	8006152 <update_homing_sequence+0x6f6>

	case HOMING_REV_TO_ZERO_DEG:
		if (!rev_to_zero_trajectory_started) {
 8005eba:	4b4a      	ldr	r3, [pc, #296]	@ (8005fe4 <update_homing_sequence+0x588>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	f083 0301 	eor.w	r3, r3, #1
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d02f      	beq.n	8005f28 <update_homing_sequence+0x4cc>
			// Get current prismatic position (keep it where it is)
			float current_pris_pos = prismatic_encoder.mm;
 8005ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8005fb8 <update_homing_sequence+0x55c>)
 8005eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ecc:	623b      	str	r3, [r7, #32]
			float current_rev_deg = normalize_angle(revolute_encoder.rads)
 8005ece:	4b39      	ldr	r3, [pc, #228]	@ (8005fb4 <update_homing_sequence+0x558>)
 8005ed0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ed8:	f000 f95c 	bl	8006194 <normalize_angle>
 8005edc:	eef0 7a40 	vmov.f32	s15, s0
					* 180.0f / PI;
 8005ee0:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8005fe8 <update_homing_sequence+0x58c>
 8005ee4:	ee27 7a87 	vmul.f32	s14, s15, s14
			float current_rev_deg = normalize_angle(revolute_encoder.rads)
 8005ee8:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8005fec <update_homing_sequence+0x590>
 8005eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ef0:	edc7 7a07 	vstr	s15, [r7, #28]

			check[0] = (int) current_rev_deg;
 8005ef4:	edd7 7a07 	vldr	s15, [r7, #28]
 8005ef8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005efc:	ee17 2a90 	vmov	r2, s15
 8005f00:	4b3b      	ldr	r3, [pc, #236]	@ (8005ff0 <update_homing_sequence+0x594>)
 8005f02:	601a      	str	r2, [r3, #0]
			check[1] = (int) movement_deg;
 8005f04:	4b3b      	ldr	r3, [pc, #236]	@ (8005ff4 <update_homing_sequence+0x598>)
 8005f06:	edd3 7a00 	vldr	s15, [r3]
 8005f0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f0e:	ee17 2a90 	vmov	r2, s15
 8005f12:	4b37      	ldr	r3, [pc, #220]	@ (8005ff0 <update_homing_sequence+0x594>)
 8005f14:	605a      	str	r2, [r3, #4]

			// Start combined trajectory to move revolute to 0° while keeping prismatic position
			start_combined_trajectory(0.0, 0.0);
 8005f16:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8005fc0 <update_homing_sequence+0x564>
 8005f1a:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8005fc0 <update_homing_sequence+0x564>
 8005f1e:	f000 faad 	bl	800647c <start_combined_trajectory>

			rev_to_zero_trajectory_started = true;
 8005f22:	4b30      	ldr	r3, [pc, #192]	@ (8005fe4 <update_homing_sequence+0x588>)
 8005f24:	2201      	movs	r2, #1
 8005f26:	701a      	strb	r2, [r3, #0]
		}

		// Wait for trajectory to complete
		if (motion_sequence_state == MOTION_IDLE) {
 8005f28:	4b33      	ldr	r3, [pc, #204]	@ (8005ff8 <update_homing_sequence+0x59c>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f040 8112 	bne.w	8006156 <update_homing_sequence+0x6fa>
			// Trajectory completed, move to next homing state
			motion_delay_timer = 0;
 8005f32:	4b27      	ldr	r3, [pc, #156]	@ (8005fd0 <update_homing_sequence+0x574>)
 8005f34:	2200      	movs	r2, #0
 8005f36:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 8005f38:	4b26      	ldr	r3, [pc, #152]	@ (8005fd4 <update_homing_sequence+0x578>)
 8005f3a:	2208      	movs	r2, #8
 8005f3c:	701a      	strb	r2, [r3, #0]
			prox_count = 0; // Reset prox counter for next stage
 8005f3e:	4b28      	ldr	r3, [pc, #160]	@ (8005fe0 <update_homing_sequence+0x584>)
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]
			rev_to_zero_trajectory_started = false; // Reset for next time
 8005f44:	4b27      	ldr	r3, [pc, #156]	@ (8005fe4 <update_homing_sequence+0x588>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005f4a:	e104      	b.n	8006156 <update_homing_sequence+0x6fa>

	case HOMING_DELAY_AFTER_ZERO_DEG:
		// Stop motors and wait - let normal control handle this
		motion_delay_timer++;
 8005f4c:	4b20      	ldr	r3, [pc, #128]	@ (8005fd0 <update_homing_sequence+0x574>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3301      	adds	r3, #1
 8005f52:	4a1f      	ldr	r2, [pc, #124]	@ (8005fd0 <update_homing_sequence+0x574>)
 8005f54:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 150) {
 8005f56:	4b1e      	ldr	r3, [pc, #120]	@ (8005fd0 <update_homing_sequence+0x574>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2b95      	cmp	r3, #149	@ 0x95
 8005f5c:	f240 80fd 	bls.w	800615a <update_homing_sequence+0x6fe>
			// CHECK IF PROX IS ALREADY DETECTED BEFORE STARTING SEARCH
			bool prox_detected = HAL_GPIO_ReadPin(prox_GPIO_Port, prox_Pin);
 8005f60:	2120      	movs	r1, #32
 8005f62:	481e      	ldr	r0, [pc, #120]	@ (8005fdc <update_homing_sequence+0x580>)
 8005f64:	f007 fa6e 	bl	800d444 <HAL_GPIO_ReadPin>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	bf14      	ite	ne
 8005f6e:	2301      	movne	r3, #1
 8005f70:	2300      	moveq	r3, #0
 8005f72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			if (prox_detected) {
 8005f76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d009      	beq.n	8005f92 <update_homing_sequence+0x536>
				// Already at proximity sensor - skip search and go directly to completion
				motion_delay_timer = 0;
 8005f7e:	4b14      	ldr	r3, [pc, #80]	@ (8005fd0 <update_homing_sequence+0x574>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_PROX;
 8005f84:	4b13      	ldr	r3, [pc, #76]	@ (8005fd4 <update_homing_sequence+0x578>)
 8005f86:	220a      	movs	r2, #10
 8005f88:	701a      	strb	r2, [r3, #0]
				prox_count = 1; // Set count to indicate prox found
 8005f8a:	4b15      	ldr	r3, [pc, #84]	@ (8005fe0 <update_homing_sequence+0x584>)
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]
				// Not at prox - need to search for it
				homing_state = HOMING_REV_CW_TO_PROX1;
				prox_count = 0; // Reset counter for search
			}
		}
		break;
 8005f90:	e0e3      	b.n	800615a <update_homing_sequence+0x6fe>
				homing_state = HOMING_REV_CW_TO_PROX1;
 8005f92:	4b10      	ldr	r3, [pc, #64]	@ (8005fd4 <update_homing_sequence+0x578>)
 8005f94:	2209      	movs	r2, #9
 8005f96:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset counter for search
 8005f98:	4b11      	ldr	r3, [pc, #68]	@ (8005fe0 <update_homing_sequence+0x584>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]
		break;
 8005f9e:	e0dc      	b.n	800615a <update_homing_sequence+0x6fe>
 8005fa0:	20000704 	.word	0x20000704
 8005fa4:	c37a0000 	.word	0xc37a0000
 8005fa8:	20000a60 	.word	0x20000a60
 8005fac:	20000080 	.word	0x20000080
 8005fb0:	20000b00 	.word	0x20000b00
 8005fb4:	200009dc 	.word	0x200009dc
 8005fb8:	20000980 	.word	0x20000980
 8005fbc:	447a0000 	.word	0x447a0000
 8005fc0:	00000000 	.word	0x00000000
 8005fc4:	20000b04 	.word	0x20000b04
 8005fc8:	200007e8 	.word	0x200007e8
 8005fcc:	20000748 	.word	0x20000748
 8005fd0:	200007e0 	.word	0x200007e0
 8005fd4:	200007ea 	.word	0x200007ea
 8005fd8:	20000333 	.word	0x20000333
 8005fdc:	48000400 	.word	0x48000400
 8005fe0:	200007e4 	.word	0x200007e4
 8005fe4:	200007f6 	.word	0x200007f6
 8005fe8:	43340000 	.word	0x43340000
 8005fec:	40490fdb 	.word	0x40490fdb
 8005ff0:	2000086c 	.word	0x2000086c
 8005ff4:	20000800 	.word	0x20000800
 8005ff8:	2000078c 	.word	0x2000078c

	case HOMING_REV_CW_TO_PROX1:
		// Move revolute clockwise with velocity control until prox count = 1
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
				- revolute_axis.kalman_velocity;
 8005ffc:	4b5c      	ldr	r3, [pc, #368]	@ (8006170 <update_homing_sequence+0x714>)
 8005ffe:	edd3 7a07 	vldr	s15, [r3, #28]
 8006002:	eebf 7a08 	vmov.f32	s14, #248	@ 0xbfc00000 -1.5
 8006006:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
 800600a:	4b59      	ldr	r3, [pc, #356]	@ (8006170 <update_homing_sequence+0x714>)
 800600c:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8006010:	4b57      	ldr	r3, [pc, #348]	@ (8006170 <update_homing_sequence+0x714>)
 8006012:	edd3 7a06 	vldr	s15, [r3, #24]
 8006016:	eeb0 0a67 	vmov.f32	s0, s15
 800601a:	4856      	ldr	r0, [pc, #344]	@ (8006174 <update_homing_sequence+0x718>)
 800601c:	f7fb f8fc 	bl	8001218 <PID_CONTROLLER_Compute>
 8006020:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8006024:	4b54      	ldr	r3, [pc, #336]	@ (8006178 <update_homing_sequence+0x71c>)
 8006026:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 800602a:	4610      	mov	r0, r2
 800602c:	4619      	mov	r1, r3
 800602e:	f7fa fd49 	bl	8000ac4 <__aeabi_d2iz>
 8006032:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8006034:	4b50      	ldr	r3, [pc, #320]	@ (8006178 <update_homing_sequence+0x71c>)
 8006036:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800603a:	4690      	mov	r8, r2
 800603c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(
 8006040:	4640      	mov	r0, r8
 8006042:	4649      	mov	r1, r9
 8006044:	f7fa fd3e 	bl	8000ac4 <__aeabi_d2iz>
 8006048:	4603      	mov	r3, r0
 800604a:	4619      	mov	r1, r3
 800604c:	4630      	mov	r0, r6
 800604e:	eeb0 0a48 	vmov.f32	s0, s16
 8006052:	f7fb f87f 	bl	8001154 <PWM_Satuation>
 8006056:	ee07 0a90 	vmov	s15, r0
 800605a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800605e:	4b44      	ldr	r3, [pc, #272]	@ (8006170 <update_homing_sequence+0x714>)
 8006060:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8006064:	eebf 0a08 	vmov.f32	s0, #248	@ 0xbfc00000 -1.5
 8006068:	4844      	ldr	r0, [pc, #272]	@ (800617c <update_homing_sequence+0x720>)
 800606a:	f7fb fa73 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 800606e:	eef0 7a40 	vmov.f32	s15, s0
 8006072:	4b3f      	ldr	r3, [pc, #252]	@ (8006170 <update_homing_sequence+0x714>)
 8006074:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_REV_VELOCITY);
		revolute_axis.dfd = 0.0;
 8006078:	4b3d      	ldr	r3, [pc, #244]	@ (8006170 <update_homing_sequence+0x714>)
 800607a:	f04f 0200 	mov.w	r2, #0
 800607e:	62da      	str	r2, [r3, #44]	@ 0x2c

		revolute_axis.command_pos += revolute_axis.ffd;
 8006080:	4b3b      	ldr	r3, [pc, #236]	@ (8006170 <update_homing_sequence+0x714>)
 8006082:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006086:	4b3a      	ldr	r3, [pc, #232]	@ (8006170 <update_homing_sequence+0x714>)
 8006088:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800608c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006090:	4b37      	ldr	r3, [pc, #220]	@ (8006170 <update_homing_sequence+0x714>)
 8006092:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006096:	4b36      	ldr	r3, [pc, #216]	@ (8006170 <update_homing_sequence+0x714>)
 8006098:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_150RPM_Constant.U_max,
 800609c:	4b36      	ldr	r3, [pc, #216]	@ (8006178 <update_homing_sequence+0x71c>)
 800609e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80060a2:	4610      	mov	r0, r2
 80060a4:	4619      	mov	r1, r3
 80060a6:	f7fa fd0d 	bl	8000ac4 <__aeabi_d2iz>
 80060aa:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 80060ac:	4b32      	ldr	r3, [pc, #200]	@ (8006178 <update_homing_sequence+0x71c>)
 80060ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80060b2:	4614      	mov	r4, r2
 80060b4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80060b8:	4620      	mov	r0, r4
 80060ba:	4629      	mov	r1, r5
 80060bc:	f7fa fd02 	bl	8000ac4 <__aeabi_d2iz>
 80060c0:	4603      	mov	r3, r0
 80060c2:	4619      	mov	r1, r3
 80060c4:	4630      	mov	r0, r6
 80060c6:	eeb0 0a48 	vmov.f32	s0, s16
 80060ca:	f7fb f843 	bl	8001154 <PWM_Satuation>
 80060ce:	ee07 0a90 	vmov	s15, r0
 80060d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060d6:	4b26      	ldr	r3, [pc, #152]	@ (8006170 <update_homing_sequence+0x714>)
 80060d8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (prox_count >= 1) {
 80060dc:	4b28      	ldr	r3, [pc, #160]	@ (8006180 <update_homing_sequence+0x724>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d03c      	beq.n	800615e <update_homing_sequence+0x702>
			// Found prox sensor, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 80060e4:	4b27      	ldr	r3, [pc, #156]	@ (8006184 <update_homing_sequence+0x728>)
 80060e6:	f04f 0200 	mov.w	r2, #0
 80060ea:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 80060ec:	4b20      	ldr	r3, [pc, #128]	@ (8006170 <update_homing_sequence+0x714>)
 80060ee:	f04f 0200 	mov.w	r2, #0
 80060f2:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 80060f4:	4b24      	ldr	r3, [pc, #144]	@ (8006188 <update_homing_sequence+0x72c>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_PROX;
 80060fa:	4b24      	ldr	r3, [pc, #144]	@ (800618c <update_homing_sequence+0x730>)
 80060fc:	220a      	movs	r2, #10
 80060fe:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006100:	e02d      	b.n	800615e <update_homing_sequence+0x702>

	case HOMING_DELAY_AFTER_PROX:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8006102:	4b20      	ldr	r3, [pc, #128]	@ (8006184 <update_homing_sequence+0x728>)
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 800610a:	4b19      	ldr	r3, [pc, #100]	@ (8006170 <update_homing_sequence+0x714>)
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8006112:	4b1d      	ldr	r3, [pc, #116]	@ (8006188 <update_homing_sequence+0x72c>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3301      	adds	r3, #1
 8006118:	4a1b      	ldr	r2, [pc, #108]	@ (8006188 <update_homing_sequence+0x72c>)
 800611a:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 150) {
 800611c:	4b1a      	ldr	r3, [pc, #104]	@ (8006188 <update_homing_sequence+0x72c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b95      	cmp	r3, #149	@ 0x95
 8006122:	d91e      	bls.n	8006162 <update_homing_sequence+0x706>
			homing_state = HOMING_COMPLETE;
 8006124:	4b19      	ldr	r3, [pc, #100]	@ (800618c <update_homing_sequence+0x730>)
 8006126:	220b      	movs	r2, #11
 8006128:	701a      	strb	r2, [r3, #0]
		}
		break;
 800612a:	e01a      	b.n	8006162 <update_homing_sequence+0x706>

	case HOMING_COMPLETE:
		check[5]++;
 800612c:	4b18      	ldr	r3, [pc, #96]	@ (8006190 <update_homing_sequence+0x734>)
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	3301      	adds	r3, #1
 8006132:	4a17      	ldr	r2, [pc, #92]	@ (8006190 <update_homing_sequence+0x734>)
 8006134:	6153      	str	r3, [r2, #20]
		NVIC_SystemReset();
 8006136:	f7ff fad7 	bl	80056e8 <__NVIC_SystemReset>
		return;
 800613a:	bf00      	nop
 800613c:	e012      	b.n	8006164 <update_homing_sequence+0x708>
		break;

	case HOMING_IDLE:
	default:
		break;
 800613e:	bf00      	nop
 8006140:	e010      	b.n	8006164 <update_homing_sequence+0x708>
		break;
 8006142:	bf00      	nop
 8006144:	e00e      	b.n	8006164 <update_homing_sequence+0x708>
		break;
 8006146:	bf00      	nop
 8006148:	e00c      	b.n	8006164 <update_homing_sequence+0x708>
		break;
 800614a:	bf00      	nop
 800614c:	e00a      	b.n	8006164 <update_homing_sequence+0x708>
		break;
 800614e:	bf00      	nop
 8006150:	e008      	b.n	8006164 <update_homing_sequence+0x708>
		break;
 8006152:	bf00      	nop
 8006154:	e006      	b.n	8006164 <update_homing_sequence+0x708>
		break;
 8006156:	bf00      	nop
 8006158:	e004      	b.n	8006164 <update_homing_sequence+0x708>
		break;
 800615a:	bf00      	nop
 800615c:	e002      	b.n	8006164 <update_homing_sequence+0x708>
		break;
 800615e:	bf00      	nop
 8006160:	e000      	b.n	8006164 <update_homing_sequence+0x708>
		break;
 8006162:	bf00      	nop
	}
}
 8006164:	372c      	adds	r7, #44	@ 0x2c
 8006166:	46bd      	mov	sp, r7
 8006168:	ecbd 8b02 	vpop	{d8}
 800616c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006170:	20000748 	.word	0x20000748
 8006174:	20000ab0 	.word	0x20000ab0
 8006178:	20000000 	.word	0x20000000
 800617c:	20000b0c 	.word	0x20000b0c
 8006180:	200007e4 	.word	0x200007e4
 8006184:	20000704 	.word	0x20000704
 8006188:	200007e0 	.word	0x200007e0
 800618c:	200007ea 	.word	0x200007ea
 8006190:	2000086c 	.word	0x2000086c

08006194 <normalize_angle>:

float normalize_angle(float angle_rad) {
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 800619e:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80061dc <normalize_angle+0x48>
 80061a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80061a6:	f00d f87f 	bl	80132a8 <fmodf>
 80061aa:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 80061ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80061b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ba:	d507      	bpl.n	80061cc <normalize_angle+0x38>
		result += 2.0f * PI;
 80061bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80061c0:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80061dc <normalize_angle+0x48>
 80061c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061c8:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	ee07 3a90 	vmov	s15, r3
}
 80061d2:	eeb0 0a67 	vmov.f32	s0, s15
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40c90fdb 	.word	0x40c90fdb

080061e0 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80061ea:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 80061ee:	f04f 0300 	mov.w	r3, #0
 80061f2:	60fb      	str	r3, [r7, #12]

	// Validate inputs
	if (!isfinite(current_deg) || !isfinite(target_deg)) {
 80061f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80061f8:	eef0 7ae7 	vabs.f32	s15, s15
 80061fc:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800645c <calculate_movement_deg+0x27c>
 8006200:	eef4 7a47 	vcmp.f32	s15, s14
 8006204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006208:	d80a      	bhi.n	8006220 <calculate_movement_deg+0x40>
 800620a:	edd7 7a00 	vldr	s15, [r7]
 800620e:	eef0 7ae7 	vabs.f32	s15, s15
 8006212:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 800645c <calculate_movement_deg+0x27c>
 8006216:	eef4 7a47 	vcmp.f32	s15, s14
 800621a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800621e:	d902      	bls.n	8006226 <calculate_movement_deg+0x46>
		return 0.0f;
 8006220:	f04f 0300 	mov.w	r3, #0
 8006224:	e111      	b.n	800644a <calculate_movement_deg+0x26a>
	}

	// Normalize angles to 0-360 range
	while (current_deg < 0.0f)
 8006226:	e007      	b.n	8006238 <calculate_movement_deg+0x58>
		current_deg += 360.0f;
 8006228:	edd7 7a01 	vldr	s15, [r7, #4]
 800622c:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8006460 <calculate_movement_deg+0x280>
 8006230:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006234:	edc7 7a01 	vstr	s15, [r7, #4]
	while (current_deg < 0.0f)
 8006238:	edd7 7a01 	vldr	s15, [r7, #4]
 800623c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006244:	d4f0      	bmi.n	8006228 <calculate_movement_deg+0x48>
	while (current_deg >= 360.0f)
 8006246:	e007      	b.n	8006258 <calculate_movement_deg+0x78>
		current_deg -= 360.0f;
 8006248:	edd7 7a01 	vldr	s15, [r7, #4]
 800624c:	ed9f 7a84 	vldr	s14, [pc, #528]	@ 8006460 <calculate_movement_deg+0x280>
 8006250:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006254:	edc7 7a01 	vstr	s15, [r7, #4]
	while (current_deg >= 360.0f)
 8006258:	edd7 7a01 	vldr	s15, [r7, #4]
 800625c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8006460 <calculate_movement_deg+0x280>
 8006260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006268:	daee      	bge.n	8006248 <calculate_movement_deg+0x68>
	while (target_deg < 0.0f)
 800626a:	e007      	b.n	800627c <calculate_movement_deg+0x9c>
		target_deg += 360.0f;
 800626c:	edd7 7a00 	vldr	s15, [r7]
 8006270:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8006460 <calculate_movement_deg+0x280>
 8006274:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006278:	edc7 7a00 	vstr	s15, [r7]
	while (target_deg < 0.0f)
 800627c:	edd7 7a00 	vldr	s15, [r7]
 8006280:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006288:	d4f0      	bmi.n	800626c <calculate_movement_deg+0x8c>
	while (target_deg >= 360.0f)
 800628a:	e007      	b.n	800629c <calculate_movement_deg+0xbc>
		target_deg -= 360.0f;
 800628c:	edd7 7a00 	vldr	s15, [r7]
 8006290:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8006460 <calculate_movement_deg+0x280>
 8006294:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006298:	edc7 7a00 	vstr	s15, [r7]
	while (target_deg >= 360.0f)
 800629c:	edd7 7a00 	vldr	s15, [r7]
 80062a0:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8006460 <calculate_movement_deg+0x280>
 80062a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ac:	daee      	bge.n	800628c <calculate_movement_deg+0xac>

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 80062ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80062b2:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8006464 <calculate_movement_deg+0x284>
 80062b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062be:	d508      	bpl.n	80062d2 <calculate_movement_deg+0xf2>
 80062c0:	edd7 7a00 	vldr	s15, [r7]
 80062c4:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 8006464 <calculate_movement_deg+0x284>
 80062c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d0:	d411      	bmi.n	80062f6 <calculate_movement_deg+0x116>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 80062d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80062d6:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8006464 <calculate_movement_deg+0x284>
 80062da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e2:	db33      	blt.n	800634c <calculate_movement_deg+0x16c>
 80062e4:	edd7 7a00 	vldr	s15, [r7]
 80062e8:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 8006464 <calculate_movement_deg+0x284>
 80062ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f4:	db2a      	blt.n	800634c <calculate_movement_deg+0x16c>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 80062f6:	ed97 7a00 	vldr	s14, [r7]
 80062fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80062fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006302:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 8006306:	edd7 7a03 	vldr	s15, [r7, #12]
 800630a:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8006464 <calculate_movement_deg+0x284>
 800630e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006316:	dd07      	ble.n	8006328 <calculate_movement_deg+0x148>
			movement -= 360.0f;
 8006318:	edd7 7a03 	vldr	s15, [r7, #12]
 800631c:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8006460 <calculate_movement_deg+0x280>
 8006320:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006324:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006328:	edd7 7a03 	vldr	s15, [r7, #12]
 800632c:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8006468 <calculate_movement_deg+0x288>
 8006330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006338:	d562      	bpl.n	8006400 <calculate_movement_deg+0x220>
			movement += 360.0f;
 800633a:	edd7 7a03 	vldr	s15, [r7, #12]
 800633e:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8006460 <calculate_movement_deg+0x280>
 8006342:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006346:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 800634a:	e059      	b.n	8006400 <calculate_movement_deg+0x220>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 800634c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006350:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8006464 <calculate_movement_deg+0x284>
 8006354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800635c:	d52a      	bpl.n	80063b4 <calculate_movement_deg+0x1d4>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 800635e:	edd7 7a00 	vldr	s15, [r7]
 8006362:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8006464 <calculate_movement_deg+0x284>
 8006366:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800636a:	ed97 7a01 	vldr	s14, [r7, #4]
 800636e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006376:	d50e      	bpl.n	8006396 <calculate_movement_deg+0x1b6>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 8006378:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8006460 <calculate_movement_deg+0x280>
 800637c:	edd7 7a00 	vldr	s15, [r7]
 8006380:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006384:	edd7 7a01 	vldr	s15, [r7, #4]
 8006388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800638c:	eef1 7a67 	vneg.f32	s15, s15
 8006390:	edc7 7a03 	vstr	s15, [r7, #12]
 8006394:	e034      	b.n	8006400 <calculate_movement_deg+0x220>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 8006396:	ed97 7a01 	vldr	s14, [r7, #4]
 800639a:	edd7 7a00 	vldr	s15, [r7]
 800639e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063a2:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006460 <calculate_movement_deg+0x280>
 80063a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063aa:	eef1 7a67 	vneg.f32	s15, s15
 80063ae:	edc7 7a03 	vstr	s15, [r7, #12]
 80063b2:	e025      	b.n	8006400 <calculate_movement_deg+0x220>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 80063b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80063b8:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006464 <calculate_movement_deg+0x284>
 80063bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063c0:	ed97 7a00 	vldr	s14, [r7]
 80063c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063cc:	d50c      	bpl.n	80063e8 <calculate_movement_deg+0x208>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 80063ce:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8006460 <calculate_movement_deg+0x280>
 80063d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80063d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063da:	ed97 7a00 	vldr	s14, [r7]
 80063de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063e2:	edc7 7a03 	vstr	s15, [r7, #12]
 80063e6:	e00b      	b.n	8006400 <calculate_movement_deg+0x220>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 80063e8:	ed97 7a00 	vldr	s14, [r7]
 80063ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80063f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063f4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8006460 <calculate_movement_deg+0x280>
 80063f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063fc:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	// Final validation
	if (!isfinite(movement)) {
 8006400:	edd7 7a03 	vldr	s15, [r7, #12]
 8006404:	eef0 7ae7 	vabs.f32	s15, s15
 8006408:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800645c <calculate_movement_deg+0x27c>
 800640c:	eef4 7a47 	vcmp.f32	s15, s14
 8006410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006414:	d902      	bls.n	800641c <calculate_movement_deg+0x23c>
		movement = 0.0f;
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	60fb      	str	r3, [r7, #12]
	}

	// Clamp to reasonable range
	if (movement > 359.0f)
 800641c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006420:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800646c <calculate_movement_deg+0x28c>
 8006424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800642c:	dd01      	ble.n	8006432 <calculate_movement_deg+0x252>
		movement = 359.0f;
 800642e:	4b10      	ldr	r3, [pc, #64]	@ (8006470 <calculate_movement_deg+0x290>)
 8006430:	60fb      	str	r3, [r7, #12]
	if (movement < -359.0f)
 8006432:	edd7 7a03 	vldr	s15, [r7, #12]
 8006436:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8006474 <calculate_movement_deg+0x294>
 800643a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800643e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006442:	d501      	bpl.n	8006448 <calculate_movement_deg+0x268>
		movement = -359.0f;
 8006444:	4b0c      	ldr	r3, [pc, #48]	@ (8006478 <calculate_movement_deg+0x298>)
 8006446:	60fb      	str	r3, [r7, #12]

	return movement;
 8006448:	68fb      	ldr	r3, [r7, #12]
}
 800644a:	ee07 3a90 	vmov	s15, r3
 800644e:	eeb0 0a67 	vmov.f32	s0, s15
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	7f7fffff 	.word	0x7f7fffff
 8006460:	43b40000 	.word	0x43b40000
 8006464:	43340000 	.word	0x43340000
 8006468:	c3340000 	.word	0xc3340000
 800646c:	43b38000 	.word	0x43b38000
 8006470:	43b38000 	.word	0x43b38000
 8006474:	c3b38000 	.word	0xc3b38000
 8006478:	c3b38000 	.word	0xc3b38000

0800647c <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 800647c:	b590      	push	{r4, r7, lr}
 800647e:	ed2d 8b02 	vpush	{d8}
 8006482:	b091      	sub	sp, #68	@ 0x44
 8006484:	af00      	add	r7, sp, #0
 8006486:	ed87 0a01 	vstr	s0, [r7, #4]
 800648a:	edc7 0a00 	vstr	s1, [r7]
	bool allow_during_homing = (homing_active
 800648e:	4b8d      	ldr	r3, [pc, #564]	@ (80066c4 <start_combined_trajectory+0x248>)
 8006490:	781b      	ldrb	r3, [r3, #0]
			&& homing_state == HOMING_REV_TO_ZERO_DEG);
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <start_combined_trajectory+0x26>
 8006496:	4b8c      	ldr	r3, [pc, #560]	@ (80066c8 <start_combined_trajectory+0x24c>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	2b07      	cmp	r3, #7
 800649c:	d101      	bne.n	80064a2 <start_combined_trajectory+0x26>
 800649e:	2301      	movs	r3, #1
 80064a0:	e000      	b.n	80064a4 <start_combined_trajectory+0x28>
 80064a2:	2300      	movs	r3, #0
	bool allow_during_homing = (homing_active
 80064a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80064a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (is_emergency_active() || (homing_active && !allow_during_homing)) {
 80064b4:	f001 fa7c 	bl	80079b0 <is_emergency_active>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f040 8231 	bne.w	8006922 <start_combined_trajectory+0x4a6>
 80064c0:	4b80      	ldr	r3, [pc, #512]	@ (80066c4 <start_combined_trajectory+0x248>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d007      	beq.n	80064d8 <start_combined_trajectory+0x5c>
 80064c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80064cc:	f083 0301 	eor.w	r3, r3, #1
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	f040 8225 	bne.w	8006922 <start_combined_trajectory+0x4a6>
		return;
	}

	// Check if motion is already active
	if (motion_sequence_state != MOTION_IDLE) {
 80064d8:	4b7c      	ldr	r3, [pc, #496]	@ (80066cc <start_combined_trajectory+0x250>)
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f040 8222 	bne.w	8006926 <start_combined_trajectory+0x4aa>
		return; // Don't start new trajectory if one is active
	}

	float pris_current = prismatic_encoder.mm;
 80064e2:	4b7b      	ldr	r3, [pc, #492]	@ (80066d0 <start_combined_trajectory+0x254>)
 80064e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064e6:	633b      	str	r3, [r7, #48]	@ 0x30
	float rev_current = revolute_encoder.rads;
 80064e8:	4b7a      	ldr	r3, [pc, #488]	@ (80066d4 <start_combined_trajectory+0x258>)
 80064ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// Reset trajectory structures completely
	memset(&prisEva, 0, sizeof(prisEva));
 80064ee:	2214      	movs	r2, #20
 80064f0:	2100      	movs	r1, #0
 80064f2:	4879      	ldr	r0, [pc, #484]	@ (80066d8 <start_combined_trajectory+0x25c>)
 80064f4:	f00c fddc 	bl	80130b0 <memset>
	memset(&revEva, 0, sizeof(revEva));
 80064f8:	2214      	movs	r2, #20
 80064fa:	2100      	movs	r1, #0
 80064fc:	4877      	ldr	r0, [pc, #476]	@ (80066dc <start_combined_trajectory+0x260>)
 80064fe:	f00c fdd7 	bl	80130b0 <memset>
	memset(&prisGen, 0, sizeof(prisGen));
 8006502:	2214      	movs	r2, #20
 8006504:	2100      	movs	r1, #0
 8006506:	4876      	ldr	r0, [pc, #472]	@ (80066e0 <start_combined_trajectory+0x264>)
 8006508:	f00c fdd2 	bl	80130b0 <memset>
	memset(&revGen, 0, sizeof(revGen));
 800650c:	2214      	movs	r2, #20
 800650e:	2100      	movs	r1, #0
 8006510:	4874      	ldr	r0, [pc, #464]	@ (80066e4 <start_combined_trajectory+0x268>)
 8006512:	f00c fdcd 	bl	80130b0 <memset>

	prisEva.t = 0.0f;
 8006516:	4b70      	ldr	r3, [pc, #448]	@ (80066d8 <start_combined_trajectory+0x25c>)
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 800651e:	4b6e      	ldr	r3, [pc, #440]	@ (80066d8 <start_combined_trajectory+0x25c>)
 8006520:	2200      	movs	r2, #0
 8006522:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 8006524:	4b6d      	ldr	r3, [pc, #436]	@ (80066dc <start_combined_trajectory+0x260>)
 8006526:	f04f 0200 	mov.w	r2, #0
 800652a:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 800652c:	4b6b      	ldr	r3, [pc, #428]	@ (80066dc <start_combined_trajectory+0x260>)
 800652e:	2200      	movs	r2, #0
 8006530:	741a      	strb	r2, [r3, #16]

	prismatic_axis.initial_pos = pris_current;
 8006532:	4a6d      	ldr	r2, [pc, #436]	@ (80066e8 <start_combined_trajectory+0x26c>)
 8006534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006536:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 8006538:	4a6c      	ldr	r2, [pc, #432]	@ (80066ec <start_combined_trajectory+0x270>)
 800653a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800653c:	60d3      	str	r3, [r2, #12]

	prismatic_axis.target_pos = fminf(
 800653e:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 80066f0 <start_combined_trajectory+0x274>
 8006542:	ed97 0a01 	vldr	s0, [r7, #4]
 8006546:	f00c ff77 	bl	8013438 <fmaxf>
 800654a:	eef0 7a40 	vmov.f32	s15, s0
 800654e:	eddf 0a69 	vldr	s1, [pc, #420]	@ 80066f4 <start_combined_trajectory+0x278>
 8006552:	eeb0 0a67 	vmov.f32	s0, s15
 8006556:	f00c ff8c 	bl	8013472 <fminf>
 800655a:	eef0 7a40 	vmov.f32	s15, s0
 800655e:	4b62      	ldr	r3, [pc, #392]	@ (80066e8 <start_combined_trajectory+0x26c>)
 8006560:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS), PRISMATIC_MAX_POS);

	// Check for NaN/infinity
	if (!isfinite(prismatic_axis.target_pos)) {
 8006564:	4b60      	ldr	r3, [pc, #384]	@ (80066e8 <start_combined_trajectory+0x26c>)
 8006566:	edd3 7a04 	vldr	s15, [r3, #16]
 800656a:	eef0 7ae7 	vabs.f32	s15, s15
 800656e:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 80066f8 <start_combined_trajectory+0x27c>
 8006572:	eef4 7a47 	vcmp.f32	s15, s14
 8006576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657a:	d903      	bls.n	8006584 <start_combined_trajectory+0x108>
		prismatic_axis.target_pos = prismatic_axis.initial_pos;
 800657c:	4b5a      	ldr	r3, [pc, #360]	@ (80066e8 <start_combined_trajectory+0x26c>)
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	4a59      	ldr	r2, [pc, #356]	@ (80066e8 <start_combined_trajectory+0x26c>)
 8006582:	6113      	str	r3, [r2, #16]
	}

	float normalized_current = normalize_angle(rev_current);
 8006584:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8006588:	f7ff fe04 	bl	8006194 <normalize_angle>
 800658c:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float current_deg = normalized_current * 180.0f / PI;
 8006590:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006594:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80066fc <start_combined_trajectory+0x280>
 8006598:	ee27 7a87 	vmul.f32	s14, s15, s14
 800659c:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006700 <start_combined_trajectory+0x284>
 80065a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065a4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 80065a8:	edd7 0a00 	vldr	s1, [r7]
 80065ac:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80065b0:	f7ff fe16 	bl	80061e0 <calculate_movement_deg>
 80065b4:	eef0 7a40 	vmov.f32	s15, s0
 80065b8:	4b52      	ldr	r3, [pc, #328]	@ (8006704 <start_combined_trajectory+0x288>)
 80065ba:	edc3 7a00 	vstr	s15, [r3]

	// Validate movement_deg
	if (!isfinite(movement_deg)) {
 80065be:	4b51      	ldr	r3, [pc, #324]	@ (8006704 <start_combined_trajectory+0x288>)
 80065c0:	edd3 7a00 	vldr	s15, [r3]
 80065c4:	eef0 7ae7 	vabs.f32	s15, s15
 80065c8:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80066f8 <start_combined_trajectory+0x27c>
 80065cc:	eef4 7a47 	vcmp.f32	s15, s14
 80065d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d4:	d903      	bls.n	80065de <start_combined_trajectory+0x162>
		movement_deg = 0.0f;
 80065d6:	4b4b      	ldr	r3, [pc, #300]	@ (8006704 <start_combined_trajectory+0x288>)
 80065d8:	f04f 0200 	mov.w	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]
	}

	float movement_rad = movement_deg * PI / 180.0f;
 80065de:	4b49      	ldr	r3, [pc, #292]	@ (8006704 <start_combined_trajectory+0x288>)
 80065e0:	edd3 7a00 	vldr	s15, [r3]
 80065e4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8006700 <start_combined_trajectory+0x284>
 80065e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80065ec:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80066fc <start_combined_trajectory+0x280>
 80065f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065f4:	edc7 7a08 	vstr	s15, [r7, #32]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 80065f8:	4b3c      	ldr	r3, [pc, #240]	@ (80066ec <start_combined_trajectory+0x270>)
 80065fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80065fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8006602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006606:	4b39      	ldr	r3, [pc, #228]	@ (80066ec <start_combined_trajectory+0x270>)
 8006608:	edc3 7a04 	vstr	s15, [r3, #16]

	// Check if we're in HOMING_REV_TO_ZERO_DEG mode
	bool is_homing_zero_deg = (homing_active
 800660c:	4b2d      	ldr	r3, [pc, #180]	@ (80066c4 <start_combined_trajectory+0x248>)
 800660e:	781b      	ldrb	r3, [r3, #0]
			&& homing_state == HOMING_REV_TO_ZERO_DEG);
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <start_combined_trajectory+0x1a4>
 8006614:	4b2c      	ldr	r3, [pc, #176]	@ (80066c8 <start_combined_trajectory+0x24c>)
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b07      	cmp	r3, #7
 800661a:	d101      	bne.n	8006620 <start_combined_trajectory+0x1a4>
 800661c:	2301      	movs	r3, #1
 800661e:	e000      	b.n	8006622 <start_combined_trajectory+0x1a6>
 8006620:	2300      	movs	r3, #0
	bool is_homing_zero_deg = (homing_active
 8006622:	77fb      	strb	r3, [r7, #31]
 8006624:	7ffb      	ldrb	r3, [r7, #31]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	77fb      	strb	r3, [r7, #31]

	if (is_homing_zero_deg) {
 800662c:	7ffb      	ldrb	r3, [r7, #31]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d074      	beq.n	800671c <start_combined_trajectory+0x2a0>
		// HOMING_REV_TO_ZERO_DEG: Only generate revolute trajectory

		check[2]++;
 8006632:	4b35      	ldr	r3, [pc, #212]	@ (8006708 <start_combined_trajectory+0x28c>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	3301      	adds	r3, #1
 8006638:	4a33      	ldr	r2, [pc, #204]	@ (8006708 <start_combined_trajectory+0x28c>)
 800663a:	6093      	str	r3, [r2, #8]

		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800663c:	4b2b      	ldr	r3, [pc, #172]	@ (80066ec <start_combined_trajectory+0x270>)
 800663e:	ed93 8a03 	vldr	s16, [r3, #12]
 8006642:	4b2a      	ldr	r3, [pc, #168]	@ (80066ec <start_combined_trajectory+0x270>)
 8006644:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos,
				ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006648:	4b30      	ldr	r3, [pc, #192]	@ (800670c <start_combined_trajectory+0x290>)
 800664a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800664e:	4610      	mov	r0, r2
 8006650:	4619      	mov	r1, r3
 8006652:	f7fa fa7f 	bl	8000b54 <__aeabi_d2f>
 8006656:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006658:	4b2c      	ldr	r3, [pc, #176]	@ (800670c <start_combined_trajectory+0x290>)
 800665a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800665e:	4610      	mov	r0, r2
 8006660:	4619      	mov	r1, r3
 8006662:	f7fa fa77 	bl	8000b54 <__aeabi_d2f>
 8006666:	4603      	mov	r3, r0
 8006668:	ee01 3a90 	vmov	s3, r3
 800666c:	ee01 4a10 	vmov	s2, r4
 8006670:	eef0 0a68 	vmov.f32	s1, s17
 8006674:	eeb0 0a48 	vmov.f32	s0, s16
 8006678:	481a      	ldr	r0, [pc, #104]	@ (80066e4 <start_combined_trajectory+0x268>)
 800667a:	f7fd fe4b 	bl	8004314 <Trapezoidal_Generator>

		sync_motion_active = false;
 800667e:	4b24      	ldr	r3, [pc, #144]	@ (8006710 <start_combined_trajectory+0x294>)
 8006680:	2200      	movs	r2, #0
 8006682:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 8006684:	4b18      	ldr	r3, [pc, #96]	@ (80066e8 <start_combined_trajectory+0x26c>)
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		prismatic_axis.position = pris_current;
 800668c:	4a16      	ldr	r2, [pc, #88]	@ (80066e8 <start_combined_trajectory+0x26c>)
 800668e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006690:	6013      	str	r3, [r2, #0]
		prismatic_axis.velocity = 0.0f;
 8006692:	4b15      	ldr	r3, [pc, #84]	@ (80066e8 <start_combined_trajectory+0x26c>)
 8006694:	f04f 0200 	mov.w	r2, #0
 8006698:	605a      	str	r2, [r3, #4]

		revolute_axis.trajectory_active = true;
 800669a:	4b14      	ldr	r3, [pc, #80]	@ (80066ec <start_combined_trajectory+0x270>)
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		if (!current_drawing_sequence.sequence_active) {
 80066a2:	4b1c      	ldr	r3, [pc, #112]	@ (8006714 <start_combined_trajectory+0x298>)
 80066a4:	799b      	ldrb	r3, [r3, #6]
 80066a6:	f083 0301 	eor.w	r3, r3, #1
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d001      	beq.n	80066b4 <start_combined_trajectory+0x238>
			plotter_pen_up();
 80066b0:	f003 fb80 	bl	8009db4 <plotter_pen_up>
		}

		motion_delay_timer = 0;
 80066b4:	4b18      	ldr	r3, [pc, #96]	@ (8006718 <start_combined_trajectory+0x29c>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]
		motion_sequence_state = MOTION_PEN_UP_DELAY;
 80066ba:	4b04      	ldr	r3, [pc, #16]	@ (80066cc <start_combined_trajectory+0x250>)
 80066bc:	2201      	movs	r2, #1
 80066be:	701a      	strb	r2, [r3, #0]
 80066c0:	e132      	b.n	8006928 <start_combined_trajectory+0x4ac>
 80066c2:	bf00      	nop
 80066c4:	200007eb 	.word	0x200007eb
 80066c8:	200007ea 	.word	0x200007ea
 80066cc:	2000078c 	.word	0x2000078c
 80066d0:	20000980 	.word	0x20000980
 80066d4:	200009dc 	.word	0x200009dc
 80066d8:	200007b8 	.word	0x200007b8
 80066dc:	200007cc 	.word	0x200007cc
 80066e0:	20000790 	.word	0x20000790
 80066e4:	200007a4 	.word	0x200007a4
 80066e8:	20000704 	.word	0x20000704
 80066ec:	20000748 	.word	0x20000748
 80066f0:	00000000 	.word	0x00000000
 80066f4:	43960000 	.word	0x43960000
 80066f8:	7f7fffff 	.word	0x7f7fffff
 80066fc:	43340000 	.word	0x43340000
 8006700:	40490fdb 	.word	0x40490fdb
 8006704:	20000800 	.word	0x20000800
 8006708:	2000086c 	.word	0x2000086c
 800670c:	20000000 	.word	0x20000000
 8006710:	200008ac 	.word	0x200008ac
 8006714:	200008b0 	.word	0x200008b0
 8006718:	200007e0 	.word	0x200007e0

	} else {
		// NORMAL TRAJECTORY: Use time-synchronized motion
		check[3]++;
 800671c:	4b85      	ldr	r3, [pc, #532]	@ (8006934 <start_combined_trajectory+0x4b8>)
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	3301      	adds	r3, #1
 8006722:	4a84      	ldr	r2, [pc, #528]	@ (8006934 <start_combined_trajectory+0x4b8>)
 8006724:	60d3      	str	r3, [r2, #12]
		// Calculate distances
		float pris_distance = fabsf(
				prismatic_axis.target_pos - prismatic_axis.initial_pos);
 8006726:	4b84      	ldr	r3, [pc, #528]	@ (8006938 <start_combined_trajectory+0x4bc>)
 8006728:	ed93 7a04 	vldr	s14, [r3, #16]
 800672c:	4b82      	ldr	r3, [pc, #520]	@ (8006938 <start_combined_trajectory+0x4bc>)
 800672e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006732:	ee77 7a67 	vsub.f32	s15, s14, s15
		float pris_distance = fabsf(
 8006736:	eef0 7ae7 	vabs.f32	s15, s15
 800673a:	edc7 7a06 	vstr	s15, [r7, #24]
		float rev_distance = fabsf(
				revolute_axis.target_pos - revolute_axis.initial_pos);
 800673e:	4b7f      	ldr	r3, [pc, #508]	@ (800693c <start_combined_trajectory+0x4c0>)
 8006740:	ed93 7a04 	vldr	s14, [r3, #16]
 8006744:	4b7d      	ldr	r3, [pc, #500]	@ (800693c <start_combined_trajectory+0x4c0>)
 8006746:	edd3 7a03 	vldr	s15, [r3, #12]
 800674a:	ee77 7a67 	vsub.f32	s15, s14, s15
		float rev_distance = fabsf(
 800674e:	eef0 7ae7 	vabs.f32	s15, s15
 8006752:	edc7 7a05 	vstr	s15, [r7, #20]

		// Calculate time needed for each axis at their max speeds
		float pris_time_needed = 0.0f;
 8006756:	f04f 0300 	mov.w	r3, #0
 800675a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		float rev_time_needed = 0.0f;
 800675c:	f04f 0300 	mov.w	r3, #0
 8006760:	63bb      	str	r3, [r7, #56]	@ 0x38

		if (pris_distance > 0.1f) {
 8006762:	edd7 7a06 	vldr	s15, [r7, #24]
 8006766:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8006940 <start_combined_trajectory+0x4c4>
 800676a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800676e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006772:	dd18      	ble.n	80067a6 <start_combined_trajectory+0x32a>
			// Time = distance / max_velocity, factor in acceleration/deceleration
			pris_time_needed = (pris_distance
					/ ZGX45RGG_400RPM_Constant.traject_sd_max) * 2.5f;
 8006774:	69b8      	ldr	r0, [r7, #24]
 8006776:	f7f9 feb3 	bl	80004e0 <__aeabi_f2d>
 800677a:	4b72      	ldr	r3, [pc, #456]	@ (8006944 <start_combined_trajectory+0x4c8>)
 800677c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8006780:	f7fa f830 	bl	80007e4 <__aeabi_ddiv>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4610      	mov	r0, r2
 800678a:	4619      	mov	r1, r3
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	4b6d      	ldr	r3, [pc, #436]	@ (8006948 <start_combined_trajectory+0x4cc>)
 8006792:	f7f9 fefd 	bl	8000590 <__aeabi_dmul>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
			pris_time_needed = (pris_distance
 800679a:	4610      	mov	r0, r2
 800679c:	4619      	mov	r1, r3
 800679e:	f7fa f9d9 	bl	8000b54 <__aeabi_d2f>
 80067a2:	4603      	mov	r3, r0
 80067a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		}

		if (rev_distance > 0.01f) {
 80067a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80067aa:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800694c <start_combined_trajectory+0x4d0>
 80067ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b6:	dd18      	ble.n	80067ea <start_combined_trajectory+0x36e>
			rev_time_needed = (rev_distance
					/ ZGX45RGG_150RPM_Constant.traject_qd_max) * 2.5f;
 80067b8:	6978      	ldr	r0, [r7, #20]
 80067ba:	f7f9 fe91 	bl	80004e0 <__aeabi_f2d>
 80067be:	4b64      	ldr	r3, [pc, #400]	@ (8006950 <start_combined_trajectory+0x4d4>)
 80067c0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80067c4:	f7fa f80e 	bl	80007e4 <__aeabi_ddiv>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4610      	mov	r0, r2
 80067ce:	4619      	mov	r1, r3
 80067d0:	f04f 0200 	mov.w	r2, #0
 80067d4:	4b5c      	ldr	r3, [pc, #368]	@ (8006948 <start_combined_trajectory+0x4cc>)
 80067d6:	f7f9 fedb 	bl	8000590 <__aeabi_dmul>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
			rev_time_needed = (rev_distance
 80067de:	4610      	mov	r0, r2
 80067e0:	4619      	mov	r1, r3
 80067e2:	f7fa f9b7 	bl	8000b54 <__aeabi_d2f>
 80067e6:	4603      	mov	r3, r0
 80067e8:	63bb      	str	r3, [r7, #56]	@ 0x38
		}

		// Use the longer time, with minimum time
		sync_total_time = fmaxf(pris_time_needed, rev_time_needed);
 80067ea:	edd7 0a0e 	vldr	s1, [r7, #56]	@ 0x38
 80067ee:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80067f2:	f00c fe21 	bl	8013438 <fmaxf>
 80067f6:	eef0 7a40 	vmov.f32	s15, s0
 80067fa:	4b56      	ldr	r3, [pc, #344]	@ (8006954 <start_combined_trajectory+0x4d8>)
 80067fc:	edc3 7a00 	vstr	s15, [r3]
		if (sync_total_time < 1.0f)
 8006800:	4b54      	ldr	r3, [pc, #336]	@ (8006954 <start_combined_trajectory+0x4d8>)
 8006802:	edd3 7a00 	vldr	s15, [r3]
 8006806:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800680a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800680e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006812:	d503      	bpl.n	800681c <start_combined_trajectory+0x3a0>
			sync_total_time = 1.0f; // Minimum 1 second
 8006814:	4b4f      	ldr	r3, [pc, #316]	@ (8006954 <start_combined_trajectory+0x4d8>)
 8006816:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800681a:	601a      	str	r2, [r3, #0]

		// Generate individual trajectories (we'll interpolate based on sync_total_time)
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 800681c:	4b46      	ldr	r3, [pc, #280]	@ (8006938 <start_combined_trajectory+0x4bc>)
 800681e:	ed93 8a03 	vldr	s16, [r3, #12]
 8006822:	4b45      	ldr	r3, [pc, #276]	@ (8006938 <start_combined_trajectory+0x4bc>)
 8006824:	edd3 8a04 	vldr	s17, [r3, #16]
				prismatic_axis.target_pos,
				ZGX45RGG_400RPM_Constant.traject_sd_max,
 8006828:	4b46      	ldr	r3, [pc, #280]	@ (8006944 <start_combined_trajectory+0x4c8>)
 800682a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 800682e:	4610      	mov	r0, r2
 8006830:	4619      	mov	r1, r3
 8006832:	f7fa f98f 	bl	8000b54 <__aeabi_d2f>
 8006836:	4604      	mov	r4, r0
				ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8006838:	4b42      	ldr	r3, [pc, #264]	@ (8006944 <start_combined_trajectory+0x4c8>)
 800683a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 800683e:	4610      	mov	r0, r2
 8006840:	4619      	mov	r1, r3
 8006842:	f7fa f987 	bl	8000b54 <__aeabi_d2f>
 8006846:	4603      	mov	r3, r0
 8006848:	ee01 3a90 	vmov	s3, r3
 800684c:	ee01 4a10 	vmov	s2, r4
 8006850:	eef0 0a68 	vmov.f32	s1, s17
 8006854:	eeb0 0a48 	vmov.f32	s0, s16
 8006858:	483f      	ldr	r0, [pc, #252]	@ (8006958 <start_combined_trajectory+0x4dc>)
 800685a:	f7fd fd5b 	bl	8004314 <Trapezoidal_Generator>

		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800685e:	4b37      	ldr	r3, [pc, #220]	@ (800693c <start_combined_trajectory+0x4c0>)
 8006860:	ed93 8a03 	vldr	s16, [r3, #12]
 8006864:	4b35      	ldr	r3, [pc, #212]	@ (800693c <start_combined_trajectory+0x4c0>)
 8006866:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos,
				ZGX45RGG_150RPM_Constant.traject_qd_max,
 800686a:	4b39      	ldr	r3, [pc, #228]	@ (8006950 <start_combined_trajectory+0x4d4>)
 800686c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006870:	4610      	mov	r0, r2
 8006872:	4619      	mov	r1, r3
 8006874:	f7fa f96e 	bl	8000b54 <__aeabi_d2f>
 8006878:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.traject_qdd_max);
 800687a:	4b35      	ldr	r3, [pc, #212]	@ (8006950 <start_combined_trajectory+0x4d4>)
 800687c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006880:	4610      	mov	r0, r2
 8006882:	4619      	mov	r1, r3
 8006884:	f7fa f966 	bl	8000b54 <__aeabi_d2f>
 8006888:	4603      	mov	r3, r0
 800688a:	ee01 3a90 	vmov	s3, r3
 800688e:	ee01 4a10 	vmov	s2, r4
 8006892:	eef0 0a68 	vmov.f32	s1, s17
 8006896:	eeb0 0a48 	vmov.f32	s0, s16
 800689a:	4830      	ldr	r0, [pc, #192]	@ (800695c <start_combined_trajectory+0x4e0>)
 800689c:	f7fd fd3a 	bl	8004314 <Trapezoidal_Generator>

		// Initialize synchronized motion
		sync_motion_active = true;
 80068a0:	4b2f      	ldr	r3, [pc, #188]	@ (8006960 <start_combined_trajectory+0x4e4>)
 80068a2:	2201      	movs	r2, #1
 80068a4:	701a      	strb	r2, [r3, #0]
		sync_start_time = 0.0f;
 80068a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006964 <start_combined_trajectory+0x4e8>)
 80068a8:	f04f 0200 	mov.w	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 80068ae:	4b22      	ldr	r3, [pc, #136]	@ (8006938 <start_combined_trajectory+0x4bc>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 80068b6:	4b21      	ldr	r3, [pc, #132]	@ (800693c <start_combined_trajectory+0x4c0>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		if (current_drawing_sequence.sequence_active
 80068be:	4b2a      	ldr	r3, [pc, #168]	@ (8006968 <start_combined_trajectory+0x4ec>)
 80068c0:	799b      	ldrb	r3, [r3, #6]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d01c      	beq.n	8006900 <start_combined_trajectory+0x484>
				&& current_drawing_sequence.current_point > 0) {
 80068c6:	4b28      	ldr	r3, [pc, #160]	@ (8006968 <start_combined_trajectory+0x4ec>)
 80068c8:	795b      	ldrb	r3, [r3, #5]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d018      	beq.n	8006900 <start_combined_trajectory+0x484>
			// ดูว่าจุดปัจจุบันต้องการวางปากกาหรือไม่
			DrawingPoint_t current =
					current_drawing_sequence.points[current_drawing_sequence.current_point
 80068ce:	4b26      	ldr	r3, [pc, #152]	@ (8006968 <start_combined_trajectory+0x4ec>)
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	4b25      	ldr	r3, [pc, #148]	@ (8006968 <start_combined_trajectory+0x4ec>)
 80068d4:	795b      	ldrb	r3, [r3, #5]
 80068d6:	4619      	mov	r1, r3
 80068d8:	460b      	mov	r3, r1
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	440b      	add	r3, r1
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	3b0c      	subs	r3, #12
 80068e2:	441a      	add	r2, r3
			DrawingPoint_t current =
 80068e4:	f107 0308 	add.w	r3, r7, #8
 80068e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80068ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
							- 1];

			// ถ้าต้องการวางปากกา ก็ไม่ต้องยกขึ้น
			if (!current.pen_down) {
 80068ee:	7c3b      	ldrb	r3, [r7, #16]
 80068f0:	f083 0301 	eor.w	r3, r3, #1
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d005      	beq.n	8006906 <start_combined_trajectory+0x48a>
				plotter_pen_up();
 80068fa:	f003 fa5b 	bl	8009db4 <plotter_pen_up>
				&& current_drawing_sequence.current_point > 0) {
 80068fe:	e002      	b.n	8006906 <start_combined_trajectory+0x48a>
			}
		} else {
			// ไม่ได้วาดตัวอักษร - ยกปากกาตามปกติ
			plotter_pen_up();
 8006900:	f003 fa58 	bl	8009db4 <plotter_pen_up>
 8006904:	e000      	b.n	8006908 <start_combined_trajectory+0x48c>
				&& current_drawing_sequence.current_point > 0) {
 8006906:	bf00      	nop
		}
		motion_delay_timer = 0;
 8006908:	4b18      	ldr	r3, [pc, #96]	@ (800696c <start_combined_trajectory+0x4f0>)
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]
		motion_sequence_state = MOTION_PEN_UP_DELAY;
 800690e:	4b18      	ldr	r3, [pc, #96]	@ (8006970 <start_combined_trajectory+0x4f4>)
 8006910:	2201      	movs	r2, #1
 8006912:	701a      	strb	r2, [r3, #0]

		//modbus reset state
		registerFrame[BaseSystem_Status].U16 = 0;
 8006914:	4b17      	ldr	r3, [pc, #92]	@ (8006974 <start_combined_trajectory+0x4f8>)
 8006916:	2200      	movs	r2, #0
 8006918:	805a      	strh	r2, [r3, #2]
		registerFrame[R_Theta_Status].U16 = 0;
 800691a:	4b16      	ldr	r3, [pc, #88]	@ (8006974 <start_combined_trajectory+0x4f8>)
 800691c:	2200      	movs	r2, #0
 800691e:	841a      	strh	r2, [r3, #32]
 8006920:	e002      	b.n	8006928 <start_combined_trajectory+0x4ac>
		return;
 8006922:	bf00      	nop
 8006924:	e000      	b.n	8006928 <start_combined_trajectory+0x4ac>
		return; // Don't start new trajectory if one is active
 8006926:	bf00      	nop
	}
}
 8006928:	3744      	adds	r7, #68	@ 0x44
 800692a:	46bd      	mov	sp, r7
 800692c:	ecbd 8b02 	vpop	{d8}
 8006930:	bd90      	pop	{r4, r7, pc}
 8006932:	bf00      	nop
 8006934:	2000086c 	.word	0x2000086c
 8006938:	20000704 	.word	0x20000704
 800693c:	20000748 	.word	0x20000748
 8006940:	3dcccccd 	.word	0x3dcccccd
 8006944:	20000080 	.word	0x20000080
 8006948:	40040000 	.word	0x40040000
 800694c:	3c23d70a 	.word	0x3c23d70a
 8006950:	20000000 	.word	0x20000000
 8006954:	200008a8 	.word	0x200008a8
 8006958:	20000790 	.word	0x20000790
 800695c:	200007a4 	.word	0x200007a4
 8006960:	200008ac 	.word	0x200008ac
 8006964:	200008a4 	.word	0x200008a4
 8006968:	200008b0 	.word	0x200008b0
 800696c:	200007e0 	.word	0x200007e0
 8006970:	2000078c 	.word	0x2000078c
 8006974:	20001584 	.word	0x20001584

08006978 <update_position_control>:
void update_position_control(void) {
 8006978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800697c:	ed2d 8b02 	vpush	{d8}
 8006980:	b083      	sub	sp, #12
 8006982:	af00      	add	r7, sp, #0
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 8006984:	4b50      	ldr	r3, [pc, #320]	@ (8006ac8 <update_position_control+0x150>)
 8006986:	ed93 7a00 	vldr	s14, [r3]
 800698a:	4b50      	ldr	r3, [pc, #320]	@ (8006acc <update_position_control+0x154>)
 800698c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8006990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006994:	4b4c      	ldr	r3, [pc, #304]	@ (8006ac8 <update_position_control+0x150>)
 8006996:	edc3 7a05 	vstr	s15, [r3, #20]
	prismatic_axis.command_vel = PWM_Satuation(
 800699a:	4b4b      	ldr	r3, [pc, #300]	@ (8006ac8 <update_position_control+0x150>)
 800699c:	edd3 7a05 	vldr	s15, [r3, #20]
 80069a0:	eeb0 0a67 	vmov.f32	s0, s15
 80069a4:	484a      	ldr	r0, [pc, #296]	@ (8006ad0 <update_position_control+0x158>)
 80069a6:	f7fa fc37 	bl	8001218 <PID_CONTROLLER_Compute>
 80069aa:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 80069ae:	4b49      	ldr	r3, [pc, #292]	@ (8006ad4 <update_position_control+0x15c>)
 80069b0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 80069b4:	4610      	mov	r0, r2
 80069b6:	4619      	mov	r1, r3
 80069b8:	f7fa f884 	bl	8000ac4 <__aeabi_d2iz>
 80069bc:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 80069be:	4b45      	ldr	r3, [pc, #276]	@ (8006ad4 <update_position_control+0x15c>)
 80069c0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80069c4:	4690      	mov	r8, r2
 80069c6:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 80069ca:	4640      	mov	r0, r8
 80069cc:	4649      	mov	r1, r9
 80069ce:	f7fa f879 	bl	8000ac4 <__aeabi_d2iz>
 80069d2:	4603      	mov	r3, r0
 80069d4:	4619      	mov	r1, r3
 80069d6:	4630      	mov	r0, r6
 80069d8:	eeb0 0a48 	vmov.f32	s0, s16
 80069dc:	f7fa fbba 	bl	8001154 <PWM_Satuation>
 80069e0:	ee07 0a90 	vmov	s15, r0
 80069e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069e8:	4b37      	ldr	r3, [pc, #220]	@ (8006ac8 <update_position_control+0x150>)
 80069ea:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	float normalized_position = normalize_angle(revolute_encoder.rads);
 80069ee:	4b3a      	ldr	r3, [pc, #232]	@ (8006ad8 <update_position_control+0x160>)
 80069f0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80069f4:	eeb0 0a67 	vmov.f32	s0, s15
 80069f8:	f7ff fbcc 	bl	8006194 <normalize_angle>
 80069fc:	ed87 0a01 	vstr	s0, [r7, #4]
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 8006a00:	4b36      	ldr	r3, [pc, #216]	@ (8006adc <update_position_control+0x164>)
 8006a02:	ed93 7a00 	vldr	s14, [r3]
 8006a06:	edd7 7a01 	vldr	s15, [r7, #4]
 8006a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a0e:	4b33      	ldr	r3, [pc, #204]	@ (8006adc <update_position_control+0x164>)
 8006a10:	edc3 7a05 	vstr	s15, [r3, #20]

	if (revolute_axis.pos_error > PI)
 8006a14:	4b31      	ldr	r3, [pc, #196]	@ (8006adc <update_position_control+0x164>)
 8006a16:	edd3 7a05 	vldr	s15, [r3, #20]
 8006a1a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006ae0 <update_position_control+0x168>
 8006a1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a26:	dd09      	ble.n	8006a3c <update_position_control+0xc4>
		revolute_axis.pos_error -= 2.0f * PI;
 8006a28:	4b2c      	ldr	r3, [pc, #176]	@ (8006adc <update_position_control+0x164>)
 8006a2a:	edd3 7a05 	vldr	s15, [r3, #20]
 8006a2e:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8006ae4 <update_position_control+0x16c>
 8006a32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a36:	4b29      	ldr	r3, [pc, #164]	@ (8006adc <update_position_control+0x164>)
 8006a38:	edc3 7a05 	vstr	s15, [r3, #20]
	if (revolute_axis.pos_error < -PI)
 8006a3c:	4b27      	ldr	r3, [pc, #156]	@ (8006adc <update_position_control+0x164>)
 8006a3e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006a42:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8006ae8 <update_position_control+0x170>
 8006a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a4e:	d509      	bpl.n	8006a64 <update_position_control+0xec>
		revolute_axis.pos_error += 2.0f * PI;
 8006a50:	4b22      	ldr	r3, [pc, #136]	@ (8006adc <update_position_control+0x164>)
 8006a52:	edd3 7a05 	vldr	s15, [r3, #20]
 8006a56:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8006ae4 <update_position_control+0x16c>
 8006a5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8006adc <update_position_control+0x164>)
 8006a60:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 8006a64:	4b1d      	ldr	r3, [pc, #116]	@ (8006adc <update_position_control+0x164>)
 8006a66:	edd3 7a05 	vldr	s15, [r3, #20]
 8006a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8006a6e:	481f      	ldr	r0, [pc, #124]	@ (8006aec <update_position_control+0x174>)
 8006a70:	f7fa fbd2 	bl	8001218 <PID_CONTROLLER_Compute>
 8006a74:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 8006a78:	4b1d      	ldr	r3, [pc, #116]	@ (8006af0 <update_position_control+0x178>)
 8006a7a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 8006a7e:	4610      	mov	r0, r2
 8006a80:	4619      	mov	r1, r3
 8006a82:	f7fa f81f 	bl	8000ac4 <__aeabi_d2iz>
 8006a86:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 8006a88:	4b19      	ldr	r3, [pc, #100]	@ (8006af0 <update_position_control+0x178>)
 8006a8a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006a8e:	4614      	mov	r4, r2
 8006a90:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 8006a94:	4620      	mov	r0, r4
 8006a96:	4629      	mov	r1, r5
 8006a98:	f7fa f814 	bl	8000ac4 <__aeabi_d2iz>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	eeb0 0a48 	vmov.f32	s0, s16
 8006aa6:	f7fa fb55 	bl	8001154 <PWM_Satuation>
 8006aaa:	ee07 0a90 	vmov	s15, r0
 8006aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8006adc <update_position_control+0x164>)
 8006ab4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	ecbd 8b02 	vpop	{d8}
 8006ac2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000704 	.word	0x20000704
 8006acc:	20000980 	.word	0x20000980
 8006ad0:	20000a38 	.word	0x20000a38
 8006ad4:	20000080 	.word	0x20000080
 8006ad8:	200009dc 	.word	0x200009dc
 8006adc:	20000748 	.word	0x20000748
 8006ae0:	40490fdb 	.word	0x40490fdb
 8006ae4:	40c90fdb 	.word	0x40c90fdb
 8006ae8:	c0490fdb 	.word	0xc0490fdb
 8006aec:	20000a88 	.word	0x20000a88
 8006af0:	20000000 	.word	0x20000000
 8006af4:	00000000 	.word	0x00000000

08006af8 <update_velocity_control>:

void update_velocity_control(void) {
 8006af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afc:	ed2d 8b02 	vpush	{d8}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0

	if (prismatic_axis.trajectory_active) {
 8006b04:	4b96      	ldr	r3, [pc, #600]	@ (8006d60 <update_velocity_control+0x268>)
 8006b06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d010      	beq.n	8006b30 <update_velocity_control+0x38>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006b0e:	4b94      	ldr	r3, [pc, #592]	@ (8006d60 <update_velocity_control+0x268>)
 8006b10:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 8006b14:	4b92      	ldr	r3, [pc, #584]	@ (8006d60 <update_velocity_control+0x268>)
 8006b16:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b1e:	4b90      	ldr	r3, [pc, #576]	@ (8006d60 <update_velocity_control+0x268>)
 8006b20:	edd3 7a07 	vldr	s15, [r3, #28]
 8006b24:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006b28:	4b8d      	ldr	r3, [pc, #564]	@ (8006d60 <update_velocity_control+0x268>)
 8006b2a:	edc3 7a06 	vstr	s15, [r3, #24]
 8006b2e:	e00a      	b.n	8006b46 <update_velocity_control+0x4e>
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006b30:	4b8b      	ldr	r3, [pc, #556]	@ (8006d60 <update_velocity_control+0x268>)
 8006b32:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8006b36:	4b8a      	ldr	r3, [pc, #552]	@ (8006d60 <update_velocity_control+0x268>)
 8006b38:	edd3 7a07 	vldr	s15, [r3, #28]
 8006b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006b40:	4b87      	ldr	r3, [pc, #540]	@ (8006d60 <update_velocity_control+0x268>)
 8006b42:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 8006b46:	4b86      	ldr	r3, [pc, #536]	@ (8006d60 <update_velocity_control+0x268>)
 8006b48:	edd3 7a06 	vldr	s15, [r3, #24]
 8006b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b50:	4884      	ldr	r0, [pc, #528]	@ (8006d64 <update_velocity_control+0x26c>)
 8006b52:	f7fa fb61 	bl	8001218 <PID_CONTROLLER_Compute>
 8006b56:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 8006b5a:	4b83      	ldr	r3, [pc, #524]	@ (8006d68 <update_velocity_control+0x270>)
 8006b5c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 8006b60:	4610      	mov	r0, r2
 8006b62:	4619      	mov	r1, r3
 8006b64:	f7f9 ffae 	bl	8000ac4 <__aeabi_d2iz>
 8006b68:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 8006b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8006d68 <update_velocity_control+0x270>)
 8006b6c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006b70:	603a      	str	r2, [r7, #0]
 8006b72:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006b76:	607b      	str	r3, [r7, #4]
	prismatic_axis.command_pos = PWM_Satuation(
 8006b78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006b7c:	f7f9 ffa2 	bl	8000ac4 <__aeabi_d2iz>
 8006b80:	4603      	mov	r3, r0
 8006b82:	4619      	mov	r1, r3
 8006b84:	4630      	mov	r0, r6
 8006b86:	eeb0 0a48 	vmov.f32	s0, s16
 8006b8a:	f7fa fae3 	bl	8001154 <PWM_Satuation>
 8006b8e:	ee07 0a90 	vmov	s15, r0
 8006b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b96:	4b72      	ldr	r3, [pc, #456]	@ (8006d60 <update_velocity_control+0x268>)
 8006b98:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (prismatic_axis.trajectory_active) {
 8006b9c:	4b70      	ldr	r3, [pc, #448]	@ (8006d60 <update_velocity_control+0x268>)
 8006b9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d02c      	beq.n	8006c00 <update_velocity_control+0x108>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 8006ba6:	4b6e      	ldr	r3, [pc, #440]	@ (8006d60 <update_velocity_control+0x268>)
 8006ba8:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8006bac:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006d6c <update_velocity_control+0x274>
 8006bb0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006bb4:	eeb0 0a47 	vmov.f32	s0, s14
 8006bb8:	486d      	ldr	r0, [pc, #436]	@ (8006d70 <update_velocity_control+0x278>)
 8006bba:	f7fa fe49 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8006bbe:	eef0 7a40 	vmov.f32	s15, s0
 8006bc2:	4b67      	ldr	r3, [pc, #412]	@ (8006d60 <update_velocity_control+0x268>)
 8006bc4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006bc8:	4b6a      	ldr	r3, [pc, #424]	@ (8006d74 <update_velocity_control+0x27c>)
 8006bca:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8006bce:	4b6a      	ldr	r3, [pc, #424]	@ (8006d78 <update_velocity_control+0x280>)
 8006bd0:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 8006bd4:	4b69      	ldr	r3, [pc, #420]	@ (8006d7c <update_velocity_control+0x284>)
 8006bd6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8006bda:	eddf 5a64 	vldr	s11, [pc, #400]	@ 8006d6c <update_velocity_control+0x274>
 8006bde:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8006be2:	eeb0 1a46 	vmov.f32	s2, s12
 8006be6:	eef0 0a66 	vmov.f32	s1, s13
 8006bea:	eeb0 0a47 	vmov.f32	s0, s14
 8006bee:	4864      	ldr	r0, [pc, #400]	@ (8006d80 <update_velocity_control+0x288>)
 8006bf0:	f7fa fed6 	bl	80019a0 <PRISMATIC_MOTOR_DFD_Compute>
 8006bf4:	eef0 7a40 	vmov.f32	s15, s0
 8006bf8:	4b59      	ldr	r3, [pc, #356]	@ (8006d60 <update_velocity_control+0x268>)
 8006bfa:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006bfe:	e007      	b.n	8006c10 <update_velocity_control+0x118>
	} else {
		prismatic_axis.ffd = 0.0f;
 8006c00:	4b57      	ldr	r3, [pc, #348]	@ (8006d60 <update_velocity_control+0x268>)
 8006c02:	f04f 0200 	mov.w	r2, #0
 8006c06:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8006c08:	4b55      	ldr	r3, [pc, #340]	@ (8006d60 <update_velocity_control+0x268>)
 8006c0a:	f04f 0200 	mov.w	r2, #0
 8006c0e:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8006c10:	4b53      	ldr	r3, [pc, #332]	@ (8006d60 <update_velocity_control+0x268>)
 8006c12:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006c16:	4b52      	ldr	r3, [pc, #328]	@ (8006d60 <update_velocity_control+0x268>)
 8006c18:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8006c1c:	4b50      	ldr	r3, [pc, #320]	@ (8006d60 <update_velocity_control+0x268>)
 8006c1e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c2a:	4b4d      	ldr	r3, [pc, #308]	@ (8006d60 <update_velocity_control+0x268>)
 8006c2c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006c30:	4b4b      	ldr	r3, [pc, #300]	@ (8006d60 <update_velocity_control+0x268>)
 8006c32:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006c36:	4b4c      	ldr	r3, [pc, #304]	@ (8006d68 <update_velocity_control+0x270>)
 8006c38:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	4619      	mov	r1, r3
 8006c40:	f7f9 ff40 	bl	8000ac4 <__aeabi_d2iz>
 8006c44:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006c46:	4b48      	ldr	r3, [pc, #288]	@ (8006d68 <update_velocity_control+0x270>)
 8006c48:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006c4c:	4692      	mov	sl, r2
 8006c4e:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006c52:	4650      	mov	r0, sl
 8006c54:	4659      	mov	r1, fp
 8006c56:	f7f9 ff35 	bl	8000ac4 <__aeabi_d2iz>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4630      	mov	r0, r6
 8006c60:	eeb0 0a48 	vmov.f32	s0, s16
 8006c64:	f7fa fa76 	bl	8001154 <PWM_Satuation>
 8006c68:	ee07 0a90 	vmov	s15, r0
 8006c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c70:	4b3b      	ldr	r3, [pc, #236]	@ (8006d60 <update_velocity_control+0x268>)
 8006c72:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006c76:	4b40      	ldr	r3, [pc, #256]	@ (8006d78 <update_velocity_control+0x280>)
 8006c78:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d010      	beq.n	8006ca2 <update_velocity_control+0x1aa>
		revolute_axis.vel_error = revolute_axis.command_vel
 8006c80:	4b3d      	ldr	r3, [pc, #244]	@ (8006d78 <update_velocity_control+0x280>)
 8006c82:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 8006c86:	4b3c      	ldr	r3, [pc, #240]	@ (8006d78 <update_velocity_control+0x280>)
 8006c88:	edd3 7a01 	vldr	s15, [r3, #4]
 8006c8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c90:	4b39      	ldr	r3, [pc, #228]	@ (8006d78 <update_velocity_control+0x280>)
 8006c92:	edd3 7a07 	vldr	s15, [r3, #28]
 8006c96:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006c9a:	4b37      	ldr	r3, [pc, #220]	@ (8006d78 <update_velocity_control+0x280>)
 8006c9c:	edc3 7a06 	vstr	s15, [r3, #24]
 8006ca0:	e00a      	b.n	8006cb8 <update_velocity_control+0x1c0>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 8006ca2:	4b35      	ldr	r3, [pc, #212]	@ (8006d78 <update_velocity_control+0x280>)
 8006ca4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8006ca8:	4b33      	ldr	r3, [pc, #204]	@ (8006d78 <update_velocity_control+0x280>)
 8006caa:	edd3 7a07 	vldr	s15, [r3, #28]
 8006cae:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006cb2:	4b31      	ldr	r3, [pc, #196]	@ (8006d78 <update_velocity_control+0x280>)
 8006cb4:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8006cb8:	4b2f      	ldr	r3, [pc, #188]	@ (8006d78 <update_velocity_control+0x280>)
 8006cba:	edd3 7a06 	vldr	s15, [r3, #24]
 8006cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8006cc2:	4830      	ldr	r0, [pc, #192]	@ (8006d84 <update_velocity_control+0x28c>)
 8006cc4:	f7fa faa8 	bl	8001218 <PID_CONTROLLER_Compute>
 8006cc8:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 8006ccc:	4b2e      	ldr	r3, [pc, #184]	@ (8006d88 <update_velocity_control+0x290>)
 8006cce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 8006cd2:	4610      	mov	r0, r2
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	f7f9 fef5 	bl	8000ac4 <__aeabi_d2iz>
 8006cda:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 8006cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8006d88 <update_velocity_control+0x290>)
 8006cde:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006ce2:	4690      	mov	r8, r2
 8006ce4:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 8006ce8:	4640      	mov	r0, r8
 8006cea:	4649      	mov	r1, r9
 8006cec:	f7f9 feea 	bl	8000ac4 <__aeabi_d2iz>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	eeb0 0a48 	vmov.f32	s0, s16
 8006cfa:	f7fa fa2b 	bl	8001154 <PWM_Satuation>
 8006cfe:	ee07 0a90 	vmov	s15, r0
 8006d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d06:	4b1c      	ldr	r3, [pc, #112]	@ (8006d78 <update_velocity_control+0x280>)
 8006d08:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8006d78 <update_velocity_control+0x280>)
 8006d0e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d03e      	beq.n	8006d94 <update_velocity_control+0x29c>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8006d16:	4b18      	ldr	r3, [pc, #96]	@ (8006d78 <update_velocity_control+0x280>)
 8006d18:	edd3 7a01 	vldr	s15, [r3, #4]
 8006d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8006d20:	481a      	ldr	r0, [pc, #104]	@ (8006d8c <update_velocity_control+0x294>)
 8006d22:	f7fa fc17 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 8006d26:	eef0 7a40 	vmov.f32	s15, s0
 8006d2a:	4b13      	ldr	r3, [pc, #76]	@ (8006d78 <update_velocity_control+0x280>)
 8006d2c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006d30:	4b10      	ldr	r3, [pc, #64]	@ (8006d74 <update_velocity_control+0x27c>)
 8006d32:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006d36:	4b11      	ldr	r3, [pc, #68]	@ (8006d7c <update_velocity_control+0x284>)
 8006d38:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006d3c:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8006d6c <update_velocity_control+0x274>
 8006d40:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006d44:	eef0 0a66 	vmov.f32	s1, s13
 8006d48:	eeb0 0a47 	vmov.f32	s0, s14
 8006d4c:	4810      	ldr	r0, [pc, #64]	@ (8006d90 <update_velocity_control+0x298>)
 8006d4e:	f7fa fc94 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8006d52:	eef0 7a40 	vmov.f32	s15, s0
 8006d56:	4b08      	ldr	r3, [pc, #32]	@ (8006d78 <update_velocity_control+0x280>)
 8006d58:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006d5c:	e034      	b.n	8006dc8 <update_velocity_control+0x2d0>
 8006d5e:	bf00      	nop
 8006d60:	20000704 	.word	0x20000704
 8006d64:	20000a60 	.word	0x20000a60
 8006d68:	20000080 	.word	0x20000080
 8006d6c:	447a0000 	.word	0x447a0000
 8006d70:	20000b00 	.word	0x20000b00
 8006d74:	200009dc 	.word	0x200009dc
 8006d78:	20000748 	.word	0x20000748
 8006d7c:	20000980 	.word	0x20000980
 8006d80:	20000b04 	.word	0x20000b04
 8006d84:	20000ab0 	.word	0x20000ab0
 8006d88:	20000000 	.word	0x20000000
 8006d8c:	20000b0c 	.word	0x20000b0c
 8006d90:	20000b10 	.word	0x20000b10
	} else {
		revolute_axis.ffd = 0.0f;
 8006d94:	4b54      	ldr	r3, [pc, #336]	@ (8006ee8 <update_velocity_control+0x3f0>)
 8006d96:	f04f 0200 	mov.w	r2, #0
 8006d9a:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006d9c:	4b53      	ldr	r3, [pc, #332]	@ (8006eec <update_velocity_control+0x3f4>)
 8006d9e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006da2:	4b53      	ldr	r3, [pc, #332]	@ (8006ef0 <update_velocity_control+0x3f8>)
 8006da4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006da8:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8006ef4 <update_velocity_control+0x3fc>
 8006dac:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006db0:	eef0 0a66 	vmov.f32	s1, s13
 8006db4:	eeb0 0a47 	vmov.f32	s0, s14
 8006db8:	484f      	ldr	r0, [pc, #316]	@ (8006ef8 <update_velocity_control+0x400>)
 8006dba:	f7fa fc5e 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8006dbe:	eef0 7a40 	vmov.f32	s15, s0
 8006dc2:	4b49      	ldr	r3, [pc, #292]	@ (8006ee8 <update_velocity_control+0x3f0>)
 8006dc4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8006dc8:	4b4c      	ldr	r3, [pc, #304]	@ (8006efc <update_velocity_control+0x404>)
 8006dca:	edd3 7a00 	vldr	s15, [r3]
 8006dce:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006f00 <update_velocity_control+0x408>
 8006dd2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006dd6:	4b44      	ldr	r3, [pc, #272]	@ (8006ee8 <update_velocity_control+0x3f0>)
 8006dd8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006ddc:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8006f04 <update_velocity_control+0x40c>
 8006de0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006de8:	4b44      	ldr	r3, [pc, #272]	@ (8006efc <update_velocity_control+0x404>)
 8006dea:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.175f * revolute_axis.dfd; //dfd 0.175
 8006dee:	4b46      	ldr	r3, [pc, #280]	@ (8006f08 <update_velocity_control+0x410>)
 8006df0:	edd3 7a00 	vldr	s15, [r3]
 8006df4:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006f00 <update_velocity_control+0x408>
 8006df8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8006ee8 <update_velocity_control+0x3f0>)
 8006dfe:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006e02:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8006f0c <update_velocity_control+0x414>
 8006e06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8006f08 <update_velocity_control+0x410>)
 8006e10:	edc3 7a00 	vstr	s15, [r3]

	revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
 8006e14:	4b34      	ldr	r3, [pc, #208]	@ (8006ee8 <update_velocity_control+0x3f0>)
 8006e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7f9 fb61 	bl	80004e0 <__aeabi_f2d>
 8006e1e:	4680      	mov	r8, r0
 8006e20:	4689      	mov	r9, r1
 8006e22:	4b39      	ldr	r3, [pc, #228]	@ (8006f08 <update_velocity_control+0x410>)
 8006e24:	ed93 7a00 	vldr	s14, [r3]
 8006e28:	4b34      	ldr	r3, [pc, #208]	@ (8006efc <update_velocity_control+0x404>)
 8006e2a:	edd3 7a00 	vldr	s15, [r3]
 8006e2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e32:	ee17 0a90 	vmov	r0, s15
 8006e36:	f7f9 fb53 	bl	80004e0 <__aeabi_f2d>
 8006e3a:	a329      	add	r3, pc, #164	@ (adr r3, 8006ee0 <update_velocity_control+0x3e8>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f7f9 fba6 	bl	8000590 <__aeabi_dmul>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4640      	mov	r0, r8
 8006e4a:	4649      	mov	r1, r9
 8006e4c:	f7f9 f9ea 	bl	8000224 <__adddf3>
 8006e50:	4602      	mov	r2, r0
 8006e52:	460b      	mov	r3, r1
 8006e54:	4610      	mov	r0, r2
 8006e56:	4619      	mov	r1, r3
 8006e58:	f7f9 fe7c 	bl	8000b54 <__aeabi_d2f>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	4a22      	ldr	r2, [pc, #136]	@ (8006ee8 <update_velocity_control+0x3f0>)
 8006e60:	6253      	str	r3, [r2, #36]	@ 0x24

	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006e62:	4b21      	ldr	r3, [pc, #132]	@ (8006ee8 <update_velocity_control+0x3f0>)
 8006e64:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006e68:	4b29      	ldr	r3, [pc, #164]	@ (8006f10 <update_velocity_control+0x418>)
 8006e6a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006e6e:	4610      	mov	r0, r2
 8006e70:	4619      	mov	r1, r3
 8006e72:	f7f9 fe27 	bl	8000ac4 <__aeabi_d2iz>
 8006e76:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006e78:	4b25      	ldr	r3, [pc, #148]	@ (8006f10 <update_velocity_control+0x418>)
 8006e7a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006e7e:	4614      	mov	r4, r2
 8006e80:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006e84:	4620      	mov	r0, r4
 8006e86:	4629      	mov	r1, r5
 8006e88:	f7f9 fe1c 	bl	8000ac4 <__aeabi_d2iz>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	4619      	mov	r1, r3
 8006e90:	4630      	mov	r0, r6
 8006e92:	eeb0 0a48 	vmov.f32	s0, s16
 8006e96:	f7fa f95d 	bl	8001154 <PWM_Satuation>
 8006e9a:	ee07 0a90 	vmov	s15, r0
 8006e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ea2:	4b11      	ldr	r3, [pc, #68]	@ (8006ee8 <update_velocity_control+0x3f0>)
 8006ea4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8006f14 <update_velocity_control+0x41c>)
 8006eaa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006eae:	eef0 0a67 	vmov.f32	s1, s15
 8006eb2:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8006f18 <update_velocity_control+0x420>
 8006eb6:	4819      	ldr	r0, [pc, #100]	@ (8006f1c <update_velocity_control+0x424>)
 8006eb8:	f7fa fa64 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8006ee8 <update_velocity_control+0x3f0>)
 8006ebe:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006ec2:	eef0 0a67 	vmov.f32	s1, s15
 8006ec6:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8006f18 <update_velocity_control+0x420>
 8006eca:	4815      	ldr	r0, [pc, #84]	@ (8006f20 <update_velocity_control+0x428>)
 8006ecc:	f7fa fa5a 	bl	8001384 <MDXX_set_range>
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	ecbd 8b02 	vpop	{d8}
 8006eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ede:	bf00      	nop
 8006ee0:	47ae147b 	.word	0x47ae147b
 8006ee4:	3f847ae1 	.word	0x3f847ae1
 8006ee8:	20000748 	.word	0x20000748
 8006eec:	200009dc 	.word	0x200009dc
 8006ef0:	20000980 	.word	0x20000980
 8006ef4:	447a0000 	.word	0x447a0000
 8006ef8:	20000b10 	.word	0x20000b10
 8006efc:	200008c8 	.word	0x200008c8
 8006f00:	3f4ccccd 	.word	0x3f4ccccd
 8006f04:	3e4ccccd 	.word	0x3e4ccccd
 8006f08:	200008cc 	.word	0x200008cc
 8006f0c:	3e333333 	.word	0x3e333333
 8006f10:	20000000 	.word	0x20000000
 8006f14:	20000704 	.word	0x20000704
 8006f18:	44fa0000 	.word	0x44fa0000
 8006f1c:	200008e8 	.word	0x200008e8
 8006f20:	20000934 	.word	0x20000934

08006f24 <update_control_loops>:

void update_control_loops(void) {
 8006f24:	b590      	push	{r4, r7, lr}
 8006f26:	ed2d 8b02 	vpush	{d8}
 8006f2a:	b089      	sub	sp, #36	@ 0x24
 8006f2c:	af00      	add	r7, sp, #0
	normalized_position = normalize_angle(revolute_encoder.rads);
 8006f2e:	4b72      	ldr	r3, [pc, #456]	@ (80070f8 <update_control_loops+0x1d4>)
 8006f30:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006f34:	eeb0 0a67 	vmov.f32	s0, s15
 8006f38:	f7ff f92c 	bl	8006194 <normalize_angle>
 8006f3c:	eef0 7a40 	vmov.f32	s15, s0
 8006f40:	4b6e      	ldr	r3, [pc, #440]	@ (80070fc <update_control_loops+0x1d8>)
 8006f42:	edc3 7a00 	vstr	s15, [r3]

	if (is_emergency_active()) {
 8006f46:	f000 fd33 	bl	80079b0 <is_emergency_active>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d015      	beq.n	8006f7c <update_control_loops+0x58>
		emergency_stop_all_motors();
 8006f50:	f000 fc7e 	bl	8007850 <emergency_stop_all_motors>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006f54:	4b6a      	ldr	r3, [pc, #424]	@ (8007100 <update_control_loops+0x1dc>)
 8006f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f58:	4a6a      	ldr	r2, [pc, #424]	@ (8007104 <update_control_loops+0x1e0>)
 8006f5a:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006f5c:	4b67      	ldr	r3, [pc, #412]	@ (80070fc <update_control_loops+0x1d8>)
 8006f5e:	edd3 7a00 	vldr	s15, [r3]
 8006f62:	220e      	movs	r2, #14
 8006f64:	210f      	movs	r1, #15
 8006f66:	eeb0 0a67 	vmov.f32	s0, s15
 8006f6a:	4867      	ldr	r0, [pc, #412]	@ (8007108 <update_control_loops+0x1e4>)
 8006f6c:	f7fd fe2c 	bl	8004bc8 <UnitConverter_angle>
 8006f70:	eef0 7a40 	vmov.f32	s15, s0
 8006f74:	4b65      	ldr	r3, [pc, #404]	@ (800710c <update_control_loops+0x1e8>)
 8006f76:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006f7a:	e2c7      	b.n	800750c <update_control_loops+0x5e8>
	}

	// Handle all homing states except HOMING_REV_TO_ZERO_DEG with direct motor control
	if (homing_active && homing_state != HOMING_REV_TO_ZERO_DEG) {
 8006f7c:	4b64      	ldr	r3, [pc, #400]	@ (8007110 <update_control_loops+0x1ec>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d02d      	beq.n	8006fe0 <update_control_loops+0xbc>
 8006f84:	4b63      	ldr	r3, [pc, #396]	@ (8007114 <update_control_loops+0x1f0>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b07      	cmp	r3, #7
 8006f8a:	d029      	beq.n	8006fe0 <update_control_loops+0xbc>
		update_homing_sequence();
 8006f8c:	f7fe fd66 	bl	8005a5c <update_homing_sequence>
		MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006f90:	4b5c      	ldr	r3, [pc, #368]	@ (8007104 <update_control_loops+0x1e0>)
 8006f92:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006f96:	eef0 0a67 	vmov.f32	s1, s15
 8006f9a:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 8007118 <update_control_loops+0x1f4>
 8006f9e:	485f      	ldr	r0, [pc, #380]	@ (800711c <update_control_loops+0x1f8>)
 8006fa0:	f7fa f9f0 	bl	8001384 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006fa4:	4b59      	ldr	r3, [pc, #356]	@ (800710c <update_control_loops+0x1e8>)
 8006fa6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006faa:	eef0 0a67 	vmov.f32	s1, s15
 8006fae:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 8007118 <update_control_loops+0x1f4>
 8006fb2:	485b      	ldr	r0, [pc, #364]	@ (8007120 <update_control_loops+0x1fc>)
 8006fb4:	f7fa f9e6 	bl	8001384 <MDXX_set_range>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006fb8:	4b51      	ldr	r3, [pc, #324]	@ (8007100 <update_control_loops+0x1dc>)
 8006fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fbc:	4a51      	ldr	r2, [pc, #324]	@ (8007104 <update_control_loops+0x1e0>)
 8006fbe:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006fc0:	4b4e      	ldr	r3, [pc, #312]	@ (80070fc <update_control_loops+0x1d8>)
 8006fc2:	edd3 7a00 	vldr	s15, [r3]
 8006fc6:	220e      	movs	r2, #14
 8006fc8:	210f      	movs	r1, #15
 8006fca:	eeb0 0a67 	vmov.f32	s0, s15
 8006fce:	484e      	ldr	r0, [pc, #312]	@ (8007108 <update_control_loops+0x1e4>)
 8006fd0:	f7fd fdfa 	bl	8004bc8 <UnitConverter_angle>
 8006fd4:	eef0 7a40 	vmov.f32	s15, s0
 8006fd8:	4b4c      	ldr	r3, [pc, #304]	@ (800710c <update_control_loops+0x1e8>)
 8006fda:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006fde:	e295      	b.n	800750c <update_control_loops+0x5e8>
	}

	// Handle HOMING_REV_TO_ZERO_DEG: use trajectory system + check completion
	if (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006fe0:	4b4b      	ldr	r3, [pc, #300]	@ (8007110 <update_control_loops+0x1ec>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d01d      	beq.n	8007024 <update_control_loops+0x100>
 8006fe8:	4b4a      	ldr	r3, [pc, #296]	@ (8007114 <update_control_loops+0x1f0>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	2b07      	cmp	r3, #7
 8006fee:	d119      	bne.n	8007024 <update_control_loops+0x100>
		// First, update the homing sequence to handle trajectory start/completion
		update_homing_sequence();
 8006ff0:	f7fe fd34 	bl	8005a5c <update_homing_sequence>

		// If still in HOMING_REV_TO_ZERO_DEG after update, continue with trajectory control
		if (homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006ff4:	4b47      	ldr	r3, [pc, #284]	@ (8007114 <update_control_loops+0x1f0>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b07      	cmp	r3, #7
 8006ffa:	d013      	beq.n	8007024 <update_control_loops+0x100>
			// Let the trajectory system handle the motion
			// Fall through to the switch statement below
		} else {
			// Homing sequence advanced to next state, return
			prismatic_axis.mm = prismatic_encoder.mm;
 8006ffc:	4b40      	ldr	r3, [pc, #256]	@ (8007100 <update_control_loops+0x1dc>)
 8006ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007000:	4a40      	ldr	r2, [pc, #256]	@ (8007104 <update_control_loops+0x1e0>)
 8007002:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 8007004:	4b3d      	ldr	r3, [pc, #244]	@ (80070fc <update_control_loops+0x1d8>)
 8007006:	edd3 7a00 	vldr	s15, [r3]
 800700a:	220e      	movs	r2, #14
 800700c:	210f      	movs	r1, #15
 800700e:	eeb0 0a67 	vmov.f32	s0, s15
 8007012:	483d      	ldr	r0, [pc, #244]	@ (8007108 <update_control_loops+0x1e4>)
 8007014:	f7fd fdd8 	bl	8004bc8 <UnitConverter_angle>
 8007018:	eef0 7a40 	vmov.f32	s15, s0
 800701c:	4b3b      	ldr	r3, [pc, #236]	@ (800710c <update_control_loops+0x1e8>)
 800701e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
			return;
 8007022:	e273      	b.n	800750c <update_control_loops+0x5e8>
		}
	}
	//100 point
	if (j1_active && motion_sequence_state == MOTION_IDLE) {
 8007024:	4b3f      	ldr	r3, [pc, #252]	@ (8007124 <update_control_loops+0x200>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d02f      	beq.n	800708c <update_control_loops+0x168>
 800702c:	4b3e      	ldr	r3, [pc, #248]	@ (8007128 <update_control_loops+0x204>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d12b      	bne.n	800708c <update_control_loops+0x168>
		if (j1_going_to_target) {
 8007034:	4b3d      	ldr	r3, [pc, #244]	@ (800712c <update_control_loops+0x208>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d009      	beq.n	8007050 <update_control_loops+0x12c>

			// check if finish goto target then goto 0
			j1_going_to_target = false;
 800703c:	4b3b      	ldr	r3, [pc, #236]	@ (800712c <update_control_loops+0x208>)
 800703e:	2200      	movs	r2, #0
 8007040:	701a      	strb	r2, [r3, #0]
			start_combined_trajectory(0.0f, 0.0f);
 8007042:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8007130 <update_control_loops+0x20c>
 8007046:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8007130 <update_control_loops+0x20c>
 800704a:	f7ff fa17 	bl	800647c <start_combined_trajectory>
 800704e:	e01d      	b.n	800708c <update_control_loops+0x168>
		} else {

			j1_cycle_count++;
 8007050:	4b38      	ldr	r3, [pc, #224]	@ (8007134 <update_control_loops+0x210>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	3301      	adds	r3, #1
 8007056:	b2da      	uxtb	r2, r3
 8007058:	4b36      	ldr	r3, [pc, #216]	@ (8007134 <update_control_loops+0x210>)
 800705a:	701a      	strb	r2, [r3, #0]

			if (j1_cycle_count >= 10) {
 800705c:	4b35      	ldr	r3, [pc, #212]	@ (8007134 <update_control_loops+0x210>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b09      	cmp	r3, #9
 8007062:	d906      	bls.n	8007072 <update_control_loops+0x14e>
				//finish 100
				j1_active = false;
 8007064:	4b2f      	ldr	r3, [pc, #188]	@ (8007124 <update_control_loops+0x200>)
 8007066:	2200      	movs	r2, #0
 8007068:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 800706a:	4b32      	ldr	r3, [pc, #200]	@ (8007134 <update_control_loops+0x210>)
 800706c:	2200      	movs	r2, #0
 800706e:	701a      	strb	r2, [r3, #0]
 8007070:	e00c      	b.n	800708c <update_control_loops+0x168>
			} else {
				// start again
				j1_going_to_target = true;
 8007072:	4b2e      	ldr	r3, [pc, #184]	@ (800712c <update_control_loops+0x208>)
 8007074:	2201      	movs	r2, #1
 8007076:	701a      	strb	r2, [r3, #0]
				start_combined_trajectory(J1_TARGET_PRIS, J1_TARGET_REV);
 8007078:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8007138 <update_control_loops+0x214>
 800707c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800713c <update_control_loops+0x218>
 8007080:	eef0 0a47 	vmov.f32	s1, s14
 8007084:	eeb0 0a67 	vmov.f32	s0, s15
 8007088:	f7ff f9f8 	bl	800647c <start_combined_trajectory>
			}
		}
	}

	// Motion sequence handling
	switch (motion_sequence_state) {
 800708c:	4b26      	ldr	r3, [pc, #152]	@ (8007128 <update_control_loops+0x204>)
 800708e:	781b      	ldrb	r3, [r3, #0]
 8007090:	3b01      	subs	r3, #1
 8007092:	2b05      	cmp	r3, #5
 8007094:	f200 8220 	bhi.w	80074d8 <update_control_loops+0x5b4>
 8007098:	a201      	add	r2, pc, #4	@ (adr r2, 80070a0 <update_control_loops+0x17c>)
 800709a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709e:	bf00      	nop
 80070a0:	080070b9 	.word	0x080070b9
 80070a4:	080074d9 	.word	0x080074d9
 80070a8:	080074d9 	.word	0x080074d9
 80070ac:	0800714d 	.word	0x0800714d
 80070b0:	08007475 	.word	0x08007475
 80070b4:	080074d1 	.word	0x080074d1
	case MOTION_PEN_UP_DELAY:
		if (++motion_delay_timer >= 500) {
 80070b8:	4b21      	ldr	r3, [pc, #132]	@ (8007140 <update_control_loops+0x21c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3301      	adds	r3, #1
 80070be:	4a20      	ldr	r2, [pc, #128]	@ (8007140 <update_control_loops+0x21c>)
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80070c6:	f0c0 8209 	bcc.w	80074dc <update_control_loops+0x5b8>
			// ใช้ sync motion สำหรับทุกกรณี รวมถึง homing
			if (current_drawing_sequence.sequence_active && drawing_pen_state) {
 80070ca:	4b1e      	ldr	r3, [pc, #120]	@ (8007144 <update_control_loops+0x220>)
 80070cc:	799b      	ldrb	r3, [r3, #6]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d005      	beq.n	80070de <update_control_loops+0x1ba>
 80070d2:	4b1d      	ldr	r3, [pc, #116]	@ (8007148 <update_control_loops+0x224>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <update_control_loops+0x1ba>
				plotter_pen_down();
 80070da:	f002 fe7b 	bl	8009dd4 <plotter_pen_down>
			}
			prismatic_axis.trajectory_active = true;
 80070de:	4b09      	ldr	r3, [pc, #36]	@ (8007104 <update_control_loops+0x1e0>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			revolute_axis.trajectory_active = true;
 80070e6:	4b09      	ldr	r3, [pc, #36]	@ (800710c <update_control_loops+0x1e8>)
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			motion_sequence_state = MOTION_BOTH_AXES_ACTIVE;
 80070ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007128 <update_control_loops+0x204>)
 80070f0:	2204      	movs	r2, #4
 80070f2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80070f4:	e1f2      	b.n	80074dc <update_control_loops+0x5b8>
 80070f6:	bf00      	nop
 80070f8:	200009dc 	.word	0x200009dc
 80070fc:	200007fc 	.word	0x200007fc
 8007100:	20000980 	.word	0x20000980
 8007104:	20000704 	.word	0x20000704
 8007108:	20000d74 	.word	0x20000d74
 800710c:	20000748 	.word	0x20000748
 8007110:	200007eb 	.word	0x200007eb
 8007114:	200007ea 	.word	0x200007ea
 8007118:	44fa0000 	.word	0x44fa0000
 800711c:	200008e8 	.word	0x200008e8
 8007120:	20000934 	.word	0x20000934
 8007124:	20000895 	.word	0x20000895
 8007128:	2000078c 	.word	0x2000078c
 800712c:	20000335 	.word	0x20000335
 8007130:	00000000 	.word	0x00000000
 8007134:	20000894 	.word	0x20000894
 8007138:	43480000 	.word	0x43480000
 800713c:	42b40000 	.word	0x42b40000
 8007140:	200007e0 	.word	0x200007e0
 8007144:	200008b0 	.word	0x200008b0
 8007148:	200008bc 	.word	0x200008bc

	case MOTION_BOTH_AXES_ACTIVE: {
		bool motion_finished = false;
 800714c:	2300      	movs	r3, #0
 800714e:	77fb      	strb	r3, [r7, #31]

		if (sync_motion_active) {
 8007150:	4b64      	ldr	r3, [pc, #400]	@ (80072e4 <update_control_loops+0x3c0>)
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 80df 	beq.w	8007318 <update_control_loops+0x3f4>
			// Time-synchronized motion
			sync_start_time += 0.001f; // Assuming 1ms control loop
 800715a:	4b63      	ldr	r3, [pc, #396]	@ (80072e8 <update_control_loops+0x3c4>)
 800715c:	edd3 7a00 	vldr	s15, [r3]
 8007160:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 80072ec <update_control_loops+0x3c8>
 8007164:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007168:	4b5f      	ldr	r3, [pc, #380]	@ (80072e8 <update_control_loops+0x3c4>)
 800716a:	edc3 7a00 	vstr	s15, [r3]

			float progress = sync_start_time / sync_total_time;
 800716e:	4b5e      	ldr	r3, [pc, #376]	@ (80072e8 <update_control_loops+0x3c4>)
 8007170:	edd3 6a00 	vldr	s13, [r3]
 8007174:	4b5e      	ldr	r3, [pc, #376]	@ (80072f0 <update_control_loops+0x3cc>)
 8007176:	ed93 7a00 	vldr	s14, [r3]
 800717a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800717e:	edc7 7a06 	vstr	s15, [r7, #24]
			if (progress >= 1.0f) {
 8007182:	edd7 7a06 	vldr	s15, [r7, #24]
 8007186:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800718a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800718e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007192:	db04      	blt.n	800719e <update_control_loops+0x27a>
				progress = 1.0f;
 8007194:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8007198:	61bb      	str	r3, [r7, #24]
				motion_finished = true;
 800719a:	2301      	movs	r3, #1
 800719c:	77fb      	strb	r3, [r7, #31]
			}

			// Apply smooth S-curve to progress for better motion profile
			float smooth_progress = progress * progress
 800719e:	edd7 7a06 	vldr	s15, [r7, #24]
 80071a2:	ee27 7aa7 	vmul.f32	s14, s15, s15
					* (3.0f - 2.0f * progress); // Smoothstep function
 80071a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80071aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80071ae:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80071b2:	ee76 7ae7 	vsub.f32	s15, s13, s15
			float smooth_progress = progress * progress
 80071b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ba:	edc7 7a04 	vstr	s15, [r7, #16]

			// Calculate synchronized positions
			if (!(homing_active && homing_state == HOMING_REV_TO_ZERO_DEG)) {
 80071be:	4b4d      	ldr	r3, [pc, #308]	@ (80072f4 <update_control_loops+0x3d0>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	f083 0301 	eor.w	r3, r3, #1
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d103      	bne.n	80071d4 <update_control_loops+0x2b0>
 80071cc:	4b4a      	ldr	r3, [pc, #296]	@ (80072f8 <update_control_loops+0x3d4>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	2b07      	cmp	r3, #7
 80071d2:	d034      	beq.n	800723e <update_control_loops+0x31a>
				// Prismatic axis synchronized position
				prismatic_axis.position = prismatic_axis.initial_pos
 80071d4:	4b49      	ldr	r3, [pc, #292]	@ (80072fc <update_control_loops+0x3d8>)
 80071d6:	ed93 7a03 	vldr	s14, [r3, #12]
						+ (prismatic_axis.target_pos
 80071da:	4b48      	ldr	r3, [pc, #288]	@ (80072fc <update_control_loops+0x3d8>)
 80071dc:	edd3 6a04 	vldr	s13, [r3, #16]
								- prismatic_axis.initial_pos) * smooth_progress;
 80071e0:	4b46      	ldr	r3, [pc, #280]	@ (80072fc <update_control_loops+0x3d8>)
 80071e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80071e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80071ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80071ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
						+ (prismatic_axis.target_pos
 80071f2:	ee77 7a27 	vadd.f32	s15, s14, s15
				prismatic_axis.position = prismatic_axis.initial_pos
 80071f6:	4b41      	ldr	r3, [pc, #260]	@ (80072fc <update_control_loops+0x3d8>)
 80071f8:	edc3 7a00 	vstr	s15, [r3]

				// Calculate velocity (derivative of position)
				// FIX: Use instance-specific variables instead of static
				static float last_pris_pos_sync = -999999.0f; // Initialize to impossible value
				if (last_pris_pos_sync == -999999.0f) {
 80071fc:	4b40      	ldr	r3, [pc, #256]	@ (8007300 <update_control_loops+0x3dc>)
 80071fe:	edd3 7a00 	vldr	s15, [r3]
 8007202:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8007304 <update_control_loops+0x3e0>
 8007206:	eef4 7a47 	vcmp.f32	s15, s14
 800720a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800720e:	d103      	bne.n	8007218 <update_control_loops+0x2f4>
					last_pris_pos_sync = prismatic_axis.position;
 8007210:	4b3a      	ldr	r3, [pc, #232]	@ (80072fc <update_control_loops+0x3d8>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a3a      	ldr	r2, [pc, #232]	@ (8007300 <update_control_loops+0x3dc>)
 8007216:	6013      	str	r3, [r2, #0]
				}
				prismatic_axis.velocity = (prismatic_axis.position
 8007218:	4b38      	ldr	r3, [pc, #224]	@ (80072fc <update_control_loops+0x3d8>)
 800721a:	ed93 7a00 	vldr	s14, [r3]
						- last_pris_pos_sync) / 0.001f; // mm/s
 800721e:	4b38      	ldr	r3, [pc, #224]	@ (8007300 <update_control_loops+0x3dc>)
 8007220:	edd3 7a00 	vldr	s15, [r3]
 8007224:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007228:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80072ec <update_control_loops+0x3c8>
 800722c:	eec7 7a26 	vdiv.f32	s15, s14, s13
				prismatic_axis.velocity = (prismatic_axis.position
 8007230:	4b32      	ldr	r3, [pc, #200]	@ (80072fc <update_control_loops+0x3d8>)
 8007232:	edc3 7a01 	vstr	s15, [r3, #4]
				last_pris_pos_sync = prismatic_axis.position;
 8007236:	4b31      	ldr	r3, [pc, #196]	@ (80072fc <update_control_loops+0x3d8>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a31      	ldr	r2, [pc, #196]	@ (8007300 <update_control_loops+0x3dc>)
 800723c:	6013      	str	r3, [r2, #0]
			}

			// Revolute axis synchronized position
			revolute_axis.position = revolute_axis.initial_pos
 800723e:	4b32      	ldr	r3, [pc, #200]	@ (8007308 <update_control_loops+0x3e4>)
 8007240:	ed93 7a03 	vldr	s14, [r3, #12]
					+ (revolute_axis.target_pos - revolute_axis.initial_pos)
 8007244:	4b30      	ldr	r3, [pc, #192]	@ (8007308 <update_control_loops+0x3e4>)
 8007246:	edd3 6a04 	vldr	s13, [r3, #16]
 800724a:	4b2f      	ldr	r3, [pc, #188]	@ (8007308 <update_control_loops+0x3e4>)
 800724c:	edd3 7a03 	vldr	s15, [r3, #12]
 8007250:	ee76 6ae7 	vsub.f32	s13, s13, s15
							* smooth_progress;
 8007254:	edd7 7a04 	vldr	s15, [r7, #16]
 8007258:	ee66 7aa7 	vmul.f32	s15, s13, s15
					+ (revolute_axis.target_pos - revolute_axis.initial_pos)
 800725c:	ee77 7a27 	vadd.f32	s15, s14, s15
			revolute_axis.position = revolute_axis.initial_pos
 8007260:	4b29      	ldr	r3, [pc, #164]	@ (8007308 <update_control_loops+0x3e4>)
 8007262:	edc3 7a00 	vstr	s15, [r3]

			// Calculate velocity (derivative of position)
			static float last_rev_pos_sync = -999999.0f; // Initialize to impossible value
			if (last_rev_pos_sync == -999999.0f) {
 8007266:	4b29      	ldr	r3, [pc, #164]	@ (800730c <update_control_loops+0x3e8>)
 8007268:	edd3 7a00 	vldr	s15, [r3]
 800726c:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8007304 <update_control_loops+0x3e0>
 8007270:	eef4 7a47 	vcmp.f32	s15, s14
 8007274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007278:	d103      	bne.n	8007282 <update_control_loops+0x35e>
				last_rev_pos_sync = revolute_axis.position;
 800727a:	4b23      	ldr	r3, [pc, #140]	@ (8007308 <update_control_loops+0x3e4>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a23      	ldr	r2, [pc, #140]	@ (800730c <update_control_loops+0x3e8>)
 8007280:	6013      	str	r3, [r2, #0]
			}
			revolute_axis.velocity =
					(revolute_axis.position - last_rev_pos_sync) / 0.001f; // rad/s
 8007282:	4b21      	ldr	r3, [pc, #132]	@ (8007308 <update_control_loops+0x3e4>)
 8007284:	ed93 7a00 	vldr	s14, [r3]
 8007288:	4b20      	ldr	r3, [pc, #128]	@ (800730c <update_control_loops+0x3e8>)
 800728a:	edd3 7a00 	vldr	s15, [r3]
 800728e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007292:	eddf 6a16 	vldr	s13, [pc, #88]	@ 80072ec <update_control_loops+0x3c8>
 8007296:	eec7 7a26 	vdiv.f32	s15, s14, s13
			revolute_axis.velocity =
 800729a:	4b1b      	ldr	r3, [pc, #108]	@ (8007308 <update_control_loops+0x3e4>)
 800729c:	edc3 7a01 	vstr	s15, [r3, #4]
			last_rev_pos_sync = revolute_axis.position;
 80072a0:	4b19      	ldr	r3, [pc, #100]	@ (8007308 <update_control_loops+0x3e4>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a19      	ldr	r2, [pc, #100]	@ (800730c <update_control_loops+0x3e8>)
 80072a6:	6013      	str	r3, [r2, #0]

			if (motion_finished) {
 80072a8:	7ffb      	ldrb	r3, [r7, #31]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	f000 8118 	beq.w	80074e0 <update_control_loops+0x5bc>
				// Motion completed
				prismatic_axis.position = prismatic_axis.target_pos;
 80072b0:	4b12      	ldr	r3, [pc, #72]	@ (80072fc <update_control_loops+0x3d8>)
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	4a11      	ldr	r2, [pc, #68]	@ (80072fc <update_control_loops+0x3d8>)
 80072b6:	6013      	str	r3, [r2, #0]
				revolute_axis.position = revolute_axis.target_pos;
 80072b8:	4b13      	ldr	r3, [pc, #76]	@ (8007308 <update_control_loops+0x3e4>)
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	4a12      	ldr	r2, [pc, #72]	@ (8007308 <update_control_loops+0x3e4>)
 80072be:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = 0.0f;
 80072c0:	4b0e      	ldr	r3, [pc, #56]	@ (80072fc <update_control_loops+0x3d8>)
 80072c2:	f04f 0200 	mov.w	r2, #0
 80072c6:	605a      	str	r2, [r3, #4]
				revolute_axis.velocity = 0.0f;
 80072c8:	4b0f      	ldr	r3, [pc, #60]	@ (8007308 <update_control_loops+0x3e4>)
 80072ca:	f04f 0200 	mov.w	r2, #0
 80072ce:	605a      	str	r2, [r3, #4]

				sync_motion_active = false;
 80072d0:	4b04      	ldr	r3, [pc, #16]	@ (80072e4 <update_control_loops+0x3c0>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	701a      	strb	r2, [r3, #0]
				motion_delay_timer = 0;
 80072d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007310 <update_control_loops+0x3ec>)
 80072d8:	2200      	movs	r2, #0
 80072da:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 80072dc:	4b0d      	ldr	r3, [pc, #52]	@ (8007314 <update_control_loops+0x3f0>)
 80072de:	2205      	movs	r2, #5
 80072e0:	701a      	strb	r2, [r3, #0]
				motion_delay_timer = 0;
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
			}
		}
	}
		break;
 80072e2:	e0fd      	b.n	80074e0 <update_control_loops+0x5bc>
 80072e4:	200008ac 	.word	0x200008ac
 80072e8:	200008a4 	.word	0x200008a4
 80072ec:	3a83126f 	.word	0x3a83126f
 80072f0:	200008a8 	.word	0x200008a8
 80072f4:	200007eb 	.word	0x200007eb
 80072f8:	200007ea 	.word	0x200007ea
 80072fc:	20000704 	.word	0x20000704
 8007300:	200005b4 	.word	0x200005b4
 8007304:	c97423f0 	.word	0xc97423f0
 8007308:	20000748 	.word	0x20000748
 800730c:	200005b8 	.word	0x200005b8
 8007310:	200007e0 	.word	0x200007e0
 8007314:	2000078c 	.word	0x2000078c
			bool pris_finished = true;  // Default to true for homing case
 8007318:	2301      	movs	r3, #1
 800731a:	75fb      	strb	r3, [r7, #23]
			bool rev_finished = false;
 800731c:	2300      	movs	r3, #0
 800731e:	75bb      	strb	r3, [r7, #22]
			if (!(homing_active && homing_state == HOMING_REV_TO_ZERO_DEG)) {
 8007320:	4b7d      	ldr	r3, [pc, #500]	@ (8007518 <update_control_loops+0x5f4>)
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	f083 0301 	eor.w	r3, r3, #1
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d103      	bne.n	8007336 <update_control_loops+0x412>
 800732e:	4b7b      	ldr	r3, [pc, #492]	@ (800751c <update_control_loops+0x5f8>)
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	2b07      	cmp	r3, #7
 8007334:	d048      	beq.n	80073c8 <update_control_loops+0x4a4>
				if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8007336:	4b7a      	ldr	r3, [pc, #488]	@ (8007520 <update_control_loops+0x5fc>)
 8007338:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800733c:	2b00      	cmp	r3, #0
 800733e:	d043      	beq.n	80073c8 <update_control_loops+0x4a4>
 8007340:	4b78      	ldr	r3, [pc, #480]	@ (8007524 <update_control_loops+0x600>)
 8007342:	7c1b      	ldrb	r3, [r3, #16]
 8007344:	f083 0301 	eor.w	r3, r3, #1
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	d03c      	beq.n	80073c8 <update_control_loops+0x4a4>
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 800734e:	4b74      	ldr	r3, [pc, #464]	@ (8007520 <update_control_loops+0x5fc>)
 8007350:	ed93 8a03 	vldr	s16, [r3, #12]
 8007354:	4b72      	ldr	r3, [pc, #456]	@ (8007520 <update_control_loops+0x5fc>)
 8007356:	edd3 8a04 	vldr	s17, [r3, #16]
							ZGX45RGG_400RPM_Constant.traject_sd_max,
 800735a:	4b73      	ldr	r3, [pc, #460]	@ (8007528 <update_control_loops+0x604>)
 800735c:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007360:	4610      	mov	r0, r2
 8007362:	4619      	mov	r1, r3
 8007364:	f7f9 fbf6 	bl	8000b54 <__aeabi_d2f>
 8007368:	4604      	mov	r4, r0
							ZGX45RGG_400RPM_Constant.traject_sdd_max);
 800736a:	4b6f      	ldr	r3, [pc, #444]	@ (8007528 <update_control_loops+0x604>)
 800736c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007370:	4610      	mov	r0, r2
 8007372:	4619      	mov	r1, r3
 8007374:	f7f9 fbee 	bl	8000b54 <__aeabi_d2f>
 8007378:	4603      	mov	r3, r0
 800737a:	ee01 3a90 	vmov	s3, r3
 800737e:	ee01 4a10 	vmov	s2, r4
 8007382:	eef0 0a68 	vmov.f32	s1, s17
 8007386:	eeb0 0a48 	vmov.f32	s0, s16
 800738a:	4966      	ldr	r1, [pc, #408]	@ (8007524 <update_control_loops+0x600>)
 800738c:	4867      	ldr	r0, [pc, #412]	@ (800752c <update_control_loops+0x608>)
 800738e:	f7fd f883 	bl	8004498 <Trapezoidal_Evaluated>
					prismatic_axis.position = prisEva.setposition;
 8007392:	4b64      	ldr	r3, [pc, #400]	@ (8007524 <update_control_loops+0x600>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a62      	ldr	r2, [pc, #392]	@ (8007520 <update_control_loops+0x5fc>)
 8007398:	6013      	str	r3, [r2, #0]
					prismatic_axis.velocity = prisEva.setvelocity;
 800739a:	4b62      	ldr	r3, [pc, #392]	@ (8007524 <update_control_loops+0x600>)
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	4a60      	ldr	r2, [pc, #384]	@ (8007520 <update_control_loops+0x5fc>)
 80073a0:	6053      	str	r3, [r2, #4]
					pris_finished = prisEva.isFinised;
 80073a2:	4b60      	ldr	r3, [pc, #384]	@ (8007524 <update_control_loops+0x600>)
 80073a4:	7c1b      	ldrb	r3, [r3, #16]
 80073a6:	75fb      	strb	r3, [r7, #23]
					if (prisEva.isFinised) {
 80073a8:	4b5e      	ldr	r3, [pc, #376]	@ (8007524 <update_control_loops+0x600>)
 80073aa:	7c1b      	ldrb	r3, [r3, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00b      	beq.n	80073c8 <update_control_loops+0x4a4>
						prismatic_axis.trajectory_active = false;
 80073b0:	4b5b      	ldr	r3, [pc, #364]	@ (8007520 <update_control_loops+0x5fc>)
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
						prismatic_axis.position = prisEva.setposition;
 80073b8:	4b5a      	ldr	r3, [pc, #360]	@ (8007524 <update_control_loops+0x600>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a58      	ldr	r2, [pc, #352]	@ (8007520 <update_control_loops+0x5fc>)
 80073be:	6013      	str	r3, [r2, #0]
						prismatic_axis.velocity = 0.0f;
 80073c0:	4b57      	ldr	r3, [pc, #348]	@ (8007520 <update_control_loops+0x5fc>)
 80073c2:	f04f 0200 	mov.w	r2, #0
 80073c6:	605a      	str	r2, [r3, #4]
			if (revolute_axis.trajectory_active && !revEva.isFinised) {
 80073c8:	4b59      	ldr	r3, [pc, #356]	@ (8007530 <update_control_loops+0x60c>)
 80073ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d043      	beq.n	800745a <update_control_loops+0x536>
 80073d2:	4b58      	ldr	r3, [pc, #352]	@ (8007534 <update_control_loops+0x610>)
 80073d4:	7c1b      	ldrb	r3, [r3, #16]
 80073d6:	f083 0301 	eor.w	r3, r3, #1
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d03c      	beq.n	800745a <update_control_loops+0x536>
				Trapezoidal_Evaluated(&revGen, &revEva,
 80073e0:	4b53      	ldr	r3, [pc, #332]	@ (8007530 <update_control_loops+0x60c>)
 80073e2:	ed93 8a03 	vldr	s16, [r3, #12]
 80073e6:	4b52      	ldr	r3, [pc, #328]	@ (8007530 <update_control_loops+0x60c>)
 80073e8:	edd3 8a04 	vldr	s17, [r3, #16]
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 80073ec:	4b52      	ldr	r3, [pc, #328]	@ (8007538 <update_control_loops+0x614>)
 80073ee:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Evaluated(&revGen, &revEva,
 80073f2:	4610      	mov	r0, r2
 80073f4:	4619      	mov	r1, r3
 80073f6:	f7f9 fbad 	bl	8000b54 <__aeabi_d2f>
 80073fa:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80073fc:	4b4e      	ldr	r3, [pc, #312]	@ (8007538 <update_control_loops+0x614>)
 80073fe:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007402:	4610      	mov	r0, r2
 8007404:	4619      	mov	r1, r3
 8007406:	f7f9 fba5 	bl	8000b54 <__aeabi_d2f>
 800740a:	4603      	mov	r3, r0
 800740c:	ee01 3a90 	vmov	s3, r3
 8007410:	ee01 4a10 	vmov	s2, r4
 8007414:	eef0 0a68 	vmov.f32	s1, s17
 8007418:	eeb0 0a48 	vmov.f32	s0, s16
 800741c:	4945      	ldr	r1, [pc, #276]	@ (8007534 <update_control_loops+0x610>)
 800741e:	4847      	ldr	r0, [pc, #284]	@ (800753c <update_control_loops+0x618>)
 8007420:	f7fd f83a 	bl	8004498 <Trapezoidal_Evaluated>
				revolute_axis.position = revEva.setposition;
 8007424:	4b43      	ldr	r3, [pc, #268]	@ (8007534 <update_control_loops+0x610>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a41      	ldr	r2, [pc, #260]	@ (8007530 <update_control_loops+0x60c>)
 800742a:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = revEva.setvelocity;
 800742c:	4b41      	ldr	r3, [pc, #260]	@ (8007534 <update_control_loops+0x610>)
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	4a3f      	ldr	r2, [pc, #252]	@ (8007530 <update_control_loops+0x60c>)
 8007432:	6053      	str	r3, [r2, #4]
				rev_finished = revEva.isFinised;
 8007434:	4b3f      	ldr	r3, [pc, #252]	@ (8007534 <update_control_loops+0x610>)
 8007436:	7c1b      	ldrb	r3, [r3, #16]
 8007438:	75bb      	strb	r3, [r7, #22]
				if (revEva.isFinised) {
 800743a:	4b3e      	ldr	r3, [pc, #248]	@ (8007534 <update_control_loops+0x610>)
 800743c:	7c1b      	ldrb	r3, [r3, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00b      	beq.n	800745a <update_control_loops+0x536>
					revolute_axis.trajectory_active = false;
 8007442:	4b3b      	ldr	r3, [pc, #236]	@ (8007530 <update_control_loops+0x60c>)
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					revolute_axis.position = revEva.setposition;
 800744a:	4b3a      	ldr	r3, [pc, #232]	@ (8007534 <update_control_loops+0x610>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a38      	ldr	r2, [pc, #224]	@ (8007530 <update_control_loops+0x60c>)
 8007450:	6013      	str	r3, [r2, #0]
					revolute_axis.velocity = 0.0f;
 8007452:	4b37      	ldr	r3, [pc, #220]	@ (8007530 <update_control_loops+0x60c>)
 8007454:	f04f 0200 	mov.w	r2, #0
 8007458:	605a      	str	r2, [r3, #4]
			if (pris_finished && rev_finished) {
 800745a:	7dfb      	ldrb	r3, [r7, #23]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d03f      	beq.n	80074e0 <update_control_loops+0x5bc>
 8007460:	7dbb      	ldrb	r3, [r7, #22]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d03c      	beq.n	80074e0 <update_control_loops+0x5bc>
				motion_delay_timer = 0;
 8007466:	4b36      	ldr	r3, [pc, #216]	@ (8007540 <update_control_loops+0x61c>)
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 800746c:	4b35      	ldr	r3, [pc, #212]	@ (8007544 <update_control_loops+0x620>)
 800746e:	2205      	movs	r2, #5
 8007470:	701a      	strb	r2, [r3, #0]
		break;
 8007472:	e035      	b.n	80074e0 <update_control_loops+0x5bc>

	case MOTION_PEN_DOWN_DELAY:
		if (++motion_delay_timer >= 500) {
 8007474:	4b32      	ldr	r3, [pc, #200]	@ (8007540 <update_control_loops+0x61c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3301      	adds	r3, #1
 800747a:	4a31      	ldr	r2, [pc, #196]	@ (8007540 <update_control_loops+0x61c>)
 800747c:	6013      	str	r3, [r2, #0]
 800747e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007482:	d32f      	bcc.n	80074e4 <update_control_loops+0x5c0>
			if (current_drawing_sequence.sequence_active
 8007484:	4b30      	ldr	r3, [pc, #192]	@ (8007548 <update_control_loops+0x624>)
 8007486:	799b      	ldrb	r3, [r3, #6]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d01b      	beq.n	80074c4 <update_control_loops+0x5a0>
					&& current_drawing_sequence.current_point > 0) {
 800748c:	4b2e      	ldr	r3, [pc, #184]	@ (8007548 <update_control_loops+0x624>)
 800748e:	795b      	ldrb	r3, [r3, #5]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d017      	beq.n	80074c4 <update_control_loops+0x5a0>
				// ดูสถานะปากกาจากจุดปัจจุบัน
				DrawingPoint_t current =
						current_drawing_sequence.points[current_drawing_sequence.current_point
 8007494:	4b2c      	ldr	r3, [pc, #176]	@ (8007548 <update_control_loops+0x624>)
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	4b2b      	ldr	r3, [pc, #172]	@ (8007548 <update_control_loops+0x624>)
 800749a:	795b      	ldrb	r3, [r3, #5]
 800749c:	4619      	mov	r1, r3
 800749e:	460b      	mov	r3, r1
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	440b      	add	r3, r1
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	3b0c      	subs	r3, #12
 80074a8:	441a      	add	r2, r3
				DrawingPoint_t current =
 80074aa:	1d3b      	adds	r3, r7, #4
 80074ac:	ca07      	ldmia	r2, {r0, r1, r2}
 80074ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
								- 1];

				if (current.pen_down) {
 80074b2:	7b3b      	ldrb	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d002      	beq.n	80074be <update_control_loops+0x59a>
					plotter_pen_down();
 80074b8:	f002 fc8c 	bl	8009dd4 <plotter_pen_down>
					&& current_drawing_sequence.current_point > 0) {
 80074bc:	e004      	b.n	80074c8 <update_control_loops+0x5a4>
				} else {
					plotter_pen_up();
 80074be:	f002 fc79 	bl	8009db4 <plotter_pen_up>
					&& current_drawing_sequence.current_point > 0) {
 80074c2:	e001      	b.n	80074c8 <update_control_loops+0x5a4>
				}
			} else {
				// ไม่ได้วาดตัวอักษร - วางปากกาตามปกติ
				plotter_pen_down();
 80074c4:	f002 fc86 	bl	8009dd4 <plotter_pen_down>
			}
			motion_sequence_state = MOTION_COMPLETE;
 80074c8:	4b1e      	ldr	r3, [pc, #120]	@ (8007544 <update_control_loops+0x620>)
 80074ca:	2206      	movs	r2, #6
 80074cc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80074ce:	e009      	b.n	80074e4 <update_control_loops+0x5c0>

	case MOTION_COMPLETE:
		motion_sequence_state = MOTION_IDLE;
 80074d0:	4b1c      	ldr	r3, [pc, #112]	@ (8007544 <update_control_loops+0x620>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	701a      	strb	r2, [r3, #0]
		break;
 80074d6:	e006      	b.n	80074e6 <update_control_loops+0x5c2>

	default:
		break;
 80074d8:	bf00      	nop
 80074da:	e004      	b.n	80074e6 <update_control_loops+0x5c2>
		break;
 80074dc:	bf00      	nop
 80074de:	e002      	b.n	80074e6 <update_control_loops+0x5c2>
		break;
 80074e0:	bf00      	nop
 80074e2:	e000      	b.n	80074e6 <update_control_loops+0x5c2>
		break;
 80074e4:	bf00      	nop
	}

	prismatic_axis.mm = prismatic_encoder.mm;
 80074e6:	4b19      	ldr	r3, [pc, #100]	@ (800754c <update_control_loops+0x628>)
 80074e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074ea:	4a0d      	ldr	r2, [pc, #52]	@ (8007520 <update_control_loops+0x5fc>)
 80074ec:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 80074ee:	4b18      	ldr	r3, [pc, #96]	@ (8007550 <update_control_loops+0x62c>)
 80074f0:	edd3 7a00 	vldr	s15, [r3]
 80074f4:	220e      	movs	r2, #14
 80074f6:	210f      	movs	r1, #15
 80074f8:	eeb0 0a67 	vmov.f32	s0, s15
 80074fc:	4815      	ldr	r0, [pc, #84]	@ (8007554 <update_control_loops+0x630>)
 80074fe:	f7fd fb63 	bl	8004bc8 <UnitConverter_angle>
 8007502:	eef0 7a40 	vmov.f32	s15, s0
 8007506:	4b0a      	ldr	r3, [pc, #40]	@ (8007530 <update_control_loops+0x60c>)
 8007508:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 800750c:	3724      	adds	r7, #36	@ 0x24
 800750e:	46bd      	mov	sp, r7
 8007510:	ecbd 8b02 	vpop	{d8}
 8007514:	bd90      	pop	{r4, r7, pc}
 8007516:	bf00      	nop
 8007518:	200007eb 	.word	0x200007eb
 800751c:	200007ea 	.word	0x200007ea
 8007520:	20000704 	.word	0x20000704
 8007524:	200007b8 	.word	0x200007b8
 8007528:	20000080 	.word	0x20000080
 800752c:	20000790 	.word	0x20000790
 8007530:	20000748 	.word	0x20000748
 8007534:	200007cc 	.word	0x200007cc
 8007538:	20000000 	.word	0x20000000
 800753c:	200007a4 	.word	0x200007a4
 8007540:	200007e0 	.word	0x200007e0
 8007544:	2000078c 	.word	0x2000078c
 8007548:	200008b0 	.word	0x200008b0
 800754c:	20000980 	.word	0x20000980
 8007550:	200007fc 	.word	0x200007fc
 8007554:	20000d74 	.word	0x20000d74

08007558 <check_emergency_button>:

void check_emergency_button(void) {
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
	static uint32_t emer_debounce_counter = 0;
	const uint32_t EMER_DEBOUNCE_TIME = 50; // 50ms
 800755e:	2332      	movs	r3, #50	@ 0x32
 8007560:	607b      	str	r3, [r7, #4]

	bool current_state = (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin)
 8007562:	2110      	movs	r1, #16
 8007564:	4813      	ldr	r0, [pc, #76]	@ (80075b4 <check_emergency_button+0x5c>)
 8007566:	f005 ff6d 	bl	800d444 <HAL_GPIO_ReadPin>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	bf0c      	ite	eq
 8007570:	2301      	moveq	r3, #1
 8007572:	2300      	movne	r3, #0
 8007574:	70fb      	strb	r3, [r7, #3]
			== GPIO_PIN_RESET);

	if (current_state) {
 8007576:	78fb      	ldrb	r3, [r7, #3]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d013      	beq.n	80075a4 <check_emergency_button+0x4c>
		emer_debounce_counter++;
 800757c:	4b0e      	ldr	r3, [pc, #56]	@ (80075b8 <check_emergency_button+0x60>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3301      	adds	r3, #1
 8007582:	4a0d      	ldr	r2, [pc, #52]	@ (80075b8 <check_emergency_button+0x60>)
 8007584:	6013      	str	r3, [r2, #0]
		if (emer_debounce_counter >= EMER_DEBOUNCE_TIME) {
 8007586:	4b0c      	ldr	r3, [pc, #48]	@ (80075b8 <check_emergency_button+0x60>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	429a      	cmp	r2, r3
 800758e:	d80c      	bhi.n	80075aa <check_emergency_button+0x52>
			if (safety_state != SAFETY_HARDWARE_EMERGENCY) {
 8007590:	4b0a      	ldr	r3, [pc, #40]	@ (80075bc <check_emergency_button+0x64>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b02      	cmp	r3, #2
 8007596:	d001      	beq.n	800759c <check_emergency_button+0x44>
				trigger_hardware_emergency();
 8007598:	f000 f880 	bl	800769c <trigger_hardware_emergency>
			}
			emer_debounce_counter = EMER_DEBOUNCE_TIME; // Prevent overflow
 800759c:	4a06      	ldr	r2, [pc, #24]	@ (80075b8 <check_emergency_button+0x60>)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6013      	str	r3, [r2, #0]
		}
	} else {
		emer_debounce_counter = 0;
	}
}
 80075a2:	e002      	b.n	80075aa <check_emergency_button+0x52>
		emer_debounce_counter = 0;
 80075a4:	4b04      	ldr	r3, [pc, #16]	@ (80075b8 <check_emergency_button+0x60>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	601a      	str	r2, [r3, #0]
}
 80075aa:	bf00      	nop
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	48000400 	.word	0x48000400
 80075b8:	200008d0 	.word	0x200008d0
 80075bc:	200007ec 	.word	0x200007ec

080075c0 <check_safety_conditions>:
//	 }
//	 }
//	 */
//}

void check_safety_conditions(void) {
 80075c0:	b580      	push	{r7, lr}
 80075c2:	af00      	add	r7, sp, #0
	if (tuning_mode || safety_state != SAFETY_NORMAL || homing_active)
 80075c4:	4b16      	ldr	r3, [pc, #88]	@ (8007620 <check_safety_conditions+0x60>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d127      	bne.n	800761c <check_safety_conditions+0x5c>
 80075cc:	4b15      	ldr	r3, [pc, #84]	@ (8007624 <check_safety_conditions+0x64>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d123      	bne.n	800761c <check_safety_conditions+0x5c>
 80075d4:	4b14      	ldr	r3, [pc, #80]	@ (8007628 <check_safety_conditions+0x68>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d11f      	bne.n	800761c <check_safety_conditions+0x5c>
		return;

	if (up_photo && prismatic_axis.command_pos < 0.0f) {
 80075dc:	4b13      	ldr	r3, [pc, #76]	@ (800762c <check_safety_conditions+0x6c>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <check_safety_conditions+0x3c>
 80075e6:	4b12      	ldr	r3, [pc, #72]	@ (8007630 <check_safety_conditions+0x70>)
 80075e8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80075ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80075f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f4:	d502      	bpl.n	80075fc <check_safety_conditions+0x3c>
		trigger_software_emergency();
 80075f6:	f000 f81f 	bl	8007638 <trigger_software_emergency>
		return;
 80075fa:	e010      	b.n	800761e <check_safety_conditions+0x5e>
	}

	if (low_photo && prismatic_axis.command_pos > 0.0f) {
 80075fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007634 <check_safety_conditions+0x74>)
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00b      	beq.n	800761e <check_safety_conditions+0x5e>
 8007606:	4b0a      	ldr	r3, [pc, #40]	@ (8007630 <check_safety_conditions+0x70>)
 8007608:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800760c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007614:	dd03      	ble.n	800761e <check_safety_conditions+0x5e>
		trigger_software_emergency();
 8007616:	f000 f80f 	bl	8007638 <trigger_software_emergency>
		return;
 800761a:	e000      	b.n	800761e <check_safety_conditions+0x5e>
		return;
 800761c:	bf00      	nop
	}
}
 800761e:	bd80      	pop	{r7, pc}
 8007620:	20000334 	.word	0x20000334
 8007624:	200007ec 	.word	0x200007ec
 8007628:	200007eb 	.word	0x200007eb
 800762c:	200007e8 	.word	0x200007e8
 8007630:	20000704 	.word	0x20000704
 8007634:	200007e9 	.word	0x200007e9

08007638 <trigger_software_emergency>:

void trigger_software_emergency(void) {
 8007638:	b580      	push	{r7, lr}
 800763a:	af00      	add	r7, sp, #0
	if (safety_state == SAFETY_NORMAL) {
 800763c:	4b10      	ldr	r3, [pc, #64]	@ (8007680 <trigger_software_emergency+0x48>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d11b      	bne.n	800767c <trigger_software_emergency+0x44>
		safety_state = SAFETY_SOFTWARE_EMERGENCY;
 8007644:	4b0e      	ldr	r3, [pc, #56]	@ (8007680 <trigger_software_emergency+0x48>)
 8007646:	2201      	movs	r2, #1
 8007648:	701a      	strb	r2, [r3, #0]
		emergency_stop_all_motors();
 800764a:	f000 f901 	bl	8007850 <emergency_stop_all_motors>
		safety_toggle_timer = 0;
 800764e:	4b0d      	ldr	r3, [pc, #52]	@ (8007684 <trigger_software_emergency+0x4c>)
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]
		pilot_light_state = false;
 8007654:	4b0c      	ldr	r3, [pc, #48]	@ (8007688 <trigger_software_emergency+0x50>)
 8007656:	2200      	movs	r2, #0
 8007658:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 800765a:	4b0c      	ldr	r3, [pc, #48]	@ (800768c <trigger_software_emergency+0x54>)
 800765c:	2200      	movs	r2, #0
 800765e:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 8007660:	4b0b      	ldr	r3, [pc, #44]	@ (8007690 <trigger_software_emergency+0x58>)
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 8007668:	4b0a      	ldr	r3, [pc, #40]	@ (8007694 <trigger_software_emergency+0x5c>)
 800766a:	2200      	movs	r2, #0
 800766c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		// Exit joy mode if active
		if (joy_mode_active) {
 8007670:	4b09      	ldr	r3, [pc, #36]	@ (8007698 <trigger_software_emergency+0x60>)
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <trigger_software_emergency+0x44>
			exit_joy_mode();
 8007678:	f000 fa0c 	bl	8007a94 <exit_joy_mode>
		}
	}
}
 800767c:	bf00      	nop
 800767e:	bd80      	pop	{r7, pc}
 8007680:	200007ec 	.word	0x200007ec
 8007684:	200007f0 	.word	0x200007f0
 8007688:	200007f4 	.word	0x200007f4
 800768c:	2000078c 	.word	0x2000078c
 8007690:	20000704 	.word	0x20000704
 8007694:	20000748 	.word	0x20000748
 8007698:	20000805 	.word	0x20000805

0800769c <trigger_hardware_emergency>:
//	// Exit joy mode if active
//	if (joy_mode_active) {
//		exit_joy_mode();
//	}
//}
void trigger_hardware_emergency(void) {
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
	safety_state = SAFETY_HARDWARE_EMERGENCY;
 80076a0:	4b16      	ldr	r3, [pc, #88]	@ (80076fc <trigger_hardware_emergency+0x60>)
 80076a2:	2202      	movs	r2, #2
 80076a4:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = true;
 80076a6:	4b16      	ldr	r3, [pc, #88]	@ (8007700 <trigger_hardware_emergency+0x64>)
 80076a8:	2201      	movs	r2, #1
 80076aa:	701a      	strb	r2, [r3, #0]
	emergency_stop_all_motors();
 80076ac:	f000 f8d0 	bl	8007850 <emergency_stop_all_motors>
	safety_toggle_timer = 0;
 80076b0:	4b14      	ldr	r3, [pc, #80]	@ (8007704 <trigger_hardware_emergency+0x68>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 80076b6:	4b14      	ldr	r3, [pc, #80]	@ (8007708 <trigger_hardware_emergency+0x6c>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	701a      	strb	r2, [r3, #0]

	// Ensure motion is completely stopped
	ensure_motion_idle();
 80076bc:	f001 feac 	bl	8009418 <ensure_motion_idle>

	// Reset trajectory structures
	memset(&prisEva, 0, sizeof(prisEva));
 80076c0:	2214      	movs	r2, #20
 80076c2:	2100      	movs	r1, #0
 80076c4:	4811      	ldr	r0, [pc, #68]	@ (800770c <trigger_hardware_emergency+0x70>)
 80076c6:	f00b fcf3 	bl	80130b0 <memset>
	memset(&revEva, 0, sizeof(revEva));
 80076ca:	2214      	movs	r2, #20
 80076cc:	2100      	movs	r1, #0
 80076ce:	4810      	ldr	r0, [pc, #64]	@ (8007710 <trigger_hardware_emergency+0x74>)
 80076d0:	f00b fcee 	bl	80130b0 <memset>
	prisEva.isFinised = true;
 80076d4:	4b0d      	ldr	r3, [pc, #52]	@ (800770c <trigger_hardware_emergency+0x70>)
 80076d6:	2201      	movs	r2, #1
 80076d8:	741a      	strb	r2, [r3, #16]
	revEva.isFinised = true;
 80076da:	4b0d      	ldr	r3, [pc, #52]	@ (8007710 <trigger_hardware_emergency+0x74>)
 80076dc:	2201      	movs	r2, #1
 80076de:	741a      	strb	r2, [r3, #16]

	homing_active = false;
 80076e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007714 <trigger_hardware_emergency+0x78>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	701a      	strb	r2, [r3, #0]
	homing_state = HOMING_IDLE;
 80076e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007718 <trigger_hardware_emergency+0x7c>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	701a      	strb	r2, [r3, #0]

	// Exit joy mode if active
	if (joy_mode_active) {
 80076ec:	4b0b      	ldr	r3, [pc, #44]	@ (800771c <trigger_hardware_emergency+0x80>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <trigger_hardware_emergency+0x5c>
		exit_joy_mode();
 80076f4:	f000 f9ce 	bl	8007a94 <exit_joy_mode>
	}
}
 80076f8:	bf00      	nop
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	200007ec 	.word	0x200007ec
 8007700:	200007f5 	.word	0x200007f5
 8007704:	200007f0 	.word	0x200007f0
 8007708:	200007f4 	.word	0x200007f4
 800770c:	200007b8 	.word	0x200007b8
 8007710:	200007cc 	.word	0x200007cc
 8007714:	200007eb 	.word	0x200007eb
 8007718:	200007ea 	.word	0x200007ea
 800771c:	20000805 	.word	0x20000805

08007720 <clear_emergency_state>:
//    // Keep DFD for revolute axis (gravity compensation)
//    revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
//            revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
//}

void clear_emergency_state(void) {
 8007720:	b580      	push	{r7, lr}
 8007722:	af00      	add	r7, sp, #0
	// First ensure everything is stopped
	ensure_motion_idle();
 8007724:	f001 fe78 	bl	8009418 <ensure_motion_idle>
	emergency_stop_all_motors();
 8007728:	f000 f892 	bl	8007850 <emergency_stop_all_motors>

	// Reset trajectory structures completely
	memset(&prisEva, 0, sizeof(prisEva));
 800772c:	2214      	movs	r2, #20
 800772e:	2100      	movs	r1, #0
 8007730:	4839      	ldr	r0, [pc, #228]	@ (8007818 <clear_emergency_state+0xf8>)
 8007732:	f00b fcbd 	bl	80130b0 <memset>
	memset(&revEva, 0, sizeof(revEva));
 8007736:	2214      	movs	r2, #20
 8007738:	2100      	movs	r1, #0
 800773a:	4838      	ldr	r0, [pc, #224]	@ (800781c <clear_emergency_state+0xfc>)
 800773c:	f00b fcb8 	bl	80130b0 <memset>
	prisEva.isFinised = true;
 8007740:	4b35      	ldr	r3, [pc, #212]	@ (8007818 <clear_emergency_state+0xf8>)
 8007742:	2201      	movs	r2, #1
 8007744:	741a      	strb	r2, [r3, #16]
	revEva.isFinised = true;
 8007746:	4b35      	ldr	r3, [pc, #212]	@ (800781c <clear_emergency_state+0xfc>)
 8007748:	2201      	movs	r2, #1
 800774a:	741a      	strb	r2, [r3, #16]

	// Set positions for holding
	prismatic_axis.position = prismatic_encoder.mm;
 800774c:	4b34      	ldr	r3, [pc, #208]	@ (8007820 <clear_emergency_state+0x100>)
 800774e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007750:	4a34      	ldr	r2, [pc, #208]	@ (8007824 <clear_emergency_state+0x104>)
 8007752:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8007754:	4b34      	ldr	r3, [pc, #208]	@ (8007828 <clear_emergency_state+0x108>)
 8007756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007758:	4a34      	ldr	r2, [pc, #208]	@ (800782c <clear_emergency_state+0x10c>)
 800775a:	6013      	str	r3, [r2, #0]
	prismatic_axis.target_pos = prismatic_axis.position;
 800775c:	4b31      	ldr	r3, [pc, #196]	@ (8007824 <clear_emergency_state+0x104>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a30      	ldr	r2, [pc, #192]	@ (8007824 <clear_emergency_state+0x104>)
 8007762:	6113      	str	r3, [r2, #16]
	revolute_axis.target_pos = revolute_axis.position;
 8007764:	4b31      	ldr	r3, [pc, #196]	@ (800782c <clear_emergency_state+0x10c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a30      	ldr	r2, [pc, #192]	@ (800782c <clear_emergency_state+0x10c>)
 800776a:	6113      	str	r3, [r2, #16]

	// Clear all velocities and commands
	prismatic_axis.command_vel = 0.0f;
 800776c:	4b2d      	ldr	r3, [pc, #180]	@ (8007824 <clear_emergency_state+0x104>)
 800776e:	f04f 0200 	mov.w	r2, #0
 8007772:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007774:	4b2d      	ldr	r3, [pc, #180]	@ (800782c <clear_emergency_state+0x10c>)
 8007776:	f04f 0200 	mov.w	r2, #0
 800777a:	629a      	str	r2, [r3, #40]	@ 0x28
	prismatic_axis.velocity = 0.0f;
 800777c:	4b29      	ldr	r3, [pc, #164]	@ (8007824 <clear_emergency_state+0x104>)
 800777e:	f04f 0200 	mov.w	r2, #0
 8007782:	605a      	str	r2, [r3, #4]
	revolute_axis.velocity = 0.0f;
 8007784:	4b29      	ldr	r3, [pc, #164]	@ (800782c <clear_emergency_state+0x10c>)
 8007786:	f04f 0200 	mov.w	r2, #0
 800778a:	605a      	str	r2, [r3, #4]
	prismatic_axis.command_pos = 0.0f;
 800778c:	4b25      	ldr	r3, [pc, #148]	@ (8007824 <clear_emergency_state+0x104>)
 800778e:	f04f 0200 	mov.w	r2, #0
 8007792:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8007794:	4b25      	ldr	r3, [pc, #148]	@ (800782c <clear_emergency_state+0x10c>)
 8007796:	f04f 0200 	mov.w	r2, #0
 800779a:	625a      	str	r2, [r3, #36]	@ 0x24

	// Clear feedforward
	prismatic_axis.ffd = 0.0f;
 800779c:	4b21      	ldr	r3, [pc, #132]	@ (8007824 <clear_emergency_state+0x104>)
 800779e:	f04f 0200 	mov.w	r2, #0
 80077a2:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_axis.dfd = 0.0f;
 80077a4:	4b1f      	ldr	r3, [pc, #124]	@ (8007824 <clear_emergency_state+0x104>)
 80077a6:	f04f 0200 	mov.w	r2, #0
 80077aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	revolute_axis.ffd = 0.0f;
 80077ac:	4b1f      	ldr	r3, [pc, #124]	@ (800782c <clear_emergency_state+0x10c>)
 80077ae:	f04f 0200 	mov.w	r2, #0
 80077b2:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80077b4:	4b1c      	ldr	r3, [pc, #112]	@ (8007828 <clear_emergency_state+0x108>)
 80077b6:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80077ba:	4b19      	ldr	r3, [pc, #100]	@ (8007820 <clear_emergency_state+0x100>)
 80077bc:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80077c0:	ed9f 6a1b 	vldr	s12, [pc, #108]	@ 8007830 <clear_emergency_state+0x110>
 80077c4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80077c8:	eef0 0a66 	vmov.f32	s1, s13
 80077cc:	eeb0 0a47 	vmov.f32	s0, s14
 80077d0:	4818      	ldr	r0, [pc, #96]	@ (8007834 <clear_emergency_state+0x114>)
 80077d2:	f7f9 ff52 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 80077d6:	eef0 7a40 	vmov.f32	s15, s0
 80077da:	4b14      	ldr	r3, [pc, #80]	@ (800782c <clear_emergency_state+0x10c>)
 80077dc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Clear emergency state
	safety_state = SAFETY_NORMAL;
 80077e0:	4b15      	ldr	r3, [pc, #84]	@ (8007838 <clear_emergency_state+0x118>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 80077e6:	4b15      	ldr	r3, [pc, #84]	@ (800783c <clear_emergency_state+0x11c>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 80077ec:	4b14      	ldr	r3, [pc, #80]	@ (8007840 <clear_emergency_state+0x120>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 80077f2:	4b14      	ldr	r3, [pc, #80]	@ (8007844 <clear_emergency_state+0x124>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 80077f8:	2200      	movs	r2, #0
 80077fa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80077fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007802:	f005 fe37 	bl	800d474 <HAL_GPIO_WritePin>
	up_photo = false;
 8007806:	4b10      	ldr	r3, [pc, #64]	@ (8007848 <clear_emergency_state+0x128>)
 8007808:	2200      	movs	r2, #0
 800780a:	701a      	strb	r2, [r3, #0]
	low_photo = false;
 800780c:	4b0f      	ldr	r3, [pc, #60]	@ (800784c <clear_emergency_state+0x12c>)
 800780e:	2200      	movs	r2, #0
 8007810:	701a      	strb	r2, [r3, #0]
}
 8007812:	bf00      	nop
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	200007b8 	.word	0x200007b8
 800781c:	200007cc 	.word	0x200007cc
 8007820:	20000980 	.word	0x20000980
 8007824:	20000704 	.word	0x20000704
 8007828:	200009dc 	.word	0x200009dc
 800782c:	20000748 	.word	0x20000748
 8007830:	447a0000 	.word	0x447a0000
 8007834:	20000b10 	.word	0x20000b10
 8007838:	200007ec 	.word	0x200007ec
 800783c:	200007f5 	.word	0x200007f5
 8007840:	200007f0 	.word	0x200007f0
 8007844:	200007f4 	.word	0x200007f4
 8007848:	200007e8 	.word	0x200007e8
 800784c:	200007e9 	.word	0x200007e9

08007850 <emergency_stop_all_motors>:

void emergency_stop_all_motors(void) {
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
	MDXX_set_range(&prismatic_motor, 2000, 0);
 8007854:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8007894 <emergency_stop_all_motors+0x44>
 8007858:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8007898 <emergency_stop_all_motors+0x48>
 800785c:	480f      	ldr	r0, [pc, #60]	@ (800789c <emergency_stop_all_motors+0x4c>)
 800785e:	f7f9 fd91 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8007862:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8007894 <emergency_stop_all_motors+0x44>
 8007866:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8007898 <emergency_stop_all_motors+0x48>
 800786a:	480d      	ldr	r0, [pc, #52]	@ (80078a0 <emergency_stop_all_motors+0x50>)
 800786c:	f7f9 fd8a 	bl	8001384 <MDXX_set_range>

	prismatic_axis.command_pos = 0.0f;
 8007870:	4b0c      	ldr	r3, [pc, #48]	@ (80078a4 <emergency_stop_all_motors+0x54>)
 8007872:	f04f 0200 	mov.w	r2, #0
 8007876:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8007878:	4b0b      	ldr	r3, [pc, #44]	@ (80078a8 <emergency_stop_all_motors+0x58>)
 800787a:	f04f 0200 	mov.w	r2, #0
 800787e:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8007880:	4b08      	ldr	r3, [pc, #32]	@ (80078a4 <emergency_stop_all_motors+0x54>)
 8007882:	f04f 0200 	mov.w	r2, #0
 8007886:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007888:	4b07      	ldr	r3, [pc, #28]	@ (80078a8 <emergency_stop_all_motors+0x58>)
 800788a:	f04f 0200 	mov.w	r2, #0
 800788e:	629a      	str	r2, [r3, #40]	@ 0x28
//	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_position_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);

}
 8007890:	bf00      	nop
 8007892:	bd80      	pop	{r7, pc}
 8007894:	00000000 	.word	0x00000000
 8007898:	44fa0000 	.word	0x44fa0000
 800789c:	200008e8 	.word	0x200008e8
 80078a0:	20000934 	.word	0x20000934
 80078a4:	20000704 	.word	0x20000704
 80078a8:	20000748 	.word	0x20000748

080078ac <update_safety_system>:

void update_safety_system(void) {
 80078ac:	b580      	push	{r7, lr}
 80078ae:	af00      	add	r7, sp, #0
	// Don't control pilot light if joy mode is active
	if (joy_mode_active) {
 80078b0:	4b3a      	ldr	r3, [pc, #232]	@ (800799c <update_safety_system+0xf0>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d16e      	bne.n	8007996 <update_safety_system+0xea>
		return; // Let joy mode handle pilot light
	}

	if (safety_state == SAFETY_SOFTWARE_EMERGENCY) {
 80078b8:	4b39      	ldr	r3, [pc, #228]	@ (80079a0 <update_safety_system+0xf4>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d11f      	bne.n	8007900 <update_safety_system+0x54>
		if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 80078c0:	4b38      	ldr	r3, [pc, #224]	@ (80079a4 <update_safety_system+0xf8>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3301      	adds	r3, #1
 80078c6:	4a37      	ldr	r2, [pc, #220]	@ (80079a4 <update_safety_system+0xf8>)
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	2bf9      	cmp	r3, #249	@ 0xf9
 80078cc:	d918      	bls.n	8007900 <update_safety_system+0x54>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 80078ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80078d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80078d6:	f005 fde5 	bl	800d4a4 <HAL_GPIO_TogglePin>
			pilot_light_state = !pilot_light_state;
 80078da:	4b33      	ldr	r3, [pc, #204]	@ (80079a8 <update_safety_system+0xfc>)
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	bf14      	ite	ne
 80078e4:	2301      	movne	r3, #1
 80078e6:	2300      	moveq	r3, #0
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	f083 0301 	eor.w	r3, r3, #1
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	4b2c      	ldr	r3, [pc, #176]	@ (80079a8 <update_safety_system+0xfc>)
 80078f8:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 80078fa:	4b2a      	ldr	r3, [pc, #168]	@ (80079a4 <update_safety_system+0xf8>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_HARDWARE_EMERGENCY) {
 8007900:	4b27      	ldr	r3, [pc, #156]	@ (80079a0 <update_safety_system+0xf4>)
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	2b02      	cmp	r3, #2
 8007906:	d134      	bne.n	8007972 <update_safety_system+0xc6>
		if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_SET) {
 8007908:	2110      	movs	r1, #16
 800790a:	4828      	ldr	r0, [pc, #160]	@ (80079ac <update_safety_system+0x100>)
 800790c:	f005 fd9a 	bl	800d444 <HAL_GPIO_ReadPin>
 8007910:	4603      	mov	r3, r0
 8007912:	2b01      	cmp	r3, #1
 8007914:	d120      	bne.n	8007958 <update_safety_system+0xac>
			if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8007916:	4b23      	ldr	r3, [pc, #140]	@ (80079a4 <update_safety_system+0xf8>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3301      	adds	r3, #1
 800791c:	4a21      	ldr	r2, [pc, #132]	@ (80079a4 <update_safety_system+0xf8>)
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	2bf9      	cmp	r3, #249	@ 0xf9
 8007922:	d926      	bls.n	8007972 <update_safety_system+0xc6>
				HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8007924:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007928:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800792c:	f005 fdba 	bl	800d4a4 <HAL_GPIO_TogglePin>
				pilot_light_state = !pilot_light_state;
 8007930:	4b1d      	ldr	r3, [pc, #116]	@ (80079a8 <update_safety_system+0xfc>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	bf14      	ite	ne
 800793a:	2301      	movne	r3, #1
 800793c:	2300      	moveq	r3, #0
 800793e:	b2db      	uxtb	r3, r3
 8007940:	f083 0301 	eor.w	r3, r3, #1
 8007944:	b2db      	uxtb	r3, r3
 8007946:	f003 0301 	and.w	r3, r3, #1
 800794a:	b2da      	uxtb	r2, r3
 800794c:	4b16      	ldr	r3, [pc, #88]	@ (80079a8 <update_safety_system+0xfc>)
 800794e:	701a      	strb	r2, [r3, #0]
				safety_toggle_timer = 0;
 8007950:	4b14      	ldr	r3, [pc, #80]	@ (80079a4 <update_safety_system+0xf8>)
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	e00c      	b.n	8007972 <update_safety_system+0xc6>
			}
		} else {
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007958:	2200      	movs	r2, #0
 800795a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800795e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007962:	f005 fd87 	bl	800d474 <HAL_GPIO_WritePin>
			pilot_light_state = false;
 8007966:	4b10      	ldr	r3, [pc, #64]	@ (80079a8 <update_safety_system+0xfc>)
 8007968:	2200      	movs	r2, #0
 800796a:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 800796c:	4b0d      	ldr	r3, [pc, #52]	@ (80079a4 <update_safety_system+0xf8>)
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_NORMAL) {
 8007972:	4b0b      	ldr	r3, [pc, #44]	@ (80079a0 <update_safety_system+0xf4>)
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d10e      	bne.n	8007998 <update_safety_system+0xec>
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 800797a:	2200      	movs	r2, #0
 800797c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007980:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007984:	f005 fd76 	bl	800d474 <HAL_GPIO_WritePin>
		pilot_light_state = false;
 8007988:	4b07      	ldr	r3, [pc, #28]	@ (80079a8 <update_safety_system+0xfc>)
 800798a:	2200      	movs	r2, #0
 800798c:	701a      	strb	r2, [r3, #0]
		safety_toggle_timer = 0;
 800798e:	4b05      	ldr	r3, [pc, #20]	@ (80079a4 <update_safety_system+0xf8>)
 8007990:	2200      	movs	r2, #0
 8007992:	601a      	str	r2, [r3, #0]
 8007994:	e000      	b.n	8007998 <update_safety_system+0xec>
		return; // Let joy mode handle pilot light
 8007996:	bf00      	nop
	}
}
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20000805 	.word	0x20000805
 80079a0:	200007ec 	.word	0x200007ec
 80079a4:	200007f0 	.word	0x200007f0
 80079a8:	200007f4 	.word	0x200007f4
 80079ac:	48000400 	.word	0x48000400

080079b0 <is_emergency_active>:

bool is_emergency_active(void) {
 80079b0:	b480      	push	{r7}
 80079b2:	af00      	add	r7, sp, #0
	return (safety_state != SAFETY_NORMAL);
 80079b4:	4b05      	ldr	r3, [pc, #20]	@ (80079cc <is_emergency_active+0x1c>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	bf14      	ite	ne
 80079bc:	2301      	movne	r3, #1
 80079be:	2300      	moveq	r3, #0
 80079c0:	b2db      	uxtb	r3, r3
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	200007ec 	.word	0x200007ec

080079d0 <enter_joy_mode>:

void enter_joy_mode(void) {
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 80079d4:	f7ff ffec 	bl	80079b0 <is_emergency_active>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d144      	bne.n	8007a68 <enter_joy_mode+0x98>
 80079de:	4b23      	ldr	r3, [pc, #140]	@ (8007a6c <enter_joy_mode+0x9c>)
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d140      	bne.n	8007a68 <enter_joy_mode+0x98>
 80079e6:	4b22      	ldr	r3, [pc, #136]	@ (8007a70 <enter_joy_mode+0xa0>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d13c      	bne.n	8007a68 <enter_joy_mode+0x98>
		return;
	}

	ensure_motion_idle();
 80079ee:	f001 fd13 	bl	8009418 <ensure_motion_idle>

	joy_mode_active = true;
 80079f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007a70 <enter_joy_mode+0xa0>)
 80079f4:	2201      	movs	r2, #1
 80079f6:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_INITIAL_CONTROL; // Start in initial control state
 80079f8:	4b1e      	ldr	r3, [pc, #120]	@ (8007a74 <enter_joy_mode+0xa4>)
 80079fa:	2201      	movs	r2, #1
 80079fc:	701a      	strb	r2, [r3, #0]

	// Reset all joy mode data
	reset_joy_mode_data();
 80079fe:	f000 f9bd 	bl	8007d7c <reset_joy_mode_data>

	// Turn on pilot light to indicate joy mode
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8007a02:	2201      	movs	r2, #1
 8007a04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007a08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007a0c:	f005 fd32 	bl	800d474 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = true;
 8007a10:	4b19      	ldr	r3, [pc, #100]	@ (8007a78 <enter_joy_mode+0xa8>)
 8007a12:	2201      	movs	r2, #1
 8007a14:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 8007a16:	4b19      	ldr	r3, [pc, #100]	@ (8007a7c <enter_joy_mode+0xac>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	601a      	str	r2, [r3, #0]

	// Stop any current motion
	motion_sequence_state = MOTION_IDLE;
 8007a1c:	4b18      	ldr	r3, [pc, #96]	@ (8007a80 <enter_joy_mode+0xb0>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8007a22:	4b18      	ldr	r3, [pc, #96]	@ (8007a84 <enter_joy_mode+0xb4>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8007a2a:	4b17      	ldr	r3, [pc, #92]	@ (8007a88 <enter_joy_mode+0xb8>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Initialize position holding at current positions
	prismatic_axis.position = prismatic_encoder.mm;
 8007a32:	4b16      	ldr	r3, [pc, #88]	@ (8007a8c <enter_joy_mode+0xbc>)
 8007a34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a36:	4a13      	ldr	r2, [pc, #76]	@ (8007a84 <enter_joy_mode+0xb4>)
 8007a38:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8007a3a:	4b15      	ldr	r3, [pc, #84]	@ (8007a90 <enter_joy_mode+0xc0>)
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3e:	4a12      	ldr	r2, [pc, #72]	@ (8007a88 <enter_joy_mode+0xb8>)
 8007a40:	6013      	str	r3, [r2, #0]

	// Reset motor commands
	prismatic_axis.command_pos = 0.0f;
 8007a42:	4b10      	ldr	r3, [pc, #64]	@ (8007a84 <enter_joy_mode+0xb4>)
 8007a44:	f04f 0200 	mov.w	r2, #0
 8007a48:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8007a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007a88 <enter_joy_mode+0xb8>)
 8007a4c:	f04f 0200 	mov.w	r2, #0
 8007a50:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8007a52:	4b0c      	ldr	r3, [pc, #48]	@ (8007a84 <enter_joy_mode+0xb4>)
 8007a54:	f04f 0200 	mov.w	r2, #0
 8007a58:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007a88 <enter_joy_mode+0xb8>)
 8007a5c:	f04f 0200 	mov.w	r2, #0
 8007a60:	629a      	str	r2, [r3, #40]	@ 0x28

	plotter_pen_up();
 8007a62:	f002 f9a7 	bl	8009db4 <plotter_pen_up>
 8007a66:	e000      	b.n	8007a6a <enter_joy_mode+0x9a>
		return;
 8007a68:	bf00      	nop
	// Reset PID controllers
//	PID_CONTROLLER_Reset(&prismatic_position_pid);
//	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_position_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);
}
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	200007eb 	.word	0x200007eb
 8007a70:	20000805 	.word	0x20000805
 8007a74:	20000804 	.word	0x20000804
 8007a78:	20000860 	.word	0x20000860
 8007a7c:	2000085c 	.word	0x2000085c
 8007a80:	2000078c 	.word	0x2000078c
 8007a84:	20000704 	.word	0x20000704
 8007a88:	20000748 	.word	0x20000748
 8007a8c:	20000980 	.word	0x20000980
 8007a90:	200009dc 	.word	0x200009dc

08007a94 <exit_joy_mode>:

/* Updated exit joy mode to handle cleanup properly */
void exit_joy_mode(void) {
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
	joy_mode_active = false;
 8007a98:	4b2d      	ldr	r3, [pc, #180]	@ (8007b50 <exit_joy_mode+0xbc>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_IDLE;
 8007a9e:	4b2d      	ldr	r3, [pc, #180]	@ (8007b54 <exit_joy_mode+0xc0>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	701a      	strb	r2, [r3, #0]

	// Reset all data
	reset_joy_mode_data();
 8007aa4:	f000 f96a 	bl	8007d7c <reset_joy_mode_data>

	// Turn off pilot light
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007aae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007ab2:	f005 fcdf 	bl	800d474 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = false;
 8007ab6:	4b28      	ldr	r3, [pc, #160]	@ (8007b58 <exit_joy_mode+0xc4>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 8007abc:	4b27      	ldr	r3, [pc, #156]	@ (8007b5c <exit_joy_mode+0xc8>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]

	// DON'T stop motors - hold current position
	// Set current positions as target positions for holding
	prismatic_axis.position = prismatic_encoder.mm;
 8007ac2:	4b27      	ldr	r3, [pc, #156]	@ (8007b60 <exit_joy_mode+0xcc>)
 8007ac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ac6:	4a27      	ldr	r2, [pc, #156]	@ (8007b64 <exit_joy_mode+0xd0>)
 8007ac8:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8007aca:	4b27      	ldr	r3, [pc, #156]	@ (8007b68 <exit_joy_mode+0xd4>)
 8007acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ace:	4a27      	ldr	r2, [pc, #156]	@ (8007b6c <exit_joy_mode+0xd8>)
 8007ad0:	6013      	str	r3, [r2, #0]

	// Reset velocities and feedforward terms
	prismatic_axis.command_vel = 0.0f;
 8007ad2:	4b24      	ldr	r3, [pc, #144]	@ (8007b64 <exit_joy_mode+0xd0>)
 8007ad4:	f04f 0200 	mov.w	r2, #0
 8007ad8:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007ada:	4b24      	ldr	r3, [pc, #144]	@ (8007b6c <exit_joy_mode+0xd8>)
 8007adc:	f04f 0200 	mov.w	r2, #0
 8007ae0:	629a      	str	r2, [r3, #40]	@ 0x28
	prismatic_axis.ffd = 0.0f;
 8007ae2:	4b20      	ldr	r3, [pc, #128]	@ (8007b64 <exit_joy_mode+0xd0>)
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_axis.dfd = 0.0f;
 8007aea:	4b1e      	ldr	r3, [pc, #120]	@ (8007b64 <exit_joy_mode+0xd0>)
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	62da      	str	r2, [r3, #44]	@ 0x2c
	revolute_axis.ffd = 0.0f;
 8007af2:	4b1e      	ldr	r3, [pc, #120]	@ (8007b6c <exit_joy_mode+0xd8>)
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	631a      	str	r2, [r3, #48]	@ 0x30

	// Keep DFD for revolute axis (gravity compensation)
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007afa:	4b1b      	ldr	r3, [pc, #108]	@ (8007b68 <exit_joy_mode+0xd4>)
 8007afc:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8007b00:	4b17      	ldr	r3, [pc, #92]	@ (8007b60 <exit_joy_mode+0xcc>)
 8007b02:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007b06:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8007b70 <exit_joy_mode+0xdc>
 8007b0a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007b0e:	eef0 0a66 	vmov.f32	s1, s13
 8007b12:	eeb0 0a47 	vmov.f32	s0, s14
 8007b16:	4817      	ldr	r0, [pc, #92]	@ (8007b74 <exit_joy_mode+0xe0>)
 8007b18:	f7f9 fdaf 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8007b1c:	eef0 7a40 	vmov.f32	s15, s0
 8007b20:	4b12      	ldr	r3, [pc, #72]	@ (8007b6c <exit_joy_mode+0xd8>)
 8007b22:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
//	PID_CONTROLLER_Reset(&revolute_position_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);

	// Reset motion state
	motion_sequence_state = MOTION_IDLE;
 8007b26:	4b14      	ldr	r3, [pc, #80]	@ (8007b78 <exit_joy_mode+0xe4>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8007b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b64 <exit_joy_mode+0xd0>)
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8007b34:	4b0d      	ldr	r3, [pc, #52]	@ (8007b6c <exit_joy_mode+0xd8>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	//modbus reset state
	registerFrame[BaseSystem_Status].U16 = 0;
 8007b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8007b7c <exit_joy_mode+0xe8>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	805a      	strh	r2, [r3, #2]
	registerFrame[R_Theta_Status].U16 = 0;
 8007b42:	4b0e      	ldr	r3, [pc, #56]	@ (8007b7c <exit_joy_mode+0xe8>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	841a      	strh	r2, [r3, #32]

	plotter_pen_up();
 8007b48:	f002 f934 	bl	8009db4 <plotter_pen_up>
}
 8007b4c:	bf00      	nop
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	20000805 	.word	0x20000805
 8007b54:	20000804 	.word	0x20000804
 8007b58:	20000860 	.word	0x20000860
 8007b5c:	2000085c 	.word	0x2000085c
 8007b60:	20000980 	.word	0x20000980
 8007b64:	20000704 	.word	0x20000704
 8007b68:	200009dc 	.word	0x200009dc
 8007b6c:	20000748 	.word	0x20000748
 8007b70:	447a0000 	.word	0x447a0000
 8007b74:	20000b10 	.word	0x20000b10
 8007b78:	2000078c 	.word	0x2000078c
 8007b7c:	20001584 	.word	0x20001584

08007b80 <save_current_position>:

void save_current_position(void) {
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b088      	sub	sp, #32
 8007b84:	af00      	add	r7, sp, #0
	if (saved_position_count < JOY_MODE_MAX_POSITIONS) {
 8007b86:	4b50      	ldr	r3, [pc, #320]	@ (8007cc8 <save_current_position+0x148>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b09      	cmp	r3, #9
 8007b8c:	f200 8098 	bhi.w	8007cc0 <save_current_position+0x140>
		float current_pris = prismatic_encoder.mm;
 8007b90:	4b4e      	ldr	r3, [pc, #312]	@ (8007ccc <save_current_position+0x14c>)
 8007b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b94:	61fb      	str	r3, [r7, #28]
		float current_rev = revolute_encoder.rads;
 8007b96:	4b4e      	ldr	r3, [pc, #312]	@ (8007cd0 <save_current_position+0x150>)
 8007b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b9a:	61bb      	str	r3, [r7, #24]

		bool too_similar = false;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	75fb      	strb	r3, [r7, #23]
		if (saved_position_count > 0) {
 8007ba0:	4b49      	ldr	r3, [pc, #292]	@ (8007cc8 <save_current_position+0x148>)
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d031      	beq.n	8007c0c <save_current_position+0x8c>
			float last_pris =
					saved_positions[saved_position_count - 1].prismatic_pos;
 8007ba8:	4b47      	ldr	r3, [pc, #284]	@ (8007cc8 <save_current_position+0x148>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	3b01      	subs	r3, #1
			float last_pris =
 8007bae:	4a49      	ldr	r2, [pc, #292]	@ (8007cd4 <save_current_position+0x154>)
 8007bb0:	00db      	lsls	r3, r3, #3
 8007bb2:	4413      	add	r3, r2
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	613b      	str	r3, [r7, #16]
			float last_rev =
					saved_positions[saved_position_count - 1].revolute_pos;
 8007bb8:	4b43      	ldr	r3, [pc, #268]	@ (8007cc8 <save_current_position+0x148>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	3b01      	subs	r3, #1
			float last_rev =
 8007bbe:	4a45      	ldr	r2, [pc, #276]	@ (8007cd4 <save_current_position+0x154>)
 8007bc0:	00db      	lsls	r3, r3, #3
 8007bc2:	4413      	add	r3, r2
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	60fb      	str	r3, [r7, #12]

			if (fabsf(current_pris - last_pris) < 5.0f
 8007bca:	ed97 7a07 	vldr	s14, [r7, #28]
 8007bce:	edd7 7a04 	vldr	s15, [r7, #16]
 8007bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bd6:	eef0 7ae7 	vabs.f32	s15, s15
 8007bda:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8007bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007be6:	d511      	bpl.n	8007c0c <save_current_position+0x8c>
					&& fabsf(current_rev - last_rev) < 0.1f) {
 8007be8:	ed97 7a06 	vldr	s14, [r7, #24]
 8007bec:	edd7 7a03 	vldr	s15, [r7, #12]
 8007bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007bf4:	eef0 7ae7 	vabs.f32	s15, s15
 8007bf8:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8007cd8 <save_current_position+0x158>
 8007bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c04:	d502      	bpl.n	8007c0c <save_current_position+0x8c>
				too_similar = true;
 8007c06:	2301      	movs	r3, #1
 8007c08:	75fb      	strb	r3, [r7, #23]
				// DEBUG: Position too similar, not saving
				return;// Exit early if too similar
 8007c0a:	e059      	b.n	8007cc0 <save_current_position+0x140>
			}
		}

		// Only reach here if position should be saved
		saved_positions[saved_position_count].prismatic_pos = current_pris;
 8007c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8007cc8 <save_current_position+0x148>)
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	4a30      	ldr	r2, [pc, #192]	@ (8007cd4 <save_current_position+0x154>)
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	4413      	add	r3, r2
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	601a      	str	r2, [r3, #0]
		saved_positions[saved_position_count].revolute_pos = current_rev;
 8007c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8007cc8 <save_current_position+0x148>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8007cd4 <save_current_position+0x154>)
 8007c20:	00db      	lsls	r3, r3, #3
 8007c22:	4413      	add	r3, r2
 8007c24:	3304      	adds	r3, #4
 8007c26:	69ba      	ldr	r2, [r7, #24]
 8007c28:	601a      	str	r2, [r3, #0]

		uint8_t r_addr = 0x20 + saved_position_count * 2;
 8007c2a:	4b27      	ldr	r3, [pc, #156]	@ (8007cc8 <save_current_position+0x148>)
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	3310      	adds	r3, #16
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	72fb      	strb	r3, [r7, #11]
		uint8_t t_addr = r_addr + 1;
 8007c36:	7afb      	ldrb	r3, [r7, #11]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	72bb      	strb	r3, [r7, #10]

		if (r_addr <= 0x38 && t_addr <= 0x39) {
 8007c3c:	7afb      	ldrb	r3, [r7, #11]
 8007c3e:	2b38      	cmp	r3, #56	@ 0x38
 8007c40:	d82e      	bhi.n	8007ca0 <save_current_position+0x120>
 8007c42:	7abb      	ldrb	r3, [r7, #10]
 8007c44:	2b39      	cmp	r3, #57	@ 0x39
 8007c46:	d82b      	bhi.n	8007ca0 <save_current_position+0x120>
			int16_t r_mm_fixed = (int16_t) (current_pris * 10.0);
 8007c48:	69f8      	ldr	r0, [r7, #28]
 8007c4a:	f7f8 fc49 	bl	80004e0 <__aeabi_f2d>
 8007c4e:	f04f 0200 	mov.w	r2, #0
 8007c52:	4b22      	ldr	r3, [pc, #136]	@ (8007cdc <save_current_position+0x15c>)
 8007c54:	f7f8 fc9c 	bl	8000590 <__aeabi_dmul>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	4619      	mov	r1, r3
 8007c60:	f7f8 ff30 	bl	8000ac4 <__aeabi_d2iz>
 8007c64:	4603      	mov	r3, r0
 8007c66:	813b      	strh	r3, [r7, #8]
			int16_t t_deg_fixed = (int16_t) (revolute_axis.deg * 10.0);
 8007c68:	4b1d      	ldr	r3, [pc, #116]	@ (8007ce0 <save_current_position+0x160>)
 8007c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7f8 fc37 	bl	80004e0 <__aeabi_f2d>
 8007c72:	f04f 0200 	mov.w	r2, #0
 8007c76:	4b19      	ldr	r3, [pc, #100]	@ (8007cdc <save_current_position+0x15c>)
 8007c78:	f7f8 fc8a 	bl	8000590 <__aeabi_dmul>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	460b      	mov	r3, r1
 8007c80:	4610      	mov	r0, r2
 8007c82:	4619      	mov	r1, r3
 8007c84:	f7f8 ff1e 	bl	8000ac4 <__aeabi_d2iz>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	80fb      	strh	r3, [r7, #6]

			registerFrame[r_addr].U16 = r_mm_fixed;
 8007c8c:	7afb      	ldrb	r3, [r7, #11]
 8007c8e:	8939      	ldrh	r1, [r7, #8]
 8007c90:	4a14      	ldr	r2, [pc, #80]	@ (8007ce4 <save_current_position+0x164>)
 8007c92:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			registerFrame[t_addr].U16 = t_deg_fixed;
 8007c96:	7abb      	ldrb	r3, [r7, #10]
 8007c98:	88f9      	ldrh	r1, [r7, #6]
 8007c9a:	4a12      	ldr	r2, [pc, #72]	@ (8007ce4 <save_current_position+0x164>)
 8007c9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		saved_position_count++;
 8007ca0:	4b09      	ldr	r3, [pc, #36]	@ (8007cc8 <save_current_position+0x148>)
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	4b07      	ldr	r3, [pc, #28]	@ (8007cc8 <save_current_position+0x148>)
 8007caa:	701a      	strb	r2, [r3, #0]

		if (saved_position_count >= JOY_MODE_MAX_POSITIONS) {
 8007cac:	4b06      	ldr	r3, [pc, #24]	@ (8007cc8 <save_current_position+0x148>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b09      	cmp	r3, #9
 8007cb2:	d905      	bls.n	8007cc0 <save_current_position+0x140>
			joy_mode_state = JOY_MODE_POSITION_SAVED;
 8007cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce8 <save_current_position+0x168>)
 8007cb6:	2203      	movs	r2, #3
 8007cb8:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 8007cba:	4b0c      	ldr	r3, [pc, #48]	@ (8007cec <save_current_position+0x16c>)
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	601a      	str	r2, [r3, #0]
		}
	}
}
 8007cc0:	3720      	adds	r7, #32
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20000858 	.word	0x20000858
 8007ccc:	20000980 	.word	0x20000980
 8007cd0:	200009dc 	.word	0x200009dc
 8007cd4:	20000808 	.word	0x20000808
 8007cd8:	3dcccccd 	.word	0x3dcccccd
 8007cdc:	40240000 	.word	0x40240000
 8007ce0:	20000748 	.word	0x20000748
 8007ce4:	20001584 	.word	0x20001584
 8007ce8:	20000804 	.word	0x20000804
 8007cec:	2000085c 	.word	0x2000085c

08007cf0 <start_position_playback>:

void start_position_playback(void) {
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0

	if (saved_position_count > 0) {
 8007cf6:	4b19      	ldr	r3, [pc, #100]	@ (8007d5c <start_position_playback+0x6c>)
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d02a      	beq.n	8007d54 <start_position_playback+0x64>
		playback_position_index = 0;
 8007cfe:	4b18      	ldr	r3, [pc, #96]	@ (8007d60 <start_position_playback+0x70>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	701a      	strb	r2, [r3, #0]
		joy_mode_playback_timer = 0;
 8007d04:	4b17      	ldr	r3, [pc, #92]	@ (8007d64 <start_position_playback+0x74>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	601a      	str	r2, [r3, #0]
		joy_mode_state = JOY_MODE_PLAYBACK;
 8007d0a:	4b17      	ldr	r3, [pc, #92]	@ (8007d68 <start_position_playback+0x78>)
 8007d0c:	2204      	movs	r2, #4
 8007d0e:	701a      	strb	r2, [r3, #0]
		// Keep pilot light ON during playback (don't turn it off)
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8007d10:	2201      	movs	r2, #1
 8007d12:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007d16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007d1a:	f005 fbab 	bl	800d474 <HAL_GPIO_WritePin>
		joy_mode_pilot_state = true;
 8007d1e:	4b13      	ldr	r3, [pc, #76]	@ (8007d6c <start_position_playback+0x7c>)
 8007d20:	2201      	movs	r2, #1
 8007d22:	701a      	strb	r2, [r3, #0]

		// Start first trajectory
		float target_pris = saved_positions[0].prismatic_pos;
 8007d24:	4b12      	ldr	r3, [pc, #72]	@ (8007d70 <start_position_playback+0x80>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	60fb      	str	r3, [r7, #12]
		float target_rev_rad = saved_positions[0].revolute_pos;
 8007d2a:	4b11      	ldr	r3, [pc, #68]	@ (8007d70 <start_position_playback+0x80>)
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	60bb      	str	r3, [r7, #8]
		float target_rev_deg = target_rev_rad * 180.0f / PI;
 8007d30:	edd7 7a02 	vldr	s15, [r7, #8]
 8007d34:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007d74 <start_position_playback+0x84>
 8007d38:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007d3c:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8007d78 <start_position_playback+0x88>
 8007d40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007d44:	edc7 7a01 	vstr	s15, [r7, #4]

		start_combined_trajectory(target_pris, target_rev_deg);
 8007d48:	edd7 0a01 	vldr	s1, [r7, #4]
 8007d4c:	ed97 0a03 	vldr	s0, [r7, #12]
 8007d50:	f7fe fb94 	bl	800647c <start_combined_trajectory>

	}
}
 8007d54:	bf00      	nop
 8007d56:	3710      	adds	r7, #16
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20000858 	.word	0x20000858
 8007d60:	20000859 	.word	0x20000859
 8007d64:	20000864 	.word	0x20000864
 8007d68:	20000804 	.word	0x20000804
 8007d6c:	20000860 	.word	0x20000860
 8007d70:	20000808 	.word	0x20000808
 8007d74:	43340000 	.word	0x43340000
 8007d78:	40490fdb 	.word	0x40490fdb

08007d7c <reset_joy_mode_data>:

void reset_joy_mode_data(void) {
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
	// Reset saved position count
	saved_position_count = 0;
 8007d82:	4b19      	ldr	r3, [pc, #100]	@ (8007de8 <reset_joy_mode_data+0x6c>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	701a      	strb	r2, [r3, #0]

	// Reset playback index
	playback_position_index = 0;
 8007d88:	4b18      	ldr	r3, [pc, #96]	@ (8007dec <reset_joy_mode_data+0x70>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	701a      	strb	r2, [r3, #0]

	// Clear all saved positions
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 8007d8e:	2300      	movs	r3, #0
 8007d90:	607b      	str	r3, [r7, #4]
 8007d92:	e011      	b.n	8007db8 <reset_joy_mode_data+0x3c>
		saved_positions[i].prismatic_pos = 0.0f;
 8007d94:	4a16      	ldr	r2, [pc, #88]	@ (8007df0 <reset_joy_mode_data+0x74>)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	00db      	lsls	r3, r3, #3
 8007d9a:	4413      	add	r3, r2
 8007d9c:	f04f 0200 	mov.w	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]
		saved_positions[i].revolute_pos = 0.0f;
 8007da2:	4a13      	ldr	r2, [pc, #76]	@ (8007df0 <reset_joy_mode_data+0x74>)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	00db      	lsls	r3, r3, #3
 8007da8:	4413      	add	r3, r2
 8007daa:	3304      	adds	r3, #4
 8007dac:	f04f 0200 	mov.w	r2, #0
 8007db0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	3301      	adds	r3, #1
 8007db6:	607b      	str	r3, [r7, #4]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b09      	cmp	r3, #9
 8007dbc:	ddea      	ble.n	8007d94 <reset_joy_mode_data+0x18>
	}

	// Reset pilot light timers
	joy_mode_pilot_timer = 0;
 8007dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8007df4 <reset_joy_mode_data+0x78>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	601a      	str	r2, [r3, #0]
	joy_mode_pilot_state = false;
 8007dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007df8 <reset_joy_mode_data+0x7c>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	701a      	strb	r2, [r3, #0]

	// Reset playback timer
	joy_mode_playback_timer = 0;
 8007dca:	4b0c      	ldr	r3, [pc, #48]	@ (8007dfc <reset_joy_mode_data+0x80>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	601a      	str	r2, [r3, #0]

	// Reset button states
	joy_mode_b2_pressed = false;
 8007dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8007e00 <reset_joy_mode_data+0x84>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	701a      	strb	r2, [r3, #0]
	joy_mode_b2_last_state = false;
 8007dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8007e04 <reset_joy_mode_data+0x88>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	701a      	strb	r2, [r3, #0]
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr
 8007de8:	20000858 	.word	0x20000858
 8007dec:	20000859 	.word	0x20000859
 8007df0:	20000808 	.word	0x20000808
 8007df4:	2000085c 	.word	0x2000085c
 8007df8:	20000860 	.word	0x20000860
 8007dfc:	20000864 	.word	0x20000864
 8007e00:	20000868 	.word	0x20000868
 8007e04:	20000869 	.word	0x20000869

08007e08 <update_joy_mode_velocity_control>:

void update_joy_mode_velocity_control(void) {
 8007e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e0c:	ed2d 8b02 	vpush	{d8}
 8007e10:	b08d      	sub	sp, #52	@ 0x34
 8007e12:	af00      	add	r7, sp, #0
	// Read current photo sensor states directly
	bool up_photo_detected = HAL_GPIO_ReadPin(upperphoto_GPIO_Port,
 8007e14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007e18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007e1c:	f005 fb12 	bl	800d444 <HAL_GPIO_ReadPin>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bf14      	ite	ne
 8007e26:	2301      	movne	r3, #1
 8007e28:	2300      	moveq	r3, #0
 8007e2a:	76fb      	strb	r3, [r7, #27]
	upperphoto_Pin);
	bool low_photo_detected = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8007e2c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007e30:	48a1      	ldr	r0, [pc, #644]	@ (80080b8 <update_joy_mode_velocity_control+0x2b0>)
 8007e32:	f005 fb07 	bl	800d444 <HAL_GPIO_ReadPin>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	bf14      	ite	ne
 8007e3c:	2301      	movne	r3, #1
 8007e3e:	2300      	moveq	r3, #0
 8007e40:	76bb      	strb	r3, [r7, #26]
	LOWER_PHOTO_Pin);

	// Prismatic axis control based on joystick_x
	float pris_command_vel = 0.0f;
 8007e42:	f04f 0300 	mov.w	r3, #0
 8007e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
	bool pris_moving = false;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	static bool pris_was_moving = false; // Track previous moving state

	// Process prismatic axis joystick control (FIXED LOGIC)
	if (up_photo_detected && joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 8007e4e:	7efb      	ldrb	r3, [r7, #27]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00d      	beq.n	8007e70 <update_joy_mode_velocity_control+0x68>
 8007e54:	4b99      	ldr	r3, [pc, #612]	@ (80080bc <update_joy_mode_velocity_control+0x2b4>)
 8007e56:	edd3 7a00 	vldr	s15, [r3]
 8007e5a:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 80080c0 <update_joy_mode_velocity_control+0x2b8>
 8007e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e66:	dd03      	ble.n	8007e70 <update_joy_mode_velocity_control+0x68>
		// At up photo and trying to go up (negative direction) - block movement
		pris_command_vel = 0.0f;
 8007e68:	f04f 0300 	mov.w	r3, #0
 8007e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e6e:	e048      	b.n	8007f02 <update_joy_mode_velocity_control+0xfa>
	} else if (low_photo_detected && joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007e70:	7ebb      	ldrb	r3, [r7, #26]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00d      	beq.n	8007e92 <update_joy_mode_velocity_control+0x8a>
 8007e76:	4b91      	ldr	r3, [pc, #580]	@ (80080bc <update_joy_mode_velocity_control+0x2b4>)
 8007e78:	edd3 7a00 	vldr	s15, [r3]
 8007e7c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80080c4 <update_joy_mode_velocity_control+0x2bc>
 8007e80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e88:	d503      	bpl.n	8007e92 <update_joy_mode_velocity_control+0x8a>
		// At low photo and trying to go down (positive direction) - block movement
		pris_command_vel = 0.0f;
 8007e8a:	f04f 0300 	mov.w	r3, #0
 8007e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e90:	e037      	b.n	8007f02 <update_joy_mode_velocity_control+0xfa>
	} else if (joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007e92:	4b8a      	ldr	r3, [pc, #552]	@ (80080bc <update_joy_mode_velocity_control+0x2b4>)
 8007e94:	edd3 7a00 	vldr	s15, [r3]
 8007e98:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80080c4 <update_joy_mode_velocity_control+0x2bc>
 8007e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea4:	d50e      	bpl.n	8007ec4 <update_joy_mode_velocity_control+0xbc>
		// Moving down (positive direction)
		pris_command_vel = JOY_MODE_CONSTANT_VELOCITY_PRIS;
 8007ea6:	4b88      	ldr	r3, [pc, #544]	@ (80080c8 <update_joy_mode_velocity_control+0x2c0>)
 8007ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!low_photo_detected) {
 8007eb0:	7ebb      	ldrb	r3, [r7, #26]
 8007eb2:	f083 0301 	eor.w	r3, r3, #1
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d022      	beq.n	8007f02 <update_joy_mode_velocity_control+0xfa>
			up_photo = false;
 8007ebc:	4b83      	ldr	r3, [pc, #524]	@ (80080cc <update_joy_mode_velocity_control+0x2c4>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	701a      	strb	r2, [r3, #0]
 8007ec2:	e01e      	b.n	8007f02 <update_joy_mode_velocity_control+0xfa>
		}
	} else if (joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 8007ec4:	4b7d      	ldr	r3, [pc, #500]	@ (80080bc <update_joy_mode_velocity_control+0x2b4>)
 8007ec6:	edd3 7a00 	vldr	s15, [r3]
 8007eca:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 80080c0 <update_joy_mode_velocity_control+0x2b8>
 8007ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ed6:	dd0e      	ble.n	8007ef6 <update_joy_mode_velocity_control+0xee>
		// Moving up (negative direction)
		pris_command_vel = -JOY_MODE_CONSTANT_VELOCITY_PRIS;
 8007ed8:	4b7d      	ldr	r3, [pc, #500]	@ (80080d0 <update_joy_mode_velocity_control+0x2c8>)
 8007eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 8007edc:	2301      	movs	r3, #1
 8007ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!up_photo_detected) {
 8007ee2:	7efb      	ldrb	r3, [r7, #27]
 8007ee4:	f083 0301 	eor.w	r3, r3, #1
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d009      	beq.n	8007f02 <update_joy_mode_velocity_control+0xfa>
			low_photo = false;
 8007eee:	4b79      	ldr	r3, [pc, #484]	@ (80080d4 <update_joy_mode_velocity_control+0x2cc>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	701a      	strb	r2, [r3, #0]
 8007ef4:	e005      	b.n	8007f02 <update_joy_mode_velocity_control+0xfa>
		}
	} else {
		// Joystick in deadband - hold position
		pris_command_vel = 0.0f;
 8007ef6:	f04f 0300 	mov.w	r3, #0
 8007efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = false;
 8007efc:	2300      	movs	r3, #0
 8007efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	}

	// Revolute axis control based on joystick_y
	float rev_command_vel = 0.0f;
 8007f02:	f04f 0300 	mov.w	r3, #0
 8007f06:	627b      	str	r3, [r7, #36]	@ 0x24
	bool rev_moving = false;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	// Get current revolute position in degrees for limit checking
	float revolute_deg = UnitConverter_angle(&converter_system,
 8007f0e:	4b72      	ldr	r3, [pc, #456]	@ (80080d8 <update_joy_mode_velocity_control+0x2d0>)
 8007f10:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007f14:	220e      	movs	r2, #14
 8007f16:	210f      	movs	r1, #15
 8007f18:	eeb0 0a67 	vmov.f32	s0, s15
 8007f1c:	486f      	ldr	r0, [pc, #444]	@ (80080dc <update_joy_mode_velocity_control+0x2d4>)
 8007f1e:	f7fc fe53 	bl	8004bc8 <UnitConverter_angle>
 8007f22:	ed87 0a05 	vstr	s0, [r7, #20]
			revolute_encoder.rads, UNIT_RADIAN, UNIT_DEGREE);

	// Process revolute axis joystick control with limits
	if ((revolute_deg > 175.0f && joystick_y > JOY_MODE_VELOCITY_THRESHOLD)
 8007f26:	edd7 7a05 	vldr	s15, [r7, #20]
 8007f2a:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80080e0 <update_joy_mode_velocity_control+0x2d8>
 8007f2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f36:	dd09      	ble.n	8007f4c <update_joy_mode_velocity_control+0x144>
 8007f38:	4b6a      	ldr	r3, [pc, #424]	@ (80080e4 <update_joy_mode_velocity_control+0x2dc>)
 8007f3a:	edd3 7a00 	vldr	s15, [r3]
 8007f3e:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 80080c0 <update_joy_mode_velocity_control+0x2b8>
 8007f42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f4a:	dc12      	bgt.n	8007f72 <update_joy_mode_velocity_control+0x16a>
			|| (revolute_deg < -175.0f
 8007f4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007f50:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80080e8 <update_joy_mode_velocity_control+0x2e0>
 8007f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f5c:	d510      	bpl.n	8007f80 <update_joy_mode_velocity_control+0x178>
					&& joystick_y < -JOY_MODE_VELOCITY_THRESHOLD)) {
 8007f5e:	4b61      	ldr	r3, [pc, #388]	@ (80080e4 <update_joy_mode_velocity_control+0x2dc>)
 8007f60:	edd3 7a00 	vldr	s15, [r3]
 8007f64:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 80080c4 <update_joy_mode_velocity_control+0x2bc>
 8007f68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f70:	d506      	bpl.n	8007f80 <update_joy_mode_velocity_control+0x178>
		// At revolute limits - block movement
		rev_command_vel = 0.0f;
 8007f72:	f04f 0300 	mov.w	r3, #0
 8007f76:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f7e:	e025      	b.n	8007fcc <update_joy_mode_velocity_control+0x1c4>
	} else if (joystick_y > JOY_MODE_VELOCITY_THRESHOLD) {
 8007f80:	4b58      	ldr	r3, [pc, #352]	@ (80080e4 <update_joy_mode_velocity_control+0x2dc>)
 8007f82:	edd3 7a00 	vldr	s15, [r3]
 8007f86:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80080c0 <update_joy_mode_velocity_control+0x2b8>
 8007f8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f92:	dd05      	ble.n	8007fa0 <update_joy_mode_velocity_control+0x198>
		rev_command_vel = JOY_MODE_CONSTANT_VELOCITY_REV;
 8007f94:	4b55      	ldr	r3, [pc, #340]	@ (80080ec <update_joy_mode_velocity_control+0x2e4>)
 8007f96:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007f9e:	e015      	b.n	8007fcc <update_joy_mode_velocity_control+0x1c4>
	} else if (joystick_y < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007fa0:	4b50      	ldr	r3, [pc, #320]	@ (80080e4 <update_joy_mode_velocity_control+0x2dc>)
 8007fa2:	edd3 7a00 	vldr	s15, [r3]
 8007fa6:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80080c4 <update_joy_mode_velocity_control+0x2bc>
 8007faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fb2:	d505      	bpl.n	8007fc0 <update_joy_mode_velocity_control+0x1b8>
		rev_command_vel = -JOY_MODE_CONSTANT_VELOCITY_REV;
 8007fb4:	4b4e      	ldr	r3, [pc, #312]	@ (80080f0 <update_joy_mode_velocity_control+0x2e8>)
 8007fb6:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007fbe:	e005      	b.n	8007fcc <update_joy_mode_velocity_control+0x1c4>
	} else {
		// Joystick in deadband - hold position
		rev_command_vel = 0.0f;
 8007fc0:	f04f 0300 	mov.w	r3, #0
 8007fc4:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	}

	/* PRISMATIC AXIS CONTROL - Keep existing PID-based control */
	// Detect transition from moving to stopped
	if (pris_was_moving && !pris_moving) {
 8007fcc:	4b49      	ldr	r3, [pc, #292]	@ (80080f4 <update_joy_mode_velocity_control+0x2ec>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d00a      	beq.n	8007fea <update_joy_mode_velocity_control+0x1e2>
 8007fd4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007fd8:	f083 0301 	eor.w	r3, r3, #1
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <update_joy_mode_velocity_control+0x1e2>
		// Just stopped moving - capture current position as target
		prismatic_axis.position = prismatic_encoder.mm;
 8007fe2:	4b45      	ldr	r3, [pc, #276]	@ (80080f8 <update_joy_mode_velocity_control+0x2f0>)
 8007fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fe6:	4a45      	ldr	r2, [pc, #276]	@ (80080fc <update_joy_mode_velocity_control+0x2f4>)
 8007fe8:	6013      	str	r3, [r2, #0]
	}

	if (pris_moving) {
 8007fea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	f000 8092 	beq.w	8008118 <update_joy_mode_velocity_control+0x310>
		// Moving - use velocity control
		prismatic_axis.vel_error = pris_command_vel
				- prismatic_axis.kalman_velocity;
 8007ff4:	4b41      	ldr	r3, [pc, #260]	@ (80080fc <update_joy_mode_velocity_control+0x2f4>)
 8007ff6:	edd3 7a07 	vldr	s15, [r3, #28]
 8007ffa:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8007ffe:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = pris_command_vel
 8008002:	4b3e      	ldr	r3, [pc, #248]	@ (80080fc <update_joy_mode_velocity_control+0x2f4>)
 8008004:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8008008:	4b3c      	ldr	r3, [pc, #240]	@ (80080fc <update_joy_mode_velocity_control+0x2f4>)
 800800a:	edd3 7a06 	vldr	s15, [r3, #24]
 800800e:	eeb0 0a67 	vmov.f32	s0, s15
 8008012:	483b      	ldr	r0, [pc, #236]	@ (8008100 <update_joy_mode_velocity_control+0x2f8>)
 8008014:	f7f9 f900 	bl	8001218 <PID_CONTROLLER_Compute>
 8008018:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 800801c:	4b39      	ldr	r3, [pc, #228]	@ (8008104 <update_joy_mode_velocity_control+0x2fc>)
 800801e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8008022:	4610      	mov	r0, r2
 8008024:	4619      	mov	r1, r3
 8008026:	f7f8 fd4d 	bl	8000ac4 <__aeabi_d2iz>
 800802a:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 800802c:	4b35      	ldr	r3, [pc, #212]	@ (8008104 <update_joy_mode_velocity_control+0x2fc>)
 800802e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008032:	60ba      	str	r2, [r7, #8]
 8008034:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8008038:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(
 800803a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800803e:	f7f8 fd41 	bl	8000ac4 <__aeabi_d2iz>
 8008042:	4603      	mov	r3, r0
 8008044:	4619      	mov	r1, r3
 8008046:	4620      	mov	r0, r4
 8008048:	eeb0 0a48 	vmov.f32	s0, s16
 800804c:	f7f9 f882 	bl	8001154 <PWM_Satuation>
 8008050:	ee07 0a90 	vmov	s15, r0
 8008054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008058:	4b28      	ldr	r3, [pc, #160]	@ (80080fc <update_joy_mode_velocity_control+0x2f4>)
 800805a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward for moving
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 800805e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8008062:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8008108 <update_joy_mode_velocity_control+0x300>
 8008066:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800806a:	eeb0 0a47 	vmov.f32	s0, s14
 800806e:	4827      	ldr	r0, [pc, #156]	@ (800810c <update_joy_mode_velocity_control+0x304>)
 8008070:	f7f9 fbee 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8008074:	eef0 7a40 	vmov.f32	s15, s0
 8008078:	4b20      	ldr	r3, [pc, #128]	@ (80080fc <update_joy_mode_velocity_control+0x2f4>)
 800807a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				pris_command_vel / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 800807e:	4b16      	ldr	r3, [pc, #88]	@ (80080d8 <update_joy_mode_velocity_control+0x2d0>)
 8008080:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8008084:	4b1c      	ldr	r3, [pc, #112]	@ (80080f8 <update_joy_mode_velocity_control+0x2f0>)
 8008086:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 800808a:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8008108 <update_joy_mode_velocity_control+0x300>
 800808e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008092:	eeb0 1a66 	vmov.f32	s2, s13
 8008096:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8008110 <update_joy_mode_velocity_control+0x308>
 800809a:	eeb0 0a47 	vmov.f32	s0, s14
 800809e:	481d      	ldr	r0, [pc, #116]	@ (8008114 <update_joy_mode_velocity_control+0x30c>)
 80080a0:	f7f9 fc7e 	bl	80019a0 <PRISMATIC_MOTOR_DFD_Compute>
 80080a4:	eef0 7a40 	vmov.f32	s15, s0
 80080a8:	4b14      	ldr	r3, [pc, #80]	@ (80080fc <update_joy_mode_velocity_control+0x2f4>)
 80080aa:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		// Continuously update target position while moving
		prismatic_axis.position = prismatic_encoder.mm;
 80080ae:	4b12      	ldr	r3, [pc, #72]	@ (80080f8 <update_joy_mode_velocity_control+0x2f0>)
 80080b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080b2:	4a12      	ldr	r2, [pc, #72]	@ (80080fc <update_joy_mode_velocity_control+0x2f4>)
 80080b4:	6013      	str	r3, [r2, #0]
 80080b6:	e0a2      	b.n	80081fe <update_joy_mode_velocity_control+0x3f6>
 80080b8:	48000400 	.word	0x48000400
 80080bc:	20001e50 	.word	0x20001e50
 80080c0:	42200000 	.word	0x42200000
 80080c4:	c2200000 	.word	0xc2200000
 80080c8:	43160000 	.word	0x43160000
 80080cc:	200007e8 	.word	0x200007e8
 80080d0:	c3160000 	.word	0xc3160000
 80080d4:	200007e9 	.word	0x200007e9
 80080d8:	200009dc 	.word	0x200009dc
 80080dc:	20000d74 	.word	0x20000d74
 80080e0:	432f0000 	.word	0x432f0000
 80080e4:	20001e54 	.word	0x20001e54
 80080e8:	c32f0000 	.word	0xc32f0000
 80080ec:	40400000 	.word	0x40400000
 80080f0:	c0400000 	.word	0xc0400000
 80080f4:	200008d4 	.word	0x200008d4
 80080f8:	20000980 	.word	0x20000980
 80080fc:	20000704 	.word	0x20000704
 8008100:	20000a60 	.word	0x20000a60
 8008104:	20000080 	.word	0x20000080
 8008108:	447a0000 	.word	0x447a0000
 800810c:	20000b00 	.word	0x20000b00
 8008110:	00000000 	.word	0x00000000
 8008114:	20000b04 	.word	0x20000b04
	} else {
		// Not moving - hold target position with position control
		prismatic_axis.pos_error = prismatic_axis.position
 8008118:	4bbb      	ldr	r3, [pc, #748]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 800811a:	ed93 7a00 	vldr	s14, [r3]
				- prismatic_encoder.mm;
 800811e:	4bbb      	ldr	r3, [pc, #748]	@ (800840c <update_joy_mode_velocity_control+0x604>)
 8008120:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8008124:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.pos_error = prismatic_axis.position
 8008128:	4bb7      	ldr	r3, [pc, #732]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 800812a:	edc3 7a05 	vstr	s15, [r3, #20]
		prismatic_axis.command_vel = PWM_Satuation(
 800812e:	4bb6      	ldr	r3, [pc, #728]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 8008130:	edd3 7a05 	vldr	s15, [r3, #20]
 8008134:	eeb0 0a67 	vmov.f32	s0, s15
 8008138:	48b5      	ldr	r0, [pc, #724]	@ (8008410 <update_joy_mode_velocity_control+0x608>)
 800813a:	f7f9 f86d 	bl	8001218 <PID_CONTROLLER_Compute>
 800813e:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_position_pid,
						prismatic_axis.pos_error),
				ZGX45RGG_400RPM_Constant.sd_max,
 8008142:	4bb4      	ldr	r3, [pc, #720]	@ (8008414 <update_joy_mode_velocity_control+0x60c>)
 8008144:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		prismatic_axis.command_vel = PWM_Satuation(
 8008148:	4610      	mov	r0, r2
 800814a:	4619      	mov	r1, r3
 800814c:	f7f8 fcba 	bl	8000ac4 <__aeabi_d2iz>
 8008150:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.sd_max);
 8008152:	4bb0      	ldr	r3, [pc, #704]	@ (8008414 <update_joy_mode_velocity_control+0x60c>)
 8008154:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8008158:	603a      	str	r2, [r7, #0]
 800815a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800815e:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_vel = PWM_Satuation(
 8008160:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008164:	f7f8 fcae 	bl	8000ac4 <__aeabi_d2iz>
 8008168:	4603      	mov	r3, r0
 800816a:	4619      	mov	r1, r3
 800816c:	4620      	mov	r0, r4
 800816e:	eeb0 0a48 	vmov.f32	s0, s16
 8008172:	f7f8 ffef 	bl	8001154 <PWM_Satuation>
 8008176:	ee07 0a90 	vmov	s15, r0
 800817a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800817e:	4ba2      	ldr	r3, [pc, #648]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 8008180:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

		prismatic_axis.vel_error = prismatic_axis.command_vel
 8008184:	4ba0      	ldr	r3, [pc, #640]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 8008186:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 800818a:	4b9f      	ldr	r3, [pc, #636]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 800818c:	edd3 7a07 	vldr	s15, [r3, #28]
 8008190:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8008194:	4b9c      	ldr	r3, [pc, #624]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 8008196:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 800819a:	4b9b      	ldr	r3, [pc, #620]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 800819c:	edd3 7a06 	vldr	s15, [r3, #24]
 80081a0:	eeb0 0a67 	vmov.f32	s0, s15
 80081a4:	489c      	ldr	r0, [pc, #624]	@ (8008418 <update_joy_mode_velocity_control+0x610>)
 80081a6:	f7f9 f837 	bl	8001218 <PID_CONTROLLER_Compute>
 80081aa:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 80081ae:	4b99      	ldr	r3, [pc, #612]	@ (8008414 <update_joy_mode_velocity_control+0x60c>)
 80081b0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 80081b4:	4610      	mov	r0, r2
 80081b6:	4619      	mov	r1, r3
 80081b8:	f7f8 fc84 	bl	8000ac4 <__aeabi_d2iz>
 80081bc:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80081be:	4b95      	ldr	r3, [pc, #596]	@ (8008414 <update_joy_mode_velocity_control+0x60c>)
 80081c0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80081c4:	4615      	mov	r5, r2
 80081c6:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(
 80081ca:	4628      	mov	r0, r5
 80081cc:	4631      	mov	r1, r6
 80081ce:	f7f8 fc79 	bl	8000ac4 <__aeabi_d2iz>
 80081d2:	4603      	mov	r3, r0
 80081d4:	4619      	mov	r1, r3
 80081d6:	4620      	mov	r0, r4
 80081d8:	eeb0 0a48 	vmov.f32	s0, s16
 80081dc:	f7f8 ffba 	bl	8001154 <PWM_Satuation>
 80081e0:	ee07 0a90 	vmov	s15, r0
 80081e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081e8:	4b87      	ldr	r3, [pc, #540]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 80081ea:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// No feedforward when holding position
		prismatic_axis.ffd = 0.0f;
 80081ee:	4b86      	ldr	r3, [pc, #536]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 80081f0:	f04f 0200 	mov.w	r2, #0
 80081f4:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 80081f6:	4b84      	ldr	r3, [pc, #528]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 80081f8:	f04f 0200 	mov.w	r2, #0
 80081fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	// Update previous state for next iteration
	pris_was_moving = pris_moving;
 80081fe:	4a87      	ldr	r2, [pc, #540]	@ (800841c <update_joy_mode_velocity_control+0x614>)
 8008200:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008204:	7013      	strb	r3, [r2, #0]

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8008206:	4b80      	ldr	r3, [pc, #512]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 8008208:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800820c:	4b7e      	ldr	r3, [pc, #504]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 800820e:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8008212:	4b7d      	ldr	r3, [pc, #500]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 8008214:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8008218:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800821c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008220:	4b79      	ldr	r3, [pc, #484]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 8008222:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8008226:	4b78      	ldr	r3, [pc, #480]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 8008228:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 800822c:	4b79      	ldr	r3, [pc, #484]	@ (8008414 <update_joy_mode_velocity_control+0x60c>)
 800822e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8008232:	4610      	mov	r0, r2
 8008234:	4619      	mov	r1, r3
 8008236:	f7f8 fc45 	bl	8000ac4 <__aeabi_d2iz>
 800823a:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 800823c:	4b75      	ldr	r3, [pc, #468]	@ (8008414 <update_joy_mode_velocity_control+0x60c>)
 800823e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008242:	4692      	mov	sl, r2
 8008244:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8008248:	4650      	mov	r0, sl
 800824a:	4659      	mov	r1, fp
 800824c:	f7f8 fc3a 	bl	8000ac4 <__aeabi_d2iz>
 8008250:	4603      	mov	r3, r0
 8008252:	4619      	mov	r1, r3
 8008254:	4620      	mov	r0, r4
 8008256:	eeb0 0a48 	vmov.f32	s0, s16
 800825a:	f7f8 ff7b 	bl	8001154 <PWM_Satuation>
 800825e:	ee07 0a90 	vmov	s15, r0
 8008262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008266:	4b68      	ldr	r3, [pc, #416]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 8008268:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	/* REVOLUTE AXIS CONTROL - SIMPLIFIED PURE PWM WITH FFD + DFD */
	float base_pwm = 0.0f;
 800826c:	f04f 0300 	mov.w	r3, #0
 8008270:	61fb      	str	r3, [r7, #28]

	if (rev_moving) {
 8008272:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008276:	2b00      	cmp	r3, #0
 8008278:	d02e      	beq.n	80082d8 <update_joy_mode_velocity_control+0x4d0>
		// Calculate base PWM proportional to joystick input
		// Scale joystick input (-50 to +50) to PWM range
		float joystick_normalized = joystick_y / 50.0f; // -1.0 to +1.0
 800827a:	4b69      	ldr	r3, [pc, #420]	@ (8008420 <update_joy_mode_velocity_control+0x618>)
 800827c:	ed93 7a00 	vldr	s14, [r3]
 8008280:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8008424 <update_joy_mode_velocity_control+0x61c>
 8008284:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008288:	edc7 7a04 	vstr	s15, [r7, #16]
		base_pwm = joystick_normalized
				* (ZGX45RGG_150RPM_Constant.U_max * 0.3f); // Limit to 30% max PWM for safety
 800828c:	6938      	ldr	r0, [r7, #16]
 800828e:	f7f8 f927 	bl	80004e0 <__aeabi_f2d>
 8008292:	4604      	mov	r4, r0
 8008294:	460d      	mov	r5, r1
 8008296:	4b64      	ldr	r3, [pc, #400]	@ (8008428 <update_joy_mode_velocity_control+0x620>)
 8008298:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800829c:	a358      	add	r3, pc, #352	@ (adr r3, 8008400 <update_joy_mode_velocity_control+0x5f8>)
 800829e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a2:	f7f8 f975 	bl	8000590 <__aeabi_dmul>
 80082a6:	4602      	mov	r2, r0
 80082a8:	460b      	mov	r3, r1
 80082aa:	4620      	mov	r0, r4
 80082ac:	4629      	mov	r1, r5
 80082ae:	f7f8 f96f 	bl	8000590 <__aeabi_dmul>
 80082b2:	4602      	mov	r2, r0
 80082b4:	460b      	mov	r3, r1
		base_pwm = joystick_normalized
 80082b6:	4610      	mov	r0, r2
 80082b8:	4619      	mov	r1, r3
 80082ba:	f7f8 fc4b 	bl	8000b54 <__aeabi_d2f>
 80082be:	4603      	mov	r3, r0
 80082c0:	61fb      	str	r3, [r7, #28]

		// Add velocity feedforward
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 80082c2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80082c6:	4859      	ldr	r0, [pc, #356]	@ (800842c <update_joy_mode_velocity_control+0x624>)
 80082c8:	f7f9 f944 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 80082cc:	eef0 7a40 	vmov.f32	s15, s0
 80082d0:	4b57      	ldr	r3, [pc, #348]	@ (8008430 <update_joy_mode_velocity_control+0x628>)
 80082d2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 80082d6:	e006      	b.n	80082e6 <update_joy_mode_velocity_control+0x4de>
				rev_command_vel);
	} else {
		// Joystick released - no base PWM, only compensation
		base_pwm = 0.0f;
 80082d8:	f04f 0300 	mov.w	r3, #0
 80082dc:	61fb      	str	r3, [r7, #28]
		revolute_axis.ffd = 0.0f;
 80082de:	4b54      	ldr	r3, [pc, #336]	@ (8008430 <update_joy_mode_velocity_control+0x628>)
 80082e0:	f04f 0200 	mov.w	r2, #0
 80082e4:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	// Always add gravity/disturbance compensation
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80082e6:	4b53      	ldr	r3, [pc, #332]	@ (8008434 <update_joy_mode_velocity_control+0x62c>)
 80082e8:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80082ec:	4b47      	ldr	r3, [pc, #284]	@ (800840c <update_joy_mode_velocity_control+0x604>)
 80082ee:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80082f2:	ed9f 6a51 	vldr	s12, [pc, #324]	@ 8008438 <update_joy_mode_velocity_control+0x630>
 80082f6:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80082fa:	eef0 0a66 	vmov.f32	s1, s13
 80082fe:	eeb0 0a47 	vmov.f32	s0, s14
 8008302:	484e      	ldr	r0, [pc, #312]	@ (800843c <update_joy_mode_velocity_control+0x634>)
 8008304:	f7f9 f9b9 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8008308:	eef0 7a40 	vmov.f32	s15, s0
 800830c:	4b48      	ldr	r3, [pc, #288]	@ (8008430 <update_joy_mode_velocity_control+0x628>)
 800830e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Apply filtering to feedforward terms for stability
	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8008312:	4b4b      	ldr	r3, [pc, #300]	@ (8008440 <update_joy_mode_velocity_control+0x638>)
 8008314:	edd3 7a00 	vldr	s15, [r3]
 8008318:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8008444 <update_joy_mode_velocity_control+0x63c>
 800831c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008320:	4b43      	ldr	r3, [pc, #268]	@ (8008430 <update_joy_mode_velocity_control+0x628>)
 8008322:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8008326:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008448 <update_joy_mode_velocity_control+0x640>
 800832a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800832e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008332:	4b43      	ldr	r3, [pc, #268]	@ (8008440 <update_joy_mode_velocity_control+0x638>)
 8008334:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 8008338:	4b44      	ldr	r3, [pc, #272]	@ (800844c <update_joy_mode_velocity_control+0x644>)
 800833a:	edd3 7a00 	vldr	s15, [r3]
 800833e:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8008444 <update_joy_mode_velocity_control+0x63c>
 8008342:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008346:	4b3a      	ldr	r3, [pc, #232]	@ (8008430 <update_joy_mode_velocity_control+0x628>)
 8008348:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800834c:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8008448 <update_joy_mode_velocity_control+0x640>
 8008350:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008358:	4b3c      	ldr	r3, [pc, #240]	@ (800844c <update_joy_mode_velocity_control+0x644>)
 800835a:	edc3 7a00 	vstr	s15, [r3]

	// Combine base PWM with feedforward compensation
	revolute_axis.command_pos = base_pwm
			+ 0.01f * (ffd_filtered + dfd_filtered);
 800835e:	4b38      	ldr	r3, [pc, #224]	@ (8008440 <update_joy_mode_velocity_control+0x638>)
 8008360:	ed93 7a00 	vldr	s14, [r3]
 8008364:	4b39      	ldr	r3, [pc, #228]	@ (800844c <update_joy_mode_velocity_control+0x644>)
 8008366:	edd3 7a00 	vldr	s15, [r3]
 800836a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800836e:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8008450 <update_joy_mode_velocity_control+0x648>
 8008372:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008376:	edd7 7a07 	vldr	s15, [r7, #28]
 800837a:	ee77 7a27 	vadd.f32	s15, s14, s15
	revolute_axis.command_pos = base_pwm
 800837e:	4b2c      	ldr	r3, [pc, #176]	@ (8008430 <update_joy_mode_velocity_control+0x628>)
 8008380:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Saturate final command
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8008384:	4b2a      	ldr	r3, [pc, #168]	@ (8008430 <update_joy_mode_velocity_control+0x628>)
 8008386:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 800838a:	4b27      	ldr	r3, [pc, #156]	@ (8008428 <update_joy_mode_velocity_control+0x620>)
 800838c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8008390:	4610      	mov	r0, r2
 8008392:	4619      	mov	r1, r3
 8008394:	f7f8 fb96 	bl	8000ac4 <__aeabi_d2iz>
 8008398:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 800839a:	4b23      	ldr	r3, [pc, #140]	@ (8008428 <update_joy_mode_velocity_control+0x620>)
 800839c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80083a0:	4690      	mov	r8, r2
 80083a2:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80083a6:	4640      	mov	r0, r8
 80083a8:	4649      	mov	r1, r9
 80083aa:	f7f8 fb8b 	bl	8000ac4 <__aeabi_d2iz>
 80083ae:	4603      	mov	r3, r0
 80083b0:	4619      	mov	r1, r3
 80083b2:	4620      	mov	r0, r4
 80083b4:	eeb0 0a48 	vmov.f32	s0, s16
 80083b8:	f7f8 fecc 	bl	8001154 <PWM_Satuation>
 80083bc:	ee07 0a90 	vmov	s15, r0
 80083c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083c4:	4b1a      	ldr	r3, [pc, #104]	@ (8008430 <update_joy_mode_velocity_control+0x628>)
 80083c6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply motor commands
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 80083ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008408 <update_joy_mode_velocity_control+0x600>)
 80083cc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80083d0:	eef0 0a67 	vmov.f32	s1, s15
 80083d4:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8008454 <update_joy_mode_velocity_control+0x64c>
 80083d8:	481f      	ldr	r0, [pc, #124]	@ (8008458 <update_joy_mode_velocity_control+0x650>)
 80083da:	f7f8 ffd3 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 80083de:	4b14      	ldr	r3, [pc, #80]	@ (8008430 <update_joy_mode_velocity_control+0x628>)
 80083e0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80083e4:	eef0 0a67 	vmov.f32	s1, s15
 80083e8:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8008454 <update_joy_mode_velocity_control+0x64c>
 80083ec:	481b      	ldr	r0, [pc, #108]	@ (800845c <update_joy_mode_velocity_control+0x654>)
 80083ee:	f7f8 ffc9 	bl	8001384 <MDXX_set_range>
}
 80083f2:	bf00      	nop
 80083f4:	3734      	adds	r7, #52	@ 0x34
 80083f6:	46bd      	mov	sp, r7
 80083f8:	ecbd 8b02 	vpop	{d8}
 80083fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008400:	40000000 	.word	0x40000000
 8008404:	3fd33333 	.word	0x3fd33333
 8008408:	20000704 	.word	0x20000704
 800840c:	20000980 	.word	0x20000980
 8008410:	20000a38 	.word	0x20000a38
 8008414:	20000080 	.word	0x20000080
 8008418:	20000a60 	.word	0x20000a60
 800841c:	200008d4 	.word	0x200008d4
 8008420:	20001e54 	.word	0x20001e54
 8008424:	42480000 	.word	0x42480000
 8008428:	20000000 	.word	0x20000000
 800842c:	20000b0c 	.word	0x20000b0c
 8008430:	20000748 	.word	0x20000748
 8008434:	200009dc 	.word	0x200009dc
 8008438:	447a0000 	.word	0x447a0000
 800843c:	20000b10 	.word	0x20000b10
 8008440:	200008d8 	.word	0x200008d8
 8008444:	3f4ccccd 	.word	0x3f4ccccd
 8008448:	3e4ccccd 	.word	0x3e4ccccd
 800844c:	200008dc 	.word	0x200008dc
 8008450:	3c23d70a 	.word	0x3c23d70a
 8008454:	44fa0000 	.word	0x44fa0000
 8008458:	200008e8 	.word	0x200008e8
 800845c:	20000934 	.word	0x20000934

08008460 <update_joy_mode_pilot_light>:

void update_joy_mode_pilot_light(void) {
 8008460:	b580      	push	{r7, lr}
 8008462:	af00      	add	r7, sp, #0
	if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8008464:	4b14      	ldr	r3, [pc, #80]	@ (80084b8 <update_joy_mode_pilot_light+0x58>)
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	2b03      	cmp	r3, #3
 800846a:	d122      	bne.n	80084b2 <update_joy_mode_pilot_light+0x52>
		// Toggle pilot light every 1 second when 10 positions are saved
		joy_mode_pilot_timer++;
 800846c:	4b13      	ldr	r3, [pc, #76]	@ (80084bc <update_joy_mode_pilot_light+0x5c>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3301      	adds	r3, #1
 8008472:	4a12      	ldr	r2, [pc, #72]	@ (80084bc <update_joy_mode_pilot_light+0x5c>)
 8008474:	6013      	str	r3, [r2, #0]
		if (joy_mode_pilot_timer >= JOY_MODE_PILOT_TOGGLE_PERIOD) {
 8008476:	4b11      	ldr	r3, [pc, #68]	@ (80084bc <update_joy_mode_pilot_light+0x5c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800847e:	d318      	bcc.n	80084b2 <update_joy_mode_pilot_light+0x52>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8008480:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008484:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8008488:	f005 f80c 	bl	800d4a4 <HAL_GPIO_TogglePin>
			joy_mode_pilot_state = !joy_mode_pilot_state;
 800848c:	4b0c      	ldr	r3, [pc, #48]	@ (80084c0 <update_joy_mode_pilot_light+0x60>)
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	bf14      	ite	ne
 8008496:	2301      	movne	r3, #1
 8008498:	2300      	moveq	r3, #0
 800849a:	b2db      	uxtb	r3, r3
 800849c:	f083 0301 	eor.w	r3, r3, #1
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	4b05      	ldr	r3, [pc, #20]	@ (80084c0 <update_joy_mode_pilot_light+0x60>)
 80084aa:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 80084ac:	4b03      	ldr	r3, [pc, #12]	@ (80084bc <update_joy_mode_pilot_light+0x5c>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]
		}
	}
}
 80084b2:	bf00      	nop
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	20000804 	.word	0x20000804
 80084bc:	2000085c 	.word	0x2000085c
 80084c0:	20000860 	.word	0x20000860

080084c4 <update_joy_mode>:

void update_joy_mode(void) {
 80084c4:	b590      	push	{r4, r7, lr}
 80084c6:	ed2d 8b02 	vpush	{d8}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
	if (!joy_mode_active) {
 80084ce:	4b93      	ldr	r3, [pc, #588]	@ (800871c <update_joy_mode+0x258>)
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	f083 0301 	eor.w	r3, r3, #1
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f040 81c5 	bne.w	8008868 <update_joy_mode+0x3a4>
		return;
	}

	// ALWAYS update position display values when in joy mode
	normalized_position = normalize_angle(revolute_encoder.rads);
 80084de:	4b90      	ldr	r3, [pc, #576]	@ (8008720 <update_joy_mode+0x25c>)
 80084e0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80084e4:	eeb0 0a67 	vmov.f32	s0, s15
 80084e8:	f7fd fe54 	bl	8006194 <normalize_angle>
 80084ec:	eef0 7a40 	vmov.f32	s15, s0
 80084f0:	4b8c      	ldr	r3, [pc, #560]	@ (8008724 <update_joy_mode+0x260>)
 80084f2:	edc3 7a00 	vstr	s15, [r3]
	prismatic_axis.mm = prismatic_encoder.mm;
 80084f6:	4b8c      	ldr	r3, [pc, #560]	@ (8008728 <update_joy_mode+0x264>)
 80084f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084fa:	4a8c      	ldr	r2, [pc, #560]	@ (800872c <update_joy_mode+0x268>)
 80084fc:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 80084fe:	4b89      	ldr	r3, [pc, #548]	@ (8008724 <update_joy_mode+0x260>)
 8008500:	edd3 7a00 	vldr	s15, [r3]
 8008504:	220e      	movs	r2, #14
 8008506:	210f      	movs	r1, #15
 8008508:	eeb0 0a67 	vmov.f32	s0, s15
 800850c:	4888      	ldr	r0, [pc, #544]	@ (8008730 <update_joy_mode+0x26c>)
 800850e:	f7fc fb5b 	bl	8004bc8 <UnitConverter_angle>
 8008512:	eef0 7a40 	vmov.f32	s15, s0
 8008516:	4b87      	ldr	r3, [pc, #540]	@ (8008734 <update_joy_mode+0x270>)
 8008518:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);

	switch (joy_mode_state) {
 800851c:	4b86      	ldr	r3, [pc, #536]	@ (8008738 <update_joy_mode+0x274>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	3b01      	subs	r3, #1
 8008522:	2b04      	cmp	r3, #4
 8008524:	f200 81a2 	bhi.w	800886c <update_joy_mode+0x3a8>
 8008528:	a201      	add	r2, pc, #4	@ (adr r2, 8008530 <update_joy_mode+0x6c>)
 800852a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852e:	bf00      	nop
 8008530:	08008545 	.word	0x08008545
 8008534:	0800854b 	.word	0x0800854b
 8008538:	08008551 	.word	0x08008551
 800853c:	0800855f 	.word	0x0800855f
 8008540:	08008863 	.word	0x08008863
	case JOY_MODE_INITIAL_CONTROL:
		// Initial manual joystick control - no position saving yet
		update_joy_mode_velocity_control();
 8008544:	f7ff fc60 	bl	8007e08 <update_joy_mode_velocity_control>
		break;
 8008548:	e193      	b.n	8008872 <update_joy_mode+0x3ae>

	case JOY_MODE_MANUAL_CONTROL:
		// Manual joystick control with position saving enabled
		update_joy_mode_velocity_control();
 800854a:	f7ff fc5d 	bl	8007e08 <update_joy_mode_velocity_control>
		break;
 800854e:	e190      	b.n	8008872 <update_joy_mode+0x3ae>

	case JOY_MODE_POSITION_SAVED:
		revolute_axis.position = revolute_encoder.rads;
 8008550:	4b73      	ldr	r3, [pc, #460]	@ (8008720 <update_joy_mode+0x25c>)
 8008552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008554:	4a77      	ldr	r2, [pc, #476]	@ (8008734 <update_joy_mode+0x270>)
 8008556:	6013      	str	r3, [r2, #0]
		// 10 positions saved, pilot light toggling, waiting for B2 to start playback
		update_joy_mode_pilot_light();
 8008558:	f7ff ff82 	bl	8008460 <update_joy_mode_pilot_light>
		break;
 800855c:	e189      	b.n	8008872 <update_joy_mode+0x3ae>

	case JOY_MODE_PLAYBACK:
//		revolute_axis.position = revolute_encoder.rads;
		// Playing back saved positions - PILOT LIGHT STAYS ON
		// Handle trajectory sequence states for joy mode playback
		switch (motion_sequence_state) {
 800855e:	4b77      	ldr	r3, [pc, #476]	@ (800873c <update_joy_mode+0x278>)
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	2b06      	cmp	r3, #6
 8008564:	f200 8165 	bhi.w	8008832 <update_joy_mode+0x36e>
 8008568:	a201      	add	r2, pc, #4	@ (adr r2, 8008570 <update_joy_mode+0xac>)
 800856a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856e:	bf00      	nop
 8008570:	0800858d 	.word	0x0800858d
 8008574:	08008615 	.word	0x08008615
 8008578:	08008637 	.word	0x08008637
 800857c:	08008775 	.word	0x08008775
 8008580:	08008833 	.word	0x08008833
 8008584:	0800880f 	.word	0x0800880f
 8008588:	0800882b 	.word	0x0800882b
		case MOTION_IDLE:
			// Current trajectory finished, wait before starting next

			joy_mode_playback_timer++;
 800858c:	4b6c      	ldr	r3, [pc, #432]	@ (8008740 <update_joy_mode+0x27c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	3301      	adds	r3, #1
 8008592:	4a6b      	ldr	r2, [pc, #428]	@ (8008740 <update_joy_mode+0x27c>)
 8008594:	6013      	str	r3, [r2, #0]
			if (joy_mode_playback_timer >= JOY_MODE_PLAYBACK_DELAY) {
 8008596:	4b6a      	ldr	r3, [pc, #424]	@ (8008740 <update_joy_mode+0x27c>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800859e:	f0c0 814a 	bcc.w	8008836 <update_joy_mode+0x372>
				playback_position_index++;
 80085a2:	4b68      	ldr	r3, [pc, #416]	@ (8008744 <update_joy_mode+0x280>)
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	3301      	adds	r3, #1
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	4b66      	ldr	r3, [pc, #408]	@ (8008744 <update_joy_mode+0x280>)
 80085ac:	701a      	strb	r2, [r3, #0]
				if (playback_position_index < saved_position_count) {
 80085ae:	4b65      	ldr	r3, [pc, #404]	@ (8008744 <update_joy_mode+0x280>)
 80085b0:	781a      	ldrb	r2, [r3, #0]
 80085b2:	4b65      	ldr	r3, [pc, #404]	@ (8008748 <update_joy_mode+0x284>)
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d229      	bcs.n	800860e <update_joy_mode+0x14a>
					// Start next trajectory
					float target_pris =
							saved_positions[playback_position_index].prismatic_pos;
 80085ba:	4b62      	ldr	r3, [pc, #392]	@ (8008744 <update_joy_mode+0x280>)
 80085bc:	781b      	ldrb	r3, [r3, #0]
					float target_pris =
 80085be:	4a63      	ldr	r2, [pc, #396]	@ (800874c <update_joy_mode+0x288>)
 80085c0:	00db      	lsls	r3, r3, #3
 80085c2:	4413      	add	r3, r2
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	60fb      	str	r3, [r7, #12]
					float target_rev_rad =
							saved_positions[playback_position_index].revolute_pos;
 80085c8:	4b5e      	ldr	r3, [pc, #376]	@ (8008744 <update_joy_mode+0x280>)
 80085ca:	781b      	ldrb	r3, [r3, #0]
					float target_rev_rad =
 80085cc:	4a5f      	ldr	r2, [pc, #380]	@ (800874c <update_joy_mode+0x288>)
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	4413      	add	r3, r2
 80085d2:	3304      	adds	r3, #4
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	60bb      	str	r3, [r7, #8]
					float target_rev_deg = target_rev_rad * 180.0f / PI;
 80085d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80085dc:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8008750 <update_joy_mode+0x28c>
 80085e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80085e4:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8008754 <update_joy_mode+0x290>
 80085e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80085ec:	edc7 7a01 	vstr	s15, [r7, #4]
					check[1]++;
 80085f0:	4b59      	ldr	r3, [pc, #356]	@ (8008758 <update_joy_mode+0x294>)
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	3301      	adds	r3, #1
 80085f6:	4a58      	ldr	r2, [pc, #352]	@ (8008758 <update_joy_mode+0x294>)
 80085f8:	6053      	str	r3, [r2, #4]
					start_combined_trajectory(target_pris, target_rev_deg);
 80085fa:	edd7 0a01 	vldr	s1, [r7, #4]
 80085fe:	ed97 0a03 	vldr	s0, [r7, #12]
 8008602:	f7fd ff3b 	bl	800647c <start_combined_trajectory>
					joy_mode_playback_timer = 0;
 8008606:	4b4e      	ldr	r3, [pc, #312]	@ (8008740 <update_joy_mode+0x27c>)
 8008608:	2200      	movs	r2, #0
 800860a:	601a      	str	r2, [r3, #0]

					// Optional: Add some indication that playback is complete
					// You could flash the pilot light or set a status flag here
				}
			}
			break;
 800860c:	e113      	b.n	8008836 <update_joy_mode+0x372>
					exit_joy_mode();
 800860e:	f7ff fa41 	bl	8007a94 <exit_joy_mode>
			break;
 8008612:	e110      	b.n	8008836 <update_joy_mode+0x372>

		case MOTION_PEN_UP_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 500) {
 8008614:	4b51      	ldr	r3, [pc, #324]	@ (800875c <update_joy_mode+0x298>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3301      	adds	r3, #1
 800861a:	4a50      	ldr	r2, [pc, #320]	@ (800875c <update_joy_mode+0x298>)
 800861c:	6013      	str	r3, [r2, #0]
 800861e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008622:	f0c0 810a 	bcc.w	800883a <update_joy_mode+0x376>
				prismatic_axis.trajectory_active = true;
 8008626:	4b41      	ldr	r3, [pc, #260]	@ (800872c <update_joy_mode+0x268>)
 8008628:	2201      	movs	r2, #1
 800862a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 800862e:	4b43      	ldr	r3, [pc, #268]	@ (800873c <update_joy_mode+0x278>)
 8008630:	2202      	movs	r2, #2
 8008632:	701a      	strb	r2, [r3, #0]
			}
			break;
 8008634:	e101      	b.n	800883a <update_joy_mode+0x376>

		case MOTION_PRISMATIC_ACTIVE:

			if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8008636:	4b3d      	ldr	r3, [pc, #244]	@ (800872c <update_joy_mode+0x268>)
 8008638:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800863c:	2b00      	cmp	r3, #0
 800863e:	f000 80fe 	beq.w	800883e <update_joy_mode+0x37a>
 8008642:	4b47      	ldr	r3, [pc, #284]	@ (8008760 <update_joy_mode+0x29c>)
 8008644:	7c1b      	ldrb	r3, [r3, #16]
 8008646:	f083 0301 	eor.w	r3, r3, #1
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b00      	cmp	r3, #0
 800864e:	f000 80f6 	beq.w	800883e <update_joy_mode+0x37a>
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8008652:	4b36      	ldr	r3, [pc, #216]	@ (800872c <update_joy_mode+0x268>)
 8008654:	ed93 8a03 	vldr	s16, [r3, #12]
 8008658:	4b34      	ldr	r3, [pc, #208]	@ (800872c <update_joy_mode+0x268>)
 800865a:	edd3 8a04 	vldr	s17, [r3, #16]
						prismatic_axis.initial_pos, prismatic_axis.target_pos,
						ZGX45RGG_400RPM_Constant.traject_sd_max,
 800865e:	4b41      	ldr	r3, [pc, #260]	@ (8008764 <update_joy_mode+0x2a0>)
 8008660:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8008664:	4610      	mov	r0, r2
 8008666:	4619      	mov	r1, r3
 8008668:	f7f8 fa74 	bl	8000b54 <__aeabi_d2f>
 800866c:	4604      	mov	r4, r0
						ZGX45RGG_400RPM_Constant.traject_sdd_max);
 800866e:	4b3d      	ldr	r3, [pc, #244]	@ (8008764 <update_joy_mode+0x2a0>)
 8008670:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8008674:	4610      	mov	r0, r2
 8008676:	4619      	mov	r1, r3
 8008678:	f7f8 fa6c 	bl	8000b54 <__aeabi_d2f>
 800867c:	4603      	mov	r3, r0
 800867e:	ee01 3a90 	vmov	s3, r3
 8008682:	ee01 4a10 	vmov	s2, r4
 8008686:	eef0 0a68 	vmov.f32	s1, s17
 800868a:	eeb0 0a48 	vmov.f32	s0, s16
 800868e:	4934      	ldr	r1, [pc, #208]	@ (8008760 <update_joy_mode+0x29c>)
 8008690:	4835      	ldr	r0, [pc, #212]	@ (8008768 <update_joy_mode+0x2a4>)
 8008692:	f7fb ff01 	bl	8004498 <Trapezoidal_Evaluated>

				prismatic_axis.position = prisEva.setposition;
 8008696:	4b32      	ldr	r3, [pc, #200]	@ (8008760 <update_joy_mode+0x29c>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a24      	ldr	r2, [pc, #144]	@ (800872c <update_joy_mode+0x268>)
 800869c:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = prisEva.setvelocity;
 800869e:	4b30      	ldr	r3, [pc, #192]	@ (8008760 <update_joy_mode+0x29c>)
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	4a22      	ldr	r2, [pc, #136]	@ (800872c <update_joy_mode+0x268>)
 80086a4:	6053      	str	r3, [r2, #4]

				if (prisEva.isFinised) {
 80086a6:	4b2e      	ldr	r3, [pc, #184]	@ (8008760 <update_joy_mode+0x29c>)
 80086a8:	7c1b      	ldrb	r3, [r3, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 80c7 	beq.w	800883e <update_joy_mode+0x37a>
					prismatic_axis.trajectory_active = false;
 80086b0:	4b1e      	ldr	r3, [pc, #120]	@ (800872c <update_joy_mode+0x268>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					prismatic_axis.position = prisEva.setposition;
 80086b8:	4b29      	ldr	r3, [pc, #164]	@ (8008760 <update_joy_mode+0x29c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a1b      	ldr	r2, [pc, #108]	@ (800872c <update_joy_mode+0x268>)
 80086be:	6013      	str	r3, [r2, #0]
					prismatic_axis.velocity = 0.0f;
 80086c0:	4b1a      	ldr	r3, [pc, #104]	@ (800872c <update_joy_mode+0x268>)
 80086c2:	f04f 0200 	mov.w	r2, #0
 80086c6:	605a      	str	r2, [r3, #4]

					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80086c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008734 <update_joy_mode+0x270>)
 80086ca:	ed93 8a03 	vldr	s16, [r3, #12]
 80086ce:	4b19      	ldr	r3, [pc, #100]	@ (8008734 <update_joy_mode+0x270>)
 80086d0:	edd3 8a04 	vldr	s17, [r3, #16]
							revolute_axis.target_pos,
							ZGX45RGG_150RPM_Constant.traject_qd_max,
 80086d4:	4b25      	ldr	r3, [pc, #148]	@ (800876c <update_joy_mode+0x2a8>)
 80086d6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80086da:	4610      	mov	r0, r2
 80086dc:	4619      	mov	r1, r3
 80086de:	f7f8 fa39 	bl	8000b54 <__aeabi_d2f>
 80086e2:	4604      	mov	r4, r0
							ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80086e4:	4b21      	ldr	r3, [pc, #132]	@ (800876c <update_joy_mode+0x2a8>)
 80086e6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80086ea:	4610      	mov	r0, r2
 80086ec:	4619      	mov	r1, r3
 80086ee:	f7f8 fa31 	bl	8000b54 <__aeabi_d2f>
 80086f2:	4603      	mov	r3, r0
 80086f4:	ee01 3a90 	vmov	s3, r3
 80086f8:	ee01 4a10 	vmov	s2, r4
 80086fc:	eef0 0a68 	vmov.f32	s1, s17
 8008700:	eeb0 0a48 	vmov.f32	s0, s16
 8008704:	481a      	ldr	r0, [pc, #104]	@ (8008770 <update_joy_mode+0x2ac>)
 8008706:	f7fb fe05 	bl	8004314 <Trapezoidal_Generator>

					revolute_axis.trajectory_active = true;
 800870a:	4b0a      	ldr	r3, [pc, #40]	@ (8008734 <update_joy_mode+0x270>)
 800870c:	2201      	movs	r2, #1
 800870e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8008712:	4b0a      	ldr	r3, [pc, #40]	@ (800873c <update_joy_mode+0x278>)
 8008714:	2203      	movs	r2, #3
 8008716:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8008718:	e091      	b.n	800883e <update_joy_mode+0x37a>
 800871a:	bf00      	nop
 800871c:	20000805 	.word	0x20000805
 8008720:	200009dc 	.word	0x200009dc
 8008724:	200007fc 	.word	0x200007fc
 8008728:	20000980 	.word	0x20000980
 800872c:	20000704 	.word	0x20000704
 8008730:	20000d74 	.word	0x20000d74
 8008734:	20000748 	.word	0x20000748
 8008738:	20000804 	.word	0x20000804
 800873c:	2000078c 	.word	0x2000078c
 8008740:	20000864 	.word	0x20000864
 8008744:	20000859 	.word	0x20000859
 8008748:	20000858 	.word	0x20000858
 800874c:	20000808 	.word	0x20000808
 8008750:	43340000 	.word	0x43340000
 8008754:	40490fdb 	.word	0x40490fdb
 8008758:	2000086c 	.word	0x2000086c
 800875c:	200007e0 	.word	0x200007e0
 8008760:	200007b8 	.word	0x200007b8
 8008764:	20000080 	.word	0x20000080
 8008768:	20000790 	.word	0x20000790
 800876c:	20000000 	.word	0x20000000
 8008770:	200007a4 	.word	0x200007a4

		case MOTION_REVOLUTE_ACTIVE:
			if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8008774:	4b41      	ldr	r3, [pc, #260]	@ (800887c <update_joy_mode+0x3b8>)
 8008776:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800877a:	2b00      	cmp	r3, #0
 800877c:	d061      	beq.n	8008842 <update_joy_mode+0x37e>
 800877e:	4b40      	ldr	r3, [pc, #256]	@ (8008880 <update_joy_mode+0x3bc>)
 8008780:	7c1b      	ldrb	r3, [r3, #16]
 8008782:	f083 0301 	eor.w	r3, r3, #1
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b00      	cmp	r3, #0
 800878a:	d05a      	beq.n	8008842 <update_joy_mode+0x37e>
				Trapezoidal_Evaluated(&revGen, &revEva,
 800878c:	4b3b      	ldr	r3, [pc, #236]	@ (800887c <update_joy_mode+0x3b8>)
 800878e:	ed93 8a03 	vldr	s16, [r3, #12]
 8008792:	4b3a      	ldr	r3, [pc, #232]	@ (800887c <update_joy_mode+0x3b8>)
 8008794:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.initial_pos, revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 8008798:	4b3a      	ldr	r3, [pc, #232]	@ (8008884 <update_joy_mode+0x3c0>)
 800879a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Evaluated(&revGen, &revEva,
 800879e:	4610      	mov	r0, r2
 80087a0:	4619      	mov	r1, r3
 80087a2:	f7f8 f9d7 	bl	8000b54 <__aeabi_d2f>
 80087a6:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80087a8:	4b36      	ldr	r3, [pc, #216]	@ (8008884 <update_joy_mode+0x3c0>)
 80087aa:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Evaluated(&revGen, &revEva,
 80087ae:	4610      	mov	r0, r2
 80087b0:	4619      	mov	r1, r3
 80087b2:	f7f8 f9cf 	bl	8000b54 <__aeabi_d2f>
 80087b6:	4603      	mov	r3, r0
 80087b8:	ee01 3a90 	vmov	s3, r3
 80087bc:	ee01 4a10 	vmov	s2, r4
 80087c0:	eef0 0a68 	vmov.f32	s1, s17
 80087c4:	eeb0 0a48 	vmov.f32	s0, s16
 80087c8:	492d      	ldr	r1, [pc, #180]	@ (8008880 <update_joy_mode+0x3bc>)
 80087ca:	482f      	ldr	r0, [pc, #188]	@ (8008888 <update_joy_mode+0x3c4>)
 80087cc:	f7fb fe64 	bl	8004498 <Trapezoidal_Evaluated>

				revolute_axis.position = revEva.setposition;
 80087d0:	4b2b      	ldr	r3, [pc, #172]	@ (8008880 <update_joy_mode+0x3bc>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a29      	ldr	r2, [pc, #164]	@ (800887c <update_joy_mode+0x3b8>)
 80087d6:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = revEva.setvelocity;
 80087d8:	4b29      	ldr	r3, [pc, #164]	@ (8008880 <update_joy_mode+0x3bc>)
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	4a27      	ldr	r2, [pc, #156]	@ (800887c <update_joy_mode+0x3b8>)
 80087de:	6053      	str	r3, [r2, #4]

				if (revEva.isFinised) {
 80087e0:	4b27      	ldr	r3, [pc, #156]	@ (8008880 <update_joy_mode+0x3bc>)
 80087e2:	7c1b      	ldrb	r3, [r3, #16]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d02c      	beq.n	8008842 <update_joy_mode+0x37e>
					revolute_axis.trajectory_active = false;
 80087e8:	4b24      	ldr	r3, [pc, #144]	@ (800887c <update_joy_mode+0x3b8>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					revolute_axis.position = revEva.setposition;
 80087f0:	4b23      	ldr	r3, [pc, #140]	@ (8008880 <update_joy_mode+0x3bc>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a21      	ldr	r2, [pc, #132]	@ (800887c <update_joy_mode+0x3b8>)
 80087f6:	6013      	str	r3, [r2, #0]
					revolute_axis.velocity = 0.0f;
 80087f8:	4b20      	ldr	r3, [pc, #128]	@ (800887c <update_joy_mode+0x3b8>)
 80087fa:	f04f 0200 	mov.w	r2, #0
 80087fe:	605a      	str	r2, [r3, #4]

//					PID_CONTROLLER_Reset(&revolute_position_pid);
//					PID_CONTROLLER_Reset(&revolute_velocity_pid);

					motion_delay_timer = 0;
 8008800:	4b22      	ldr	r3, [pc, #136]	@ (800888c <update_joy_mode+0x3c8>)
 8008802:	2200      	movs	r2, #0
 8008804:	601a      	str	r2, [r3, #0]
					motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8008806:	4b22      	ldr	r3, [pc, #136]	@ (8008890 <update_joy_mode+0x3cc>)
 8008808:	2205      	movs	r2, #5
 800880a:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 800880c:	e019      	b.n	8008842 <update_joy_mode+0x37e>

		case MOTION_PEN_DOWN_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 500) {
 800880e:	4b1f      	ldr	r3, [pc, #124]	@ (800888c <update_joy_mode+0x3c8>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3301      	adds	r3, #1
 8008814:	4a1d      	ldr	r2, [pc, #116]	@ (800888c <update_joy_mode+0x3c8>)
 8008816:	6013      	str	r3, [r2, #0]
 8008818:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800881c:	d313      	bcc.n	8008846 <update_joy_mode+0x382>
				plotter_pen_down();
 800881e:	f001 fad9 	bl	8009dd4 <plotter_pen_down>
				motion_sequence_state = MOTION_COMPLETE;
 8008822:	4b1b      	ldr	r3, [pc, #108]	@ (8008890 <update_joy_mode+0x3cc>)
 8008824:	2206      	movs	r2, #6
 8008826:	701a      	strb	r2, [r3, #0]
			}
			break;
 8008828:	e00d      	b.n	8008846 <update_joy_mode+0x382>

		case MOTION_COMPLETE:
			motion_sequence_state = MOTION_IDLE;
 800882a:	4b19      	ldr	r3, [pc, #100]	@ (8008890 <update_joy_mode+0x3cc>)
 800882c:	2200      	movs	r2, #0
 800882e:	701a      	strb	r2, [r3, #0]
			break;
 8008830:	e00a      	b.n	8008848 <update_joy_mode+0x384>

		default:
			break;
 8008832:	bf00      	nop
 8008834:	e008      	b.n	8008848 <update_joy_mode+0x384>
			break;
 8008836:	bf00      	nop
 8008838:	e006      	b.n	8008848 <update_joy_mode+0x384>
			break;
 800883a:	bf00      	nop
 800883c:	e004      	b.n	8008848 <update_joy_mode+0x384>
			break;
 800883e:	bf00      	nop
 8008840:	e002      	b.n	8008848 <update_joy_mode+0x384>
			break;
 8008842:	bf00      	nop
 8008844:	e000      	b.n	8008848 <update_joy_mode+0x384>
			break;
 8008846:	bf00      	nop
		}

		// Update position/velocity control for trajectory playback
		if (motion_sequence_state != MOTION_IDLE) {
 8008848:	4b11      	ldr	r3, [pc, #68]	@ (8008890 <update_joy_mode+0x3cc>)
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00f      	beq.n	8008870 <update_joy_mode+0x3ac>
			// Run position control if not in manual control
			if (position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8008850:	4b10      	ldr	r3, [pc, #64]	@ (8008894 <update_joy_mode+0x3d0>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2b09      	cmp	r3, #9
 8008856:	d901      	bls.n	800885c <update_joy_mode+0x398>
				update_position_control();
 8008858:	f7fe f88e 	bl	8006978 <update_position_control>
			}
			// Always run velocity control during trajectory
			update_velocity_control();
 800885c:	f7fe f94c 	bl	8006af8 <update_velocity_control>
		}
		break;
 8008860:	e006      	b.n	8008870 <update_joy_mode+0x3ac>

	case JOY_MODE_COMPLETE:
		exit_joy_mode();
 8008862:	f7ff f917 	bl	8007a94 <exit_joy_mode>
		break;
 8008866:	e004      	b.n	8008872 <update_joy_mode+0x3ae>
		return;
 8008868:	bf00      	nop
 800886a:	e002      	b.n	8008872 <update_joy_mode+0x3ae>

	default:
		break;
 800886c:	bf00      	nop
 800886e:	e000      	b.n	8008872 <update_joy_mode+0x3ae>
		break;
 8008870:	bf00      	nop
	}
}
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	ecbd 8b02 	vpop	{d8}
 800887a:	bd90      	pop	{r4, r7, pc}
 800887c:	20000748 	.word	0x20000748
 8008880:	200007cc 	.word	0x200007cc
 8008884:	20000000 	.word	0x20000000
 8008888:	200007a4 	.word	0x200007a4
 800888c:	200007e0 	.word	0x200007e0
 8008890:	2000078c 	.word	0x2000078c
 8008894:	200007f8 	.word	0x200007f8

08008898 <handle_b2_button_polling>:

void handle_b2_button_polling(void) {
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
	// Read current B2 button state (assuming active low like other buttons)
	bool b2_current_state = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 800889e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80088a2:	4835      	ldr	r0, [pc, #212]	@ (8008978 <handle_b2_button_polling+0xe0>)
 80088a4:	f004 fdce 	bl	800d444 <HAL_GPIO_ReadPin>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bf0c      	ite	eq
 80088ae:	2301      	moveq	r3, #1
 80088b0:	2300      	movne	r3, #0
 80088b2:	71fb      	strb	r3, [r7, #7]

//	b2S[0] = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
	static uint32_t last_press_time = 0;
	static uint32_t press_counter = 0;
	const uint32_t DEBOUNCE_TIME = 200; // 200ms debounce time
 80088b4:	23c8      	movs	r3, #200	@ 0xc8
 80088b6:	603b      	str	r3, [r7, #0]

	press_counter++; // Increment every timer tick (assuming 1ms timer)
 80088b8:	4b30      	ldr	r3, [pc, #192]	@ (800897c <handle_b2_button_polling+0xe4>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	3301      	adds	r3, #1
 80088be:	4a2f      	ldr	r2, [pc, #188]	@ (800897c <handle_b2_button_polling+0xe4>)
 80088c0:	6013      	str	r3, [r2, #0]

//	 Edge detection with debouncing
	if (b2_current_state && !joy_mode_b2_last_state) {
 80088c2:	79fb      	ldrb	r3, [r7, #7]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d047      	beq.n	8008958 <handle_b2_button_polling+0xc0>
 80088c8:	4b2d      	ldr	r3, [pc, #180]	@ (8008980 <handle_b2_button_polling+0xe8>)
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	f083 0301 	eor.w	r3, r3, #1
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d040      	beq.n	8008958 <handle_b2_button_polling+0xc0>
//	 Button just pressed - check if enough time has passed since last press
		if ((press_counter - last_press_time) >= DEBOUNCE_TIME) {
 80088d6:	4b29      	ldr	r3, [pc, #164]	@ (800897c <handle_b2_button_polling+0xe4>)
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	4b2a      	ldr	r3, [pc, #168]	@ (8008984 <handle_b2_button_polling+0xec>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d838      	bhi.n	8008958 <handle_b2_button_polling+0xc0>
			// Button press is valid - trigger action
			joy_mode_b2_pressed = true;
 80088e6:	4b28      	ldr	r3, [pc, #160]	@ (8008988 <handle_b2_button_polling+0xf0>)
 80088e8:	2201      	movs	r2, #1
 80088ea:	701a      	strb	r2, [r3, #0]
			last_press_time = press_counter;
 80088ec:	4b23      	ldr	r3, [pc, #140]	@ (800897c <handle_b2_button_polling+0xe4>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a24      	ldr	r2, [pc, #144]	@ (8008984 <handle_b2_button_polling+0xec>)
 80088f2:	6013      	str	r3, [r2, #0]

//	if (b2S[0] != b2S[1] && b2S[0] == 1) {
			// Handle B2 button press logic
			if (!is_emergency_active() && !homing_active
 80088f4:	f7ff f85c 	bl	80079b0 <is_emergency_active>
 80088f8:	4603      	mov	r3, r0
 80088fa:	f083 0301 	eor.w	r3, r3, #1
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d029      	beq.n	8008958 <handle_b2_button_polling+0xc0>
 8008904:	4b21      	ldr	r3, [pc, #132]	@ (800898c <handle_b2_button_polling+0xf4>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	f083 0301 	eor.w	r3, r3, #1
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d022      	beq.n	8008958 <handle_b2_button_polling+0xc0>
					&& motion_sequence_state == MOTION_IDLE) {
 8008912:	4b1f      	ldr	r3, [pc, #124]	@ (8008990 <handle_b2_button_polling+0xf8>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d11e      	bne.n	8008958 <handle_b2_button_polling+0xc0>
				if (!joy_mode_active) {
 800891a:	4b1e      	ldr	r3, [pc, #120]	@ (8008994 <handle_b2_button_polling+0xfc>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	f083 0301 	eor.w	r3, r3, #1
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d002      	beq.n	800892e <handle_b2_button_polling+0x96>
					// Enter joy mode (starts in JOY_MODE_INITIAL_CONTROL)
					enter_joy_mode();
 8008928:	f7ff f852 	bl	80079d0 <enter_joy_mode>
 800892c:	e014      	b.n	8008958 <handle_b2_button_polling+0xc0>
				} else {
					// Joy mode is active, handle button press based on current state
					if (joy_mode_state == JOY_MODE_INITIAL_CONTROL) {
 800892e:	4b1a      	ldr	r3, [pc, #104]	@ (8008998 <handle_b2_button_polling+0x100>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d103      	bne.n	800893e <handle_b2_button_polling+0xa6>
						// First B2 press in joy mode - start position saving mode
						joy_mode_state = JOY_MODE_MANUAL_CONTROL;
 8008936:	4b18      	ldr	r3, [pc, #96]	@ (8008998 <handle_b2_button_polling+0x100>)
 8008938:	2202      	movs	r2, #2
 800893a:	701a      	strb	r2, [r3, #0]
 800893c:	e00c      	b.n	8008958 <handle_b2_button_polling+0xc0>
					} else if (joy_mode_state == JOY_MODE_MANUAL_CONTROL) {
 800893e:	4b16      	ldr	r3, [pc, #88]	@ (8008998 <handle_b2_button_polling+0x100>)
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	2b02      	cmp	r3, #2
 8008944:	d102      	bne.n	800894c <handle_b2_button_polling+0xb4>

						save_current_position();
 8008946:	f7ff f91b 	bl	8007b80 <save_current_position>
 800894a:	e005      	b.n	8008958 <handle_b2_button_polling+0xc0>

						// Save current position
					} else if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 800894c:	4b12      	ldr	r3, [pc, #72]	@ (8008998 <handle_b2_button_polling+0x100>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	2b03      	cmp	r3, #3
 8008952:	d101      	bne.n	8008958 <handle_b2_button_polling+0xc0>
						start_position_playback();
 8008954:	f7ff f9cc 	bl	8007cf0 <start_position_playback>
//	b2S[1] = b2S[0];
		// If not enough time has passed, ignore this button press
	}

// Update last state
	joy_mode_b2_last_state = b2_current_state;
 8008958:	4a09      	ldr	r2, [pc, #36]	@ (8008980 <handle_b2_button_polling+0xe8>)
 800895a:	79fb      	ldrb	r3, [r7, #7]
 800895c:	7013      	strb	r3, [r2, #0]
//
//// Reset pressed flag when button is released
	if (!b2_current_state) {
 800895e:	79fb      	ldrb	r3, [r7, #7]
 8008960:	f083 0301 	eor.w	r3, r3, #1
 8008964:	b2db      	uxtb	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d002      	beq.n	8008970 <handle_b2_button_polling+0xd8>
		joy_mode_b2_pressed = false;
 800896a:	4b07      	ldr	r3, [pc, #28]	@ (8008988 <handle_b2_button_polling+0xf0>)
 800896c:	2200      	movs	r2, #0
 800896e:	701a      	strb	r2, [r3, #0]
	}
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	48000800 	.word	0x48000800
 800897c:	200008e0 	.word	0x200008e0
 8008980:	20000869 	.word	0x20000869
 8008984:	200008e4 	.word	0x200008e4
 8008988:	20000868 	.word	0x20000868
 800898c:	200007eb 	.word	0x200007eb
 8008990:	2000078c 	.word	0x2000078c
 8008994:	20000805 	.word	0x20000805
 8008998:	20000804 	.word	0x20000804

0800899c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == prox_Pin) {
 80089a6:	88fb      	ldrh	r3, [r7, #6]
 80089a8:	2b20      	cmp	r3, #32
 80089aa:	d105      	bne.n	80089b8 <HAL_GPIO_EXTI_Callback+0x1c>
		prox_count++;
 80089ac:	4b61      	ldr	r3, [pc, #388]	@ (8008b34 <HAL_GPIO_EXTI_Callback+0x198>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3301      	adds	r3, #1
 80089b2:	4a60      	ldr	r2, [pc, #384]	@ (8008b34 <HAL_GPIO_EXTI_Callback+0x198>)
 80089b4:	6013      	str	r3, [r2, #0]
		return;
 80089b6:	e0b9      	b.n	8008b2c <HAL_GPIO_EXTI_Callback+0x190>
	}

	if (GPIO_Pin == upperphoto_Pin) {
 80089b8:	88fb      	ldrh	r3, [r7, #6]
 80089ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089be:	d103      	bne.n	80089c8 <HAL_GPIO_EXTI_Callback+0x2c>
		up_photo = true;
 80089c0:	4b5d      	ldr	r3, [pc, #372]	@ (8008b38 <HAL_GPIO_EXTI_Callback+0x19c>)
 80089c2:	2201      	movs	r2, #1
 80089c4:	701a      	strb	r2, [r3, #0]
		return;
 80089c6:	e0b1      	b.n	8008b2c <HAL_GPIO_EXTI_Callback+0x190>
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 80089c8:	88fb      	ldrh	r3, [r7, #6]
 80089ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ce:	d103      	bne.n	80089d8 <HAL_GPIO_EXTI_Callback+0x3c>
		low_photo = true;
 80089d0:	4b5a      	ldr	r3, [pc, #360]	@ (8008b3c <HAL_GPIO_EXTI_Callback+0x1a0>)
 80089d2:	2201      	movs	r2, #1
 80089d4:	701a      	strb	r2, [r3, #0]
		return;
 80089d6:	e0a9      	b.n	8008b2c <HAL_GPIO_EXTI_Callback+0x190>
	}

	if (GPIO_Pin == EMER_Pin) {
 80089d8:	88fb      	ldrh	r3, [r7, #6]
 80089da:	2b10      	cmp	r3, #16
 80089dc:	d102      	bne.n	80089e4 <HAL_GPIO_EXTI_Callback+0x48>
		trigger_hardware_emergency();
 80089de:	f7fe fe5d 	bl	800769c <trigger_hardware_emergency>
		return;
 80089e2:	e0a3      	b.n	8008b2c <HAL_GPIO_EXTI_Callback+0x190>
	}

	if (GPIO_Pin == J1_Pin) {
 80089e4:	88fb      	ldrh	r3, [r7, #6]
 80089e6:	2b80      	cmp	r3, #128	@ 0x80
 80089e8:	d14a      	bne.n	8008a80 <HAL_GPIO_EXTI_Callback+0xe4>

		uint32_t current_time = HAL_GetTick();
 80089ea:	f002 fae3 	bl	800afb4 <HAL_GetTick>
 80089ee:	60f8      	str	r0, [r7, #12]
		if ((current_time - j1_interrupt_last_time) < 200) {
 80089f0:	4b53      	ldr	r3, [pc, #332]	@ (8008b40 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	1ad3      	subs	r3, r2, r3
 80089f8:	2bc7      	cmp	r3, #199	@ 0xc7
 80089fa:	f240 8092 	bls.w	8008b22 <HAL_GPIO_EXTI_Callback+0x186>
			return; // ignore ถ้ายังไม่ครบ 200ms
		}
		j1_interrupt_last_time = current_time;
 80089fe:	4a50      	ldr	r2, [pc, #320]	@ (8008b40 <HAL_GPIO_EXTI_Callback+0x1a4>)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6013      	str	r3, [r2, #0]

		if (!is_emergency_active() && !homing_active && !joy_mode_active
 8008a04:	f7fe ffd4 	bl	80079b0 <is_emergency_active>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	f083 0301 	eor.w	r3, r3, #1
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d035      	beq.n	8008a80 <HAL_GPIO_EXTI_Callback+0xe4>
 8008a14:	4b4b      	ldr	r3, [pc, #300]	@ (8008b44 <HAL_GPIO_EXTI_Callback+0x1a8>)
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	f083 0301 	eor.w	r3, r3, #1
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d02e      	beq.n	8008a80 <HAL_GPIO_EXTI_Callback+0xe4>
 8008a22:	4b49      	ldr	r3, [pc, #292]	@ (8008b48 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	f083 0301 	eor.w	r3, r3, #1
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d027      	beq.n	8008a80 <HAL_GPIO_EXTI_Callback+0xe4>
				&& !first_startup) {
 8008a30:	4b46      	ldr	r3, [pc, #280]	@ (8008b4c <HAL_GPIO_EXTI_Callback+0x1b0>)
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	f083 0301 	eor.w	r3, r3, #1
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d020      	beq.n	8008a80 <HAL_GPIO_EXTI_Callback+0xe4>
			if (!j1_active) {
 8008a3e:	4b44      	ldr	r3, [pc, #272]	@ (8008b50 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	f083 0301 	eor.w	r3, r3, #1
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d013      	beq.n	8008a74 <HAL_GPIO_EXTI_Callback+0xd8>
				// start Again
				j1_active = true;
 8008a4c:	4b40      	ldr	r3, [pc, #256]	@ (8008b50 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8008a4e:	2201      	movs	r2, #1
 8008a50:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 8008a52:	4b40      	ldr	r3, [pc, #256]	@ (8008b54 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8008a54:	2200      	movs	r2, #0
 8008a56:	701a      	strb	r2, [r3, #0]
				j1_going_to_target = true;
 8008a58:	4b3f      	ldr	r3, [pc, #252]	@ (8008b58 <HAL_GPIO_EXTI_Callback+0x1bc>)
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	701a      	strb	r2, [r3, #0]

				// go to target
				start_combined_trajectory(J1_TARGET_PRIS, J1_TARGET_REV);
 8008a5e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8008b5c <HAL_GPIO_EXTI_Callback+0x1c0>
 8008a62:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8008b60 <HAL_GPIO_EXTI_Callback+0x1c4>
 8008a66:	eef0 0a47 	vmov.f32	s1, s14
 8008a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a6e:	f7fd fd05 	bl	800647c <start_combined_trajectory>
 8008a72:	e005      	b.n	8008a80 <HAL_GPIO_EXTI_Callback+0xe4>
			} else {
				// stop

				j1_active = false;
 8008a74:	4b36      	ldr	r3, [pc, #216]	@ (8008b50 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 8008a7a:	4b36      	ldr	r3, [pc, #216]	@ (8008b54 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
// J2 is NOT handled here anymore - it's polled in the main loop

	if (GPIO_Pin == J3_Pin) {
 8008a80:	88fb      	ldrh	r3, [r7, #6]
 8008a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a86:	d139      	bne.n	8008afc <HAL_GPIO_EXTI_Callback+0x160>
		uint32_t current_time = HAL_GetTick();
 8008a88:	f002 fa94 	bl	800afb4 <HAL_GetTick>
 8008a8c:	60b8      	str	r0, [r7, #8]

		// Reset counter if timeout exceeded
		if ((current_time - j3_last_press_time) > J3_PRESS_TIMEOUT) {
 8008a8e:	4b35      	ldr	r3, [pc, #212]	@ (8008b64 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	2296      	movs	r2, #150	@ 0x96
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d902      	bls.n	8008aa2 <HAL_GPIO_EXTI_Callback+0x106>
			j3_press_count = 0;
 8008a9c:	4b32      	ldr	r3, [pc, #200]	@ (8008b68 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	701a      	strb	r2, [r3, #0]
		}

		j3_last_press_time = current_time;
 8008aa2:	4a30      	ldr	r2, [pc, #192]	@ (8008b64 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	6013      	str	r3, [r2, #0]
		j3_press_count++;
 8008aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8008b68 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	3301      	adds	r3, #1
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8008b68 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8008ab2:	701a      	strb	r2, [r3, #0]

		if (!is_emergency_active() && !joy_mode_active
 8008ab4:	f7fe ff7c 	bl	80079b0 <is_emergency_active>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	f083 0301 	eor.w	r3, r3, #1
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d030      	beq.n	8008b26 <HAL_GPIO_EXTI_Callback+0x18a>
 8008ac4:	4b20      	ldr	r3, [pc, #128]	@ (8008b48 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	f083 0301 	eor.w	r3, r3, #1
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d029      	beq.n	8008b26 <HAL_GPIO_EXTI_Callback+0x18a>
				&& motion_sequence_state == MOTION_IDLE) {
 8008ad2:	4b26      	ldr	r3, [pc, #152]	@ (8008b6c <HAL_GPIO_EXTI_Callback+0x1d0>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d125      	bne.n	8008b26 <HAL_GPIO_EXTI_Callback+0x18a>
			switch (j3_press_count) {
 8008ada:	4b23      	ldr	r3, [pc, #140]	@ (8008b68 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d105      	bne.n	8008aee <HAL_GPIO_EXTI_Callback+0x152>
			case 1:
				// กดครั้งแรก: วาดคำ FIBO_G01
				start_word_FIBO_G01();
 8008ae2:	f000 fbdb 	bl	800929c <start_word_FIBO_G01>
				j3_press_count = 0; // Reset counter
 8008ae6:	4b20      	ldr	r3, [pc, #128]	@ (8008b68 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	701a      	strb	r2, [r3, #0]
				break;
 8008aec:	e005      	b.n	8008afa <HAL_GPIO_EXTI_Callback+0x15e>

			default:
				// Reset if pressed too many times
				stop_character_drawing();
 8008aee:	f000 fbab 	bl	8009248 <stop_character_drawing>
				j3_press_count = 0;
 8008af2:	4b1d      	ldr	r3, [pc, #116]	@ (8008b68 <HAL_GPIO_EXTI_Callback+0x1cc>)
 8008af4:	2200      	movs	r2, #0
 8008af6:	701a      	strb	r2, [r3, #0]
				break;
 8008af8:	bf00      	nop
			}
		}
		return;
 8008afa:	e014      	b.n	8008b26 <HAL_GPIO_EXTI_Callback+0x18a>

	}

// Modified J4 button handler for joy mode exit
	if (GPIO_Pin == J4_Pin) {
 8008afc:	88fb      	ldrh	r3, [r7, #6]
 8008afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b02:	d113      	bne.n	8008b2c <HAL_GPIO_EXTI_Callback+0x190>
		if (joy_mode_active) {
 8008b04:	4b10      	ldr	r3, [pc, #64]	@ (8008b48 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d002      	beq.n	8008b12 <HAL_GPIO_EXTI_Callback+0x176>
			// Exit joy mode and hold current position (don't move)
			exit_joy_mode();
 8008b0c:	f7fe ffc2 	bl	8007a94 <exit_joy_mode>
		} else if (is_emergency_active()) {
			clear_emergency_state();
		}
		return;
 8008b10:	e00b      	b.n	8008b2a <HAL_GPIO_EXTI_Callback+0x18e>
		} else if (is_emergency_active()) {
 8008b12:	f7fe ff4d 	bl	80079b0 <is_emergency_active>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d006      	beq.n	8008b2a <HAL_GPIO_EXTI_Callback+0x18e>
			clear_emergency_state();
 8008b1c:	f7fe fe00 	bl	8007720 <clear_emergency_state>
		return;
 8008b20:	e003      	b.n	8008b2a <HAL_GPIO_EXTI_Callback+0x18e>
			return; // ignore ถ้ายังไม่ครบ 200ms
 8008b22:	bf00      	nop
 8008b24:	e002      	b.n	8008b2c <HAL_GPIO_EXTI_Callback+0x190>
		return;
 8008b26:	bf00      	nop
 8008b28:	e000      	b.n	8008b2c <HAL_GPIO_EXTI_Callback+0x190>
		return;
 8008b2a:	bf00      	nop
	}
}
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	200007e4 	.word	0x200007e4
 8008b38:	200007e8 	.word	0x200007e8
 8008b3c:	200007e9 	.word	0x200007e9
 8008b40:	20000898 	.word	0x20000898
 8008b44:	200007eb 	.word	0x200007eb
 8008b48:	20000805 	.word	0x20000805
 8008b4c:	20000333 	.word	0x20000333
 8008b50:	20000895 	.word	0x20000895
 8008b54:	20000894 	.word	0x20000894
 8008b58:	20000335 	.word	0x20000335
 8008b5c:	43480000 	.word	0x43480000
 8008b60:	42b40000 	.word	0x42b40000
 8008b64:	200008a0 	.word	0x200008a0
 8008b68:	2000089c 	.word	0x2000089c
 8008b6c:	2000078c 	.word	0x2000078c

08008b70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a9f      	ldr	r2, [pc, #636]	@ (8008df8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	f040 8137 	bne.w	8008df0 <HAL_TIM_PeriodElapsedCallback+0x280>
		Modbus_Protocal_Worker();
 8008b82:	f7f9 fa65 	bl	8002050 <Modbus_Protocal_Worker>
		modbus_working();
 8008b86:	f000 f95f 	bl	8008e48 <modbus_working>

		plotter_update_sensors();
 8008b8a:	f001 f86b 	bl	8009c64 <plotter_update_sensors>
		check_emergency_button();
 8008b8e:	f7fe fce3 	bl	8007558 <check_emergency_button>

		QEI_get_diff_count(&prismatic_encoder);
 8008b92:	489a      	ldr	r0, [pc, #616]	@ (8008dfc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008b94:	f7fb f978 	bl	8003e88 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8008b98:	4898      	ldr	r0, [pc, #608]	@ (8008dfc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008b9a:	f7fb fa61 	bl	8004060 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 8008b9e:	4898      	ldr	r0, [pc, #608]	@ (8008e00 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008ba0:	f7fb f972 	bl	8003e88 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8008ba4:	4896      	ldr	r0, [pc, #600]	@ (8008e00 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008ba6:	f7fb fa5b 	bl	8004060 <QEI_compute_data>

		revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 8008baa:	4b96      	ldr	r3, [pc, #600]	@ (8008e04 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8008bac:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008bb0:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8008bb4:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8008bb8:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 8008e08 <HAL_TIM_PeriodElapsedCallback+0x298>
 8008bbc:	eddf 0a93 	vldr	s1, [pc, #588]	@ 8008e0c <HAL_TIM_PeriodElapsedCallback+0x29c>
 8008bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8008bc4:	f7f9 f92d 	bl	8001e22 <mapf>
 8008bc8:	eef0 7a40 	vmov.f32	s15, s0
 8008bcc:	4b8d      	ldr	r3, [pc, #564]	@ (8008e04 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8008bce:	edc3 7a08 	vstr	s15, [r3, #32]
				65535.0f, -12.0f, 12.0f);
		revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 8008bd2:	4b8c      	ldr	r3, [pc, #560]	@ (8008e04 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8008bd4:	edd3 7a08 	vldr	s15, [r3, #32]
 8008bd8:	4b89      	ldr	r3, [pc, #548]	@ (8008e00 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008bda:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8008bde:	eef0 0a47 	vmov.f32	s1, s14
 8008be2:	eeb0 0a67 	vmov.f32	s0, s15
 8008be6:	488a      	ldr	r0, [pc, #552]	@ (8008e10 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8008be8:	f7fc fa78 	bl	80050dc <SteadyStateKalmanFilter>
 8008bec:	eef0 7a40 	vmov.f32	s15, s0
 8008bf0:	4b84      	ldr	r3, [pc, #528]	@ (8008e04 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8008bf2:	edc3 7a07 	vstr	s15, [r3, #28]
				&revolute_kalman, revolute_axis.input_voltage,
				revolute_encoder.rads);

		if (isnan(revolute_axis.kalman_velocity)) {
 8008bf6:	4b83      	ldr	r3, [pc, #524]	@ (8008e04 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8008bf8:	edd3 7a07 	vldr	s15, [r3, #28]
 8008bfc:	eef4 7a67 	vcmp.f32	s15, s15
 8008c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c04:	d703      	bvc.n	8008c0e <HAL_TIM_PeriodElapsedCallback+0x9e>
			revolute_axis.kalman_velocity = 0.0f;
 8008c06:	4b7f      	ldr	r3, [pc, #508]	@ (8008e04 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8008c08:	f04f 0200 	mov.w	r2, #0
 8008c0c:	61da      	str	r2, [r3, #28]
		}

		prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 8008c0e:	4b81      	ldr	r3, [pc, #516]	@ (8008e14 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008c10:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008c14:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8008c18:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8008c1c:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 8008e08 <HAL_TIM_PeriodElapsedCallback+0x298>
 8008c20:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 8008e0c <HAL_TIM_PeriodElapsedCallback+0x29c>
 8008c24:	eeb0 0a67 	vmov.f32	s0, s15
 8008c28:	f7f9 f8fb 	bl	8001e22 <mapf>
 8008c2c:	eef0 7a40 	vmov.f32	s15, s0
 8008c30:	4b78      	ldr	r3, [pc, #480]	@ (8008e14 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008c32:	edc3 7a08 	vstr	s15, [r3, #32]
				-65535.0f, 65535.0f, -12.0f, 12.0f);
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008c36:	4b77      	ldr	r3, [pc, #476]	@ (8008e14 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008c38:	edd3 7a08 	vldr	s15, [r3, #32]
 8008c3c:	4b6f      	ldr	r3, [pc, #444]	@ (8008dfc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008c3e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8008c42:	eef0 0a47 	vmov.f32	s1, s14
 8008c46:	eeb0 0a67 	vmov.f32	s0, s15
 8008c4a:	4873      	ldr	r0, [pc, #460]	@ (8008e18 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8008c4c:	f7fa fb56 	bl	80032fc <MotorKalman_Estimate>
 8008c50:	eeb0 7a40 	vmov.f32	s14, s0
				prismatic_axis.input_voltage, prismatic_encoder.rads)
				* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8008c54:	4b71      	ldr	r3, [pc, #452]	@ (8008e1c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8008c56:	edd3 7a04 	vldr	s15, [r3, #16]
 8008c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c5e:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 8008e20 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 8008c62:	ee67 7a87 	vmul.f32	s15, s15, s14
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008c66:	4b6b      	ldr	r3, [pc, #428]	@ (8008e14 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008c68:	edc3 7a07 	vstr	s15, [r3, #28]

		if (isnan(prismatic_axis.kalman_velocity)) {
 8008c6c:	4b69      	ldr	r3, [pc, #420]	@ (8008e14 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008c6e:	edd3 7a07 	vldr	s15, [r3, #28]
 8008c72:	eef4 7a67 	vcmp.f32	s15, s15
 8008c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c7a:	d703      	bvc.n	8008c84 <HAL_TIM_PeriodElapsedCallback+0x114>
			prismatic_axis.kalman_velocity = 0.0f;
 8008c7c:	4b65      	ldr	r3, [pc, #404]	@ (8008e14 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008c7e:	f04f 0200 	mov.w	r2, #0
 8008c82:	61da      	str	r2, [r3, #28]
		}

		// Position control update - Allow during HOMING_REV_TO_ZERO_DEG
		if (++position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8008c84:	4b67      	ldr	r3, [pc, #412]	@ (8008e24 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	4a66      	ldr	r2, [pc, #408]	@ (8008e24 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	2b09      	cmp	r3, #9
 8008c90:	d92a      	bls.n	8008ce8 <HAL_TIM_PeriodElapsedCallback+0x178>
			position_control_tick = 0;
 8008c92:	4b64      	ldr	r3, [pc, #400]	@ (8008e24 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	601a      	str	r2, [r3, #0]

			if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG) // ← FIXED
 8008c98:	4b63      	ldr	r3, [pc, #396]	@ (8008e28 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	f083 0301 	eor.w	r3, r3, #1
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d103      	bne.n	8008cae <HAL_TIM_PeriodElapsedCallback+0x13e>
 8008ca6:	4b61      	ldr	r3, [pc, #388]	@ (8008e2c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	2b07      	cmp	r3, #7
 8008cac:	d11c      	bne.n	8008ce8 <HAL_TIM_PeriodElapsedCallback+0x178>
					&& (!joy_mode_active
 8008cae:	4b60      	ldr	r3, [pc, #384]	@ (8008e30 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	f083 0301 	eor.w	r3, r3, #1
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10b      	bne.n	8008cd4 <HAL_TIM_PeriodElapsedCallback+0x164>
							|| (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 8008cbc:	4b5d      	ldr	r3, [pc, #372]	@ (8008e34 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d011      	beq.n	8008ce8 <HAL_TIM_PeriodElapsedCallback+0x178>
									&& joy_mode_state
											!= JOY_MODE_INITIAL_CONTROL
 8008cc4:	4b5b      	ldr	r3, [pc, #364]	@ (8008e34 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
									&& joy_mode_state
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d00d      	beq.n	8008ce8 <HAL_TIM_PeriodElapsedCallback+0x178>
									&& joy_mode_state != JOY_MODE_POSITION_SAVED))
 8008ccc:	4b59      	ldr	r3, [pc, #356]	@ (8008e34 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d009      	beq.n	8008ce8 <HAL_TIM_PeriodElapsedCallback+0x178>
					&& (!is_emergency_active())) {
 8008cd4:	f7fe fe6c 	bl	80079b0 <is_emergency_active>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	f083 0301 	eor.w	r3, r3, #1
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d001      	beq.n	8008ce8 <HAL_TIM_PeriodElapsedCallback+0x178>
				update_position_control();
 8008ce4:	f7fd fe48 	bl	8006978 <update_position_control>
			}
		}

		// Velocity control update - Allow during HOMING_REV_TO_ZERO_DEG
		if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG) // ← FIXED
 8008ce8:	4b4f      	ldr	r3, [pc, #316]	@ (8008e28 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	f083 0301 	eor.w	r3, r3, #1
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d103      	bne.n	8008cfe <HAL_TIM_PeriodElapsedCallback+0x18e>
 8008cf6:	4b4d      	ldr	r3, [pc, #308]	@ (8008e2c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	2b07      	cmp	r3, #7
 8008cfc:	d11c      	bne.n	8008d38 <HAL_TIM_PeriodElapsedCallback+0x1c8>
				&& (!joy_mode_active
 8008cfe:	4b4c      	ldr	r3, [pc, #304]	@ (8008e30 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	f083 0301 	eor.w	r3, r3, #1
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10b      	bne.n	8008d24 <HAL_TIM_PeriodElapsedCallback+0x1b4>
						|| (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 8008d0c:	4b49      	ldr	r3, [pc, #292]	@ (8008e34 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d011      	beq.n	8008d38 <HAL_TIM_PeriodElapsedCallback+0x1c8>
								&& joy_mode_state != JOY_MODE_INITIAL_CONTROL
 8008d14:	4b47      	ldr	r3, [pc, #284]	@ (8008e34 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d00d      	beq.n	8008d38 <HAL_TIM_PeriodElapsedCallback+0x1c8>
								&& joy_mode_state != JOY_MODE_POSITION_SAVED))
 8008d1c:	4b45      	ldr	r3, [pc, #276]	@ (8008e34 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	2b03      	cmp	r3, #3
 8008d22:	d009      	beq.n	8008d38 <HAL_TIM_PeriodElapsedCallback+0x1c8>
				&& (!is_emergency_active())) {
 8008d24:	f7fe fe44 	bl	80079b0 <is_emergency_active>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	f083 0301 	eor.w	r3, r3, #1
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d001      	beq.n	8008d38 <HAL_TIM_PeriodElapsedCallback+0x1c8>
			update_velocity_control();
 8008d34:	f7fd fee0 	bl	8006af8 <update_velocity_control>
		}

		update_safety_system();
 8008d38:	f7fe fdb8 	bl	80078ac <update_safety_system>

		if (!is_emergency_active()) {
 8008d3c:	f7fe fe38 	bl	80079b0 <is_emergency_active>
 8008d40:	4603      	mov	r3, r0
 8008d42:	f083 0301 	eor.w	r3, r3, #1
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <HAL_TIM_PeriodElapsedCallback+0x1e0>
			check_safety_conditions();
 8008d4c:	f7fe fc38 	bl	80075c0 <check_safety_conditions>
		}

		// Control loops - joy mode handles its own control
		if (!joy_mode_active) {
 8008d50:	4b37      	ldr	r3, [pc, #220]	@ (8008e30 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	f083 0301 	eor.w	r3, r3, #1
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d002      	beq.n	8008d64 <HAL_TIM_PeriodElapsedCallback+0x1f4>
			update_control_loops();
 8008d5e:	f7fe f8e1 	bl	8006f24 <update_control_loops>
 8008d62:	e001      	b.n	8008d68 <HAL_TIM_PeriodElapsedCallback+0x1f8>
		} else {
			update_joy_mode();
 8008d64:	f7ff fbae 	bl	80084c4 <update_joy_mode>
		}

		// ALWAYS update display values
		if (!joy_mode_active) {
 8008d68:	4b31      	ldr	r3, [pc, #196]	@ (8008e30 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	f083 0301 	eor.w	r3, r3, #1
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d01e      	beq.n	8008db4 <HAL_TIM_PeriodElapsedCallback+0x244>
			// Update display values for normal operation
			normalized_position = normalize_angle(revolute_encoder.rads);
 8008d76:	4b22      	ldr	r3, [pc, #136]	@ (8008e00 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008d78:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8008d7c:	eeb0 0a67 	vmov.f32	s0, s15
 8008d80:	f7fd fa08 	bl	8006194 <normalize_angle>
 8008d84:	eef0 7a40 	vmov.f32	s15, s0
 8008d88:	4b2b      	ldr	r3, [pc, #172]	@ (8008e38 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8008d8a:	edc3 7a00 	vstr	s15, [r3]
			prismatic_axis.mm = prismatic_encoder.mm;
 8008d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8008dfc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d92:	4a20      	ldr	r2, [pc, #128]	@ (8008e14 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008d94:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 8008d96:	4b28      	ldr	r3, [pc, #160]	@ (8008e38 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8008d98:	edd3 7a00 	vldr	s15, [r3]
 8008d9c:	220e      	movs	r2, #14
 8008d9e:	210f      	movs	r1, #15
 8008da0:	eeb0 0a67 	vmov.f32	s0, s15
 8008da4:	4825      	ldr	r0, [pc, #148]	@ (8008e3c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8008da6:	f7fb ff0f 	bl	8004bc8 <UnitConverter_angle>
 8008daa:	eef0 7a40 	vmov.f32	s15, s0
 8008dae:	4b15      	ldr	r3, [pc, #84]	@ (8008e04 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8008db0:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		}
		// Note: joy mode updates its own display values in update_joy_mode()

		prismatic_axis.accel_show = FIR_process(&prismatic_lp_accel,
 8008db4:	4b11      	ldr	r3, [pc, #68]	@ (8008dfc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008db6:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008dba:	eeb0 0a67 	vmov.f32	s0, s15
 8008dbe:	4820      	ldr	r0, [pc, #128]	@ (8008e40 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8008dc0:	f7f8 ffd6 	bl	8001d70 <FIR_process>
 8008dc4:	eef0 7a40 	vmov.f32	s15, s0
 8008dc8:	4b12      	ldr	r3, [pc, #72]	@ (8008e14 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008dca:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				prismatic_encoder.mmpss);
		revolute_axis.accel_show = FIR_process(&revolute_lp_accel,
 8008dce:	4b0c      	ldr	r3, [pc, #48]	@ (8008e00 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8008dd0:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8008dd8:	481a      	ldr	r0, [pc, #104]	@ (8008e44 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8008dda:	f7f8 ffc9 	bl	8001d70 <FIR_process>
 8008dde:	eef0 7a40 	vmov.f32	s15, s0
 8008de2:	4b08      	ldr	r3, [pc, #32]	@ (8008e04 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8008de4:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				revolute_encoder.radpss);

		update_character_drawing();
 8008de8:	f000 f9ac 	bl	8009144 <update_character_drawing>
		draw_word_FIBO_G01();
 8008dec:	f000 fa7c 	bl	80092e8 <draw_word_FIBO_G01>
	}
}
 8008df0:	bf00      	nop
 8008df2:	3708      	adds	r7, #8
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}
 8008df8:	20001f40 	.word	0x20001f40
 8008dfc:	20000980 	.word	0x20000980
 8008e00:	200009dc 	.word	0x200009dc
 8008e04:	20000748 	.word	0x20000748
 8008e08:	477fff00 	.word	0x477fff00
 8008e0c:	c77fff00 	.word	0xc77fff00
 8008e10:	20001a80 	.word	0x20001a80
 8008e14:	20000704 	.word	0x20000704
 8008e18:	20001714 	.word	0x20001714
 8008e1c:	20000100 	.word	0x20000100
 8008e20:	447a0000 	.word	0x447a0000
 8008e24:	200007f8 	.word	0x200007f8
 8008e28:	200007eb 	.word	0x200007eb
 8008e2c:	200007ea 	.word	0x200007ea
 8008e30:	20000805 	.word	0x20000805
 8008e34:	20000804 	.word	0x20000804
 8008e38:	200007fc 	.word	0x200007fc
 8008e3c:	20000d74 	.word	0x20000d74
 8008e40:	20000fcc 	.word	0x20000fcc
 8008e44:	20000fd8 	.word	0x20000fd8

08008e48 <modbus_working>:

//modbus
void modbus_working(void) {
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0

	uint16_t limit_switch_status = 0;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	82fb      	strh	r3, [r7, #22]
//heartbeat
	registerFrame[Heartbeat_Protocol].U16 = 22881;
 8008e52:	4b73      	ldr	r3, [pc, #460]	@ (8009020 <modbus_working+0x1d8>)
 8008e54:	f645 1261 	movw	r2, #22881	@ 0x5961
 8008e58:	801a      	strh	r2, [r3, #0]
//servo write
	if (registerFrame[Servo_UP].U16 == 1) {
 8008e5a:	4b71      	ldr	r3, [pc, #452]	@ (8009020 <modbus_working+0x1d8>)
 8008e5c:	891b      	ldrh	r3, [r3, #8]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d102      	bne.n	8008e68 <modbus_working+0x20>
		plotter_pen_up();
 8008e62:	f000 ffa7 	bl	8009db4 <plotter_pen_up>
 8008e66:	e005      	b.n	8008e74 <modbus_working+0x2c>
	} else if (registerFrame[Servo_Down].U16 == 1) {
 8008e68:	4b6d      	ldr	r3, [pc, #436]	@ (8009020 <modbus_working+0x1d8>)
 8008e6a:	895b      	ldrh	r3, [r3, #10]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d101      	bne.n	8008e74 <modbus_working+0x2c>
		plotter_pen_down();
 8008e70:	f000 ffb0 	bl	8009dd4 <plotter_pen_down>
	}

//limitSW
	if (up_lim == 1) {
 8008e74:	4b6b      	ldr	r3, [pc, #428]	@ (8009024 <modbus_working+0x1dc>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d103      	bne.n	8008e84 <modbus_working+0x3c>
		limit_switch_status |= 0x02;  // Bit 1 = Limit UP
 8008e7c:	8afb      	ldrh	r3, [r7, #22]
 8008e7e:	f043 0302 	orr.w	r3, r3, #2
 8008e82:	82fb      	strh	r3, [r7, #22]
	}
	if (low_lim == 1) {
 8008e84:	4b68      	ldr	r3, [pc, #416]	@ (8009028 <modbus_working+0x1e0>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d103      	bne.n	8008e94 <modbus_working+0x4c>
		limit_switch_status |= 0x01;  // Bit 0 = Limit DOWN
 8008e8c:	8afb      	ldrh	r3, [r7, #22]
 8008e8e:	f043 0301 	orr.w	r3, r3, #1
 8008e92:	82fb      	strh	r3, [r7, #22]
	}
	registerFrame[LimitSwitch_Status].U16 = limit_switch_status;
 8008e94:	4a62      	ldr	r2, [pc, #392]	@ (8009020 <modbus_working+0x1d8>)
 8008e96:	8afb      	ldrh	r3, [r7, #22]
 8008e98:	80d3      	strh	r3, [r2, #6]

	if (registerFrame[BaseSystem_Status].U16 == 1) {
 8008e9a:	4b61      	ldr	r3, [pc, #388]	@ (8009020 <modbus_working+0x1d8>)
 8008e9c:	885b      	ldrh	r3, [r3, #2]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d10b      	bne.n	8008eba <modbus_working+0x72>
		exit_joy_mode();
 8008ea2:	f7fe fdf7 	bl	8007a94 <exit_joy_mode>

		registerFrame[R_Theta_Status].U16 = 1;
 8008ea6:	4b5e      	ldr	r3, [pc, #376]	@ (8009020 <modbus_working+0x1d8>)
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	841a      	strh	r2, [r3, #32]
		start_combined_trajectory(0.0, 0.0);
 8008eac:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 800902c <modbus_working+0x1e4>
 8008eb0:	ed9f 0a5e 	vldr	s0, [pc, #376]	@ 800902c <modbus_working+0x1e4>
 8008eb4:	f7fd fae2 	bl	800647c <start_combined_trajectory>
 8008eb8:	e03b      	b.n	8008f32 <modbus_working+0xea>
//		PID_CONTROLLER_Reset(&prismatic_velocity_pid);
//		PID_CONTROLLER_Reset(&revolute_position_pid);
//		PID_CONTROLLER_Reset(&revolute_velocity_pid);
//		PID_CONTROLLER_Reset(&revolute_velocity_pid);

	} else if (registerFrame[BaseSystem_Status].U16 == 2) {
 8008eba:	4b59      	ldr	r3, [pc, #356]	@ (8009020 <modbus_working+0x1d8>)
 8008ebc:	885b      	ldrh	r3, [r3, #2]
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d105      	bne.n	8008ece <modbus_working+0x86>
		registerFrame[R_Theta_Status].U16 = 2;
 8008ec2:	4b57      	ldr	r3, [pc, #348]	@ (8009020 <modbus_working+0x1d8>)
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	841a      	strh	r2, [r3, #32]
		enter_joy_mode();
 8008ec8:	f7fe fd82 	bl	80079d0 <enter_joy_mode>
 8008ecc:	e031      	b.n	8008f32 <modbus_working+0xea>
	} else if (registerFrame[BaseSystem_Status].U16 == 4) {
 8008ece:	4b54      	ldr	r3, [pc, #336]	@ (8009020 <modbus_working+0x1d8>)
 8008ed0:	885b      	ldrh	r3, [r3, #2]
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d102      	bne.n	8008edc <modbus_working+0x94>
		exit_joy_mode();
 8008ed6:	f7fe fddd 	bl	8007a94 <exit_joy_mode>
 8008eda:	e02a      	b.n	8008f32 <modbus_working+0xea>
	} else if (registerFrame[BaseSystem_Status].U16 == 8) {
 8008edc:	4b50      	ldr	r3, [pc, #320]	@ (8009020 <modbus_working+0x1d8>)
 8008ede:	885b      	ldrh	r3, [r3, #2]
 8008ee0:	2b08      	cmp	r3, #8
 8008ee2:	d126      	bne.n	8008f32 <modbus_working+0xea>
		registerFrame[R_Theta_Status].U16 = 8;
 8008ee4:	4b4e      	ldr	r3, [pc, #312]	@ (8009020 <modbus_working+0x1d8>)
 8008ee6:	2208      	movs	r2, #8
 8008ee8:	841a      	strh	r2, [r3, #32]
		exit_joy_mode();
 8008eea:	f7fe fdd3 	bl	8007a94 <exit_joy_mode>
		float goal_r_mm = (float) (int16_t) registerFrame[Goal_R].U16 / 10.0;
 8008eee:	4b4c      	ldr	r3, [pc, #304]	@ (8009020 <modbus_working+0x1d8>)
 8008ef0:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8008ef4:	b21b      	sxth	r3, r3
 8008ef6:	ee07 3a90 	vmov	s15, r3
 8008efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008efe:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8008f02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f06:	edc7 7a04 	vstr	s15, [r7, #16]
		float goal_theta_deg = (float) (int16_t) registerFrame[Goal_Theta].U16
 8008f0a:	4b45      	ldr	r3, [pc, #276]	@ (8009020 <modbus_working+0x1d8>)
 8008f0c:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8008f10:	b21b      	sxth	r3, r3
 8008f12:	ee07 3a90 	vmov	s15, r3
 8008f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008f1a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8008f1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f22:	edc7 7a03 	vstr	s15, [r7, #12]
				/ 10.0;

		start_combined_trajectory(goal_r_mm, goal_theta_deg);
 8008f26:	edd7 0a03 	vldr	s1, [r7, #12]
 8008f2a:	ed97 0a04 	vldr	s0, [r7, #16]
 8008f2e:	f7fd faa5 	bl	800647c <start_combined_trajectory>
	}

	registerFrame[R_Axis_Actual_Position].U16 = prismatic_encoder.mm * 10.0f;
 8008f32:	4b3f      	ldr	r3, [pc, #252]	@ (8009030 <modbus_working+0x1e8>)
 8008f34:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8008f38:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f44:	ee17 3a90 	vmov	r3, s15
 8008f48:	b29a      	uxth	r2, r3
 8008f4a:	4b35      	ldr	r3, [pc, #212]	@ (8009020 <modbus_working+0x1d8>)
 8008f4c:	845a      	strh	r2, [r3, #34]	@ 0x22
	registerFrame[R_Axis_Actual_Speed].U16 = prismatic_axis.kalman_velocity
 8008f4e:	4b39      	ldr	r3, [pc, #228]	@ (8009034 <modbus_working+0x1ec>)
 8008f50:	edd3 7a07 	vldr	s15, [r3, #28]
			* 10.0f;
 8008f54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008f58:	ee67 7a87 	vmul.f32	s15, s15, s14
	registerFrame[R_Axis_Actual_Speed].U16 = prismatic_axis.kalman_velocity
 8008f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f60:	ee17 3a90 	vmov	r3, s15
 8008f64:	b29a      	uxth	r2, r3
 8008f66:	4b2e      	ldr	r3, [pc, #184]	@ (8009020 <modbus_working+0x1d8>)
 8008f68:	84da      	strh	r2, [r3, #38]	@ 0x26

	float pris_accel = FIR_process(&prismatic_lp_accel,
 8008f6a:	4b31      	ldr	r3, [pc, #196]	@ (8009030 <modbus_working+0x1e8>)
 8008f6c:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008f70:	eeb0 0a67 	vmov.f32	s0, s15
 8008f74:	4830      	ldr	r0, [pc, #192]	@ (8009038 <modbus_working+0x1f0>)
 8008f76:	f7f8 fefb 	bl	8001d70 <FIR_process>
 8008f7a:	ed87 0a02 	vstr	s0, [r7, #8]
			prismatic_encoder.mmpss);
	registerFrame[R_Axis_Acceleration].U16 = pris_accel * 10.0f;
 8008f7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8008f82:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008f86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f8e:	ee17 3a90 	vmov	r3, s15
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	4b22      	ldr	r3, [pc, #136]	@ (8009020 <modbus_working+0x1d8>)
 8008f96:	855a      	strh	r2, [r3, #42]	@ 0x2a

	registerFrame[Theta_Axis_Actual_Position].U16 = revolute_axis.deg * 10.0f;
 8008f98:	4b28      	ldr	r3, [pc, #160]	@ (800903c <modbus_working+0x1f4>)
 8008f9a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8008f9e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008faa:	ee17 3a90 	vmov	r3, s15
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8009020 <modbus_working+0x1d8>)
 8008fb2:	849a      	strh	r2, [r3, #36]	@ 0x24

	float rev_theta_vel = UnitConverter_angle(&converter_system,
 8008fb4:	4b21      	ldr	r3, [pc, #132]	@ (800903c <modbus_working+0x1f4>)
 8008fb6:	edd3 7a07 	vldr	s15, [r3, #28]
 8008fba:	220e      	movs	r2, #14
 8008fbc:	210f      	movs	r1, #15
 8008fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8008fc2:	481f      	ldr	r0, [pc, #124]	@ (8009040 <modbus_working+0x1f8>)
 8008fc4:	f7fb fe00 	bl	8004bc8 <UnitConverter_angle>
 8008fc8:	ed87 0a01 	vstr	s0, [r7, #4]
			revolute_axis.kalman_velocity, UNIT_RADIAN, UNIT_DEGREE);
	registerFrame[Theta_Axis_Actual_Speed].U16 = rev_theta_vel * 10.0f;
 8008fcc:	edd7 7a01 	vldr	s15, [r7, #4]
 8008fd0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008fd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fdc:	ee17 3a90 	vmov	r3, s15
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8009020 <modbus_working+0x1d8>)
 8008fe4:	851a      	strh	r2, [r3, #40]	@ 0x28

	float rev_theta_accel = UnitConverter_angle(&converter_system,
 8008fe6:	4b17      	ldr	r3, [pc, #92]	@ (8009044 <modbus_working+0x1fc>)
 8008fe8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008fec:	220e      	movs	r2, #14
 8008fee:	210f      	movs	r1, #15
 8008ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8008ff4:	4812      	ldr	r0, [pc, #72]	@ (8009040 <modbus_working+0x1f8>)
 8008ff6:	f7fb fde7 	bl	8004bc8 <UnitConverter_angle>
 8008ffa:	ed87 0a00 	vstr	s0, [r7]
			revolute_encoder.radpss, UNIT_RADIAN, UNIT_DEGREE);
	registerFrame[Theta_Axis_Acceleration].U16 = rev_theta_accel * 10.0f;
 8008ffe:	edd7 7a00 	vldr	s15, [r7]
 8009002:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8009006:	ee67 7a87 	vmul.f32	s15, s15, s14
 800900a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800900e:	ee17 3a90 	vmov	r3, s15
 8009012:	b29a      	uxth	r2, r3
 8009014:	4b02      	ldr	r3, [pc, #8]	@ (8009020 <modbus_working+0x1d8>)
 8009016:	859a      	strh	r2, [r3, #44]	@ 0x2c

}
 8009018:	bf00      	nop
 800901a:	3718      	adds	r7, #24
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	20001584 	.word	0x20001584
 8009024:	20001e58 	.word	0x20001e58
 8009028:	20001e5c 	.word	0x20001e5c
 800902c:	00000000 	.word	0x00000000
 8009030:	20000980 	.word	0x20000980
 8009034:	20000704 	.word	0x20000704
 8009038:	20000fcc 	.word	0x20000fcc
 800903c:	20000748 	.word	0x20000748
 8009040:	20000d74 	.word	0x20000d74
 8009044:	200009dc 	.word	0x200009dc

08009048 <start_character_drawing>:

void start_character_drawing(DrawingPoint_t *points, uint8_t num_points,
		const char *character_name) {
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	460b      	mov	r3, r1
 8009052:	607a      	str	r2, [r7, #4]
 8009054:	72fb      	strb	r3, [r7, #11]
	if (is_emergency_active() || homing_active || joy_mode_active) {
 8009056:	f7fe fcab 	bl	80079b0 <is_emergency_active>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d120      	bne.n	80090a2 <start_character_drawing+0x5a>
 8009060:	4b12      	ldr	r3, [pc, #72]	@ (80090ac <start_character_drawing+0x64>)
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d11c      	bne.n	80090a2 <start_character_drawing+0x5a>
 8009068:	4b11      	ldr	r3, [pc, #68]	@ (80090b0 <start_character_drawing+0x68>)
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d118      	bne.n	80090a2 <start_character_drawing+0x5a>
		return;
	}

	// หยุดการวาดปัจจุบัน (ถ้ามี)
	current_drawing_sequence.sequence_active = false;
 8009070:	4b10      	ldr	r3, [pc, #64]	@ (80090b4 <start_character_drawing+0x6c>)
 8009072:	2200      	movs	r2, #0
 8009074:	719a      	strb	r2, [r3, #6]

	// ตั้งค่าลำดับการวาดใหม่
	current_drawing_sequence.points = points;
 8009076:	4a0f      	ldr	r2, [pc, #60]	@ (80090b4 <start_character_drawing+0x6c>)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6013      	str	r3, [r2, #0]
	current_drawing_sequence.num_points = num_points;
 800907c:	4a0d      	ldr	r2, [pc, #52]	@ (80090b4 <start_character_drawing+0x6c>)
 800907e:	7afb      	ldrb	r3, [r7, #11]
 8009080:	7113      	strb	r3, [r2, #4]
	current_drawing_sequence.current_point = 0;
 8009082:	4b0c      	ldr	r3, [pc, #48]	@ (80090b4 <start_character_drawing+0x6c>)
 8009084:	2200      	movs	r2, #0
 8009086:	715a      	strb	r2, [r3, #5]
	current_drawing_sequence.sequence_active = true;
 8009088:	4b0a      	ldr	r3, [pc, #40]	@ (80090b4 <start_character_drawing+0x6c>)
 800908a:	2201      	movs	r2, #1
 800908c:	719a      	strb	r2, [r3, #6]
	current_drawing_sequence.character_name = character_name;
 800908e:	4a09      	ldr	r2, [pc, #36]	@ (80090b4 <start_character_drawing+0x6c>)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6093      	str	r3, [r2, #8]

	// รอให้ motion หยุดก่อนเริ่มใหม่
	if (motion_sequence_state == MOTION_IDLE) {
 8009094:	4b08      	ldr	r3, [pc, #32]	@ (80090b8 <start_character_drawing+0x70>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d103      	bne.n	80090a4 <start_character_drawing+0x5c>
		execute_next_drawing_point();
 800909c:	f000 f80e 	bl	80090bc <execute_next_drawing_point>
 80090a0:	e000      	b.n	80090a4 <start_character_drawing+0x5c>
		return;
 80090a2:	bf00      	nop
	}
}
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	200007eb 	.word	0x200007eb
 80090b0:	20000805 	.word	0x20000805
 80090b4:	200008b0 	.word	0x200008b0
 80090b8:	2000078c 	.word	0x2000078c

080090bc <execute_next_drawing_point>:

void execute_next_drawing_point(void) {
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
	if (!current_drawing_sequence.sequence_active) {
 80090c2:	4b1e      	ldr	r3, [pc, #120]	@ (800913c <execute_next_drawing_point+0x80>)
 80090c4:	799b      	ldrb	r3, [r3, #6]
 80090c6:	f083 0301 	eor.w	r3, r3, #1
 80090ca:	b2db      	uxtb	r3, r3
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d130      	bne.n	8009132 <execute_next_drawing_point+0x76>
		return;
	}

	if (current_drawing_sequence.current_point
 80090d0:	4b1a      	ldr	r3, [pc, #104]	@ (800913c <execute_next_drawing_point+0x80>)
 80090d2:	795a      	ldrb	r2, [r3, #5]
			< current_drawing_sequence.num_points) {
 80090d4:	4b19      	ldr	r3, [pc, #100]	@ (800913c <execute_next_drawing_point+0x80>)
 80090d6:	791b      	ldrb	r3, [r3, #4]
	if (current_drawing_sequence.current_point
 80090d8:	429a      	cmp	r2, r3
 80090da:	d221      	bcs.n	8009120 <execute_next_drawing_point+0x64>
		DrawingPoint_t current_point =
				current_drawing_sequence.points[current_drawing_sequence.current_point];
 80090dc:	4b17      	ldr	r3, [pc, #92]	@ (800913c <execute_next_drawing_point+0x80>)
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	4b16      	ldr	r3, [pc, #88]	@ (800913c <execute_next_drawing_point+0x80>)
 80090e2:	795b      	ldrb	r3, [r3, #5]
 80090e4:	4619      	mov	r1, r3
 80090e6:	460b      	mov	r3, r1
 80090e8:	005b      	lsls	r3, r3, #1
 80090ea:	440b      	add	r3, r1
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	441a      	add	r2, r3
		DrawingPoint_t current_point =
 80090f0:	1d3b      	adds	r3, r7, #4
 80090f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80090f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		// ตั้งค่าปากกาก่อนเคลื่อนที่
		drawing_pen_state = current_point.pen_down;
 80090f8:	7b3a      	ldrb	r2, [r7, #12]
 80090fa:	4b11      	ldr	r3, [pc, #68]	@ (8009140 <execute_next_drawing_point+0x84>)
 80090fc:	701a      	strb	r2, [r3, #0]
		// เริ่มการเคลื่อนที่ไปจุดถัดไป
		start_combined_trajectory(current_point.r_mm, current_point.theta_deg);
 80090fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8009102:	ed97 7a02 	vldr	s14, [r7, #8]
 8009106:	eef0 0a47 	vmov.f32	s1, s14
 800910a:	eeb0 0a67 	vmov.f32	s0, s15
 800910e:	f7fd f9b5 	bl	800647c <start_combined_trajectory>
		current_drawing_sequence.current_point++;
 8009112:	4b0a      	ldr	r3, [pc, #40]	@ (800913c <execute_next_drawing_point+0x80>)
 8009114:	795b      	ldrb	r3, [r3, #5]
 8009116:	3301      	adds	r3, #1
 8009118:	b2da      	uxtb	r2, r3
 800911a:	4b08      	ldr	r3, [pc, #32]	@ (800913c <execute_next_drawing_point+0x80>)
 800911c:	715a      	strb	r2, [r3, #5]
 800911e:	e009      	b.n	8009134 <execute_next_drawing_point+0x78>

	} else {
		// เสร็จสิ้นการวาดตัวอักษรนี้
		current_drawing_sequence.sequence_active = false;
 8009120:	4b06      	ldr	r3, [pc, #24]	@ (800913c <execute_next_drawing_point+0x80>)
 8009122:	2200      	movs	r2, #0
 8009124:	719a      	strb	r2, [r3, #6]
		current_drawing_sequence.current_point = 0;
 8009126:	4b05      	ldr	r3, [pc, #20]	@ (800913c <execute_next_drawing_point+0x80>)
 8009128:	2200      	movs	r2, #0
 800912a:	715a      	strb	r2, [r3, #5]

		// ยกปากกาเมื่อเสร็จ
		plotter_pen_up();
 800912c:	f000 fe42 	bl	8009db4 <plotter_pen_up>
 8009130:	e000      	b.n	8009134 <execute_next_drawing_point+0x78>
		return;
 8009132:	bf00      	nop
	}
}
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	200008b0 	.word	0x200008b0
 8009140:	200008bc 	.word	0x200008bc

08009144 <update_character_drawing>:

void update_character_drawing(void) {
 8009144:	b580      	push	{r7, lr}
 8009146:	af00      	add	r7, sp, #0
	// ถ้ามีลำดับการวาดที่กำลังทำงานและ motion เสร็จแล้ว
	if (current_drawing_sequence.sequence_active
 8009148:	4b05      	ldr	r3, [pc, #20]	@ (8009160 <update_character_drawing+0x1c>)
 800914a:	799b      	ldrb	r3, [r3, #6]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d005      	beq.n	800915c <update_character_drawing+0x18>
			&& motion_sequence_state == MOTION_IDLE) {
 8009150:	4b04      	ldr	r3, [pc, #16]	@ (8009164 <update_character_drawing+0x20>)
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d101      	bne.n	800915c <update_character_drawing+0x18>
		execute_next_drawing_point();
 8009158:	f7ff ffb0 	bl	80090bc <execute_next_drawing_point>
	}
}
 800915c:	bf00      	nop
 800915e:	bd80      	pop	{r7, pc}
 8009160:	200008b0 	.word	0x200008b0
 8009164:	2000078c 	.word	0x2000078c

08009168 <draw_letter_F>:

void draw_letter_F(void) {
 8009168:	b580      	push	{r7, lr}
 800916a:	af00      	add	r7, sp, #0
	start_character_drawing(letter_F, sizeof(letter_F) / sizeof(DrawingPoint_t),
 800916c:	4a03      	ldr	r2, [pc, #12]	@ (800917c <draw_letter_F+0x14>)
 800916e:	2108      	movs	r1, #8
 8009170:	4803      	ldr	r0, [pc, #12]	@ (8009180 <draw_letter_F+0x18>)
 8009172:	f7ff ff69 	bl	8009048 <start_character_drawing>
			"F");
}
 8009176:	bf00      	nop
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	08014fc0 	.word	0x08014fc0
 8009180:	20000338 	.word	0x20000338

08009184 <draw_letter_I>:

void draw_letter_I(void) {
 8009184:	b580      	push	{r7, lr}
 8009186:	af00      	add	r7, sp, #0
	start_character_drawing(letter_I, sizeof(letter_I) / sizeof(DrawingPoint_t),
 8009188:	4a03      	ldr	r2, [pc, #12]	@ (8009198 <draw_letter_I+0x14>)
 800918a:	2104      	movs	r1, #4
 800918c:	4803      	ldr	r0, [pc, #12]	@ (800919c <draw_letter_I+0x18>)
 800918e:	f7ff ff5b 	bl	8009048 <start_character_drawing>
			"I");
}
 8009192:	bf00      	nop
 8009194:	bd80      	pop	{r7, pc}
 8009196:	bf00      	nop
 8009198:	08014fc4 	.word	0x08014fc4
 800919c:	20000398 	.word	0x20000398

080091a0 <draw_letter_B>:

void draw_letter_B(void) {
 80091a0:	b580      	push	{r7, lr}
 80091a2:	af00      	add	r7, sp, #0
	start_character_drawing(letter_B, sizeof(letter_B) / sizeof(DrawingPoint_t),
 80091a4:	4a03      	ldr	r2, [pc, #12]	@ (80091b4 <draw_letter_B+0x14>)
 80091a6:	210a      	movs	r1, #10
 80091a8:	4803      	ldr	r0, [pc, #12]	@ (80091b8 <draw_letter_B+0x18>)
 80091aa:	f7ff ff4d 	bl	8009048 <start_character_drawing>
			"B");
}
 80091ae:	bf00      	nop
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	08014fc8 	.word	0x08014fc8
 80091b8:	200003c8 	.word	0x200003c8

080091bc <draw_letter_O>:

void draw_letter_O(void) {
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
	start_character_drawing(letter_O, sizeof(letter_O) / sizeof(DrawingPoint_t),
 80091c0:	4a03      	ldr	r2, [pc, #12]	@ (80091d0 <draw_letter_O+0x14>)
 80091c2:	2107      	movs	r1, #7
 80091c4:	4803      	ldr	r0, [pc, #12]	@ (80091d4 <draw_letter_O+0x18>)
 80091c6:	f7ff ff3f 	bl	8009048 <start_character_drawing>
			"O");
}
 80091ca:	bf00      	nop
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	08014fcc 	.word	0x08014fcc
 80091d4:	20000440 	.word	0x20000440

080091d8 <draw_underscore>:

void draw_underscore(void) {
 80091d8:	b580      	push	{r7, lr}
 80091da:	af00      	add	r7, sp, #0
	start_character_drawing(letter_underscore,
 80091dc:	4a03      	ldr	r2, [pc, #12]	@ (80091ec <draw_underscore+0x14>)
 80091de:	2104      	movs	r1, #4
 80091e0:	4803      	ldr	r0, [pc, #12]	@ (80091f0 <draw_underscore+0x18>)
 80091e2:	f7ff ff31 	bl	8009048 <start_character_drawing>
			sizeof(letter_underscore) / sizeof(DrawingPoint_t), "_");
}
 80091e6:	bf00      	nop
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop
 80091ec:	08014fd0 	.word	0x08014fd0
 80091f0:	20000494 	.word	0x20000494

080091f4 <draw_letter_G>:

void draw_letter_G(void) {
 80091f4:	b580      	push	{r7, lr}
 80091f6:	af00      	add	r7, sp, #0
	start_character_drawing(letter_G, sizeof(letter_G) / sizeof(DrawingPoint_t),
 80091f8:	4a03      	ldr	r2, [pc, #12]	@ (8009208 <draw_letter_G+0x14>)
 80091fa:	2108      	movs	r1, #8
 80091fc:	4803      	ldr	r0, [pc, #12]	@ (800920c <draw_letter_G+0x18>)
 80091fe:	f7ff ff23 	bl	8009048 <start_character_drawing>
			"G");
}
 8009202:	bf00      	nop
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	08014fd4 	.word	0x08014fd4
 800920c:	200004c4 	.word	0x200004c4

08009210 <draw_number_0>:

void draw_number_0(void) {
 8009210:	b580      	push	{r7, lr}
 8009212:	af00      	add	r7, sp, #0
	start_character_drawing(number_0, sizeof(number_0) / sizeof(DrawingPoint_t),
 8009214:	4a03      	ldr	r2, [pc, #12]	@ (8009224 <draw_number_0+0x14>)
 8009216:	2107      	movs	r1, #7
 8009218:	4803      	ldr	r0, [pc, #12]	@ (8009228 <draw_number_0+0x18>)
 800921a:	f7ff ff15 	bl	8009048 <start_character_drawing>
			"0");
}
 800921e:	bf00      	nop
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	08014fd8 	.word	0x08014fd8
 8009228:	20000524 	.word	0x20000524

0800922c <draw_number_1>:

void draw_number_1(void) {
 800922c:	b580      	push	{r7, lr}
 800922e:	af00      	add	r7, sp, #0
	start_character_drawing(number_1, sizeof(number_1) / sizeof(DrawingPoint_t),
 8009230:	4a03      	ldr	r2, [pc, #12]	@ (8009240 <draw_number_1+0x14>)
 8009232:	2105      	movs	r1, #5
 8009234:	4803      	ldr	r0, [pc, #12]	@ (8009244 <draw_number_1+0x18>)
 8009236:	f7ff ff07 	bl	8009048 <start_character_drawing>
			"1");
}
 800923a:	bf00      	nop
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	08014fdc 	.word	0x08014fdc
 8009244:	20000578 	.word	0x20000578

08009248 <stop_character_drawing>:

void stop_character_drawing(void) {
 8009248:	b580      	push	{r7, lr}
 800924a:	af00      	add	r7, sp, #0
	current_drawing_sequence.sequence_active = false;
 800924c:	4b09      	ldr	r3, [pc, #36]	@ (8009274 <stop_character_drawing+0x2c>)
 800924e:	2200      	movs	r2, #0
 8009250:	719a      	strb	r2, [r3, #6]
	current_drawing_sequence.current_point = 0;
 8009252:	4b08      	ldr	r3, [pc, #32]	@ (8009274 <stop_character_drawing+0x2c>)
 8009254:	2200      	movs	r2, #0
 8009256:	715a      	strb	r2, [r3, #5]
	word_drawing_active = false;
 8009258:	4b07      	ldr	r3, [pc, #28]	@ (8009278 <stop_character_drawing+0x30>)
 800925a:	2200      	movs	r2, #0
 800925c:	701a      	strb	r2, [r3, #0]
	word_progress = 0;
 800925e:	4b07      	ldr	r3, [pc, #28]	@ (800927c <stop_character_drawing+0x34>)
 8009260:	2200      	movs	r2, #0
 8009262:	701a      	strb	r2, [r3, #0]
	drawing_pen_state = false;
 8009264:	4b06      	ldr	r3, [pc, #24]	@ (8009280 <stop_character_drawing+0x38>)
 8009266:	2200      	movs	r2, #0
 8009268:	701a      	strb	r2, [r3, #0]
	plotter_pen_up();
 800926a:	f000 fda3 	bl	8009db4 <plotter_pen_up>
}
 800926e:	bf00      	nop
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	200008b0 	.word	0x200008b0
 8009278:	200008c4 	.word	0x200008c4
 800927c:	200008bd 	.word	0x200008bd
 8009280:	200008bc 	.word	0x200008bc

08009284 <is_drawing_active>:

bool is_drawing_active(void) {
 8009284:	b480      	push	{r7}
 8009286:	af00      	add	r7, sp, #0
	return current_drawing_sequence.sequence_active;
 8009288:	4b03      	ldr	r3, [pc, #12]	@ (8009298 <is_drawing_active+0x14>)
 800928a:	799b      	ldrb	r3, [r3, #6]
}
 800928c:	4618      	mov	r0, r3
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	200008b0 	.word	0x200008b0

0800929c <start_word_FIBO_G01>:

void start_word_FIBO_G01(void) {
 800929c:	b580      	push	{r7, lr}
 800929e:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 80092a0:	f7fe fb86 	bl	80079b0 <is_emergency_active>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d111      	bne.n	80092ce <start_word_FIBO_G01+0x32>
 80092aa:	4b0a      	ldr	r3, [pc, #40]	@ (80092d4 <start_word_FIBO_G01+0x38>)
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10d      	bne.n	80092ce <start_word_FIBO_G01+0x32>
 80092b2:	4b09      	ldr	r3, [pc, #36]	@ (80092d8 <start_word_FIBO_G01+0x3c>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d109      	bne.n	80092ce <start_word_FIBO_G01+0x32>
		return;
	}

//	stop_character_drawing();
//
	word_drawing_active = true;
 80092ba:	4b08      	ldr	r3, [pc, #32]	@ (80092dc <start_word_FIBO_G01+0x40>)
 80092bc:	2201      	movs	r2, #1
 80092be:	701a      	strb	r2, [r3, #0]
	word_progress = 0;
 80092c0:	4b07      	ldr	r3, [pc, #28]	@ (80092e0 <start_word_FIBO_G01+0x44>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	701a      	strb	r2, [r3, #0]
	word_delay_timer = 0;
 80092c6:	4b07      	ldr	r3, [pc, #28]	@ (80092e4 <start_word_FIBO_G01+0x48>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	601a      	str	r2, [r3, #0]
 80092cc:	e000      	b.n	80092d0 <start_word_FIBO_G01+0x34>
		return;
 80092ce:	bf00      	nop

}
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	200007eb 	.word	0x200007eb
 80092d8:	20000805 	.word	0x20000805
 80092dc:	200008c4 	.word	0x200008c4
 80092e0:	200008bd 	.word	0x200008bd
 80092e4:	200008c0 	.word	0x200008c0

080092e8 <draw_word_FIBO_G01>:

void draw_word_FIBO_G01(void) {
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
	const uint32_t LETTER_DELAY = 1; // หน่วงเวลา 3 วินาทีระหว่างตัวอักษร
 80092ee:	2301      	movs	r3, #1
 80092f0:	607b      	str	r3, [r7, #4]

	if (!word_drawing_active) {
 80092f2:	4b45      	ldr	r3, [pc, #276]	@ (8009408 <draw_word_FIBO_G01+0x120>)
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	f083 0301 	eor.w	r3, r3, #1
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d17e      	bne.n	80093fe <draw_word_FIBO_G01+0x116>
		return;
	}

	if (!is_drawing_active() && motion_sequence_state == MOTION_IDLE) {
 8009300:	f7ff ffc0 	bl	8009284 <is_drawing_active>
 8009304:	4603      	mov	r3, r0
 8009306:	f083 0301 	eor.w	r3, r3, #1
 800930a:	b2db      	uxtb	r3, r3
 800930c:	2b00      	cmp	r3, #0
 800930e:	d077      	beq.n	8009400 <draw_word_FIBO_G01+0x118>
 8009310:	4b3e      	ldr	r3, [pc, #248]	@ (800940c <draw_word_FIBO_G01+0x124>)
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d173      	bne.n	8009400 <draw_word_FIBO_G01+0x118>
		word_delay_timer++;
 8009318:	4b3d      	ldr	r3, [pc, #244]	@ (8009410 <draw_word_FIBO_G01+0x128>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3301      	adds	r3, #1
 800931e:	4a3c      	ldr	r2, [pc, #240]	@ (8009410 <draw_word_FIBO_G01+0x128>)
 8009320:	6013      	str	r3, [r2, #0]

		if (word_delay_timer >= LETTER_DELAY) {
 8009322:	4b3b      	ldr	r3, [pc, #236]	@ (8009410 <draw_word_FIBO_G01+0x128>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	429a      	cmp	r2, r3
 800932a:	d869      	bhi.n	8009400 <draw_word_FIBO_G01+0x118>
			word_delay_timer = 0;
 800932c:	4b38      	ldr	r3, [pc, #224]	@ (8009410 <draw_word_FIBO_G01+0x128>)
 800932e:	2200      	movs	r2, #0
 8009330:	601a      	str	r2, [r3, #0]

			switch (word_progress) {
 8009332:	4b38      	ldr	r3, [pc, #224]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	2b07      	cmp	r3, #7
 8009338:	d85a      	bhi.n	80093f0 <draw_word_FIBO_G01+0x108>
 800933a:	a201      	add	r2, pc, #4	@ (adr r2, 8009340 <draw_word_FIBO_G01+0x58>)
 800933c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009340:	08009361 	.word	0x08009361
 8009344:	08009373 	.word	0x08009373
 8009348:	08009385 	.word	0x08009385
 800934c:	08009397 	.word	0x08009397
 8009350:	080093a9 	.word	0x080093a9
 8009354:	080093bb 	.word	0x080093bb
 8009358:	080093cd 	.word	0x080093cd
 800935c:	080093df 	.word	0x080093df
			case 0:
				draw_letter_F();
 8009360:	f7ff ff02 	bl	8009168 <draw_letter_F>
				word_progress++;
 8009364:	4b2b      	ldr	r3, [pc, #172]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	3301      	adds	r3, #1
 800936a:	b2da      	uxtb	r2, r3
 800936c:	4b29      	ldr	r3, [pc, #164]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 800936e:	701a      	strb	r2, [r3, #0]
				break;
 8009370:	e046      	b.n	8009400 <draw_word_FIBO_G01+0x118>
			case 1:
				draw_letter_I();
 8009372:	f7ff ff07 	bl	8009184 <draw_letter_I>
				word_progress++;
 8009376:	4b27      	ldr	r3, [pc, #156]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	3301      	adds	r3, #1
 800937c:	b2da      	uxtb	r2, r3
 800937e:	4b25      	ldr	r3, [pc, #148]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 8009380:	701a      	strb	r2, [r3, #0]
				break;
 8009382:	e03d      	b.n	8009400 <draw_word_FIBO_G01+0x118>
			case 2:
				draw_letter_B();
 8009384:	f7ff ff0c 	bl	80091a0 <draw_letter_B>
				word_progress++;
 8009388:	4b22      	ldr	r3, [pc, #136]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	3301      	adds	r3, #1
 800938e:	b2da      	uxtb	r2, r3
 8009390:	4b20      	ldr	r3, [pc, #128]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 8009392:	701a      	strb	r2, [r3, #0]
				break;
 8009394:	e034      	b.n	8009400 <draw_word_FIBO_G01+0x118>
			case 3:
				draw_letter_O();
 8009396:	f7ff ff11 	bl	80091bc <draw_letter_O>
				word_progress++;
 800939a:	4b1e      	ldr	r3, [pc, #120]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	3301      	adds	r3, #1
 80093a0:	b2da      	uxtb	r2, r3
 80093a2:	4b1c      	ldr	r3, [pc, #112]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 80093a4:	701a      	strb	r2, [r3, #0]
				break;
 80093a6:	e02b      	b.n	8009400 <draw_word_FIBO_G01+0x118>
			case 4:
				draw_underscore();
 80093a8:	f7ff ff16 	bl	80091d8 <draw_underscore>
				word_progress++;
 80093ac:	4b19      	ldr	r3, [pc, #100]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	3301      	adds	r3, #1
 80093b2:	b2da      	uxtb	r2, r3
 80093b4:	4b17      	ldr	r3, [pc, #92]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 80093b6:	701a      	strb	r2, [r3, #0]
				break;
 80093b8:	e022      	b.n	8009400 <draw_word_FIBO_G01+0x118>
			case 5:
				draw_letter_G();
 80093ba:	f7ff ff1b 	bl	80091f4 <draw_letter_G>
				word_progress++;
 80093be:	4b15      	ldr	r3, [pc, #84]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	3301      	adds	r3, #1
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	4b13      	ldr	r3, [pc, #76]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 80093c8:	701a      	strb	r2, [r3, #0]
				break;
 80093ca:	e019      	b.n	8009400 <draw_word_FIBO_G01+0x118>
			case 6:
				draw_number_0();
 80093cc:	f7ff ff20 	bl	8009210 <draw_number_0>
				word_progress++;
 80093d0:	4b10      	ldr	r3, [pc, #64]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	3301      	adds	r3, #1
 80093d6:	b2da      	uxtb	r2, r3
 80093d8:	4b0e      	ldr	r3, [pc, #56]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 80093da:	701a      	strb	r2, [r3, #0]
				break;
 80093dc:	e010      	b.n	8009400 <draw_word_FIBO_G01+0x118>
			case 7:
				draw_number_1();
 80093de:	f7ff ff25 	bl	800922c <draw_number_1>
				word_progress++;
 80093e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	3301      	adds	r3, #1
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 80093ec:	701a      	strb	r2, [r3, #0]
				break;
 80093ee:	e007      	b.n	8009400 <draw_word_FIBO_G01+0x118>
			default:
				// เสร็จสิ้นการวาดคำทั้งหมด
				word_drawing_active = false;
 80093f0:	4b05      	ldr	r3, [pc, #20]	@ (8009408 <draw_word_FIBO_G01+0x120>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	701a      	strb	r2, [r3, #0]
				word_progress = 0;
 80093f6:	4b07      	ldr	r3, [pc, #28]	@ (8009414 <draw_word_FIBO_G01+0x12c>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	701a      	strb	r2, [r3, #0]
				break;
 80093fc:	e000      	b.n	8009400 <draw_word_FIBO_G01+0x118>
		return;
 80093fe:	bf00      	nop
			}
		}
	}
}
 8009400:	3708      	adds	r7, #8
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	200008c4 	.word	0x200008c4
 800940c:	2000078c 	.word	0x2000078c
 8009410:	200008c0 	.word	0x200008c0
 8009414:	200008bd 	.word	0x200008bd

08009418 <ensure_motion_idle>:

void ensure_motion_idle(void) {
 8009418:	b480      	push	{r7}
 800941a:	af00      	add	r7, sp, #0
	// Force motion to idle state
	motion_sequence_state = MOTION_IDLE;
 800941c:	4b16      	ldr	r3, [pc, #88]	@ (8009478 <ensure_motion_idle+0x60>)
 800941e:	2200      	movs	r2, #0
 8009420:	701a      	strb	r2, [r3, #0]
	motion_delay_timer = 0;
 8009422:	4b16      	ldr	r3, [pc, #88]	@ (800947c <ensure_motion_idle+0x64>)
 8009424:	2200      	movs	r2, #0
 8009426:	601a      	str	r2, [r3, #0]

	// Stop all trajectories
	prismatic_axis.trajectory_active = false;
 8009428:	4b15      	ldr	r3, [pc, #84]	@ (8009480 <ensure_motion_idle+0x68>)
 800942a:	2200      	movs	r2, #0
 800942c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8009430:	4b14      	ldr	r3, [pc, #80]	@ (8009484 <ensure_motion_idle+0x6c>)
 8009432:	2200      	movs	r2, #0
 8009434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	sync_motion_active = false;
 8009438:	4b13      	ldr	r3, [pc, #76]	@ (8009488 <ensure_motion_idle+0x70>)
 800943a:	2200      	movs	r2, #0
 800943c:	701a      	strb	r2, [r3, #0]

	// Reset velocities
	prismatic_axis.velocity = 0.0f;
 800943e:	4b10      	ldr	r3, [pc, #64]	@ (8009480 <ensure_motion_idle+0x68>)
 8009440:	f04f 0200 	mov.w	r2, #0
 8009444:	605a      	str	r2, [r3, #4]
	revolute_axis.velocity = 0.0f;
 8009446:	4b0f      	ldr	r3, [pc, #60]	@ (8009484 <ensure_motion_idle+0x6c>)
 8009448:	f04f 0200 	mov.w	r2, #0
 800944c:	605a      	str	r2, [r3, #4]
	prismatic_axis.command_vel = 0.0f;
 800944e:	4b0c      	ldr	r3, [pc, #48]	@ (8009480 <ensure_motion_idle+0x68>)
 8009450:	f04f 0200 	mov.w	r2, #0
 8009454:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8009456:	4b0b      	ldr	r3, [pc, #44]	@ (8009484 <ensure_motion_idle+0x6c>)
 8009458:	f04f 0200 	mov.w	r2, #0
 800945c:	629a      	str	r2, [r3, #40]	@ 0x28

	// Hold current positions
	prismatic_axis.position = prismatic_encoder.mm;
 800945e:	4b0b      	ldr	r3, [pc, #44]	@ (800948c <ensure_motion_idle+0x74>)
 8009460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009462:	4a07      	ldr	r2, [pc, #28]	@ (8009480 <ensure_motion_idle+0x68>)
 8009464:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8009466:	4b0a      	ldr	r3, [pc, #40]	@ (8009490 <ensure_motion_idle+0x78>)
 8009468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800946a:	4a06      	ldr	r2, [pc, #24]	@ (8009484 <ensure_motion_idle+0x6c>)
 800946c:	6013      	str	r3, [r2, #0]
}
 800946e:	bf00      	nop
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr
 8009478:	2000078c 	.word	0x2000078c
 800947c:	200007e0 	.word	0x200007e0
 8009480:	20000704 	.word	0x20000704
 8009484:	20000748 	.word	0x20000748
 8009488:	200008ac 	.word	0x200008ac
 800948c:	20000980 	.word	0x20000980
 8009490:	200009dc 	.word	0x200009dc

08009494 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8009494:	b480      	push	{r7}
 8009496:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009498:	b672      	cpsid	i
}
 800949a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800949c:	bf00      	nop
 800949e:	e7fd      	b.n	800949c <Error_Handler+0x8>

080094a0 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 80094a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80094a4:	ed2d 8b02 	vpush	{d8}
 80094a8:	b083      	sub	sp, #12
 80094aa:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 80094ac:	4bc4      	ldr	r3, [pc, #784]	@ (80097c0 <plotter_begin+0x320>)
 80094ae:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 80094b2:	4bc4      	ldr	r3, [pc, #784]	@ (80097c4 <plotter_begin+0x324>)
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7f7 f812 	bl	80004e0 <__aeabi_f2d>
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	4620      	mov	r0, r4
 80094c2:	4629      	mov	r1, r5
 80094c4:	f7f7 f864 	bl	8000590 <__aeabi_dmul>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	4610      	mov	r0, r2
 80094ce:	4619      	mov	r1, r3
 80094d0:	f04f 0200 	mov.w	r2, #0
 80094d4:	4bbc      	ldr	r3, [pc, #752]	@ (80097c8 <plotter_begin+0x328>)
 80094d6:	f7f7 f85b 	bl	8000590 <__aeabi_dmul>
 80094da:	4602      	mov	r2, r0
 80094dc:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 80094de:	49b8      	ldr	r1, [pc, #736]	@ (80097c0 <plotter_begin+0x320>)
 80094e0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 80094e4:	4bb6      	ldr	r3, [pc, #728]	@ (80097c0 <plotter_begin+0x320>)
 80094e6:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80094ea:	4602      	mov	r2, r0
 80094ec:	460b      	mov	r3, r1
 80094ee:	f7f6 fe99 	bl	8000224 <__adddf3>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	49b2      	ldr	r1, [pc, #712]	@ (80097c0 <plotter_begin+0x320>)
 80094f8:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500.0;
 80094fc:	49b0      	ldr	r1, [pc, #704]	@ (80097c0 <plotter_begin+0x320>)
 80094fe:	f04f 0200 	mov.w	r2, #0
 8009502:	4bb2      	ldr	r3, [pc, #712]	@ (80097cc <plotter_begin+0x32c>)
 8009504:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = 1000.0;
 8009508:	49ad      	ldr	r1, [pc, #692]	@ (80097c0 <plotter_begin+0x320>)
 800950a:	f04f 0200 	mov.w	r2, #0
 800950e:	4bae      	ldr	r3, [pc, #696]	@ (80097c8 <plotter_begin+0x328>)
 8009510:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8009514:	4bae      	ldr	r3, [pc, #696]	@ (80097d0 <plotter_begin+0x330>)
 8009516:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 800951a:	a3a7      	add	r3, pc, #668	@ (adr r3, 80097b8 <plotter_begin+0x318>)
 800951c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009520:	f7f7 f836 	bl	8000590 <__aeabi_dmul>
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8009528:	49a9      	ldr	r1, [pc, #676]	@ (80097d0 <plotter_begin+0x330>)
 800952a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	ZGX45RGG_150RPM_Constant.traject_qd_max = 4.0;
 800952e:	49a8      	ldr	r1, [pc, #672]	@ (80097d0 <plotter_begin+0x330>)
 8009530:	f04f 0200 	mov.w	r2, #0
 8009534:	4ba7      	ldr	r3, [pc, #668]	@ (80097d4 <plotter_begin+0x334>)
 8009536:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = 1.0;
 800953a:	49a5      	ldr	r1, [pc, #660]	@ (80097d0 <plotter_begin+0x330>)
 800953c:	f04f 0200 	mov.w	r2, #0
 8009540:	4ba5      	ldr	r3, [pc, #660]	@ (80097d8 <plotter_begin+0x338>)
 8009542:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8009546:	2100      	movs	r1, #0
 8009548:	48a4      	ldr	r0, [pc, #656]	@ (80097dc <plotter_begin+0x33c>)
 800954a:	f000 fc53 	bl	8009df4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 800954e:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 80097e0 <plotter_begin+0x340>
 8009552:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 80097e4 <plotter_begin+0x344>
 8009556:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 800981c <plotter_begin+0x37c>
 800955a:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 800981c <plotter_begin+0x37c>
 800955e:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 80097e8 <plotter_begin+0x348>
 8009562:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 80097e0 <plotter_begin+0x340>
 8009566:	489d      	ldr	r0, [pc, #628]	@ (80097dc <plotter_begin+0x33c>)
 8009568:	f000 fca2 	bl	8009eb0 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 800956c:	2102      	movs	r1, #2
 800956e:	489f      	ldr	r0, [pc, #636]	@ (80097ec <plotter_begin+0x34c>)
 8009570:	f000 fc40 	bl	8009df4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8009574:	ed9f 3a9a 	vldr	s6, [pc, #616]	@ 80097e0 <plotter_begin+0x340>
 8009578:	eddf 2a9a 	vldr	s5, [pc, #616]	@ 80097e4 <plotter_begin+0x344>
 800957c:	ed9f 2aa7 	vldr	s4, [pc, #668]	@ 800981c <plotter_begin+0x37c>
 8009580:	eddf 1aa6 	vldr	s3, [pc, #664]	@ 800981c <plotter_begin+0x37c>
 8009584:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8009588:	eddf 0a97 	vldr	s1, [pc, #604]	@ 80097e8 <plotter_begin+0x348>
 800958c:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 80097e0 <plotter_begin+0x340>
 8009590:	4896      	ldr	r0, [pc, #600]	@ (80097ec <plotter_begin+0x34c>)
 8009592:	f000 fcb8 	bl	8009f06 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8009596:	2100      	movs	r1, #0
 8009598:	4895      	ldr	r0, [pc, #596]	@ (80097f0 <plotter_begin+0x350>)
 800959a:	f000 fc2b 	bl	8009df4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 800959e:	eddf 2a95 	vldr	s5, [pc, #596]	@ 80097f4 <plotter_begin+0x354>
 80095a2:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 80097f8 <plotter_begin+0x358>
 80095a6:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 800981c <plotter_begin+0x37c>
 80095aa:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 800981c <plotter_begin+0x37c>
 80095ae:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 80097e8 <plotter_begin+0x348>
 80095b2:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 80097f4 <plotter_begin+0x354>
 80095b6:	488e      	ldr	r0, [pc, #568]	@ (80097f0 <plotter_begin+0x350>)
 80095b8:	f000 fc7a 	bl	8009eb0 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 80095bc:	2102      	movs	r1, #2
 80095be:	488f      	ldr	r0, [pc, #572]	@ (80097fc <plotter_begin+0x35c>)
 80095c0:	f000 fc18 	bl	8009df4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 80095c4:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 80095c8:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 80095cc:	ed9f 2a93 	vldr	s4, [pc, #588]	@ 800981c <plotter_begin+0x37c>
 80095d0:	eddf 1a92 	vldr	s3, [pc, #584]	@ 800981c <plotter_begin+0x37c>
 80095d4:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80095d8:	eddf 0a83 	vldr	s1, [pc, #524]	@ 80097e8 <plotter_begin+0x348>
 80095dc:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80095e0:	4886      	ldr	r0, [pc, #536]	@ (80097fc <plotter_begin+0x35c>)
 80095e2:	f000 fc90 	bl	8009f06 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 80095e6:	2100      	movs	r1, #0
 80095e8:	4885      	ldr	r0, [pc, #532]	@ (8009800 <plotter_begin+0x360>)
 80095ea:	f000 fc03 	bl	8009df4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80095ee:	4b74      	ldr	r3, [pc, #464]	@ (80097c0 <plotter_begin+0x320>)
 80095f0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80095f4:	4610      	mov	r0, r2
 80095f6:	4619      	mov	r1, r3
 80095f8:	f7f7 faac 	bl	8000b54 <__aeabi_d2f>
 80095fc:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 80095fe:	4b70      	ldr	r3, [pc, #448]	@ (80097c0 <plotter_begin+0x320>)
 8009600:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009604:	4610      	mov	r0, r2
 8009606:	4619      	mov	r1, r3
 8009608:	f7f7 faa4 	bl	8000b54 <__aeabi_d2f>
 800960c:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800960e:	ee07 3a90 	vmov	s15, r3
 8009612:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8009616:	4b6a      	ldr	r3, [pc, #424]	@ (80097c0 <plotter_begin+0x320>)
 8009618:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800961c:	4610      	mov	r0, r2
 800961e:	4619      	mov	r1, r3
 8009620:	f7f7 fa98 	bl	8000b54 <__aeabi_d2f>
 8009624:	4603      	mov	r3, r0
 8009626:	ee02 3a90 	vmov	s5, r3
 800962a:	eeb0 2a48 	vmov.f32	s4, s16
 800962e:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 800981c <plotter_begin+0x37c>
 8009632:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 800981c <plotter_begin+0x37c>
 8009636:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 80097e8 <plotter_begin+0x348>
 800963a:	ee00 4a10 	vmov	s0, r4
 800963e:	4870      	ldr	r0, [pc, #448]	@ (8009800 <plotter_begin+0x360>)
 8009640:	f000 fc36 	bl	8009eb0 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8009644:	2102      	movs	r1, #2
 8009646:	486f      	ldr	r0, [pc, #444]	@ (8009804 <plotter_begin+0x364>)
 8009648:	f000 fbd4 	bl	8009df4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800964c:	4b5c      	ldr	r3, [pc, #368]	@ (80097c0 <plotter_begin+0x320>)
 800964e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009652:	4610      	mov	r0, r2
 8009654:	4619      	mov	r1, r3
 8009656:	f7f7 fa7d 	bl	8000b54 <__aeabi_d2f>
 800965a:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 800965c:	4b58      	ldr	r3, [pc, #352]	@ (80097c0 <plotter_begin+0x320>)
 800965e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009662:	4610      	mov	r0, r2
 8009664:	4619      	mov	r1, r3
 8009666:	f7f7 fa75 	bl	8000b54 <__aeabi_d2f>
 800966a:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800966c:	ee07 3a90 	vmov	s15, r3
 8009670:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8009674:	4b52      	ldr	r3, [pc, #328]	@ (80097c0 <plotter_begin+0x320>)
 8009676:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 800967a:	4610      	mov	r0, r2
 800967c:	4619      	mov	r1, r3
 800967e:	f7f7 fa69 	bl	8000b54 <__aeabi_d2f>
 8009682:	4603      	mov	r3, r0
 8009684:	ee03 3a10 	vmov	s6, r3
 8009688:	eef0 2a48 	vmov.f32	s5, s16
 800968c:	ed9f 2a63 	vldr	s4, [pc, #396]	@ 800981c <plotter_begin+0x37c>
 8009690:	eddf 1a62 	vldr	s3, [pc, #392]	@ 800981c <plotter_begin+0x37c>
 8009694:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8009698:	eddf 0a53 	vldr	s1, [pc, #332]	@ 80097e8 <plotter_begin+0x348>
 800969c:	ee00 4a10 	vmov	s0, r4
 80096a0:	4858      	ldr	r0, [pc, #352]	@ (8009804 <plotter_begin+0x364>)
 80096a2:	f000 fc30 	bl	8009f06 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 80096a6:	2100      	movs	r1, #0
 80096a8:	4857      	ldr	r0, [pc, #348]	@ (8009808 <plotter_begin+0x368>)
 80096aa:	f000 fba3 	bl	8009df4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80096ae:	4b48      	ldr	r3, [pc, #288]	@ (80097d0 <plotter_begin+0x330>)
 80096b0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80096b4:	4610      	mov	r0, r2
 80096b6:	4619      	mov	r1, r3
 80096b8:	f7f7 fa4c 	bl	8000b54 <__aeabi_d2f>
 80096bc:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 80096be:	4b44      	ldr	r3, [pc, #272]	@ (80097d0 <plotter_begin+0x330>)
 80096c0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80096c4:	4610      	mov	r0, r2
 80096c6:	4619      	mov	r1, r3
 80096c8:	f7f7 fa44 	bl	8000b54 <__aeabi_d2f>
 80096cc:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80096ce:	ee07 3a90 	vmov	s15, r3
 80096d2:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 80096d6:	4b3e      	ldr	r3, [pc, #248]	@ (80097d0 <plotter_begin+0x330>)
 80096d8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80096dc:	4610      	mov	r0, r2
 80096de:	4619      	mov	r1, r3
 80096e0:	f7f7 fa38 	bl	8000b54 <__aeabi_d2f>
 80096e4:	4603      	mov	r3, r0
 80096e6:	ee02 3a90 	vmov	s5, r3
 80096ea:	eeb0 2a48 	vmov.f32	s4, s16
 80096ee:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 800981c <plotter_begin+0x37c>
 80096f2:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 800981c <plotter_begin+0x37c>
 80096f6:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 80097e8 <plotter_begin+0x348>
 80096fa:	ee00 4a10 	vmov	s0, r4
 80096fe:	4842      	ldr	r0, [pc, #264]	@ (8009808 <plotter_begin+0x368>)
 8009700:	f000 fbd6 	bl	8009eb0 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 8009704:	2102      	movs	r1, #2
 8009706:	4841      	ldr	r0, [pc, #260]	@ (800980c <plotter_begin+0x36c>)
 8009708:	f000 fb74 	bl	8009df4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800970c:	4b30      	ldr	r3, [pc, #192]	@ (80097d0 <plotter_begin+0x330>)
 800970e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009712:	4610      	mov	r0, r2
 8009714:	4619      	mov	r1, r3
 8009716:	f7f7 fa1d 	bl	8000b54 <__aeabi_d2f>
 800971a:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 800971c:	4b2c      	ldr	r3, [pc, #176]	@ (80097d0 <plotter_begin+0x330>)
 800971e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8009722:	4610      	mov	r0, r2
 8009724:	4619      	mov	r1, r3
 8009726:	f7f7 fa15 	bl	8000b54 <__aeabi_d2f>
 800972a:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800972c:	ee07 3a90 	vmov	s15, r3
 8009730:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8009734:	4b26      	ldr	r3, [pc, #152]	@ (80097d0 <plotter_begin+0x330>)
 8009736:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 800973a:	4610      	mov	r0, r2
 800973c:	4619      	mov	r1, r3
 800973e:	f7f7 fa09 	bl	8000b54 <__aeabi_d2f>
 8009742:	4603      	mov	r3, r0
 8009744:	ee03 3a10 	vmov	s6, r3
 8009748:	eef0 2a48 	vmov.f32	s5, s16
 800974c:	ed9f 2a33 	vldr	s4, [pc, #204]	@ 800981c <plotter_begin+0x37c>
 8009750:	eddf 1a32 	vldr	s3, [pc, #200]	@ 800981c <plotter_begin+0x37c>
 8009754:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8009758:	eddf 0a23 	vldr	s1, [pc, #140]	@ 80097e8 <plotter_begin+0x348>
 800975c:	ee00 4a10 	vmov	s0, r4
 8009760:	482a      	ldr	r0, [pc, #168]	@ (800980c <plotter_begin+0x36c>)
 8009762:	f000 fbd0 	bl	8009f06 <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 8009766:	482a      	ldr	r0, [pc, #168]	@ (8009810 <plotter_begin+0x370>)
 8009768:	f7fb f998 	bl	8004a9c <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 800976c:	4b15      	ldr	r3, [pc, #84]	@ (80097c4 <plotter_begin+0x324>)
 800976e:	691b      	ldr	r3, [r3, #16]
 8009770:	4618      	mov	r0, r3
 8009772:	f7f6 feb5 	bl	80004e0 <__aeabi_f2d>
 8009776:	4602      	mov	r2, r0
 8009778:	460b      	mov	r3, r1
 800977a:	f7f6 fd53 	bl	8000224 <__adddf3>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	4610      	mov	r0, r2
 8009784:	4619      	mov	r1, r3
 8009786:	f04f 0200 	mov.w	r2, #0
 800978a:	4b0f      	ldr	r3, [pc, #60]	@ (80097c8 <plotter_begin+0x328>)
 800978c:	f7f6 ff00 	bl	8000590 <__aeabi_dmul>
 8009790:	4602      	mov	r2, r0
 8009792:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8009794:	4610      	mov	r0, r2
 8009796:	4619      	mov	r1, r3
 8009798:	f7f7 f9dc 	bl	8000b54 <__aeabi_d2f>
 800979c:	4603      	mov	r3, r0
 800979e:	ee00 3a90 	vmov	s1, r3
 80097a2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80097a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80097aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80097ae:	4919      	ldr	r1, [pc, #100]	@ (8009814 <plotter_begin+0x374>)
 80097b0:	4819      	ldr	r0, [pc, #100]	@ (8009818 <plotter_begin+0x378>)
 80097b2:	f7fa faf7 	bl	8003da4 <QEI_init>
 80097b6:	e033      	b.n	8009820 <plotter_begin+0x380>
 80097b8:	55555555 	.word	0x55555555
 80097bc:	3fe55555 	.word	0x3fe55555
 80097c0:	20000080 	.word	0x20000080
 80097c4:	20000100 	.word	0x20000100
 80097c8:	408f4000 	.word	0x408f4000
 80097cc:	407f4000 	.word	0x407f4000
 80097d0:	20000000 	.word	0x20000000
 80097d4:	40100000 	.word	0x40100000
 80097d8:	3ff00000 	.word	0x3ff00000
 80097dc:	20000b54 	.word	0x20000b54
 80097e0:	477fff00 	.word	0x477fff00
 80097e4:	c77fff00 	.word	0xc77fff00
 80097e8:	3dcccccd 	.word	0x3dcccccd
 80097ec:	20000b98 	.word	0x20000b98
 80097f0:	20000bdc 	.word	0x20000bdc
 80097f4:	43480000 	.word	0x43480000
 80097f8:	c3480000 	.word	0xc3480000
 80097fc:	20000c20 	.word	0x20000c20
 8009800:	20000c64 	.word	0x20000c64
 8009804:	20000ca8 	.word	0x20000ca8
 8009808:	20000cec 	.word	0x20000cec
 800980c:	20000d30 	.word	0x20000d30
 8009810:	20000d74 	.word	0x20000d74
 8009814:	2000200c 	.word	0x2000200c
 8009818:	20000980 	.word	0x20000980
 800981c:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8009820:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 800981c <plotter_begin+0x37c>
 8009824:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009828:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800982c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009830:	49b9      	ldr	r1, [pc, #740]	@ (8009b18 <plotter_begin+0x678>)
 8009832:	48ba      	ldr	r0, [pc, #744]	@ (8009b1c <plotter_begin+0x67c>)
 8009834:	f7fa fab6 	bl	8003da4 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8009838:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009842:	2204      	movs	r2, #4
 8009844:	49b6      	ldr	r1, [pc, #728]	@ (8009b20 <plotter_begin+0x680>)
 8009846:	48b7      	ldr	r0, [pc, #732]	@ (8009b24 <plotter_begin+0x684>)
 8009848:	f7f7 fd78 	bl	800133c <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 800984c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	4bb5      	ldr	r3, [pc, #724]	@ (8009b28 <plotter_begin+0x688>)
 8009854:	2200      	movs	r2, #0
 8009856:	49b2      	ldr	r1, [pc, #712]	@ (8009b20 <plotter_begin+0x680>)
 8009858:	48b4      	ldr	r0, [pc, #720]	@ (8009b2c <plotter_begin+0x68c>)
 800985a:	f7f7 fd6f 	bl	800133c <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 800985e:	220c      	movs	r2, #12
 8009860:	49b3      	ldr	r1, [pc, #716]	@ (8009b30 <plotter_begin+0x690>)
 8009862:	48b4      	ldr	r0, [pc, #720]	@ (8009b34 <plotter_begin+0x694>)
 8009864:	f7fa f870 	bl	8003948 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8009868:	eddf 0ab3 	vldr	s1, [pc, #716]	@ 8009b38 <plotter_begin+0x698>
 800986c:	ed9f 0ab3 	vldr	s0, [pc, #716]	@ 8009b3c <plotter_begin+0x69c>
 8009870:	48ac      	ldr	r0, [pc, #688]	@ (8009b24 <plotter_begin+0x684>)
 8009872:	f7f7 fd87 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8009876:	eddf 0ab0 	vldr	s1, [pc, #704]	@ 8009b38 <plotter_begin+0x698>
 800987a:	ed9f 0ab0 	vldr	s0, [pc, #704]	@ 8009b3c <plotter_begin+0x69c>
 800987e:	48ab      	ldr	r0, [pc, #684]	@ (8009b2c <plotter_begin+0x68c>)
 8009880:	f7f7 fd80 	bl	8001384 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 103, //103 (D)
			ZGX45RGG_400RPM_Constant.sd_max);
 8009884:	4bae      	ldr	r3, [pc, #696]	@ (8009b40 <plotter_begin+0x6a0>)
 8009886:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 103, //103 (D)
 800988a:	4610      	mov	r0, r2
 800988c:	4619      	mov	r1, r3
 800988e:	f7f7 f961 	bl	8000b54 <__aeabi_d2f>
 8009892:	4603      	mov	r3, r0
 8009894:	ee01 3a90 	vmov	s3, r3
 8009898:	ed9f 1aaa 	vldr	s2, [pc, #680]	@ 8009b44 <plotter_begin+0x6a4>
 800989c:	eddf 0aaa 	vldr	s1, [pc, #680]	@ 8009b48 <plotter_begin+0x6a8>
 80098a0:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 8009b4c <plotter_begin+0x6ac>
 80098a4:	48aa      	ldr	r0, [pc, #680]	@ (8009b50 <plotter_begin+0x6b0>)
 80098a6:	f7f7 fc84 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0, //150 (P)
			ZGX45RGG_400RPM_Constant.U_max);
 80098aa:	4ba5      	ldr	r3, [pc, #660]	@ (8009b40 <plotter_begin+0x6a0>)
 80098ac:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0, //150 (P)
 80098b0:	4610      	mov	r0, r2
 80098b2:	4619      	mov	r1, r3
 80098b4:	f7f7 f94e 	bl	8000b54 <__aeabi_d2f>
 80098b8:	4603      	mov	r3, r0
 80098ba:	ee01 3a90 	vmov	s3, r3
 80098be:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 8009b38 <plotter_begin+0x698>
 80098c2:	eddf 0aa4 	vldr	s1, [pc, #656]	@ 8009b54 <plotter_begin+0x6b4>
 80098c6:	ed9f 0aa4 	vldr	s0, [pc, #656]	@ 8009b58 <plotter_begin+0x6b8>
 80098ca:	48a4      	ldr	r0, [pc, #656]	@ (8009b5c <plotter_begin+0x6bc>)
 80098cc:	f7f7 fc71 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 250, 0.001, 700,
			ZGX45RGG_150RPM_Constant.qd_max);
 80098d0:	4ba3      	ldr	r3, [pc, #652]	@ (8009b60 <plotter_begin+0x6c0>)
 80098d2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 250, 0.001, 700,
 80098d6:	4610      	mov	r0, r2
 80098d8:	4619      	mov	r1, r3
 80098da:	f7f7 f93b 	bl	8000b54 <__aeabi_d2f>
 80098de:	4603      	mov	r3, r0
 80098e0:	ee01 3a90 	vmov	s3, r3
 80098e4:	ed9f 1a9f 	vldr	s2, [pc, #636]	@ 8009b64 <plotter_begin+0x6c4>
 80098e8:	eddf 0a9f 	vldr	s1, [pc, #636]	@ 8009b68 <plotter_begin+0x6c8>
 80098ec:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8009b6c <plotter_begin+0x6cc>
 80098f0:	489f      	ldr	r0, [pc, #636]	@ (8009b70 <plotter_begin+0x6d0>)
 80098f2:	f7f7 fc5e 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2275, 30.5, 2996, //2280->2275 (P), 25->30 (I), 3000 -> 2996 (D)
			ZGX45RGG_150RPM_Constant.U_max);
 80098f6:	4b9a      	ldr	r3, [pc, #616]	@ (8009b60 <plotter_begin+0x6c0>)
 80098f8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2275, 30.5, 2996, //2280->2275 (P), 25->30 (I), 3000 -> 2996 (D)
 80098fc:	4610      	mov	r0, r2
 80098fe:	4619      	mov	r1, r3
 8009900:	f7f7 f928 	bl	8000b54 <__aeabi_d2f>
 8009904:	4603      	mov	r3, r0
 8009906:	ee01 3a90 	vmov	s3, r3
 800990a:	ed9f 1a9a 	vldr	s2, [pc, #616]	@ 8009b74 <plotter_begin+0x6d4>
 800990e:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 8009b78 <plotter_begin+0x6d8>
 8009912:	ed9f 0a9a 	vldr	s0, [pc, #616]	@ 8009b7c <plotter_begin+0x6dc>
 8009916:	489a      	ldr	r0, [pc, #616]	@ (8009b80 <plotter_begin+0x6e0>)
 8009918:	f7f7 fc4b 	bl	80011b2 <PID_CONTROLLER_Init>
//			ZGX45RGG_150RPM_Constant.qd_max);
//	PID_CONTROLLER_Init(&revolute_velocity_pid, 2275, 25, 3000,
//			ZGX45RGG_150RPM_Constant.U_max);

	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
			ZGX45RGG_150RPM_Constant.U_max);
 800991c:	4b90      	ldr	r3, [pc, #576]	@ (8009b60 <plotter_begin+0x6c0>)
 800991e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
 8009922:	4610      	mov	r0, r2
 8009924:	4619      	mov	r1, r3
 8009926:	f7f7 f915 	bl	8000b54 <__aeabi_d2f>
 800992a:	4603      	mov	r3, r0
 800992c:	ee01 3a90 	vmov	s3, r3
 8009930:	ed9f 1a82 	vldr	s2, [pc, #520]	@ 8009b3c <plotter_begin+0x69c>
 8009934:	eddf 0a93 	vldr	s1, [pc, #588]	@ 8009b84 <plotter_begin+0x6e4>
 8009938:	ed9f 0a93 	vldr	s0, [pc, #588]	@ 8009b88 <plotter_begin+0x6e8>
 800993c:	4893      	ldr	r0, [pc, #588]	@ (8009b8c <plotter_begin+0x6ec>)
 800993e:	f7f7 fc38 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8009942:	4987      	ldr	r1, [pc, #540]	@ (8009b60 <plotter_begin+0x6c0>)
 8009944:	4892      	ldr	r0, [pc, #584]	@ (8009b90 <plotter_begin+0x6f0>)
 8009946:	f7f7 fdf7 	bl	8001538 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 800994a:	497d      	ldr	r1, [pc, #500]	@ (8009b40 <plotter_begin+0x6a0>)
 800994c:	4891      	ldr	r0, [pc, #580]	@ (8009b94 <plotter_begin+0x6f4>)
 800994e:	f7f7 ff71 	bl	8001834 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8009952:	4a91      	ldr	r2, [pc, #580]	@ (8009b98 <plotter_begin+0x6f8>)
 8009954:	4982      	ldr	r1, [pc, #520]	@ (8009b60 <plotter_begin+0x6c0>)
 8009956:	4891      	ldr	r0, [pc, #580]	@ (8009b9c <plotter_begin+0x6fc>)
 8009958:	f7f7 fe7d 	bl	8001656 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 800995c:	4a8e      	ldr	r2, [pc, #568]	@ (8009b98 <plotter_begin+0x6f8>)
 800995e:	4978      	ldr	r1, [pc, #480]	@ (8009b40 <plotter_begin+0x6a0>)
 8009960:	488f      	ldr	r0, [pc, #572]	@ (8009ba0 <plotter_begin+0x700>)
 8009962:	f7f8 f809 	bl	8001978 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 8009966:	2302      	movs	r3, #2
 8009968:	9300      	str	r3, [sp, #0]
 800996a:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 8009ba4 <plotter_begin+0x704>
 800996e:	ed9f 0a8e 	vldr	s0, [pc, #568]	@ 8009ba8 <plotter_begin+0x708>
 8009972:	2364      	movs	r3, #100	@ 0x64
 8009974:	4a8d      	ldr	r2, [pc, #564]	@ (8009bac <plotter_begin+0x70c>)
 8009976:	498e      	ldr	r1, [pc, #568]	@ (8009bb0 <plotter_begin+0x710>)
 8009978:	488e      	ldr	r0, [pc, #568]	@ (8009bb4 <plotter_begin+0x714>)
 800997a:	f7f7 fad1 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 800997e:	2105      	movs	r1, #5
 8009980:	ed9f 0a8d 	vldr	s0, [pc, #564]	@ 8009bb8 <plotter_begin+0x718>
 8009984:	488b      	ldr	r0, [pc, #556]	@ (8009bb4 <plotter_begin+0x714>)
 8009986:	f7f7 fb7d 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 800998a:	488a      	ldr	r0, [pc, #552]	@ (8009bb4 <plotter_begin+0x714>)
 800998c:	f7f7 fb20 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8009990:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 8009bbc <plotter_begin+0x71c>
 8009994:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009998:	211f      	movs	r1, #31
 800999a:	4889      	ldr	r0, [pc, #548]	@ (8009bc0 <plotter_begin+0x720>)
 800999c:	f7f8 f8c8 	bl	8001b30 <FIR_init>
	FIR_init(&revolute_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80099a0:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8009bbc <plotter_begin+0x71c>
 80099a4:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 80099a8:	211f      	movs	r1, #31
 80099aa:	4886      	ldr	r0, [pc, #536]	@ (8009bc4 <plotter_begin+0x724>)
 80099ac:	f7f8 f8c0 	bl	8001b30 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80099b0:	4b63      	ldr	r3, [pc, #396]	@ (8009b40 <plotter_begin+0x6a0>)
 80099b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099b6:	4610      	mov	r0, r2
 80099b8:	4619      	mov	r1, r3
 80099ba:	f7f7 f8cb 	bl	8000b54 <__aeabi_d2f>
 80099be:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80099c0:	4b5f      	ldr	r3, [pc, #380]	@ (8009b40 <plotter_begin+0x6a0>)
 80099c2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80099c6:	4610      	mov	r0, r2
 80099c8:	4619      	mov	r1, r3
 80099ca:	f7f7 f8c3 	bl	8000b54 <__aeabi_d2f>
 80099ce:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80099d0:	4b5b      	ldr	r3, [pc, #364]	@ (8009b40 <plotter_begin+0x6a0>)
 80099d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80099d6:	4610      	mov	r0, r2
 80099d8:	4619      	mov	r1, r3
 80099da:	f7f7 f8bb 	bl	8000b54 <__aeabi_d2f>
 80099de:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 80099e0:	4b57      	ldr	r3, [pc, #348]	@ (8009b40 <plotter_begin+0x6a0>)
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80099e6:	4610      	mov	r0, r2
 80099e8:	4619      	mov	r1, r3
 80099ea:	f7f7 f8b3 	bl	8000b54 <__aeabi_d2f>
 80099ee:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 80099f0:	4b53      	ldr	r3, [pc, #332]	@ (8009b40 <plotter_begin+0x6a0>)
 80099f2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80099f6:	4610      	mov	r0, r2
 80099f8:	4619      	mov	r1, r3
 80099fa:	f7f7 f8ab 	bl	8000b54 <__aeabi_d2f>
 80099fe:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 8009a00:	4b4f      	ldr	r3, [pc, #316]	@ (8009b40 <plotter_begin+0x6a0>)
 8009a02:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8009a06:	4610      	mov	r0, r2
 8009a08:	4619      	mov	r1, r3
 8009a0a:	f7f7 f8a3 	bl	8000b54 <__aeabi_d2f>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 8009a14:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8009a18:	ee03 3a10 	vmov	s6, r3
 8009a1c:	ee02 9a90 	vmov	s5, r9
 8009a20:	ee02 8a10 	vmov	s4, r8
 8009a24:	ee01 6a90 	vmov	s3, r6
 8009a28:	ee01 5a10 	vmov	s2, r5
 8009a2c:	ee00 4a90 	vmov	s1, r4
 8009a30:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8009b68 <plotter_begin+0x6c8>
 8009a34:	4864      	ldr	r0, [pc, #400]	@ (8009bc8 <plotter_begin+0x728>)
 8009a36:	f7f8 fd73 	bl	8002520 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009a3a:	4b49      	ldr	r3, [pc, #292]	@ (8009b60 <plotter_begin+0x6c0>)
 8009a3c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009a40:	4610      	mov	r0, r2
 8009a42:	4619      	mov	r1, r3
 8009a44:	f7f7 f886 	bl	8000b54 <__aeabi_d2f>
 8009a48:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8009a4a:	4b45      	ldr	r3, [pc, #276]	@ (8009b60 <plotter_begin+0x6c0>)
 8009a4c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009a50:	4610      	mov	r0, r2
 8009a52:	4619      	mov	r1, r3
 8009a54:	f7f7 f87e 	bl	8000b54 <__aeabi_d2f>
 8009a58:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8009a5a:	4b41      	ldr	r3, [pc, #260]	@ (8009b60 <plotter_begin+0x6c0>)
 8009a5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009a60:	4610      	mov	r0, r2
 8009a62:	4619      	mov	r1, r3
 8009a64:	f7f7 f876 	bl	8000b54 <__aeabi_d2f>
 8009a68:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8009a6a:	4b3d      	ldr	r3, [pc, #244]	@ (8009b60 <plotter_begin+0x6c0>)
 8009a6c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8009a70:	a327      	add	r3, pc, #156	@ (adr r3, 8009b10 <plotter_begin+0x670>)
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	f7f6 fd8b 	bl	8000590 <__aeabi_dmul>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009a7e:	4610      	mov	r0, r2
 8009a80:	4619      	mov	r1, r3
 8009a82:	f7f7 f867 	bl	8000b54 <__aeabi_d2f>
 8009a86:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8009a88:	4b35      	ldr	r3, [pc, #212]	@ (8009b60 <plotter_begin+0x6c0>)
 8009a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009a8e:	4610      	mov	r0, r2
 8009a90:	4619      	mov	r1, r3
 8009a92:	f7f7 f85f 	bl	8000b54 <__aeabi_d2f>
 8009a96:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt, 0.001, &revolute_A, &revolute_B);
 8009a98:	4b31      	ldr	r3, [pc, #196]	@ (8009b60 <plotter_begin+0x6c0>)
 8009a9a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009a9e:	4610      	mov	r0, r2
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	f7f7 f857 	bl	8000b54 <__aeabi_d2f>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	4948      	ldr	r1, [pc, #288]	@ (8009bcc <plotter_begin+0x72c>)
 8009aaa:	4849      	ldr	r0, [pc, #292]	@ (8009bd0 <plotter_begin+0x730>)
 8009aac:	ed9f 3a2e 	vldr	s6, [pc, #184]	@ 8009b68 <plotter_begin+0x6c8>
 8009ab0:	ee02 3a90 	vmov	s5, r3
 8009ab4:	ee02 9a10 	vmov	s4, r9
 8009ab8:	ee01 8a90 	vmov	s3, r8
 8009abc:	ee01 6a10 	vmov	s2, r6
 8009ac0:	ee00 5a90 	vmov	s1, r5
 8009ac4:	ee00 4a10 	vmov	s0, r4
 8009ac8:	f7f9 fed6 	bl	8003878 <GenerateMotorMatrices>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8009acc:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8009bd4 <plotter_begin+0x734>
 8009ad0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009ad4:	4a3d      	ldr	r2, [pc, #244]	@ (8009bcc <plotter_begin+0x72c>)
 8009ad6:	493e      	ldr	r1, [pc, #248]	@ (8009bd0 <plotter_begin+0x730>)
 8009ad8:	483f      	ldr	r0, [pc, #252]	@ (8009bd8 <plotter_begin+0x738>)
 8009ada:	f7fb fc49 	bl	8005370 <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8009ade:	23c8      	movs	r3, #200	@ 0xc8
 8009ae0:	9301      	str	r3, [sp, #4]
 8009ae2:	2315      	movs	r3, #21
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8009bdc <plotter_begin+0x73c>)
 8009ae8:	4a3d      	ldr	r2, [pc, #244]	@ (8009be0 <plotter_begin+0x740>)
 8009aea:	493e      	ldr	r1, [pc, #248]	@ (8009be4 <plotter_begin+0x744>)
 8009aec:	483e      	ldr	r0, [pc, #248]	@ (8009be8 <plotter_begin+0x748>)
 8009aee:	f7f8 fa0f 	bl	8001f10 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8009af2:	483e      	ldr	r0, [pc, #248]	@ (8009bec <plotter_begin+0x74c>)
 8009af4:	f004 fe0c 	bl	800e710 <HAL_TIM_Base_Start_IT>

	plotter_reset();
 8009af8:	f000 f87a 	bl	8009bf0 <plotter_reset>
}
 8009afc:	bf00      	nop
 8009afe:	3704      	adds	r7, #4
 8009b00:	46bd      	mov	sp, r7
 8009b02:	ecbd 8b02 	vpop	{d8}
 8009b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b0a:	bf00      	nop
 8009b0c:	f3af 8000 	nop.w
 8009b10:	9999999a 	.word	0x9999999a
 8009b14:	40019999 	.word	0x40019999
 8009b18:	200020d8 	.word	0x200020d8
 8009b1c:	200009dc 	.word	0x200009dc
 8009b20:	20002270 	.word	0x20002270
 8009b24:	200008e8 	.word	0x200008e8
 8009b28:	48000800 	.word	0x48000800
 8009b2c:	20000934 	.word	0x20000934
 8009b30:	20001e74 	.word	0x20001e74
 8009b34:	20000b18 	.word	0x20000b18
 8009b38:	00000000 	.word	0x00000000
 8009b3c:	44fa0000 	.word	0x44fa0000
 8009b40:	20000080 	.word	0x20000080
 8009b44:	42ce0000 	.word	0x42ce0000
 8009b48:	2edbe6ff 	.word	0x2edbe6ff
 8009b4c:	42960000 	.word	0x42960000
 8009b50:	20000a38 	.word	0x20000a38
 8009b54:	3727c5ac 	.word	0x3727c5ac
 8009b58:	43160000 	.word	0x43160000
 8009b5c:	20000a60 	.word	0x20000a60
 8009b60:	20000000 	.word	0x20000000
 8009b64:	442f0000 	.word	0x442f0000
 8009b68:	3a83126f 	.word	0x3a83126f
 8009b6c:	437a0000 	.word	0x437a0000
 8009b70:	20000a88 	.word	0x20000a88
 8009b74:	453b4000 	.word	0x453b4000
 8009b78:	41f40000 	.word	0x41f40000
 8009b7c:	450e3000 	.word	0x450e3000
 8009b80:	20000ab0 	.word	0x20000ab0
 8009b84:	42c80000 	.word	0x42c80000
 8009b88:	45ea6000 	.word	0x45ea6000
 8009b8c:	20000ad8 	.word	0x20000ad8
 8009b90:	20000b0c 	.word	0x20000b0c
 8009b94:	20000b00 	.word	0x20000b00
 8009b98:	20000100 	.word	0x20000100
 8009b9c:	20000b10 	.word	0x20000b10
 8009ba0:	20000b04 	.word	0x20000b04
 8009ba4:	457ff000 	.word	0x457ff000
 8009ba8:	40533333 	.word	0x40533333
 8009bac:	20000fe4 	.word	0x20000fe4
 8009bb0:	20000638 	.word	0x20000638
 8009bb4:	20000b30 	.word	0x20000b30
 8009bb8:	45000000 	.word	0x45000000
 8009bbc:	447a0000 	.word	0x447a0000
 8009bc0:	20000fcc 	.word	0x20000fcc
 8009bc4:	20000fd8 	.word	0x20000fd8
 8009bc8:	20001714 	.word	0x20001714
 8009bcc:	20001e40 	.word	0x20001e40
 8009bd0:	20001e00 	.word	0x20001e00
 8009bd4:	3d4ccccd 	.word	0x3d4ccccd
 8009bd8:	20001a80 	.word	0x20001a80
 8009bdc:	20001584 	.word	0x20001584
 8009be0:	2000233c 	.word	0x2000233c
 8009be4:	200024d4 	.word	0x200024d4
 8009be8:	200010ac 	.word	0x200010ac
 8009bec:	20001f40 	.word	0x20001f40

08009bf0 <plotter_reset>:

void plotter_reset() {
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 8009bf4:	4819      	ldr	r0, [pc, #100]	@ (8009c5c <plotter_reset+0x6c>)
 8009bf6:	f7fa fb57 	bl	80042a8 <QEI_reset>
	QEI_reset(&prismatic_encoder);
 8009bfa:	4818      	ldr	r0, [pc, #96]	@ (8009c5c <plotter_reset+0x6c>)
 8009bfc:	f7fa fb54 	bl	80042a8 <QEI_reset>

	prismatic_encoder.diff_counts = 0;
 8009c00:	4b16      	ldr	r3, [pc, #88]	@ (8009c5c <plotter_reset+0x6c>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 8009c06:	4b15      	ldr	r3, [pc, #84]	@ (8009c5c <plotter_reset+0x6c>)
 8009c08:	f04f 0200 	mov.w	r2, #0
 8009c0c:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 8009c0e:	4b13      	ldr	r3, [pc, #76]	@ (8009c5c <plotter_reset+0x6c>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 8009c14:	4b11      	ldr	r3, [pc, #68]	@ (8009c5c <plotter_reset+0x6c>)
 8009c16:	f04f 0200 	mov.w	r2, #0
 8009c1a:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 8009c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8009c5c <plotter_reset+0x6c>)
 8009c1e:	f04f 0200 	mov.w	r2, #0
 8009c22:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 8009c24:	4b0d      	ldr	r3, [pc, #52]	@ (8009c5c <plotter_reset+0x6c>)
 8009c26:	f04f 0200 	mov.w	r2, #0
 8009c2a:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 8009c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8009c60 <plotter_reset+0x70>)
 8009c2e:	2200      	movs	r2, #0
 8009c30:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 8009c32:	4b0b      	ldr	r3, [pc, #44]	@ (8009c60 <plotter_reset+0x70>)
 8009c34:	f04f 0200 	mov.w	r2, #0
 8009c38:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 8009c3a:	4b09      	ldr	r3, [pc, #36]	@ (8009c60 <plotter_reset+0x70>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 8009c40:	4b07      	ldr	r3, [pc, #28]	@ (8009c60 <plotter_reset+0x70>)
 8009c42:	f04f 0200 	mov.w	r2, #0
 8009c46:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 8009c48:	4b05      	ldr	r3, [pc, #20]	@ (8009c60 <plotter_reset+0x70>)
 8009c4a:	f04f 0200 	mov.w	r2, #0
 8009c4e:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 8009c50:	4b03      	ldr	r3, [pc, #12]	@ (8009c60 <plotter_reset+0x70>)
 8009c52:	f04f 0200 	mov.w	r2, #0
 8009c56:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8009c58:	bf00      	nop
 8009c5a:	bd80      	pop	{r7, pc}
 8009c5c:	20000980 	.word	0x20000980
 8009c60:	200009dc 	.word	0x200009dc

08009c64 <plotter_update_sensors>:

void plotter_update_sensors() {
 8009c64:	b580      	push	{r7, lr}
 8009c66:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 8009c68:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8009d74 <plotter_update_sensors+0x110>
 8009c6c:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8009d78 <plotter_update_sensors+0x114>
 8009c70:	2106      	movs	r1, #6
 8009c72:	4842      	ldr	r0, [pc, #264]	@ (8009d7c <plotter_update_sensors+0x118>)
 8009c74:	f7f7 fa30 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8009c78:	eef0 7a40 	vmov.f32	s15, s0
 8009c7c:	4b40      	ldr	r3, [pc, #256]	@ (8009d80 <plotter_update_sensors+0x11c>)
 8009c7e:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 8009c82:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8009d74 <plotter_update_sensors+0x110>
 8009c86:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8009d78 <plotter_update_sensors+0x114>
 8009c8a:	2107      	movs	r1, #7
 8009c8c:	483b      	ldr	r0, [pc, #236]	@ (8009d7c <plotter_update_sensors+0x118>)
 8009c8e:	f7f7 fa23 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8009c92:	eef0 7a40 	vmov.f32	s15, s0
 8009c96:	4b3b      	ldr	r3, [pc, #236]	@ (8009d84 <plotter_update_sensors+0x120>)
 8009c98:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8009c9c:	2180      	movs	r1, #128	@ 0x80
 8009c9e:	483a      	ldr	r0, [pc, #232]	@ (8009d88 <plotter_update_sensors+0x124>)
 8009ca0:	f003 fbd0 	bl	800d444 <HAL_GPIO_ReadPin>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	bf0c      	ite	eq
 8009caa:	2301      	moveq	r3, #1
 8009cac:	2300      	movne	r3, #0
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	4b36      	ldr	r3, [pc, #216]	@ (8009d8c <plotter_update_sensors+0x128>)
 8009cb4:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8009cb6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009cba:	4835      	ldr	r0, [pc, #212]	@ (8009d90 <plotter_update_sensors+0x12c>)
 8009cbc:	f003 fbc2 	bl	800d444 <HAL_GPIO_ReadPin>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	bf0c      	ite	eq
 8009cc6:	2301      	moveq	r3, #1
 8009cc8:	2300      	movne	r3, #0
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	461a      	mov	r2, r3
 8009cce:	4b31      	ldr	r3, [pc, #196]	@ (8009d94 <plotter_update_sensors+0x130>)
 8009cd0:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8009cd2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009cd6:	482e      	ldr	r0, [pc, #184]	@ (8009d90 <plotter_update_sensors+0x12c>)
 8009cd8:	f003 fbb4 	bl	800d444 <HAL_GPIO_ReadPin>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	bf0c      	ite	eq
 8009ce2:	2301      	moveq	r3, #1
 8009ce4:	2300      	movne	r3, #0
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	461a      	mov	r2, r3
 8009cea:	4b2b      	ldr	r3, [pc, #172]	@ (8009d98 <plotter_update_sensors+0x134>)
 8009cec:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 8009cee:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009cf2:	4827      	ldr	r0, [pc, #156]	@ (8009d90 <plotter_update_sensors+0x12c>)
 8009cf4:	f003 fba6 	bl	800d444 <HAL_GPIO_ReadPin>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	bf0c      	ite	eq
 8009cfe:	2301      	moveq	r3, #1
 8009d00:	2300      	movne	r3, #0
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	461a      	mov	r2, r3
 8009d06:	4b25      	ldr	r3, [pc, #148]	@ (8009d9c <plotter_update_sensors+0x138>)
 8009d08:	601a      	str	r2, [r3, #0]

	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8009d0a:	2104      	movs	r1, #4
 8009d0c:	481e      	ldr	r0, [pc, #120]	@ (8009d88 <plotter_update_sensors+0x124>)
 8009d0e:	f003 fb99 	bl	800d444 <HAL_GPIO_ReadPin>
 8009d12:	4603      	mov	r3, r0
 8009d14:	461a      	mov	r2, r3
 8009d16:	4b22      	ldr	r3, [pc, #136]	@ (8009da0 <plotter_update_sensors+0x13c>)
 8009d18:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8009d1a:	2102      	movs	r1, #2
 8009d1c:	481a      	ldr	r0, [pc, #104]	@ (8009d88 <plotter_update_sensors+0x124>)
 8009d1e:	f003 fb91 	bl	800d444 <HAL_GPIO_ReadPin>
 8009d22:	4603      	mov	r3, r0
 8009d24:	461a      	mov	r2, r3
 8009d26:	4b1f      	ldr	r3, [pc, #124]	@ (8009da4 <plotter_update_sensors+0x140>)
 8009d28:	601a      	str	r2, [r3, #0]

	extern bool homing_active;
	if (!homing_active) {
 8009d2a:	4b1f      	ldr	r3, [pc, #124]	@ (8009da8 <plotter_update_sensors+0x144>)
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	f083 0301 	eor.w	r3, r3, #1
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d01a      	beq.n	8009d6e <plotter_update_sensors+0x10a>
		extern volatile bool up_photo, low_photo;
		up_photo = HAL_GPIO_ReadPin(upperphoto_GPIO_Port, upperphoto_Pin);
 8009d38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009d3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009d40:	f003 fb80 	bl	800d444 <HAL_GPIO_ReadPin>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	bf14      	ite	ne
 8009d4a:	2301      	movne	r3, #1
 8009d4c:	2300      	moveq	r3, #0
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	4b16      	ldr	r3, [pc, #88]	@ (8009dac <plotter_update_sensors+0x148>)
 8009d52:	701a      	strb	r2, [r3, #0]
		low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8009d54:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009d58:	480b      	ldr	r0, [pc, #44]	@ (8009d88 <plotter_update_sensors+0x124>)
 8009d5a:	f003 fb73 	bl	800d444 <HAL_GPIO_ReadPin>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	bf14      	ite	ne
 8009d64:	2301      	movne	r3, #1
 8009d66:	2300      	moveq	r3, #0
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	4b11      	ldr	r3, [pc, #68]	@ (8009db0 <plotter_update_sensors+0x14c>)
 8009d6c:	701a      	strb	r2, [r3, #0]
	}
}
 8009d6e:	bf00      	nop
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	42480000 	.word	0x42480000
 8009d78:	c2480000 	.word	0xc2480000
 8009d7c:	20000b30 	.word	0x20000b30
 8009d80:	20001e50 	.word	0x20001e50
 8009d84:	20001e54 	.word	0x20001e54
 8009d88:	48000400 	.word	0x48000400
 8009d8c:	20001e60 	.word	0x20001e60
 8009d90:	48000800 	.word	0x48000800
 8009d94:	20001e64 	.word	0x20001e64
 8009d98:	20001e68 	.word	0x20001e68
 8009d9c:	20001e6c 	.word	0x20001e6c
 8009da0:	20001e58 	.word	0x20001e58
 8009da4:	20001e5c 	.word	0x20001e5c
 8009da8:	200007eb 	.word	0x200007eb
 8009dac:	200007e8 	.word	0x200007e8
 8009db0:	200007e9 	.word	0x200007e9

08009db4 <plotter_pen_up>:

void plotter_pen_up() {
 8009db4:	b580      	push	{r7, lr}
 8009db6:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8009db8:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8009dbc:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009dcc <plotter_pen_up+0x18>
 8009dc0:	4803      	ldr	r0, [pc, #12]	@ (8009dd0 <plotter_pen_up+0x1c>)
 8009dc2:	f7f9 fde3 	bl	800398c <PWM_write_duty>
}
 8009dc6:	bf00      	nop
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	42480000 	.word	0x42480000
 8009dd0:	20000b18 	.word	0x20000b18

08009dd4 <plotter_pen_down>:

void plotter_pen_down() {
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 10);
 8009dd8:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8009ddc:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009dec <plotter_pen_down+0x18>
 8009de0:	4803      	ldr	r0, [pc, #12]	@ (8009df0 <plotter_pen_down+0x1c>)
 8009de2:	f7f9 fdd3 	bl	800398c <PWM_write_duty>
}
 8009de6:	bf00      	nop
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	42480000 	.word	0x42480000
 8009df0:	20000b18 	.word	0x20000b18

08009df4 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8009df4:	b480      	push	{r7}
 8009df6:	b083      	sub	sp, #12
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	78fa      	ldrb	r2, [r7, #3]
 8009e04:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009e0c:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009e14:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f04f 0200 	mov.w	r2, #0
 8009e1c:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f04f 0200 	mov.w	r2, #0
 8009e24:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f04f 0200 	mov.w	r2, #0
 8009e2c:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f04f 0200 	mov.w	r2, #0
 8009e34:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	4a1b      	ldr	r2, [pc, #108]	@ (8009ea8 <SIGNAL_init+0xb4>)
 8009e3a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009e42:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8009e44:	78fb      	ldrb	r3, [r7, #3]
 8009e46:	2b03      	cmp	r3, #3
 8009e48:	d828      	bhi.n	8009e9c <SIGNAL_init+0xa8>
 8009e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e50 <SIGNAL_init+0x5c>)
 8009e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e50:	08009e9b 	.word	0x08009e9b
 8009e54:	08009e61 	.word	0x08009e61
 8009e58:	08009e7f 	.word	0x08009e7f
 8009e5c:	08009e89 	.word	0x08009e89
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009e6c:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a0e      	ldr	r2, [pc, #56]	@ (8009eac <SIGNAL_init+0xb8>)
 8009e72:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009e7a:	621a      	str	r2, [r3, #32]
            break;
 8009e7c:	e00e      	b.n	8009e9c <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8009e84:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8009e86:	e009      	b.n	8009e9c <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f04f 0200 	mov.w	r2, #0
 8009e8e:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009e96:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8009e98:	e000      	b.n	8009e9c <SIGNAL_init+0xa8>
            break;
 8009e9a:	bf00      	nop
    }
}
 8009e9c:	bf00      	nop
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr
 8009ea8:	bf800000 	.word	0xbf800000
 8009eac:	41200000 	.word	0x41200000

08009eb0 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8009eb0:	b480      	push	{r7}
 8009eb2:	b089      	sub	sp, #36	@ 0x24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	61f8      	str	r0, [r7, #28]
 8009eb8:	ed87 0a06 	vstr	s0, [r7, #24]
 8009ebc:	edc7 0a05 	vstr	s1, [r7, #20]
 8009ec0:	ed87 1a04 	vstr	s2, [r7, #16]
 8009ec4:	edc7 1a03 	vstr	s3, [r7, #12]
 8009ec8:	ed87 2a02 	vstr	s4, [r7, #8]
 8009ecc:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8009ed0:	69fb      	ldr	r3, [r7, #28]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	69ba      	ldr	r2, [r7, #24]
 8009eda:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	68fa      	ldr	r2, [r7, #12]
 8009eec:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009efa:	bf00      	nop
 8009efc:	3724      	adds	r7, #36	@ 0x24
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8009f06:	b480      	push	{r7}
 8009f08:	b089      	sub	sp, #36	@ 0x24
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	61f8      	str	r0, [r7, #28]
 8009f0e:	ed87 0a06 	vstr	s0, [r7, #24]
 8009f12:	edc7 0a05 	vstr	s1, [r7, #20]
 8009f16:	ed87 1a04 	vstr	s2, [r7, #16]
 8009f1a:	edc7 1a03 	vstr	s3, [r7, #12]
 8009f1e:	ed87 2a02 	vstr	s4, [r7, #8]
 8009f22:	edc7 2a01 	vstr	s5, [r7, #4]
 8009f26:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	2202      	movs	r2, #2
 8009f2e:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	69ba      	ldr	r2, [r7, #24]
 8009f34:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	68fa      	ldr	r2, [r7, #12]
 8009f46:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009f5a:	bf00      	nop
 8009f5c:	3724      	adds	r7, #36	@ 0x24
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr
	...

08009f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8009fac <HAL_MspInit+0x44>)
 8009f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f72:	4a0e      	ldr	r2, [pc, #56]	@ (8009fac <HAL_MspInit+0x44>)
 8009f74:	f043 0301 	orr.w	r3, r3, #1
 8009f78:	6613      	str	r3, [r2, #96]	@ 0x60
 8009f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8009fac <HAL_MspInit+0x44>)
 8009f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f7e:	f003 0301 	and.w	r3, r3, #1
 8009f82:	607b      	str	r3, [r7, #4]
 8009f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009f86:	4b09      	ldr	r3, [pc, #36]	@ (8009fac <HAL_MspInit+0x44>)
 8009f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f8a:	4a08      	ldr	r2, [pc, #32]	@ (8009fac <HAL_MspInit+0x44>)
 8009f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f90:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f92:	4b06      	ldr	r3, [pc, #24]	@ (8009fac <HAL_MspInit+0x44>)
 8009f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009f9a:	603b      	str	r3, [r7, #0]
 8009f9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8009f9e:	f003 fb57 	bl	800d650 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009fa2:	bf00      	nop
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	40021000 	.word	0x40021000

08009fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009fb4:	bf00      	nop
 8009fb6:	e7fd      	b.n	8009fb4 <NMI_Handler+0x4>

08009fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009fbc:	bf00      	nop
 8009fbe:	e7fd      	b.n	8009fbc <HardFault_Handler+0x4>

08009fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009fc4:	bf00      	nop
 8009fc6:	e7fd      	b.n	8009fc4 <MemManage_Handler+0x4>

08009fc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009fcc:	bf00      	nop
 8009fce:	e7fd      	b.n	8009fcc <BusFault_Handler+0x4>

08009fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009fd4:	bf00      	nop
 8009fd6:	e7fd      	b.n	8009fd4 <UsageFault_Handler+0x4>

08009fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009fdc:	bf00      	nop
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr

08009fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009fea:	bf00      	nop
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009ff8:	bf00      	nop
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a006:	f000 ffc3 	bl	800af90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a00a:	bf00      	nop
 800a00c:	bd80      	pop	{r7, pc}

0800a00e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a00e:	b580      	push	{r7, lr}
 800a010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 800a012:	2001      	movs	r0, #1
 800a014:	f003 fa60 	bl	800d4d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800a018:	bf00      	nop
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 800a020:	2010      	movs	r0, #16
 800a022:	f003 fa59 	bl	800d4d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800a026:	bf00      	nop
 800a028:	bd80      	pop	{r7, pc}
	...

0800a02c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a030:	4802      	ldr	r0, [pc, #8]	@ (800a03c <DMA1_Channel1_IRQHandler+0x10>)
 800a032:	f002 ff36 	bl	800cea2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a036:	bf00      	nop
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	200006a4 	.word	0x200006a4

0800a040 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800a044:	4802      	ldr	r0, [pc, #8]	@ (800a050 <DMA1_Channel2_IRQHandler+0x10>)
 800a046:	f002 ff2c 	bl	800cea2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800a04a:	bf00      	nop
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20002660 	.word	0x20002660

0800a054 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800a058:	4802      	ldr	r0, [pc, #8]	@ (800a064 <DMA1_Channel3_IRQHandler+0x10>)
 800a05a:	f002 ff22 	bl	800cea2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800a05e:	bf00      	nop
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	200026c0 	.word	0x200026c0

0800a068 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800a06c:	4802      	ldr	r0, [pc, #8]	@ (800a078 <DMA1_Channel4_IRQHandler+0x10>)
 800a06e:	f002 ff18 	bl	800cea2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800a072:	bf00      	nop
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	200025a0 	.word	0x200025a0

0800a07c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 800a080:	4802      	ldr	r0, [pc, #8]	@ (800a08c <DMA1_Channel5_IRQHandler+0x10>)
 800a082:	f002 ff0e 	bl	800cea2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800a086:	bf00      	nop
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	20002600 	.word	0x20002600

0800a090 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(prox_Pin);
 800a094:	2020      	movs	r0, #32
 800a096:	f003 fa1f 	bl	800d4d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 800a09a:	2040      	movs	r0, #64	@ 0x40
 800a09c:	f003 fa1c 	bl	800d4d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 800a0a0:	2080      	movs	r0, #128	@ 0x80
 800a0a2:	f003 fa19 	bl	800d4d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(upperphoto_Pin);
 800a0a6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800a0aa:	f003 fa15 	bl	800d4d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a0ae:	bf00      	nop
 800a0b0:	bd80      	pop	{r7, pc}
	...

0800a0b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a0b8:	4803      	ldr	r0, [pc, #12]	@ (800a0c8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800a0ba:	f004 ff4f 	bl	800ef5c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800a0be:	4803      	ldr	r0, [pc, #12]	@ (800a0cc <TIM1_UP_TIM16_IRQHandler+0x18>)
 800a0c0:	f004 ff4c 	bl	800ef5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800a0c4:	bf00      	nop
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	20001e74 	.word	0x20001e74
 800a0cc:	2000233c 	.word	0x2000233c

0800a0d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800a0d4:	4802      	ldr	r0, [pc, #8]	@ (800a0e0 <TIM2_IRQHandler+0x10>)
 800a0d6:	f004 ff41 	bl	800ef5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800a0da:	bf00      	nop
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	20001f40 	.word	0x20001f40

0800a0e4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800a0e8:	4802      	ldr	r0, [pc, #8]	@ (800a0f4 <TIM3_IRQHandler+0x10>)
 800a0ea:	f004 ff37 	bl	800ef5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800a0ee:	bf00      	nop
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	2000200c 	.word	0x2000200c

0800a0f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800a0fc:	4802      	ldr	r0, [pc, #8]	@ (800a108 <TIM4_IRQHandler+0x10>)
 800a0fe:	f004 ff2d 	bl	800ef5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800a102:	bf00      	nop
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	200020d8 	.word	0x200020d8

0800a10c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800a110:	4802      	ldr	r0, [pc, #8]	@ (800a11c <USART2_IRQHandler+0x10>)
 800a112:	f006 fcf7 	bl	8010b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800a116:	bf00      	nop
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	200024d4 	.word	0x200024d4

0800a120 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 800a124:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800a128:	f003 f9d6 	bl	800d4d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 800a12c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800a130:	f003 f9d2 	bl	800d4d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 800a134:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800a138:	f003 f9ce 	bl	800d4d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800a13c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800a140:	f003 f9ca 	bl	800d4d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a144:	bf00      	nop
 800a146:	bd80      	pop	{r7, pc}

0800a148 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800a14c:	4802      	ldr	r0, [pc, #8]	@ (800a158 <LPUART1_IRQHandler+0x10>)
 800a14e:	f006 fcd9 	bl	8010b04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800a152:	bf00      	nop
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	20002408 	.word	0x20002408

0800a15c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a164:	4a14      	ldr	r2, [pc, #80]	@ (800a1b8 <_sbrk+0x5c>)
 800a166:	4b15      	ldr	r3, [pc, #84]	@ (800a1bc <_sbrk+0x60>)
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a170:	4b13      	ldr	r3, [pc, #76]	@ (800a1c0 <_sbrk+0x64>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d102      	bne.n	800a17e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a178:	4b11      	ldr	r3, [pc, #68]	@ (800a1c0 <_sbrk+0x64>)
 800a17a:	4a12      	ldr	r2, [pc, #72]	@ (800a1c4 <_sbrk+0x68>)
 800a17c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a17e:	4b10      	ldr	r3, [pc, #64]	@ (800a1c0 <_sbrk+0x64>)
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4413      	add	r3, r2
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d207      	bcs.n	800a19c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a18c:	f008 ffa8 	bl	80130e0 <__errno>
 800a190:	4603      	mov	r3, r0
 800a192:	220c      	movs	r2, #12
 800a194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a196:	f04f 33ff 	mov.w	r3, #4294967295
 800a19a:	e009      	b.n	800a1b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a19c:	4b08      	ldr	r3, [pc, #32]	@ (800a1c0 <_sbrk+0x64>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a1a2:	4b07      	ldr	r3, [pc, #28]	@ (800a1c0 <_sbrk+0x64>)
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	4a05      	ldr	r2, [pc, #20]	@ (800a1c0 <_sbrk+0x64>)
 800a1ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3718      	adds	r7, #24
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	20020000 	.word	0x20020000
 800a1bc:	00000400 	.word	0x00000400
 800a1c0:	20001e70 	.word	0x20001e70
 800a1c4:	20002870 	.word	0x20002870

0800a1c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a1cc:	4b06      	ldr	r3, [pc, #24]	@ (800a1e8 <SystemInit+0x20>)
 800a1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1d2:	4a05      	ldr	r2, [pc, #20]	@ (800a1e8 <SystemInit+0x20>)
 800a1d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a1d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a1dc:	bf00      	nop
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr
 800a1e6:	bf00      	nop
 800a1e8:	e000ed00 	.word	0xe000ed00

0800a1ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b098      	sub	sp, #96	@ 0x60
 800a1f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a1f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	601a      	str	r2, [r3, #0]
 800a1fa:	605a      	str	r2, [r3, #4]
 800a1fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a1fe:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a202:	2200      	movs	r2, #0
 800a204:	601a      	str	r2, [r3, #0]
 800a206:	605a      	str	r2, [r3, #4]
 800a208:	609a      	str	r2, [r3, #8]
 800a20a:	60da      	str	r2, [r3, #12]
 800a20c:	611a      	str	r2, [r3, #16]
 800a20e:	615a      	str	r2, [r3, #20]
 800a210:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a212:	1d3b      	adds	r3, r7, #4
 800a214:	2234      	movs	r2, #52	@ 0x34
 800a216:	2100      	movs	r1, #0
 800a218:	4618      	mov	r0, r3
 800a21a:	f008 ff49 	bl	80130b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a21e:	4b3b      	ldr	r3, [pc, #236]	@ (800a30c <MX_TIM1_Init+0x120>)
 800a220:	4a3b      	ldr	r2, [pc, #236]	@ (800a310 <MX_TIM1_Init+0x124>)
 800a222:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a224:	4b39      	ldr	r3, [pc, #228]	@ (800a30c <MX_TIM1_Init+0x120>)
 800a226:	2200      	movs	r2, #0
 800a228:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a22a:	4b38      	ldr	r3, [pc, #224]	@ (800a30c <MX_TIM1_Init+0x120>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800a230:	4b36      	ldr	r3, [pc, #216]	@ (800a30c <MX_TIM1_Init+0x120>)
 800a232:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a236:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a238:	4b34      	ldr	r3, [pc, #208]	@ (800a30c <MX_TIM1_Init+0x120>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a23e:	4b33      	ldr	r3, [pc, #204]	@ (800a30c <MX_TIM1_Init+0x120>)
 800a240:	2200      	movs	r2, #0
 800a242:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a244:	4b31      	ldr	r3, [pc, #196]	@ (800a30c <MX_TIM1_Init+0x120>)
 800a246:	2200      	movs	r2, #0
 800a248:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a24a:	4830      	ldr	r0, [pc, #192]	@ (800a30c <MX_TIM1_Init+0x120>)
 800a24c:	f004 fad8 	bl	800e800 <HAL_TIM_PWM_Init>
 800a250:	4603      	mov	r3, r0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d001      	beq.n	800a25a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800a256:	f7ff f91d 	bl	8009494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a25a:	2300      	movs	r3, #0
 800a25c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a25e:	2300      	movs	r3, #0
 800a260:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a262:	2300      	movs	r3, #0
 800a264:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a266:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a26a:	4619      	mov	r1, r3
 800a26c:	4827      	ldr	r0, [pc, #156]	@ (800a30c <MX_TIM1_Init+0x120>)
 800a26e:	f006 f8e9 	bl	8010444 <HAL_TIMEx_MasterConfigSynchronization>
 800a272:	4603      	mov	r3, r0
 800a274:	2b00      	cmp	r3, #0
 800a276:	d001      	beq.n	800a27c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800a278:	f7ff f90c 	bl	8009494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a27c:	2360      	movs	r3, #96	@ 0x60
 800a27e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800a280:	2300      	movs	r3, #0
 800a282:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a284:	2300      	movs	r3, #0
 800a286:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a288:	2300      	movs	r3, #0
 800a28a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a28c:	2300      	movs	r3, #0
 800a28e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a290:	2300      	movs	r3, #0
 800a292:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a294:	2300      	movs	r3, #0
 800a296:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a298:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a29c:	220c      	movs	r2, #12
 800a29e:	4619      	mov	r1, r3
 800a2a0:	481a      	ldr	r0, [pc, #104]	@ (800a30c <MX_TIM1_Init+0x120>)
 800a2a2:	f004 ffd5 	bl	800f250 <HAL_TIM_PWM_ConfigChannel>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d001      	beq.n	800a2b0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800a2ac:	f7ff f8f2 	bl	8009494 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a2c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a2c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a2d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a2da:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a2e8:	1d3b      	adds	r3, r7, #4
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	4807      	ldr	r0, [pc, #28]	@ (800a30c <MX_TIM1_Init+0x120>)
 800a2ee:	f006 f93f 	bl	8010570 <HAL_TIMEx_ConfigBreakDeadTime>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d001      	beq.n	800a2fc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800a2f8:	f7ff f8cc 	bl	8009494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800a2fc:	4803      	ldr	r0, [pc, #12]	@ (800a30c <MX_TIM1_Init+0x120>)
 800a2fe:	f000 fb77 	bl	800a9f0 <HAL_TIM_MspPostInit>

}
 800a302:	bf00      	nop
 800a304:	3760      	adds	r7, #96	@ 0x60
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	20001e74 	.word	0x20001e74
 800a310:	40012c00 	.word	0x40012c00

0800a314 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b088      	sub	sp, #32
 800a318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a31a:	f107 0310 	add.w	r3, r7, #16
 800a31e:	2200      	movs	r2, #0
 800a320:	601a      	str	r2, [r3, #0]
 800a322:	605a      	str	r2, [r3, #4]
 800a324:	609a      	str	r2, [r3, #8]
 800a326:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a328:	1d3b      	adds	r3, r7, #4
 800a32a:	2200      	movs	r2, #0
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	605a      	str	r2, [r3, #4]
 800a330:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a332:	4b1e      	ldr	r3, [pc, #120]	@ (800a3ac <MX_TIM2_Init+0x98>)
 800a334:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a338:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800a33a:	4b1c      	ldr	r3, [pc, #112]	@ (800a3ac <MX_TIM2_Init+0x98>)
 800a33c:	22a9      	movs	r2, #169	@ 0xa9
 800a33e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a340:	4b1a      	ldr	r3, [pc, #104]	@ (800a3ac <MX_TIM2_Init+0x98>)
 800a342:	2200      	movs	r2, #0
 800a344:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800a346:	4b19      	ldr	r3, [pc, #100]	@ (800a3ac <MX_TIM2_Init+0x98>)
 800a348:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800a34c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a34e:	4b17      	ldr	r3, [pc, #92]	@ (800a3ac <MX_TIM2_Init+0x98>)
 800a350:	2200      	movs	r2, #0
 800a352:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a354:	4b15      	ldr	r3, [pc, #84]	@ (800a3ac <MX_TIM2_Init+0x98>)
 800a356:	2200      	movs	r2, #0
 800a358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a35a:	4814      	ldr	r0, [pc, #80]	@ (800a3ac <MX_TIM2_Init+0x98>)
 800a35c:	f004 f904 	bl	800e568 <HAL_TIM_Base_Init>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d001      	beq.n	800a36a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800a366:	f7ff f895 	bl	8009494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a36a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a36e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a370:	f107 0310 	add.w	r3, r7, #16
 800a374:	4619      	mov	r1, r3
 800a376:	480d      	ldr	r0, [pc, #52]	@ (800a3ac <MX_TIM2_Init+0x98>)
 800a378:	f005 f87e 	bl	800f478 <HAL_TIM_ConfigClockSource>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d001      	beq.n	800a386 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800a382:	f7ff f887 	bl	8009494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a386:	2300      	movs	r3, #0
 800a388:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a38a:	2300      	movs	r3, #0
 800a38c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a38e:	1d3b      	adds	r3, r7, #4
 800a390:	4619      	mov	r1, r3
 800a392:	4806      	ldr	r0, [pc, #24]	@ (800a3ac <MX_TIM2_Init+0x98>)
 800a394:	f006 f856 	bl	8010444 <HAL_TIMEx_MasterConfigSynchronization>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d001      	beq.n	800a3a2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800a39e:	f7ff f879 	bl	8009494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a3a2:	bf00      	nop
 800a3a4:	3720      	adds	r7, #32
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	20001f40 	.word	0x20001f40

0800a3b0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b08c      	sub	sp, #48	@ 0x30
 800a3b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a3b6:	f107 030c 	add.w	r3, r7, #12
 800a3ba:	2224      	movs	r2, #36	@ 0x24
 800a3bc:	2100      	movs	r1, #0
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f008 fe76 	bl	80130b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a3c4:	463b      	mov	r3, r7
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	601a      	str	r2, [r3, #0]
 800a3ca:	605a      	str	r2, [r3, #4]
 800a3cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a3ce:	4b21      	ldr	r3, [pc, #132]	@ (800a454 <MX_TIM3_Init+0xa4>)
 800a3d0:	4a21      	ldr	r2, [pc, #132]	@ (800a458 <MX_TIM3_Init+0xa8>)
 800a3d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a3d4:	4b1f      	ldr	r3, [pc, #124]	@ (800a454 <MX_TIM3_Init+0xa4>)
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a3da:	4b1e      	ldr	r3, [pc, #120]	@ (800a454 <MX_TIM3_Init+0xa4>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800a3e0:	4b1c      	ldr	r3, [pc, #112]	@ (800a454 <MX_TIM3_Init+0xa4>)
 800a3e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a3e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a3e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a454 <MX_TIM3_Init+0xa4>)
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a3ee:	4b19      	ldr	r3, [pc, #100]	@ (800a454 <MX_TIM3_Init+0xa4>)
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a400:	2300      	movs	r3, #0
 800a402:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a404:	2300      	movs	r3, #0
 800a406:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a408:	2300      	movs	r3, #0
 800a40a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a40c:	2301      	movs	r3, #1
 800a40e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a410:	2300      	movs	r3, #0
 800a412:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800a414:	2300      	movs	r3, #0
 800a416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800a418:	f107 030c 	add.w	r3, r7, #12
 800a41c:	4619      	mov	r1, r3
 800a41e:	480d      	ldr	r0, [pc, #52]	@ (800a454 <MX_TIM3_Init+0xa4>)
 800a420:	f004 fc5a 	bl	800ecd8 <HAL_TIM_Encoder_Init>
 800a424:	4603      	mov	r3, r0
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800a42a:	f7ff f833 	bl	8009494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a42e:	2300      	movs	r3, #0
 800a430:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a432:	2300      	movs	r3, #0
 800a434:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a436:	463b      	mov	r3, r7
 800a438:	4619      	mov	r1, r3
 800a43a:	4806      	ldr	r0, [pc, #24]	@ (800a454 <MX_TIM3_Init+0xa4>)
 800a43c:	f006 f802 	bl	8010444 <HAL_TIMEx_MasterConfigSynchronization>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d001      	beq.n	800a44a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800a446:	f7ff f825 	bl	8009494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a44a:	bf00      	nop
 800a44c:	3730      	adds	r7, #48	@ 0x30
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	2000200c 	.word	0x2000200c
 800a458:	40000400 	.word	0x40000400

0800a45c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b08c      	sub	sp, #48	@ 0x30
 800a460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a462:	f107 030c 	add.w	r3, r7, #12
 800a466:	2224      	movs	r2, #36	@ 0x24
 800a468:	2100      	movs	r1, #0
 800a46a:	4618      	mov	r0, r3
 800a46c:	f008 fe20 	bl	80130b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a470:	463b      	mov	r3, r7
 800a472:	2200      	movs	r2, #0
 800a474:	601a      	str	r2, [r3, #0]
 800a476:	605a      	str	r2, [r3, #4]
 800a478:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a47a:	4b21      	ldr	r3, [pc, #132]	@ (800a500 <MX_TIM4_Init+0xa4>)
 800a47c:	4a21      	ldr	r2, [pc, #132]	@ (800a504 <MX_TIM4_Init+0xa8>)
 800a47e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800a480:	4b1f      	ldr	r3, [pc, #124]	@ (800a500 <MX_TIM4_Init+0xa4>)
 800a482:	2200      	movs	r2, #0
 800a484:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a486:	4b1e      	ldr	r3, [pc, #120]	@ (800a500 <MX_TIM4_Init+0xa4>)
 800a488:	2200      	movs	r2, #0
 800a48a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800a48c:	4b1c      	ldr	r3, [pc, #112]	@ (800a500 <MX_TIM4_Init+0xa4>)
 800a48e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a492:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a494:	4b1a      	ldr	r3, [pc, #104]	@ (800a500 <MX_TIM4_Init+0xa4>)
 800a496:	2200      	movs	r2, #0
 800a498:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a49a:	4b19      	ldr	r3, [pc, #100]	@ (800a500 <MX_TIM4_Init+0xa4>)
 800a49c:	2200      	movs	r2, #0
 800a49e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a4a0:	2303      	movs	r3, #3
 800a4a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800a4c4:	f107 030c 	add.w	r3, r7, #12
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	480d      	ldr	r0, [pc, #52]	@ (800a500 <MX_TIM4_Init+0xa4>)
 800a4cc:	f004 fc04 	bl	800ecd8 <HAL_TIM_Encoder_Init>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d001      	beq.n	800a4da <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800a4d6:	f7fe ffdd 	bl	8009494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a4e2:	463b      	mov	r3, r7
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	4806      	ldr	r0, [pc, #24]	@ (800a500 <MX_TIM4_Init+0xa4>)
 800a4e8:	f005 ffac 	bl	8010444 <HAL_TIMEx_MasterConfigSynchronization>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d001      	beq.n	800a4f6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800a4f2:	f7fe ffcf 	bl	8009494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a4f6:	bf00      	nop
 800a4f8:	3730      	adds	r7, #48	@ 0x30
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	200020d8 	.word	0x200020d8
 800a504:	40000800 	.word	0x40000800

0800a508 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08c      	sub	sp, #48	@ 0x30
 800a50c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a50e:	f107 030c 	add.w	r3, r7, #12
 800a512:	2224      	movs	r2, #36	@ 0x24
 800a514:	2100      	movs	r1, #0
 800a516:	4618      	mov	r0, r3
 800a518:	f008 fdca 	bl	80130b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a51c:	463b      	mov	r3, r7
 800a51e:	2200      	movs	r2, #0
 800a520:	601a      	str	r2, [r3, #0]
 800a522:	605a      	str	r2, [r3, #4]
 800a524:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a526:	4b21      	ldr	r3, [pc, #132]	@ (800a5ac <MX_TIM5_Init+0xa4>)
 800a528:	4a21      	ldr	r2, [pc, #132]	@ (800a5b0 <MX_TIM5_Init+0xa8>)
 800a52a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800a52c:	4b1f      	ldr	r3, [pc, #124]	@ (800a5ac <MX_TIM5_Init+0xa4>)
 800a52e:	2200      	movs	r2, #0
 800a530:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a532:	4b1e      	ldr	r3, [pc, #120]	@ (800a5ac <MX_TIM5_Init+0xa4>)
 800a534:	2200      	movs	r2, #0
 800a536:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800a538:	4b1c      	ldr	r3, [pc, #112]	@ (800a5ac <MX_TIM5_Init+0xa4>)
 800a53a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a53e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a540:	4b1a      	ldr	r3, [pc, #104]	@ (800a5ac <MX_TIM5_Init+0xa4>)
 800a542:	2200      	movs	r2, #0
 800a544:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a546:	4b19      	ldr	r3, [pc, #100]	@ (800a5ac <MX_TIM5_Init+0xa4>)
 800a548:	2200      	movs	r2, #0
 800a54a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a54c:	2303      	movs	r3, #3
 800a54e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a550:	2300      	movs	r3, #0
 800a552:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a554:	2301      	movs	r3, #1
 800a556:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a558:	2300      	movs	r3, #0
 800a55a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a55c:	2300      	movs	r3, #0
 800a55e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a560:	2300      	movs	r3, #0
 800a562:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a564:	2301      	movs	r3, #1
 800a566:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a568:	2300      	movs	r3, #0
 800a56a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800a570:	f107 030c 	add.w	r3, r7, #12
 800a574:	4619      	mov	r1, r3
 800a576:	480d      	ldr	r0, [pc, #52]	@ (800a5ac <MX_TIM5_Init+0xa4>)
 800a578:	f004 fbae 	bl	800ecd8 <HAL_TIM_Encoder_Init>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d001      	beq.n	800a586 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800a582:	f7fe ff87 	bl	8009494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a586:	2300      	movs	r3, #0
 800a588:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a58a:	2300      	movs	r3, #0
 800a58c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a58e:	463b      	mov	r3, r7
 800a590:	4619      	mov	r1, r3
 800a592:	4806      	ldr	r0, [pc, #24]	@ (800a5ac <MX_TIM5_Init+0xa4>)
 800a594:	f005 ff56 	bl	8010444 <HAL_TIMEx_MasterConfigSynchronization>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800a59e:	f7fe ff79 	bl	8009494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800a5a2:	bf00      	nop
 800a5a4:	3730      	adds	r7, #48	@ 0x30
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	200021a4 	.word	0x200021a4
 800a5b0:	40000c00 	.word	0x40000c00

0800a5b4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b09c      	sub	sp, #112	@ 0x70
 800a5b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a5ba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a5be:	2200      	movs	r2, #0
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	605a      	str	r2, [r3, #4]
 800a5c4:	609a      	str	r2, [r3, #8]
 800a5c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a5c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	601a      	str	r2, [r3, #0]
 800a5d0:	605a      	str	r2, [r3, #4]
 800a5d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a5d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a5d8:	2200      	movs	r2, #0
 800a5da:	601a      	str	r2, [r3, #0]
 800a5dc:	605a      	str	r2, [r3, #4]
 800a5de:	609a      	str	r2, [r3, #8]
 800a5e0:	60da      	str	r2, [r3, #12]
 800a5e2:	611a      	str	r2, [r3, #16]
 800a5e4:	615a      	str	r2, [r3, #20]
 800a5e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a5e8:	1d3b      	adds	r3, r7, #4
 800a5ea:	2234      	movs	r2, #52	@ 0x34
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f008 fd5e 	bl	80130b0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a5f4:	4b4c      	ldr	r3, [pc, #304]	@ (800a728 <MX_TIM8_Init+0x174>)
 800a5f6:	4a4d      	ldr	r2, [pc, #308]	@ (800a72c <MX_TIM8_Init+0x178>)
 800a5f8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800a5fa:	4b4b      	ldr	r3, [pc, #300]	@ (800a728 <MX_TIM8_Init+0x174>)
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a600:	4b49      	ldr	r3, [pc, #292]	@ (800a728 <MX_TIM8_Init+0x174>)
 800a602:	2200      	movs	r2, #0
 800a604:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800a606:	4b48      	ldr	r3, [pc, #288]	@ (800a728 <MX_TIM8_Init+0x174>)
 800a608:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a60c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800a60e:	4b46      	ldr	r3, [pc, #280]	@ (800a728 <MX_TIM8_Init+0x174>)
 800a610:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a614:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a616:	4b44      	ldr	r3, [pc, #272]	@ (800a728 <MX_TIM8_Init+0x174>)
 800a618:	2200      	movs	r2, #0
 800a61a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a61c:	4b42      	ldr	r3, [pc, #264]	@ (800a728 <MX_TIM8_Init+0x174>)
 800a61e:	2200      	movs	r2, #0
 800a620:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a622:	4841      	ldr	r0, [pc, #260]	@ (800a728 <MX_TIM8_Init+0x174>)
 800a624:	f003 ffa0 	bl	800e568 <HAL_TIM_Base_Init>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800a62e:	f7fe ff31 	bl	8009494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a632:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a636:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a638:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a63c:	4619      	mov	r1, r3
 800a63e:	483a      	ldr	r0, [pc, #232]	@ (800a728 <MX_TIM8_Init+0x174>)
 800a640:	f004 ff1a 	bl	800f478 <HAL_TIM_ConfigClockSource>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800a64a:	f7fe ff23 	bl	8009494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800a64e:	4836      	ldr	r0, [pc, #216]	@ (800a728 <MX_TIM8_Init+0x174>)
 800a650:	f004 f8d6 	bl	800e800 <HAL_TIM_PWM_Init>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d001      	beq.n	800a65e <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800a65a:	f7fe ff1b 	bl	8009494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a65e:	2300      	movs	r3, #0
 800a660:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a662:	2300      	movs	r3, #0
 800a664:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a666:	2300      	movs	r3, #0
 800a668:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a66a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a66e:	4619      	mov	r1, r3
 800a670:	482d      	ldr	r0, [pc, #180]	@ (800a728 <MX_TIM8_Init+0x174>)
 800a672:	f005 fee7 	bl	8010444 <HAL_TIMEx_MasterConfigSynchronization>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 800a67c:	f7fe ff0a 	bl	8009494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a680:	2360      	movs	r3, #96	@ 0x60
 800a682:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800a684:	2300      	movs	r3, #0
 800a686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a688:	2300      	movs	r3, #0
 800a68a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a68c:	2300      	movs	r3, #0
 800a68e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a690:	2300      	movs	r3, #0
 800a692:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a694:	2300      	movs	r3, #0
 800a696:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a698:	2300      	movs	r3, #0
 800a69a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a69c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	4820      	ldr	r0, [pc, #128]	@ (800a728 <MX_TIM8_Init+0x174>)
 800a6a6:	f004 fdd3 	bl	800f250 <HAL_TIM_PWM_ConfigChannel>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d001      	beq.n	800a6b4 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800a6b0:	f7fe fef0 	bl	8009494 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a6b4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a6b8:	2204      	movs	r2, #4
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	481a      	ldr	r0, [pc, #104]	@ (800a728 <MX_TIM8_Init+0x174>)
 800a6be:	f004 fdc7 	bl	800f250 <HAL_TIM_PWM_ConfigChannel>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800a6c8:	f7fe fee4 	bl	8009494 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a6e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a6e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a6f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a6f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a700:	2300      	movs	r3, #0
 800a702:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800a704:	1d3b      	adds	r3, r7, #4
 800a706:	4619      	mov	r1, r3
 800a708:	4807      	ldr	r0, [pc, #28]	@ (800a728 <MX_TIM8_Init+0x174>)
 800a70a:	f005 ff31 	bl	8010570 <HAL_TIMEx_ConfigBreakDeadTime>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d001      	beq.n	800a718 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 800a714:	f7fe febe 	bl	8009494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800a718:	4803      	ldr	r0, [pc, #12]	@ (800a728 <MX_TIM8_Init+0x174>)
 800a71a:	f000 f969 	bl	800a9f0 <HAL_TIM_MspPostInit>

}
 800a71e:	bf00      	nop
 800a720:	3770      	adds	r7, #112	@ 0x70
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	20002270 	.word	0x20002270
 800a72c:	40013400 	.word	0x40013400

0800a730 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800a734:	4b14      	ldr	r3, [pc, #80]	@ (800a788 <MX_TIM16_Init+0x58>)
 800a736:	4a15      	ldr	r2, [pc, #84]	@ (800a78c <MX_TIM16_Init+0x5c>)
 800a738:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800a73a:	4b13      	ldr	r3, [pc, #76]	@ (800a788 <MX_TIM16_Init+0x58>)
 800a73c:	22a9      	movs	r2, #169	@ 0xa9
 800a73e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a740:	4b11      	ldr	r3, [pc, #68]	@ (800a788 <MX_TIM16_Init+0x58>)
 800a742:	2200      	movs	r2, #0
 800a744:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800a746:	4b10      	ldr	r3, [pc, #64]	@ (800a788 <MX_TIM16_Init+0x58>)
 800a748:	f240 4279 	movw	r2, #1145	@ 0x479
 800a74c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a74e:	4b0e      	ldr	r3, [pc, #56]	@ (800a788 <MX_TIM16_Init+0x58>)
 800a750:	2200      	movs	r2, #0
 800a752:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800a754:	4b0c      	ldr	r3, [pc, #48]	@ (800a788 <MX_TIM16_Init+0x58>)
 800a756:	2200      	movs	r2, #0
 800a758:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a75a:	4b0b      	ldr	r3, [pc, #44]	@ (800a788 <MX_TIM16_Init+0x58>)
 800a75c:	2200      	movs	r2, #0
 800a75e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800a760:	4809      	ldr	r0, [pc, #36]	@ (800a788 <MX_TIM16_Init+0x58>)
 800a762:	f003 ff01 	bl	800e568 <HAL_TIM_Base_Init>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d001      	beq.n	800a770 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800a76c:	f7fe fe92 	bl	8009494 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 800a770:	2108      	movs	r1, #8
 800a772:	4805      	ldr	r0, [pc, #20]	@ (800a788 <MX_TIM16_Init+0x58>)
 800a774:	f004 f9ba 	bl	800eaec <HAL_TIM_OnePulse_Init>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d001      	beq.n	800a782 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800a77e:	f7fe fe89 	bl	8009494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800a782:	bf00      	nop
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	2000233c 	.word	0x2000233c
 800a78c:	40014400 	.word	0x40014400

0800a790 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b084      	sub	sp, #16
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a0d      	ldr	r2, [pc, #52]	@ (800a7d4 <HAL_TIM_PWM_MspInit+0x44>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d113      	bne.n	800a7ca <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a7a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a7d8 <HAL_TIM_PWM_MspInit+0x48>)
 800a7a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7a6:	4a0c      	ldr	r2, [pc, #48]	@ (800a7d8 <HAL_TIM_PWM_MspInit+0x48>)
 800a7a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a7ac:	6613      	str	r3, [r2, #96]	@ 0x60
 800a7ae:	4b0a      	ldr	r3, [pc, #40]	@ (800a7d8 <HAL_TIM_PWM_MspInit+0x48>)
 800a7b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a7b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a7b6:	60fb      	str	r3, [r7, #12]
 800a7b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2100      	movs	r1, #0
 800a7be:	2019      	movs	r0, #25
 800a7c0:	f002 f957 	bl	800ca72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a7c4:	2019      	movs	r0, #25
 800a7c6:	f002 f96e 	bl	800caa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800a7ca:	bf00      	nop
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	40012c00 	.word	0x40012c00
 800a7d8:	40021000 	.word	0x40021000

0800a7dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ec:	d114      	bne.n	800a818 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a7ee:	4b22      	ldr	r3, [pc, #136]	@ (800a878 <HAL_TIM_Base_MspInit+0x9c>)
 800a7f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7f2:	4a21      	ldr	r2, [pc, #132]	@ (800a878 <HAL_TIM_Base_MspInit+0x9c>)
 800a7f4:	f043 0301 	orr.w	r3, r3, #1
 800a7f8:	6593      	str	r3, [r2, #88]	@ 0x58
 800a7fa:	4b1f      	ldr	r3, [pc, #124]	@ (800a878 <HAL_TIM_Base_MspInit+0x9c>)
 800a7fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7fe:	f003 0301 	and.w	r3, r3, #1
 800a802:	617b      	str	r3, [r7, #20]
 800a804:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800a806:	2200      	movs	r2, #0
 800a808:	2100      	movs	r1, #0
 800a80a:	201c      	movs	r0, #28
 800a80c:	f002 f931 	bl	800ca72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a810:	201c      	movs	r0, #28
 800a812:	f002 f948 	bl	800caa6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800a816:	e02a      	b.n	800a86e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a17      	ldr	r2, [pc, #92]	@ (800a87c <HAL_TIM_Base_MspInit+0xa0>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d10c      	bne.n	800a83c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a822:	4b15      	ldr	r3, [pc, #84]	@ (800a878 <HAL_TIM_Base_MspInit+0x9c>)
 800a824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a826:	4a14      	ldr	r2, [pc, #80]	@ (800a878 <HAL_TIM_Base_MspInit+0x9c>)
 800a828:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a82c:	6613      	str	r3, [r2, #96]	@ 0x60
 800a82e:	4b12      	ldr	r3, [pc, #72]	@ (800a878 <HAL_TIM_Base_MspInit+0x9c>)
 800a830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a832:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a836:	613b      	str	r3, [r7, #16]
 800a838:	693b      	ldr	r3, [r7, #16]
}
 800a83a:	e018      	b.n	800a86e <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a0f      	ldr	r2, [pc, #60]	@ (800a880 <HAL_TIM_Base_MspInit+0xa4>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d113      	bne.n	800a86e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800a846:	4b0c      	ldr	r3, [pc, #48]	@ (800a878 <HAL_TIM_Base_MspInit+0x9c>)
 800a848:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a84a:	4a0b      	ldr	r2, [pc, #44]	@ (800a878 <HAL_TIM_Base_MspInit+0x9c>)
 800a84c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a850:	6613      	str	r3, [r2, #96]	@ 0x60
 800a852:	4b09      	ldr	r3, [pc, #36]	@ (800a878 <HAL_TIM_Base_MspInit+0x9c>)
 800a854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a85a:	60fb      	str	r3, [r7, #12]
 800a85c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a85e:	2200      	movs	r2, #0
 800a860:	2100      	movs	r1, #0
 800a862:	2019      	movs	r0, #25
 800a864:	f002 f905 	bl	800ca72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a868:	2019      	movs	r0, #25
 800a86a:	f002 f91c 	bl	800caa6 <HAL_NVIC_EnableIRQ>
}
 800a86e:	bf00      	nop
 800a870:	3718      	adds	r7, #24
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	40021000 	.word	0x40021000
 800a87c:	40013400 	.word	0x40013400
 800a880:	40014400 	.word	0x40014400

0800a884 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b08e      	sub	sp, #56	@ 0x38
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a88c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a890:	2200      	movs	r2, #0
 800a892:	601a      	str	r2, [r3, #0]
 800a894:	605a      	str	r2, [r3, #4]
 800a896:	609a      	str	r2, [r3, #8]
 800a898:	60da      	str	r2, [r3, #12]
 800a89a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a4f      	ldr	r2, [pc, #316]	@ (800a9e0 <HAL_TIM_Encoder_MspInit+0x15c>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d131      	bne.n	800a90a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a8a6:	4b4f      	ldr	r3, [pc, #316]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a8a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8aa:	4a4e      	ldr	r2, [pc, #312]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a8ac:	f043 0302 	orr.w	r3, r3, #2
 800a8b0:	6593      	str	r3, [r2, #88]	@ 0x58
 800a8b2:	4b4c      	ldr	r3, [pc, #304]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a8b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8b6:	f003 0302 	and.w	r3, r3, #2
 800a8ba:	623b      	str	r3, [r7, #32]
 800a8bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8be:	4b49      	ldr	r3, [pc, #292]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a8c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8c2:	4a48      	ldr	r2, [pc, #288]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a8c4:	f043 0301 	orr.w	r3, r3, #1
 800a8c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a8ca:	4b46      	ldr	r3, [pc, #280]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a8cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	61fb      	str	r3, [r7, #28]
 800a8d4:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a8d6:	23c0      	movs	r3, #192	@ 0xc0
 800a8d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8da:	2302      	movs	r3, #2
 800a8dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a8e6:	2302      	movs	r3, #2
 800a8e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a8f4:	f002 fc24 	bl	800d140 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	201d      	movs	r0, #29
 800a8fe:	f002 f8b8 	bl	800ca72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a902:	201d      	movs	r0, #29
 800a904:	f002 f8cf 	bl	800caa6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800a908:	e065      	b.n	800a9d6 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a36      	ldr	r2, [pc, #216]	@ (800a9e8 <HAL_TIM_Encoder_MspInit+0x164>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d132      	bne.n	800a97a <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a914:	4b33      	ldr	r3, [pc, #204]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a918:	4a32      	ldr	r2, [pc, #200]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a91a:	f043 0304 	orr.w	r3, r3, #4
 800a91e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a920:	4b30      	ldr	r3, [pc, #192]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a924:	f003 0304 	and.w	r3, r3, #4
 800a928:	61bb      	str	r3, [r7, #24]
 800a92a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a92c:	4b2d      	ldr	r3, [pc, #180]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a92e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a930:	4a2c      	ldr	r2, [pc, #176]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a932:	f043 0301 	orr.w	r3, r3, #1
 800a936:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a938:	4b2a      	ldr	r3, [pc, #168]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a93a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a93c:	f003 0301 	and.w	r3, r3, #1
 800a940:	617b      	str	r3, [r7, #20]
 800a942:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a944:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a948:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a94a:	2302      	movs	r3, #2
 800a94c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a94e:	2300      	movs	r3, #0
 800a950:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a952:	2300      	movs	r3, #0
 800a954:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800a956:	230a      	movs	r3, #10
 800a958:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a95a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a95e:	4619      	mov	r1, r3
 800a960:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a964:	f002 fbec 	bl	800d140 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800a968:	2200      	movs	r2, #0
 800a96a:	2100      	movs	r1, #0
 800a96c:	201e      	movs	r0, #30
 800a96e:	f002 f880 	bl	800ca72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a972:	201e      	movs	r0, #30
 800a974:	f002 f897 	bl	800caa6 <HAL_NVIC_EnableIRQ>
}
 800a978:	e02d      	b.n	800a9d6 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	4a1b      	ldr	r2, [pc, #108]	@ (800a9ec <HAL_TIM_Encoder_MspInit+0x168>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d128      	bne.n	800a9d6 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a984:	4b17      	ldr	r3, [pc, #92]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a988:	4a16      	ldr	r2, [pc, #88]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a98a:	f043 0308 	orr.w	r3, r3, #8
 800a98e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a990:	4b14      	ldr	r3, [pc, #80]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a994:	f003 0308 	and.w	r3, r3, #8
 800a998:	613b      	str	r3, [r7, #16]
 800a99a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a99c:	4b11      	ldr	r3, [pc, #68]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a99e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9a0:	4a10      	ldr	r2, [pc, #64]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a9a2:	f043 0301 	orr.w	r3, r3, #1
 800a9a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a9a8:	4b0e      	ldr	r3, [pc, #56]	@ (800a9e4 <HAL_TIM_Encoder_MspInit+0x160>)
 800a9aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	60fb      	str	r3, [r7, #12]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a9b4:	2303      	movs	r3, #3
 800a9b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a9d2:	f002 fbb5 	bl	800d140 <HAL_GPIO_Init>
}
 800a9d6:	bf00      	nop
 800a9d8:	3738      	adds	r7, #56	@ 0x38
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	40000400 	.word	0x40000400
 800a9e4:	40021000 	.word	0x40021000
 800a9e8:	40000800 	.word	0x40000800
 800a9ec:	40000c00 	.word	0x40000c00

0800a9f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b08a      	sub	sp, #40	@ 0x28
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9f8:	f107 0314 	add.w	r3, r7, #20
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	601a      	str	r2, [r3, #0]
 800aa00:	605a      	str	r2, [r3, #4]
 800aa02:	609a      	str	r2, [r3, #8]
 800aa04:	60da      	str	r2, [r3, #12]
 800aa06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a22      	ldr	r2, [pc, #136]	@ (800aa98 <HAL_TIM_MspPostInit+0xa8>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d11c      	bne.n	800aa4c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa12:	4b22      	ldr	r3, [pc, #136]	@ (800aa9c <HAL_TIM_MspPostInit+0xac>)
 800aa14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa16:	4a21      	ldr	r2, [pc, #132]	@ (800aa9c <HAL_TIM_MspPostInit+0xac>)
 800aa18:	f043 0304 	orr.w	r3, r3, #4
 800aa1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa1e:	4b1f      	ldr	r3, [pc, #124]	@ (800aa9c <HAL_TIM_MspPostInit+0xac>)
 800aa20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa22:	f003 0304 	and.w	r3, r3, #4
 800aa26:	613b      	str	r3, [r7, #16]
 800aa28:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800aa2a:	2308      	movs	r3, #8
 800aa2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa2e:	2302      	movs	r3, #2
 800aa30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa32:	2300      	movs	r3, #0
 800aa34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa36:	2300      	movs	r3, #0
 800aa38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa3e:	f107 0314 	add.w	r3, r7, #20
 800aa42:	4619      	mov	r1, r3
 800aa44:	4816      	ldr	r0, [pc, #88]	@ (800aaa0 <HAL_TIM_MspPostInit+0xb0>)
 800aa46:	f002 fb7b 	bl	800d140 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800aa4a:	e020      	b.n	800aa8e <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a14      	ldr	r2, [pc, #80]	@ (800aaa4 <HAL_TIM_MspPostInit+0xb4>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d11b      	bne.n	800aa8e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa56:	4b11      	ldr	r3, [pc, #68]	@ (800aa9c <HAL_TIM_MspPostInit+0xac>)
 800aa58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa5a:	4a10      	ldr	r2, [pc, #64]	@ (800aa9c <HAL_TIM_MspPostInit+0xac>)
 800aa5c:	f043 0304 	orr.w	r3, r3, #4
 800aa60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800aa62:	4b0e      	ldr	r3, [pc, #56]	@ (800aa9c <HAL_TIM_MspPostInit+0xac>)
 800aa64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa66:	f003 0304 	and.w	r3, r3, #4
 800aa6a:	60fb      	str	r3, [r7, #12]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800aa6e:	23c0      	movs	r3, #192	@ 0xc0
 800aa70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa72:	2302      	movs	r3, #2
 800aa74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa76:	2300      	movs	r3, #0
 800aa78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800aa7e:	2304      	movs	r3, #4
 800aa80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aa82:	f107 0314 	add.w	r3, r7, #20
 800aa86:	4619      	mov	r1, r3
 800aa88:	4805      	ldr	r0, [pc, #20]	@ (800aaa0 <HAL_TIM_MspPostInit+0xb0>)
 800aa8a:	f002 fb59 	bl	800d140 <HAL_GPIO_Init>
}
 800aa8e:	bf00      	nop
 800aa90:	3728      	adds	r7, #40	@ 0x28
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	40012c00 	.word	0x40012c00
 800aa9c:	40021000 	.word	0x40021000
 800aaa0:	48000800 	.word	0x48000800
 800aaa4:	40013400 	.word	0x40013400

0800aaa8 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800aaac:	4b20      	ldr	r3, [pc, #128]	@ (800ab30 <MX_LPUART1_UART_Init+0x88>)
 800aaae:	4a21      	ldr	r2, [pc, #132]	@ (800ab34 <MX_LPUART1_UART_Init+0x8c>)
 800aab0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800aab2:	4b1f      	ldr	r3, [pc, #124]	@ (800ab30 <MX_LPUART1_UART_Init+0x88>)
 800aab4:	4a20      	ldr	r2, [pc, #128]	@ (800ab38 <MX_LPUART1_UART_Init+0x90>)
 800aab6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800aab8:	4b1d      	ldr	r3, [pc, #116]	@ (800ab30 <MX_LPUART1_UART_Init+0x88>)
 800aaba:	2200      	movs	r2, #0
 800aabc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800aabe:	4b1c      	ldr	r3, [pc, #112]	@ (800ab30 <MX_LPUART1_UART_Init+0x88>)
 800aac0:	2200      	movs	r2, #0
 800aac2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800aac4:	4b1a      	ldr	r3, [pc, #104]	@ (800ab30 <MX_LPUART1_UART_Init+0x88>)
 800aac6:	2200      	movs	r2, #0
 800aac8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800aaca:	4b19      	ldr	r3, [pc, #100]	@ (800ab30 <MX_LPUART1_UART_Init+0x88>)
 800aacc:	220c      	movs	r2, #12
 800aace:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aad0:	4b17      	ldr	r3, [pc, #92]	@ (800ab30 <MX_LPUART1_UART_Init+0x88>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aad6:	4b16      	ldr	r3, [pc, #88]	@ (800ab30 <MX_LPUART1_UART_Init+0x88>)
 800aad8:	2200      	movs	r2, #0
 800aada:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800aadc:	4b14      	ldr	r3, [pc, #80]	@ (800ab30 <MX_LPUART1_UART_Init+0x88>)
 800aade:	2200      	movs	r2, #0
 800aae0:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aae2:	4b13      	ldr	r3, [pc, #76]	@ (800ab30 <MX_LPUART1_UART_Init+0x88>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800aae8:	4811      	ldr	r0, [pc, #68]	@ (800ab30 <MX_LPUART1_UART_Init+0x88>)
 800aaea:	f005 fe25 	bl	8010738 <HAL_UART_Init>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d001      	beq.n	800aaf8 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800aaf4:	f7fe fcce 	bl	8009494 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aaf8:	2100      	movs	r1, #0
 800aafa:	480d      	ldr	r0, [pc, #52]	@ (800ab30 <MX_LPUART1_UART_Init+0x88>)
 800aafc:	f007 fc61 	bl	80123c2 <HAL_UARTEx_SetTxFifoThreshold>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d001      	beq.n	800ab0a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800ab06:	f7fe fcc5 	bl	8009494 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	4808      	ldr	r0, [pc, #32]	@ (800ab30 <MX_LPUART1_UART_Init+0x88>)
 800ab0e:	f007 fc96 	bl	801243e <HAL_UARTEx_SetRxFifoThreshold>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d001      	beq.n	800ab1c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800ab18:	f7fe fcbc 	bl	8009494 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800ab1c:	4804      	ldr	r0, [pc, #16]	@ (800ab30 <MX_LPUART1_UART_Init+0x88>)
 800ab1e:	f007 fc17 	bl	8012350 <HAL_UARTEx_DisableFifoMode>
 800ab22:	4603      	mov	r3, r0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d001      	beq.n	800ab2c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800ab28:	f7fe fcb4 	bl	8009494 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800ab2c:	bf00      	nop
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	20002408 	.word	0x20002408
 800ab34:	40008000 	.word	0x40008000
 800ab38:	001e8480 	.word	0x001e8480

0800ab3c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800ab40:	4b23      	ldr	r3, [pc, #140]	@ (800abd0 <MX_USART2_UART_Init+0x94>)
 800ab42:	4a24      	ldr	r2, [pc, #144]	@ (800abd4 <MX_USART2_UART_Init+0x98>)
 800ab44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800ab46:	4b22      	ldr	r3, [pc, #136]	@ (800abd0 <MX_USART2_UART_Init+0x94>)
 800ab48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800ab4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800ab4e:	4b20      	ldr	r3, [pc, #128]	@ (800abd0 <MX_USART2_UART_Init+0x94>)
 800ab50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ab54:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800ab56:	4b1e      	ldr	r3, [pc, #120]	@ (800abd0 <MX_USART2_UART_Init+0x94>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800ab5c:	4b1c      	ldr	r3, [pc, #112]	@ (800abd0 <MX_USART2_UART_Init+0x94>)
 800ab5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ab62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ab64:	4b1a      	ldr	r3, [pc, #104]	@ (800abd0 <MX_USART2_UART_Init+0x94>)
 800ab66:	220c      	movs	r2, #12
 800ab68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ab6a:	4b19      	ldr	r3, [pc, #100]	@ (800abd0 <MX_USART2_UART_Init+0x94>)
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ab70:	4b17      	ldr	r3, [pc, #92]	@ (800abd0 <MX_USART2_UART_Init+0x94>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ab76:	4b16      	ldr	r3, [pc, #88]	@ (800abd0 <MX_USART2_UART_Init+0x94>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800ab7c:	4b14      	ldr	r3, [pc, #80]	@ (800abd0 <MX_USART2_UART_Init+0x94>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ab82:	4b13      	ldr	r3, [pc, #76]	@ (800abd0 <MX_USART2_UART_Init+0x94>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800ab88:	4811      	ldr	r0, [pc, #68]	@ (800abd0 <MX_USART2_UART_Init+0x94>)
 800ab8a:	f005 fdd5 	bl	8010738 <HAL_UART_Init>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d001      	beq.n	800ab98 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800ab94:	f7fe fc7e 	bl	8009494 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800ab98:	2100      	movs	r1, #0
 800ab9a:	480d      	ldr	r0, [pc, #52]	@ (800abd0 <MX_USART2_UART_Init+0x94>)
 800ab9c:	f007 fc11 	bl	80123c2 <HAL_UARTEx_SetTxFifoThreshold>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800aba6:	f7fe fc75 	bl	8009494 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800abaa:	2100      	movs	r1, #0
 800abac:	4808      	ldr	r0, [pc, #32]	@ (800abd0 <MX_USART2_UART_Init+0x94>)
 800abae:	f007 fc46 	bl	801243e <HAL_UARTEx_SetRxFifoThreshold>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d001      	beq.n	800abbc <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800abb8:	f7fe fc6c 	bl	8009494 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800abbc:	4804      	ldr	r0, [pc, #16]	@ (800abd0 <MX_USART2_UART_Init+0x94>)
 800abbe:	f007 fbc7 	bl	8012350 <HAL_UARTEx_DisableFifoMode>
 800abc2:	4603      	mov	r3, r0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d001      	beq.n	800abcc <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800abc8:	f7fe fc64 	bl	8009494 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800abcc:	bf00      	nop
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	200024d4 	.word	0x200024d4
 800abd4:	40004400 	.word	0x40004400

0800abd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b0a0      	sub	sp, #128	@ 0x80
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800abe0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800abe4:	2200      	movs	r2, #0
 800abe6:	601a      	str	r2, [r3, #0]
 800abe8:	605a      	str	r2, [r3, #4]
 800abea:	609a      	str	r2, [r3, #8]
 800abec:	60da      	str	r2, [r3, #12]
 800abee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800abf0:	f107 0318 	add.w	r3, r7, #24
 800abf4:	2254      	movs	r2, #84	@ 0x54
 800abf6:	2100      	movs	r1, #0
 800abf8:	4618      	mov	r0, r3
 800abfa:	f008 fa59 	bl	80130b0 <memset>
  if(uartHandle->Instance==LPUART1)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a99      	ldr	r2, [pc, #612]	@ (800ae68 <HAL_UART_MspInit+0x290>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	f040 8093 	bne.w	800ad30 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800ac0a:	2320      	movs	r3, #32
 800ac0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ac12:	f107 0318 	add.w	r3, r7, #24
 800ac16:	4618      	mov	r0, r3
 800ac18:	f003 fa58 	bl	800e0cc <HAL_RCCEx_PeriphCLKConfig>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800ac22:	f7fe fc37 	bl	8009494 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800ac26:	4b91      	ldr	r3, [pc, #580]	@ (800ae6c <HAL_UART_MspInit+0x294>)
 800ac28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac2a:	4a90      	ldr	r2, [pc, #576]	@ (800ae6c <HAL_UART_MspInit+0x294>)
 800ac2c:	f043 0301 	orr.w	r3, r3, #1
 800ac30:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800ac32:	4b8e      	ldr	r3, [pc, #568]	@ (800ae6c <HAL_UART_MspInit+0x294>)
 800ac34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac36:	f003 0301 	and.w	r3, r3, #1
 800ac3a:	617b      	str	r3, [r7, #20]
 800ac3c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ac3e:	4b8b      	ldr	r3, [pc, #556]	@ (800ae6c <HAL_UART_MspInit+0x294>)
 800ac40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac42:	4a8a      	ldr	r2, [pc, #552]	@ (800ae6c <HAL_UART_MspInit+0x294>)
 800ac44:	f043 0302 	orr.w	r3, r3, #2
 800ac48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ac4a:	4b88      	ldr	r3, [pc, #544]	@ (800ae6c <HAL_UART_MspInit+0x294>)
 800ac4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac4e:	f003 0302 	and.w	r3, r3, #2
 800ac52:	613b      	str	r3, [r7, #16]
 800ac54:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800ac56:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800ac5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac5c:	2302      	movs	r3, #2
 800ac5e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac60:	2300      	movs	r3, #0
 800ac62:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac64:	2300      	movs	r3, #0
 800ac66:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800ac68:	2308      	movs	r3, #8
 800ac6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ac6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ac70:	4619      	mov	r1, r3
 800ac72:	487f      	ldr	r0, [pc, #508]	@ (800ae70 <HAL_UART_MspInit+0x298>)
 800ac74:	f002 fa64 	bl	800d140 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 800ac78:	4b7e      	ldr	r3, [pc, #504]	@ (800ae74 <HAL_UART_MspInit+0x29c>)
 800ac7a:	4a7f      	ldr	r2, [pc, #508]	@ (800ae78 <HAL_UART_MspInit+0x2a0>)
 800ac7c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800ac7e:	4b7d      	ldr	r3, [pc, #500]	@ (800ae74 <HAL_UART_MspInit+0x29c>)
 800ac80:	2222      	movs	r2, #34	@ 0x22
 800ac82:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac84:	4b7b      	ldr	r3, [pc, #492]	@ (800ae74 <HAL_UART_MspInit+0x29c>)
 800ac86:	2200      	movs	r2, #0
 800ac88:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac8a:	4b7a      	ldr	r3, [pc, #488]	@ (800ae74 <HAL_UART_MspInit+0x29c>)
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ac90:	4b78      	ldr	r3, [pc, #480]	@ (800ae74 <HAL_UART_MspInit+0x29c>)
 800ac92:	2280      	movs	r2, #128	@ 0x80
 800ac94:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ac96:	4b77      	ldr	r3, [pc, #476]	@ (800ae74 <HAL_UART_MspInit+0x29c>)
 800ac98:	2200      	movs	r2, #0
 800ac9a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ac9c:	4b75      	ldr	r3, [pc, #468]	@ (800ae74 <HAL_UART_MspInit+0x29c>)
 800ac9e:	2200      	movs	r2, #0
 800aca0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800aca2:	4b74      	ldr	r3, [pc, #464]	@ (800ae74 <HAL_UART_MspInit+0x29c>)
 800aca4:	2200      	movs	r2, #0
 800aca6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800aca8:	4b72      	ldr	r3, [pc, #456]	@ (800ae74 <HAL_UART_MspInit+0x29c>)
 800acaa:	2200      	movs	r2, #0
 800acac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800acae:	4871      	ldr	r0, [pc, #452]	@ (800ae74 <HAL_UART_MspInit+0x29c>)
 800acb0:	f001 ff14 	bl	800cadc <HAL_DMA_Init>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800acba:	f7fe fbeb 	bl	8009494 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a6c      	ldr	r2, [pc, #432]	@ (800ae74 <HAL_UART_MspInit+0x29c>)
 800acc2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800acc6:	4a6b      	ldr	r2, [pc, #428]	@ (800ae74 <HAL_UART_MspInit+0x29c>)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 800accc:	4b6b      	ldr	r3, [pc, #428]	@ (800ae7c <HAL_UART_MspInit+0x2a4>)
 800acce:	4a6c      	ldr	r2, [pc, #432]	@ (800ae80 <HAL_UART_MspInit+0x2a8>)
 800acd0:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800acd2:	4b6a      	ldr	r3, [pc, #424]	@ (800ae7c <HAL_UART_MspInit+0x2a4>)
 800acd4:	2223      	movs	r2, #35	@ 0x23
 800acd6:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800acd8:	4b68      	ldr	r3, [pc, #416]	@ (800ae7c <HAL_UART_MspInit+0x2a4>)
 800acda:	2210      	movs	r2, #16
 800acdc:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800acde:	4b67      	ldr	r3, [pc, #412]	@ (800ae7c <HAL_UART_MspInit+0x2a4>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ace4:	4b65      	ldr	r3, [pc, #404]	@ (800ae7c <HAL_UART_MspInit+0x2a4>)
 800ace6:	2280      	movs	r2, #128	@ 0x80
 800ace8:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800acea:	4b64      	ldr	r3, [pc, #400]	@ (800ae7c <HAL_UART_MspInit+0x2a4>)
 800acec:	2200      	movs	r2, #0
 800acee:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800acf0:	4b62      	ldr	r3, [pc, #392]	@ (800ae7c <HAL_UART_MspInit+0x2a4>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800acf6:	4b61      	ldr	r3, [pc, #388]	@ (800ae7c <HAL_UART_MspInit+0x2a4>)
 800acf8:	2200      	movs	r2, #0
 800acfa:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800acfc:	4b5f      	ldr	r3, [pc, #380]	@ (800ae7c <HAL_UART_MspInit+0x2a4>)
 800acfe:	2200      	movs	r2, #0
 800ad00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800ad02:	485e      	ldr	r0, [pc, #376]	@ (800ae7c <HAL_UART_MspInit+0x2a4>)
 800ad04:	f001 feea 	bl	800cadc <HAL_DMA_Init>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d001      	beq.n	800ad12 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800ad0e:	f7fe fbc1 	bl	8009494 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a59      	ldr	r2, [pc, #356]	@ (800ae7c <HAL_UART_MspInit+0x2a4>)
 800ad16:	67da      	str	r2, [r3, #124]	@ 0x7c
 800ad18:	4a58      	ldr	r2, [pc, #352]	@ (800ae7c <HAL_UART_MspInit+0x2a4>)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800ad1e:	2200      	movs	r2, #0
 800ad20:	2100      	movs	r1, #0
 800ad22:	205b      	movs	r0, #91	@ 0x5b
 800ad24:	f001 fea5 	bl	800ca72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800ad28:	205b      	movs	r0, #91	@ 0x5b
 800ad2a:	f001 febc 	bl	800caa6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800ad2e:	e097      	b.n	800ae60 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	4a53      	ldr	r2, [pc, #332]	@ (800ae84 <HAL_UART_MspInit+0x2ac>)
 800ad36:	4293      	cmp	r3, r2
 800ad38:	f040 8092 	bne.w	800ae60 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800ad3c:	2302      	movs	r3, #2
 800ad3e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800ad40:	2300      	movs	r3, #0
 800ad42:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ad44:	f107 0318 	add.w	r3, r7, #24
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f003 f9bf 	bl	800e0cc <HAL_RCCEx_PeriphCLKConfig>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d001      	beq.n	800ad58 <HAL_UART_MspInit+0x180>
      Error_Handler();
 800ad54:	f7fe fb9e 	bl	8009494 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800ad58:	4b44      	ldr	r3, [pc, #272]	@ (800ae6c <HAL_UART_MspInit+0x294>)
 800ad5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad5c:	4a43      	ldr	r2, [pc, #268]	@ (800ae6c <HAL_UART_MspInit+0x294>)
 800ad5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad62:	6593      	str	r3, [r2, #88]	@ 0x58
 800ad64:	4b41      	ldr	r3, [pc, #260]	@ (800ae6c <HAL_UART_MspInit+0x294>)
 800ad66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad6c:	60fb      	str	r3, [r7, #12]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad70:	4b3e      	ldr	r3, [pc, #248]	@ (800ae6c <HAL_UART_MspInit+0x294>)
 800ad72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad74:	4a3d      	ldr	r2, [pc, #244]	@ (800ae6c <HAL_UART_MspInit+0x294>)
 800ad76:	f043 0301 	orr.w	r3, r3, #1
 800ad7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ad7c:	4b3b      	ldr	r3, [pc, #236]	@ (800ae6c <HAL_UART_MspInit+0x294>)
 800ad7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad80:	f003 0301 	and.w	r3, r3, #1
 800ad84:	60bb      	str	r3, [r7, #8]
 800ad86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800ad88:	230c      	movs	r3, #12
 800ad8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad90:	2300      	movs	r3, #0
 800ad92:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad94:	2300      	movs	r3, #0
 800ad96:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800ad98:	2307      	movs	r3, #7
 800ad9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad9c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800ada0:	4619      	mov	r1, r3
 800ada2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ada6:	f002 f9cb 	bl	800d140 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800adaa:	4b37      	ldr	r3, [pc, #220]	@ (800ae88 <HAL_UART_MspInit+0x2b0>)
 800adac:	4a37      	ldr	r2, [pc, #220]	@ (800ae8c <HAL_UART_MspInit+0x2b4>)
 800adae:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800adb0:	4b35      	ldr	r3, [pc, #212]	@ (800ae88 <HAL_UART_MspInit+0x2b0>)
 800adb2:	221a      	movs	r2, #26
 800adb4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800adb6:	4b34      	ldr	r3, [pc, #208]	@ (800ae88 <HAL_UART_MspInit+0x2b0>)
 800adb8:	2200      	movs	r2, #0
 800adba:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800adbc:	4b32      	ldr	r3, [pc, #200]	@ (800ae88 <HAL_UART_MspInit+0x2b0>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800adc2:	4b31      	ldr	r3, [pc, #196]	@ (800ae88 <HAL_UART_MspInit+0x2b0>)
 800adc4:	2280      	movs	r2, #128	@ 0x80
 800adc6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800adc8:	4b2f      	ldr	r3, [pc, #188]	@ (800ae88 <HAL_UART_MspInit+0x2b0>)
 800adca:	2200      	movs	r2, #0
 800adcc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800adce:	4b2e      	ldr	r3, [pc, #184]	@ (800ae88 <HAL_UART_MspInit+0x2b0>)
 800add0:	2200      	movs	r2, #0
 800add2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800add4:	4b2c      	ldr	r3, [pc, #176]	@ (800ae88 <HAL_UART_MspInit+0x2b0>)
 800add6:	2200      	movs	r2, #0
 800add8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800adda:	4b2b      	ldr	r3, [pc, #172]	@ (800ae88 <HAL_UART_MspInit+0x2b0>)
 800addc:	2200      	movs	r2, #0
 800adde:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800ade0:	4829      	ldr	r0, [pc, #164]	@ (800ae88 <HAL_UART_MspInit+0x2b0>)
 800ade2:	f001 fe7b 	bl	800cadc <HAL_DMA_Init>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <HAL_UART_MspInit+0x218>
      Error_Handler();
 800adec:	f7fe fb52 	bl	8009494 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	4a25      	ldr	r2, [pc, #148]	@ (800ae88 <HAL_UART_MspInit+0x2b0>)
 800adf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800adf8:	4a23      	ldr	r2, [pc, #140]	@ (800ae88 <HAL_UART_MspInit+0x2b0>)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800adfe:	4b24      	ldr	r3, [pc, #144]	@ (800ae90 <HAL_UART_MspInit+0x2b8>)
 800ae00:	4a24      	ldr	r2, [pc, #144]	@ (800ae94 <HAL_UART_MspInit+0x2bc>)
 800ae02:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800ae04:	4b22      	ldr	r3, [pc, #136]	@ (800ae90 <HAL_UART_MspInit+0x2b8>)
 800ae06:	221b      	movs	r2, #27
 800ae08:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ae0a:	4b21      	ldr	r3, [pc, #132]	@ (800ae90 <HAL_UART_MspInit+0x2b8>)
 800ae0c:	2210      	movs	r2, #16
 800ae0e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ae10:	4b1f      	ldr	r3, [pc, #124]	@ (800ae90 <HAL_UART_MspInit+0x2b8>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ae16:	4b1e      	ldr	r3, [pc, #120]	@ (800ae90 <HAL_UART_MspInit+0x2b8>)
 800ae18:	2280      	movs	r2, #128	@ 0x80
 800ae1a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ae1c:	4b1c      	ldr	r3, [pc, #112]	@ (800ae90 <HAL_UART_MspInit+0x2b8>)
 800ae1e:	2200      	movs	r2, #0
 800ae20:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ae22:	4b1b      	ldr	r3, [pc, #108]	@ (800ae90 <HAL_UART_MspInit+0x2b8>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800ae28:	4b19      	ldr	r3, [pc, #100]	@ (800ae90 <HAL_UART_MspInit+0x2b8>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800ae2e:	4b18      	ldr	r3, [pc, #96]	@ (800ae90 <HAL_UART_MspInit+0x2b8>)
 800ae30:	2200      	movs	r2, #0
 800ae32:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800ae34:	4816      	ldr	r0, [pc, #88]	@ (800ae90 <HAL_UART_MspInit+0x2b8>)
 800ae36:	f001 fe51 	bl	800cadc <HAL_DMA_Init>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d001      	beq.n	800ae44 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 800ae40:	f7fe fb28 	bl	8009494 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a12      	ldr	r2, [pc, #72]	@ (800ae90 <HAL_UART_MspInit+0x2b8>)
 800ae48:	67da      	str	r2, [r3, #124]	@ 0x7c
 800ae4a:	4a11      	ldr	r2, [pc, #68]	@ (800ae90 <HAL_UART_MspInit+0x2b8>)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800ae50:	2200      	movs	r2, #0
 800ae52:	2100      	movs	r1, #0
 800ae54:	2026      	movs	r0, #38	@ 0x26
 800ae56:	f001 fe0c 	bl	800ca72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ae5a:	2026      	movs	r0, #38	@ 0x26
 800ae5c:	f001 fe23 	bl	800caa6 <HAL_NVIC_EnableIRQ>
}
 800ae60:	bf00      	nop
 800ae62:	3780      	adds	r7, #128	@ 0x80
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	40008000 	.word	0x40008000
 800ae6c:	40021000 	.word	0x40021000
 800ae70:	48000400 	.word	0x48000400
 800ae74:	200025a0 	.word	0x200025a0
 800ae78:	40020044 	.word	0x40020044
 800ae7c:	20002600 	.word	0x20002600
 800ae80:	40020058 	.word	0x40020058
 800ae84:	40004400 	.word	0x40004400
 800ae88:	20002660 	.word	0x20002660
 800ae8c:	4002001c 	.word	0x4002001c
 800ae90:	200026c0 	.word	0x200026c0
 800ae94:	40020030 	.word	0x40020030

0800ae98 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
	Reset_Handler:  ldr   r0, =_estack
 800ae98:	480d      	ldr	r0, [pc, #52]	@ (800aed0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800ae9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/

    bl  SystemInit
 800ae9c:	f7ff f994 	bl	800a1c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800aea0:	480c      	ldr	r0, [pc, #48]	@ (800aed4 <LoopForever+0x6>)
  ldr r1, =_edata
 800aea2:	490d      	ldr	r1, [pc, #52]	@ (800aed8 <LoopForever+0xa>)
  ldr r2, =_sidata
 800aea4:	4a0d      	ldr	r2, [pc, #52]	@ (800aedc <LoopForever+0xe>)
  movs r3, #0
 800aea6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800aea8:	e002      	b.n	800aeb0 <LoopCopyDataInit>

0800aeaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800aeaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800aeac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800aeae:	3304      	adds	r3, #4

0800aeb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800aeb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800aeb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800aeb4:	d3f9      	bcc.n	800aeaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800aeb6:	4a0a      	ldr	r2, [pc, #40]	@ (800aee0 <LoopForever+0x12>)
  ldr r4, =_ebss
 800aeb8:	4c0a      	ldr	r4, [pc, #40]	@ (800aee4 <LoopForever+0x16>)
  movs r3, #0
 800aeba:	2300      	movs	r3, #0
  b LoopFillZerobss
 800aebc:	e001      	b.n	800aec2 <LoopFillZerobss>

0800aebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800aebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800aec0:	3204      	adds	r2, #4

0800aec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800aec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800aec4:	d3fb      	bcc.n	800aebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800aec6:	f008 f911 	bl	80130ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800aeca:	f7fa fc23 	bl	8005714 <main>

0800aece <LoopForever>:

LoopForever:
    b LoopForever
 800aece:	e7fe      	b.n	800aece <LoopForever>
	Reset_Handler:  ldr   r0, =_estack
 800aed0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800aed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800aed8:	20000618 	.word	0x20000618
  ldr r2, =_sidata
 800aedc:	080155e0 	.word	0x080155e0
  ldr r2, =_sbss
 800aee0:	20000618 	.word	0x20000618
  ldr r4, =_ebss
 800aee4:	2000286c 	.word	0x2000286c

0800aee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800aee8:	e7fe      	b.n	800aee8 <ADC1_2_IRQHandler>

0800aeea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b082      	sub	sp, #8
 800aeee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800aef0:	2300      	movs	r3, #0
 800aef2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aef4:	2003      	movs	r0, #3
 800aef6:	f001 fdb1 	bl	800ca5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800aefa:	2000      	movs	r0, #0
 800aefc:	f000 f80e 	bl	800af1c <HAL_InitTick>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d002      	beq.n	800af0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	71fb      	strb	r3, [r7, #7]
 800af0a:	e001      	b.n	800af10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800af0c:	f7ff f82c 	bl	8009f68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800af10:	79fb      	ldrb	r3, [r7, #7]

}
 800af12:	4618      	mov	r0, r3
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
	...

0800af1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800af24:	2300      	movs	r3, #0
 800af26:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800af28:	4b16      	ldr	r3, [pc, #88]	@ (800af84 <HAL_InitTick+0x68>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d022      	beq.n	800af76 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800af30:	4b15      	ldr	r3, [pc, #84]	@ (800af88 <HAL_InitTick+0x6c>)
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	4b13      	ldr	r3, [pc, #76]	@ (800af84 <HAL_InitTick+0x68>)
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800af3c:	fbb1 f3f3 	udiv	r3, r1, r3
 800af40:	fbb2 f3f3 	udiv	r3, r2, r3
 800af44:	4618      	mov	r0, r3
 800af46:	f001 fdbc 	bl	800cac2 <HAL_SYSTICK_Config>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d10f      	bne.n	800af70 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2b0f      	cmp	r3, #15
 800af54:	d809      	bhi.n	800af6a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800af56:	2200      	movs	r2, #0
 800af58:	6879      	ldr	r1, [r7, #4]
 800af5a:	f04f 30ff 	mov.w	r0, #4294967295
 800af5e:	f001 fd88 	bl	800ca72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800af62:	4a0a      	ldr	r2, [pc, #40]	@ (800af8c <HAL_InitTick+0x70>)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6013      	str	r3, [r2, #0]
 800af68:	e007      	b.n	800af7a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800af6a:	2301      	movs	r3, #1
 800af6c:	73fb      	strb	r3, [r7, #15]
 800af6e:	e004      	b.n	800af7a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	73fb      	strb	r3, [r7, #15]
 800af74:	e001      	b.n	800af7a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800af7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3710      	adds	r7, #16
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	200005c4 	.word	0x200005c4
 800af88:	200005bc 	.word	0x200005bc
 800af8c:	200005c0 	.word	0x200005c0

0800af90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800af90:	b480      	push	{r7}
 800af92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800af94:	4b05      	ldr	r3, [pc, #20]	@ (800afac <HAL_IncTick+0x1c>)
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	4b05      	ldr	r3, [pc, #20]	@ (800afb0 <HAL_IncTick+0x20>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4413      	add	r3, r2
 800af9e:	4a03      	ldr	r2, [pc, #12]	@ (800afac <HAL_IncTick+0x1c>)
 800afa0:	6013      	str	r3, [r2, #0]
}
 800afa2:	bf00      	nop
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr
 800afac:	20002720 	.word	0x20002720
 800afb0:	200005c4 	.word	0x200005c4

0800afb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800afb4:	b480      	push	{r7}
 800afb6:	af00      	add	r7, sp, #0
  return uwTick;
 800afb8:	4b03      	ldr	r3, [pc, #12]	@ (800afc8 <HAL_GetTick+0x14>)
 800afba:	681b      	ldr	r3, [r3, #0]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr
 800afc6:	bf00      	nop
 800afc8:	20002720 	.word	0x20002720

0800afcc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800afcc:	b480      	push	{r7}
 800afce:	b083      	sub	sp, #12
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	431a      	orrs	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	609a      	str	r2, [r3, #8]
}
 800afe6:	bf00      	nop
 800afe8:	370c      	adds	r7, #12
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr

0800aff2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800aff2:	b480      	push	{r7}
 800aff4:	b083      	sub	sp, #12
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
 800affa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	689b      	ldr	r3, [r3, #8]
 800b000:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	431a      	orrs	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	609a      	str	r2, [r3, #8]
}
 800b00c:	bf00      	nop
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800b028:	4618      	mov	r0, r3
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800b034:	b480      	push	{r7}
 800b036:	b087      	sub	sp, #28
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	607a      	str	r2, [r7, #4]
 800b040:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	3360      	adds	r3, #96	@ 0x60
 800b046:	461a      	mov	r2, r3
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	4413      	add	r3, r2
 800b04e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	4b08      	ldr	r3, [pc, #32]	@ (800b078 <LL_ADC_SetOffset+0x44>)
 800b056:	4013      	ands	r3, r2
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	430a      	orrs	r2, r1
 800b062:	4313      	orrs	r3, r2
 800b064:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800b06c:	bf00      	nop
 800b06e:	371c      	adds	r7, #28
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	03fff000 	.word	0x03fff000

0800b07c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	3360      	adds	r3, #96	@ 0x60
 800b08a:	461a      	mov	r2, r3
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3714      	adds	r7, #20
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b087      	sub	sp, #28
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60f8      	str	r0, [r7, #12]
 800b0b0:	60b9      	str	r1, [r7, #8]
 800b0b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	3360      	adds	r3, #96	@ 0x60
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	431a      	orrs	r2, r3
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800b0d2:	bf00      	nop
 800b0d4:	371c      	adds	r7, #28
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0dc:	4770      	bx	lr

0800b0de <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800b0de:	b480      	push	{r7}
 800b0e0:	b087      	sub	sp, #28
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	60f8      	str	r0, [r7, #12]
 800b0e6:	60b9      	str	r1, [r7, #8]
 800b0e8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	3360      	adds	r3, #96	@ 0x60
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	4413      	add	r3, r2
 800b0f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	431a      	orrs	r2, r3
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800b108:	bf00      	nop
 800b10a:	371c      	adds	r7, #28
 800b10c:	46bd      	mov	sp, r7
 800b10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b112:	4770      	bx	lr

0800b114 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800b114:	b480      	push	{r7}
 800b116:	b087      	sub	sp, #28
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3360      	adds	r3, #96	@ 0x60
 800b124:	461a      	mov	r2, r3
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4413      	add	r3, r2
 800b12c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	431a      	orrs	r2, r3
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800b13e:	bf00      	nop
 800b140:	371c      	adds	r7, #28
 800b142:	46bd      	mov	sp, r7
 800b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b148:	4770      	bx	lr

0800b14a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800b14a:	b480      	push	{r7}
 800b14c:	b083      	sub	sp, #12
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	695b      	ldr	r3, [r3, #20]
 800b158:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	431a      	orrs	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	615a      	str	r2, [r3, #20]
}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b180:	2b00      	cmp	r3, #0
 800b182:	d101      	bne.n	800b188 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800b184:	2301      	movs	r3, #1
 800b186:	e000      	b.n	800b18a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800b196:	b480      	push	{r7}
 800b198:	b087      	sub	sp, #28
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	60f8      	str	r0, [r7, #12]
 800b19e:	60b9      	str	r1, [r7, #8]
 800b1a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	3330      	adds	r3, #48	@ 0x30
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	0a1b      	lsrs	r3, r3, #8
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	f003 030c 	and.w	r3, r3, #12
 800b1b2:	4413      	add	r3, r2
 800b1b4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	f003 031f 	and.w	r3, r3, #31
 800b1c0:	211f      	movs	r1, #31
 800b1c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b1c6:	43db      	mvns	r3, r3
 800b1c8:	401a      	ands	r2, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	0e9b      	lsrs	r3, r3, #26
 800b1ce:	f003 011f 	and.w	r1, r3, #31
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	f003 031f 	and.w	r3, r3, #31
 800b1d8:	fa01 f303 	lsl.w	r3, r1, r3
 800b1dc:	431a      	orrs	r2, r3
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800b1e2:	bf00      	nop
 800b1e4:	371c      	adds	r7, #28
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr

0800b1ee <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800b1ee:	b480      	push	{r7}
 800b1f0:	b087      	sub	sp, #28
 800b1f2:	af00      	add	r7, sp, #0
 800b1f4:	60f8      	str	r0, [r7, #12]
 800b1f6:	60b9      	str	r1, [r7, #8]
 800b1f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	3314      	adds	r3, #20
 800b1fe:	461a      	mov	r2, r3
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	0e5b      	lsrs	r3, r3, #25
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	f003 0304 	and.w	r3, r3, #4
 800b20a:	4413      	add	r3, r2
 800b20c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	0d1b      	lsrs	r3, r3, #20
 800b216:	f003 031f 	and.w	r3, r3, #31
 800b21a:	2107      	movs	r1, #7
 800b21c:	fa01 f303 	lsl.w	r3, r1, r3
 800b220:	43db      	mvns	r3, r3
 800b222:	401a      	ands	r2, r3
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	0d1b      	lsrs	r3, r3, #20
 800b228:	f003 031f 	and.w	r3, r3, #31
 800b22c:	6879      	ldr	r1, [r7, #4]
 800b22e:	fa01 f303 	lsl.w	r3, r1, r3
 800b232:	431a      	orrs	r2, r3
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800b238:	bf00      	nop
 800b23a:	371c      	adds	r7, #28
 800b23c:	46bd      	mov	sp, r7
 800b23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b242:	4770      	bx	lr

0800b244 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800b244:	b480      	push	{r7}
 800b246:	b085      	sub	sp, #20
 800b248:	af00      	add	r7, sp, #0
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	60b9      	str	r1, [r7, #8]
 800b24e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b25c:	43db      	mvns	r3, r3
 800b25e:	401a      	ands	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f003 0318 	and.w	r3, r3, #24
 800b266:	4908      	ldr	r1, [pc, #32]	@ (800b288 <LL_ADC_SetChannelSingleDiff+0x44>)
 800b268:	40d9      	lsrs	r1, r3
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	400b      	ands	r3, r1
 800b26e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b272:	431a      	orrs	r2, r3
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800b27a:	bf00      	nop
 800b27c:	3714      	adds	r7, #20
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr
 800b286:	bf00      	nop
 800b288:	0007ffff 	.word	0x0007ffff

0800b28c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b083      	sub	sp, #12
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	f003 031f 	and.w	r3, r3, #31
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800b2b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	6093      	str	r3, [r2, #8]
}
 800b2c0:	bf00      	nop
 800b2c2:	370c      	adds	r7, #12
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr

0800b2cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	689b      	ldr	r3, [r3, #8]
 800b2d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2e0:	d101      	bne.n	800b2e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e000      	b.n	800b2e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	370c      	adds	r7, #12
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800b304:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b308:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b310:	bf00      	nop
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b32c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b330:	d101      	bne.n	800b336 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b332:	2301      	movs	r3, #1
 800b334:	e000      	b.n	800b338 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b354:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b358:	f043 0201 	orr.w	r2, r3, #1
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b37c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b380:	f043 0202 	orr.w	r2, r3, #2
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	f003 0301 	and.w	r3, r3, #1
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d101      	bne.n	800b3ac <LL_ADC_IsEnabled+0x18>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e000      	b.n	800b3ae <LL_ADC_IsEnabled+0x1a>
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b8:	4770      	bx	lr

0800b3ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800b3ba:	b480      	push	{r7}
 800b3bc:	b083      	sub	sp, #12
 800b3be:	af00      	add	r7, sp, #0
 800b3c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	f003 0302 	and.w	r3, r3, #2
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	d101      	bne.n	800b3d2 <LL_ADC_IsDisableOngoing+0x18>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e000      	b.n	800b3d4 <LL_ADC_IsDisableOngoing+0x1a>
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	689b      	ldr	r3, [r3, #8]
 800b3ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b3f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b3f4:	f043 0204 	orr.w	r2, r3, #4
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b3fc:	bf00      	nop
 800b3fe:	370c      	adds	r7, #12
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	f003 0304 	and.w	r3, r3, #4
 800b418:	2b04      	cmp	r3, #4
 800b41a:	d101      	bne.n	800b420 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b41c:	2301      	movs	r3, #1
 800b41e:	e000      	b.n	800b422 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	370c      	adds	r7, #12
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800b42e:	b480      	push	{r7}
 800b430:	b083      	sub	sp, #12
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	f003 0308 	and.w	r3, r3, #8
 800b43e:	2b08      	cmp	r3, #8
 800b440:	d101      	bne.n	800b446 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b442:	2301      	movs	r3, #1
 800b444:	e000      	b.n	800b448 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b446:	2300      	movs	r3, #0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b454:	b590      	push	{r4, r7, lr}
 800b456:	b089      	sub	sp, #36	@ 0x24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b45c:	2300      	movs	r3, #0
 800b45e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800b460:	2300      	movs	r3, #0
 800b462:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d101      	bne.n	800b46e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	e1a9      	b.n	800b7c2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	695b      	ldr	r3, [r3, #20]
 800b472:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d109      	bne.n	800b490 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7f9 fc55 	bl	8004d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4618      	mov	r0, r3
 800b496:	f7ff ff19 	bl	800b2cc <LL_ADC_IsDeepPowerDownEnabled>
 800b49a:	4603      	mov	r3, r0
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d004      	beq.n	800b4aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7ff feff 	bl	800b2a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7ff ff34 	bl	800b31c <LL_ADC_IsInternalRegulatorEnabled>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d115      	bne.n	800b4e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7ff ff18 	bl	800b2f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b4c4:	4b9c      	ldr	r3, [pc, #624]	@ (800b738 <HAL_ADC_Init+0x2e4>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	099b      	lsrs	r3, r3, #6
 800b4ca:	4a9c      	ldr	r2, [pc, #624]	@ (800b73c <HAL_ADC_Init+0x2e8>)
 800b4cc:	fba2 2303 	umull	r2, r3, r2, r3
 800b4d0:	099b      	lsrs	r3, r3, #6
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	005b      	lsls	r3, r3, #1
 800b4d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b4d8:	e002      	b.n	800b4e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	3b01      	subs	r3, #1
 800b4de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d1f9      	bne.n	800b4da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7ff ff16 	bl	800b31c <LL_ADC_IsInternalRegulatorEnabled>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d10d      	bne.n	800b512 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4fa:	f043 0210 	orr.w	r2, r3, #16
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b506:	f043 0201 	orr.w	r2, r3, #1
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	4618      	mov	r0, r3
 800b518:	f7ff ff76 	bl	800b408 <LL_ADC_REG_IsConversionOngoing>
 800b51c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b522:	f003 0310 	and.w	r3, r3, #16
 800b526:	2b00      	cmp	r3, #0
 800b528:	f040 8142 	bne.w	800b7b0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	f040 813e 	bne.w	800b7b0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b538:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800b53c:	f043 0202 	orr.w	r2, r3, #2
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4618      	mov	r0, r3
 800b54a:	f7ff ff23 	bl	800b394 <LL_ADC_IsEnabled>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d141      	bne.n	800b5d8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b55c:	d004      	beq.n	800b568 <HAL_ADC_Init+0x114>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a77      	ldr	r2, [pc, #476]	@ (800b740 <HAL_ADC_Init+0x2ec>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d10f      	bne.n	800b588 <HAL_ADC_Init+0x134>
 800b568:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800b56c:	f7ff ff12 	bl	800b394 <LL_ADC_IsEnabled>
 800b570:	4604      	mov	r4, r0
 800b572:	4873      	ldr	r0, [pc, #460]	@ (800b740 <HAL_ADC_Init+0x2ec>)
 800b574:	f7ff ff0e 	bl	800b394 <LL_ADC_IsEnabled>
 800b578:	4603      	mov	r3, r0
 800b57a:	4323      	orrs	r3, r4
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	bf0c      	ite	eq
 800b580:	2301      	moveq	r3, #1
 800b582:	2300      	movne	r3, #0
 800b584:	b2db      	uxtb	r3, r3
 800b586:	e012      	b.n	800b5ae <HAL_ADC_Init+0x15a>
 800b588:	486e      	ldr	r0, [pc, #440]	@ (800b744 <HAL_ADC_Init+0x2f0>)
 800b58a:	f7ff ff03 	bl	800b394 <LL_ADC_IsEnabled>
 800b58e:	4604      	mov	r4, r0
 800b590:	486d      	ldr	r0, [pc, #436]	@ (800b748 <HAL_ADC_Init+0x2f4>)
 800b592:	f7ff feff 	bl	800b394 <LL_ADC_IsEnabled>
 800b596:	4603      	mov	r3, r0
 800b598:	431c      	orrs	r4, r3
 800b59a:	486c      	ldr	r0, [pc, #432]	@ (800b74c <HAL_ADC_Init+0x2f8>)
 800b59c:	f7ff fefa 	bl	800b394 <LL_ADC_IsEnabled>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	4323      	orrs	r3, r4
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	bf0c      	ite	eq
 800b5a8:	2301      	moveq	r3, #1
 800b5aa:	2300      	movne	r3, #0
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d012      	beq.n	800b5d8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b5ba:	d004      	beq.n	800b5c6 <HAL_ADC_Init+0x172>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a5f      	ldr	r2, [pc, #380]	@ (800b740 <HAL_ADC_Init+0x2ec>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d101      	bne.n	800b5ca <HAL_ADC_Init+0x176>
 800b5c6:	4a62      	ldr	r2, [pc, #392]	@ (800b750 <HAL_ADC_Init+0x2fc>)
 800b5c8:	e000      	b.n	800b5cc <HAL_ADC_Init+0x178>
 800b5ca:	4a62      	ldr	r2, [pc, #392]	@ (800b754 <HAL_ADC_Init+0x300>)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	4610      	mov	r0, r2
 800b5d4:	f7ff fcfa 	bl	800afcc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	7f5b      	ldrb	r3, [r3, #29]
 800b5dc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b5e2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800b5e8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800b5ee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b5f6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b602:	2b01      	cmp	r3, #1
 800b604:	d106      	bne.n	800b614 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b60a:	3b01      	subs	r3, #1
 800b60c:	045b      	lsls	r3, r3, #17
 800b60e:	69ba      	ldr	r2, [r7, #24]
 800b610:	4313      	orrs	r3, r2
 800b612:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d009      	beq.n	800b630 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b620:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b628:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b62a:	69ba      	ldr	r2, [r7, #24]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	68da      	ldr	r2, [r3, #12]
 800b636:	4b48      	ldr	r3, [pc, #288]	@ (800b758 <HAL_ADC_Init+0x304>)
 800b638:	4013      	ands	r3, r2
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	6812      	ldr	r2, [r2, #0]
 800b63e:	69b9      	ldr	r1, [r7, #24]
 800b640:	430b      	orrs	r3, r1
 800b642:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	691b      	ldr	r3, [r3, #16]
 800b64a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	430a      	orrs	r2, r1
 800b658:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4618      	mov	r0, r3
 800b660:	f7ff fee5 	bl	800b42e <LL_ADC_INJ_IsConversionOngoing>
 800b664:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d17f      	bne.n	800b76c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d17c      	bne.n	800b76c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b676:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b67e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b680:	4313      	orrs	r3, r2
 800b682:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b68e:	f023 0302 	bic.w	r3, r3, #2
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	6812      	ldr	r2, [r2, #0]
 800b696:	69b9      	ldr	r1, [r7, #24]
 800b698:	430b      	orrs	r3, r1
 800b69a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	691b      	ldr	r3, [r3, #16]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d017      	beq.n	800b6d4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	691a      	ldr	r2, [r3, #16]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b6b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b6bc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800b6c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	6911      	ldr	r1, [r2, #16]
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	6812      	ldr	r2, [r2, #0]
 800b6cc:	430b      	orrs	r3, r1
 800b6ce:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800b6d2:	e013      	b.n	800b6fc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	691a      	ldr	r2, [r3, #16]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b6e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	6812      	ldr	r2, [r2, #0]
 800b6f0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800b6f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b6f8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b702:	2b01      	cmp	r3, #1
 800b704:	d12a      	bne.n	800b75c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	691b      	ldr	r3, [r3, #16]
 800b70c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b710:	f023 0304 	bic.w	r3, r3, #4
 800b714:	687a      	ldr	r2, [r7, #4]
 800b716:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b71c:	4311      	orrs	r1, r2
 800b71e:	687a      	ldr	r2, [r7, #4]
 800b720:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800b722:	4311      	orrs	r1, r2
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b728:	430a      	orrs	r2, r1
 800b72a:	431a      	orrs	r2, r3
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f042 0201 	orr.w	r2, r2, #1
 800b734:	611a      	str	r2, [r3, #16]
 800b736:	e019      	b.n	800b76c <HAL_ADC_Init+0x318>
 800b738:	200005bc 	.word	0x200005bc
 800b73c:	053e2d63 	.word	0x053e2d63
 800b740:	50000100 	.word	0x50000100
 800b744:	50000400 	.word	0x50000400
 800b748:	50000500 	.word	0x50000500
 800b74c:	50000600 	.word	0x50000600
 800b750:	50000300 	.word	0x50000300
 800b754:	50000700 	.word	0x50000700
 800b758:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	691a      	ldr	r2, [r3, #16]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f022 0201 	bic.w	r2, r2, #1
 800b76a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	695b      	ldr	r3, [r3, #20]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d10c      	bne.n	800b78e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b77a:	f023 010f 	bic.w	r1, r3, #15
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a1b      	ldr	r3, [r3, #32]
 800b782:	1e5a      	subs	r2, r3, #1
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	430a      	orrs	r2, r1
 800b78a:	631a      	str	r2, [r3, #48]	@ 0x30
 800b78c:	e007      	b.n	800b79e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f022 020f 	bic.w	r2, r2, #15
 800b79c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7a2:	f023 0303 	bic.w	r3, r3, #3
 800b7a6:	f043 0201 	orr.w	r2, r3, #1
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b7ae:	e007      	b.n	800b7c0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7b4:	f043 0210 	orr.w	r2, r3, #16
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b7c0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3724      	adds	r7, #36	@ 0x24
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd90      	pop	{r4, r7, pc}
 800b7ca:	bf00      	nop

0800b7cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b086      	sub	sp, #24
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b7e0:	d004      	beq.n	800b7ec <HAL_ADC_Start_DMA+0x20>
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a5a      	ldr	r2, [pc, #360]	@ (800b950 <HAL_ADC_Start_DMA+0x184>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d101      	bne.n	800b7f0 <HAL_ADC_Start_DMA+0x24>
 800b7ec:	4b59      	ldr	r3, [pc, #356]	@ (800b954 <HAL_ADC_Start_DMA+0x188>)
 800b7ee:	e000      	b.n	800b7f2 <HAL_ADC_Start_DMA+0x26>
 800b7f0:	4b59      	ldr	r3, [pc, #356]	@ (800b958 <HAL_ADC_Start_DMA+0x18c>)
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7ff fd4a 	bl	800b28c <LL_ADC_GetMultimode>
 800b7f8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7ff fe02 	bl	800b408 <LL_ADC_REG_IsConversionOngoing>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	f040 809b 	bne.w	800b942 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b812:	2b01      	cmp	r3, #1
 800b814:	d101      	bne.n	800b81a <HAL_ADC_Start_DMA+0x4e>
 800b816:	2302      	movs	r3, #2
 800b818:	e096      	b.n	800b948 <HAL_ADC_Start_DMA+0x17c>
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2201      	movs	r2, #1
 800b81e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a4d      	ldr	r2, [pc, #308]	@ (800b95c <HAL_ADC_Start_DMA+0x190>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d008      	beq.n	800b83e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d005      	beq.n	800b83e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	2b05      	cmp	r3, #5
 800b836:	d002      	beq.n	800b83e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	2b09      	cmp	r3, #9
 800b83c:	d17a      	bne.n	800b934 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f000 fcf6 	bl	800c230 <ADC_Enable>
 800b844:	4603      	mov	r3, r0
 800b846:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800b848:	7dfb      	ldrb	r3, [r7, #23]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d16d      	bne.n	800b92a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b852:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b856:	f023 0301 	bic.w	r3, r3, #1
 800b85a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a3a      	ldr	r2, [pc, #232]	@ (800b950 <HAL_ADC_Start_DMA+0x184>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d009      	beq.n	800b880 <HAL_ADC_Start_DMA+0xb4>
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a3b      	ldr	r2, [pc, #236]	@ (800b960 <HAL_ADC_Start_DMA+0x194>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d002      	beq.n	800b87c <HAL_ADC_Start_DMA+0xb0>
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	e003      	b.n	800b884 <HAL_ADC_Start_DMA+0xb8>
 800b87c:	4b39      	ldr	r3, [pc, #228]	@ (800b964 <HAL_ADC_Start_DMA+0x198>)
 800b87e:	e001      	b.n	800b884 <HAL_ADC_Start_DMA+0xb8>
 800b880:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800b884:	68fa      	ldr	r2, [r7, #12]
 800b886:	6812      	ldr	r2, [r2, #0]
 800b888:	4293      	cmp	r3, r2
 800b88a:	d002      	beq.n	800b892 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d105      	bne.n	800b89e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b896:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d006      	beq.n	800b8b8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b8ae:	f023 0206 	bic.w	r2, r3, #6
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	661a      	str	r2, [r3, #96]	@ 0x60
 800b8b6:	e002      	b.n	800b8be <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8c2:	4a29      	ldr	r2, [pc, #164]	@ (800b968 <HAL_ADC_Start_DMA+0x19c>)
 800b8c4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8ca:	4a28      	ldr	r2, [pc, #160]	@ (800b96c <HAL_ADC_Start_DMA+0x1a0>)
 800b8cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8d2:	4a27      	ldr	r2, [pc, #156]	@ (800b970 <HAL_ADC_Start_DMA+0x1a4>)
 800b8d4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	221c      	movs	r2, #28
 800b8dc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	685a      	ldr	r2, [r3, #4]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f042 0210 	orr.w	r2, r2, #16
 800b8f4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68da      	ldr	r2, [r3, #12]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f042 0201 	orr.w	r2, r2, #1
 800b904:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	3340      	adds	r3, #64	@ 0x40
 800b910:	4619      	mov	r1, r3
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f001 f989 	bl	800cc2c <HAL_DMA_Start_IT>
 800b91a:	4603      	mov	r3, r0
 800b91c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4618      	mov	r0, r3
 800b924:	f7ff fd5c 	bl	800b3e0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800b928:	e00d      	b.n	800b946 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800b932:	e008      	b.n	800b946 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800b934:	2301      	movs	r3, #1
 800b936:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800b940:	e001      	b.n	800b946 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b942:	2302      	movs	r3, #2
 800b944:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b946:	7dfb      	ldrb	r3, [r7, #23]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3718      	adds	r7, #24
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	50000100 	.word	0x50000100
 800b954:	50000300 	.word	0x50000300
 800b958:	50000700 	.word	0x50000700
 800b95c:	50000600 	.word	0x50000600
 800b960:	50000500 	.word	0x50000500
 800b964:	50000400 	.word	0x50000400
 800b968:	0800c41b 	.word	0x0800c41b
 800b96c:	0800c4f3 	.word	0x0800c4f3
 800b970:	0800c50f 	.word	0x0800c50f

0800b974 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800b97c:	bf00      	nop
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800b990:	bf00      	nop
 800b992:	370c      	adds	r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b083      	sub	sp, #12
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800b9a4:	bf00      	nop
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b0b6      	sub	sp, #216	@ 0xd8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d102      	bne.n	800b9d4 <HAL_ADC_ConfigChannel+0x24>
 800b9ce:	2302      	movs	r3, #2
 800b9d0:	f000 bc13 	b.w	800c1fa <HAL_ADC_ConfigChannel+0x84a>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7ff fd11 	bl	800b408 <LL_ADC_REG_IsConversionOngoing>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	f040 83f3 	bne.w	800c1d4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6818      	ldr	r0, [r3, #0]
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	6859      	ldr	r1, [r3, #4]
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	f7ff fbcb 	bl	800b196 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4618      	mov	r0, r3
 800ba06:	f7ff fcff 	bl	800b408 <LL_ADC_REG_IsConversionOngoing>
 800ba0a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4618      	mov	r0, r3
 800ba14:	f7ff fd0b 	bl	800b42e <LL_ADC_INJ_IsConversionOngoing>
 800ba18:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800ba1c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	f040 81d9 	bne.w	800bdd8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800ba26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f040 81d4 	bne.w	800bdd8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	689b      	ldr	r3, [r3, #8]
 800ba34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba38:	d10f      	bne.n	800ba5a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6818      	ldr	r0, [r3, #0]
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2200      	movs	r2, #0
 800ba44:	4619      	mov	r1, r3
 800ba46:	f7ff fbd2 	bl	800b1ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7ff fb79 	bl	800b14a <LL_ADC_SetSamplingTimeCommonConfig>
 800ba58:	e00e      	b.n	800ba78 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6818      	ldr	r0, [r3, #0]
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	6819      	ldr	r1, [r3, #0]
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	461a      	mov	r2, r3
 800ba68:	f7ff fbc1 	bl	800b1ee <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2100      	movs	r1, #0
 800ba72:	4618      	mov	r0, r3
 800ba74:	f7ff fb69 	bl	800b14a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	695a      	ldr	r2, [r3, #20]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	68db      	ldr	r3, [r3, #12]
 800ba82:	08db      	lsrs	r3, r3, #3
 800ba84:	f003 0303 	and.w	r3, r3, #3
 800ba88:	005b      	lsls	r3, r3, #1
 800ba8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	2b04      	cmp	r3, #4
 800ba98:	d022      	beq.n	800bae0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6818      	ldr	r0, [r3, #0]
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	6919      	ldr	r1, [r3, #16]
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800baaa:	f7ff fac3 	bl	800b034 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6818      	ldr	r0, [r3, #0]
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	6919      	ldr	r1, [r3, #16]
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	461a      	mov	r2, r3
 800babc:	f7ff fb0f 	bl	800b0de <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6818      	ldr	r0, [r3, #0]
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800bacc:	2b01      	cmp	r3, #1
 800bace:	d102      	bne.n	800bad6 <HAL_ADC_ConfigChannel+0x126>
 800bad0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800bad4:	e000      	b.n	800bad8 <HAL_ADC_ConfigChannel+0x128>
 800bad6:	2300      	movs	r3, #0
 800bad8:	461a      	mov	r2, r3
 800bada:	f7ff fb1b 	bl	800b114 <LL_ADC_SetOffsetSaturation>
 800bade:	e17b      	b.n	800bdd8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2100      	movs	r1, #0
 800bae6:	4618      	mov	r0, r3
 800bae8:	f7ff fac8 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800baec:	4603      	mov	r3, r0
 800baee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d10a      	bne.n	800bb0c <HAL_ADC_ConfigChannel+0x15c>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2100      	movs	r1, #0
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7ff fabd 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bb02:	4603      	mov	r3, r0
 800bb04:	0e9b      	lsrs	r3, r3, #26
 800bb06:	f003 021f 	and.w	r2, r3, #31
 800bb0a:	e01e      	b.n	800bb4a <HAL_ADC_ConfigChannel+0x19a>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2100      	movs	r1, #0
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7ff fab2 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bb22:	fa93 f3a3 	rbit	r3, r3
 800bb26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800bb2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800bb2e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800bb32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d101      	bne.n	800bb3e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800bb3a:	2320      	movs	r3, #32
 800bb3c:	e004      	b.n	800bb48 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800bb3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800bb42:	fab3 f383 	clz	r3, r3
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d105      	bne.n	800bb62 <HAL_ADC_ConfigChannel+0x1b2>
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	0e9b      	lsrs	r3, r3, #26
 800bb5c:	f003 031f 	and.w	r3, r3, #31
 800bb60:	e018      	b.n	800bb94 <HAL_ADC_ConfigChannel+0x1e4>
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bb6e:	fa93 f3a3 	rbit	r3, r3
 800bb72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800bb76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bb7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800bb7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d101      	bne.n	800bb8a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800bb86:	2320      	movs	r3, #32
 800bb88:	e004      	b.n	800bb94 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800bb8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800bb8e:	fab3 f383 	clz	r3, r3
 800bb92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d106      	bne.n	800bba6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	2100      	movs	r1, #0
 800bba0:	4618      	mov	r0, r3
 800bba2:	f7ff fa81 	bl	800b0a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	2101      	movs	r1, #1
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7ff fa65 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10a      	bne.n	800bbd2 <HAL_ADC_ConfigChannel+0x222>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	2101      	movs	r1, #1
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f7ff fa5a 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	0e9b      	lsrs	r3, r3, #26
 800bbcc:	f003 021f 	and.w	r2, r3, #31
 800bbd0:	e01e      	b.n	800bc10 <HAL_ADC_ConfigChannel+0x260>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	2101      	movs	r1, #1
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f7ff fa4f 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbe4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800bbe8:	fa93 f3a3 	rbit	r3, r3
 800bbec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800bbf0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bbf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800bbf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d101      	bne.n	800bc04 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800bc00:	2320      	movs	r3, #32
 800bc02:	e004      	b.n	800bc0e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800bc04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bc08:	fab3 f383 	clz	r3, r3
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d105      	bne.n	800bc28 <HAL_ADC_ConfigChannel+0x278>
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	0e9b      	lsrs	r3, r3, #26
 800bc22:	f003 031f 	and.w	r3, r3, #31
 800bc26:	e018      	b.n	800bc5a <HAL_ADC_ConfigChannel+0x2aa>
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc30:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800bc34:	fa93 f3a3 	rbit	r3, r3
 800bc38:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800bc3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bc40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800bc44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800bc4c:	2320      	movs	r3, #32
 800bc4e:	e004      	b.n	800bc5a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800bc50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800bc54:	fab3 f383 	clz	r3, r3
 800bc58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d106      	bne.n	800bc6c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2200      	movs	r2, #0
 800bc64:	2101      	movs	r1, #1
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7ff fa1e 	bl	800b0a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2102      	movs	r1, #2
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7ff fa02 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10a      	bne.n	800bc98 <HAL_ADC_ConfigChannel+0x2e8>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2102      	movs	r1, #2
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7ff f9f7 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	0e9b      	lsrs	r3, r3, #26
 800bc92:	f003 021f 	and.w	r2, r3, #31
 800bc96:	e01e      	b.n	800bcd6 <HAL_ADC_ConfigChannel+0x326>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2102      	movs	r1, #2
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f7ff f9ec 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bca4:	4603      	mov	r3, r0
 800bca6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bcae:	fa93 f3a3 	rbit	r3, r3
 800bcb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800bcb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800bcba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800bcbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d101      	bne.n	800bcca <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800bcc6:	2320      	movs	r3, #32
 800bcc8:	e004      	b.n	800bcd4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800bcca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bcce:	fab3 f383 	clz	r3, r3
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d105      	bne.n	800bcee <HAL_ADC_ConfigChannel+0x33e>
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	0e9b      	lsrs	r3, r3, #26
 800bce8:	f003 031f 	and.w	r3, r3, #31
 800bcec:	e016      	b.n	800bd1c <HAL_ADC_ConfigChannel+0x36c>
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bcfa:	fa93 f3a3 	rbit	r3, r3
 800bcfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800bd00:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bd02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800bd06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d101      	bne.n	800bd12 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800bd0e:	2320      	movs	r3, #32
 800bd10:	e004      	b.n	800bd1c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800bd12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bd16:	fab3 f383 	clz	r3, r3
 800bd1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d106      	bne.n	800bd2e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2200      	movs	r2, #0
 800bd26:	2102      	movs	r1, #2
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7ff f9bd 	bl	800b0a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	2103      	movs	r1, #3
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7ff f9a1 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d10a      	bne.n	800bd5a <HAL_ADC_ConfigChannel+0x3aa>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2103      	movs	r1, #3
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f7ff f996 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bd50:	4603      	mov	r3, r0
 800bd52:	0e9b      	lsrs	r3, r3, #26
 800bd54:	f003 021f 	and.w	r2, r3, #31
 800bd58:	e017      	b.n	800bd8a <HAL_ADC_ConfigChannel+0x3da>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2103      	movs	r1, #3
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7ff f98b 	bl	800b07c <LL_ADC_GetOffsetChannel>
 800bd66:	4603      	mov	r3, r0
 800bd68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bd6c:	fa93 f3a3 	rbit	r3, r3
 800bd70:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800bd72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd74:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800bd76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800bd7c:	2320      	movs	r3, #32
 800bd7e:	e003      	b.n	800bd88 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800bd80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bd82:	fab3 f383 	clz	r3, r3
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d105      	bne.n	800bda2 <HAL_ADC_ConfigChannel+0x3f2>
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	0e9b      	lsrs	r3, r3, #26
 800bd9c:	f003 031f 	and.w	r3, r3, #31
 800bda0:	e011      	b.n	800bdc6 <HAL_ADC_ConfigChannel+0x416>
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bda8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bdaa:	fa93 f3a3 	rbit	r3, r3
 800bdae:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800bdb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bdb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800bdb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d101      	bne.n	800bdbe <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800bdba:	2320      	movs	r3, #32
 800bdbc:	e003      	b.n	800bdc6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800bdbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdc0:	fab3 f383 	clz	r3, r3
 800bdc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d106      	bne.n	800bdd8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	2103      	movs	r1, #3
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7ff f968 	bl	800b0a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7ff fad9 	bl	800b394 <LL_ADC_IsEnabled>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f040 813d 	bne.w	800c064 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6818      	ldr	r0, [r3, #0]
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	6819      	ldr	r1, [r3, #0]
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	f7ff fa24 	bl	800b244 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	4aa2      	ldr	r2, [pc, #648]	@ (800c08c <HAL_ADC_ConfigChannel+0x6dc>)
 800be02:	4293      	cmp	r3, r2
 800be04:	f040 812e 	bne.w	800c064 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10b      	bne.n	800be30 <HAL_ADC_ConfigChannel+0x480>
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	0e9b      	lsrs	r3, r3, #26
 800be1e:	3301      	adds	r3, #1
 800be20:	f003 031f 	and.w	r3, r3, #31
 800be24:	2b09      	cmp	r3, #9
 800be26:	bf94      	ite	ls
 800be28:	2301      	movls	r3, #1
 800be2a:	2300      	movhi	r3, #0
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	e019      	b.n	800be64 <HAL_ADC_ConfigChannel+0x4b4>
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be38:	fa93 f3a3 	rbit	r3, r3
 800be3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800be3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800be40:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800be42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be44:	2b00      	cmp	r3, #0
 800be46:	d101      	bne.n	800be4c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800be48:	2320      	movs	r3, #32
 800be4a:	e003      	b.n	800be54 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800be4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800be4e:	fab3 f383 	clz	r3, r3
 800be52:	b2db      	uxtb	r3, r3
 800be54:	3301      	adds	r3, #1
 800be56:	f003 031f 	and.w	r3, r3, #31
 800be5a:	2b09      	cmp	r3, #9
 800be5c:	bf94      	ite	ls
 800be5e:	2301      	movls	r3, #1
 800be60:	2300      	movhi	r3, #0
 800be62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800be64:	2b00      	cmp	r3, #0
 800be66:	d079      	beq.n	800bf5c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be70:	2b00      	cmp	r3, #0
 800be72:	d107      	bne.n	800be84 <HAL_ADC_ConfigChannel+0x4d4>
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	0e9b      	lsrs	r3, r3, #26
 800be7a:	3301      	adds	r3, #1
 800be7c:	069b      	lsls	r3, r3, #26
 800be7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800be82:	e015      	b.n	800beb0 <HAL_ADC_ConfigChannel+0x500>
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800be8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800be8c:	fa93 f3a3 	rbit	r3, r3
 800be90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800be92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be94:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800be96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d101      	bne.n	800bea0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800be9c:	2320      	movs	r3, #32
 800be9e:	e003      	b.n	800bea8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800bea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bea2:	fab3 f383 	clz	r3, r3
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	3301      	adds	r3, #1
 800beaa:	069b      	lsls	r3, r3, #26
 800beac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d109      	bne.n	800bed0 <HAL_ADC_ConfigChannel+0x520>
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	0e9b      	lsrs	r3, r3, #26
 800bec2:	3301      	adds	r3, #1
 800bec4:	f003 031f 	and.w	r3, r3, #31
 800bec8:	2101      	movs	r1, #1
 800beca:	fa01 f303 	lsl.w	r3, r1, r3
 800bece:	e017      	b.n	800bf00 <HAL_ADC_ConfigChannel+0x550>
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bed6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bed8:	fa93 f3a3 	rbit	r3, r3
 800bedc:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800bede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bee0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800bee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d101      	bne.n	800beec <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800bee8:	2320      	movs	r3, #32
 800beea:	e003      	b.n	800bef4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800beec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800beee:	fab3 f383 	clz	r3, r3
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	3301      	adds	r3, #1
 800bef6:	f003 031f 	and.w	r3, r3, #31
 800befa:	2101      	movs	r1, #1
 800befc:	fa01 f303 	lsl.w	r3, r1, r3
 800bf00:	ea42 0103 	orr.w	r1, r2, r3
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d10a      	bne.n	800bf26 <HAL_ADC_ConfigChannel+0x576>
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	0e9b      	lsrs	r3, r3, #26
 800bf16:	3301      	adds	r3, #1
 800bf18:	f003 021f 	and.w	r2, r3, #31
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	005b      	lsls	r3, r3, #1
 800bf20:	4413      	add	r3, r2
 800bf22:	051b      	lsls	r3, r3, #20
 800bf24:	e018      	b.n	800bf58 <HAL_ADC_ConfigChannel+0x5a8>
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf2e:	fa93 f3a3 	rbit	r3, r3
 800bf32:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800bf34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800bf38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d101      	bne.n	800bf42 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800bf3e:	2320      	movs	r3, #32
 800bf40:	e003      	b.n	800bf4a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800bf42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf44:	fab3 f383 	clz	r3, r3
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	f003 021f 	and.w	r2, r3, #31
 800bf50:	4613      	mov	r3, r2
 800bf52:	005b      	lsls	r3, r3, #1
 800bf54:	4413      	add	r3, r2
 800bf56:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bf58:	430b      	orrs	r3, r1
 800bf5a:	e07e      	b.n	800c05a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d107      	bne.n	800bf78 <HAL_ADC_ConfigChannel+0x5c8>
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	0e9b      	lsrs	r3, r3, #26
 800bf6e:	3301      	adds	r3, #1
 800bf70:	069b      	lsls	r3, r3, #26
 800bf72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bf76:	e015      	b.n	800bfa4 <HAL_ADC_ConfigChannel+0x5f4>
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf80:	fa93 f3a3 	rbit	r3, r3
 800bf84:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800bf86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf88:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800bf8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d101      	bne.n	800bf94 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800bf90:	2320      	movs	r3, #32
 800bf92:	e003      	b.n	800bf9c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800bf94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf96:	fab3 f383 	clz	r3, r3
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	069b      	lsls	r3, r3, #26
 800bfa0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d109      	bne.n	800bfc4 <HAL_ADC_ConfigChannel+0x614>
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	0e9b      	lsrs	r3, r3, #26
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	f003 031f 	and.w	r3, r3, #31
 800bfbc:	2101      	movs	r1, #1
 800bfbe:	fa01 f303 	lsl.w	r3, r1, r3
 800bfc2:	e017      	b.n	800bff4 <HAL_ADC_ConfigChannel+0x644>
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bfca:	6a3b      	ldr	r3, [r7, #32]
 800bfcc:	fa93 f3a3 	rbit	r3, r3
 800bfd0:	61fb      	str	r3, [r7, #28]
  return result;
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d101      	bne.n	800bfe0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800bfdc:	2320      	movs	r3, #32
 800bfde:	e003      	b.n	800bfe8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800bfe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe2:	fab3 f383 	clz	r3, r3
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	3301      	adds	r3, #1
 800bfea:	f003 031f 	and.w	r3, r3, #31
 800bfee:	2101      	movs	r1, #1
 800bff0:	fa01 f303 	lsl.w	r3, r1, r3
 800bff4:	ea42 0103 	orr.w	r1, r2, r3
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10d      	bne.n	800c020 <HAL_ADC_ConfigChannel+0x670>
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	0e9b      	lsrs	r3, r3, #26
 800c00a:	3301      	adds	r3, #1
 800c00c:	f003 021f 	and.w	r2, r3, #31
 800c010:	4613      	mov	r3, r2
 800c012:	005b      	lsls	r3, r3, #1
 800c014:	4413      	add	r3, r2
 800c016:	3b1e      	subs	r3, #30
 800c018:	051b      	lsls	r3, r3, #20
 800c01a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c01e:	e01b      	b.n	800c058 <HAL_ADC_ConfigChannel+0x6a8>
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	fa93 f3a3 	rbit	r3, r3
 800c02c:	613b      	str	r3, [r7, #16]
  return result;
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d101      	bne.n	800c03c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800c038:	2320      	movs	r3, #32
 800c03a:	e003      	b.n	800c044 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	fab3 f383 	clz	r3, r3
 800c042:	b2db      	uxtb	r3, r3
 800c044:	3301      	adds	r3, #1
 800c046:	f003 021f 	and.w	r2, r3, #31
 800c04a:	4613      	mov	r3, r2
 800c04c:	005b      	lsls	r3, r3, #1
 800c04e:	4413      	add	r3, r2
 800c050:	3b1e      	subs	r3, #30
 800c052:	051b      	lsls	r3, r3, #20
 800c054:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c058:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800c05a:	683a      	ldr	r2, [r7, #0]
 800c05c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c05e:	4619      	mov	r1, r3
 800c060:	f7ff f8c5 	bl	800b1ee <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	681a      	ldr	r2, [r3, #0]
 800c068:	4b09      	ldr	r3, [pc, #36]	@ (800c090 <HAL_ADC_ConfigChannel+0x6e0>)
 800c06a:	4013      	ands	r3, r2
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f000 80be 	beq.w	800c1ee <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c07a:	d004      	beq.n	800c086 <HAL_ADC_ConfigChannel+0x6d6>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a04      	ldr	r2, [pc, #16]	@ (800c094 <HAL_ADC_ConfigChannel+0x6e4>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d10a      	bne.n	800c09c <HAL_ADC_ConfigChannel+0x6ec>
 800c086:	4b04      	ldr	r3, [pc, #16]	@ (800c098 <HAL_ADC_ConfigChannel+0x6e8>)
 800c088:	e009      	b.n	800c09e <HAL_ADC_ConfigChannel+0x6ee>
 800c08a:	bf00      	nop
 800c08c:	407f0000 	.word	0x407f0000
 800c090:	80080000 	.word	0x80080000
 800c094:	50000100 	.word	0x50000100
 800c098:	50000300 	.word	0x50000300
 800c09c:	4b59      	ldr	r3, [pc, #356]	@ (800c204 <HAL_ADC_ConfigChannel+0x854>)
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fe ffba 	bl	800b018 <LL_ADC_GetCommonPathInternalCh>
 800c0a4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a56      	ldr	r2, [pc, #344]	@ (800c208 <HAL_ADC_ConfigChannel+0x858>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d004      	beq.n	800c0bc <HAL_ADC_ConfigChannel+0x70c>
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a55      	ldr	r2, [pc, #340]	@ (800c20c <HAL_ADC_ConfigChannel+0x85c>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d13a      	bne.n	800c132 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c0bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c0c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d134      	bne.n	800c132 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c0d0:	d005      	beq.n	800c0de <HAL_ADC_ConfigChannel+0x72e>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a4e      	ldr	r2, [pc, #312]	@ (800c210 <HAL_ADC_ConfigChannel+0x860>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	f040 8085 	bne.w	800c1e8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c0e6:	d004      	beq.n	800c0f2 <HAL_ADC_ConfigChannel+0x742>
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	4a49      	ldr	r2, [pc, #292]	@ (800c214 <HAL_ADC_ConfigChannel+0x864>)
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d101      	bne.n	800c0f6 <HAL_ADC_ConfigChannel+0x746>
 800c0f2:	4a49      	ldr	r2, [pc, #292]	@ (800c218 <HAL_ADC_ConfigChannel+0x868>)
 800c0f4:	e000      	b.n	800c0f8 <HAL_ADC_ConfigChannel+0x748>
 800c0f6:	4a43      	ldr	r2, [pc, #268]	@ (800c204 <HAL_ADC_ConfigChannel+0x854>)
 800c0f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c0fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c100:	4619      	mov	r1, r3
 800c102:	4610      	mov	r0, r2
 800c104:	f7fe ff75 	bl	800aff2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c108:	4b44      	ldr	r3, [pc, #272]	@ (800c21c <HAL_ADC_ConfigChannel+0x86c>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	099b      	lsrs	r3, r3, #6
 800c10e:	4a44      	ldr	r2, [pc, #272]	@ (800c220 <HAL_ADC_ConfigChannel+0x870>)
 800c110:	fba2 2303 	umull	r2, r3, r2, r3
 800c114:	099b      	lsrs	r3, r3, #6
 800c116:	1c5a      	adds	r2, r3, #1
 800c118:	4613      	mov	r3, r2
 800c11a:	005b      	lsls	r3, r3, #1
 800c11c:	4413      	add	r3, r2
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c122:	e002      	b.n	800c12a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	3b01      	subs	r3, #1
 800c128:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d1f9      	bne.n	800c124 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c130:	e05a      	b.n	800c1e8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a3b      	ldr	r2, [pc, #236]	@ (800c224 <HAL_ADC_ConfigChannel+0x874>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d125      	bne.n	800c188 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800c13c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c140:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c144:	2b00      	cmp	r3, #0
 800c146:	d11f      	bne.n	800c188 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a31      	ldr	r2, [pc, #196]	@ (800c214 <HAL_ADC_ConfigChannel+0x864>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d104      	bne.n	800c15c <HAL_ADC_ConfigChannel+0x7ac>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a34      	ldr	r2, [pc, #208]	@ (800c228 <HAL_ADC_ConfigChannel+0x878>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d047      	beq.n	800c1ec <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c164:	d004      	beq.n	800c170 <HAL_ADC_ConfigChannel+0x7c0>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a2a      	ldr	r2, [pc, #168]	@ (800c214 <HAL_ADC_ConfigChannel+0x864>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d101      	bne.n	800c174 <HAL_ADC_ConfigChannel+0x7c4>
 800c170:	4a29      	ldr	r2, [pc, #164]	@ (800c218 <HAL_ADC_ConfigChannel+0x868>)
 800c172:	e000      	b.n	800c176 <HAL_ADC_ConfigChannel+0x7c6>
 800c174:	4a23      	ldr	r2, [pc, #140]	@ (800c204 <HAL_ADC_ConfigChannel+0x854>)
 800c176:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c17a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c17e:	4619      	mov	r1, r3
 800c180:	4610      	mov	r0, r2
 800c182:	f7fe ff36 	bl	800aff2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c186:	e031      	b.n	800c1ec <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a27      	ldr	r2, [pc, #156]	@ (800c22c <HAL_ADC_ConfigChannel+0x87c>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d12d      	bne.n	800c1ee <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800c192:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d127      	bne.n	800c1ee <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a1c      	ldr	r2, [pc, #112]	@ (800c214 <HAL_ADC_ConfigChannel+0x864>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d022      	beq.n	800c1ee <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c1b0:	d004      	beq.n	800c1bc <HAL_ADC_ConfigChannel+0x80c>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a17      	ldr	r2, [pc, #92]	@ (800c214 <HAL_ADC_ConfigChannel+0x864>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d101      	bne.n	800c1c0 <HAL_ADC_ConfigChannel+0x810>
 800c1bc:	4a16      	ldr	r2, [pc, #88]	@ (800c218 <HAL_ADC_ConfigChannel+0x868>)
 800c1be:	e000      	b.n	800c1c2 <HAL_ADC_ConfigChannel+0x812>
 800c1c0:	4a10      	ldr	r2, [pc, #64]	@ (800c204 <HAL_ADC_ConfigChannel+0x854>)
 800c1c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c1c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	4610      	mov	r0, r2
 800c1ce:	f7fe ff10 	bl	800aff2 <LL_ADC_SetCommonPathInternalCh>
 800c1d2:	e00c      	b.n	800c1ee <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1d8:	f043 0220 	orr.w	r2, r3, #32
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800c1e6:	e002      	b.n	800c1ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c1e8:	bf00      	nop
 800c1ea:	e000      	b.n	800c1ee <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c1ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800c1f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	37d8      	adds	r7, #216	@ 0xd8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	50000700 	.word	0x50000700
 800c208:	c3210000 	.word	0xc3210000
 800c20c:	90c00010 	.word	0x90c00010
 800c210:	50000600 	.word	0x50000600
 800c214:	50000100 	.word	0x50000100
 800c218:	50000300 	.word	0x50000300
 800c21c:	200005bc 	.word	0x200005bc
 800c220:	053e2d63 	.word	0x053e2d63
 800c224:	c7520000 	.word	0xc7520000
 800c228:	50000500 	.word	0x50000500
 800c22c:	cb840000 	.word	0xcb840000

0800c230 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800c238:	2300      	movs	r3, #0
 800c23a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4618      	mov	r0, r3
 800c242:	f7ff f8a7 	bl	800b394 <LL_ADC_IsEnabled>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d176      	bne.n	800c33a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	689a      	ldr	r2, [r3, #8]
 800c252:	4b3c      	ldr	r3, [pc, #240]	@ (800c344 <ADC_Enable+0x114>)
 800c254:	4013      	ands	r3, r2
 800c256:	2b00      	cmp	r3, #0
 800c258:	d00d      	beq.n	800c276 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c25e:	f043 0210 	orr.w	r2, r3, #16
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c26a:	f043 0201 	orr.w	r2, r3, #1
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800c272:	2301      	movs	r3, #1
 800c274:	e062      	b.n	800c33c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f7ff f862 	bl	800b344 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c288:	d004      	beq.n	800c294 <ADC_Enable+0x64>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4a2e      	ldr	r2, [pc, #184]	@ (800c348 <ADC_Enable+0x118>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d101      	bne.n	800c298 <ADC_Enable+0x68>
 800c294:	4b2d      	ldr	r3, [pc, #180]	@ (800c34c <ADC_Enable+0x11c>)
 800c296:	e000      	b.n	800c29a <ADC_Enable+0x6a>
 800c298:	4b2d      	ldr	r3, [pc, #180]	@ (800c350 <ADC_Enable+0x120>)
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fe febc 	bl	800b018 <LL_ADC_GetCommonPathInternalCh>
 800c2a0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800c2a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d013      	beq.n	800c2d2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c2aa:	4b2a      	ldr	r3, [pc, #168]	@ (800c354 <ADC_Enable+0x124>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	099b      	lsrs	r3, r3, #6
 800c2b0:	4a29      	ldr	r2, [pc, #164]	@ (800c358 <ADC_Enable+0x128>)
 800c2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2b6:	099b      	lsrs	r3, r3, #6
 800c2b8:	1c5a      	adds	r2, r3, #1
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	005b      	lsls	r3, r3, #1
 800c2be:	4413      	add	r3, r2
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c2c4:	e002      	b.n	800c2cc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	3b01      	subs	r3, #1
 800c2ca:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1f9      	bne.n	800c2c6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800c2d2:	f7fe fe6f 	bl	800afb4 <HAL_GetTick>
 800c2d6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c2d8:	e028      	b.n	800c32c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f7ff f858 	bl	800b394 <LL_ADC_IsEnabled>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d104      	bne.n	800c2f4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7ff f828 	bl	800b344 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c2f4:	f7fe fe5e 	bl	800afb4 <HAL_GetTick>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	1ad3      	subs	r3, r2, r3
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	d914      	bls.n	800c32c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f003 0301 	and.w	r3, r3, #1
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d00d      	beq.n	800c32c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c314:	f043 0210 	orr.w	r2, r3, #16
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c320:	f043 0201 	orr.w	r2, r3, #1
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800c328:	2301      	movs	r3, #1
 800c32a:	e007      	b.n	800c33c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f003 0301 	and.w	r3, r3, #1
 800c336:	2b01      	cmp	r3, #1
 800c338:	d1cf      	bne.n	800c2da <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c33a:	2300      	movs	r3, #0
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3710      	adds	r7, #16
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	8000003f 	.word	0x8000003f
 800c348:	50000100 	.word	0x50000100
 800c34c:	50000300 	.word	0x50000300
 800c350:	50000700 	.word	0x50000700
 800c354:	200005bc 	.word	0x200005bc
 800c358:	053e2d63 	.word	0x053e2d63

0800c35c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4618      	mov	r0, r3
 800c36a:	f7ff f826 	bl	800b3ba <LL_ADC_IsDisableOngoing>
 800c36e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4618      	mov	r0, r3
 800c376:	f7ff f80d 	bl	800b394 <LL_ADC_IsEnabled>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d047      	beq.n	800c410 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d144      	bne.n	800c410 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	f003 030d 	and.w	r3, r3, #13
 800c390:	2b01      	cmp	r3, #1
 800c392:	d10c      	bne.n	800c3ae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4618      	mov	r0, r3
 800c39a:	f7fe ffe7 	bl	800b36c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2203      	movs	r2, #3
 800c3a4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800c3a6:	f7fe fe05 	bl	800afb4 <HAL_GetTick>
 800c3aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c3ac:	e029      	b.n	800c402 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3b2:	f043 0210 	orr.w	r2, r3, #16
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c3be:	f043 0201 	orr.w	r2, r3, #1
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e023      	b.n	800c412 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800c3ca:	f7fe fdf3 	bl	800afb4 <HAL_GetTick>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	1ad3      	subs	r3, r2, r3
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	d914      	bls.n	800c402 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	f003 0301 	and.w	r3, r3, #1
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00d      	beq.n	800c402 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c3ea:	f043 0210 	orr.w	r2, r3, #16
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c3f6:	f043 0201 	orr.w	r2, r3, #1
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e007      	b.n	800c412 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	f003 0301 	and.w	r3, r3, #1
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1dc      	bne.n	800c3ca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b084      	sub	sp, #16
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c426:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c42c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c430:	2b00      	cmp	r3, #0
 800c432:	d14b      	bne.n	800c4cc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c438:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f003 0308 	and.w	r3, r3, #8
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d021      	beq.n	800c492 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4618      	mov	r0, r3
 800c454:	f7fe fe8c 	bl	800b170 <LL_ADC_REG_IsTriggerSourceSWStart>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d032      	beq.n	800c4c4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d12b      	bne.n	800c4c4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c470:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c47c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c480:	2b00      	cmp	r3, #0
 800c482:	d11f      	bne.n	800c4c4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c488:	f043 0201 	orr.w	r2, r3, #1
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c490:	e018      	b.n	800c4c4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	f003 0302 	and.w	r3, r3, #2
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d111      	bne.n	800c4c4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d105      	bne.n	800c4c4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4bc:	f043 0201 	orr.w	r2, r3, #1
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	f7ff fa55 	bl	800b974 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c4ca:	e00e      	b.n	800c4ea <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4d0:	f003 0310 	and.w	r3, r3, #16
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d003      	beq.n	800c4e0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f7ff fa5f 	bl	800b99c <HAL_ADC_ErrorCallback>
}
 800c4de:	e004      	b.n	800c4ea <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	4798      	blx	r3
}
 800c4ea:	bf00      	nop
 800c4ec:	3710      	adds	r7, #16
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b084      	sub	sp, #16
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4fe:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f7ff fa41 	bl	800b988 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c506:	bf00      	nop
 800c508:	3710      	adds	r7, #16
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b084      	sub	sp, #16
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c51a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c520:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c52c:	f043 0204 	orr.w	r2, r3, #4
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c534:	68f8      	ldr	r0, [r7, #12]
 800c536:	f7ff fa31 	bl	800b99c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c53a:	bf00      	nop
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}

0800c542 <LL_ADC_IsEnabled>:
{
 800c542:	b480      	push	{r7}
 800c544:	b083      	sub	sp, #12
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	f003 0301 	and.w	r3, r3, #1
 800c552:	2b01      	cmp	r3, #1
 800c554:	d101      	bne.n	800c55a <LL_ADC_IsEnabled+0x18>
 800c556:	2301      	movs	r3, #1
 800c558:	e000      	b.n	800c55c <LL_ADC_IsEnabled+0x1a>
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <LL_ADC_StartCalibration>:
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	689b      	ldr	r3, [r3, #8]
 800c576:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800c57a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c57e:	683a      	ldr	r2, [r7, #0]
 800c580:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c584:	4313      	orrs	r3, r2
 800c586:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	609a      	str	r2, [r3, #8]
}
 800c58e:	bf00      	nop
 800c590:	370c      	adds	r7, #12
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr

0800c59a <LL_ADC_IsCalibrationOnGoing>:
{
 800c59a:	b480      	push	{r7}
 800c59c:	b083      	sub	sp, #12
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	689b      	ldr	r3, [r3, #8]
 800c5a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c5aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c5ae:	d101      	bne.n	800c5b4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e000      	b.n	800c5b6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	370c      	adds	r7, #12
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr

0800c5c2 <LL_ADC_REG_IsConversionOngoing>:
{
 800c5c2:	b480      	push	{r7}
 800c5c4:	b083      	sub	sp, #12
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	689b      	ldr	r3, [r3, #8]
 800c5ce:	f003 0304 	and.w	r3, r3, #4
 800c5d2:	2b04      	cmp	r3, #4
 800c5d4:	d101      	bne.n	800c5da <LL_ADC_REG_IsConversionOngoing+0x18>
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	e000      	b.n	800c5dc <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	370c      	adds	r7, #12
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d101      	bne.n	800c604 <HAL_ADCEx_Calibration_Start+0x1c>
 800c600:	2302      	movs	r3, #2
 800c602:	e04d      	b.n	800c6a0 <HAL_ADCEx_Calibration_Start+0xb8>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f7ff fea5 	bl	800c35c <ADC_Disable>
 800c612:	4603      	mov	r3, r0
 800c614:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800c616:	7bfb      	ldrb	r3, [r7, #15]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d136      	bne.n	800c68a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c620:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800c624:	f023 0302 	bic.w	r3, r3, #2
 800c628:	f043 0202 	orr.w	r2, r3, #2
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	6839      	ldr	r1, [r7, #0]
 800c636:	4618      	mov	r0, r3
 800c638:	f7ff ff96 	bl	800c568 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800c63c:	e014      	b.n	800c668 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	3301      	adds	r3, #1
 800c642:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	4a18      	ldr	r2, [pc, #96]	@ (800c6a8 <HAL_ADCEx_Calibration_Start+0xc0>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d90d      	bls.n	800c668 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c650:	f023 0312 	bic.w	r3, r3, #18
 800c654:	f043 0210 	orr.w	r2, r3, #16
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800c664:	2301      	movs	r3, #1
 800c666:	e01b      	b.n	800c6a0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7ff ff94 	bl	800c59a <LL_ADC_IsCalibrationOnGoing>
 800c672:	4603      	mov	r3, r0
 800c674:	2b00      	cmp	r3, #0
 800c676:	d1e2      	bne.n	800c63e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c67c:	f023 0303 	bic.w	r3, r3, #3
 800c680:	f043 0201 	orr.w	r2, r3, #1
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c688:	e005      	b.n	800c696 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c68e:	f043 0210 	orr.w	r2, r3, #16
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2200      	movs	r2, #0
 800c69a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800c69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3710      	adds	r7, #16
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	0004de01 	.word	0x0004de01

0800c6ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800c6ac:	b590      	push	{r4, r7, lr}
 800c6ae:	b0a1      	sub	sp, #132	@ 0x84
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d101      	bne.n	800c6ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c6c6:	2302      	movs	r3, #2
 800c6c8:	e0e7      	b.n	800c89a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c6e2:	d102      	bne.n	800c6ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c6e4:	4b6f      	ldr	r3, [pc, #444]	@ (800c8a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c6e6:	60bb      	str	r3, [r7, #8]
 800c6e8:	e009      	b.n	800c6fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4a6e      	ldr	r2, [pc, #440]	@ (800c8a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d102      	bne.n	800c6fa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800c6f4:	4b6d      	ldr	r3, [pc, #436]	@ (800c8ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c6f6:	60bb      	str	r3, [r7, #8]
 800c6f8:	e001      	b.n	800c6fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d10b      	bne.n	800c71c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c708:	f043 0220 	orr.w	r2, r3, #32
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800c718:	2301      	movs	r3, #1
 800c71a:	e0be      	b.n	800c89a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	4618      	mov	r0, r3
 800c720:	f7ff ff4f 	bl	800c5c2 <LL_ADC_REG_IsConversionOngoing>
 800c724:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7ff ff49 	bl	800c5c2 <LL_ADC_REG_IsConversionOngoing>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	f040 80a0 	bne.w	800c878 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800c738:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	f040 809c 	bne.w	800c878 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c748:	d004      	beq.n	800c754 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a55      	ldr	r2, [pc, #340]	@ (800c8a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d101      	bne.n	800c758 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800c754:	4b56      	ldr	r3, [pc, #344]	@ (800c8b0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800c756:	e000      	b.n	800c75a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800c758:	4b56      	ldr	r3, [pc, #344]	@ (800c8b4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800c75a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d04b      	beq.n	800c7fc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800c764:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	6859      	ldr	r1, [r3, #4]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c776:	035b      	lsls	r3, r3, #13
 800c778:	430b      	orrs	r3, r1
 800c77a:	431a      	orrs	r2, r3
 800c77c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c77e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c788:	d004      	beq.n	800c794 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a45      	ldr	r2, [pc, #276]	@ (800c8a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d10f      	bne.n	800c7b4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800c794:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800c798:	f7ff fed3 	bl	800c542 <LL_ADC_IsEnabled>
 800c79c:	4604      	mov	r4, r0
 800c79e:	4841      	ldr	r0, [pc, #260]	@ (800c8a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c7a0:	f7ff fecf 	bl	800c542 <LL_ADC_IsEnabled>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	4323      	orrs	r3, r4
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	bf0c      	ite	eq
 800c7ac:	2301      	moveq	r3, #1
 800c7ae:	2300      	movne	r3, #0
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	e012      	b.n	800c7da <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800c7b4:	483c      	ldr	r0, [pc, #240]	@ (800c8a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c7b6:	f7ff fec4 	bl	800c542 <LL_ADC_IsEnabled>
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	483b      	ldr	r0, [pc, #236]	@ (800c8ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c7be:	f7ff fec0 	bl	800c542 <LL_ADC_IsEnabled>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	431c      	orrs	r4, r3
 800c7c6:	483c      	ldr	r0, [pc, #240]	@ (800c8b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800c7c8:	f7ff febb 	bl	800c542 <LL_ADC_IsEnabled>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	4323      	orrs	r3, r4
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	bf0c      	ite	eq
 800c7d4:	2301      	moveq	r3, #1
 800c7d6:	2300      	movne	r3, #0
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d056      	beq.n	800c88c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c7de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7e0:	689b      	ldr	r3, [r3, #8]
 800c7e2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c7e6:	f023 030f 	bic.w	r3, r3, #15
 800c7ea:	683a      	ldr	r2, [r7, #0]
 800c7ec:	6811      	ldr	r1, [r2, #0]
 800c7ee:	683a      	ldr	r2, [r7, #0]
 800c7f0:	6892      	ldr	r2, [r2, #8]
 800c7f2:	430a      	orrs	r2, r1
 800c7f4:	431a      	orrs	r2, r3
 800c7f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7f8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c7fa:	e047      	b.n	800c88c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800c7fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c7fe:	689b      	ldr	r3, [r3, #8]
 800c800:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c804:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c806:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c810:	d004      	beq.n	800c81c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	4a23      	ldr	r2, [pc, #140]	@ (800c8a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c818:	4293      	cmp	r3, r2
 800c81a:	d10f      	bne.n	800c83c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800c81c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800c820:	f7ff fe8f 	bl	800c542 <LL_ADC_IsEnabled>
 800c824:	4604      	mov	r4, r0
 800c826:	481f      	ldr	r0, [pc, #124]	@ (800c8a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c828:	f7ff fe8b 	bl	800c542 <LL_ADC_IsEnabled>
 800c82c:	4603      	mov	r3, r0
 800c82e:	4323      	orrs	r3, r4
 800c830:	2b00      	cmp	r3, #0
 800c832:	bf0c      	ite	eq
 800c834:	2301      	moveq	r3, #1
 800c836:	2300      	movne	r3, #0
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	e012      	b.n	800c862 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800c83c:	481a      	ldr	r0, [pc, #104]	@ (800c8a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c83e:	f7ff fe80 	bl	800c542 <LL_ADC_IsEnabled>
 800c842:	4604      	mov	r4, r0
 800c844:	4819      	ldr	r0, [pc, #100]	@ (800c8ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c846:	f7ff fe7c 	bl	800c542 <LL_ADC_IsEnabled>
 800c84a:	4603      	mov	r3, r0
 800c84c:	431c      	orrs	r4, r3
 800c84e:	481a      	ldr	r0, [pc, #104]	@ (800c8b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800c850:	f7ff fe77 	bl	800c542 <LL_ADC_IsEnabled>
 800c854:	4603      	mov	r3, r0
 800c856:	4323      	orrs	r3, r4
 800c858:	2b00      	cmp	r3, #0
 800c85a:	bf0c      	ite	eq
 800c85c:	2301      	moveq	r3, #1
 800c85e:	2300      	movne	r3, #0
 800c860:	b2db      	uxtb	r3, r3
 800c862:	2b00      	cmp	r3, #0
 800c864:	d012      	beq.n	800c88c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c866:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c868:	689b      	ldr	r3, [r3, #8]
 800c86a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c86e:	f023 030f 	bic.w	r3, r3, #15
 800c872:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c874:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c876:	e009      	b.n	800c88c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c87c:	f043 0220 	orr.w	r2, r3, #32
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800c884:	2301      	movs	r3, #1
 800c886:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800c88a:	e000      	b.n	800c88e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c88c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2200      	movs	r2, #0
 800c892:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800c896:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3784      	adds	r7, #132	@ 0x84
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd90      	pop	{r4, r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	50000100 	.word	0x50000100
 800c8a8:	50000400 	.word	0x50000400
 800c8ac:	50000500 	.word	0x50000500
 800c8b0:	50000300 	.word	0x50000300
 800c8b4:	50000700 	.word	0x50000700
 800c8b8:	50000600 	.word	0x50000600

0800c8bc <__NVIC_SetPriorityGrouping>:
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b085      	sub	sp, #20
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f003 0307 	and.w	r3, r3, #7
 800c8ca:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c8cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c900 <__NVIC_SetPriorityGrouping+0x44>)
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c8d2:	68ba      	ldr	r2, [r7, #8]
 800c8d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c8d8:	4013      	ands	r3, r2
 800c8da:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c8e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c8e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c8ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c8ee:	4a04      	ldr	r2, [pc, #16]	@ (800c900 <__NVIC_SetPriorityGrouping+0x44>)
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	60d3      	str	r3, [r2, #12]
}
 800c8f4:	bf00      	nop
 800c8f6:	3714      	adds	r7, #20
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr
 800c900:	e000ed00 	.word	0xe000ed00

0800c904 <__NVIC_GetPriorityGrouping>:
{
 800c904:	b480      	push	{r7}
 800c906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c908:	4b04      	ldr	r3, [pc, #16]	@ (800c91c <__NVIC_GetPriorityGrouping+0x18>)
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	0a1b      	lsrs	r3, r3, #8
 800c90e:	f003 0307 	and.w	r3, r3, #7
}
 800c912:	4618      	mov	r0, r3
 800c914:	46bd      	mov	sp, r7
 800c916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91a:	4770      	bx	lr
 800c91c:	e000ed00 	.word	0xe000ed00

0800c920 <__NVIC_EnableIRQ>:
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	4603      	mov	r3, r0
 800c928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c92a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	db0b      	blt.n	800c94a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c932:	79fb      	ldrb	r3, [r7, #7]
 800c934:	f003 021f 	and.w	r2, r3, #31
 800c938:	4907      	ldr	r1, [pc, #28]	@ (800c958 <__NVIC_EnableIRQ+0x38>)
 800c93a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c93e:	095b      	lsrs	r3, r3, #5
 800c940:	2001      	movs	r0, #1
 800c942:	fa00 f202 	lsl.w	r2, r0, r2
 800c946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c94a:	bf00      	nop
 800c94c:	370c      	adds	r7, #12
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop
 800c958:	e000e100 	.word	0xe000e100

0800c95c <__NVIC_SetPriority>:
{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	4603      	mov	r3, r0
 800c964:	6039      	str	r1, [r7, #0]
 800c966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	db0a      	blt.n	800c986 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	b2da      	uxtb	r2, r3
 800c974:	490c      	ldr	r1, [pc, #48]	@ (800c9a8 <__NVIC_SetPriority+0x4c>)
 800c976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c97a:	0112      	lsls	r2, r2, #4
 800c97c:	b2d2      	uxtb	r2, r2
 800c97e:	440b      	add	r3, r1
 800c980:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c984:	e00a      	b.n	800c99c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	b2da      	uxtb	r2, r3
 800c98a:	4908      	ldr	r1, [pc, #32]	@ (800c9ac <__NVIC_SetPriority+0x50>)
 800c98c:	79fb      	ldrb	r3, [r7, #7]
 800c98e:	f003 030f 	and.w	r3, r3, #15
 800c992:	3b04      	subs	r3, #4
 800c994:	0112      	lsls	r2, r2, #4
 800c996:	b2d2      	uxtb	r2, r2
 800c998:	440b      	add	r3, r1
 800c99a:	761a      	strb	r2, [r3, #24]
}
 800c99c:	bf00      	nop
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr
 800c9a8:	e000e100 	.word	0xe000e100
 800c9ac:	e000ed00 	.word	0xe000ed00

0800c9b0 <NVIC_EncodePriority>:
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b089      	sub	sp, #36	@ 0x24
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f003 0307 	and.w	r3, r3, #7
 800c9c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	f1c3 0307 	rsb	r3, r3, #7
 800c9ca:	2b04      	cmp	r3, #4
 800c9cc:	bf28      	it	cs
 800c9ce:	2304      	movcs	r3, #4
 800c9d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	2b06      	cmp	r3, #6
 800c9d8:	d902      	bls.n	800c9e0 <NVIC_EncodePriority+0x30>
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	3b03      	subs	r3, #3
 800c9de:	e000      	b.n	800c9e2 <NVIC_EncodePriority+0x32>
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c9e4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9e8:	69bb      	ldr	r3, [r7, #24]
 800c9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ee:	43da      	mvns	r2, r3
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	401a      	ands	r2, r3
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c9f8:	f04f 31ff 	mov.w	r1, #4294967295
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	fa01 f303 	lsl.w	r3, r1, r3
 800ca02:	43d9      	mvns	r1, r3
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ca08:	4313      	orrs	r3, r2
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3724      	adds	r7, #36	@ 0x24
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr
	...

0800ca18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	3b01      	subs	r3, #1
 800ca24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ca28:	d301      	bcc.n	800ca2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	e00f      	b.n	800ca4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ca2e:	4a0a      	ldr	r2, [pc, #40]	@ (800ca58 <SysTick_Config+0x40>)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	3b01      	subs	r3, #1
 800ca34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ca36:	210f      	movs	r1, #15
 800ca38:	f04f 30ff 	mov.w	r0, #4294967295
 800ca3c:	f7ff ff8e 	bl	800c95c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ca40:	4b05      	ldr	r3, [pc, #20]	@ (800ca58 <SysTick_Config+0x40>)
 800ca42:	2200      	movs	r2, #0
 800ca44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ca46:	4b04      	ldr	r3, [pc, #16]	@ (800ca58 <SysTick_Config+0x40>)
 800ca48:	2207      	movs	r2, #7
 800ca4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3708      	adds	r7, #8
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	e000e010 	.word	0xe000e010

0800ca5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f7ff ff29 	bl	800c8bc <__NVIC_SetPriorityGrouping>
}
 800ca6a:	bf00      	nop
 800ca6c:	3708      	adds	r7, #8
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b086      	sub	sp, #24
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	4603      	mov	r3, r0
 800ca7a:	60b9      	str	r1, [r7, #8]
 800ca7c:	607a      	str	r2, [r7, #4]
 800ca7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ca80:	f7ff ff40 	bl	800c904 <__NVIC_GetPriorityGrouping>
 800ca84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	68b9      	ldr	r1, [r7, #8]
 800ca8a:	6978      	ldr	r0, [r7, #20]
 800ca8c:	f7ff ff90 	bl	800c9b0 <NVIC_EncodePriority>
 800ca90:	4602      	mov	r2, r0
 800ca92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca96:	4611      	mov	r1, r2
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f7ff ff5f 	bl	800c95c <__NVIC_SetPriority>
}
 800ca9e:	bf00      	nop
 800caa0:	3718      	adds	r7, #24
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b082      	sub	sp, #8
 800caaa:	af00      	add	r7, sp, #0
 800caac:	4603      	mov	r3, r0
 800caae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cab4:	4618      	mov	r0, r3
 800cab6:	f7ff ff33 	bl	800c920 <__NVIC_EnableIRQ>
}
 800caba:	bf00      	nop
 800cabc:	3708      	adds	r7, #8
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800cac2:	b580      	push	{r7, lr}
 800cac4:	b082      	sub	sp, #8
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f7ff ffa4 	bl	800ca18 <SysTick_Config>
 800cad0:	4603      	mov	r3, r0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
	...

0800cadc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d101      	bne.n	800caee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800caea:	2301      	movs	r3, #1
 800caec:	e08d      	b.n	800cc0a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	461a      	mov	r2, r3
 800caf4:	4b47      	ldr	r3, [pc, #284]	@ (800cc14 <HAL_DMA_Init+0x138>)
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d80f      	bhi.n	800cb1a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	461a      	mov	r2, r3
 800cb00:	4b45      	ldr	r3, [pc, #276]	@ (800cc18 <HAL_DMA_Init+0x13c>)
 800cb02:	4413      	add	r3, r2
 800cb04:	4a45      	ldr	r2, [pc, #276]	@ (800cc1c <HAL_DMA_Init+0x140>)
 800cb06:	fba2 2303 	umull	r2, r3, r2, r3
 800cb0a:	091b      	lsrs	r3, r3, #4
 800cb0c:	009a      	lsls	r2, r3, #2
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4a42      	ldr	r2, [pc, #264]	@ (800cc20 <HAL_DMA_Init+0x144>)
 800cb16:	641a      	str	r2, [r3, #64]	@ 0x40
 800cb18:	e00e      	b.n	800cb38 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	461a      	mov	r2, r3
 800cb20:	4b40      	ldr	r3, [pc, #256]	@ (800cc24 <HAL_DMA_Init+0x148>)
 800cb22:	4413      	add	r3, r2
 800cb24:	4a3d      	ldr	r2, [pc, #244]	@ (800cc1c <HAL_DMA_Init+0x140>)
 800cb26:	fba2 2303 	umull	r2, r3, r2, r3
 800cb2a:	091b      	lsrs	r3, r3, #4
 800cb2c:	009a      	lsls	r2, r3, #2
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4a3c      	ldr	r2, [pc, #240]	@ (800cc28 <HAL_DMA_Init+0x14c>)
 800cb36:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2202      	movs	r2, #2
 800cb3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800cb4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800cb5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800cb68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	699b      	ldr	r3, [r3, #24]
 800cb6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800cb74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6a1b      	ldr	r3, [r3, #32]
 800cb7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800cb7c:	68fa      	ldr	r2, [r7, #12]
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	68fa      	ldr	r2, [r7, #12]
 800cb88:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f000 fa76 	bl	800d07c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	689b      	ldr	r3, [r3, #8]
 800cb94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cb98:	d102      	bne.n	800cba0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	685a      	ldr	r2, [r3, #4]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cba8:	b2d2      	uxtb	r2, r2
 800cbaa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800cbb4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d010      	beq.n	800cbe0 <HAL_DMA_Init+0x104>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	2b04      	cmp	r3, #4
 800cbc4:	d80c      	bhi.n	800cbe0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 fa96 	bl	800d0f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800cbdc:	605a      	str	r2, [r3, #4]
 800cbde:	e008      	b.n	800cbf2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2201      	movs	r2, #1
 800cbfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800cc08:	2300      	movs	r3, #0
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	40020407 	.word	0x40020407
 800cc18:	bffdfff8 	.word	0xbffdfff8
 800cc1c:	cccccccd 	.word	0xcccccccd
 800cc20:	40020000 	.word	0x40020000
 800cc24:	bffdfbf8 	.word	0xbffdfbf8
 800cc28:	40020400 	.word	0x40020400

0800cc2c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	607a      	str	r2, [r7, #4]
 800cc38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d101      	bne.n	800cc4c <HAL_DMA_Start_IT+0x20>
 800cc48:	2302      	movs	r3, #2
 800cc4a:	e066      	b.n	800cd1a <HAL_DMA_Start_IT+0xee>
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d155      	bne.n	800cd0c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2202      	movs	r2, #2
 800cc64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	681a      	ldr	r2, [r3, #0]
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f022 0201 	bic.w	r2, r2, #1
 800cc7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	68b9      	ldr	r1, [r7, #8]
 800cc84:	68f8      	ldr	r0, [r7, #12]
 800cc86:	f000 f9bb 	bl	800d000 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d008      	beq.n	800cca4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f042 020e 	orr.w	r2, r2, #14
 800cca0:	601a      	str	r2, [r3, #0]
 800cca2:	e00f      	b.n	800ccc4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f022 0204 	bic.w	r2, r2, #4
 800ccb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f042 020a 	orr.w	r2, r2, #10
 800ccc2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d007      	beq.n	800cce2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ccdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cce0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d007      	beq.n	800ccfa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccee:	681a      	ldr	r2, [r3, #0]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ccf8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	681a      	ldr	r2, [r3, #0]
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f042 0201 	orr.w	r2, r2, #1
 800cd08:	601a      	str	r2, [r3, #0]
 800cd0a:	e005      	b.n	800cd18 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800cd14:	2302      	movs	r3, #2
 800cd16:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800cd18:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3718      	adds	r7, #24
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800cd22:	b480      	push	{r7}
 800cd24:	b085      	sub	sp, #20
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cd34:	b2db      	uxtb	r3, r3
 800cd36:	2b02      	cmp	r3, #2
 800cd38:	d005      	beq.n	800cd46 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2204      	movs	r2, #4
 800cd3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800cd40:	2301      	movs	r3, #1
 800cd42:	73fb      	strb	r3, [r7, #15]
 800cd44:	e037      	b.n	800cdb6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	f022 020e 	bic.w	r2, r2, #14
 800cd54:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cd64:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f022 0201 	bic.w	r2, r2, #1
 800cd74:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd7a:	f003 021f 	and.w	r2, r3, #31
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd82:	2101      	movs	r1, #1
 800cd84:	fa01 f202 	lsl.w	r2, r1, r2
 800cd88:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800cd92:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d00c      	beq.n	800cdb6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cda6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cdaa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800cdb4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2201      	movs	r2, #1
 800cdba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800cdc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3714      	adds	r7, #20
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cddc:	2300      	movs	r3, #0
 800cdde:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	2b02      	cmp	r3, #2
 800cdea:	d00d      	beq.n	800ce08 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2204      	movs	r2, #4
 800cdf0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800ce02:	2301      	movs	r3, #1
 800ce04:	73fb      	strb	r3, [r7, #15]
 800ce06:	e047      	b.n	800ce98 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	681a      	ldr	r2, [r3, #0]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f022 020e 	bic.w	r2, r2, #14
 800ce16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	681a      	ldr	r2, [r3, #0]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f022 0201 	bic.w	r2, r2, #1
 800ce26:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ce32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ce36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce3c:	f003 021f 	and.w	r2, r3, #31
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce44:	2101      	movs	r1, #1
 800ce46:	fa01 f202 	lsl.w	r2, r1, r2
 800ce4a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ce54:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d00c      	beq.n	800ce78 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce62:	681a      	ldr	r2, [r3, #0]
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ce6c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ce76:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2200      	movs	r2, #0
 800ce84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d003      	beq.n	800ce98 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	4798      	blx	r3
    }
  }
  return status;
 800ce98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b084      	sub	sp, #16
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cebe:	f003 031f 	and.w	r3, r3, #31
 800cec2:	2204      	movs	r2, #4
 800cec4:	409a      	lsls	r2, r3
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	4013      	ands	r3, r2
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d026      	beq.n	800cf1c <HAL_DMA_IRQHandler+0x7a>
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	f003 0304 	and.w	r3, r3, #4
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d021      	beq.n	800cf1c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f003 0320 	and.w	r3, r3, #32
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d107      	bne.n	800cef6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	681a      	ldr	r2, [r3, #0]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f022 0204 	bic.w	r2, r2, #4
 800cef4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cefa:	f003 021f 	and.w	r2, r3, #31
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf02:	2104      	movs	r1, #4
 800cf04:	fa01 f202 	lsl.w	r2, r1, r2
 800cf08:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d071      	beq.n	800cff6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800cf1a:	e06c      	b.n	800cff6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf20:	f003 031f 	and.w	r3, r3, #31
 800cf24:	2202      	movs	r2, #2
 800cf26:	409a      	lsls	r2, r3
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	4013      	ands	r3, r2
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d02e      	beq.n	800cf8e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	f003 0302 	and.w	r3, r3, #2
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d029      	beq.n	800cf8e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f003 0320 	and.w	r3, r3, #32
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d10b      	bne.n	800cf60 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f022 020a 	bic.w	r2, r2, #10
 800cf56:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf64:	f003 021f 	and.w	r2, r3, #31
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf6c:	2102      	movs	r1, #2
 800cf6e:	fa01 f202 	lsl.w	r2, r1, r2
 800cf72:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2200      	movs	r2, #0
 800cf78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d038      	beq.n	800cff6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800cf8c:	e033      	b.n	800cff6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf92:	f003 031f 	and.w	r3, r3, #31
 800cf96:	2208      	movs	r2, #8
 800cf98:	409a      	lsls	r2, r3
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	4013      	ands	r3, r2
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d02a      	beq.n	800cff8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	f003 0308 	and.w	r3, r3, #8
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d025      	beq.n	800cff8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	681a      	ldr	r2, [r3, #0]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f022 020e 	bic.w	r2, r2, #14
 800cfba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfc0:	f003 021f 	and.w	r2, r3, #31
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfc8:	2101      	movs	r1, #1
 800cfca:	fa01 f202 	lsl.w	r2, r1, r2
 800cfce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2201      	movs	r2, #1
 800cfd4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d004      	beq.n	800cff8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800cff6:	bf00      	nop
 800cff8:	bf00      	nop
}
 800cffa:	3710      	adds	r7, #16
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
 800d006:	60f8      	str	r0, [r7, #12]
 800d008:	60b9      	str	r1, [r7, #8]
 800d00a:	607a      	str	r2, [r7, #4]
 800d00c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d012:	68fa      	ldr	r2, [r7, #12]
 800d014:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800d016:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d004      	beq.n	800d02a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800d028:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d02e:	f003 021f 	and.w	r2, r3, #31
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d036:	2101      	movs	r1, #1
 800d038:	fa01 f202 	lsl.w	r2, r1, r2
 800d03c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	683a      	ldr	r2, [r7, #0]
 800d044:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	689b      	ldr	r3, [r3, #8]
 800d04a:	2b10      	cmp	r3, #16
 800d04c:	d108      	bne.n	800d060 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	68ba      	ldr	r2, [r7, #8]
 800d05c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800d05e:	e007      	b.n	800d070 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	68ba      	ldr	r2, [r7, #8]
 800d066:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	60da      	str	r2, [r3, #12]
}
 800d070:	bf00      	nop
 800d072:	3714      	adds	r7, #20
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d07c:	b480      	push	{r7}
 800d07e:	b087      	sub	sp, #28
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	461a      	mov	r2, r3
 800d08a:	4b16      	ldr	r3, [pc, #88]	@ (800d0e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d802      	bhi.n	800d096 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800d090:	4b15      	ldr	r3, [pc, #84]	@ (800d0e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800d092:	617b      	str	r3, [r7, #20]
 800d094:	e001      	b.n	800d09a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800d096:	4b15      	ldr	r3, [pc, #84]	@ (800d0ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800d098:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	b2db      	uxtb	r3, r3
 800d0a4:	3b08      	subs	r3, #8
 800d0a6:	4a12      	ldr	r2, [pc, #72]	@ (800d0f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800d0a8:	fba2 2303 	umull	r2, r3, r2, r3
 800d0ac:	091b      	lsrs	r3, r3, #4
 800d0ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0b4:	089b      	lsrs	r3, r3, #2
 800d0b6:	009a      	lsls	r2, r3, #2
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	4413      	add	r3, r2
 800d0bc:	461a      	mov	r2, r3
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4a0b      	ldr	r2, [pc, #44]	@ (800d0f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800d0c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f003 031f 	and.w	r3, r3, #31
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	409a      	lsls	r2, r3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800d0d6:	bf00      	nop
 800d0d8:	371c      	adds	r7, #28
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	40020407 	.word	0x40020407
 800d0e8:	40020800 	.word	0x40020800
 800d0ec:	40020820 	.word	0x40020820
 800d0f0:	cccccccd 	.word	0xcccccccd
 800d0f4:	40020880 	.word	0x40020880

0800d0f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	b2db      	uxtb	r3, r3
 800d106:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800d108:	68fa      	ldr	r2, [r7, #12]
 800d10a:	4b0b      	ldr	r3, [pc, #44]	@ (800d138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800d10c:	4413      	add	r3, r2
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	461a      	mov	r2, r3
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	4a08      	ldr	r2, [pc, #32]	@ (800d13c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800d11a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	3b01      	subs	r3, #1
 800d120:	f003 031f 	and.w	r3, r3, #31
 800d124:	2201      	movs	r2, #1
 800d126:	409a      	lsls	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800d12c:	bf00      	nop
 800d12e:	3714      	adds	r7, #20
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr
 800d138:	1000823f 	.word	0x1000823f
 800d13c:	40020940 	.word	0x40020940

0800d140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d140:	b480      	push	{r7}
 800d142:	b087      	sub	sp, #28
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d14a:	2300      	movs	r3, #0
 800d14c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800d14e:	e15a      	b.n	800d406 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	2101      	movs	r1, #1
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	fa01 f303 	lsl.w	r3, r1, r3
 800d15c:	4013      	ands	r3, r2
 800d15e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2b00      	cmp	r3, #0
 800d164:	f000 814c 	beq.w	800d400 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	f003 0303 	and.w	r3, r3, #3
 800d170:	2b01      	cmp	r3, #1
 800d172:	d005      	beq.n	800d180 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d17c:	2b02      	cmp	r3, #2
 800d17e:	d130      	bne.n	800d1e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	689b      	ldr	r3, [r3, #8]
 800d184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	005b      	lsls	r3, r3, #1
 800d18a:	2203      	movs	r2, #3
 800d18c:	fa02 f303 	lsl.w	r3, r2, r3
 800d190:	43db      	mvns	r3, r3
 800d192:	693a      	ldr	r2, [r7, #16]
 800d194:	4013      	ands	r3, r2
 800d196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	68da      	ldr	r2, [r3, #12]
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	005b      	lsls	r3, r3, #1
 800d1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d1a4:	693a      	ldr	r2, [r7, #16]
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	693a      	ldr	r2, [r7, #16]
 800d1ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d1be:	43db      	mvns	r3, r3
 800d1c0:	693a      	ldr	r2, [r7, #16]
 800d1c2:	4013      	ands	r3, r2
 800d1c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	091b      	lsrs	r3, r3, #4
 800d1cc:	f003 0201 	and.w	r2, r3, #1
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	fa02 f303 	lsl.w	r3, r2, r3
 800d1d6:	693a      	ldr	r2, [r7, #16]
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	693a      	ldr	r2, [r7, #16]
 800d1e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	f003 0303 	and.w	r3, r3, #3
 800d1ea:	2b03      	cmp	r3, #3
 800d1ec:	d017      	beq.n	800d21e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	68db      	ldr	r3, [r3, #12]
 800d1f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d1f4:	697b      	ldr	r3, [r7, #20]
 800d1f6:	005b      	lsls	r3, r3, #1
 800d1f8:	2203      	movs	r2, #3
 800d1fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d1fe:	43db      	mvns	r3, r3
 800d200:	693a      	ldr	r2, [r7, #16]
 800d202:	4013      	ands	r3, r2
 800d204:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	689a      	ldr	r2, [r3, #8]
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	005b      	lsls	r3, r3, #1
 800d20e:	fa02 f303 	lsl.w	r3, r2, r3
 800d212:	693a      	ldr	r2, [r7, #16]
 800d214:	4313      	orrs	r3, r2
 800d216:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	693a      	ldr	r2, [r7, #16]
 800d21c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	685b      	ldr	r3, [r3, #4]
 800d222:	f003 0303 	and.w	r3, r3, #3
 800d226:	2b02      	cmp	r3, #2
 800d228:	d123      	bne.n	800d272 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	08da      	lsrs	r2, r3, #3
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	3208      	adds	r2, #8
 800d232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d236:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	f003 0307 	and.w	r3, r3, #7
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	220f      	movs	r2, #15
 800d242:	fa02 f303 	lsl.w	r3, r2, r3
 800d246:	43db      	mvns	r3, r3
 800d248:	693a      	ldr	r2, [r7, #16]
 800d24a:	4013      	ands	r3, r2
 800d24c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	691a      	ldr	r2, [r3, #16]
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	f003 0307 	and.w	r3, r3, #7
 800d258:	009b      	lsls	r3, r3, #2
 800d25a:	fa02 f303 	lsl.w	r3, r2, r3
 800d25e:	693a      	ldr	r2, [r7, #16]
 800d260:	4313      	orrs	r3, r2
 800d262:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	08da      	lsrs	r2, r3, #3
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	3208      	adds	r2, #8
 800d26c:	6939      	ldr	r1, [r7, #16]
 800d26e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d278:	697b      	ldr	r3, [r7, #20]
 800d27a:	005b      	lsls	r3, r3, #1
 800d27c:	2203      	movs	r2, #3
 800d27e:	fa02 f303 	lsl.w	r3, r2, r3
 800d282:	43db      	mvns	r3, r3
 800d284:	693a      	ldr	r2, [r7, #16]
 800d286:	4013      	ands	r3, r2
 800d288:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	f003 0203 	and.w	r2, r3, #3
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	005b      	lsls	r3, r3, #1
 800d296:	fa02 f303 	lsl.w	r3, r2, r3
 800d29a:	693a      	ldr	r2, [r7, #16]
 800d29c:	4313      	orrs	r3, r2
 800d29e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	693a      	ldr	r2, [r7, #16]
 800d2a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	f000 80a6 	beq.w	800d400 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d2b4:	4b5b      	ldr	r3, [pc, #364]	@ (800d424 <HAL_GPIO_Init+0x2e4>)
 800d2b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d2b8:	4a5a      	ldr	r2, [pc, #360]	@ (800d424 <HAL_GPIO_Init+0x2e4>)
 800d2ba:	f043 0301 	orr.w	r3, r3, #1
 800d2be:	6613      	str	r3, [r2, #96]	@ 0x60
 800d2c0:	4b58      	ldr	r3, [pc, #352]	@ (800d424 <HAL_GPIO_Init+0x2e4>)
 800d2c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d2c4:	f003 0301 	and.w	r3, r3, #1
 800d2c8:	60bb      	str	r3, [r7, #8]
 800d2ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d2cc:	4a56      	ldr	r2, [pc, #344]	@ (800d428 <HAL_GPIO_Init+0x2e8>)
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	089b      	lsrs	r3, r3, #2
 800d2d2:	3302      	adds	r3, #2
 800d2d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	f003 0303 	and.w	r3, r3, #3
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	220f      	movs	r2, #15
 800d2e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d2e8:	43db      	mvns	r3, r3
 800d2ea:	693a      	ldr	r2, [r7, #16]
 800d2ec:	4013      	ands	r3, r2
 800d2ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800d2f6:	d01f      	beq.n	800d338 <HAL_GPIO_Init+0x1f8>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	4a4c      	ldr	r2, [pc, #304]	@ (800d42c <HAL_GPIO_Init+0x2ec>)
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	d019      	beq.n	800d334 <HAL_GPIO_Init+0x1f4>
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	4a4b      	ldr	r2, [pc, #300]	@ (800d430 <HAL_GPIO_Init+0x2f0>)
 800d304:	4293      	cmp	r3, r2
 800d306:	d013      	beq.n	800d330 <HAL_GPIO_Init+0x1f0>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4a4a      	ldr	r2, [pc, #296]	@ (800d434 <HAL_GPIO_Init+0x2f4>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d00d      	beq.n	800d32c <HAL_GPIO_Init+0x1ec>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	4a49      	ldr	r2, [pc, #292]	@ (800d438 <HAL_GPIO_Init+0x2f8>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d007      	beq.n	800d328 <HAL_GPIO_Init+0x1e8>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	4a48      	ldr	r2, [pc, #288]	@ (800d43c <HAL_GPIO_Init+0x2fc>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d101      	bne.n	800d324 <HAL_GPIO_Init+0x1e4>
 800d320:	2305      	movs	r3, #5
 800d322:	e00a      	b.n	800d33a <HAL_GPIO_Init+0x1fa>
 800d324:	2306      	movs	r3, #6
 800d326:	e008      	b.n	800d33a <HAL_GPIO_Init+0x1fa>
 800d328:	2304      	movs	r3, #4
 800d32a:	e006      	b.n	800d33a <HAL_GPIO_Init+0x1fa>
 800d32c:	2303      	movs	r3, #3
 800d32e:	e004      	b.n	800d33a <HAL_GPIO_Init+0x1fa>
 800d330:	2302      	movs	r3, #2
 800d332:	e002      	b.n	800d33a <HAL_GPIO_Init+0x1fa>
 800d334:	2301      	movs	r3, #1
 800d336:	e000      	b.n	800d33a <HAL_GPIO_Init+0x1fa>
 800d338:	2300      	movs	r3, #0
 800d33a:	697a      	ldr	r2, [r7, #20]
 800d33c:	f002 0203 	and.w	r2, r2, #3
 800d340:	0092      	lsls	r2, r2, #2
 800d342:	4093      	lsls	r3, r2
 800d344:	693a      	ldr	r2, [r7, #16]
 800d346:	4313      	orrs	r3, r2
 800d348:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d34a:	4937      	ldr	r1, [pc, #220]	@ (800d428 <HAL_GPIO_Init+0x2e8>)
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	089b      	lsrs	r3, r3, #2
 800d350:	3302      	adds	r3, #2
 800d352:	693a      	ldr	r2, [r7, #16]
 800d354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d358:	4b39      	ldr	r3, [pc, #228]	@ (800d440 <HAL_GPIO_Init+0x300>)
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	43db      	mvns	r3, r3
 800d362:	693a      	ldr	r2, [r7, #16]
 800d364:	4013      	ands	r3, r2
 800d366:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d370:	2b00      	cmp	r3, #0
 800d372:	d003      	beq.n	800d37c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800d374:	693a      	ldr	r2, [r7, #16]
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	4313      	orrs	r3, r2
 800d37a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800d37c:	4a30      	ldr	r2, [pc, #192]	@ (800d440 <HAL_GPIO_Init+0x300>)
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800d382:	4b2f      	ldr	r3, [pc, #188]	@ (800d440 <HAL_GPIO_Init+0x300>)
 800d384:	68db      	ldr	r3, [r3, #12]
 800d386:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	43db      	mvns	r3, r3
 800d38c:	693a      	ldr	r2, [r7, #16]
 800d38e:	4013      	ands	r3, r2
 800d390:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d003      	beq.n	800d3a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800d39e:	693a      	ldr	r2, [r7, #16]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800d3a6:	4a26      	ldr	r2, [pc, #152]	@ (800d440 <HAL_GPIO_Init+0x300>)
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800d3ac:	4b24      	ldr	r3, [pc, #144]	@ (800d440 <HAL_GPIO_Init+0x300>)
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	43db      	mvns	r3, r3
 800d3b6:	693a      	ldr	r2, [r7, #16]
 800d3b8:	4013      	ands	r3, r2
 800d3ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d3bc:	683b      	ldr	r3, [r7, #0]
 800d3be:	685b      	ldr	r3, [r3, #4]
 800d3c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d003      	beq.n	800d3d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800d3d0:	4a1b      	ldr	r2, [pc, #108]	@ (800d440 <HAL_GPIO_Init+0x300>)
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800d3d6:	4b1a      	ldr	r3, [pc, #104]	@ (800d440 <HAL_GPIO_Init+0x300>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	43db      	mvns	r3, r3
 800d3e0:	693a      	ldr	r2, [r7, #16]
 800d3e2:	4013      	ands	r3, r2
 800d3e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d003      	beq.n	800d3fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800d3f2:	693a      	ldr	r2, [r7, #16]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800d3fa:	4a11      	ldr	r2, [pc, #68]	@ (800d440 <HAL_GPIO_Init+0x300>)
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	3301      	adds	r3, #1
 800d404:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	fa22 f303 	lsr.w	r3, r2, r3
 800d410:	2b00      	cmp	r3, #0
 800d412:	f47f ae9d 	bne.w	800d150 <HAL_GPIO_Init+0x10>
  }
}
 800d416:	bf00      	nop
 800d418:	bf00      	nop
 800d41a:	371c      	adds	r7, #28
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr
 800d424:	40021000 	.word	0x40021000
 800d428:	40010000 	.word	0x40010000
 800d42c:	48000400 	.word	0x48000400
 800d430:	48000800 	.word	0x48000800
 800d434:	48000c00 	.word	0x48000c00
 800d438:	48001000 	.word	0x48001000
 800d43c:	48001400 	.word	0x48001400
 800d440:	40010400 	.word	0x40010400

0800d444 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d444:	b480      	push	{r7}
 800d446:	b085      	sub	sp, #20
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	460b      	mov	r3, r1
 800d44e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	691a      	ldr	r2, [r3, #16]
 800d454:	887b      	ldrh	r3, [r7, #2]
 800d456:	4013      	ands	r3, r2
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d002      	beq.n	800d462 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d45c:	2301      	movs	r3, #1
 800d45e:	73fb      	strb	r3, [r7, #15]
 800d460:	e001      	b.n	800d466 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d462:	2300      	movs	r3, #0
 800d464:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d466:	7bfb      	ldrb	r3, [r7, #15]
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3714      	adds	r7, #20
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr

0800d474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	460b      	mov	r3, r1
 800d47e:	807b      	strh	r3, [r7, #2]
 800d480:	4613      	mov	r3, r2
 800d482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d484:	787b      	ldrb	r3, [r7, #1]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d003      	beq.n	800d492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d48a:	887a      	ldrh	r2, [r7, #2]
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800d490:	e002      	b.n	800d498 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d492:	887a      	ldrh	r2, [r7, #2]
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d498:	bf00      	nop
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b085      	sub	sp, #20
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	460b      	mov	r3, r1
 800d4ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	695b      	ldr	r3, [r3, #20]
 800d4b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d4b6:	887a      	ldrh	r2, [r7, #2]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	4013      	ands	r3, r2
 800d4bc:	041a      	lsls	r2, r3, #16
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	43d9      	mvns	r1, r3
 800d4c2:	887b      	ldrh	r3, [r7, #2]
 800d4c4:	400b      	ands	r3, r1
 800d4c6:	431a      	orrs	r2, r3
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	619a      	str	r2, [r3, #24]
}
 800d4cc:	bf00      	nop
 800d4ce:	3714      	adds	r7, #20
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	4603      	mov	r3, r0
 800d4e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800d4e2:	4b08      	ldr	r3, [pc, #32]	@ (800d504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d4e4:	695a      	ldr	r2, [r3, #20]
 800d4e6:	88fb      	ldrh	r3, [r7, #6]
 800d4e8:	4013      	ands	r3, r2
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d006      	beq.n	800d4fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d4ee:	4a05      	ldr	r2, [pc, #20]	@ (800d504 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d4f0:	88fb      	ldrh	r3, [r7, #6]
 800d4f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d4f4:	88fb      	ldrh	r3, [r7, #6]
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f7fb fa50 	bl	800899c <HAL_GPIO_EXTI_Callback>
  }
}
 800d4fc:	bf00      	nop
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	40010400 	.word	0x40010400

0800d508 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d508:	b480      	push	{r7}
 800d50a:	b085      	sub	sp, #20
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d141      	bne.n	800d59a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d516:	4b4b      	ldr	r3, [pc, #300]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d51e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d522:	d131      	bne.n	800d588 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d524:	4b47      	ldr	r3, [pc, #284]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d52a:	4a46      	ldr	r2, [pc, #280]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d52c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d530:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d534:	4b43      	ldr	r3, [pc, #268]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d53c:	4a41      	ldr	r2, [pc, #260]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d53e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d542:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d544:	4b40      	ldr	r3, [pc, #256]	@ (800d648 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	2232      	movs	r2, #50	@ 0x32
 800d54a:	fb02 f303 	mul.w	r3, r2, r3
 800d54e:	4a3f      	ldr	r2, [pc, #252]	@ (800d64c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d550:	fba2 2303 	umull	r2, r3, r2, r3
 800d554:	0c9b      	lsrs	r3, r3, #18
 800d556:	3301      	adds	r3, #1
 800d558:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d55a:	e002      	b.n	800d562 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	3b01      	subs	r3, #1
 800d560:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d562:	4b38      	ldr	r3, [pc, #224]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d564:	695b      	ldr	r3, [r3, #20]
 800d566:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d56a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d56e:	d102      	bne.n	800d576 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d1f2      	bne.n	800d55c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d576:	4b33      	ldr	r3, [pc, #204]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d578:	695b      	ldr	r3, [r3, #20]
 800d57a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d57e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d582:	d158      	bne.n	800d636 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d584:	2303      	movs	r3, #3
 800d586:	e057      	b.n	800d638 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d588:	4b2e      	ldr	r3, [pc, #184]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d58a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d58e:	4a2d      	ldr	r2, [pc, #180]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d594:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800d598:	e04d      	b.n	800d636 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d5a0:	d141      	bne.n	800d626 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d5a2:	4b28      	ldr	r3, [pc, #160]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d5aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5ae:	d131      	bne.n	800d614 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d5b0:	4b24      	ldr	r3, [pc, #144]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5b6:	4a23      	ldr	r2, [pc, #140]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d5bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d5c0:	4b20      	ldr	r3, [pc, #128]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d5c8:	4a1e      	ldr	r2, [pc, #120]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d5ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d5d0:	4b1d      	ldr	r3, [pc, #116]	@ (800d648 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2232      	movs	r2, #50	@ 0x32
 800d5d6:	fb02 f303 	mul.w	r3, r2, r3
 800d5da:	4a1c      	ldr	r2, [pc, #112]	@ (800d64c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d5dc:	fba2 2303 	umull	r2, r3, r2, r3
 800d5e0:	0c9b      	lsrs	r3, r3, #18
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d5e6:	e002      	b.n	800d5ee <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	3b01      	subs	r3, #1
 800d5ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d5ee:	4b15      	ldr	r3, [pc, #84]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d5f0:	695b      	ldr	r3, [r3, #20]
 800d5f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d5f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d5fa:	d102      	bne.n	800d602 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d1f2      	bne.n	800d5e8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d602:	4b10      	ldr	r3, [pc, #64]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d604:	695b      	ldr	r3, [r3, #20]
 800d606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d60a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d60e:	d112      	bne.n	800d636 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d610:	2303      	movs	r3, #3
 800d612:	e011      	b.n	800d638 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d614:	4b0b      	ldr	r3, [pc, #44]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d61a:	4a0a      	ldr	r2, [pc, #40]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d61c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d620:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800d624:	e007      	b.n	800d636 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d626:	4b07      	ldr	r3, [pc, #28]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d62e:	4a05      	ldr	r2, [pc, #20]	@ (800d644 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d630:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d634:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800d636:	2300      	movs	r3, #0
}
 800d638:	4618      	mov	r0, r3
 800d63a:	3714      	adds	r7, #20
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr
 800d644:	40007000 	.word	0x40007000
 800d648:	200005bc 	.word	0x200005bc
 800d64c:	431bde83 	.word	0x431bde83

0800d650 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800d650:	b480      	push	{r7}
 800d652:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800d654:	4b05      	ldr	r3, [pc, #20]	@ (800d66c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	4a04      	ldr	r2, [pc, #16]	@ (800d66c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d65a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d65e:	6093      	str	r3, [r2, #8]
}
 800d660:	bf00      	nop
 800d662:	46bd      	mov	sp, r7
 800d664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop
 800d66c:	40007000 	.word	0x40007000

0800d670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b088      	sub	sp, #32
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d101      	bne.n	800d682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d67e:	2301      	movs	r3, #1
 800d680:	e2fe      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f003 0301 	and.w	r3, r3, #1
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d075      	beq.n	800d77a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d68e:	4b97      	ldr	r3, [pc, #604]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d690:	689b      	ldr	r3, [r3, #8]
 800d692:	f003 030c 	and.w	r3, r3, #12
 800d696:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d698:	4b94      	ldr	r3, [pc, #592]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	f003 0303 	and.w	r3, r3, #3
 800d6a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800d6a2:	69bb      	ldr	r3, [r7, #24]
 800d6a4:	2b0c      	cmp	r3, #12
 800d6a6:	d102      	bne.n	800d6ae <HAL_RCC_OscConfig+0x3e>
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	2b03      	cmp	r3, #3
 800d6ac:	d002      	beq.n	800d6b4 <HAL_RCC_OscConfig+0x44>
 800d6ae:	69bb      	ldr	r3, [r7, #24]
 800d6b0:	2b08      	cmp	r3, #8
 800d6b2:	d10b      	bne.n	800d6cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d6b4:	4b8d      	ldr	r3, [pc, #564]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d05b      	beq.n	800d778 <HAL_RCC_OscConfig+0x108>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d157      	bne.n	800d778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	e2d9      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6d4:	d106      	bne.n	800d6e4 <HAL_RCC_OscConfig+0x74>
 800d6d6:	4b85      	ldr	r3, [pc, #532]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4a84      	ldr	r2, [pc, #528]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d6dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d6e0:	6013      	str	r3, [r2, #0]
 800d6e2:	e01d      	b.n	800d720 <HAL_RCC_OscConfig+0xb0>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d6ec:	d10c      	bne.n	800d708 <HAL_RCC_OscConfig+0x98>
 800d6ee:	4b7f      	ldr	r3, [pc, #508]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4a7e      	ldr	r2, [pc, #504]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d6f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d6f8:	6013      	str	r3, [r2, #0]
 800d6fa:	4b7c      	ldr	r3, [pc, #496]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4a7b      	ldr	r2, [pc, #492]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d704:	6013      	str	r3, [r2, #0]
 800d706:	e00b      	b.n	800d720 <HAL_RCC_OscConfig+0xb0>
 800d708:	4b78      	ldr	r3, [pc, #480]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	4a77      	ldr	r2, [pc, #476]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d70e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d712:	6013      	str	r3, [r2, #0]
 800d714:	4b75      	ldr	r3, [pc, #468]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	4a74      	ldr	r2, [pc, #464]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d71a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d71e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d013      	beq.n	800d750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d728:	f7fd fc44 	bl	800afb4 <HAL_GetTick>
 800d72c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d72e:	e008      	b.n	800d742 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d730:	f7fd fc40 	bl	800afb4 <HAL_GetTick>
 800d734:	4602      	mov	r2, r0
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	2b64      	cmp	r3, #100	@ 0x64
 800d73c:	d901      	bls.n	800d742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d73e:	2303      	movs	r3, #3
 800d740:	e29e      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d742:	4b6a      	ldr	r3, [pc, #424]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d0f0      	beq.n	800d730 <HAL_RCC_OscConfig+0xc0>
 800d74e:	e014      	b.n	800d77a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d750:	f7fd fc30 	bl	800afb4 <HAL_GetTick>
 800d754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d756:	e008      	b.n	800d76a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d758:	f7fd fc2c 	bl	800afb4 <HAL_GetTick>
 800d75c:	4602      	mov	r2, r0
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	1ad3      	subs	r3, r2, r3
 800d762:	2b64      	cmp	r3, #100	@ 0x64
 800d764:	d901      	bls.n	800d76a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d766:	2303      	movs	r3, #3
 800d768:	e28a      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d76a:	4b60      	ldr	r3, [pc, #384]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d772:	2b00      	cmp	r3, #0
 800d774:	d1f0      	bne.n	800d758 <HAL_RCC_OscConfig+0xe8>
 800d776:	e000      	b.n	800d77a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f003 0302 	and.w	r3, r3, #2
 800d782:	2b00      	cmp	r3, #0
 800d784:	d075      	beq.n	800d872 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d786:	4b59      	ldr	r3, [pc, #356]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d788:	689b      	ldr	r3, [r3, #8]
 800d78a:	f003 030c 	and.w	r3, r3, #12
 800d78e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d790:	4b56      	ldr	r3, [pc, #344]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	f003 0303 	and.w	r3, r3, #3
 800d798:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	2b0c      	cmp	r3, #12
 800d79e:	d102      	bne.n	800d7a6 <HAL_RCC_OscConfig+0x136>
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	2b02      	cmp	r3, #2
 800d7a4:	d002      	beq.n	800d7ac <HAL_RCC_OscConfig+0x13c>
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	2b04      	cmp	r3, #4
 800d7aa:	d11f      	bne.n	800d7ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d7ac:	4b4f      	ldr	r3, [pc, #316]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d005      	beq.n	800d7c4 <HAL_RCC_OscConfig+0x154>
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	68db      	ldr	r3, [r3, #12]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d101      	bne.n	800d7c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	e25d      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d7c4:	4b49      	ldr	r3, [pc, #292]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	691b      	ldr	r3, [r3, #16]
 800d7d0:	061b      	lsls	r3, r3, #24
 800d7d2:	4946      	ldr	r1, [pc, #280]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d7d8:	4b45      	ldr	r3, [pc, #276]	@ (800d8f0 <HAL_RCC_OscConfig+0x280>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7fd fb9d 	bl	800af1c <HAL_InitTick>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d043      	beq.n	800d870 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	e249      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d023      	beq.n	800d83c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d7f4:	4b3d      	ldr	r3, [pc, #244]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a3c      	ldr	r2, [pc, #240]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d7fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d7fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d800:	f7fd fbd8 	bl	800afb4 <HAL_GetTick>
 800d804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d806:	e008      	b.n	800d81a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d808:	f7fd fbd4 	bl	800afb4 <HAL_GetTick>
 800d80c:	4602      	mov	r2, r0
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	2b02      	cmp	r3, #2
 800d814:	d901      	bls.n	800d81a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d816:	2303      	movs	r3, #3
 800d818:	e232      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d81a:	4b34      	ldr	r3, [pc, #208]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d822:	2b00      	cmp	r3, #0
 800d824:	d0f0      	beq.n	800d808 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d826:	4b31      	ldr	r3, [pc, #196]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	691b      	ldr	r3, [r3, #16]
 800d832:	061b      	lsls	r3, r3, #24
 800d834:	492d      	ldr	r1, [pc, #180]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d836:	4313      	orrs	r3, r2
 800d838:	604b      	str	r3, [r1, #4]
 800d83a:	e01a      	b.n	800d872 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d83c:	4b2b      	ldr	r3, [pc, #172]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a2a      	ldr	r2, [pc, #168]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d842:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d848:	f7fd fbb4 	bl	800afb4 <HAL_GetTick>
 800d84c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d84e:	e008      	b.n	800d862 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d850:	f7fd fbb0 	bl	800afb4 <HAL_GetTick>
 800d854:	4602      	mov	r2, r0
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	1ad3      	subs	r3, r2, r3
 800d85a:	2b02      	cmp	r3, #2
 800d85c:	d901      	bls.n	800d862 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800d85e:	2303      	movs	r3, #3
 800d860:	e20e      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d862:	4b22      	ldr	r3, [pc, #136]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d1f0      	bne.n	800d850 <HAL_RCC_OscConfig+0x1e0>
 800d86e:	e000      	b.n	800d872 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d870:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f003 0308 	and.w	r3, r3, #8
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d041      	beq.n	800d902 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	695b      	ldr	r3, [r3, #20]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d01c      	beq.n	800d8c0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d886:	4b19      	ldr	r3, [pc, #100]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d888:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d88c:	4a17      	ldr	r2, [pc, #92]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d88e:	f043 0301 	orr.w	r3, r3, #1
 800d892:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d896:	f7fd fb8d 	bl	800afb4 <HAL_GetTick>
 800d89a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d89c:	e008      	b.n	800d8b0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d89e:	f7fd fb89 	bl	800afb4 <HAL_GetTick>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	1ad3      	subs	r3, r2, r3
 800d8a8:	2b02      	cmp	r3, #2
 800d8aa:	d901      	bls.n	800d8b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d8ac:	2303      	movs	r3, #3
 800d8ae:	e1e7      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d8b0:	4b0e      	ldr	r3, [pc, #56]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d8b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d8b6:	f003 0302 	and.w	r3, r3, #2
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d0ef      	beq.n	800d89e <HAL_RCC_OscConfig+0x22e>
 800d8be:	e020      	b.n	800d902 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d8c0:	4b0a      	ldr	r3, [pc, #40]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d8c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d8c6:	4a09      	ldr	r2, [pc, #36]	@ (800d8ec <HAL_RCC_OscConfig+0x27c>)
 800d8c8:	f023 0301 	bic.w	r3, r3, #1
 800d8cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d8d0:	f7fd fb70 	bl	800afb4 <HAL_GetTick>
 800d8d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d8d6:	e00d      	b.n	800d8f4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d8d8:	f7fd fb6c 	bl	800afb4 <HAL_GetTick>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	1ad3      	subs	r3, r2, r3
 800d8e2:	2b02      	cmp	r3, #2
 800d8e4:	d906      	bls.n	800d8f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d8e6:	2303      	movs	r3, #3
 800d8e8:	e1ca      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
 800d8ea:	bf00      	nop
 800d8ec:	40021000 	.word	0x40021000
 800d8f0:	200005c0 	.word	0x200005c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d8f4:	4b8c      	ldr	r3, [pc, #560]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800d8f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d8fa:	f003 0302 	and.w	r3, r3, #2
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1ea      	bne.n	800d8d8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f003 0304 	and.w	r3, r3, #4
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	f000 80a6 	beq.w	800da5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d910:	2300      	movs	r3, #0
 800d912:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d914:	4b84      	ldr	r3, [pc, #528]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800d916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d918:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d101      	bne.n	800d924 <HAL_RCC_OscConfig+0x2b4>
 800d920:	2301      	movs	r3, #1
 800d922:	e000      	b.n	800d926 <HAL_RCC_OscConfig+0x2b6>
 800d924:	2300      	movs	r3, #0
 800d926:	2b00      	cmp	r3, #0
 800d928:	d00d      	beq.n	800d946 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d92a:	4b7f      	ldr	r3, [pc, #508]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800d92c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d92e:	4a7e      	ldr	r2, [pc, #504]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800d930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d934:	6593      	str	r3, [r2, #88]	@ 0x58
 800d936:	4b7c      	ldr	r3, [pc, #496]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800d938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d93a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d93e:	60fb      	str	r3, [r7, #12]
 800d940:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d942:	2301      	movs	r3, #1
 800d944:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d946:	4b79      	ldr	r3, [pc, #484]	@ (800db2c <HAL_RCC_OscConfig+0x4bc>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d118      	bne.n	800d984 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d952:	4b76      	ldr	r3, [pc, #472]	@ (800db2c <HAL_RCC_OscConfig+0x4bc>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4a75      	ldr	r2, [pc, #468]	@ (800db2c <HAL_RCC_OscConfig+0x4bc>)
 800d958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d95c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d95e:	f7fd fb29 	bl	800afb4 <HAL_GetTick>
 800d962:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d964:	e008      	b.n	800d978 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d966:	f7fd fb25 	bl	800afb4 <HAL_GetTick>
 800d96a:	4602      	mov	r2, r0
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	1ad3      	subs	r3, r2, r3
 800d970:	2b02      	cmp	r3, #2
 800d972:	d901      	bls.n	800d978 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800d974:	2303      	movs	r3, #3
 800d976:	e183      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d978:	4b6c      	ldr	r3, [pc, #432]	@ (800db2c <HAL_RCC_OscConfig+0x4bc>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d980:	2b00      	cmp	r3, #0
 800d982:	d0f0      	beq.n	800d966 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	689b      	ldr	r3, [r3, #8]
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d108      	bne.n	800d99e <HAL_RCC_OscConfig+0x32e>
 800d98c:	4b66      	ldr	r3, [pc, #408]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800d98e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d992:	4a65      	ldr	r2, [pc, #404]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800d994:	f043 0301 	orr.w	r3, r3, #1
 800d998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d99c:	e024      	b.n	800d9e8 <HAL_RCC_OscConfig+0x378>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	689b      	ldr	r3, [r3, #8]
 800d9a2:	2b05      	cmp	r3, #5
 800d9a4:	d110      	bne.n	800d9c8 <HAL_RCC_OscConfig+0x358>
 800d9a6:	4b60      	ldr	r3, [pc, #384]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800d9a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9ac:	4a5e      	ldr	r2, [pc, #376]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800d9ae:	f043 0304 	orr.w	r3, r3, #4
 800d9b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d9b6:	4b5c      	ldr	r3, [pc, #368]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800d9b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9bc:	4a5a      	ldr	r2, [pc, #360]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800d9be:	f043 0301 	orr.w	r3, r3, #1
 800d9c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d9c6:	e00f      	b.n	800d9e8 <HAL_RCC_OscConfig+0x378>
 800d9c8:	4b57      	ldr	r3, [pc, #348]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800d9ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9ce:	4a56      	ldr	r2, [pc, #344]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800d9d0:	f023 0301 	bic.w	r3, r3, #1
 800d9d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d9d8:	4b53      	ldr	r3, [pc, #332]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800d9da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9de:	4a52      	ldr	r2, [pc, #328]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800d9e0:	f023 0304 	bic.w	r3, r3, #4
 800d9e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d016      	beq.n	800da1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9f0:	f7fd fae0 	bl	800afb4 <HAL_GetTick>
 800d9f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d9f6:	e00a      	b.n	800da0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d9f8:	f7fd fadc 	bl	800afb4 <HAL_GetTick>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	1ad3      	subs	r3, r2, r3
 800da02:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da06:	4293      	cmp	r3, r2
 800da08:	d901      	bls.n	800da0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800da0a:	2303      	movs	r3, #3
 800da0c:	e138      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800da0e:	4b46      	ldr	r3, [pc, #280]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800da10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da14:	f003 0302 	and.w	r3, r3, #2
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d0ed      	beq.n	800d9f8 <HAL_RCC_OscConfig+0x388>
 800da1c:	e015      	b.n	800da4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da1e:	f7fd fac9 	bl	800afb4 <HAL_GetTick>
 800da22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800da24:	e00a      	b.n	800da3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da26:	f7fd fac5 	bl	800afb4 <HAL_GetTick>
 800da2a:	4602      	mov	r2, r0
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	1ad3      	subs	r3, r2, r3
 800da30:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da34:	4293      	cmp	r3, r2
 800da36:	d901      	bls.n	800da3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800da38:	2303      	movs	r3, #3
 800da3a:	e121      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800da3c:	4b3a      	ldr	r3, [pc, #232]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800da3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da42:	f003 0302 	and.w	r3, r3, #2
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1ed      	bne.n	800da26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800da4a:	7ffb      	ldrb	r3, [r7, #31]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d105      	bne.n	800da5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800da50:	4b35      	ldr	r3, [pc, #212]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800da52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da54:	4a34      	ldr	r2, [pc, #208]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800da56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800da5a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f003 0320 	and.w	r3, r3, #32
 800da64:	2b00      	cmp	r3, #0
 800da66:	d03c      	beq.n	800dae2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	699b      	ldr	r3, [r3, #24]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d01c      	beq.n	800daaa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800da70:	4b2d      	ldr	r3, [pc, #180]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800da72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800da76:	4a2c      	ldr	r2, [pc, #176]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800da78:	f043 0301 	orr.w	r3, r3, #1
 800da7c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da80:	f7fd fa98 	bl	800afb4 <HAL_GetTick>
 800da84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800da86:	e008      	b.n	800da9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800da88:	f7fd fa94 	bl	800afb4 <HAL_GetTick>
 800da8c:	4602      	mov	r2, r0
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	1ad3      	subs	r3, r2, r3
 800da92:	2b02      	cmp	r3, #2
 800da94:	d901      	bls.n	800da9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800da96:	2303      	movs	r3, #3
 800da98:	e0f2      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800da9a:	4b23      	ldr	r3, [pc, #140]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800da9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800daa0:	f003 0302 	and.w	r3, r3, #2
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d0ef      	beq.n	800da88 <HAL_RCC_OscConfig+0x418>
 800daa8:	e01b      	b.n	800dae2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800daaa:	4b1f      	ldr	r3, [pc, #124]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800daac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dab0:	4a1d      	ldr	r2, [pc, #116]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800dab2:	f023 0301 	bic.w	r3, r3, #1
 800dab6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800daba:	f7fd fa7b 	bl	800afb4 <HAL_GetTick>
 800dabe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800dac0:	e008      	b.n	800dad4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dac2:	f7fd fa77 	bl	800afb4 <HAL_GetTick>
 800dac6:	4602      	mov	r2, r0
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	2b02      	cmp	r3, #2
 800dace:	d901      	bls.n	800dad4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800dad0:	2303      	movs	r3, #3
 800dad2:	e0d5      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800dad4:	4b14      	ldr	r3, [pc, #80]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800dad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800dada:	f003 0302 	and.w	r3, r3, #2
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d1ef      	bne.n	800dac2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	69db      	ldr	r3, [r3, #28]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f000 80c9 	beq.w	800dc7e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800daec:	4b0e      	ldr	r3, [pc, #56]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800daee:	689b      	ldr	r3, [r3, #8]
 800daf0:	f003 030c 	and.w	r3, r3, #12
 800daf4:	2b0c      	cmp	r3, #12
 800daf6:	f000 8083 	beq.w	800dc00 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	69db      	ldr	r3, [r3, #28]
 800dafe:	2b02      	cmp	r3, #2
 800db00:	d15e      	bne.n	800dbc0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800db02:	4b09      	ldr	r3, [pc, #36]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a08      	ldr	r2, [pc, #32]	@ (800db28 <HAL_RCC_OscConfig+0x4b8>)
 800db08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800db0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db0e:	f7fd fa51 	bl	800afb4 <HAL_GetTick>
 800db12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800db14:	e00c      	b.n	800db30 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db16:	f7fd fa4d 	bl	800afb4 <HAL_GetTick>
 800db1a:	4602      	mov	r2, r0
 800db1c:	693b      	ldr	r3, [r7, #16]
 800db1e:	1ad3      	subs	r3, r2, r3
 800db20:	2b02      	cmp	r3, #2
 800db22:	d905      	bls.n	800db30 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800db24:	2303      	movs	r3, #3
 800db26:	e0ab      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
 800db28:	40021000 	.word	0x40021000
 800db2c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800db30:	4b55      	ldr	r3, [pc, #340]	@ (800dc88 <HAL_RCC_OscConfig+0x618>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d1ec      	bne.n	800db16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800db3c:	4b52      	ldr	r3, [pc, #328]	@ (800dc88 <HAL_RCC_OscConfig+0x618>)
 800db3e:	68da      	ldr	r2, [r3, #12]
 800db40:	4b52      	ldr	r3, [pc, #328]	@ (800dc8c <HAL_RCC_OscConfig+0x61c>)
 800db42:	4013      	ands	r3, r2
 800db44:	687a      	ldr	r2, [r7, #4]
 800db46:	6a11      	ldr	r1, [r2, #32]
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800db4c:	3a01      	subs	r2, #1
 800db4e:	0112      	lsls	r2, r2, #4
 800db50:	4311      	orrs	r1, r2
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800db56:	0212      	lsls	r2, r2, #8
 800db58:	4311      	orrs	r1, r2
 800db5a:	687a      	ldr	r2, [r7, #4]
 800db5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800db5e:	0852      	lsrs	r2, r2, #1
 800db60:	3a01      	subs	r2, #1
 800db62:	0552      	lsls	r2, r2, #21
 800db64:	4311      	orrs	r1, r2
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800db6a:	0852      	lsrs	r2, r2, #1
 800db6c:	3a01      	subs	r2, #1
 800db6e:	0652      	lsls	r2, r2, #25
 800db70:	4311      	orrs	r1, r2
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800db76:	06d2      	lsls	r2, r2, #27
 800db78:	430a      	orrs	r2, r1
 800db7a:	4943      	ldr	r1, [pc, #268]	@ (800dc88 <HAL_RCC_OscConfig+0x618>)
 800db7c:	4313      	orrs	r3, r2
 800db7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800db80:	4b41      	ldr	r3, [pc, #260]	@ (800dc88 <HAL_RCC_OscConfig+0x618>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a40      	ldr	r2, [pc, #256]	@ (800dc88 <HAL_RCC_OscConfig+0x618>)
 800db86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800db8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800db8c:	4b3e      	ldr	r3, [pc, #248]	@ (800dc88 <HAL_RCC_OscConfig+0x618>)
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	4a3d      	ldr	r2, [pc, #244]	@ (800dc88 <HAL_RCC_OscConfig+0x618>)
 800db92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800db96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db98:	f7fd fa0c 	bl	800afb4 <HAL_GetTick>
 800db9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800db9e:	e008      	b.n	800dbb2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dba0:	f7fd fa08 	bl	800afb4 <HAL_GetTick>
 800dba4:	4602      	mov	r2, r0
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	1ad3      	subs	r3, r2, r3
 800dbaa:	2b02      	cmp	r3, #2
 800dbac:	d901      	bls.n	800dbb2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800dbae:	2303      	movs	r3, #3
 800dbb0:	e066      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dbb2:	4b35      	ldr	r3, [pc, #212]	@ (800dc88 <HAL_RCC_OscConfig+0x618>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d0f0      	beq.n	800dba0 <HAL_RCC_OscConfig+0x530>
 800dbbe:	e05e      	b.n	800dc7e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dbc0:	4b31      	ldr	r3, [pc, #196]	@ (800dc88 <HAL_RCC_OscConfig+0x618>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4a30      	ldr	r2, [pc, #192]	@ (800dc88 <HAL_RCC_OscConfig+0x618>)
 800dbc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800dbca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dbcc:	f7fd f9f2 	bl	800afb4 <HAL_GetTick>
 800dbd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dbd2:	e008      	b.n	800dbe6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dbd4:	f7fd f9ee 	bl	800afb4 <HAL_GetTick>
 800dbd8:	4602      	mov	r2, r0
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	1ad3      	subs	r3, r2, r3
 800dbde:	2b02      	cmp	r3, #2
 800dbe0:	d901      	bls.n	800dbe6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800dbe2:	2303      	movs	r3, #3
 800dbe4:	e04c      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dbe6:	4b28      	ldr	r3, [pc, #160]	@ (800dc88 <HAL_RCC_OscConfig+0x618>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d1f0      	bne.n	800dbd4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800dbf2:	4b25      	ldr	r3, [pc, #148]	@ (800dc88 <HAL_RCC_OscConfig+0x618>)
 800dbf4:	68da      	ldr	r2, [r3, #12]
 800dbf6:	4924      	ldr	r1, [pc, #144]	@ (800dc88 <HAL_RCC_OscConfig+0x618>)
 800dbf8:	4b25      	ldr	r3, [pc, #148]	@ (800dc90 <HAL_RCC_OscConfig+0x620>)
 800dbfa:	4013      	ands	r3, r2
 800dbfc:	60cb      	str	r3, [r1, #12]
 800dbfe:	e03e      	b.n	800dc7e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	69db      	ldr	r3, [r3, #28]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d101      	bne.n	800dc0c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800dc08:	2301      	movs	r3, #1
 800dc0a:	e039      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800dc0c:	4b1e      	ldr	r3, [pc, #120]	@ (800dc88 <HAL_RCC_OscConfig+0x618>)
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	f003 0203 	and.w	r2, r3, #3
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6a1b      	ldr	r3, [r3, #32]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d12c      	bne.n	800dc7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dc2e:	429a      	cmp	r2, r3
 800dc30:	d123      	bne.n	800dc7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d11b      	bne.n	800dc7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc4c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d113      	bne.n	800dc7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dc52:	697b      	ldr	r3, [r7, #20]
 800dc54:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc5c:	085b      	lsrs	r3, r3, #1
 800dc5e:	3b01      	subs	r3, #1
 800dc60:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d109      	bne.n	800dc7a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800dc66:	697b      	ldr	r3, [r7, #20]
 800dc68:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc70:	085b      	lsrs	r3, r3, #1
 800dc72:	3b01      	subs	r3, #1
 800dc74:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d001      	beq.n	800dc7e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	e000      	b.n	800dc80 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800dc7e:	2300      	movs	r3, #0
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3720      	adds	r7, #32
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	40021000 	.word	0x40021000
 800dc8c:	019f800c 	.word	0x019f800c
 800dc90:	feeefffc 	.word	0xfeeefffc

0800dc94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b086      	sub	sp, #24
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d101      	bne.n	800dcac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dca8:	2301      	movs	r3, #1
 800dcaa:	e11e      	b.n	800deea <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dcac:	4b91      	ldr	r3, [pc, #580]	@ (800def4 <HAL_RCC_ClockConfig+0x260>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f003 030f 	and.w	r3, r3, #15
 800dcb4:	683a      	ldr	r2, [r7, #0]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d910      	bls.n	800dcdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dcba:	4b8e      	ldr	r3, [pc, #568]	@ (800def4 <HAL_RCC_ClockConfig+0x260>)
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f023 020f 	bic.w	r2, r3, #15
 800dcc2:	498c      	ldr	r1, [pc, #560]	@ (800def4 <HAL_RCC_ClockConfig+0x260>)
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	4313      	orrs	r3, r2
 800dcc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcca:	4b8a      	ldr	r3, [pc, #552]	@ (800def4 <HAL_RCC_ClockConfig+0x260>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f003 030f 	and.w	r3, r3, #15
 800dcd2:	683a      	ldr	r2, [r7, #0]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d001      	beq.n	800dcdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800dcd8:	2301      	movs	r3, #1
 800dcda:	e106      	b.n	800deea <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f003 0301 	and.w	r3, r3, #1
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d073      	beq.n	800ddd0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	685b      	ldr	r3, [r3, #4]
 800dcec:	2b03      	cmp	r3, #3
 800dcee:	d129      	bne.n	800dd44 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dcf0:	4b81      	ldr	r3, [pc, #516]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d101      	bne.n	800dd00 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800dcfc:	2301      	movs	r3, #1
 800dcfe:	e0f4      	b.n	800deea <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800dd00:	f000 f99e 	bl	800e040 <RCC_GetSysClockFreqFromPLLSource>
 800dd04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	4a7c      	ldr	r2, [pc, #496]	@ (800defc <HAL_RCC_ClockConfig+0x268>)
 800dd0a:	4293      	cmp	r3, r2
 800dd0c:	d93f      	bls.n	800dd8e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800dd0e:	4b7a      	ldr	r3, [pc, #488]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d009      	beq.n	800dd2e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d033      	beq.n	800dd8e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d12f      	bne.n	800dd8e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800dd2e:	4b72      	ldr	r3, [pc, #456]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dd36:	4a70      	ldr	r2, [pc, #448]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800dd38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd3c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800dd3e:	2380      	movs	r3, #128	@ 0x80
 800dd40:	617b      	str	r3, [r7, #20]
 800dd42:	e024      	b.n	800dd8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	2b02      	cmp	r3, #2
 800dd4a:	d107      	bne.n	800dd5c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dd4c:	4b6a      	ldr	r3, [pc, #424]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d109      	bne.n	800dd6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	e0c6      	b.n	800deea <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800dd5c:	4b66      	ldr	r3, [pc, #408]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d101      	bne.n	800dd6c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	e0be      	b.n	800deea <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800dd6c:	f000 f8ce 	bl	800df0c <HAL_RCC_GetSysClockFreq>
 800dd70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	4a61      	ldr	r2, [pc, #388]	@ (800defc <HAL_RCC_ClockConfig+0x268>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d909      	bls.n	800dd8e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800dd7a:	4b5f      	ldr	r3, [pc, #380]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800dd7c:	689b      	ldr	r3, [r3, #8]
 800dd7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dd82:	4a5d      	ldr	r2, [pc, #372]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800dd84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd88:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800dd8a:	2380      	movs	r3, #128	@ 0x80
 800dd8c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800dd8e:	4b5a      	ldr	r3, [pc, #360]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800dd90:	689b      	ldr	r3, [r3, #8]
 800dd92:	f023 0203 	bic.w	r2, r3, #3
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	4957      	ldr	r1, [pc, #348]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800dd9c:	4313      	orrs	r3, r2
 800dd9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dda0:	f7fd f908 	bl	800afb4 <HAL_GetTick>
 800dda4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dda6:	e00a      	b.n	800ddbe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dda8:	f7fd f904 	bl	800afb4 <HAL_GetTick>
 800ddac:	4602      	mov	r2, r0
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	1ad3      	subs	r3, r2, r3
 800ddb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d901      	bls.n	800ddbe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800ddba:	2303      	movs	r3, #3
 800ddbc:	e095      	b.n	800deea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ddbe:	4b4e      	ldr	r3, [pc, #312]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800ddc0:	689b      	ldr	r3, [r3, #8]
 800ddc2:	f003 020c 	and.w	r2, r3, #12
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	429a      	cmp	r2, r3
 800ddce:	d1eb      	bne.n	800dda8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f003 0302 	and.w	r3, r3, #2
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d023      	beq.n	800de24 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f003 0304 	and.w	r3, r3, #4
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d005      	beq.n	800ddf4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dde8:	4b43      	ldr	r3, [pc, #268]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	4a42      	ldr	r2, [pc, #264]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800ddee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ddf2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f003 0308 	and.w	r3, r3, #8
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d007      	beq.n	800de10 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800de00:	4b3d      	ldr	r3, [pc, #244]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800de02:	689b      	ldr	r3, [r3, #8]
 800de04:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800de08:	4a3b      	ldr	r2, [pc, #236]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800de0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800de0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800de10:	4b39      	ldr	r3, [pc, #228]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	689b      	ldr	r3, [r3, #8]
 800de1c:	4936      	ldr	r1, [pc, #216]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800de1e:	4313      	orrs	r3, r2
 800de20:	608b      	str	r3, [r1, #8]
 800de22:	e008      	b.n	800de36 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	2b80      	cmp	r3, #128	@ 0x80
 800de28:	d105      	bne.n	800de36 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800de2a:	4b33      	ldr	r3, [pc, #204]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	4a32      	ldr	r2, [pc, #200]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800de30:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800de34:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800de36:	4b2f      	ldr	r3, [pc, #188]	@ (800def4 <HAL_RCC_ClockConfig+0x260>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f003 030f 	and.w	r3, r3, #15
 800de3e:	683a      	ldr	r2, [r7, #0]
 800de40:	429a      	cmp	r2, r3
 800de42:	d21d      	bcs.n	800de80 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de44:	4b2b      	ldr	r3, [pc, #172]	@ (800def4 <HAL_RCC_ClockConfig+0x260>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f023 020f 	bic.w	r2, r3, #15
 800de4c:	4929      	ldr	r1, [pc, #164]	@ (800def4 <HAL_RCC_ClockConfig+0x260>)
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	4313      	orrs	r3, r2
 800de52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800de54:	f7fd f8ae 	bl	800afb4 <HAL_GetTick>
 800de58:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800de5a:	e00a      	b.n	800de72 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800de5c:	f7fd f8aa 	bl	800afb4 <HAL_GetTick>
 800de60:	4602      	mov	r2, r0
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	1ad3      	subs	r3, r2, r3
 800de66:	f241 3288 	movw	r2, #5000	@ 0x1388
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d901      	bls.n	800de72 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800de6e:	2303      	movs	r3, #3
 800de70:	e03b      	b.n	800deea <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800de72:	4b20      	ldr	r3, [pc, #128]	@ (800def4 <HAL_RCC_ClockConfig+0x260>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f003 030f 	and.w	r3, r3, #15
 800de7a:	683a      	ldr	r2, [r7, #0]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d1ed      	bne.n	800de5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f003 0304 	and.w	r3, r3, #4
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d008      	beq.n	800de9e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800de8c:	4b1a      	ldr	r3, [pc, #104]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	68db      	ldr	r3, [r3, #12]
 800de98:	4917      	ldr	r1, [pc, #92]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800de9a:	4313      	orrs	r3, r2
 800de9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f003 0308 	and.w	r3, r3, #8
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d009      	beq.n	800debe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800deaa:	4b13      	ldr	r3, [pc, #76]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800deac:	689b      	ldr	r3, [r3, #8]
 800deae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	691b      	ldr	r3, [r3, #16]
 800deb6:	00db      	lsls	r3, r3, #3
 800deb8:	490f      	ldr	r1, [pc, #60]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800deba:	4313      	orrs	r3, r2
 800debc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800debe:	f000 f825 	bl	800df0c <HAL_RCC_GetSysClockFreq>
 800dec2:	4602      	mov	r2, r0
 800dec4:	4b0c      	ldr	r3, [pc, #48]	@ (800def8 <HAL_RCC_ClockConfig+0x264>)
 800dec6:	689b      	ldr	r3, [r3, #8]
 800dec8:	091b      	lsrs	r3, r3, #4
 800deca:	f003 030f 	and.w	r3, r3, #15
 800dece:	490c      	ldr	r1, [pc, #48]	@ (800df00 <HAL_RCC_ClockConfig+0x26c>)
 800ded0:	5ccb      	ldrb	r3, [r1, r3]
 800ded2:	f003 031f 	and.w	r3, r3, #31
 800ded6:	fa22 f303 	lsr.w	r3, r2, r3
 800deda:	4a0a      	ldr	r2, [pc, #40]	@ (800df04 <HAL_RCC_ClockConfig+0x270>)
 800dedc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800dede:	4b0a      	ldr	r3, [pc, #40]	@ (800df08 <HAL_RCC_ClockConfig+0x274>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fd f81a 	bl	800af1c <HAL_InitTick>
 800dee8:	4603      	mov	r3, r0
}
 800deea:	4618      	mov	r0, r3
 800deec:	3718      	adds	r7, #24
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	40022000 	.word	0x40022000
 800def8:	40021000 	.word	0x40021000
 800defc:	04c4b400 	.word	0x04c4b400
 800df00:	08014fe0 	.word	0x08014fe0
 800df04:	200005bc 	.word	0x200005bc
 800df08:	200005c0 	.word	0x200005c0

0800df0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b087      	sub	sp, #28
 800df10:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800df12:	4b2c      	ldr	r3, [pc, #176]	@ (800dfc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df14:	689b      	ldr	r3, [r3, #8]
 800df16:	f003 030c 	and.w	r3, r3, #12
 800df1a:	2b04      	cmp	r3, #4
 800df1c:	d102      	bne.n	800df24 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800df1e:	4b2a      	ldr	r3, [pc, #168]	@ (800dfc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800df20:	613b      	str	r3, [r7, #16]
 800df22:	e047      	b.n	800dfb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800df24:	4b27      	ldr	r3, [pc, #156]	@ (800dfc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	f003 030c 	and.w	r3, r3, #12
 800df2c:	2b08      	cmp	r3, #8
 800df2e:	d102      	bne.n	800df36 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800df30:	4b26      	ldr	r3, [pc, #152]	@ (800dfcc <HAL_RCC_GetSysClockFreq+0xc0>)
 800df32:	613b      	str	r3, [r7, #16]
 800df34:	e03e      	b.n	800dfb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800df36:	4b23      	ldr	r3, [pc, #140]	@ (800dfc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df38:	689b      	ldr	r3, [r3, #8]
 800df3a:	f003 030c 	and.w	r3, r3, #12
 800df3e:	2b0c      	cmp	r3, #12
 800df40:	d136      	bne.n	800dfb0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800df42:	4b20      	ldr	r3, [pc, #128]	@ (800dfc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	f003 0303 	and.w	r3, r3, #3
 800df4a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800df4c:	4b1d      	ldr	r3, [pc, #116]	@ (800dfc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df4e:	68db      	ldr	r3, [r3, #12]
 800df50:	091b      	lsrs	r3, r3, #4
 800df52:	f003 030f 	and.w	r3, r3, #15
 800df56:	3301      	adds	r3, #1
 800df58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2b03      	cmp	r3, #3
 800df5e:	d10c      	bne.n	800df7a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800df60:	4a1a      	ldr	r2, [pc, #104]	@ (800dfcc <HAL_RCC_GetSysClockFreq+0xc0>)
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	fbb2 f3f3 	udiv	r3, r2, r3
 800df68:	4a16      	ldr	r2, [pc, #88]	@ (800dfc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df6a:	68d2      	ldr	r2, [r2, #12]
 800df6c:	0a12      	lsrs	r2, r2, #8
 800df6e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800df72:	fb02 f303 	mul.w	r3, r2, r3
 800df76:	617b      	str	r3, [r7, #20]
      break;
 800df78:	e00c      	b.n	800df94 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800df7a:	4a13      	ldr	r2, [pc, #76]	@ (800dfc8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800df82:	4a10      	ldr	r2, [pc, #64]	@ (800dfc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df84:	68d2      	ldr	r2, [r2, #12]
 800df86:	0a12      	lsrs	r2, r2, #8
 800df88:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800df8c:	fb02 f303 	mul.w	r3, r2, r3
 800df90:	617b      	str	r3, [r7, #20]
      break;
 800df92:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800df94:	4b0b      	ldr	r3, [pc, #44]	@ (800dfc4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800df96:	68db      	ldr	r3, [r3, #12]
 800df98:	0e5b      	lsrs	r3, r3, #25
 800df9a:	f003 0303 	and.w	r3, r3, #3
 800df9e:	3301      	adds	r3, #1
 800dfa0:	005b      	lsls	r3, r3, #1
 800dfa2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800dfa4:	697a      	ldr	r2, [r7, #20]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfac:	613b      	str	r3, [r7, #16]
 800dfae:	e001      	b.n	800dfb4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800dfb4:	693b      	ldr	r3, [r7, #16]
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	371c      	adds	r7, #28
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc0:	4770      	bx	lr
 800dfc2:	bf00      	nop
 800dfc4:	40021000 	.word	0x40021000
 800dfc8:	00f42400 	.word	0x00f42400
 800dfcc:	016e3600 	.word	0x016e3600

0800dfd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dfd0:	b480      	push	{r7}
 800dfd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800dfd4:	4b03      	ldr	r3, [pc, #12]	@ (800dfe4 <HAL_RCC_GetHCLKFreq+0x14>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe0:	4770      	bx	lr
 800dfe2:	bf00      	nop
 800dfe4:	200005bc 	.word	0x200005bc

0800dfe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800dfec:	f7ff fff0 	bl	800dfd0 <HAL_RCC_GetHCLKFreq>
 800dff0:	4602      	mov	r2, r0
 800dff2:	4b06      	ldr	r3, [pc, #24]	@ (800e00c <HAL_RCC_GetPCLK1Freq+0x24>)
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	0a1b      	lsrs	r3, r3, #8
 800dff8:	f003 0307 	and.w	r3, r3, #7
 800dffc:	4904      	ldr	r1, [pc, #16]	@ (800e010 <HAL_RCC_GetPCLK1Freq+0x28>)
 800dffe:	5ccb      	ldrb	r3, [r1, r3]
 800e000:	f003 031f 	and.w	r3, r3, #31
 800e004:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e008:	4618      	mov	r0, r3
 800e00a:	bd80      	pop	{r7, pc}
 800e00c:	40021000 	.word	0x40021000
 800e010:	08014ff0 	.word	0x08014ff0

0800e014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800e018:	f7ff ffda 	bl	800dfd0 <HAL_RCC_GetHCLKFreq>
 800e01c:	4602      	mov	r2, r0
 800e01e:	4b06      	ldr	r3, [pc, #24]	@ (800e038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e020:	689b      	ldr	r3, [r3, #8]
 800e022:	0adb      	lsrs	r3, r3, #11
 800e024:	f003 0307 	and.w	r3, r3, #7
 800e028:	4904      	ldr	r1, [pc, #16]	@ (800e03c <HAL_RCC_GetPCLK2Freq+0x28>)
 800e02a:	5ccb      	ldrb	r3, [r1, r3]
 800e02c:	f003 031f 	and.w	r3, r3, #31
 800e030:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e034:	4618      	mov	r0, r3
 800e036:	bd80      	pop	{r7, pc}
 800e038:	40021000 	.word	0x40021000
 800e03c:	08014ff0 	.word	0x08014ff0

0800e040 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800e040:	b480      	push	{r7}
 800e042:	b087      	sub	sp, #28
 800e044:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e046:	4b1e      	ldr	r3, [pc, #120]	@ (800e0c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	f003 0303 	and.w	r3, r3, #3
 800e04e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e050:	4b1b      	ldr	r3, [pc, #108]	@ (800e0c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e052:	68db      	ldr	r3, [r3, #12]
 800e054:	091b      	lsrs	r3, r3, #4
 800e056:	f003 030f 	and.w	r3, r3, #15
 800e05a:	3301      	adds	r3, #1
 800e05c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	2b03      	cmp	r3, #3
 800e062:	d10c      	bne.n	800e07e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e064:	4a17      	ldr	r2, [pc, #92]	@ (800e0c4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	fbb2 f3f3 	udiv	r3, r2, r3
 800e06c:	4a14      	ldr	r2, [pc, #80]	@ (800e0c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e06e:	68d2      	ldr	r2, [r2, #12]
 800e070:	0a12      	lsrs	r2, r2, #8
 800e072:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e076:	fb02 f303 	mul.w	r3, r2, r3
 800e07a:	617b      	str	r3, [r7, #20]
    break;
 800e07c:	e00c      	b.n	800e098 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e07e:	4a12      	ldr	r2, [pc, #72]	@ (800e0c8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	fbb2 f3f3 	udiv	r3, r2, r3
 800e086:	4a0e      	ldr	r2, [pc, #56]	@ (800e0c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e088:	68d2      	ldr	r2, [r2, #12]
 800e08a:	0a12      	lsrs	r2, r2, #8
 800e08c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800e090:	fb02 f303 	mul.w	r3, r2, r3
 800e094:	617b      	str	r3, [r7, #20]
    break;
 800e096:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e098:	4b09      	ldr	r3, [pc, #36]	@ (800e0c0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e09a:	68db      	ldr	r3, [r3, #12]
 800e09c:	0e5b      	lsrs	r3, r3, #25
 800e09e:	f003 0303 	and.w	r3, r3, #3
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	005b      	lsls	r3, r3, #1
 800e0a6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800e0a8:	697a      	ldr	r2, [r7, #20]
 800e0aa:	68bb      	ldr	r3, [r7, #8]
 800e0ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0b0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800e0b2:	687b      	ldr	r3, [r7, #4]
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	371c      	adds	r7, #28
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0be:	4770      	bx	lr
 800e0c0:	40021000 	.word	0x40021000
 800e0c4:	016e3600 	.word	0x016e3600
 800e0c8:	00f42400 	.word	0x00f42400

0800e0cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b086      	sub	sp, #24
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e0d8:	2300      	movs	r3, #0
 800e0da:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	f000 8098 	beq.w	800e21a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e0ee:	4b43      	ldr	r3, [pc, #268]	@ (800e1fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e0f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d10d      	bne.n	800e116 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e0fa:	4b40      	ldr	r3, [pc, #256]	@ (800e1fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e0fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e0fe:	4a3f      	ldr	r2, [pc, #252]	@ (800e1fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e104:	6593      	str	r3, [r2, #88]	@ 0x58
 800e106:	4b3d      	ldr	r3, [pc, #244]	@ (800e1fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e10a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e10e:	60bb      	str	r3, [r7, #8]
 800e110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e112:	2301      	movs	r3, #1
 800e114:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e116:	4b3a      	ldr	r3, [pc, #232]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4a39      	ldr	r2, [pc, #228]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e11c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e120:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e122:	f7fc ff47 	bl	800afb4 <HAL_GetTick>
 800e126:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e128:	e009      	b.n	800e13e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e12a:	f7fc ff43 	bl	800afb4 <HAL_GetTick>
 800e12e:	4602      	mov	r2, r0
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	1ad3      	subs	r3, r2, r3
 800e134:	2b02      	cmp	r3, #2
 800e136:	d902      	bls.n	800e13e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800e138:	2303      	movs	r3, #3
 800e13a:	74fb      	strb	r3, [r7, #19]
        break;
 800e13c:	e005      	b.n	800e14a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e13e:	4b30      	ldr	r3, [pc, #192]	@ (800e200 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e146:	2b00      	cmp	r3, #0
 800e148:	d0ef      	beq.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800e14a:	7cfb      	ldrb	r3, [r7, #19]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d159      	bne.n	800e204 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e150:	4b2a      	ldr	r3, [pc, #168]	@ (800e1fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e15a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d01e      	beq.n	800e1a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e166:	697a      	ldr	r2, [r7, #20]
 800e168:	429a      	cmp	r2, r3
 800e16a:	d019      	beq.n	800e1a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e16c:	4b23      	ldr	r3, [pc, #140]	@ (800e1fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e16e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e176:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e178:	4b20      	ldr	r3, [pc, #128]	@ (800e1fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e17a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e17e:	4a1f      	ldr	r2, [pc, #124]	@ (800e1fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e188:	4b1c      	ldr	r3, [pc, #112]	@ (800e1fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e18a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e18e:	4a1b      	ldr	r2, [pc, #108]	@ (800e1fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e198:	4a18      	ldr	r2, [pc, #96]	@ (800e1fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e19a:	697b      	ldr	r3, [r7, #20]
 800e19c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e1a0:	697b      	ldr	r3, [r7, #20]
 800e1a2:	f003 0301 	and.w	r3, r3, #1
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d016      	beq.n	800e1d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e1aa:	f7fc ff03 	bl	800afb4 <HAL_GetTick>
 800e1ae:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e1b0:	e00b      	b.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e1b2:	f7fc feff 	bl	800afb4 <HAL_GetTick>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	1ad3      	subs	r3, r2, r3
 800e1bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	d902      	bls.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800e1c4:	2303      	movs	r3, #3
 800e1c6:	74fb      	strb	r3, [r7, #19]
            break;
 800e1c8:	e006      	b.n	800e1d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e1ca:	4b0c      	ldr	r3, [pc, #48]	@ (800e1fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1d0:	f003 0302 	and.w	r3, r3, #2
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d0ec      	beq.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800e1d8:	7cfb      	ldrb	r3, [r7, #19]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d10b      	bne.n	800e1f6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e1de:	4b07      	ldr	r3, [pc, #28]	@ (800e1fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e1ec:	4903      	ldr	r1, [pc, #12]	@ (800e1fc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e1ee:	4313      	orrs	r3, r2
 800e1f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800e1f4:	e008      	b.n	800e208 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e1f6:	7cfb      	ldrb	r3, [r7, #19]
 800e1f8:	74bb      	strb	r3, [r7, #18]
 800e1fa:	e005      	b.n	800e208 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800e1fc:	40021000 	.word	0x40021000
 800e200:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e204:	7cfb      	ldrb	r3, [r7, #19]
 800e206:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e208:	7c7b      	ldrb	r3, [r7, #17]
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d105      	bne.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e20e:	4ba7      	ldr	r3, [pc, #668]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e212:	4aa6      	ldr	r2, [pc, #664]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e214:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e218:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f003 0301 	and.w	r3, r3, #1
 800e222:	2b00      	cmp	r3, #0
 800e224:	d00a      	beq.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e226:	4ba1      	ldr	r3, [pc, #644]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e22c:	f023 0203 	bic.w	r2, r3, #3
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	499d      	ldr	r1, [pc, #628]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e236:	4313      	orrs	r3, r2
 800e238:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f003 0302 	and.w	r3, r3, #2
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00a      	beq.n	800e25e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e248:	4b98      	ldr	r3, [pc, #608]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e24a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e24e:	f023 020c 	bic.w	r2, r3, #12
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	689b      	ldr	r3, [r3, #8]
 800e256:	4995      	ldr	r1, [pc, #596]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e258:	4313      	orrs	r3, r2
 800e25a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f003 0304 	and.w	r3, r3, #4
 800e266:	2b00      	cmp	r3, #0
 800e268:	d00a      	beq.n	800e280 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e26a:	4b90      	ldr	r3, [pc, #576]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e26c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e270:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	68db      	ldr	r3, [r3, #12]
 800e278:	498c      	ldr	r1, [pc, #560]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e27a:	4313      	orrs	r3, r2
 800e27c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f003 0308 	and.w	r3, r3, #8
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d00a      	beq.n	800e2a2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e28c:	4b87      	ldr	r3, [pc, #540]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e28e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e292:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	691b      	ldr	r3, [r3, #16]
 800e29a:	4984      	ldr	r1, [pc, #528]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e29c:	4313      	orrs	r3, r2
 800e29e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f003 0310 	and.w	r3, r3, #16
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d00a      	beq.n	800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e2ae:	4b7f      	ldr	r3, [pc, #508]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	695b      	ldr	r3, [r3, #20]
 800e2bc:	497b      	ldr	r1, [pc, #492]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f003 0320 	and.w	r3, r3, #32
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d00a      	beq.n	800e2e6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e2d0:	4b76      	ldr	r3, [pc, #472]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	699b      	ldr	r3, [r3, #24]
 800e2de:	4973      	ldr	r1, [pc, #460]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d00a      	beq.n	800e308 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e2f2:	4b6e      	ldr	r3, [pc, #440]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e2f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e2f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	69db      	ldr	r3, [r3, #28]
 800e300:	496a      	ldr	r1, [pc, #424]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e302:	4313      	orrs	r3, r2
 800e304:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e310:	2b00      	cmp	r3, #0
 800e312:	d00a      	beq.n	800e32a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e314:	4b65      	ldr	r3, [pc, #404]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e31a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6a1b      	ldr	r3, [r3, #32]
 800e322:	4962      	ldr	r1, [pc, #392]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e324:	4313      	orrs	r3, r2
 800e326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00a      	beq.n	800e34c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e336:	4b5d      	ldr	r3, [pc, #372]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e33c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e344:	4959      	ldr	r1, [pc, #356]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e346:	4313      	orrs	r3, r2
 800e348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e354:	2b00      	cmp	r3, #0
 800e356:	d00a      	beq.n	800e36e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e358:	4b54      	ldr	r3, [pc, #336]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e35a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e35e:	f023 0203 	bic.w	r2, r3, #3
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e366:	4951      	ldr	r1, [pc, #324]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e368:	4313      	orrs	r3, r2
 800e36a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e376:	2b00      	cmp	r3, #0
 800e378:	d00a      	beq.n	800e390 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e37a:	4b4c      	ldr	r3, [pc, #304]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e37c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e380:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e388:	4948      	ldr	r1, [pc, #288]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e38a:	4313      	orrs	r3, r2
 800e38c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d015      	beq.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e39c:	4b43      	ldr	r3, [pc, #268]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e39e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3aa:	4940      	ldr	r1, [pc, #256]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3ac:	4313      	orrs	r3, r2
 800e3ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e3ba:	d105      	bne.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e3bc:	4b3b      	ldr	r3, [pc, #236]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3be:	68db      	ldr	r3, [r3, #12]
 800e3c0:	4a3a      	ldr	r2, [pc, #232]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e3c6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d015      	beq.n	800e400 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e3d4:	4b35      	ldr	r3, [pc, #212]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e3da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3e2:	4932      	ldr	r1, [pc, #200]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3e4:	4313      	orrs	r3, r2
 800e3e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e3f2:	d105      	bne.n	800e400 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e3f4:	4b2d      	ldr	r3, [pc, #180]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3f6:	68db      	ldr	r3, [r3, #12]
 800e3f8:	4a2c      	ldr	r2, [pc, #176]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e3fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e3fe:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d015      	beq.n	800e438 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e40c:	4b27      	ldr	r3, [pc, #156]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e40e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e412:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e41a:	4924      	ldr	r1, [pc, #144]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e41c:	4313      	orrs	r3, r2
 800e41e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e426:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e42a:	d105      	bne.n	800e438 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e42c:	4b1f      	ldr	r3, [pc, #124]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e42e:	68db      	ldr	r3, [r3, #12]
 800e430:	4a1e      	ldr	r2, [pc, #120]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e432:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e436:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e440:	2b00      	cmp	r3, #0
 800e442:	d015      	beq.n	800e470 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e444:	4b19      	ldr	r3, [pc, #100]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e44a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e452:	4916      	ldr	r1, [pc, #88]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e454:	4313      	orrs	r3, r2
 800e456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e45e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e462:	d105      	bne.n	800e470 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e464:	4b11      	ldr	r3, [pc, #68]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e466:	68db      	ldr	r3, [r3, #12]
 800e468:	4a10      	ldr	r2, [pc, #64]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e46a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e46e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d019      	beq.n	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e47c:	4b0b      	ldr	r3, [pc, #44]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e47e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e482:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e48a:	4908      	ldr	r1, [pc, #32]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e48c:	4313      	orrs	r3, r2
 800e48e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e496:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e49a:	d109      	bne.n	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e49c:	4b03      	ldr	r3, [pc, #12]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	4a02      	ldr	r2, [pc, #8]	@ (800e4ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e4a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e4a6:	60d3      	str	r3, [r2, #12]
 800e4a8:	e002      	b.n	800e4b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800e4aa:	bf00      	nop
 800e4ac:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d015      	beq.n	800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800e4bc:	4b29      	ldr	r3, [pc, #164]	@ (800e564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4ca:	4926      	ldr	r1, [pc, #152]	@ (800e564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e4da:	d105      	bne.n	800e4e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e4dc:	4b21      	ldr	r3, [pc, #132]	@ (800e564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4de:	68db      	ldr	r3, [r3, #12]
 800e4e0:	4a20      	ldr	r2, [pc, #128]	@ (800e564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e4e6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d015      	beq.n	800e520 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800e4f4:	4b1b      	ldr	r3, [pc, #108]	@ (800e564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e4f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e4fa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e502:	4918      	ldr	r1, [pc, #96]	@ (800e564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e504:	4313      	orrs	r3, r2
 800e506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e50e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e512:	d105      	bne.n	800e520 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e514:	4b13      	ldr	r3, [pc, #76]	@ (800e564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e516:	68db      	ldr	r3, [r3, #12]
 800e518:	4a12      	ldr	r2, [pc, #72]	@ (800e564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e51a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e51e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d015      	beq.n	800e558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e52c:	4b0d      	ldr	r3, [pc, #52]	@ (800e564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e52e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e532:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e53a:	490a      	ldr	r1, [pc, #40]	@ (800e564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e53c:	4313      	orrs	r3, r2
 800e53e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e546:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e54a:	d105      	bne.n	800e558 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e54c:	4b05      	ldr	r3, [pc, #20]	@ (800e564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e54e:	68db      	ldr	r3, [r3, #12]
 800e550:	4a04      	ldr	r2, [pc, #16]	@ (800e564 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e552:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e556:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800e558:	7cbb      	ldrb	r3, [r7, #18]
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3718      	adds	r7, #24
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	40021000 	.word	0x40021000

0800e568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d101      	bne.n	800e57a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e576:	2301      	movs	r3, #1
 800e578:	e054      	b.n	800e624 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e580:	b2db      	uxtb	r3, r3
 800e582:	2b00      	cmp	r3, #0
 800e584:	d111      	bne.n	800e5aa <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2200      	movs	r2, #0
 800e58a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f001 fee2 	bl	8010358 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d102      	bne.n	800e5a2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	4a23      	ldr	r2, [pc, #140]	@ (800e62c <HAL_TIM_Base_Init+0xc4>)
 800e5a0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2202      	movs	r2, #2
 800e5ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	3304      	adds	r3, #4
 800e5ba:	4619      	mov	r1, r3
 800e5bc:	4610      	mov	r0, r2
 800e5be:	f001 fa2b 	bl	800fa18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	2201      	movs	r2, #1
 800e5de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2201      	movs	r2, #1
 800e5ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2201      	movs	r2, #1
 800e606:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2201      	movs	r2, #1
 800e60e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	2201      	movs	r2, #1
 800e616:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2201      	movs	r2, #1
 800e61e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e622:	2300      	movs	r3, #0
}
 800e624:	4618      	mov	r0, r3
 800e626:	3708      	adds	r7, #8
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}
 800e62c:	0800a7dd 	.word	0x0800a7dd

0800e630 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e630:	b480      	push	{r7}
 800e632:	b085      	sub	sp, #20
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	2b01      	cmp	r3, #1
 800e642:	d001      	beq.n	800e648 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e644:	2301      	movs	r3, #1
 800e646:	e04c      	b.n	800e6e2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2202      	movs	r2, #2
 800e64c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4a26      	ldr	r2, [pc, #152]	@ (800e6f0 <HAL_TIM_Base_Start+0xc0>)
 800e656:	4293      	cmp	r3, r2
 800e658:	d022      	beq.n	800e6a0 <HAL_TIM_Base_Start+0x70>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e662:	d01d      	beq.n	800e6a0 <HAL_TIM_Base_Start+0x70>
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4a22      	ldr	r2, [pc, #136]	@ (800e6f4 <HAL_TIM_Base_Start+0xc4>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d018      	beq.n	800e6a0 <HAL_TIM_Base_Start+0x70>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	4a21      	ldr	r2, [pc, #132]	@ (800e6f8 <HAL_TIM_Base_Start+0xc8>)
 800e674:	4293      	cmp	r3, r2
 800e676:	d013      	beq.n	800e6a0 <HAL_TIM_Base_Start+0x70>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	4a1f      	ldr	r2, [pc, #124]	@ (800e6fc <HAL_TIM_Base_Start+0xcc>)
 800e67e:	4293      	cmp	r3, r2
 800e680:	d00e      	beq.n	800e6a0 <HAL_TIM_Base_Start+0x70>
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	4a1e      	ldr	r2, [pc, #120]	@ (800e700 <HAL_TIM_Base_Start+0xd0>)
 800e688:	4293      	cmp	r3, r2
 800e68a:	d009      	beq.n	800e6a0 <HAL_TIM_Base_Start+0x70>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4a1c      	ldr	r2, [pc, #112]	@ (800e704 <HAL_TIM_Base_Start+0xd4>)
 800e692:	4293      	cmp	r3, r2
 800e694:	d004      	beq.n	800e6a0 <HAL_TIM_Base_Start+0x70>
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4a1b      	ldr	r2, [pc, #108]	@ (800e708 <HAL_TIM_Base_Start+0xd8>)
 800e69c:	4293      	cmp	r3, r2
 800e69e:	d115      	bne.n	800e6cc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	689a      	ldr	r2, [r3, #8]
 800e6a6:	4b19      	ldr	r3, [pc, #100]	@ (800e70c <HAL_TIM_Base_Start+0xdc>)
 800e6a8:	4013      	ands	r3, r2
 800e6aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	2b06      	cmp	r3, #6
 800e6b0:	d015      	beq.n	800e6de <HAL_TIM_Base_Start+0xae>
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6b8:	d011      	beq.n	800e6de <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f042 0201 	orr.w	r2, r2, #1
 800e6c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6ca:	e008      	b.n	800e6de <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f042 0201 	orr.w	r2, r2, #1
 800e6da:	601a      	str	r2, [r3, #0]
 800e6dc:	e000      	b.n	800e6e0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e6e0:	2300      	movs	r3, #0
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3714      	adds	r7, #20
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ec:	4770      	bx	lr
 800e6ee:	bf00      	nop
 800e6f0:	40012c00 	.word	0x40012c00
 800e6f4:	40000400 	.word	0x40000400
 800e6f8:	40000800 	.word	0x40000800
 800e6fc:	40000c00 	.word	0x40000c00
 800e700:	40013400 	.word	0x40013400
 800e704:	40014000 	.word	0x40014000
 800e708:	40015000 	.word	0x40015000
 800e70c:	00010007 	.word	0x00010007

0800e710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e710:	b480      	push	{r7}
 800e712:	b085      	sub	sp, #20
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e71e:	b2db      	uxtb	r3, r3
 800e720:	2b01      	cmp	r3, #1
 800e722:	d001      	beq.n	800e728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e724:	2301      	movs	r3, #1
 800e726:	e054      	b.n	800e7d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	2202      	movs	r2, #2
 800e72c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	68da      	ldr	r2, [r3, #12]
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	f042 0201 	orr.w	r2, r2, #1
 800e73e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4a26      	ldr	r2, [pc, #152]	@ (800e7e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800e746:	4293      	cmp	r3, r2
 800e748:	d022      	beq.n	800e790 <HAL_TIM_Base_Start_IT+0x80>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e752:	d01d      	beq.n	800e790 <HAL_TIM_Base_Start_IT+0x80>
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	4a22      	ldr	r2, [pc, #136]	@ (800e7e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d018      	beq.n	800e790 <HAL_TIM_Base_Start_IT+0x80>
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	4a21      	ldr	r2, [pc, #132]	@ (800e7e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d013      	beq.n	800e790 <HAL_TIM_Base_Start_IT+0x80>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4a1f      	ldr	r2, [pc, #124]	@ (800e7ec <HAL_TIM_Base_Start_IT+0xdc>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d00e      	beq.n	800e790 <HAL_TIM_Base_Start_IT+0x80>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	4a1e      	ldr	r2, [pc, #120]	@ (800e7f0 <HAL_TIM_Base_Start_IT+0xe0>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d009      	beq.n	800e790 <HAL_TIM_Base_Start_IT+0x80>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4a1c      	ldr	r2, [pc, #112]	@ (800e7f4 <HAL_TIM_Base_Start_IT+0xe4>)
 800e782:	4293      	cmp	r3, r2
 800e784:	d004      	beq.n	800e790 <HAL_TIM_Base_Start_IT+0x80>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4a1b      	ldr	r2, [pc, #108]	@ (800e7f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d115      	bne.n	800e7bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	689a      	ldr	r2, [r3, #8]
 800e796:	4b19      	ldr	r3, [pc, #100]	@ (800e7fc <HAL_TIM_Base_Start_IT+0xec>)
 800e798:	4013      	ands	r3, r2
 800e79a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2b06      	cmp	r3, #6
 800e7a0:	d015      	beq.n	800e7ce <HAL_TIM_Base_Start_IT+0xbe>
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e7a8:	d011      	beq.n	800e7ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	f042 0201 	orr.w	r2, r2, #1
 800e7b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7ba:	e008      	b.n	800e7ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f042 0201 	orr.w	r2, r2, #1
 800e7ca:	601a      	str	r2, [r3, #0]
 800e7cc:	e000      	b.n	800e7d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e7d0:	2300      	movs	r3, #0
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3714      	adds	r7, #20
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr
 800e7de:	bf00      	nop
 800e7e0:	40012c00 	.word	0x40012c00
 800e7e4:	40000400 	.word	0x40000400
 800e7e8:	40000800 	.word	0x40000800
 800e7ec:	40000c00 	.word	0x40000c00
 800e7f0:	40013400 	.word	0x40013400
 800e7f4:	40014000 	.word	0x40014000
 800e7f8:	40015000 	.word	0x40015000
 800e7fc:	00010007 	.word	0x00010007

0800e800 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d101      	bne.n	800e812 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e80e:	2301      	movs	r3, #1
 800e810:	e054      	b.n	800e8bc <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d111      	bne.n	800e842 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2200      	movs	r2, #0
 800e822:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f001 fd96 	bl	8010358 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e830:	2b00      	cmp	r3, #0
 800e832:	d102      	bne.n	800e83a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	4a23      	ldr	r2, [pc, #140]	@ (800e8c4 <HAL_TIM_PWM_Init+0xc4>)
 800e838:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2202      	movs	r2, #2
 800e846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681a      	ldr	r2, [r3, #0]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	3304      	adds	r3, #4
 800e852:	4619      	mov	r1, r3
 800e854:	4610      	mov	r0, r2
 800e856:	f001 f8df 	bl	800fa18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2201      	movs	r2, #1
 800e85e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2201      	movs	r2, #1
 800e866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2201      	movs	r2, #1
 800e86e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2201      	movs	r2, #1
 800e876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2201      	movs	r2, #1
 800e87e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2201      	movs	r2, #1
 800e886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2201      	movs	r2, #1
 800e88e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2201      	movs	r2, #1
 800e896:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2201      	movs	r2, #1
 800e89e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e8ba:	2300      	movs	r3, #0
}
 800e8bc:	4618      	mov	r0, r3
 800e8be:	3708      	adds	r7, #8
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}
 800e8c4:	0800a791 	.word	0x0800a791

0800e8c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b084      	sub	sp, #16
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d109      	bne.n	800e8ec <HAL_TIM_PWM_Start+0x24>
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	2b01      	cmp	r3, #1
 800e8e2:	bf14      	ite	ne
 800e8e4:	2301      	movne	r3, #1
 800e8e6:	2300      	moveq	r3, #0
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	e03c      	b.n	800e966 <HAL_TIM_PWM_Start+0x9e>
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	2b04      	cmp	r3, #4
 800e8f0:	d109      	bne.n	800e906 <HAL_TIM_PWM_Start+0x3e>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	bf14      	ite	ne
 800e8fe:	2301      	movne	r3, #1
 800e900:	2300      	moveq	r3, #0
 800e902:	b2db      	uxtb	r3, r3
 800e904:	e02f      	b.n	800e966 <HAL_TIM_PWM_Start+0x9e>
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	2b08      	cmp	r3, #8
 800e90a:	d109      	bne.n	800e920 <HAL_TIM_PWM_Start+0x58>
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e912:	b2db      	uxtb	r3, r3
 800e914:	2b01      	cmp	r3, #1
 800e916:	bf14      	ite	ne
 800e918:	2301      	movne	r3, #1
 800e91a:	2300      	moveq	r3, #0
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	e022      	b.n	800e966 <HAL_TIM_PWM_Start+0x9e>
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	2b0c      	cmp	r3, #12
 800e924:	d109      	bne.n	800e93a <HAL_TIM_PWM_Start+0x72>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	2b01      	cmp	r3, #1
 800e930:	bf14      	ite	ne
 800e932:	2301      	movne	r3, #1
 800e934:	2300      	moveq	r3, #0
 800e936:	b2db      	uxtb	r3, r3
 800e938:	e015      	b.n	800e966 <HAL_TIM_PWM_Start+0x9e>
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	2b10      	cmp	r3, #16
 800e93e:	d109      	bne.n	800e954 <HAL_TIM_PWM_Start+0x8c>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e946:	b2db      	uxtb	r3, r3
 800e948:	2b01      	cmp	r3, #1
 800e94a:	bf14      	ite	ne
 800e94c:	2301      	movne	r3, #1
 800e94e:	2300      	moveq	r3, #0
 800e950:	b2db      	uxtb	r3, r3
 800e952:	e008      	b.n	800e966 <HAL_TIM_PWM_Start+0x9e>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e95a:	b2db      	uxtb	r3, r3
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	bf14      	ite	ne
 800e960:	2301      	movne	r3, #1
 800e962:	2300      	moveq	r3, #0
 800e964:	b2db      	uxtb	r3, r3
 800e966:	2b00      	cmp	r3, #0
 800e968:	d001      	beq.n	800e96e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e96a:	2301      	movs	r3, #1
 800e96c:	e0a6      	b.n	800eabc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d104      	bne.n	800e97e <HAL_TIM_PWM_Start+0xb6>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2202      	movs	r2, #2
 800e978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e97c:	e023      	b.n	800e9c6 <HAL_TIM_PWM_Start+0xfe>
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	2b04      	cmp	r3, #4
 800e982:	d104      	bne.n	800e98e <HAL_TIM_PWM_Start+0xc6>
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2202      	movs	r2, #2
 800e988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e98c:	e01b      	b.n	800e9c6 <HAL_TIM_PWM_Start+0xfe>
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	2b08      	cmp	r3, #8
 800e992:	d104      	bne.n	800e99e <HAL_TIM_PWM_Start+0xd6>
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	2202      	movs	r2, #2
 800e998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e99c:	e013      	b.n	800e9c6 <HAL_TIM_PWM_Start+0xfe>
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	2b0c      	cmp	r3, #12
 800e9a2:	d104      	bne.n	800e9ae <HAL_TIM_PWM_Start+0xe6>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2202      	movs	r2, #2
 800e9a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e9ac:	e00b      	b.n	800e9c6 <HAL_TIM_PWM_Start+0xfe>
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	2b10      	cmp	r3, #16
 800e9b2:	d104      	bne.n	800e9be <HAL_TIM_PWM_Start+0xf6>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2202      	movs	r2, #2
 800e9b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e9bc:	e003      	b.n	800e9c6 <HAL_TIM_PWM_Start+0xfe>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2202      	movs	r2, #2
 800e9c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	6839      	ldr	r1, [r7, #0]
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f001 fc9c 	bl	801030c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4a3a      	ldr	r2, [pc, #232]	@ (800eac4 <HAL_TIM_PWM_Start+0x1fc>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d018      	beq.n	800ea10 <HAL_TIM_PWM_Start+0x148>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	4a39      	ldr	r2, [pc, #228]	@ (800eac8 <HAL_TIM_PWM_Start+0x200>)
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	d013      	beq.n	800ea10 <HAL_TIM_PWM_Start+0x148>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	4a37      	ldr	r2, [pc, #220]	@ (800eacc <HAL_TIM_PWM_Start+0x204>)
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	d00e      	beq.n	800ea10 <HAL_TIM_PWM_Start+0x148>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4a36      	ldr	r2, [pc, #216]	@ (800ead0 <HAL_TIM_PWM_Start+0x208>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d009      	beq.n	800ea10 <HAL_TIM_PWM_Start+0x148>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4a34      	ldr	r2, [pc, #208]	@ (800ead4 <HAL_TIM_PWM_Start+0x20c>)
 800ea02:	4293      	cmp	r3, r2
 800ea04:	d004      	beq.n	800ea10 <HAL_TIM_PWM_Start+0x148>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	4a33      	ldr	r2, [pc, #204]	@ (800ead8 <HAL_TIM_PWM_Start+0x210>)
 800ea0c:	4293      	cmp	r3, r2
 800ea0e:	d101      	bne.n	800ea14 <HAL_TIM_PWM_Start+0x14c>
 800ea10:	2301      	movs	r3, #1
 800ea12:	e000      	b.n	800ea16 <HAL_TIM_PWM_Start+0x14e>
 800ea14:	2300      	movs	r3, #0
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d007      	beq.n	800ea2a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ea28:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4a25      	ldr	r2, [pc, #148]	@ (800eac4 <HAL_TIM_PWM_Start+0x1fc>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d022      	beq.n	800ea7a <HAL_TIM_PWM_Start+0x1b2>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ea3c:	d01d      	beq.n	800ea7a <HAL_TIM_PWM_Start+0x1b2>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	4a26      	ldr	r2, [pc, #152]	@ (800eadc <HAL_TIM_PWM_Start+0x214>)
 800ea44:	4293      	cmp	r3, r2
 800ea46:	d018      	beq.n	800ea7a <HAL_TIM_PWM_Start+0x1b2>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	4a24      	ldr	r2, [pc, #144]	@ (800eae0 <HAL_TIM_PWM_Start+0x218>)
 800ea4e:	4293      	cmp	r3, r2
 800ea50:	d013      	beq.n	800ea7a <HAL_TIM_PWM_Start+0x1b2>
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	4a23      	ldr	r2, [pc, #140]	@ (800eae4 <HAL_TIM_PWM_Start+0x21c>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d00e      	beq.n	800ea7a <HAL_TIM_PWM_Start+0x1b2>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	4a19      	ldr	r2, [pc, #100]	@ (800eac8 <HAL_TIM_PWM_Start+0x200>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d009      	beq.n	800ea7a <HAL_TIM_PWM_Start+0x1b2>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	4a18      	ldr	r2, [pc, #96]	@ (800eacc <HAL_TIM_PWM_Start+0x204>)
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d004      	beq.n	800ea7a <HAL_TIM_PWM_Start+0x1b2>
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	4a18      	ldr	r2, [pc, #96]	@ (800ead8 <HAL_TIM_PWM_Start+0x210>)
 800ea76:	4293      	cmp	r3, r2
 800ea78:	d115      	bne.n	800eaa6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	689a      	ldr	r2, [r3, #8]
 800ea80:	4b19      	ldr	r3, [pc, #100]	@ (800eae8 <HAL_TIM_PWM_Start+0x220>)
 800ea82:	4013      	ands	r3, r2
 800ea84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	2b06      	cmp	r3, #6
 800ea8a:	d015      	beq.n	800eab8 <HAL_TIM_PWM_Start+0x1f0>
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ea92:	d011      	beq.n	800eab8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f042 0201 	orr.w	r2, r2, #1
 800eaa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eaa4:	e008      	b.n	800eab8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	681a      	ldr	r2, [r3, #0]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f042 0201 	orr.w	r2, r2, #1
 800eab4:	601a      	str	r2, [r3, #0]
 800eab6:	e000      	b.n	800eaba <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eab8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eaba:	2300      	movs	r3, #0
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3710      	adds	r7, #16
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	40012c00 	.word	0x40012c00
 800eac8:	40013400 	.word	0x40013400
 800eacc:	40014000 	.word	0x40014000
 800ead0:	40014400 	.word	0x40014400
 800ead4:	40014800 	.word	0x40014800
 800ead8:	40015000 	.word	0x40015000
 800eadc:	40000400 	.word	0x40000400
 800eae0:	40000800 	.word	0x40000800
 800eae4:	40000c00 	.word	0x40000c00
 800eae8:	00010007 	.word	0x00010007

0800eaec <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d101      	bne.n	800eb00 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800eafc:	2301      	movs	r3, #1
 800eafe:	e04c      	b.n	800eb9a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d111      	bne.n	800eb30 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f001 fc1f 	bl	8010358 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d102      	bne.n	800eb28 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	4a1f      	ldr	r2, [pc, #124]	@ (800eba4 <HAL_TIM_OnePulse_Init+0xb8>)
 800eb26:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2202      	movs	r2, #2
 800eb34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	3304      	adds	r3, #4
 800eb40:	4619      	mov	r1, r3
 800eb42:	4610      	mov	r0, r2
 800eb44:	f000 ff68 	bl	800fa18 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	681a      	ldr	r2, [r3, #0]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	f022 0208 	bic.w	r2, r2, #8
 800eb56:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	6819      	ldr	r1, [r3, #0]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	683a      	ldr	r2, [r7, #0]
 800eb64:	430a      	orrs	r2, r1
 800eb66:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2201      	movs	r2, #1
 800eb6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2201      	movs	r2, #1
 800eb74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2201      	movs	r2, #1
 800eb7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2201      	movs	r2, #1
 800eb84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2201      	movs	r2, #1
 800eb94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800eb98:	2300      	movs	r3, #0
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3708      	adds	r7, #8
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
 800eba2:	bf00      	nop
 800eba4:	0800eba9 	.word	0x0800eba9

0800eba8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800ebb0:	bf00      	nop
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ebcc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ebd4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ebdc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ebe4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ebe6:	7bfb      	ldrb	r3, [r7, #15]
 800ebe8:	2b01      	cmp	r3, #1
 800ebea:	d108      	bne.n	800ebfe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ebec:	7bbb      	ldrb	r3, [r7, #14]
 800ebee:	2b01      	cmp	r3, #1
 800ebf0:	d105      	bne.n	800ebfe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ebf2:	7b7b      	ldrb	r3, [r7, #13]
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d102      	bne.n	800ebfe <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ebf8:	7b3b      	ldrb	r3, [r7, #12]
 800ebfa:	2b01      	cmp	r3, #1
 800ebfc:	d001      	beq.n	800ec02 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800ebfe:	2301      	movs	r3, #1
 800ec00:	e059      	b.n	800ecb6 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2202      	movs	r2, #2
 800ec06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2202      	movs	r2, #2
 800ec0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2202      	movs	r2, #2
 800ec16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2202      	movs	r2, #2
 800ec1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	68da      	ldr	r2, [r3, #12]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f042 0202 	orr.w	r2, r2, #2
 800ec30:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	68da      	ldr	r2, [r3, #12]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f042 0204 	orr.w	r2, r2, #4
 800ec40:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	2201      	movs	r2, #1
 800ec48:	2100      	movs	r1, #0
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f001 fb5e 	bl	801030c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	2201      	movs	r2, #1
 800ec56:	2104      	movs	r1, #4
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f001 fb57 	bl	801030c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	4a17      	ldr	r2, [pc, #92]	@ (800ecc0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d018      	beq.n	800ec9a <HAL_TIM_OnePulse_Start_IT+0xde>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4a15      	ldr	r2, [pc, #84]	@ (800ecc4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d013      	beq.n	800ec9a <HAL_TIM_OnePulse_Start_IT+0xde>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4a14      	ldr	r2, [pc, #80]	@ (800ecc8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800ec78:	4293      	cmp	r3, r2
 800ec7a:	d00e      	beq.n	800ec9a <HAL_TIM_OnePulse_Start_IT+0xde>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	4a12      	ldr	r2, [pc, #72]	@ (800eccc <HAL_TIM_OnePulse_Start_IT+0x110>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d009      	beq.n	800ec9a <HAL_TIM_OnePulse_Start_IT+0xde>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	4a11      	ldr	r2, [pc, #68]	@ (800ecd0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	d004      	beq.n	800ec9a <HAL_TIM_OnePulse_Start_IT+0xde>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4a0f      	ldr	r2, [pc, #60]	@ (800ecd4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d101      	bne.n	800ec9e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	e000      	b.n	800eca0 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800ec9e:	2300      	movs	r3, #0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d007      	beq.n	800ecb4 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ecb2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800ecb4:	2300      	movs	r3, #0
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3710      	adds	r7, #16
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	40012c00 	.word	0x40012c00
 800ecc4:	40013400 	.word	0x40013400
 800ecc8:	40014000 	.word	0x40014000
 800eccc:	40014400 	.word	0x40014400
 800ecd0:	40014800 	.word	0x40014800
 800ecd4:	40015000 	.word	0x40015000

0800ecd8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b086      	sub	sp, #24
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d101      	bne.n	800ecec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ece8:	2301      	movs	r3, #1
 800ecea:	e0a2      	b.n	800ee32 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d111      	bne.n	800ed1c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f001 fb29 	bl	8010358 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d102      	bne.n	800ed14 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	4a4a      	ldr	r2, [pc, #296]	@ (800ee3c <HAL_TIM_Encoder_Init+0x164>)
 800ed12:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2202      	movs	r2, #2
 800ed20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	687a      	ldr	r2, [r7, #4]
 800ed2c:	6812      	ldr	r2, [r2, #0]
 800ed2e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800ed32:	f023 0307 	bic.w	r3, r3, #7
 800ed36:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681a      	ldr	r2, [r3, #0]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	3304      	adds	r3, #4
 800ed40:	4619      	mov	r1, r3
 800ed42:	4610      	mov	r0, r2
 800ed44:	f000 fe68 	bl	800fa18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	689b      	ldr	r3, [r3, #8]
 800ed4e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	699b      	ldr	r3, [r3, #24]
 800ed56:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	6a1b      	ldr	r3, [r3, #32]
 800ed5e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	697a      	ldr	r2, [r7, #20]
 800ed66:	4313      	orrs	r3, r2
 800ed68:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed70:	f023 0303 	bic.w	r3, r3, #3
 800ed74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	689a      	ldr	r2, [r3, #8]
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	699b      	ldr	r3, [r3, #24]
 800ed7e:	021b      	lsls	r3, r3, #8
 800ed80:	4313      	orrs	r3, r2
 800ed82:	693a      	ldr	r2, [r7, #16]
 800ed84:	4313      	orrs	r3, r2
 800ed86:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800ed8e:	f023 030c 	bic.w	r3, r3, #12
 800ed92:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ed9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ed9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	68da      	ldr	r2, [r3, #12]
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	69db      	ldr	r3, [r3, #28]
 800eda8:	021b      	lsls	r3, r3, #8
 800edaa:	4313      	orrs	r3, r2
 800edac:	693a      	ldr	r2, [r7, #16]
 800edae:	4313      	orrs	r3, r2
 800edb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	691b      	ldr	r3, [r3, #16]
 800edb6:	011a      	lsls	r2, r3, #4
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	6a1b      	ldr	r3, [r3, #32]
 800edbc:	031b      	lsls	r3, r3, #12
 800edbe:	4313      	orrs	r3, r2
 800edc0:	693a      	ldr	r2, [r7, #16]
 800edc2:	4313      	orrs	r3, r2
 800edc4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800edcc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800edd4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	685a      	ldr	r2, [r3, #4]
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	695b      	ldr	r3, [r3, #20]
 800edde:	011b      	lsls	r3, r3, #4
 800ede0:	4313      	orrs	r3, r2
 800ede2:	68fa      	ldr	r2, [r7, #12]
 800ede4:	4313      	orrs	r3, r2
 800ede6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	697a      	ldr	r2, [r7, #20]
 800edee:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	693a      	ldr	r2, [r7, #16]
 800edf6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	68fa      	ldr	r2, [r7, #12]
 800edfe:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2201      	movs	r2, #1
 800ee04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2201      	movs	r2, #1
 800ee14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2201      	movs	r2, #1
 800ee24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ee30:	2300      	movs	r3, #0
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3718      	adds	r7, #24
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	0800a885 	.word	0x0800a885

0800ee40 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ee50:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ee58:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ee60:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ee68:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d110      	bne.n	800ee92 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ee70:	7bfb      	ldrb	r3, [r7, #15]
 800ee72:	2b01      	cmp	r3, #1
 800ee74:	d102      	bne.n	800ee7c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ee76:	7b7b      	ldrb	r3, [r7, #13]
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d001      	beq.n	800ee80 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	e069      	b.n	800ef54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2202      	movs	r2, #2
 800ee84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2202      	movs	r2, #2
 800ee8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ee90:	e031      	b.n	800eef6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	2b04      	cmp	r3, #4
 800ee96:	d110      	bne.n	800eeba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ee98:	7bbb      	ldrb	r3, [r7, #14]
 800ee9a:	2b01      	cmp	r3, #1
 800ee9c:	d102      	bne.n	800eea4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ee9e:	7b3b      	ldrb	r3, [r7, #12]
 800eea0:	2b01      	cmp	r3, #1
 800eea2:	d001      	beq.n	800eea8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800eea4:	2301      	movs	r3, #1
 800eea6:	e055      	b.n	800ef54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2202      	movs	r2, #2
 800eeac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2202      	movs	r2, #2
 800eeb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eeb8:	e01d      	b.n	800eef6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800eeba:	7bfb      	ldrb	r3, [r7, #15]
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d108      	bne.n	800eed2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800eec0:	7bbb      	ldrb	r3, [r7, #14]
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	d105      	bne.n	800eed2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800eec6:	7b7b      	ldrb	r3, [r7, #13]
 800eec8:	2b01      	cmp	r3, #1
 800eeca:	d102      	bne.n	800eed2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800eecc:	7b3b      	ldrb	r3, [r7, #12]
 800eece:	2b01      	cmp	r3, #1
 800eed0:	d001      	beq.n	800eed6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800eed2:	2301      	movs	r3, #1
 800eed4:	e03e      	b.n	800ef54 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	2202      	movs	r2, #2
 800eeda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2202      	movs	r2, #2
 800eee2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2202      	movs	r2, #2
 800eeea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2202      	movs	r2, #2
 800eef2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d003      	beq.n	800ef04 <HAL_TIM_Encoder_Start+0xc4>
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	2b04      	cmp	r3, #4
 800ef00:	d008      	beq.n	800ef14 <HAL_TIM_Encoder_Start+0xd4>
 800ef02:	e00f      	b.n	800ef24 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	2201      	movs	r2, #1
 800ef0a:	2100      	movs	r1, #0
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f001 f9fd 	bl	801030c <TIM_CCxChannelCmd>
      break;
 800ef12:	e016      	b.n	800ef42 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	2201      	movs	r2, #1
 800ef1a:	2104      	movs	r1, #4
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f001 f9f5 	bl	801030c <TIM_CCxChannelCmd>
      break;
 800ef22:	e00e      	b.n	800ef42 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	2201      	movs	r2, #1
 800ef2a:	2100      	movs	r1, #0
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f001 f9ed 	bl	801030c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	2201      	movs	r2, #1
 800ef38:	2104      	movs	r1, #4
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f001 f9e6 	bl	801030c <TIM_CCxChannelCmd>
      break;
 800ef40:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f042 0201 	orr.w	r2, r2, #1
 800ef50:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ef52:	2300      	movs	r3, #0
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3710      	adds	r7, #16
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	68db      	ldr	r3, [r3, #12]
 800ef6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	691b      	ldr	r3, [r3, #16]
 800ef72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	f003 0302 	and.w	r3, r3, #2
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d026      	beq.n	800efcc <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	f003 0302 	and.w	r3, r3, #2
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d021      	beq.n	800efcc <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	f06f 0202 	mvn.w	r2, #2
 800ef90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2201      	movs	r2, #1
 800ef96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	699b      	ldr	r3, [r3, #24]
 800ef9e:	f003 0303 	and.w	r3, r3, #3
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d005      	beq.n	800efb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	4798      	blx	r3
 800efb0:	e009      	b.n	800efc6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2200      	movs	r2, #0
 800efca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	f003 0304 	and.w	r3, r3, #4
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d026      	beq.n	800f024 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	f003 0304 	and.w	r3, r3, #4
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d021      	beq.n	800f024 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f06f 0204 	mvn.w	r2, #4
 800efe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2202      	movs	r2, #2
 800efee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	699b      	ldr	r3, [r3, #24]
 800eff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800effa:	2b00      	cmp	r3, #0
 800effc:	d005      	beq.n	800f00a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	4798      	blx	r3
 800f008:	e009      	b.n	800f01e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	2200      	movs	r2, #0
 800f022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	f003 0308 	and.w	r3, r3, #8
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d026      	beq.n	800f07c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f003 0308 	and.w	r3, r3, #8
 800f034:	2b00      	cmp	r3, #0
 800f036:	d021      	beq.n	800f07c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f06f 0208 	mvn.w	r2, #8
 800f040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2204      	movs	r2, #4
 800f046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	69db      	ldr	r3, [r3, #28]
 800f04e:	f003 0303 	and.w	r3, r3, #3
 800f052:	2b00      	cmp	r3, #0
 800f054:	d005      	beq.n	800f062 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	4798      	blx	r3
 800f060:	e009      	b.n	800f076 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	2200      	movs	r2, #0
 800f07a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	f003 0310 	and.w	r3, r3, #16
 800f082:	2b00      	cmp	r3, #0
 800f084:	d026      	beq.n	800f0d4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	f003 0310 	and.w	r3, r3, #16
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d021      	beq.n	800f0d4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f06f 0210 	mvn.w	r2, #16
 800f098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2208      	movs	r2, #8
 800f09e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	69db      	ldr	r3, [r3, #28]
 800f0a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d005      	beq.n	800f0ba <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	4798      	blx	r3
 800f0b8:	e009      	b.n	800f0ce <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	f003 0301 	and.w	r3, r3, #1
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00e      	beq.n	800f0fc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	f003 0301 	and.w	r3, r3, #1
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d009      	beq.n	800f0fc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f06f 0201 	mvn.w	r2, #1
 800f0f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f102:	2b00      	cmp	r3, #0
 800f104:	d104      	bne.n	800f110 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d00e      	beq.n	800f12e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f116:	2b00      	cmp	r3, #0
 800f118:	d009      	beq.n	800f12e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800f122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f134:	2b00      	cmp	r3, #0
 800f136:	d00e      	beq.n	800f156 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d009      	beq.n	800f156 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800f14a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d00e      	beq.n	800f17e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f166:	2b00      	cmp	r3, #0
 800f168:	d009      	beq.n	800f17e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	f003 0320 	and.w	r3, r3, #32
 800f184:	2b00      	cmp	r3, #0
 800f186:	d00e      	beq.n	800f1a6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	f003 0320 	and.w	r3, r3, #32
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d009      	beq.n	800f1a6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f06f 0220 	mvn.w	r2, #32
 800f19a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d00e      	beq.n	800f1ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d009      	beq.n	800f1ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800f1c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d00e      	beq.n	800f1f6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d009      	beq.n	800f1f6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800f1ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d00e      	beq.n	800f21e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f206:	2b00      	cmp	r3, #0
 800f208:	d009      	beq.n	800f21e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800f212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f21a:	6878      	ldr	r0, [r7, #4]
 800f21c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00e      	beq.n	800f246 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d009      	beq.n	800f246 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800f23a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f246:	bf00      	nop
 800f248:	3710      	adds	r7, #16
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}
	...

0800f250 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b086      	sub	sp, #24
 800f254:	af00      	add	r7, sp, #0
 800f256:	60f8      	str	r0, [r7, #12]
 800f258:	60b9      	str	r1, [r7, #8]
 800f25a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f25c:	2300      	movs	r3, #0
 800f25e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f266:	2b01      	cmp	r3, #1
 800f268:	d101      	bne.n	800f26e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f26a:	2302      	movs	r3, #2
 800f26c:	e0ff      	b.n	800f46e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	2201      	movs	r2, #1
 800f272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2b14      	cmp	r3, #20
 800f27a:	f200 80f0 	bhi.w	800f45e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f27e:	a201      	add	r2, pc, #4	@ (adr r2, 800f284 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f284:	0800f2d9 	.word	0x0800f2d9
 800f288:	0800f45f 	.word	0x0800f45f
 800f28c:	0800f45f 	.word	0x0800f45f
 800f290:	0800f45f 	.word	0x0800f45f
 800f294:	0800f319 	.word	0x0800f319
 800f298:	0800f45f 	.word	0x0800f45f
 800f29c:	0800f45f 	.word	0x0800f45f
 800f2a0:	0800f45f 	.word	0x0800f45f
 800f2a4:	0800f35b 	.word	0x0800f35b
 800f2a8:	0800f45f 	.word	0x0800f45f
 800f2ac:	0800f45f 	.word	0x0800f45f
 800f2b0:	0800f45f 	.word	0x0800f45f
 800f2b4:	0800f39b 	.word	0x0800f39b
 800f2b8:	0800f45f 	.word	0x0800f45f
 800f2bc:	0800f45f 	.word	0x0800f45f
 800f2c0:	0800f45f 	.word	0x0800f45f
 800f2c4:	0800f3dd 	.word	0x0800f3dd
 800f2c8:	0800f45f 	.word	0x0800f45f
 800f2cc:	0800f45f 	.word	0x0800f45f
 800f2d0:	0800f45f 	.word	0x0800f45f
 800f2d4:	0800f41d 	.word	0x0800f41d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	68b9      	ldr	r1, [r7, #8]
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f000 fc4e 	bl	800fb80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	699a      	ldr	r2, [r3, #24]
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f042 0208 	orr.w	r2, r2, #8
 800f2f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	699a      	ldr	r2, [r3, #24]
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f022 0204 	bic.w	r2, r2, #4
 800f302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	6999      	ldr	r1, [r3, #24]
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	691a      	ldr	r2, [r3, #16]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	430a      	orrs	r2, r1
 800f314:	619a      	str	r2, [r3, #24]
      break;
 800f316:	e0a5      	b.n	800f464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	68b9      	ldr	r1, [r7, #8]
 800f31e:	4618      	mov	r0, r3
 800f320:	f000 fcc8 	bl	800fcb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	699a      	ldr	r2, [r3, #24]
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	699a      	ldr	r2, [r3, #24]
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	6999      	ldr	r1, [r3, #24]
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	691b      	ldr	r3, [r3, #16]
 800f34e:	021a      	lsls	r2, r3, #8
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	430a      	orrs	r2, r1
 800f356:	619a      	str	r2, [r3, #24]
      break;
 800f358:	e084      	b.n	800f464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	68b9      	ldr	r1, [r7, #8]
 800f360:	4618      	mov	r0, r3
 800f362:	f000 fd3b 	bl	800fddc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	69da      	ldr	r2, [r3, #28]
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f042 0208 	orr.w	r2, r2, #8
 800f374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	69da      	ldr	r2, [r3, #28]
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f022 0204 	bic.w	r2, r2, #4
 800f384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	69d9      	ldr	r1, [r3, #28]
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	691a      	ldr	r2, [r3, #16]
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	430a      	orrs	r2, r1
 800f396:	61da      	str	r2, [r3, #28]
      break;
 800f398:	e064      	b.n	800f464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	68b9      	ldr	r1, [r7, #8]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f000 fdad 	bl	800ff00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	69da      	ldr	r2, [r3, #28]
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f3b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	69da      	ldr	r2, [r3, #28]
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f3c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	69d9      	ldr	r1, [r3, #28]
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	691b      	ldr	r3, [r3, #16]
 800f3d0:	021a      	lsls	r2, r3, #8
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	430a      	orrs	r2, r1
 800f3d8:	61da      	str	r2, [r3, #28]
      break;
 800f3da:	e043      	b.n	800f464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	68b9      	ldr	r1, [r7, #8]
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f000 fe20 	bl	8010028 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f042 0208 	orr.w	r2, r2, #8
 800f3f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	f022 0204 	bic.w	r2, r2, #4
 800f406:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	691a      	ldr	r2, [r3, #16]
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	430a      	orrs	r2, r1
 800f418:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f41a:	e023      	b.n	800f464 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	68b9      	ldr	r1, [r7, #8]
 800f422:	4618      	mov	r0, r3
 800f424:	f000 fe6a 	bl	80100fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f436:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f446:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f44e:	68bb      	ldr	r3, [r7, #8]
 800f450:	691b      	ldr	r3, [r3, #16]
 800f452:	021a      	lsls	r2, r3, #8
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	430a      	orrs	r2, r1
 800f45a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f45c:	e002      	b.n	800f464 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f45e:	2301      	movs	r3, #1
 800f460:	75fb      	strb	r3, [r7, #23]
      break;
 800f462:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	2200      	movs	r2, #0
 800f468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f46c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3718      	adds	r7, #24
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop

0800f478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b084      	sub	sp, #16
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f482:	2300      	movs	r3, #0
 800f484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d101      	bne.n	800f494 <HAL_TIM_ConfigClockSource+0x1c>
 800f490:	2302      	movs	r3, #2
 800f492:	e0f6      	b.n	800f682 <HAL_TIM_ConfigClockSource+0x20a>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2201      	movs	r2, #1
 800f498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2202      	movs	r2, #2
 800f4a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	689b      	ldr	r3, [r3, #8]
 800f4aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f4b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f4b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f4be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	68ba      	ldr	r2, [r7, #8]
 800f4c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	4a6f      	ldr	r2, [pc, #444]	@ (800f68c <HAL_TIM_ConfigClockSource+0x214>)
 800f4ce:	4293      	cmp	r3, r2
 800f4d0:	f000 80c1 	beq.w	800f656 <HAL_TIM_ConfigClockSource+0x1de>
 800f4d4:	4a6d      	ldr	r2, [pc, #436]	@ (800f68c <HAL_TIM_ConfigClockSource+0x214>)
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	f200 80c6 	bhi.w	800f668 <HAL_TIM_ConfigClockSource+0x1f0>
 800f4dc:	4a6c      	ldr	r2, [pc, #432]	@ (800f690 <HAL_TIM_ConfigClockSource+0x218>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	f000 80b9 	beq.w	800f656 <HAL_TIM_ConfigClockSource+0x1de>
 800f4e4:	4a6a      	ldr	r2, [pc, #424]	@ (800f690 <HAL_TIM_ConfigClockSource+0x218>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	f200 80be 	bhi.w	800f668 <HAL_TIM_ConfigClockSource+0x1f0>
 800f4ec:	4a69      	ldr	r2, [pc, #420]	@ (800f694 <HAL_TIM_ConfigClockSource+0x21c>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	f000 80b1 	beq.w	800f656 <HAL_TIM_ConfigClockSource+0x1de>
 800f4f4:	4a67      	ldr	r2, [pc, #412]	@ (800f694 <HAL_TIM_ConfigClockSource+0x21c>)
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	f200 80b6 	bhi.w	800f668 <HAL_TIM_ConfigClockSource+0x1f0>
 800f4fc:	4a66      	ldr	r2, [pc, #408]	@ (800f698 <HAL_TIM_ConfigClockSource+0x220>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	f000 80a9 	beq.w	800f656 <HAL_TIM_ConfigClockSource+0x1de>
 800f504:	4a64      	ldr	r2, [pc, #400]	@ (800f698 <HAL_TIM_ConfigClockSource+0x220>)
 800f506:	4293      	cmp	r3, r2
 800f508:	f200 80ae 	bhi.w	800f668 <HAL_TIM_ConfigClockSource+0x1f0>
 800f50c:	4a63      	ldr	r2, [pc, #396]	@ (800f69c <HAL_TIM_ConfigClockSource+0x224>)
 800f50e:	4293      	cmp	r3, r2
 800f510:	f000 80a1 	beq.w	800f656 <HAL_TIM_ConfigClockSource+0x1de>
 800f514:	4a61      	ldr	r2, [pc, #388]	@ (800f69c <HAL_TIM_ConfigClockSource+0x224>)
 800f516:	4293      	cmp	r3, r2
 800f518:	f200 80a6 	bhi.w	800f668 <HAL_TIM_ConfigClockSource+0x1f0>
 800f51c:	4a60      	ldr	r2, [pc, #384]	@ (800f6a0 <HAL_TIM_ConfigClockSource+0x228>)
 800f51e:	4293      	cmp	r3, r2
 800f520:	f000 8099 	beq.w	800f656 <HAL_TIM_ConfigClockSource+0x1de>
 800f524:	4a5e      	ldr	r2, [pc, #376]	@ (800f6a0 <HAL_TIM_ConfigClockSource+0x228>)
 800f526:	4293      	cmp	r3, r2
 800f528:	f200 809e 	bhi.w	800f668 <HAL_TIM_ConfigClockSource+0x1f0>
 800f52c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f530:	f000 8091 	beq.w	800f656 <HAL_TIM_ConfigClockSource+0x1de>
 800f534:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f538:	f200 8096 	bhi.w	800f668 <HAL_TIM_ConfigClockSource+0x1f0>
 800f53c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f540:	f000 8089 	beq.w	800f656 <HAL_TIM_ConfigClockSource+0x1de>
 800f544:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f548:	f200 808e 	bhi.w	800f668 <HAL_TIM_ConfigClockSource+0x1f0>
 800f54c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f550:	d03e      	beq.n	800f5d0 <HAL_TIM_ConfigClockSource+0x158>
 800f552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f556:	f200 8087 	bhi.w	800f668 <HAL_TIM_ConfigClockSource+0x1f0>
 800f55a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f55e:	f000 8086 	beq.w	800f66e <HAL_TIM_ConfigClockSource+0x1f6>
 800f562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f566:	d87f      	bhi.n	800f668 <HAL_TIM_ConfigClockSource+0x1f0>
 800f568:	2b70      	cmp	r3, #112	@ 0x70
 800f56a:	d01a      	beq.n	800f5a2 <HAL_TIM_ConfigClockSource+0x12a>
 800f56c:	2b70      	cmp	r3, #112	@ 0x70
 800f56e:	d87b      	bhi.n	800f668 <HAL_TIM_ConfigClockSource+0x1f0>
 800f570:	2b60      	cmp	r3, #96	@ 0x60
 800f572:	d050      	beq.n	800f616 <HAL_TIM_ConfigClockSource+0x19e>
 800f574:	2b60      	cmp	r3, #96	@ 0x60
 800f576:	d877      	bhi.n	800f668 <HAL_TIM_ConfigClockSource+0x1f0>
 800f578:	2b50      	cmp	r3, #80	@ 0x50
 800f57a:	d03c      	beq.n	800f5f6 <HAL_TIM_ConfigClockSource+0x17e>
 800f57c:	2b50      	cmp	r3, #80	@ 0x50
 800f57e:	d873      	bhi.n	800f668 <HAL_TIM_ConfigClockSource+0x1f0>
 800f580:	2b40      	cmp	r3, #64	@ 0x40
 800f582:	d058      	beq.n	800f636 <HAL_TIM_ConfigClockSource+0x1be>
 800f584:	2b40      	cmp	r3, #64	@ 0x40
 800f586:	d86f      	bhi.n	800f668 <HAL_TIM_ConfigClockSource+0x1f0>
 800f588:	2b30      	cmp	r3, #48	@ 0x30
 800f58a:	d064      	beq.n	800f656 <HAL_TIM_ConfigClockSource+0x1de>
 800f58c:	2b30      	cmp	r3, #48	@ 0x30
 800f58e:	d86b      	bhi.n	800f668 <HAL_TIM_ConfigClockSource+0x1f0>
 800f590:	2b20      	cmp	r3, #32
 800f592:	d060      	beq.n	800f656 <HAL_TIM_ConfigClockSource+0x1de>
 800f594:	2b20      	cmp	r3, #32
 800f596:	d867      	bhi.n	800f668 <HAL_TIM_ConfigClockSource+0x1f0>
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d05c      	beq.n	800f656 <HAL_TIM_ConfigClockSource+0x1de>
 800f59c:	2b10      	cmp	r3, #16
 800f59e:	d05a      	beq.n	800f656 <HAL_TIM_ConfigClockSource+0x1de>
 800f5a0:	e062      	b.n	800f668 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f5b2:	f000 fe8b 	bl	80102cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	689b      	ldr	r3, [r3, #8]
 800f5bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f5c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	68ba      	ldr	r2, [r7, #8]
 800f5cc:	609a      	str	r2, [r3, #8]
      break;
 800f5ce:	e04f      	b.n	800f670 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f5e0:	f000 fe74 	bl	80102cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	689a      	ldr	r2, [r3, #8]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f5f2:	609a      	str	r2, [r3, #8]
      break;
 800f5f4:	e03c      	b.n	800f670 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f602:	461a      	mov	r2, r3
 800f604:	f000 fde6 	bl	80101d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	2150      	movs	r1, #80	@ 0x50
 800f60e:	4618      	mov	r0, r3
 800f610:	f000 fe3f 	bl	8010292 <TIM_ITRx_SetConfig>
      break;
 800f614:	e02c      	b.n	800f670 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f622:	461a      	mov	r2, r3
 800f624:	f000 fe05 	bl	8010232 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	2160      	movs	r1, #96	@ 0x60
 800f62e:	4618      	mov	r0, r3
 800f630:	f000 fe2f 	bl	8010292 <TIM_ITRx_SetConfig>
      break;
 800f634:	e01c      	b.n	800f670 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f642:	461a      	mov	r2, r3
 800f644:	f000 fdc6 	bl	80101d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	2140      	movs	r1, #64	@ 0x40
 800f64e:	4618      	mov	r0, r3
 800f650:	f000 fe1f 	bl	8010292 <TIM_ITRx_SetConfig>
      break;
 800f654:	e00c      	b.n	800f670 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681a      	ldr	r2, [r3, #0]
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	4619      	mov	r1, r3
 800f660:	4610      	mov	r0, r2
 800f662:	f000 fe16 	bl	8010292 <TIM_ITRx_SetConfig>
      break;
 800f666:	e003      	b.n	800f670 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800f668:	2301      	movs	r3, #1
 800f66a:	73fb      	strb	r3, [r7, #15]
      break;
 800f66c:	e000      	b.n	800f670 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800f66e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2201      	movs	r2, #1
 800f674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2200      	movs	r2, #0
 800f67c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f680:	7bfb      	ldrb	r3, [r7, #15]
}
 800f682:	4618      	mov	r0, r3
 800f684:	3710      	adds	r7, #16
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	00100070 	.word	0x00100070
 800f690:	00100060 	.word	0x00100060
 800f694:	00100050 	.word	0x00100050
 800f698:	00100040 	.word	0x00100040
 800f69c:	00100030 	.word	0x00100030
 800f6a0:	00100020 	.word	0x00100020

0800f6a4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f6a4:	b480      	push	{r7}
 800f6a6:	b083      	sub	sp, #12
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800f6ac:	bf00      	nop
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr

0800f6b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b083      	sub	sp, #12
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f6c0:	bf00      	nop
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b083      	sub	sp, #12
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f6d4:	bf00      	nop
 800f6d6:	370c      	adds	r7, #12
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr

0800f6e0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b083      	sub	sp, #12
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800f6e8:	bf00      	nop
 800f6ea:	370c      	adds	r7, #12
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr

0800f6f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b083      	sub	sp, #12
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f6fc:	bf00      	nop
 800f6fe:	370c      	adds	r7, #12
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr

0800f708 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f708:	b480      	push	{r7}
 800f70a:	b083      	sub	sp, #12
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800f710:	bf00      	nop
 800f712:	370c      	adds	r7, #12
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b083      	sub	sp, #12
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f724:	bf00      	nop
 800f726:	370c      	adds	r7, #12
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f730:	b480      	push	{r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800f738:	bf00      	nop
 800f73a:	370c      	adds	r7, #12
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr

0800f744 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800f744:	b480      	push	{r7}
 800f746:	b083      	sub	sp, #12
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800f74c:	bf00      	nop
 800f74e:	370c      	adds	r7, #12
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr

0800f758 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800f758:	b480      	push	{r7}
 800f75a:	b087      	sub	sp, #28
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	460b      	mov	r3, r1
 800f762:	607a      	str	r2, [r7, #4]
 800f764:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800f766:	2300      	movs	r3, #0
 800f768:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d101      	bne.n	800f774 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800f770:	2301      	movs	r3, #1
 800f772:	e14a      	b.n	800fa0a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f77a:	b2db      	uxtb	r3, r3
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	f040 80dd 	bne.w	800f93c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800f782:	7afb      	ldrb	r3, [r7, #11]
 800f784:	2b1f      	cmp	r3, #31
 800f786:	f200 80d6 	bhi.w	800f936 <HAL_TIM_RegisterCallback+0x1de>
 800f78a:	a201      	add	r2, pc, #4	@ (adr r2, 800f790 <HAL_TIM_RegisterCallback+0x38>)
 800f78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f790:	0800f811 	.word	0x0800f811
 800f794:	0800f819 	.word	0x0800f819
 800f798:	0800f821 	.word	0x0800f821
 800f79c:	0800f829 	.word	0x0800f829
 800f7a0:	0800f831 	.word	0x0800f831
 800f7a4:	0800f839 	.word	0x0800f839
 800f7a8:	0800f841 	.word	0x0800f841
 800f7ac:	0800f849 	.word	0x0800f849
 800f7b0:	0800f851 	.word	0x0800f851
 800f7b4:	0800f859 	.word	0x0800f859
 800f7b8:	0800f861 	.word	0x0800f861
 800f7bc:	0800f869 	.word	0x0800f869
 800f7c0:	0800f871 	.word	0x0800f871
 800f7c4:	0800f879 	.word	0x0800f879
 800f7c8:	0800f883 	.word	0x0800f883
 800f7cc:	0800f88d 	.word	0x0800f88d
 800f7d0:	0800f897 	.word	0x0800f897
 800f7d4:	0800f8a1 	.word	0x0800f8a1
 800f7d8:	0800f8ab 	.word	0x0800f8ab
 800f7dc:	0800f8b5 	.word	0x0800f8b5
 800f7e0:	0800f8bf 	.word	0x0800f8bf
 800f7e4:	0800f8c9 	.word	0x0800f8c9
 800f7e8:	0800f8d3 	.word	0x0800f8d3
 800f7ec:	0800f8dd 	.word	0x0800f8dd
 800f7f0:	0800f8e7 	.word	0x0800f8e7
 800f7f4:	0800f8f1 	.word	0x0800f8f1
 800f7f8:	0800f8fb 	.word	0x0800f8fb
 800f7fc:	0800f905 	.word	0x0800f905
 800f800:	0800f90f 	.word	0x0800f90f
 800f804:	0800f919 	.word	0x0800f919
 800f808:	0800f923 	.word	0x0800f923
 800f80c:	0800f92d 	.word	0x0800f92d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	687a      	ldr	r2, [r7, #4]
 800f814:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800f816:	e0f7      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800f81e:	e0f3      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	687a      	ldr	r2, [r7, #4]
 800f824:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800f826:	e0ef      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	687a      	ldr	r2, [r7, #4]
 800f82c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800f82e:	e0eb      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	687a      	ldr	r2, [r7, #4]
 800f834:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800f836:	e0e7      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	687a      	ldr	r2, [r7, #4]
 800f83c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800f83e:	e0e3      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800f846:	e0df      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	687a      	ldr	r2, [r7, #4]
 800f84c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800f84e:	e0db      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	687a      	ldr	r2, [r7, #4]
 800f854:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800f856:	e0d7      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	687a      	ldr	r2, [r7, #4]
 800f85c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800f85e:	e0d3      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	687a      	ldr	r2, [r7, #4]
 800f864:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800f866:	e0cf      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800f86e:	e0cb      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800f876:	e0c7      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800f880:	e0c2      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	687a      	ldr	r2, [r7, #4]
 800f886:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800f88a:	e0bd      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	687a      	ldr	r2, [r7, #4]
 800f890:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800f894:	e0b8      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	687a      	ldr	r2, [r7, #4]
 800f89a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800f89e:	e0b3      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	687a      	ldr	r2, [r7, #4]
 800f8a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800f8a8:	e0ae      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800f8b2:	e0a9      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	687a      	ldr	r2, [r7, #4]
 800f8b8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800f8bc:	e0a4      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	687a      	ldr	r2, [r7, #4]
 800f8c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800f8c6:	e09f      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	687a      	ldr	r2, [r7, #4]
 800f8cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800f8d0:	e09a      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	687a      	ldr	r2, [r7, #4]
 800f8d6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800f8da:	e095      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	687a      	ldr	r2, [r7, #4]
 800f8e0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800f8e4:	e090      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	687a      	ldr	r2, [r7, #4]
 800f8ea:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800f8ee:	e08b      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	687a      	ldr	r2, [r7, #4]
 800f8f4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800f8f8:	e086      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	687a      	ldr	r2, [r7, #4]
 800f8fe:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800f902:	e081      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	687a      	ldr	r2, [r7, #4]
 800f908:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800f90c:	e07c      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800f916:	e077      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	687a      	ldr	r2, [r7, #4]
 800f91c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800f920:	e072      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	687a      	ldr	r2, [r7, #4]
 800f926:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800f92a:	e06d      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	687a      	ldr	r2, [r7, #4]
 800f930:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800f934:	e068      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800f936:	2301      	movs	r3, #1
 800f938:	75fb      	strb	r3, [r7, #23]
        break;
 800f93a:	e065      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f942:	b2db      	uxtb	r3, r3
 800f944:	2b00      	cmp	r3, #0
 800f946:	d15d      	bne.n	800fa04 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800f948:	7afb      	ldrb	r3, [r7, #11]
 800f94a:	2b0d      	cmp	r3, #13
 800f94c:	d857      	bhi.n	800f9fe <HAL_TIM_RegisterCallback+0x2a6>
 800f94e:	a201      	add	r2, pc, #4	@ (adr r2, 800f954 <HAL_TIM_RegisterCallback+0x1fc>)
 800f950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f954:	0800f98d 	.word	0x0800f98d
 800f958:	0800f995 	.word	0x0800f995
 800f95c:	0800f99d 	.word	0x0800f99d
 800f960:	0800f9a5 	.word	0x0800f9a5
 800f964:	0800f9ad 	.word	0x0800f9ad
 800f968:	0800f9b5 	.word	0x0800f9b5
 800f96c:	0800f9bd 	.word	0x0800f9bd
 800f970:	0800f9c5 	.word	0x0800f9c5
 800f974:	0800f9cd 	.word	0x0800f9cd
 800f978:	0800f9d5 	.word	0x0800f9d5
 800f97c:	0800f9dd 	.word	0x0800f9dd
 800f980:	0800f9e5 	.word	0x0800f9e5
 800f984:	0800f9ed 	.word	0x0800f9ed
 800f988:	0800f9f5 	.word	0x0800f9f5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800f992:	e039      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	687a      	ldr	r2, [r7, #4]
 800f998:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800f99a:	e035      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	687a      	ldr	r2, [r7, #4]
 800f9a0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800f9a2:	e031      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	687a      	ldr	r2, [r7, #4]
 800f9a8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800f9aa:	e02d      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800f9b2:	e029      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	687a      	ldr	r2, [r7, #4]
 800f9b8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800f9ba:	e025      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	687a      	ldr	r2, [r7, #4]
 800f9c0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800f9c2:	e021      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	687a      	ldr	r2, [r7, #4]
 800f9c8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800f9ca:	e01d      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	687a      	ldr	r2, [r7, #4]
 800f9d0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800f9d2:	e019      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	687a      	ldr	r2, [r7, #4]
 800f9d8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800f9da:	e015      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	687a      	ldr	r2, [r7, #4]
 800f9e0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800f9e2:	e011      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	687a      	ldr	r2, [r7, #4]
 800f9e8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800f9ea:	e00d      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	687a      	ldr	r2, [r7, #4]
 800f9f0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800f9f2:	e009      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	687a      	ldr	r2, [r7, #4]
 800f9f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800f9fc:	e004      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800f9fe:	2301      	movs	r3, #1
 800fa00:	75fb      	strb	r3, [r7, #23]
        break;
 800fa02:	e001      	b.n	800fa08 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800fa04:	2301      	movs	r3, #1
 800fa06:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800fa08:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	371c      	adds	r7, #28
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa14:	4770      	bx	lr
 800fa16:	bf00      	nop

0800fa18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fa18:	b480      	push	{r7}
 800fa1a:	b085      	sub	sp, #20
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	4a4c      	ldr	r2, [pc, #304]	@ (800fb5c <TIM_Base_SetConfig+0x144>)
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	d017      	beq.n	800fa60 <TIM_Base_SetConfig+0x48>
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa36:	d013      	beq.n	800fa60 <TIM_Base_SetConfig+0x48>
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	4a49      	ldr	r2, [pc, #292]	@ (800fb60 <TIM_Base_SetConfig+0x148>)
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	d00f      	beq.n	800fa60 <TIM_Base_SetConfig+0x48>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	4a48      	ldr	r2, [pc, #288]	@ (800fb64 <TIM_Base_SetConfig+0x14c>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d00b      	beq.n	800fa60 <TIM_Base_SetConfig+0x48>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	4a47      	ldr	r2, [pc, #284]	@ (800fb68 <TIM_Base_SetConfig+0x150>)
 800fa4c:	4293      	cmp	r3, r2
 800fa4e:	d007      	beq.n	800fa60 <TIM_Base_SetConfig+0x48>
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	4a46      	ldr	r2, [pc, #280]	@ (800fb6c <TIM_Base_SetConfig+0x154>)
 800fa54:	4293      	cmp	r3, r2
 800fa56:	d003      	beq.n	800fa60 <TIM_Base_SetConfig+0x48>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	4a45      	ldr	r2, [pc, #276]	@ (800fb70 <TIM_Base_SetConfig+0x158>)
 800fa5c:	4293      	cmp	r3, r2
 800fa5e:	d108      	bne.n	800fa72 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	68fa      	ldr	r2, [r7, #12]
 800fa6e:	4313      	orrs	r3, r2
 800fa70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	4a39      	ldr	r2, [pc, #228]	@ (800fb5c <TIM_Base_SetConfig+0x144>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d023      	beq.n	800fac2 <TIM_Base_SetConfig+0xaa>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa80:	d01f      	beq.n	800fac2 <TIM_Base_SetConfig+0xaa>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	4a36      	ldr	r2, [pc, #216]	@ (800fb60 <TIM_Base_SetConfig+0x148>)
 800fa86:	4293      	cmp	r3, r2
 800fa88:	d01b      	beq.n	800fac2 <TIM_Base_SetConfig+0xaa>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	4a35      	ldr	r2, [pc, #212]	@ (800fb64 <TIM_Base_SetConfig+0x14c>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d017      	beq.n	800fac2 <TIM_Base_SetConfig+0xaa>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	4a34      	ldr	r2, [pc, #208]	@ (800fb68 <TIM_Base_SetConfig+0x150>)
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d013      	beq.n	800fac2 <TIM_Base_SetConfig+0xaa>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	4a33      	ldr	r2, [pc, #204]	@ (800fb6c <TIM_Base_SetConfig+0x154>)
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d00f      	beq.n	800fac2 <TIM_Base_SetConfig+0xaa>
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	4a33      	ldr	r2, [pc, #204]	@ (800fb74 <TIM_Base_SetConfig+0x15c>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d00b      	beq.n	800fac2 <TIM_Base_SetConfig+0xaa>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4a32      	ldr	r2, [pc, #200]	@ (800fb78 <TIM_Base_SetConfig+0x160>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	d007      	beq.n	800fac2 <TIM_Base_SetConfig+0xaa>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	4a31      	ldr	r2, [pc, #196]	@ (800fb7c <TIM_Base_SetConfig+0x164>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d003      	beq.n	800fac2 <TIM_Base_SetConfig+0xaa>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	4a2c      	ldr	r2, [pc, #176]	@ (800fb70 <TIM_Base_SetConfig+0x158>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d108      	bne.n	800fad4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	68db      	ldr	r3, [r3, #12]
 800face:	68fa      	ldr	r2, [r7, #12]
 800fad0:	4313      	orrs	r3, r2
 800fad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	695b      	ldr	r3, [r3, #20]
 800fade:	4313      	orrs	r3, r2
 800fae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	68fa      	ldr	r2, [r7, #12]
 800fae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	689a      	ldr	r2, [r3, #8]
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	681a      	ldr	r2, [r3, #0]
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	4a18      	ldr	r2, [pc, #96]	@ (800fb5c <TIM_Base_SetConfig+0x144>)
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d013      	beq.n	800fb28 <TIM_Base_SetConfig+0x110>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	4a1a      	ldr	r2, [pc, #104]	@ (800fb6c <TIM_Base_SetConfig+0x154>)
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d00f      	beq.n	800fb28 <TIM_Base_SetConfig+0x110>
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	4a1a      	ldr	r2, [pc, #104]	@ (800fb74 <TIM_Base_SetConfig+0x15c>)
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	d00b      	beq.n	800fb28 <TIM_Base_SetConfig+0x110>
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	4a19      	ldr	r2, [pc, #100]	@ (800fb78 <TIM_Base_SetConfig+0x160>)
 800fb14:	4293      	cmp	r3, r2
 800fb16:	d007      	beq.n	800fb28 <TIM_Base_SetConfig+0x110>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	4a18      	ldr	r2, [pc, #96]	@ (800fb7c <TIM_Base_SetConfig+0x164>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d003      	beq.n	800fb28 <TIM_Base_SetConfig+0x110>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	4a13      	ldr	r2, [pc, #76]	@ (800fb70 <TIM_Base_SetConfig+0x158>)
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d103      	bne.n	800fb30 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	691a      	ldr	r2, [r3, #16]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	2201      	movs	r2, #1
 800fb34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	691b      	ldr	r3, [r3, #16]
 800fb3a:	f003 0301 	and.w	r3, r3, #1
 800fb3e:	2b01      	cmp	r3, #1
 800fb40:	d105      	bne.n	800fb4e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	691b      	ldr	r3, [r3, #16]
 800fb46:	f023 0201 	bic.w	r2, r3, #1
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	611a      	str	r2, [r3, #16]
  }
}
 800fb4e:	bf00      	nop
 800fb50:	3714      	adds	r7, #20
 800fb52:	46bd      	mov	sp, r7
 800fb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb58:	4770      	bx	lr
 800fb5a:	bf00      	nop
 800fb5c:	40012c00 	.word	0x40012c00
 800fb60:	40000400 	.word	0x40000400
 800fb64:	40000800 	.word	0x40000800
 800fb68:	40000c00 	.word	0x40000c00
 800fb6c:	40013400 	.word	0x40013400
 800fb70:	40015000 	.word	0x40015000
 800fb74:	40014000 	.word	0x40014000
 800fb78:	40014400 	.word	0x40014400
 800fb7c:	40014800 	.word	0x40014800

0800fb80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b087      	sub	sp, #28
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6a1b      	ldr	r3, [r3, #32]
 800fb8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6a1b      	ldr	r3, [r3, #32]
 800fb94:	f023 0201 	bic.w	r2, r3, #1
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	699b      	ldr	r3, [r3, #24]
 800fba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fbae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fbb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f023 0303 	bic.w	r3, r3, #3
 800fbba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	68fa      	ldr	r2, [r7, #12]
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fbc6:	697b      	ldr	r3, [r7, #20]
 800fbc8:	f023 0302 	bic.w	r3, r3, #2
 800fbcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	689b      	ldr	r3, [r3, #8]
 800fbd2:	697a      	ldr	r2, [r7, #20]
 800fbd4:	4313      	orrs	r3, r2
 800fbd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	4a30      	ldr	r2, [pc, #192]	@ (800fc9c <TIM_OC1_SetConfig+0x11c>)
 800fbdc:	4293      	cmp	r3, r2
 800fbde:	d013      	beq.n	800fc08 <TIM_OC1_SetConfig+0x88>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	4a2f      	ldr	r2, [pc, #188]	@ (800fca0 <TIM_OC1_SetConfig+0x120>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d00f      	beq.n	800fc08 <TIM_OC1_SetConfig+0x88>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	4a2e      	ldr	r2, [pc, #184]	@ (800fca4 <TIM_OC1_SetConfig+0x124>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d00b      	beq.n	800fc08 <TIM_OC1_SetConfig+0x88>
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	4a2d      	ldr	r2, [pc, #180]	@ (800fca8 <TIM_OC1_SetConfig+0x128>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d007      	beq.n	800fc08 <TIM_OC1_SetConfig+0x88>
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	4a2c      	ldr	r2, [pc, #176]	@ (800fcac <TIM_OC1_SetConfig+0x12c>)
 800fbfc:	4293      	cmp	r3, r2
 800fbfe:	d003      	beq.n	800fc08 <TIM_OC1_SetConfig+0x88>
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	4a2b      	ldr	r2, [pc, #172]	@ (800fcb0 <TIM_OC1_SetConfig+0x130>)
 800fc04:	4293      	cmp	r3, r2
 800fc06:	d10c      	bne.n	800fc22 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	f023 0308 	bic.w	r3, r3, #8
 800fc0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	68db      	ldr	r3, [r3, #12]
 800fc14:	697a      	ldr	r2, [r7, #20]
 800fc16:	4313      	orrs	r3, r2
 800fc18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	f023 0304 	bic.w	r3, r3, #4
 800fc20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	4a1d      	ldr	r2, [pc, #116]	@ (800fc9c <TIM_OC1_SetConfig+0x11c>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d013      	beq.n	800fc52 <TIM_OC1_SetConfig+0xd2>
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	4a1c      	ldr	r2, [pc, #112]	@ (800fca0 <TIM_OC1_SetConfig+0x120>)
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d00f      	beq.n	800fc52 <TIM_OC1_SetConfig+0xd2>
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	4a1b      	ldr	r2, [pc, #108]	@ (800fca4 <TIM_OC1_SetConfig+0x124>)
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d00b      	beq.n	800fc52 <TIM_OC1_SetConfig+0xd2>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	4a1a      	ldr	r2, [pc, #104]	@ (800fca8 <TIM_OC1_SetConfig+0x128>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d007      	beq.n	800fc52 <TIM_OC1_SetConfig+0xd2>
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	4a19      	ldr	r2, [pc, #100]	@ (800fcac <TIM_OC1_SetConfig+0x12c>)
 800fc46:	4293      	cmp	r3, r2
 800fc48:	d003      	beq.n	800fc52 <TIM_OC1_SetConfig+0xd2>
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	4a18      	ldr	r2, [pc, #96]	@ (800fcb0 <TIM_OC1_SetConfig+0x130>)
 800fc4e:	4293      	cmp	r3, r2
 800fc50:	d111      	bne.n	800fc76 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fc58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fc60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	695b      	ldr	r3, [r3, #20]
 800fc66:	693a      	ldr	r2, [r7, #16]
 800fc68:	4313      	orrs	r3, r2
 800fc6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fc6c:	683b      	ldr	r3, [r7, #0]
 800fc6e:	699b      	ldr	r3, [r3, #24]
 800fc70:	693a      	ldr	r2, [r7, #16]
 800fc72:	4313      	orrs	r3, r2
 800fc74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	693a      	ldr	r2, [r7, #16]
 800fc7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	68fa      	ldr	r2, [r7, #12]
 800fc80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	685a      	ldr	r2, [r3, #4]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	697a      	ldr	r2, [r7, #20]
 800fc8e:	621a      	str	r2, [r3, #32]
}
 800fc90:	bf00      	nop
 800fc92:	371c      	adds	r7, #28
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr
 800fc9c:	40012c00 	.word	0x40012c00
 800fca0:	40013400 	.word	0x40013400
 800fca4:	40014000 	.word	0x40014000
 800fca8:	40014400 	.word	0x40014400
 800fcac:	40014800 	.word	0x40014800
 800fcb0:	40015000 	.word	0x40015000

0800fcb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b087      	sub	sp, #28
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
 800fcbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6a1b      	ldr	r3, [r3, #32]
 800fcc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6a1b      	ldr	r3, [r3, #32]
 800fcc8:	f023 0210 	bic.w	r2, r3, #16
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	685b      	ldr	r3, [r3, #4]
 800fcd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	699b      	ldr	r3, [r3, #24]
 800fcda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fcee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	021b      	lsls	r3, r3, #8
 800fcf6:	68fa      	ldr	r2, [r7, #12]
 800fcf8:	4313      	orrs	r3, r2
 800fcfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	f023 0320 	bic.w	r3, r3, #32
 800fd02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	689b      	ldr	r3, [r3, #8]
 800fd08:	011b      	lsls	r3, r3, #4
 800fd0a:	697a      	ldr	r2, [r7, #20]
 800fd0c:	4313      	orrs	r3, r2
 800fd0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4a2c      	ldr	r2, [pc, #176]	@ (800fdc4 <TIM_OC2_SetConfig+0x110>)
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d007      	beq.n	800fd28 <TIM_OC2_SetConfig+0x74>
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	4a2b      	ldr	r2, [pc, #172]	@ (800fdc8 <TIM_OC2_SetConfig+0x114>)
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d003      	beq.n	800fd28 <TIM_OC2_SetConfig+0x74>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	4a2a      	ldr	r2, [pc, #168]	@ (800fdcc <TIM_OC2_SetConfig+0x118>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d10d      	bne.n	800fd44 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fd2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	68db      	ldr	r3, [r3, #12]
 800fd34:	011b      	lsls	r3, r3, #4
 800fd36:	697a      	ldr	r2, [r7, #20]
 800fd38:	4313      	orrs	r3, r2
 800fd3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	4a1f      	ldr	r2, [pc, #124]	@ (800fdc4 <TIM_OC2_SetConfig+0x110>)
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d013      	beq.n	800fd74 <TIM_OC2_SetConfig+0xc0>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	4a1e      	ldr	r2, [pc, #120]	@ (800fdc8 <TIM_OC2_SetConfig+0x114>)
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d00f      	beq.n	800fd74 <TIM_OC2_SetConfig+0xc0>
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	4a1e      	ldr	r2, [pc, #120]	@ (800fdd0 <TIM_OC2_SetConfig+0x11c>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d00b      	beq.n	800fd74 <TIM_OC2_SetConfig+0xc0>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	4a1d      	ldr	r2, [pc, #116]	@ (800fdd4 <TIM_OC2_SetConfig+0x120>)
 800fd60:	4293      	cmp	r3, r2
 800fd62:	d007      	beq.n	800fd74 <TIM_OC2_SetConfig+0xc0>
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	4a1c      	ldr	r2, [pc, #112]	@ (800fdd8 <TIM_OC2_SetConfig+0x124>)
 800fd68:	4293      	cmp	r3, r2
 800fd6a:	d003      	beq.n	800fd74 <TIM_OC2_SetConfig+0xc0>
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	4a17      	ldr	r2, [pc, #92]	@ (800fdcc <TIM_OC2_SetConfig+0x118>)
 800fd70:	4293      	cmp	r3, r2
 800fd72:	d113      	bne.n	800fd9c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fd7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fd7c:	693b      	ldr	r3, [r7, #16]
 800fd7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fd82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fd84:	683b      	ldr	r3, [r7, #0]
 800fd86:	695b      	ldr	r3, [r3, #20]
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	693a      	ldr	r2, [r7, #16]
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	699b      	ldr	r3, [r3, #24]
 800fd94:	009b      	lsls	r3, r3, #2
 800fd96:	693a      	ldr	r2, [r7, #16]
 800fd98:	4313      	orrs	r3, r2
 800fd9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	693a      	ldr	r2, [r7, #16]
 800fda0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	68fa      	ldr	r2, [r7, #12]
 800fda6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	685a      	ldr	r2, [r3, #4]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	697a      	ldr	r2, [r7, #20]
 800fdb4:	621a      	str	r2, [r3, #32]
}
 800fdb6:	bf00      	nop
 800fdb8:	371c      	adds	r7, #28
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc0:	4770      	bx	lr
 800fdc2:	bf00      	nop
 800fdc4:	40012c00 	.word	0x40012c00
 800fdc8:	40013400 	.word	0x40013400
 800fdcc:	40015000 	.word	0x40015000
 800fdd0:	40014000 	.word	0x40014000
 800fdd4:	40014400 	.word	0x40014400
 800fdd8:	40014800 	.word	0x40014800

0800fddc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b087      	sub	sp, #28
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6a1b      	ldr	r3, [r3, #32]
 800fdea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6a1b      	ldr	r3, [r3, #32]
 800fdf0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	69db      	ldr	r3, [r3, #28]
 800fe02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fe0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	f023 0303 	bic.w	r3, r3, #3
 800fe16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	68fa      	ldr	r2, [r7, #12]
 800fe1e:	4313      	orrs	r3, r2
 800fe20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800fe28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	689b      	ldr	r3, [r3, #8]
 800fe2e:	021b      	lsls	r3, r3, #8
 800fe30:	697a      	ldr	r2, [r7, #20]
 800fe32:	4313      	orrs	r3, r2
 800fe34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	4a2b      	ldr	r2, [pc, #172]	@ (800fee8 <TIM_OC3_SetConfig+0x10c>)
 800fe3a:	4293      	cmp	r3, r2
 800fe3c:	d007      	beq.n	800fe4e <TIM_OC3_SetConfig+0x72>
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	4a2a      	ldr	r2, [pc, #168]	@ (800feec <TIM_OC3_SetConfig+0x110>)
 800fe42:	4293      	cmp	r3, r2
 800fe44:	d003      	beq.n	800fe4e <TIM_OC3_SetConfig+0x72>
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	4a29      	ldr	r2, [pc, #164]	@ (800fef0 <TIM_OC3_SetConfig+0x114>)
 800fe4a:	4293      	cmp	r3, r2
 800fe4c:	d10d      	bne.n	800fe6a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fe4e:	697b      	ldr	r3, [r7, #20]
 800fe50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fe54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	68db      	ldr	r3, [r3, #12]
 800fe5a:	021b      	lsls	r3, r3, #8
 800fe5c:	697a      	ldr	r2, [r7, #20]
 800fe5e:	4313      	orrs	r3, r2
 800fe60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fe68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	4a1e      	ldr	r2, [pc, #120]	@ (800fee8 <TIM_OC3_SetConfig+0x10c>)
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	d013      	beq.n	800fe9a <TIM_OC3_SetConfig+0xbe>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	4a1d      	ldr	r2, [pc, #116]	@ (800feec <TIM_OC3_SetConfig+0x110>)
 800fe76:	4293      	cmp	r3, r2
 800fe78:	d00f      	beq.n	800fe9a <TIM_OC3_SetConfig+0xbe>
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	4a1d      	ldr	r2, [pc, #116]	@ (800fef4 <TIM_OC3_SetConfig+0x118>)
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d00b      	beq.n	800fe9a <TIM_OC3_SetConfig+0xbe>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	4a1c      	ldr	r2, [pc, #112]	@ (800fef8 <TIM_OC3_SetConfig+0x11c>)
 800fe86:	4293      	cmp	r3, r2
 800fe88:	d007      	beq.n	800fe9a <TIM_OC3_SetConfig+0xbe>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	4a1b      	ldr	r2, [pc, #108]	@ (800fefc <TIM_OC3_SetConfig+0x120>)
 800fe8e:	4293      	cmp	r3, r2
 800fe90:	d003      	beq.n	800fe9a <TIM_OC3_SetConfig+0xbe>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	4a16      	ldr	r2, [pc, #88]	@ (800fef0 <TIM_OC3_SetConfig+0x114>)
 800fe96:	4293      	cmp	r3, r2
 800fe98:	d113      	bne.n	800fec2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fea2:	693b      	ldr	r3, [r7, #16]
 800fea4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800feaa:	683b      	ldr	r3, [r7, #0]
 800feac:	695b      	ldr	r3, [r3, #20]
 800feae:	011b      	lsls	r3, r3, #4
 800feb0:	693a      	ldr	r2, [r7, #16]
 800feb2:	4313      	orrs	r3, r2
 800feb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	699b      	ldr	r3, [r3, #24]
 800feba:	011b      	lsls	r3, r3, #4
 800febc:	693a      	ldr	r2, [r7, #16]
 800febe:	4313      	orrs	r3, r2
 800fec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	693a      	ldr	r2, [r7, #16]
 800fec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	68fa      	ldr	r2, [r7, #12]
 800fecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fece:	683b      	ldr	r3, [r7, #0]
 800fed0:	685a      	ldr	r2, [r3, #4]
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	697a      	ldr	r2, [r7, #20]
 800feda:	621a      	str	r2, [r3, #32]
}
 800fedc:	bf00      	nop
 800fede:	371c      	adds	r7, #28
 800fee0:	46bd      	mov	sp, r7
 800fee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee6:	4770      	bx	lr
 800fee8:	40012c00 	.word	0x40012c00
 800feec:	40013400 	.word	0x40013400
 800fef0:	40015000 	.word	0x40015000
 800fef4:	40014000 	.word	0x40014000
 800fef8:	40014400 	.word	0x40014400
 800fefc:	40014800 	.word	0x40014800

0800ff00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ff00:	b480      	push	{r7}
 800ff02:	b087      	sub	sp, #28
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
 800ff08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6a1b      	ldr	r3, [r3, #32]
 800ff0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6a1b      	ldr	r3, [r3, #32]
 800ff14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	69db      	ldr	r3, [r3, #28]
 800ff26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ff2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ff32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ff3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	021b      	lsls	r3, r3, #8
 800ff42:	68fa      	ldr	r2, [r7, #12]
 800ff44:	4313      	orrs	r3, r2
 800ff46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ff4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	689b      	ldr	r3, [r3, #8]
 800ff54:	031b      	lsls	r3, r3, #12
 800ff56:	697a      	ldr	r2, [r7, #20]
 800ff58:	4313      	orrs	r3, r2
 800ff5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4a2c      	ldr	r2, [pc, #176]	@ (8010010 <TIM_OC4_SetConfig+0x110>)
 800ff60:	4293      	cmp	r3, r2
 800ff62:	d007      	beq.n	800ff74 <TIM_OC4_SetConfig+0x74>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	4a2b      	ldr	r2, [pc, #172]	@ (8010014 <TIM_OC4_SetConfig+0x114>)
 800ff68:	4293      	cmp	r3, r2
 800ff6a:	d003      	beq.n	800ff74 <TIM_OC4_SetConfig+0x74>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	4a2a      	ldr	r2, [pc, #168]	@ (8010018 <TIM_OC4_SetConfig+0x118>)
 800ff70:	4293      	cmp	r3, r2
 800ff72:	d10d      	bne.n	800ff90 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ff7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	68db      	ldr	r3, [r3, #12]
 800ff80:	031b      	lsls	r3, r3, #12
 800ff82:	697a      	ldr	r2, [r7, #20]
 800ff84:	4313      	orrs	r3, r2
 800ff86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ff8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	4a1f      	ldr	r2, [pc, #124]	@ (8010010 <TIM_OC4_SetConfig+0x110>)
 800ff94:	4293      	cmp	r3, r2
 800ff96:	d013      	beq.n	800ffc0 <TIM_OC4_SetConfig+0xc0>
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	4a1e      	ldr	r2, [pc, #120]	@ (8010014 <TIM_OC4_SetConfig+0x114>)
 800ff9c:	4293      	cmp	r3, r2
 800ff9e:	d00f      	beq.n	800ffc0 <TIM_OC4_SetConfig+0xc0>
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	4a1e      	ldr	r2, [pc, #120]	@ (801001c <TIM_OC4_SetConfig+0x11c>)
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	d00b      	beq.n	800ffc0 <TIM_OC4_SetConfig+0xc0>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	4a1d      	ldr	r2, [pc, #116]	@ (8010020 <TIM_OC4_SetConfig+0x120>)
 800ffac:	4293      	cmp	r3, r2
 800ffae:	d007      	beq.n	800ffc0 <TIM_OC4_SetConfig+0xc0>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	4a1c      	ldr	r2, [pc, #112]	@ (8010024 <TIM_OC4_SetConfig+0x124>)
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	d003      	beq.n	800ffc0 <TIM_OC4_SetConfig+0xc0>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	4a17      	ldr	r2, [pc, #92]	@ (8010018 <TIM_OC4_SetConfig+0x118>)
 800ffbc:	4293      	cmp	r3, r2
 800ffbe:	d113      	bne.n	800ffe8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ffc6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ffc8:	693b      	ldr	r3, [r7, #16]
 800ffca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ffce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	695b      	ldr	r3, [r3, #20]
 800ffd4:	019b      	lsls	r3, r3, #6
 800ffd6:	693a      	ldr	r2, [r7, #16]
 800ffd8:	4313      	orrs	r3, r2
 800ffda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	699b      	ldr	r3, [r3, #24]
 800ffe0:	019b      	lsls	r3, r3, #6
 800ffe2:	693a      	ldr	r2, [r7, #16]
 800ffe4:	4313      	orrs	r3, r2
 800ffe6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	693a      	ldr	r2, [r7, #16]
 800ffec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	68fa      	ldr	r2, [r7, #12]
 800fff2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	685a      	ldr	r2, [r3, #4]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	697a      	ldr	r2, [r7, #20]
 8010000:	621a      	str	r2, [r3, #32]
}
 8010002:	bf00      	nop
 8010004:	371c      	adds	r7, #28
 8010006:	46bd      	mov	sp, r7
 8010008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000c:	4770      	bx	lr
 801000e:	bf00      	nop
 8010010:	40012c00 	.word	0x40012c00
 8010014:	40013400 	.word	0x40013400
 8010018:	40015000 	.word	0x40015000
 801001c:	40014000 	.word	0x40014000
 8010020:	40014400 	.word	0x40014400
 8010024:	40014800 	.word	0x40014800

08010028 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010028:	b480      	push	{r7}
 801002a:	b087      	sub	sp, #28
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
 8010030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6a1b      	ldr	r3, [r3, #32]
 8010036:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	6a1b      	ldr	r3, [r3, #32]
 801003c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	685b      	ldr	r3, [r3, #4]
 8010048:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801004e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801005a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	68fa      	ldr	r2, [r7, #12]
 8010062:	4313      	orrs	r3, r2
 8010064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 801006c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	689b      	ldr	r3, [r3, #8]
 8010072:	041b      	lsls	r3, r3, #16
 8010074:	693a      	ldr	r2, [r7, #16]
 8010076:	4313      	orrs	r3, r2
 8010078:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	4a19      	ldr	r2, [pc, #100]	@ (80100e4 <TIM_OC5_SetConfig+0xbc>)
 801007e:	4293      	cmp	r3, r2
 8010080:	d013      	beq.n	80100aa <TIM_OC5_SetConfig+0x82>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	4a18      	ldr	r2, [pc, #96]	@ (80100e8 <TIM_OC5_SetConfig+0xc0>)
 8010086:	4293      	cmp	r3, r2
 8010088:	d00f      	beq.n	80100aa <TIM_OC5_SetConfig+0x82>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4a17      	ldr	r2, [pc, #92]	@ (80100ec <TIM_OC5_SetConfig+0xc4>)
 801008e:	4293      	cmp	r3, r2
 8010090:	d00b      	beq.n	80100aa <TIM_OC5_SetConfig+0x82>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4a16      	ldr	r2, [pc, #88]	@ (80100f0 <TIM_OC5_SetConfig+0xc8>)
 8010096:	4293      	cmp	r3, r2
 8010098:	d007      	beq.n	80100aa <TIM_OC5_SetConfig+0x82>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	4a15      	ldr	r2, [pc, #84]	@ (80100f4 <TIM_OC5_SetConfig+0xcc>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d003      	beq.n	80100aa <TIM_OC5_SetConfig+0x82>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	4a14      	ldr	r2, [pc, #80]	@ (80100f8 <TIM_OC5_SetConfig+0xd0>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d109      	bne.n	80100be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80100b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	695b      	ldr	r3, [r3, #20]
 80100b6:	021b      	lsls	r3, r3, #8
 80100b8:	697a      	ldr	r2, [r7, #20]
 80100ba:	4313      	orrs	r3, r2
 80100bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	697a      	ldr	r2, [r7, #20]
 80100c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	68fa      	ldr	r2, [r7, #12]
 80100c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	685a      	ldr	r2, [r3, #4]
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	693a      	ldr	r2, [r7, #16]
 80100d6:	621a      	str	r2, [r3, #32]
}
 80100d8:	bf00      	nop
 80100da:	371c      	adds	r7, #28
 80100dc:	46bd      	mov	sp, r7
 80100de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e2:	4770      	bx	lr
 80100e4:	40012c00 	.word	0x40012c00
 80100e8:	40013400 	.word	0x40013400
 80100ec:	40014000 	.word	0x40014000
 80100f0:	40014400 	.word	0x40014400
 80100f4:	40014800 	.word	0x40014800
 80100f8:	40015000 	.word	0x40015000

080100fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b087      	sub	sp, #28
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	6a1b      	ldr	r3, [r3, #32]
 801010a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6a1b      	ldr	r3, [r3, #32]
 8010110:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	685b      	ldr	r3, [r3, #4]
 801011c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801012a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 801012e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	021b      	lsls	r3, r3, #8
 8010136:	68fa      	ldr	r2, [r7, #12]
 8010138:	4313      	orrs	r3, r2
 801013a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801013c:	693b      	ldr	r3, [r7, #16]
 801013e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	689b      	ldr	r3, [r3, #8]
 8010148:	051b      	lsls	r3, r3, #20
 801014a:	693a      	ldr	r2, [r7, #16]
 801014c:	4313      	orrs	r3, r2
 801014e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	4a1a      	ldr	r2, [pc, #104]	@ (80101bc <TIM_OC6_SetConfig+0xc0>)
 8010154:	4293      	cmp	r3, r2
 8010156:	d013      	beq.n	8010180 <TIM_OC6_SetConfig+0x84>
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	4a19      	ldr	r2, [pc, #100]	@ (80101c0 <TIM_OC6_SetConfig+0xc4>)
 801015c:	4293      	cmp	r3, r2
 801015e:	d00f      	beq.n	8010180 <TIM_OC6_SetConfig+0x84>
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	4a18      	ldr	r2, [pc, #96]	@ (80101c4 <TIM_OC6_SetConfig+0xc8>)
 8010164:	4293      	cmp	r3, r2
 8010166:	d00b      	beq.n	8010180 <TIM_OC6_SetConfig+0x84>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	4a17      	ldr	r2, [pc, #92]	@ (80101c8 <TIM_OC6_SetConfig+0xcc>)
 801016c:	4293      	cmp	r3, r2
 801016e:	d007      	beq.n	8010180 <TIM_OC6_SetConfig+0x84>
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	4a16      	ldr	r2, [pc, #88]	@ (80101cc <TIM_OC6_SetConfig+0xd0>)
 8010174:	4293      	cmp	r3, r2
 8010176:	d003      	beq.n	8010180 <TIM_OC6_SetConfig+0x84>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	4a15      	ldr	r2, [pc, #84]	@ (80101d0 <TIM_OC6_SetConfig+0xd4>)
 801017c:	4293      	cmp	r3, r2
 801017e:	d109      	bne.n	8010194 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010180:	697b      	ldr	r3, [r7, #20]
 8010182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8010186:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	695b      	ldr	r3, [r3, #20]
 801018c:	029b      	lsls	r3, r3, #10
 801018e:	697a      	ldr	r2, [r7, #20]
 8010190:	4313      	orrs	r3, r2
 8010192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	697a      	ldr	r2, [r7, #20]
 8010198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	68fa      	ldr	r2, [r7, #12]
 801019e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	685a      	ldr	r2, [r3, #4]
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	693a      	ldr	r2, [r7, #16]
 80101ac:	621a      	str	r2, [r3, #32]
}
 80101ae:	bf00      	nop
 80101b0:	371c      	adds	r7, #28
 80101b2:	46bd      	mov	sp, r7
 80101b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b8:	4770      	bx	lr
 80101ba:	bf00      	nop
 80101bc:	40012c00 	.word	0x40012c00
 80101c0:	40013400 	.word	0x40013400
 80101c4:	40014000 	.word	0x40014000
 80101c8:	40014400 	.word	0x40014400
 80101cc:	40014800 	.word	0x40014800
 80101d0:	40015000 	.word	0x40015000

080101d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b087      	sub	sp, #28
 80101d8:	af00      	add	r7, sp, #0
 80101da:	60f8      	str	r0, [r7, #12]
 80101dc:	60b9      	str	r1, [r7, #8]
 80101de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	6a1b      	ldr	r3, [r3, #32]
 80101e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	6a1b      	ldr	r3, [r3, #32]
 80101ea:	f023 0201 	bic.w	r2, r3, #1
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	699b      	ldr	r3, [r3, #24]
 80101f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80101fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	011b      	lsls	r3, r3, #4
 8010204:	693a      	ldr	r2, [r7, #16]
 8010206:	4313      	orrs	r3, r2
 8010208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	f023 030a 	bic.w	r3, r3, #10
 8010210:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010212:	697a      	ldr	r2, [r7, #20]
 8010214:	68bb      	ldr	r3, [r7, #8]
 8010216:	4313      	orrs	r3, r2
 8010218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	693a      	ldr	r2, [r7, #16]
 801021e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	697a      	ldr	r2, [r7, #20]
 8010224:	621a      	str	r2, [r3, #32]
}
 8010226:	bf00      	nop
 8010228:	371c      	adds	r7, #28
 801022a:	46bd      	mov	sp, r7
 801022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010230:	4770      	bx	lr

08010232 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010232:	b480      	push	{r7}
 8010234:	b087      	sub	sp, #28
 8010236:	af00      	add	r7, sp, #0
 8010238:	60f8      	str	r0, [r7, #12]
 801023a:	60b9      	str	r1, [r7, #8]
 801023c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	6a1b      	ldr	r3, [r3, #32]
 8010242:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	6a1b      	ldr	r3, [r3, #32]
 8010248:	f023 0210 	bic.w	r2, r3, #16
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	699b      	ldr	r3, [r3, #24]
 8010254:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801025c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	031b      	lsls	r3, r3, #12
 8010262:	693a      	ldr	r2, [r7, #16]
 8010264:	4313      	orrs	r3, r2
 8010266:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010268:	697b      	ldr	r3, [r7, #20]
 801026a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801026e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	011b      	lsls	r3, r3, #4
 8010274:	697a      	ldr	r2, [r7, #20]
 8010276:	4313      	orrs	r3, r2
 8010278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	693a      	ldr	r2, [r7, #16]
 801027e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	697a      	ldr	r2, [r7, #20]
 8010284:	621a      	str	r2, [r3, #32]
}
 8010286:	bf00      	nop
 8010288:	371c      	adds	r7, #28
 801028a:	46bd      	mov	sp, r7
 801028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010290:	4770      	bx	lr

08010292 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010292:	b480      	push	{r7}
 8010294:	b085      	sub	sp, #20
 8010296:	af00      	add	r7, sp, #0
 8010298:	6078      	str	r0, [r7, #4]
 801029a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	689b      	ldr	r3, [r3, #8]
 80102a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80102a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80102ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80102ae:	683a      	ldr	r2, [r7, #0]
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	4313      	orrs	r3, r2
 80102b4:	f043 0307 	orr.w	r3, r3, #7
 80102b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	68fa      	ldr	r2, [r7, #12]
 80102be:	609a      	str	r2, [r3, #8]
}
 80102c0:	bf00      	nop
 80102c2:	3714      	adds	r7, #20
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr

080102cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b087      	sub	sp, #28
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	60f8      	str	r0, [r7, #12]
 80102d4:	60b9      	str	r1, [r7, #8]
 80102d6:	607a      	str	r2, [r7, #4]
 80102d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	689b      	ldr	r3, [r3, #8]
 80102de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80102e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	021a      	lsls	r2, r3, #8
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	431a      	orrs	r2, r3
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	4313      	orrs	r3, r2
 80102f4:	697a      	ldr	r2, [r7, #20]
 80102f6:	4313      	orrs	r3, r2
 80102f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	697a      	ldr	r2, [r7, #20]
 80102fe:	609a      	str	r2, [r3, #8]
}
 8010300:	bf00      	nop
 8010302:	371c      	adds	r7, #28
 8010304:	46bd      	mov	sp, r7
 8010306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030a:	4770      	bx	lr

0801030c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801030c:	b480      	push	{r7}
 801030e:	b087      	sub	sp, #28
 8010310:	af00      	add	r7, sp, #0
 8010312:	60f8      	str	r0, [r7, #12]
 8010314:	60b9      	str	r1, [r7, #8]
 8010316:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	f003 031f 	and.w	r3, r3, #31
 801031e:	2201      	movs	r2, #1
 8010320:	fa02 f303 	lsl.w	r3, r2, r3
 8010324:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	6a1a      	ldr	r2, [r3, #32]
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	43db      	mvns	r3, r3
 801032e:	401a      	ands	r2, r3
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	6a1a      	ldr	r2, [r3, #32]
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	f003 031f 	and.w	r3, r3, #31
 801033e:	6879      	ldr	r1, [r7, #4]
 8010340:	fa01 f303 	lsl.w	r3, r1, r3
 8010344:	431a      	orrs	r2, r3
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	621a      	str	r2, [r3, #32]
}
 801034a:	bf00      	nop
 801034c:	371c      	adds	r7, #28
 801034e:	46bd      	mov	sp, r7
 8010350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010354:	4770      	bx	lr
	...

08010358 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	4a26      	ldr	r2, [pc, #152]	@ (80103fc <TIM_ResetCallback+0xa4>)
 8010364:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	4a25      	ldr	r2, [pc, #148]	@ (8010400 <TIM_ResetCallback+0xa8>)
 801036c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	4a24      	ldr	r2, [pc, #144]	@ (8010404 <TIM_ResetCallback+0xac>)
 8010374:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	4a23      	ldr	r2, [pc, #140]	@ (8010408 <TIM_ResetCallback+0xb0>)
 801037c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	4a22      	ldr	r2, [pc, #136]	@ (801040c <TIM_ResetCallback+0xb4>)
 8010384:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	4a21      	ldr	r2, [pc, #132]	@ (8010410 <TIM_ResetCallback+0xb8>)
 801038c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	4a20      	ldr	r2, [pc, #128]	@ (8010414 <TIM_ResetCallback+0xbc>)
 8010394:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	4a1f      	ldr	r2, [pc, #124]	@ (8010418 <TIM_ResetCallback+0xc0>)
 801039c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	4a1e      	ldr	r2, [pc, #120]	@ (801041c <TIM_ResetCallback+0xc4>)
 80103a4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	4a1d      	ldr	r2, [pc, #116]	@ (8010420 <TIM_ResetCallback+0xc8>)
 80103ac:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	4a1c      	ldr	r2, [pc, #112]	@ (8010424 <TIM_ResetCallback+0xcc>)
 80103b4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	4a1b      	ldr	r2, [pc, #108]	@ (8010428 <TIM_ResetCallback+0xd0>)
 80103bc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	4a1a      	ldr	r2, [pc, #104]	@ (801042c <TIM_ResetCallback+0xd4>)
 80103c4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	4a19      	ldr	r2, [pc, #100]	@ (8010430 <TIM_ResetCallback+0xd8>)
 80103cc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	4a18      	ldr	r2, [pc, #96]	@ (8010434 <TIM_ResetCallback+0xdc>)
 80103d4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	4a17      	ldr	r2, [pc, #92]	@ (8010438 <TIM_ResetCallback+0xe0>)
 80103dc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	4a16      	ldr	r2, [pc, #88]	@ (801043c <TIM_ResetCallback+0xe4>)
 80103e4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	4a15      	ldr	r2, [pc, #84]	@ (8010440 <TIM_ResetCallback+0xe8>)
 80103ec:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80103f0:	bf00      	nop
 80103f2:	370c      	adds	r7, #12
 80103f4:	46bd      	mov	sp, r7
 80103f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103fa:	4770      	bx	lr
 80103fc:	08008b71 	.word	0x08008b71
 8010400:	0800f6a5 	.word	0x0800f6a5
 8010404:	0800f71d 	.word	0x0800f71d
 8010408:	0800f731 	.word	0x0800f731
 801040c:	0800f6cd 	.word	0x0800f6cd
 8010410:	0800f6e1 	.word	0x0800f6e1
 8010414:	0800f6b9 	.word	0x0800f6b9
 8010418:	0800f6f5 	.word	0x0800f6f5
 801041c:	0800f709 	.word	0x0800f709
 8010420:	0800f745 	.word	0x0800f745
 8010424:	08010699 	.word	0x08010699
 8010428:	080106ad 	.word	0x080106ad
 801042c:	080106c1 	.word	0x080106c1
 8010430:	080106d5 	.word	0x080106d5
 8010434:	080106e9 	.word	0x080106e9
 8010438:	080106fd 	.word	0x080106fd
 801043c:	08010711 	.word	0x08010711
 8010440:	08010725 	.word	0x08010725

08010444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010444:	b480      	push	{r7}
 8010446:	b085      	sub	sp, #20
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010454:	2b01      	cmp	r3, #1
 8010456:	d101      	bne.n	801045c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010458:	2302      	movs	r3, #2
 801045a:	e074      	b.n	8010546 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2201      	movs	r2, #1
 8010460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2202      	movs	r2, #2
 8010468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	689b      	ldr	r3, [r3, #8]
 801047a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	4a34      	ldr	r2, [pc, #208]	@ (8010554 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010482:	4293      	cmp	r3, r2
 8010484:	d009      	beq.n	801049a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	4a33      	ldr	r2, [pc, #204]	@ (8010558 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801048c:	4293      	cmp	r3, r2
 801048e:	d004      	beq.n	801049a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	4a31      	ldr	r2, [pc, #196]	@ (801055c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010496:	4293      	cmp	r3, r2
 8010498:	d108      	bne.n	80104ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80104a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	685b      	ldr	r3, [r3, #4]
 80104a6:	68fa      	ldr	r2, [r7, #12]
 80104a8:	4313      	orrs	r3, r2
 80104aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80104b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80104b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	68fa      	ldr	r2, [r7, #12]
 80104be:	4313      	orrs	r3, r2
 80104c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	68fa      	ldr	r2, [r7, #12]
 80104c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	4a21      	ldr	r2, [pc, #132]	@ (8010554 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80104d0:	4293      	cmp	r3, r2
 80104d2:	d022      	beq.n	801051a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80104dc:	d01d      	beq.n	801051a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	4a1f      	ldr	r2, [pc, #124]	@ (8010560 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80104e4:	4293      	cmp	r3, r2
 80104e6:	d018      	beq.n	801051a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	4a1d      	ldr	r2, [pc, #116]	@ (8010564 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d013      	beq.n	801051a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	4a1c      	ldr	r2, [pc, #112]	@ (8010568 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80104f8:	4293      	cmp	r3, r2
 80104fa:	d00e      	beq.n	801051a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	4a15      	ldr	r2, [pc, #84]	@ (8010558 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010502:	4293      	cmp	r3, r2
 8010504:	d009      	beq.n	801051a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4a18      	ldr	r2, [pc, #96]	@ (801056c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801050c:	4293      	cmp	r3, r2
 801050e:	d004      	beq.n	801051a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	4a11      	ldr	r2, [pc, #68]	@ (801055c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d10c      	bne.n	8010534 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010520:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	689b      	ldr	r3, [r3, #8]
 8010526:	68ba      	ldr	r2, [r7, #8]
 8010528:	4313      	orrs	r3, r2
 801052a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	68ba      	ldr	r2, [r7, #8]
 8010532:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2201      	movs	r2, #1
 8010538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2200      	movs	r2, #0
 8010540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010544:	2300      	movs	r3, #0
}
 8010546:	4618      	mov	r0, r3
 8010548:	3714      	adds	r7, #20
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr
 8010552:	bf00      	nop
 8010554:	40012c00 	.word	0x40012c00
 8010558:	40013400 	.word	0x40013400
 801055c:	40015000 	.word	0x40015000
 8010560:	40000400 	.word	0x40000400
 8010564:	40000800 	.word	0x40000800
 8010568:	40000c00 	.word	0x40000c00
 801056c:	40014000 	.word	0x40014000

08010570 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010570:	b480      	push	{r7}
 8010572:	b085      	sub	sp, #20
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801057a:	2300      	movs	r3, #0
 801057c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010584:	2b01      	cmp	r3, #1
 8010586:	d101      	bne.n	801058c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010588:	2302      	movs	r3, #2
 801058a:	e078      	b.n	801067e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2201      	movs	r2, #1
 8010590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801059a:	683b      	ldr	r3, [r7, #0]
 801059c:	68db      	ldr	r3, [r3, #12]
 801059e:	4313      	orrs	r3, r2
 80105a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80105a8:	683b      	ldr	r3, [r7, #0]
 80105aa:	689b      	ldr	r3, [r3, #8]
 80105ac:	4313      	orrs	r3, r2
 80105ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	685b      	ldr	r3, [r3, #4]
 80105ba:	4313      	orrs	r3, r2
 80105bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	4313      	orrs	r3, r2
 80105ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	691b      	ldr	r3, [r3, #16]
 80105d6:	4313      	orrs	r3, r2
 80105d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	695b      	ldr	r3, [r3, #20]
 80105e4:	4313      	orrs	r3, r2
 80105e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105f2:	4313      	orrs	r3, r2
 80105f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	699b      	ldr	r3, [r3, #24]
 8010600:	041b      	lsls	r3, r3, #16
 8010602:	4313      	orrs	r3, r2
 8010604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	69db      	ldr	r3, [r3, #28]
 8010610:	4313      	orrs	r3, r2
 8010612:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	4a1c      	ldr	r2, [pc, #112]	@ (801068c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 801061a:	4293      	cmp	r3, r2
 801061c:	d009      	beq.n	8010632 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	4a1b      	ldr	r2, [pc, #108]	@ (8010690 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8010624:	4293      	cmp	r3, r2
 8010626:	d004      	beq.n	8010632 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4a19      	ldr	r2, [pc, #100]	@ (8010694 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 801062e:	4293      	cmp	r3, r2
 8010630:	d11c      	bne.n	801066c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801063c:	051b      	lsls	r3, r3, #20
 801063e:	4313      	orrs	r3, r2
 8010640:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8010648:	683b      	ldr	r3, [r7, #0]
 801064a:	6a1b      	ldr	r3, [r3, #32]
 801064c:	4313      	orrs	r3, r2
 801064e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801065a:	4313      	orrs	r3, r2
 801065c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010668:	4313      	orrs	r3, r2
 801066a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	68fa      	ldr	r2, [r7, #12]
 8010672:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2200      	movs	r2, #0
 8010678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801067c:	2300      	movs	r3, #0
}
 801067e:	4618      	mov	r0, r3
 8010680:	3714      	adds	r7, #20
 8010682:	46bd      	mov	sp, r7
 8010684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010688:	4770      	bx	lr
 801068a:	bf00      	nop
 801068c:	40012c00 	.word	0x40012c00
 8010690:	40013400 	.word	0x40013400
 8010694:	40015000 	.word	0x40015000

08010698 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010698:	b480      	push	{r7}
 801069a:	b083      	sub	sp, #12
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80106a0:	bf00      	nop
 80106a2:	370c      	adds	r7, #12
 80106a4:	46bd      	mov	sp, r7
 80106a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106aa:	4770      	bx	lr

080106ac <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80106ac:	b480      	push	{r7}
 80106ae:	b083      	sub	sp, #12
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80106b4:	bf00      	nop
 80106b6:	370c      	adds	r7, #12
 80106b8:	46bd      	mov	sp, r7
 80106ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106be:	4770      	bx	lr

080106c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80106c0:	b480      	push	{r7}
 80106c2:	b083      	sub	sp, #12
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80106c8:	bf00      	nop
 80106ca:	370c      	adds	r7, #12
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr

080106d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80106dc:	bf00      	nop
 80106de:	370c      	adds	r7, #12
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr

080106e8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80106e8:	b480      	push	{r7}
 80106ea:	b083      	sub	sp, #12
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80106f0:	bf00      	nop
 80106f2:	370c      	adds	r7, #12
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80106fc:	b480      	push	{r7}
 80106fe:	b083      	sub	sp, #12
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8010704:	bf00      	nop
 8010706:	370c      	adds	r7, #12
 8010708:	46bd      	mov	sp, r7
 801070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801070e:	4770      	bx	lr

08010710 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8010710:	b480      	push	{r7}
 8010712:	b083      	sub	sp, #12
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8010718:	bf00      	nop
 801071a:	370c      	adds	r7, #12
 801071c:	46bd      	mov	sp, r7
 801071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010722:	4770      	bx	lr

08010724 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8010724:	b480      	push	{r7}
 8010726:	b083      	sub	sp, #12
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801072c:	bf00      	nop
 801072e:	370c      	adds	r7, #12
 8010730:	46bd      	mov	sp, r7
 8010732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010736:	4770      	bx	lr

08010738 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010738:	b580      	push	{r7, lr}
 801073a:	b082      	sub	sp, #8
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d101      	bne.n	801074a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010746:	2301      	movs	r3, #1
 8010748:	e050      	b.n	80107ec <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010750:	2b00      	cmp	r3, #0
 8010752:	d114      	bne.n	801077e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2200      	movs	r2, #0
 8010758:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801075c:	6878      	ldr	r0, [r7, #4]
 801075e:	f000 fde5 	bl	801132c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8010768:	2b00      	cmp	r3, #0
 801076a:	d103      	bne.n	8010774 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	4a21      	ldr	r2, [pc, #132]	@ (80107f4 <HAL_UART_Init+0xbc>)
 8010770:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2224      	movs	r2, #36	@ 0x24
 8010782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	681a      	ldr	r2, [r3, #0]
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	f022 0201 	bic.w	r2, r2, #1
 8010794:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801079a:	2b00      	cmp	r3, #0
 801079c:	d002      	beq.n	80107a4 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 801079e:	6878      	ldr	r0, [r7, #4]
 80107a0:	f001 f912 	bl	80119c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	f000 fe13 	bl	80113d0 <UART_SetConfig>
 80107aa:	4603      	mov	r3, r0
 80107ac:	2b01      	cmp	r3, #1
 80107ae:	d101      	bne.n	80107b4 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80107b0:	2301      	movs	r3, #1
 80107b2:	e01b      	b.n	80107ec <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	685a      	ldr	r2, [r3, #4]
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	681b      	ldr	r3, [r3, #0]
 80107be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80107c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	689a      	ldr	r2, [r3, #8]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80107d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	f042 0201 	orr.w	r2, r2, #1
 80107e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f001 f991 	bl	8011b0c <UART_CheckIdleState>
 80107ea:	4603      	mov	r3, r0
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3708      	adds	r7, #8
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}
 80107f4:	0800abd9 	.word	0x0800abd9

080107f8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80107f8:	b480      	push	{r7}
 80107fa:	b087      	sub	sp, #28
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	60f8      	str	r0, [r7, #12]
 8010800:	460b      	mov	r3, r1
 8010802:	607a      	str	r2, [r7, #4]
 8010804:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8010806:	2300      	movs	r3, #0
 8010808:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d109      	bne.n	8010824 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010816:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8010820:	2301      	movs	r3, #1
 8010822:	e09c      	b.n	801095e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801082a:	2b20      	cmp	r3, #32
 801082c:	d16c      	bne.n	8010908 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 801082e:	7afb      	ldrb	r3, [r7, #11]
 8010830:	2b0c      	cmp	r3, #12
 8010832:	d85e      	bhi.n	80108f2 <HAL_UART_RegisterCallback+0xfa>
 8010834:	a201      	add	r2, pc, #4	@ (adr r2, 801083c <HAL_UART_RegisterCallback+0x44>)
 8010836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801083a:	bf00      	nop
 801083c:	08010871 	.word	0x08010871
 8010840:	0801087b 	.word	0x0801087b
 8010844:	08010885 	.word	0x08010885
 8010848:	0801088f 	.word	0x0801088f
 801084c:	08010899 	.word	0x08010899
 8010850:	080108a3 	.word	0x080108a3
 8010854:	080108ad 	.word	0x080108ad
 8010858:	080108b7 	.word	0x080108b7
 801085c:	080108c1 	.word	0x080108c1
 8010860:	080108cb 	.word	0x080108cb
 8010864:	080108d5 	.word	0x080108d5
 8010868:	080108df 	.word	0x080108df
 801086c:	080108e9 	.word	0x080108e9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	687a      	ldr	r2, [r7, #4]
 8010874:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8010878:	e070      	b.n	801095c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	687a      	ldr	r2, [r7, #4]
 801087e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8010882:	e06b      	b.n	801095c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	687a      	ldr	r2, [r7, #4]
 8010888:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 801088c:	e066      	b.n	801095c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	687a      	ldr	r2, [r7, #4]
 8010892:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8010896:	e061      	b.n	801095c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80108a0:	e05c      	b.n	801095c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	687a      	ldr	r2, [r7, #4]
 80108a6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80108aa:	e057      	b.n	801095c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	687a      	ldr	r2, [r7, #4]
 80108b0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80108b4:	e052      	b.n	801095c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80108be:	e04d      	b.n	801095c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	687a      	ldr	r2, [r7, #4]
 80108c4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80108c8:	e048      	b.n	801095c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80108d2:	e043      	b.n	801095c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	687a      	ldr	r2, [r7, #4]
 80108d8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80108dc:	e03e      	b.n	801095c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	687a      	ldr	r2, [r7, #4]
 80108e2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80108e6:	e039      	b.n	801095c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	687a      	ldr	r2, [r7, #4]
 80108ec:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80108f0:	e034      	b.n	801095c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80108f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8010902:	2301      	movs	r3, #1
 8010904:	75fb      	strb	r3, [r7, #23]
        break;
 8010906:	e029      	b.n	801095c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801090e:	2b00      	cmp	r3, #0
 8010910:	d11a      	bne.n	8010948 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8010912:	7afb      	ldrb	r3, [r7, #11]
 8010914:	2b0b      	cmp	r3, #11
 8010916:	d002      	beq.n	801091e <HAL_UART_RegisterCallback+0x126>
 8010918:	2b0c      	cmp	r3, #12
 801091a:	d005      	beq.n	8010928 <HAL_UART_RegisterCallback+0x130>
 801091c:	e009      	b.n	8010932 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	687a      	ldr	r2, [r7, #4]
 8010922:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8010926:	e019      	b.n	801095c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	687a      	ldr	r2, [r7, #4]
 801092c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8010930:	e014      	b.n	801095c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010938:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8010942:	2301      	movs	r3, #1
 8010944:	75fb      	strb	r3, [r7, #23]
        break;
 8010946:	e009      	b.n	801095c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801094e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8010958:	2301      	movs	r3, #1
 801095a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 801095c:	7dfb      	ldrb	r3, [r7, #23]
}
 801095e:	4618      	mov	r0, r3
 8010960:	371c      	adds	r7, #28
 8010962:	46bd      	mov	sp, r7
 8010964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop

0801096c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b08a      	sub	sp, #40	@ 0x28
 8010970:	af00      	add	r7, sp, #0
 8010972:	60f8      	str	r0, [r7, #12]
 8010974:	60b9      	str	r1, [r7, #8]
 8010976:	4613      	mov	r3, r2
 8010978:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010980:	2b20      	cmp	r3, #32
 8010982:	d167      	bne.n	8010a54 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d002      	beq.n	8010990 <HAL_UART_Transmit_DMA+0x24>
 801098a:	88fb      	ldrh	r3, [r7, #6]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d101      	bne.n	8010994 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8010990:	2301      	movs	r3, #1
 8010992:	e060      	b.n	8010a56 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	68ba      	ldr	r2, [r7, #8]
 8010998:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	88fa      	ldrh	r2, [r7, #6]
 801099e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	88fa      	ldrh	r2, [r7, #6]
 80109a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	2200      	movs	r2, #0
 80109ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	2221      	movs	r2, #33	@ 0x21
 80109b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d028      	beq.n	8010a14 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109c6:	4a26      	ldr	r2, [pc, #152]	@ (8010a60 <HAL_UART_Transmit_DMA+0xf4>)
 80109c8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109ce:	4a25      	ldr	r2, [pc, #148]	@ (8010a64 <HAL_UART_Transmit_DMA+0xf8>)
 80109d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109d6:	4a24      	ldr	r2, [pc, #144]	@ (8010a68 <HAL_UART_Transmit_DMA+0xfc>)
 80109d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80109de:	2200      	movs	r2, #0
 80109e0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80109ea:	4619      	mov	r1, r3
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	3328      	adds	r3, #40	@ 0x28
 80109f2:	461a      	mov	r2, r3
 80109f4:	88fb      	ldrh	r3, [r7, #6]
 80109f6:	f7fc f919 	bl	800cc2c <HAL_DMA_Start_IT>
 80109fa:	4603      	mov	r3, r0
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d009      	beq.n	8010a14 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	2210      	movs	r2, #16
 8010a04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	2220      	movs	r2, #32
 8010a0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8010a10:	2301      	movs	r3, #1
 8010a12:	e020      	b.n	8010a56 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	2240      	movs	r2, #64	@ 0x40
 8010a1a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	3308      	adds	r3, #8
 8010a22:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	e853 3f00 	ldrex	r3, [r3]
 8010a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8010a2c:	693b      	ldr	r3, [r7, #16]
 8010a2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	3308      	adds	r3, #8
 8010a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a3c:	623a      	str	r2, [r7, #32]
 8010a3e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a40:	69f9      	ldr	r1, [r7, #28]
 8010a42:	6a3a      	ldr	r2, [r7, #32]
 8010a44:	e841 2300 	strex	r3, r2, [r1]
 8010a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8010a4a:	69bb      	ldr	r3, [r7, #24]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d1e5      	bne.n	8010a1c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010a50:	2300      	movs	r3, #0
 8010a52:	e000      	b.n	8010a56 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010a54:	2302      	movs	r3, #2
  }
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	3728      	adds	r7, #40	@ 0x28
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	08011fd7 	.word	0x08011fd7
 8010a64:	08012075 	.word	0x08012075
 8010a68:	0801220f 	.word	0x0801220f

08010a6c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b08a      	sub	sp, #40	@ 0x28
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	60f8      	str	r0, [r7, #12]
 8010a74:	60b9      	str	r1, [r7, #8]
 8010a76:	4613      	mov	r3, r2
 8010a78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010a80:	2b20      	cmp	r3, #32
 8010a82:	d137      	bne.n	8010af4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d002      	beq.n	8010a90 <HAL_UART_Receive_DMA+0x24>
 8010a8a:	88fb      	ldrh	r3, [r7, #6]
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d101      	bne.n	8010a94 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010a90:	2301      	movs	r3, #1
 8010a92:	e030      	b.n	8010af6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	2200      	movs	r2, #0
 8010a98:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	4a18      	ldr	r2, [pc, #96]	@ (8010b00 <HAL_UART_Receive_DMA+0x94>)
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	d01f      	beq.n	8010ae4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	685b      	ldr	r3, [r3, #4]
 8010aaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d018      	beq.n	8010ae4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	e853 3f00 	ldrex	r3, [r3]
 8010abe:	613b      	str	r3, [r7, #16]
   return(result);
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	461a      	mov	r2, r3
 8010ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ad0:	623b      	str	r3, [r7, #32]
 8010ad2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ad4:	69f9      	ldr	r1, [r7, #28]
 8010ad6:	6a3a      	ldr	r2, [r7, #32]
 8010ad8:	e841 2300 	strex	r3, r2, [r1]
 8010adc:	61bb      	str	r3, [r7, #24]
   return(result);
 8010ade:	69bb      	ldr	r3, [r7, #24]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d1e6      	bne.n	8010ab2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8010ae4:	88fb      	ldrh	r3, [r7, #6]
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	68b9      	ldr	r1, [r7, #8]
 8010aea:	68f8      	ldr	r0, [r7, #12]
 8010aec:	f001 f926 	bl	8011d3c <UART_Start_Receive_DMA>
 8010af0:	4603      	mov	r3, r0
 8010af2:	e000      	b.n	8010af6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8010af4:	2302      	movs	r3, #2
  }
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3728      	adds	r7, #40	@ 0x28
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}
 8010afe:	bf00      	nop
 8010b00:	40008000 	.word	0x40008000

08010b04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b0ba      	sub	sp, #232	@ 0xe8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	69db      	ldr	r3, [r3, #28]
 8010b12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	689b      	ldr	r3, [r3, #8]
 8010b26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010b2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8010b2e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010b32:	4013      	ands	r3, r2
 8010b34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010b38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d11b      	bne.n	8010b78 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010b44:	f003 0320 	and.w	r3, r3, #32
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d015      	beq.n	8010b78 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010b50:	f003 0320 	and.w	r3, r3, #32
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d105      	bne.n	8010b64 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d009      	beq.n	8010b78 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	f000 8312 	beq.w	8011192 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b72:	6878      	ldr	r0, [r7, #4]
 8010b74:	4798      	blx	r3
      }
      return;
 8010b76:	e30c      	b.n	8011192 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010b78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	f000 8129 	beq.w	8010dd4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010b82:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010b86:	4b90      	ldr	r3, [pc, #576]	@ (8010dc8 <HAL_UART_IRQHandler+0x2c4>)
 8010b88:	4013      	ands	r3, r2
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d106      	bne.n	8010b9c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010b8e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010b92:	4b8e      	ldr	r3, [pc, #568]	@ (8010dcc <HAL_UART_IRQHandler+0x2c8>)
 8010b94:	4013      	ands	r3, r2
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	f000 811c 	beq.w	8010dd4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010ba0:	f003 0301 	and.w	r3, r3, #1
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d011      	beq.n	8010bcc <HAL_UART_IRQHandler+0xc8>
 8010ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d00b      	beq.n	8010bcc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	2201      	movs	r2, #1
 8010bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010bc2:	f043 0201 	orr.w	r2, r3, #1
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010bd0:	f003 0302 	and.w	r3, r3, #2
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d011      	beq.n	8010bfc <HAL_UART_IRQHandler+0xf8>
 8010bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010bdc:	f003 0301 	and.w	r3, r3, #1
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d00b      	beq.n	8010bfc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	2202      	movs	r2, #2
 8010bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010bf2:	f043 0204 	orr.w	r2, r3, #4
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010c00:	f003 0304 	and.w	r3, r3, #4
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d011      	beq.n	8010c2c <HAL_UART_IRQHandler+0x128>
 8010c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010c0c:	f003 0301 	and.w	r3, r3, #1
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d00b      	beq.n	8010c2c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	2204      	movs	r2, #4
 8010c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010c22:	f043 0202 	orr.w	r2, r3, #2
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010c30:	f003 0308 	and.w	r3, r3, #8
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d017      	beq.n	8010c68 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010c3c:	f003 0320 	and.w	r3, r3, #32
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d105      	bne.n	8010c50 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010c44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010c48:	4b5f      	ldr	r3, [pc, #380]	@ (8010dc8 <HAL_UART_IRQHandler+0x2c4>)
 8010c4a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d00b      	beq.n	8010c68 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	2208      	movs	r2, #8
 8010c56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010c5e:	f043 0208 	orr.w	r2, r3, #8
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d012      	beq.n	8010c9a <HAL_UART_IRQHandler+0x196>
 8010c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010c78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d00c      	beq.n	8010c9a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010c88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010c90:	f043 0220 	orr.w	r2, r3, #32
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	f000 8278 	beq.w	8011196 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010caa:	f003 0320 	and.w	r3, r3, #32
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d013      	beq.n	8010cda <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010cb6:	f003 0320 	and.w	r3, r3, #32
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d105      	bne.n	8010cca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d007      	beq.n	8010cda <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d003      	beq.n	8010cda <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010cd6:	6878      	ldr	r0, [r7, #4]
 8010cd8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010ce0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	689b      	ldr	r3, [r3, #8]
 8010cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cee:	2b40      	cmp	r3, #64	@ 0x40
 8010cf0:	d005      	beq.n	8010cfe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8010cf6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d058      	beq.n	8010db0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f001 f903 	bl	8011f0a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	689b      	ldr	r3, [r3, #8]
 8010d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d0e:	2b40      	cmp	r3, #64	@ 0x40
 8010d10:	d148      	bne.n	8010da4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	3308      	adds	r3, #8
 8010d18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010d20:	e853 3f00 	ldrex	r3, [r3]
 8010d24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	3308      	adds	r3, #8
 8010d3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010d3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010d42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010d4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010d4e:	e841 2300 	strex	r3, r2, [r1]
 8010d52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010d56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d1d9      	bne.n	8010d12 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d017      	beq.n	8010d98 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d6e:	4a18      	ldr	r2, [pc, #96]	@ (8010dd0 <HAL_UART_IRQHandler+0x2cc>)
 8010d70:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d78:	4618      	mov	r0, r3
 8010d7a:	f7fc f82b 	bl	800cdd4 <HAL_DMA_Abort_IT>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d01f      	beq.n	8010dc4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010d8c:	687a      	ldr	r2, [r7, #4]
 8010d8e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010d92:	4610      	mov	r0, r2
 8010d94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d96:	e015      	b.n	8010dc4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010d9e:	6878      	ldr	r0, [r7, #4]
 8010da0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010da2:	e00f      	b.n	8010dc4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010dae:	e009      	b.n	8010dc4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010dc2:	e1e8      	b.n	8011196 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010dc4:	bf00      	nop
    return;
 8010dc6:	e1e6      	b.n	8011196 <HAL_UART_IRQHandler+0x692>
 8010dc8:	10000001 	.word	0x10000001
 8010dcc:	04000120 	.word	0x04000120
 8010dd0:	08012293 	.word	0x08012293

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010dd8:	2b01      	cmp	r3, #1
 8010dda:	f040 8176 	bne.w	80110ca <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010de2:	f003 0310 	and.w	r3, r3, #16
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	f000 816f 	beq.w	80110ca <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010df0:	f003 0310 	and.w	r3, r3, #16
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	f000 8168 	beq.w	80110ca <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	2210      	movs	r2, #16
 8010e00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	689b      	ldr	r3, [r3, #8]
 8010e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e0c:	2b40      	cmp	r3, #64	@ 0x40
 8010e0e:	f040 80dc 	bne.w	8010fca <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	685b      	ldr	r3, [r3, #4]
 8010e1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010e20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	f000 80b1 	beq.w	8010f8c <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010e30:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010e34:	429a      	cmp	r2, r3
 8010e36:	f080 80a9 	bcs.w	8010f8c <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010e40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	f003 0320 	and.w	r3, r3, #32
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	f040 8087 	bne.w	8010f66 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e60:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010e64:	e853 3f00 	ldrex	r3, [r3]
 8010e68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010e70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010e74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	461a      	mov	r2, r3
 8010e7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010e82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010e86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010e8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010e92:	e841 2300 	strex	r3, r2, [r1]
 8010e96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d1da      	bne.n	8010e58 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	3308      	adds	r3, #8
 8010ea8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eaa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010eac:	e853 3f00 	ldrex	r3, [r3]
 8010eb0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010eb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010eb4:	f023 0301 	bic.w	r3, r3, #1
 8010eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	3308      	adds	r3, #8
 8010ec2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010ec6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010eca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ecc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010ece:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010ed2:	e841 2300 	strex	r3, r2, [r1]
 8010ed6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010ed8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d1e1      	bne.n	8010ea2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	3308      	adds	r3, #8
 8010ee4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ee6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010ee8:	e853 3f00 	ldrex	r3, [r3]
 8010eec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010eee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010ef0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	3308      	adds	r3, #8
 8010efe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010f02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010f04:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f06:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010f08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010f0a:	e841 2300 	strex	r3, r2, [r1]
 8010f0e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010f10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d1e3      	bne.n	8010ede <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2220      	movs	r2, #32
 8010f1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2200      	movs	r2, #0
 8010f22:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f2c:	e853 3f00 	ldrex	r3, [r3]
 8010f30:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010f34:	f023 0310 	bic.w	r3, r3, #16
 8010f38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	461a      	mov	r2, r3
 8010f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010f46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010f48:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f4a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010f4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010f4e:	e841 2300 	strex	r3, r2, [r1]
 8010f52:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010f54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d1e4      	bne.n	8010f24 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7fb fede 	bl	800cd22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2202      	movs	r2, #2
 8010f6a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010f72:	687a      	ldr	r2, [r7, #4]
 8010f74:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8010f78:	687a      	ldr	r2, [r7, #4]
 8010f7a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8010f7e:	b292      	uxth	r2, r2
 8010f80:	1a8a      	subs	r2, r1, r2
 8010f82:	b292      	uxth	r2, r2
 8010f84:	4611      	mov	r1, r2
 8010f86:	6878      	ldr	r0, [r7, #4]
 8010f88:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8010f8a:	e106      	b.n	801119a <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010f96:	429a      	cmp	r2, r3
 8010f98:	f040 80ff 	bne.w	801119a <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	f003 0320 	and.w	r3, r3, #32
 8010faa:	2b20      	cmp	r3, #32
 8010fac:	f040 80f5 	bne.w	801119a <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2202      	movs	r2, #2
 8010fb4:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010fbc:	687a      	ldr	r2, [r7, #4]
 8010fbe:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8010fc2:	4611      	mov	r1, r2
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	4798      	blx	r3
      return;
 8010fc8:	e0e7      	b.n	801119a <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	1ad3      	subs	r3, r2, r3
 8010fda:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	f000 80d9 	beq.w	801119e <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8010fec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	f000 80d4 	beq.w	801119e <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ffe:	e853 3f00 	ldrex	r3, [r3]
 8011002:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011006:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801100a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	461a      	mov	r2, r3
 8011014:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011018:	647b      	str	r3, [r7, #68]	@ 0x44
 801101a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801101c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801101e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011020:	e841 2300 	strex	r3, r2, [r1]
 8011024:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011028:	2b00      	cmp	r3, #0
 801102a:	d1e4      	bne.n	8010ff6 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	3308      	adds	r3, #8
 8011032:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011036:	e853 3f00 	ldrex	r3, [r3]
 801103a:	623b      	str	r3, [r7, #32]
   return(result);
 801103c:	6a3b      	ldr	r3, [r7, #32]
 801103e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011042:	f023 0301 	bic.w	r3, r3, #1
 8011046:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	3308      	adds	r3, #8
 8011050:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8011054:	633a      	str	r2, [r7, #48]	@ 0x30
 8011056:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011058:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801105a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801105c:	e841 2300 	strex	r3, r2, [r1]
 8011060:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011064:	2b00      	cmp	r3, #0
 8011066:	d1e1      	bne.n	801102c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2220      	movs	r2, #32
 801106c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2200      	movs	r2, #0
 8011074:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2200      	movs	r2, #0
 801107a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	e853 3f00 	ldrex	r3, [r3]
 8011088:	60fb      	str	r3, [r7, #12]
   return(result);
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	f023 0310 	bic.w	r3, r3, #16
 8011090:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	461a      	mov	r2, r3
 801109a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801109e:	61fb      	str	r3, [r7, #28]
 80110a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110a2:	69b9      	ldr	r1, [r7, #24]
 80110a4:	69fa      	ldr	r2, [r7, #28]
 80110a6:	e841 2300 	strex	r3, r2, [r1]
 80110aa:	617b      	str	r3, [r7, #20]
   return(result);
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d1e4      	bne.n	801107c <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2202      	movs	r2, #2
 80110b6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80110be:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 80110c2:	4611      	mov	r1, r2
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80110c8:	e069      	b.n	801119e <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80110ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d010      	beq.n	80110f8 <HAL_UART_IRQHandler+0x5f4>
 80110d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80110da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d00a      	beq.n	80110f8 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80110ea:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80110f6:	e055      	b.n	80111a4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80110f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80110fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011100:	2b00      	cmp	r3, #0
 8011102:	d014      	beq.n	801112e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801110c:	2b00      	cmp	r3, #0
 801110e:	d105      	bne.n	801111c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8011114:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011118:	2b00      	cmp	r3, #0
 801111a:	d008      	beq.n	801112e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011120:	2b00      	cmp	r3, #0
 8011122:	d03e      	beq.n	80111a2 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	4798      	blx	r3
    }
    return;
 801112c:	e039      	b.n	80111a2 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801112e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011136:	2b00      	cmp	r3, #0
 8011138:	d009      	beq.n	801114e <HAL_UART_IRQHandler+0x64a>
 801113a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801113e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011142:	2b00      	cmp	r3, #0
 8011144:	d003      	beq.n	801114e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8011146:	6878      	ldr	r0, [r7, #4]
 8011148:	f001 f8b7 	bl	80122ba <UART_EndTransmit_IT>
    return;
 801114c:	e02a      	b.n	80111a4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801114e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011152:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011156:	2b00      	cmp	r3, #0
 8011158:	d00b      	beq.n	8011172 <HAL_UART_IRQHandler+0x66e>
 801115a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801115e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8011162:	2b00      	cmp	r3, #0
 8011164:	d005      	beq.n	8011172 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011170:	e018      	b.n	80111a4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011176:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801117a:	2b00      	cmp	r3, #0
 801117c:	d012      	beq.n	80111a4 <HAL_UART_IRQHandler+0x6a0>
 801117e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8011182:	2b00      	cmp	r3, #0
 8011184:	da0e      	bge.n	80111a4 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011190:	e008      	b.n	80111a4 <HAL_UART_IRQHandler+0x6a0>
      return;
 8011192:	bf00      	nop
 8011194:	e006      	b.n	80111a4 <HAL_UART_IRQHandler+0x6a0>
    return;
 8011196:	bf00      	nop
 8011198:	e004      	b.n	80111a4 <HAL_UART_IRQHandler+0x6a0>
      return;
 801119a:	bf00      	nop
 801119c:	e002      	b.n	80111a4 <HAL_UART_IRQHandler+0x6a0>
      return;
 801119e:	bf00      	nop
 80111a0:	e000      	b.n	80111a4 <HAL_UART_IRQHandler+0x6a0>
    return;
 80111a2:	bf00      	nop
  }
}
 80111a4:	37e8      	adds	r7, #232	@ 0xe8
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}
 80111aa:	bf00      	nop

080111ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80111ac:	b480      	push	{r7}
 80111ae:	b083      	sub	sp, #12
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80111b4:	bf00      	nop
 80111b6:	370c      	adds	r7, #12
 80111b8:	46bd      	mov	sp, r7
 80111ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111be:	4770      	bx	lr

080111c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80111c0:	b480      	push	{r7}
 80111c2:	b083      	sub	sp, #12
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80111c8:	bf00      	nop
 80111ca:	370c      	adds	r7, #12
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr

080111d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b083      	sub	sp, #12
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80111dc:	bf00      	nop
 80111de:	370c      	adds	r7, #12
 80111e0:	46bd      	mov	sp, r7
 80111e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e6:	4770      	bx	lr

080111e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80111e8:	b480      	push	{r7}
 80111ea:	b083      	sub	sp, #12
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80111f0:	bf00      	nop
 80111f2:	370c      	adds	r7, #12
 80111f4:	46bd      	mov	sp, r7
 80111f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fa:	4770      	bx	lr

080111fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80111fc:	b480      	push	{r7}
 80111fe:	b083      	sub	sp, #12
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011204:	bf00      	nop
 8011206:	370c      	adds	r7, #12
 8011208:	46bd      	mov	sp, r7
 801120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120e:	4770      	bx	lr

08011210 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8011210:	b480      	push	{r7}
 8011212:	b083      	sub	sp, #12
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8011218:	bf00      	nop
 801121a:	370c      	adds	r7, #12
 801121c:	46bd      	mov	sp, r7
 801121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011222:	4770      	bx	lr

08011224 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8011224:	b480      	push	{r7}
 8011226:	b083      	sub	sp, #12
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801122c:	bf00      	nop
 801122e:	370c      	adds	r7, #12
 8011230:	46bd      	mov	sp, r7
 8011232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011236:	4770      	bx	lr

08011238 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8011238:	b480      	push	{r7}
 801123a:	b083      	sub	sp, #12
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8011240:	bf00      	nop
 8011242:	370c      	adds	r7, #12
 8011244:	46bd      	mov	sp, r7
 8011246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124a:	4770      	bx	lr

0801124c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801124c:	b480      	push	{r7}
 801124e:	b083      	sub	sp, #12
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	460b      	mov	r3, r1
 8011256:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011258:	bf00      	nop
 801125a:	370c      	adds	r7, #12
 801125c:	46bd      	mov	sp, r7
 801125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011262:	4770      	bx	lr

08011264 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8011264:	b480      	push	{r7}
 8011266:	b083      	sub	sp, #12
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	4a09      	ldr	r2, [pc, #36]	@ (8011298 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8011274:	4293      	cmp	r3, r2
 8011276:	d009      	beq.n	801128c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	695b      	ldr	r3, [r3, #20]
 801127e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	683a      	ldr	r2, [r7, #0]
 8011288:	430a      	orrs	r2, r1
 801128a:	615a      	str	r2, [r3, #20]
  }
}
 801128c:	bf00      	nop
 801128e:	370c      	adds	r7, #12
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr
 8011298:	40008000 	.word	0x40008000

0801129c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 801129c:	b480      	push	{r7}
 801129e:	b083      	sub	sp, #12
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	4a18      	ldr	r2, [pc, #96]	@ (801130c <HAL_UART_EnableReceiverTimeout+0x70>)
 80112aa:	4293      	cmp	r3, r2
 80112ac:	d027      	beq.n	80112fe <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80112b4:	2b20      	cmp	r3, #32
 80112b6:	d120      	bne.n	80112fa <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80112be:	2b01      	cmp	r3, #1
 80112c0:	d101      	bne.n	80112c6 <HAL_UART_EnableReceiverTimeout+0x2a>
 80112c2:	2302      	movs	r3, #2
 80112c4:	e01c      	b.n	8011300 <HAL_UART_EnableReceiverTimeout+0x64>
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2201      	movs	r2, #1
 80112ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	2224      	movs	r2, #36	@ 0x24
 80112d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	685a      	ldr	r2, [r3, #4]
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80112e4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	2220      	movs	r2, #32
 80112ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2200      	movs	r2, #0
 80112f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 80112f6:	2300      	movs	r3, #0
 80112f8:	e002      	b.n	8011300 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 80112fa:	2302      	movs	r3, #2
 80112fc:	e000      	b.n	8011300 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 80112fe:	2301      	movs	r3, #1
  }
}
 8011300:	4618      	mov	r0, r3
 8011302:	370c      	adds	r7, #12
 8011304:	46bd      	mov	sp, r7
 8011306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801130a:	4770      	bx	lr
 801130c:	40008000 	.word	0x40008000

08011310 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8011310:	b480      	push	{r7}
 8011312:	b083      	sub	sp, #12
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 801131e:	4618      	mov	r0, r3
 8011320:	370c      	adds	r7, #12
 8011322:	46bd      	mov	sp, r7
 8011324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011328:	4770      	bx	lr
	...

0801132c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801132c:	b480      	push	{r7}
 801132e:	b083      	sub	sp, #12
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	4a1a      	ldr	r2, [pc, #104]	@ (80113a0 <UART_InitCallbacksToDefault+0x74>)
 8011338:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	4a19      	ldr	r2, [pc, #100]	@ (80113a4 <UART_InitCallbacksToDefault+0x78>)
 8011340:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	4a18      	ldr	r2, [pc, #96]	@ (80113a8 <UART_InitCallbacksToDefault+0x7c>)
 8011348:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	4a17      	ldr	r2, [pc, #92]	@ (80113ac <UART_InitCallbacksToDefault+0x80>)
 8011350:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	4a16      	ldr	r2, [pc, #88]	@ (80113b0 <UART_InitCallbacksToDefault+0x84>)
 8011358:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	4a15      	ldr	r2, [pc, #84]	@ (80113b4 <UART_InitCallbacksToDefault+0x88>)
 8011360:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	4a14      	ldr	r2, [pc, #80]	@ (80113b8 <UART_InitCallbacksToDefault+0x8c>)
 8011368:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	4a13      	ldr	r2, [pc, #76]	@ (80113bc <UART_InitCallbacksToDefault+0x90>)
 8011370:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	4a12      	ldr	r2, [pc, #72]	@ (80113c0 <UART_InitCallbacksToDefault+0x94>)
 8011378:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	4a11      	ldr	r2, [pc, #68]	@ (80113c4 <UART_InitCallbacksToDefault+0x98>)
 8011380:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	4a10      	ldr	r2, [pc, #64]	@ (80113c8 <UART_InitCallbacksToDefault+0x9c>)
 8011388:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	4a0f      	ldr	r2, [pc, #60]	@ (80113cc <UART_InitCallbacksToDefault+0xa0>)
 8011390:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8011394:	bf00      	nop
 8011396:	370c      	adds	r7, #12
 8011398:	46bd      	mov	sp, r7
 801139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139e:	4770      	bx	lr
 80113a0:	080111c1 	.word	0x080111c1
 80113a4:	080111ad 	.word	0x080111ad
 80113a8:	080111e9 	.word	0x080111e9
 80113ac:	080111d5 	.word	0x080111d5
 80113b0:	080111fd 	.word	0x080111fd
 80113b4:	08011211 	.word	0x08011211
 80113b8:	08011225 	.word	0x08011225
 80113bc:	08011239 	.word	0x08011239
 80113c0:	08012315 	.word	0x08012315
 80113c4:	08012329 	.word	0x08012329
 80113c8:	0801233d 	.word	0x0801233d
 80113cc:	0801124d 	.word	0x0801124d

080113d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80113d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80113d4:	b08c      	sub	sp, #48	@ 0x30
 80113d6:	af00      	add	r7, sp, #0
 80113d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80113da:	2300      	movs	r3, #0
 80113dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	689a      	ldr	r2, [r3, #8]
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	691b      	ldr	r3, [r3, #16]
 80113e8:	431a      	orrs	r2, r3
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	695b      	ldr	r3, [r3, #20]
 80113ee:	431a      	orrs	r2, r3
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	69db      	ldr	r3, [r3, #28]
 80113f4:	4313      	orrs	r3, r2
 80113f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	681a      	ldr	r2, [r3, #0]
 80113fe:	4baa      	ldr	r3, [pc, #680]	@ (80116a8 <UART_SetConfig+0x2d8>)
 8011400:	4013      	ands	r3, r2
 8011402:	697a      	ldr	r2, [r7, #20]
 8011404:	6812      	ldr	r2, [r2, #0]
 8011406:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011408:	430b      	orrs	r3, r1
 801140a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	68da      	ldr	r2, [r3, #12]
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	430a      	orrs	r2, r1
 8011420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	699b      	ldr	r3, [r3, #24]
 8011426:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	4a9f      	ldr	r2, [pc, #636]	@ (80116ac <UART_SetConfig+0x2dc>)
 801142e:	4293      	cmp	r3, r2
 8011430:	d004      	beq.n	801143c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	6a1b      	ldr	r3, [r3, #32]
 8011436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011438:	4313      	orrs	r3, r2
 801143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801143c:	697b      	ldr	r3, [r7, #20]
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	689b      	ldr	r3, [r3, #8]
 8011442:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8011446:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 801144a:	697a      	ldr	r2, [r7, #20]
 801144c:	6812      	ldr	r2, [r2, #0]
 801144e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011450:	430b      	orrs	r3, r1
 8011452:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801145a:	f023 010f 	bic.w	r1, r3, #15
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011462:	697b      	ldr	r3, [r7, #20]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	430a      	orrs	r2, r1
 8011468:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	4a90      	ldr	r2, [pc, #576]	@ (80116b0 <UART_SetConfig+0x2e0>)
 8011470:	4293      	cmp	r3, r2
 8011472:	d125      	bne.n	80114c0 <UART_SetConfig+0xf0>
 8011474:	4b8f      	ldr	r3, [pc, #572]	@ (80116b4 <UART_SetConfig+0x2e4>)
 8011476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801147a:	f003 0303 	and.w	r3, r3, #3
 801147e:	2b03      	cmp	r3, #3
 8011480:	d81a      	bhi.n	80114b8 <UART_SetConfig+0xe8>
 8011482:	a201      	add	r2, pc, #4	@ (adr r2, 8011488 <UART_SetConfig+0xb8>)
 8011484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011488:	08011499 	.word	0x08011499
 801148c:	080114a9 	.word	0x080114a9
 8011490:	080114a1 	.word	0x080114a1
 8011494:	080114b1 	.word	0x080114b1
 8011498:	2301      	movs	r3, #1
 801149a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801149e:	e116      	b.n	80116ce <UART_SetConfig+0x2fe>
 80114a0:	2302      	movs	r3, #2
 80114a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114a6:	e112      	b.n	80116ce <UART_SetConfig+0x2fe>
 80114a8:	2304      	movs	r3, #4
 80114aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114ae:	e10e      	b.n	80116ce <UART_SetConfig+0x2fe>
 80114b0:	2308      	movs	r3, #8
 80114b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114b6:	e10a      	b.n	80116ce <UART_SetConfig+0x2fe>
 80114b8:	2310      	movs	r3, #16
 80114ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80114be:	e106      	b.n	80116ce <UART_SetConfig+0x2fe>
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	4a7c      	ldr	r2, [pc, #496]	@ (80116b8 <UART_SetConfig+0x2e8>)
 80114c6:	4293      	cmp	r3, r2
 80114c8:	d138      	bne.n	801153c <UART_SetConfig+0x16c>
 80114ca:	4b7a      	ldr	r3, [pc, #488]	@ (80116b4 <UART_SetConfig+0x2e4>)
 80114cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80114d0:	f003 030c 	and.w	r3, r3, #12
 80114d4:	2b0c      	cmp	r3, #12
 80114d6:	d82d      	bhi.n	8011534 <UART_SetConfig+0x164>
 80114d8:	a201      	add	r2, pc, #4	@ (adr r2, 80114e0 <UART_SetConfig+0x110>)
 80114da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114de:	bf00      	nop
 80114e0:	08011515 	.word	0x08011515
 80114e4:	08011535 	.word	0x08011535
 80114e8:	08011535 	.word	0x08011535
 80114ec:	08011535 	.word	0x08011535
 80114f0:	08011525 	.word	0x08011525
 80114f4:	08011535 	.word	0x08011535
 80114f8:	08011535 	.word	0x08011535
 80114fc:	08011535 	.word	0x08011535
 8011500:	0801151d 	.word	0x0801151d
 8011504:	08011535 	.word	0x08011535
 8011508:	08011535 	.word	0x08011535
 801150c:	08011535 	.word	0x08011535
 8011510:	0801152d 	.word	0x0801152d
 8011514:	2300      	movs	r3, #0
 8011516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801151a:	e0d8      	b.n	80116ce <UART_SetConfig+0x2fe>
 801151c:	2302      	movs	r3, #2
 801151e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011522:	e0d4      	b.n	80116ce <UART_SetConfig+0x2fe>
 8011524:	2304      	movs	r3, #4
 8011526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801152a:	e0d0      	b.n	80116ce <UART_SetConfig+0x2fe>
 801152c:	2308      	movs	r3, #8
 801152e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011532:	e0cc      	b.n	80116ce <UART_SetConfig+0x2fe>
 8011534:	2310      	movs	r3, #16
 8011536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801153a:	e0c8      	b.n	80116ce <UART_SetConfig+0x2fe>
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	4a5e      	ldr	r2, [pc, #376]	@ (80116bc <UART_SetConfig+0x2ec>)
 8011542:	4293      	cmp	r3, r2
 8011544:	d125      	bne.n	8011592 <UART_SetConfig+0x1c2>
 8011546:	4b5b      	ldr	r3, [pc, #364]	@ (80116b4 <UART_SetConfig+0x2e4>)
 8011548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801154c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8011550:	2b30      	cmp	r3, #48	@ 0x30
 8011552:	d016      	beq.n	8011582 <UART_SetConfig+0x1b2>
 8011554:	2b30      	cmp	r3, #48	@ 0x30
 8011556:	d818      	bhi.n	801158a <UART_SetConfig+0x1ba>
 8011558:	2b20      	cmp	r3, #32
 801155a:	d00a      	beq.n	8011572 <UART_SetConfig+0x1a2>
 801155c:	2b20      	cmp	r3, #32
 801155e:	d814      	bhi.n	801158a <UART_SetConfig+0x1ba>
 8011560:	2b00      	cmp	r3, #0
 8011562:	d002      	beq.n	801156a <UART_SetConfig+0x19a>
 8011564:	2b10      	cmp	r3, #16
 8011566:	d008      	beq.n	801157a <UART_SetConfig+0x1aa>
 8011568:	e00f      	b.n	801158a <UART_SetConfig+0x1ba>
 801156a:	2300      	movs	r3, #0
 801156c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011570:	e0ad      	b.n	80116ce <UART_SetConfig+0x2fe>
 8011572:	2302      	movs	r3, #2
 8011574:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011578:	e0a9      	b.n	80116ce <UART_SetConfig+0x2fe>
 801157a:	2304      	movs	r3, #4
 801157c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011580:	e0a5      	b.n	80116ce <UART_SetConfig+0x2fe>
 8011582:	2308      	movs	r3, #8
 8011584:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011588:	e0a1      	b.n	80116ce <UART_SetConfig+0x2fe>
 801158a:	2310      	movs	r3, #16
 801158c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011590:	e09d      	b.n	80116ce <UART_SetConfig+0x2fe>
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	4a4a      	ldr	r2, [pc, #296]	@ (80116c0 <UART_SetConfig+0x2f0>)
 8011598:	4293      	cmp	r3, r2
 801159a:	d125      	bne.n	80115e8 <UART_SetConfig+0x218>
 801159c:	4b45      	ldr	r3, [pc, #276]	@ (80116b4 <UART_SetConfig+0x2e4>)
 801159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80115a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80115a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80115a8:	d016      	beq.n	80115d8 <UART_SetConfig+0x208>
 80115aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80115ac:	d818      	bhi.n	80115e0 <UART_SetConfig+0x210>
 80115ae:	2b80      	cmp	r3, #128	@ 0x80
 80115b0:	d00a      	beq.n	80115c8 <UART_SetConfig+0x1f8>
 80115b2:	2b80      	cmp	r3, #128	@ 0x80
 80115b4:	d814      	bhi.n	80115e0 <UART_SetConfig+0x210>
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d002      	beq.n	80115c0 <UART_SetConfig+0x1f0>
 80115ba:	2b40      	cmp	r3, #64	@ 0x40
 80115bc:	d008      	beq.n	80115d0 <UART_SetConfig+0x200>
 80115be:	e00f      	b.n	80115e0 <UART_SetConfig+0x210>
 80115c0:	2300      	movs	r3, #0
 80115c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80115c6:	e082      	b.n	80116ce <UART_SetConfig+0x2fe>
 80115c8:	2302      	movs	r3, #2
 80115ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80115ce:	e07e      	b.n	80116ce <UART_SetConfig+0x2fe>
 80115d0:	2304      	movs	r3, #4
 80115d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80115d6:	e07a      	b.n	80116ce <UART_SetConfig+0x2fe>
 80115d8:	2308      	movs	r3, #8
 80115da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80115de:	e076      	b.n	80116ce <UART_SetConfig+0x2fe>
 80115e0:	2310      	movs	r3, #16
 80115e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80115e6:	e072      	b.n	80116ce <UART_SetConfig+0x2fe>
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	4a35      	ldr	r2, [pc, #212]	@ (80116c4 <UART_SetConfig+0x2f4>)
 80115ee:	4293      	cmp	r3, r2
 80115f0:	d12a      	bne.n	8011648 <UART_SetConfig+0x278>
 80115f2:	4b30      	ldr	r3, [pc, #192]	@ (80116b4 <UART_SetConfig+0x2e4>)
 80115f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80115f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80115fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011600:	d01a      	beq.n	8011638 <UART_SetConfig+0x268>
 8011602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011606:	d81b      	bhi.n	8011640 <UART_SetConfig+0x270>
 8011608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801160c:	d00c      	beq.n	8011628 <UART_SetConfig+0x258>
 801160e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011612:	d815      	bhi.n	8011640 <UART_SetConfig+0x270>
 8011614:	2b00      	cmp	r3, #0
 8011616:	d003      	beq.n	8011620 <UART_SetConfig+0x250>
 8011618:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801161c:	d008      	beq.n	8011630 <UART_SetConfig+0x260>
 801161e:	e00f      	b.n	8011640 <UART_SetConfig+0x270>
 8011620:	2300      	movs	r3, #0
 8011622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011626:	e052      	b.n	80116ce <UART_SetConfig+0x2fe>
 8011628:	2302      	movs	r3, #2
 801162a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801162e:	e04e      	b.n	80116ce <UART_SetConfig+0x2fe>
 8011630:	2304      	movs	r3, #4
 8011632:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011636:	e04a      	b.n	80116ce <UART_SetConfig+0x2fe>
 8011638:	2308      	movs	r3, #8
 801163a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801163e:	e046      	b.n	80116ce <UART_SetConfig+0x2fe>
 8011640:	2310      	movs	r3, #16
 8011642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011646:	e042      	b.n	80116ce <UART_SetConfig+0x2fe>
 8011648:	697b      	ldr	r3, [r7, #20]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	4a17      	ldr	r2, [pc, #92]	@ (80116ac <UART_SetConfig+0x2dc>)
 801164e:	4293      	cmp	r3, r2
 8011650:	d13a      	bne.n	80116c8 <UART_SetConfig+0x2f8>
 8011652:	4b18      	ldr	r3, [pc, #96]	@ (80116b4 <UART_SetConfig+0x2e4>)
 8011654:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011658:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801165c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011660:	d01a      	beq.n	8011698 <UART_SetConfig+0x2c8>
 8011662:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011666:	d81b      	bhi.n	80116a0 <UART_SetConfig+0x2d0>
 8011668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801166c:	d00c      	beq.n	8011688 <UART_SetConfig+0x2b8>
 801166e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011672:	d815      	bhi.n	80116a0 <UART_SetConfig+0x2d0>
 8011674:	2b00      	cmp	r3, #0
 8011676:	d003      	beq.n	8011680 <UART_SetConfig+0x2b0>
 8011678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801167c:	d008      	beq.n	8011690 <UART_SetConfig+0x2c0>
 801167e:	e00f      	b.n	80116a0 <UART_SetConfig+0x2d0>
 8011680:	2300      	movs	r3, #0
 8011682:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011686:	e022      	b.n	80116ce <UART_SetConfig+0x2fe>
 8011688:	2302      	movs	r3, #2
 801168a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801168e:	e01e      	b.n	80116ce <UART_SetConfig+0x2fe>
 8011690:	2304      	movs	r3, #4
 8011692:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011696:	e01a      	b.n	80116ce <UART_SetConfig+0x2fe>
 8011698:	2308      	movs	r3, #8
 801169a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801169e:	e016      	b.n	80116ce <UART_SetConfig+0x2fe>
 80116a0:	2310      	movs	r3, #16
 80116a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80116a6:	e012      	b.n	80116ce <UART_SetConfig+0x2fe>
 80116a8:	cfff69f3 	.word	0xcfff69f3
 80116ac:	40008000 	.word	0x40008000
 80116b0:	40013800 	.word	0x40013800
 80116b4:	40021000 	.word	0x40021000
 80116b8:	40004400 	.word	0x40004400
 80116bc:	40004800 	.word	0x40004800
 80116c0:	40004c00 	.word	0x40004c00
 80116c4:	40005000 	.word	0x40005000
 80116c8:	2310      	movs	r3, #16
 80116ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80116ce:	697b      	ldr	r3, [r7, #20]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	4aae      	ldr	r2, [pc, #696]	@ (801198c <UART_SetConfig+0x5bc>)
 80116d4:	4293      	cmp	r3, r2
 80116d6:	f040 8097 	bne.w	8011808 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80116da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80116de:	2b08      	cmp	r3, #8
 80116e0:	d823      	bhi.n	801172a <UART_SetConfig+0x35a>
 80116e2:	a201      	add	r2, pc, #4	@ (adr r2, 80116e8 <UART_SetConfig+0x318>)
 80116e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116e8:	0801170d 	.word	0x0801170d
 80116ec:	0801172b 	.word	0x0801172b
 80116f0:	08011715 	.word	0x08011715
 80116f4:	0801172b 	.word	0x0801172b
 80116f8:	0801171b 	.word	0x0801171b
 80116fc:	0801172b 	.word	0x0801172b
 8011700:	0801172b 	.word	0x0801172b
 8011704:	0801172b 	.word	0x0801172b
 8011708:	08011723 	.word	0x08011723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801170c:	f7fc fc6c 	bl	800dfe8 <HAL_RCC_GetPCLK1Freq>
 8011710:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011712:	e010      	b.n	8011736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011714:	4b9e      	ldr	r3, [pc, #632]	@ (8011990 <UART_SetConfig+0x5c0>)
 8011716:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011718:	e00d      	b.n	8011736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801171a:	f7fc fbf7 	bl	800df0c <HAL_RCC_GetSysClockFreq>
 801171e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011720:	e009      	b.n	8011736 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011722:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011726:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011728:	e005      	b.n	8011736 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801172a:	2300      	movs	r3, #0
 801172c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801172e:	2301      	movs	r3, #1
 8011730:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011734:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011738:	2b00      	cmp	r3, #0
 801173a:	f000 8130 	beq.w	801199e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011742:	4a94      	ldr	r2, [pc, #592]	@ (8011994 <UART_SetConfig+0x5c4>)
 8011744:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011748:	461a      	mov	r2, r3
 801174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801174c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011750:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	685a      	ldr	r2, [r3, #4]
 8011756:	4613      	mov	r3, r2
 8011758:	005b      	lsls	r3, r3, #1
 801175a:	4413      	add	r3, r2
 801175c:	69ba      	ldr	r2, [r7, #24]
 801175e:	429a      	cmp	r2, r3
 8011760:	d305      	bcc.n	801176e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011762:	697b      	ldr	r3, [r7, #20]
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011768:	69ba      	ldr	r2, [r7, #24]
 801176a:	429a      	cmp	r2, r3
 801176c:	d903      	bls.n	8011776 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801176e:	2301      	movs	r3, #1
 8011770:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011774:	e113      	b.n	801199e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011778:	2200      	movs	r2, #0
 801177a:	60bb      	str	r3, [r7, #8]
 801177c:	60fa      	str	r2, [r7, #12]
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011782:	4a84      	ldr	r2, [pc, #528]	@ (8011994 <UART_SetConfig+0x5c4>)
 8011784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011788:	b29b      	uxth	r3, r3
 801178a:	2200      	movs	r2, #0
 801178c:	603b      	str	r3, [r7, #0]
 801178e:	607a      	str	r2, [r7, #4]
 8011790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011794:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011798:	f7ef fa2c 	bl	8000bf4 <__aeabi_uldivmod>
 801179c:	4602      	mov	r2, r0
 801179e:	460b      	mov	r3, r1
 80117a0:	4610      	mov	r0, r2
 80117a2:	4619      	mov	r1, r3
 80117a4:	f04f 0200 	mov.w	r2, #0
 80117a8:	f04f 0300 	mov.w	r3, #0
 80117ac:	020b      	lsls	r3, r1, #8
 80117ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80117b2:	0202      	lsls	r2, r0, #8
 80117b4:	6979      	ldr	r1, [r7, #20]
 80117b6:	6849      	ldr	r1, [r1, #4]
 80117b8:	0849      	lsrs	r1, r1, #1
 80117ba:	2000      	movs	r0, #0
 80117bc:	460c      	mov	r4, r1
 80117be:	4605      	mov	r5, r0
 80117c0:	eb12 0804 	adds.w	r8, r2, r4
 80117c4:	eb43 0905 	adc.w	r9, r3, r5
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	685b      	ldr	r3, [r3, #4]
 80117cc:	2200      	movs	r2, #0
 80117ce:	469a      	mov	sl, r3
 80117d0:	4693      	mov	fp, r2
 80117d2:	4652      	mov	r2, sl
 80117d4:	465b      	mov	r3, fp
 80117d6:	4640      	mov	r0, r8
 80117d8:	4649      	mov	r1, r9
 80117da:	f7ef fa0b 	bl	8000bf4 <__aeabi_uldivmod>
 80117de:	4602      	mov	r2, r0
 80117e0:	460b      	mov	r3, r1
 80117e2:	4613      	mov	r3, r2
 80117e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80117e6:	6a3b      	ldr	r3, [r7, #32]
 80117e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80117ec:	d308      	bcc.n	8011800 <UART_SetConfig+0x430>
 80117ee:	6a3b      	ldr	r3, [r7, #32]
 80117f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80117f4:	d204      	bcs.n	8011800 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80117f6:	697b      	ldr	r3, [r7, #20]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	6a3a      	ldr	r2, [r7, #32]
 80117fc:	60da      	str	r2, [r3, #12]
 80117fe:	e0ce      	b.n	801199e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8011800:	2301      	movs	r3, #1
 8011802:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011806:	e0ca      	b.n	801199e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011808:	697b      	ldr	r3, [r7, #20]
 801180a:	69db      	ldr	r3, [r3, #28]
 801180c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011810:	d166      	bne.n	80118e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8011812:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8011816:	2b08      	cmp	r3, #8
 8011818:	d827      	bhi.n	801186a <UART_SetConfig+0x49a>
 801181a:	a201      	add	r2, pc, #4	@ (adr r2, 8011820 <UART_SetConfig+0x450>)
 801181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011820:	08011845 	.word	0x08011845
 8011824:	0801184d 	.word	0x0801184d
 8011828:	08011855 	.word	0x08011855
 801182c:	0801186b 	.word	0x0801186b
 8011830:	0801185b 	.word	0x0801185b
 8011834:	0801186b 	.word	0x0801186b
 8011838:	0801186b 	.word	0x0801186b
 801183c:	0801186b 	.word	0x0801186b
 8011840:	08011863 	.word	0x08011863
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011844:	f7fc fbd0 	bl	800dfe8 <HAL_RCC_GetPCLK1Freq>
 8011848:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801184a:	e014      	b.n	8011876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801184c:	f7fc fbe2 	bl	800e014 <HAL_RCC_GetPCLK2Freq>
 8011850:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011852:	e010      	b.n	8011876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011854:	4b4e      	ldr	r3, [pc, #312]	@ (8011990 <UART_SetConfig+0x5c0>)
 8011856:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011858:	e00d      	b.n	8011876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801185a:	f7fc fb57 	bl	800df0c <HAL_RCC_GetSysClockFreq>
 801185e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011860:	e009      	b.n	8011876 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011862:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011866:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011868:	e005      	b.n	8011876 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801186a:	2300      	movs	r3, #0
 801186c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801186e:	2301      	movs	r3, #1
 8011870:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011878:	2b00      	cmp	r3, #0
 801187a:	f000 8090 	beq.w	801199e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801187e:	697b      	ldr	r3, [r7, #20]
 8011880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011882:	4a44      	ldr	r2, [pc, #272]	@ (8011994 <UART_SetConfig+0x5c4>)
 8011884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011888:	461a      	mov	r2, r3
 801188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801188c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011890:	005a      	lsls	r2, r3, #1
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	085b      	lsrs	r3, r3, #1
 8011898:	441a      	add	r2, r3
 801189a:	697b      	ldr	r3, [r7, #20]
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80118a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80118a4:	6a3b      	ldr	r3, [r7, #32]
 80118a6:	2b0f      	cmp	r3, #15
 80118a8:	d916      	bls.n	80118d8 <UART_SetConfig+0x508>
 80118aa:	6a3b      	ldr	r3, [r7, #32]
 80118ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80118b0:	d212      	bcs.n	80118d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80118b2:	6a3b      	ldr	r3, [r7, #32]
 80118b4:	b29b      	uxth	r3, r3
 80118b6:	f023 030f 	bic.w	r3, r3, #15
 80118ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80118bc:	6a3b      	ldr	r3, [r7, #32]
 80118be:	085b      	lsrs	r3, r3, #1
 80118c0:	b29b      	uxth	r3, r3
 80118c2:	f003 0307 	and.w	r3, r3, #7
 80118c6:	b29a      	uxth	r2, r3
 80118c8:	8bfb      	ldrh	r3, [r7, #30]
 80118ca:	4313      	orrs	r3, r2
 80118cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	8bfa      	ldrh	r2, [r7, #30]
 80118d4:	60da      	str	r2, [r3, #12]
 80118d6:	e062      	b.n	801199e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80118d8:	2301      	movs	r3, #1
 80118da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80118de:	e05e      	b.n	801199e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80118e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80118e4:	2b08      	cmp	r3, #8
 80118e6:	d828      	bhi.n	801193a <UART_SetConfig+0x56a>
 80118e8:	a201      	add	r2, pc, #4	@ (adr r2, 80118f0 <UART_SetConfig+0x520>)
 80118ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118ee:	bf00      	nop
 80118f0:	08011915 	.word	0x08011915
 80118f4:	0801191d 	.word	0x0801191d
 80118f8:	08011925 	.word	0x08011925
 80118fc:	0801193b 	.word	0x0801193b
 8011900:	0801192b 	.word	0x0801192b
 8011904:	0801193b 	.word	0x0801193b
 8011908:	0801193b 	.word	0x0801193b
 801190c:	0801193b 	.word	0x0801193b
 8011910:	08011933 	.word	0x08011933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011914:	f7fc fb68 	bl	800dfe8 <HAL_RCC_GetPCLK1Freq>
 8011918:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801191a:	e014      	b.n	8011946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801191c:	f7fc fb7a 	bl	800e014 <HAL_RCC_GetPCLK2Freq>
 8011920:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011922:	e010      	b.n	8011946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011924:	4b1a      	ldr	r3, [pc, #104]	@ (8011990 <UART_SetConfig+0x5c0>)
 8011926:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011928:	e00d      	b.n	8011946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801192a:	f7fc faef 	bl	800df0c <HAL_RCC_GetSysClockFreq>
 801192e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011930:	e009      	b.n	8011946 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011936:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011938:	e005      	b.n	8011946 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801193a:	2300      	movs	r3, #0
 801193c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801193e:	2301      	movs	r3, #1
 8011940:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011944:	bf00      	nop
    }

    if (pclk != 0U)
 8011946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011948:	2b00      	cmp	r3, #0
 801194a:	d028      	beq.n	801199e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801194c:	697b      	ldr	r3, [r7, #20]
 801194e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011950:	4a10      	ldr	r2, [pc, #64]	@ (8011994 <UART_SetConfig+0x5c4>)
 8011952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011956:	461a      	mov	r2, r3
 8011958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801195a:	fbb3 f2f2 	udiv	r2, r3, r2
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	685b      	ldr	r3, [r3, #4]
 8011962:	085b      	lsrs	r3, r3, #1
 8011964:	441a      	add	r2, r3
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	685b      	ldr	r3, [r3, #4]
 801196a:	fbb2 f3f3 	udiv	r3, r2, r3
 801196e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011970:	6a3b      	ldr	r3, [r7, #32]
 8011972:	2b0f      	cmp	r3, #15
 8011974:	d910      	bls.n	8011998 <UART_SetConfig+0x5c8>
 8011976:	6a3b      	ldr	r3, [r7, #32]
 8011978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801197c:	d20c      	bcs.n	8011998 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801197e:	6a3b      	ldr	r3, [r7, #32]
 8011980:	b29a      	uxth	r2, r3
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	60da      	str	r2, [r3, #12]
 8011988:	e009      	b.n	801199e <UART_SetConfig+0x5ce>
 801198a:	bf00      	nop
 801198c:	40008000 	.word	0x40008000
 8011990:	00f42400 	.word	0x00f42400
 8011994:	08014ff8 	.word	0x08014ff8
      }
      else
      {
        ret = HAL_ERROR;
 8011998:	2301      	movs	r3, #1
 801199a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	2201      	movs	r2, #1
 80119a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	2201      	movs	r2, #1
 80119aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	2200      	movs	r2, #0
 80119b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	2200      	movs	r2, #0
 80119b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80119ba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80119be:	4618      	mov	r0, r3
 80119c0:	3730      	adds	r7, #48	@ 0x30
 80119c2:	46bd      	mov	sp, r7
 80119c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080119c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80119c8:	b480      	push	{r7}
 80119ca:	b083      	sub	sp, #12
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119d4:	f003 0308 	and.w	r3, r3, #8
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d00a      	beq.n	80119f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	685b      	ldr	r3, [r3, #4]
 80119e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	430a      	orrs	r2, r1
 80119f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80119f6:	f003 0301 	and.w	r3, r3, #1
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d00a      	beq.n	8011a14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	685b      	ldr	r3, [r3, #4]
 8011a04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	430a      	orrs	r2, r1
 8011a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a18:	f003 0302 	and.w	r3, r3, #2
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d00a      	beq.n	8011a36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	685b      	ldr	r3, [r3, #4]
 8011a26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	430a      	orrs	r2, r1
 8011a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a3a:	f003 0304 	and.w	r3, r3, #4
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d00a      	beq.n	8011a58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	685b      	ldr	r3, [r3, #4]
 8011a48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	430a      	orrs	r2, r1
 8011a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a5c:	f003 0310 	and.w	r3, r3, #16
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d00a      	beq.n	8011a7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	689b      	ldr	r3, [r3, #8]
 8011a6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	430a      	orrs	r2, r1
 8011a78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a7e:	f003 0320 	and.w	r3, r3, #32
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d00a      	beq.n	8011a9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	689b      	ldr	r3, [r3, #8]
 8011a8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	430a      	orrs	r2, r1
 8011a9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d01a      	beq.n	8011ade <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	685b      	ldr	r3, [r3, #4]
 8011aae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	430a      	orrs	r2, r1
 8011abc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011ac2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011ac6:	d10a      	bne.n	8011ade <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	685b      	ldr	r3, [r3, #4]
 8011ace:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	430a      	orrs	r2, r1
 8011adc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d00a      	beq.n	8011b00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	685b      	ldr	r3, [r3, #4]
 8011af0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	430a      	orrs	r2, r1
 8011afe:	605a      	str	r2, [r3, #4]
  }
}
 8011b00:	bf00      	nop
 8011b02:	370c      	adds	r7, #12
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr

08011b0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b098      	sub	sp, #96	@ 0x60
 8011b10:	af02      	add	r7, sp, #8
 8011b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2200      	movs	r2, #0
 8011b18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011b1c:	f7f9 fa4a 	bl	800afb4 <HAL_GetTick>
 8011b20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	f003 0308 	and.w	r3, r3, #8
 8011b2c:	2b08      	cmp	r3, #8
 8011b2e:	d12f      	bne.n	8011b90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011b30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011b34:	9300      	str	r3, [sp, #0]
 8011b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b38:	2200      	movs	r2, #0
 8011b3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f000 f88e 	bl	8011c60 <UART_WaitOnFlagUntilTimeout>
 8011b44:	4603      	mov	r3, r0
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d022      	beq.n	8011b90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b52:	e853 3f00 	ldrex	r3, [r3]
 8011b56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011b5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	461a      	mov	r2, r3
 8011b66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b6a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011b6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011b70:	e841 2300 	strex	r3, r2, [r1]
 8011b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d1e6      	bne.n	8011b4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	2220      	movs	r2, #32
 8011b80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2200      	movs	r2, #0
 8011b88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b8c:	2303      	movs	r3, #3
 8011b8e:	e063      	b.n	8011c58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	f003 0304 	and.w	r3, r3, #4
 8011b9a:	2b04      	cmp	r3, #4
 8011b9c:	d149      	bne.n	8011c32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011b9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8011ba2:	9300      	str	r3, [sp, #0]
 8011ba4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f000 f857 	bl	8011c60 <UART_WaitOnFlagUntilTimeout>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d03c      	beq.n	8011c32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bc0:	e853 3f00 	ldrex	r3, [r3]
 8011bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8011bc6:	6a3b      	ldr	r3, [r7, #32]
 8011bc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	461a      	mov	r2, r3
 8011bd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8011bd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bde:	e841 2300 	strex	r3, r2, [r1]
 8011be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d1e6      	bne.n	8011bb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	3308      	adds	r3, #8
 8011bf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	e853 3f00 	ldrex	r3, [r3]
 8011bf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	f023 0301 	bic.w	r3, r3, #1
 8011c00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	3308      	adds	r3, #8
 8011c08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011c0a:	61fa      	str	r2, [r7, #28]
 8011c0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c0e:	69b9      	ldr	r1, [r7, #24]
 8011c10:	69fa      	ldr	r2, [r7, #28]
 8011c12:	e841 2300 	strex	r3, r2, [r1]
 8011c16:	617b      	str	r3, [r7, #20]
   return(result);
 8011c18:	697b      	ldr	r3, [r7, #20]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d1e5      	bne.n	8011bea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	2220      	movs	r2, #32
 8011c22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	2200      	movs	r2, #0
 8011c2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011c2e:	2303      	movs	r3, #3
 8011c30:	e012      	b.n	8011c58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2220      	movs	r2, #32
 8011c36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	2220      	movs	r2, #32
 8011c3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	2200      	movs	r2, #0
 8011c46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	2200      	movs	r2, #0
 8011c52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011c56:	2300      	movs	r3, #0
}
 8011c58:	4618      	mov	r0, r3
 8011c5a:	3758      	adds	r7, #88	@ 0x58
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	bd80      	pop	{r7, pc}

08011c60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b084      	sub	sp, #16
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	60f8      	str	r0, [r7, #12]
 8011c68:	60b9      	str	r1, [r7, #8]
 8011c6a:	603b      	str	r3, [r7, #0]
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011c70:	e04f      	b.n	8011d12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011c72:	69bb      	ldr	r3, [r7, #24]
 8011c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c78:	d04b      	beq.n	8011d12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011c7a:	f7f9 f99b 	bl	800afb4 <HAL_GetTick>
 8011c7e:	4602      	mov	r2, r0
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	1ad3      	subs	r3, r2, r3
 8011c84:	69ba      	ldr	r2, [r7, #24]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d302      	bcc.n	8011c90 <UART_WaitOnFlagUntilTimeout+0x30>
 8011c8a:	69bb      	ldr	r3, [r7, #24]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d101      	bne.n	8011c94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011c90:	2303      	movs	r3, #3
 8011c92:	e04e      	b.n	8011d32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	681b      	ldr	r3, [r3, #0]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	f003 0304 	and.w	r3, r3, #4
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d037      	beq.n	8011d12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	2b80      	cmp	r3, #128	@ 0x80
 8011ca6:	d034      	beq.n	8011d12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	2b40      	cmp	r3, #64	@ 0x40
 8011cac:	d031      	beq.n	8011d12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	69db      	ldr	r3, [r3, #28]
 8011cb4:	f003 0308 	and.w	r3, r3, #8
 8011cb8:	2b08      	cmp	r3, #8
 8011cba:	d110      	bne.n	8011cde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	2208      	movs	r2, #8
 8011cc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011cc4:	68f8      	ldr	r0, [r7, #12]
 8011cc6:	f000 f920 	bl	8011f0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	2208      	movs	r2, #8
 8011cce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011cda:	2301      	movs	r3, #1
 8011cdc:	e029      	b.n	8011d32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	69db      	ldr	r3, [r3, #28]
 8011ce4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011ce8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011cec:	d111      	bne.n	8011d12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	681b      	ldr	r3, [r3, #0]
 8011cf2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011cf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011cf8:	68f8      	ldr	r0, [r7, #12]
 8011cfa:	f000 f906 	bl	8011f0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	2220      	movs	r2, #32
 8011d02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	2200      	movs	r2, #0
 8011d0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011d0e:	2303      	movs	r3, #3
 8011d10:	e00f      	b.n	8011d32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	69da      	ldr	r2, [r3, #28]
 8011d18:	68bb      	ldr	r3, [r7, #8]
 8011d1a:	4013      	ands	r3, r2
 8011d1c:	68ba      	ldr	r2, [r7, #8]
 8011d1e:	429a      	cmp	r2, r3
 8011d20:	bf0c      	ite	eq
 8011d22:	2301      	moveq	r3, #1
 8011d24:	2300      	movne	r3, #0
 8011d26:	b2db      	uxtb	r3, r3
 8011d28:	461a      	mov	r2, r3
 8011d2a:	79fb      	ldrb	r3, [r7, #7]
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	d0a0      	beq.n	8011c72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011d30:	2300      	movs	r3, #0
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3710      	adds	r7, #16
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}
	...

08011d3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b096      	sub	sp, #88	@ 0x58
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	60f8      	str	r0, [r7, #12]
 8011d44:	60b9      	str	r1, [r7, #8]
 8011d46:	4613      	mov	r3, r2
 8011d48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	68ba      	ldr	r2, [r7, #8]
 8011d4e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	88fa      	ldrh	r2, [r7, #6]
 8011d54:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	2222      	movs	r2, #34	@ 0x22
 8011d64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d02d      	beq.n	8011dce <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d78:	4a40      	ldr	r2, [pc, #256]	@ (8011e7c <UART_Start_Receive_DMA+0x140>)
 8011d7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d82:	4a3f      	ldr	r2, [pc, #252]	@ (8011e80 <UART_Start_Receive_DMA+0x144>)
 8011d84:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d8c:	4a3d      	ldr	r2, [pc, #244]	@ (8011e84 <UART_Start_Receive_DMA+0x148>)
 8011d8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d96:	2200      	movs	r2, #0
 8011d98:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	3324      	adds	r3, #36	@ 0x24
 8011da6:	4619      	mov	r1, r3
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011dac:	461a      	mov	r2, r3
 8011dae:	88fb      	ldrh	r3, [r7, #6]
 8011db0:	f7fa ff3c 	bl	800cc2c <HAL_DMA_Start_IT>
 8011db4:	4603      	mov	r3, r0
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d009      	beq.n	8011dce <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	2210      	movs	r2, #16
 8011dbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	2220      	movs	r2, #32
 8011dc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8011dca:	2301      	movs	r3, #1
 8011dcc:	e051      	b.n	8011e72 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	691b      	ldr	r3, [r3, #16]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d018      	beq.n	8011e08 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011dde:	e853 3f00 	ldrex	r3, [r3]
 8011de2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011dea:	657b      	str	r3, [r7, #84]	@ 0x54
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	461a      	mov	r2, r3
 8011df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011df4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011df6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011df8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011dfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011dfc:	e841 2300 	strex	r3, r2, [r1]
 8011e00:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8011e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d1e6      	bne.n	8011dd6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	3308      	adds	r3, #8
 8011e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e12:	e853 3f00 	ldrex	r3, [r3]
 8011e16:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e1a:	f043 0301 	orr.w	r3, r3, #1
 8011e1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	3308      	adds	r3, #8
 8011e26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011e28:	637a      	str	r2, [r7, #52]	@ 0x34
 8011e2a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e2c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011e2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e30:	e841 2300 	strex	r3, r2, [r1]
 8011e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d1e5      	bne.n	8011e08 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	3308      	adds	r3, #8
 8011e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e44:	697b      	ldr	r3, [r7, #20]
 8011e46:	e853 3f00 	ldrex	r3, [r3]
 8011e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	3308      	adds	r3, #8
 8011e5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011e5c:	623a      	str	r2, [r7, #32]
 8011e5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e60:	69f9      	ldr	r1, [r7, #28]
 8011e62:	6a3a      	ldr	r2, [r7, #32]
 8011e64:	e841 2300 	strex	r3, r2, [r1]
 8011e68:	61bb      	str	r3, [r7, #24]
   return(result);
 8011e6a:	69bb      	ldr	r3, [r7, #24]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d1e5      	bne.n	8011e3c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8011e70:	2300      	movs	r3, #0
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3758      	adds	r7, #88	@ 0x58
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	08012095 	.word	0x08012095
 8011e80:	080121c9 	.word	0x080121c9
 8011e84:	0801220f 	.word	0x0801220f

08011e88 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011e88:	b480      	push	{r7}
 8011e8a:	b08f      	sub	sp, #60	@ 0x3c
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e96:	6a3b      	ldr	r3, [r7, #32]
 8011e98:	e853 3f00 	ldrex	r3, [r3]
 8011e9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8011e9e:	69fb      	ldr	r3, [r7, #28]
 8011ea0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	461a      	mov	r2, r3
 8011eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011eb0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011eb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011eb6:	e841 2300 	strex	r3, r2, [r1]
 8011eba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d1e6      	bne.n	8011e90 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	3308      	adds	r3, #8
 8011ec8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	e853 3f00 	ldrex	r3, [r3]
 8011ed0:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011ed8:	633b      	str	r3, [r7, #48]	@ 0x30
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	3308      	adds	r3, #8
 8011ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ee2:	61ba      	str	r2, [r7, #24]
 8011ee4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ee6:	6979      	ldr	r1, [r7, #20]
 8011ee8:	69ba      	ldr	r2, [r7, #24]
 8011eea:	e841 2300 	strex	r3, r2, [r1]
 8011eee:	613b      	str	r3, [r7, #16]
   return(result);
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d1e5      	bne.n	8011ec2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	2220      	movs	r2, #32
 8011efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8011efe:	bf00      	nop
 8011f00:	373c      	adds	r7, #60	@ 0x3c
 8011f02:	46bd      	mov	sp, r7
 8011f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f08:	4770      	bx	lr

08011f0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011f0a:	b480      	push	{r7}
 8011f0c:	b095      	sub	sp, #84	@ 0x54
 8011f0e:	af00      	add	r7, sp, #0
 8011f10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f1a:	e853 3f00 	ldrex	r3, [r3]
 8011f1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	461a      	mov	r2, r3
 8011f2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f30:	643b      	str	r3, [r7, #64]	@ 0x40
 8011f32:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011f36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011f38:	e841 2300 	strex	r3, r2, [r1]
 8011f3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d1e6      	bne.n	8011f12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	3308      	adds	r3, #8
 8011f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f4c:	6a3b      	ldr	r3, [r7, #32]
 8011f4e:	e853 3f00 	ldrex	r3, [r3]
 8011f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8011f54:	69fb      	ldr	r3, [r7, #28]
 8011f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011f5a:	f023 0301 	bic.w	r3, r3, #1
 8011f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	3308      	adds	r3, #8
 8011f66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011f68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011f6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f70:	e841 2300 	strex	r3, r2, [r1]
 8011f74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d1e3      	bne.n	8011f44 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011f80:	2b01      	cmp	r3, #1
 8011f82:	d118      	bne.n	8011fb6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	e853 3f00 	ldrex	r3, [r3]
 8011f90:	60bb      	str	r3, [r7, #8]
   return(result);
 8011f92:	68bb      	ldr	r3, [r7, #8]
 8011f94:	f023 0310 	bic.w	r3, r3, #16
 8011f98:	647b      	str	r3, [r7, #68]	@ 0x44
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	461a      	mov	r2, r3
 8011fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011fa2:	61bb      	str	r3, [r7, #24]
 8011fa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fa6:	6979      	ldr	r1, [r7, #20]
 8011fa8:	69ba      	ldr	r2, [r7, #24]
 8011faa:	e841 2300 	strex	r3, r2, [r1]
 8011fae:	613b      	str	r3, [r7, #16]
   return(result);
 8011fb0:	693b      	ldr	r3, [r7, #16]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d1e6      	bne.n	8011f84 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	2220      	movs	r2, #32
 8011fba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011fca:	bf00      	nop
 8011fcc:	3754      	adds	r7, #84	@ 0x54
 8011fce:	46bd      	mov	sp, r7
 8011fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd4:	4770      	bx	lr

08011fd6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011fd6:	b580      	push	{r7, lr}
 8011fd8:	b090      	sub	sp, #64	@ 0x40
 8011fda:	af00      	add	r7, sp, #0
 8011fdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	f003 0320 	and.w	r3, r3, #32
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d137      	bne.n	8012062 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8011ff2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	3308      	adds	r3, #8
 8012000:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012004:	e853 3f00 	ldrex	r3, [r3]
 8012008:	623b      	str	r3, [r7, #32]
   return(result);
 801200a:	6a3b      	ldr	r3, [r7, #32]
 801200c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012010:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	3308      	adds	r3, #8
 8012018:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801201a:	633a      	str	r2, [r7, #48]	@ 0x30
 801201c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801201e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012022:	e841 2300 	strex	r3, r2, [r1]
 8012026:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8012028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801202a:	2b00      	cmp	r3, #0
 801202c:	d1e5      	bne.n	8011ffa <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801202e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	e853 3f00 	ldrex	r3, [r3]
 801203a:	60fb      	str	r3, [r7, #12]
   return(result);
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012042:	637b      	str	r3, [r7, #52]	@ 0x34
 8012044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	461a      	mov	r2, r3
 801204a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801204c:	61fb      	str	r3, [r7, #28]
 801204e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012050:	69b9      	ldr	r1, [r7, #24]
 8012052:	69fa      	ldr	r2, [r7, #28]
 8012054:	e841 2300 	strex	r3, r2, [r1]
 8012058:	617b      	str	r3, [r7, #20]
   return(result);
 801205a:	697b      	ldr	r3, [r7, #20]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d1e6      	bne.n	801202e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012060:	e004      	b.n	801206c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8012062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012064:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012068:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801206a:	4798      	blx	r3
}
 801206c:	bf00      	nop
 801206e:	3740      	adds	r7, #64	@ 0x40
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}

08012074 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b084      	sub	sp, #16
 8012078:	af00      	add	r7, sp, #0
 801207a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012080:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012088:	68f8      	ldr	r0, [r7, #12]
 801208a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801208c:	bf00      	nop
 801208e:	3710      	adds	r7, #16
 8012090:	46bd      	mov	sp, r7
 8012092:	bd80      	pop	{r7, pc}

08012094 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b09c      	sub	sp, #112	@ 0x70
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120a0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	f003 0320 	and.w	r3, r3, #32
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d171      	bne.n	8012194 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80120b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120b2:	2200      	movs	r2, #0
 80120b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80120b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80120c0:	e853 3f00 	ldrex	r3, [r3]
 80120c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80120c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80120c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80120cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80120ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	461a      	mov	r2, r3
 80120d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80120d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80120d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80120dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80120de:	e841 2300 	strex	r3, r2, [r1]
 80120e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80120e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d1e6      	bne.n	80120b8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80120ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	3308      	adds	r3, #8
 80120f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120f4:	e853 3f00 	ldrex	r3, [r3]
 80120f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80120fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80120fc:	f023 0301 	bic.w	r3, r3, #1
 8012100:	667b      	str	r3, [r7, #100]	@ 0x64
 8012102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	3308      	adds	r3, #8
 8012108:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801210a:	647a      	str	r2, [r7, #68]	@ 0x44
 801210c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801210e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8012110:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012112:	e841 2300 	strex	r3, r2, [r1]
 8012116:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8012118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801211a:	2b00      	cmp	r3, #0
 801211c:	d1e5      	bne.n	80120ea <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801211e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	3308      	adds	r3, #8
 8012124:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012128:	e853 3f00 	ldrex	r3, [r3]
 801212c:	623b      	str	r3, [r7, #32]
   return(result);
 801212e:	6a3b      	ldr	r3, [r7, #32]
 8012130:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012134:	663b      	str	r3, [r7, #96]	@ 0x60
 8012136:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	3308      	adds	r3, #8
 801213c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801213e:	633a      	str	r2, [r7, #48]	@ 0x30
 8012140:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012142:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012146:	e841 2300 	strex	r3, r2, [r1]
 801214a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801214c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801214e:	2b00      	cmp	r3, #0
 8012150:	d1e5      	bne.n	801211e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012152:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012154:	2220      	movs	r2, #32
 8012156:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801215a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801215c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801215e:	2b01      	cmp	r3, #1
 8012160:	d118      	bne.n	8012194 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012164:	681b      	ldr	r3, [r3, #0]
 8012166:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	e853 3f00 	ldrex	r3, [r3]
 801216e:	60fb      	str	r3, [r7, #12]
   return(result);
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	f023 0310 	bic.w	r3, r3, #16
 8012176:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	461a      	mov	r2, r3
 801217e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012180:	61fb      	str	r3, [r7, #28]
 8012182:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012184:	69b9      	ldr	r1, [r7, #24]
 8012186:	69fa      	ldr	r2, [r7, #28]
 8012188:	e841 2300 	strex	r3, r2, [r1]
 801218c:	617b      	str	r3, [r7, #20]
   return(result);
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d1e6      	bne.n	8012162 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012196:	2200      	movs	r2, #0
 8012198:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801219a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801219c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801219e:	2b01      	cmp	r3, #1
 80121a0:	d109      	bne.n	80121b6 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80121a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80121a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80121aa:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80121ae:	4611      	mov	r1, r2
 80121b0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80121b2:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80121b4:	e004      	b.n	80121c0 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 80121b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80121bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80121be:	4798      	blx	r3
}
 80121c0:	bf00      	nop
 80121c2:	3770      	adds	r7, #112	@ 0x70
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}

080121c8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b084      	sub	sp, #16
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80121d4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	2201      	movs	r2, #1
 80121da:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80121e0:	2b01      	cmp	r3, #1
 80121e2:	d10b      	bne.n	80121fc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80121ea:	68fa      	ldr	r2, [r7, #12]
 80121ec:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80121f0:	0852      	lsrs	r2, r2, #1
 80121f2:	b292      	uxth	r2, r2
 80121f4:	4611      	mov	r1, r2
 80121f6:	68f8      	ldr	r0, [r7, #12]
 80121f8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80121fa:	e004      	b.n	8012206 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 80121fc:	68fb      	ldr	r3, [r7, #12]
 80121fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012202:	68f8      	ldr	r0, [r7, #12]
 8012204:	4798      	blx	r3
}
 8012206:	bf00      	nop
 8012208:	3710      	adds	r7, #16
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}

0801220e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801220e:	b580      	push	{r7, lr}
 8012210:	b086      	sub	sp, #24
 8012212:	af00      	add	r7, sp, #0
 8012214:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801221a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801221c:	697b      	ldr	r3, [r7, #20]
 801221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012222:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801222a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801222c:	697b      	ldr	r3, [r7, #20]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	689b      	ldr	r3, [r3, #8]
 8012232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012236:	2b80      	cmp	r3, #128	@ 0x80
 8012238:	d109      	bne.n	801224e <UART_DMAError+0x40>
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	2b21      	cmp	r3, #33	@ 0x21
 801223e:	d106      	bne.n	801224e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012240:	697b      	ldr	r3, [r7, #20]
 8012242:	2200      	movs	r2, #0
 8012244:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8012248:	6978      	ldr	r0, [r7, #20]
 801224a:	f7ff fe1d 	bl	8011e88 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	689b      	ldr	r3, [r3, #8]
 8012254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012258:	2b40      	cmp	r3, #64	@ 0x40
 801225a:	d109      	bne.n	8012270 <UART_DMAError+0x62>
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	2b22      	cmp	r3, #34	@ 0x22
 8012260:	d106      	bne.n	8012270 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012262:	697b      	ldr	r3, [r7, #20]
 8012264:	2200      	movs	r2, #0
 8012266:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 801226a:	6978      	ldr	r0, [r7, #20]
 801226c:	f7ff fe4d 	bl	8011f0a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012270:	697b      	ldr	r3, [r7, #20]
 8012272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8012276:	f043 0210 	orr.w	r2, r3, #16
 801227a:	697b      	ldr	r3, [r7, #20]
 801227c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8012280:	697b      	ldr	r3, [r7, #20]
 8012282:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8012286:	6978      	ldr	r0, [r7, #20]
 8012288:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801228a:	bf00      	nop
 801228c:	3718      	adds	r7, #24
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}

08012292 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012292:	b580      	push	{r7, lr}
 8012294:	b084      	sub	sp, #16
 8012296:	af00      	add	r7, sp, #0
 8012298:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801229e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	2200      	movs	r2, #0
 80122a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80122ae:	68f8      	ldr	r0, [r7, #12]
 80122b0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80122b2:	bf00      	nop
 80122b4:	3710      	adds	r7, #16
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}

080122ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80122ba:	b580      	push	{r7, lr}
 80122bc:	b088      	sub	sp, #32
 80122be:	af00      	add	r7, sp, #0
 80122c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	e853 3f00 	ldrex	r3, [r3]
 80122ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80122d6:	61fb      	str	r3, [r7, #28]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	461a      	mov	r2, r3
 80122de:	69fb      	ldr	r3, [r7, #28]
 80122e0:	61bb      	str	r3, [r7, #24]
 80122e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122e4:	6979      	ldr	r1, [r7, #20]
 80122e6:	69ba      	ldr	r2, [r7, #24]
 80122e8:	e841 2300 	strex	r3, r2, [r1]
 80122ec:	613b      	str	r3, [r7, #16]
   return(result);
 80122ee:	693b      	ldr	r3, [r7, #16]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d1e6      	bne.n	80122c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2220      	movs	r2, #32
 80122f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2200      	movs	r2, #0
 8012300:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801230c:	bf00      	nop
 801230e:	3720      	adds	r7, #32
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}

08012314 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012314:	b480      	push	{r7}
 8012316:	b083      	sub	sp, #12
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801231c:	bf00      	nop
 801231e:	370c      	adds	r7, #12
 8012320:	46bd      	mov	sp, r7
 8012322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012326:	4770      	bx	lr

08012328 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012328:	b480      	push	{r7}
 801232a:	b083      	sub	sp, #12
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012330:	bf00      	nop
 8012332:	370c      	adds	r7, #12
 8012334:	46bd      	mov	sp, r7
 8012336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233a:	4770      	bx	lr

0801233c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801233c:	b480      	push	{r7}
 801233e:	b083      	sub	sp, #12
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012344:	bf00      	nop
 8012346:	370c      	adds	r7, #12
 8012348:	46bd      	mov	sp, r7
 801234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234e:	4770      	bx	lr

08012350 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012350:	b480      	push	{r7}
 8012352:	b085      	sub	sp, #20
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801235e:	2b01      	cmp	r3, #1
 8012360:	d101      	bne.n	8012366 <HAL_UARTEx_DisableFifoMode+0x16>
 8012362:	2302      	movs	r3, #2
 8012364:	e027      	b.n	80123b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	2201      	movs	r2, #1
 801236a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2224      	movs	r2, #36	@ 0x24
 8012372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	681b      	ldr	r3, [r3, #0]
 801237c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	681a      	ldr	r2, [r3, #0]
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	f022 0201 	bic.w	r2, r2, #1
 801238c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8012394:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2200      	movs	r2, #0
 801239a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	68fa      	ldr	r2, [r7, #12]
 80123a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2220      	movs	r2, #32
 80123a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2200      	movs	r2, #0
 80123b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80123b4:	2300      	movs	r3, #0
}
 80123b6:	4618      	mov	r0, r3
 80123b8:	3714      	adds	r7, #20
 80123ba:	46bd      	mov	sp, r7
 80123bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123c0:	4770      	bx	lr

080123c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80123c2:	b580      	push	{r7, lr}
 80123c4:	b084      	sub	sp, #16
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	6078      	str	r0, [r7, #4]
 80123ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80123d2:	2b01      	cmp	r3, #1
 80123d4:	d101      	bne.n	80123da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80123d6:	2302      	movs	r3, #2
 80123d8:	e02d      	b.n	8012436 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	2201      	movs	r2, #1
 80123de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	2224      	movs	r2, #36	@ 0x24
 80123e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	681a      	ldr	r2, [r3, #0]
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	f022 0201 	bic.w	r2, r2, #1
 8012400:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	689b      	ldr	r3, [r3, #8]
 8012408:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	683a      	ldr	r2, [r7, #0]
 8012412:	430a      	orrs	r2, r1
 8012414:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012416:	6878      	ldr	r0, [r7, #4]
 8012418:	f000 f850 	bl	80124bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	68fa      	ldr	r2, [r7, #12]
 8012422:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	2220      	movs	r2, #32
 8012428:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	2200      	movs	r2, #0
 8012430:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012434:	2300      	movs	r3, #0
}
 8012436:	4618      	mov	r0, r3
 8012438:	3710      	adds	r7, #16
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}

0801243e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801243e:	b580      	push	{r7, lr}
 8012440:	b084      	sub	sp, #16
 8012442:	af00      	add	r7, sp, #0
 8012444:	6078      	str	r0, [r7, #4]
 8012446:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801244e:	2b01      	cmp	r3, #1
 8012450:	d101      	bne.n	8012456 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012452:	2302      	movs	r3, #2
 8012454:	e02d      	b.n	80124b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	2201      	movs	r2, #1
 801245a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	2224      	movs	r2, #36	@ 0x24
 8012462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	681a      	ldr	r2, [r3, #0]
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	f022 0201 	bic.w	r2, r2, #1
 801247c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	689b      	ldr	r3, [r3, #8]
 8012484:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	683a      	ldr	r2, [r7, #0]
 801248e:	430a      	orrs	r2, r1
 8012490:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f000 f812 	bl	80124bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	68fa      	ldr	r2, [r7, #12]
 801249e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2220      	movs	r2, #32
 80124a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	2200      	movs	r2, #0
 80124ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80124b0:	2300      	movs	r3, #0
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3710      	adds	r7, #16
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}
	...

080124bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80124bc:	b480      	push	{r7}
 80124be:	b085      	sub	sp, #20
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d108      	bne.n	80124de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2201      	movs	r2, #1
 80124d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2201      	movs	r2, #1
 80124d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80124dc:	e031      	b.n	8012542 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80124de:	2308      	movs	r3, #8
 80124e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80124e2:	2308      	movs	r3, #8
 80124e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	689b      	ldr	r3, [r3, #8]
 80124ec:	0e5b      	lsrs	r3, r3, #25
 80124ee:	b2db      	uxtb	r3, r3
 80124f0:	f003 0307 	and.w	r3, r3, #7
 80124f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	689b      	ldr	r3, [r3, #8]
 80124fc:	0f5b      	lsrs	r3, r3, #29
 80124fe:	b2db      	uxtb	r3, r3
 8012500:	f003 0307 	and.w	r3, r3, #7
 8012504:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012506:	7bbb      	ldrb	r3, [r7, #14]
 8012508:	7b3a      	ldrb	r2, [r7, #12]
 801250a:	4911      	ldr	r1, [pc, #68]	@ (8012550 <UARTEx_SetNbDataToProcess+0x94>)
 801250c:	5c8a      	ldrb	r2, [r1, r2]
 801250e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012512:	7b3a      	ldrb	r2, [r7, #12]
 8012514:	490f      	ldr	r1, [pc, #60]	@ (8012554 <UARTEx_SetNbDataToProcess+0x98>)
 8012516:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012518:	fb93 f3f2 	sdiv	r3, r3, r2
 801251c:	b29a      	uxth	r2, r3
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012524:	7bfb      	ldrb	r3, [r7, #15]
 8012526:	7b7a      	ldrb	r2, [r7, #13]
 8012528:	4909      	ldr	r1, [pc, #36]	@ (8012550 <UARTEx_SetNbDataToProcess+0x94>)
 801252a:	5c8a      	ldrb	r2, [r1, r2]
 801252c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012530:	7b7a      	ldrb	r2, [r7, #13]
 8012532:	4908      	ldr	r1, [pc, #32]	@ (8012554 <UARTEx_SetNbDataToProcess+0x98>)
 8012534:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012536:	fb93 f3f2 	sdiv	r3, r3, r2
 801253a:	b29a      	uxth	r2, r3
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8012542:	bf00      	nop
 8012544:	3714      	adds	r7, #20
 8012546:	46bd      	mov	sp, r7
 8012548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254c:	4770      	bx	lr
 801254e:	bf00      	nop
 8012550:	08015010 	.word	0x08015010
 8012554:	08015018 	.word	0x08015018

08012558 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012558:	b480      	push	{r7}
 801255a:	b08b      	sub	sp, #44	@ 0x2c
 801255c:	af00      	add	r7, sp, #0
 801255e:	60f8      	str	r0, [r7, #12]
 8012560:	60b9      	str	r1, [r7, #8]
 8012562:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	685b      	ldr	r3, [r3, #4]
 8012568:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	685b      	ldr	r3, [r3, #4]
 801256e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	881b      	ldrh	r3, [r3, #0]
 801257a:	461a      	mov	r2, r3
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	885b      	ldrh	r3, [r3, #2]
 8012580:	fb02 f303 	mul.w	r3, r2, r3
 8012584:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 801258a:	e013      	b.n	80125b4 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 801258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801258e:	1d1a      	adds	r2, r3, #4
 8012590:	627a      	str	r2, [r7, #36]	@ 0x24
 8012592:	ed93 7a00 	vldr	s14, [r3]
 8012596:	6a3b      	ldr	r3, [r7, #32]
 8012598:	1d1a      	adds	r2, r3, #4
 801259a:	623a      	str	r2, [r7, #32]
 801259c:	edd3 7a00 	vldr	s15, [r3]
 80125a0:	69fb      	ldr	r3, [r7, #28]
 80125a2:	1d1a      	adds	r2, r3, #4
 80125a4:	61fa      	str	r2, [r7, #28]
 80125a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80125aa:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80125ae:	69bb      	ldr	r3, [r7, #24]
 80125b0:	3b01      	subs	r3, #1
 80125b2:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 80125b4:	69bb      	ldr	r3, [r7, #24]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d1e8      	bne.n	801258c <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80125ba:	2300      	movs	r3, #0
 80125bc:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 80125be:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80125c2:	4618      	mov	r0, r3
 80125c4:	372c      	adds	r7, #44	@ 0x2c
 80125c6:	46bd      	mov	sp, r7
 80125c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125cc:	4770      	bx	lr

080125ce <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 80125ce:	b480      	push	{r7}
 80125d0:	b085      	sub	sp, #20
 80125d2:	af00      	add	r7, sp, #0
 80125d4:	60f8      	str	r0, [r7, #12]
 80125d6:	607b      	str	r3, [r7, #4]
 80125d8:	460b      	mov	r3, r1
 80125da:	817b      	strh	r3, [r7, #10]
 80125dc:	4613      	mov	r3, r2
 80125de:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	897a      	ldrh	r2, [r7, #10]
 80125e4:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	893a      	ldrh	r2, [r7, #8]
 80125ea:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	687a      	ldr	r2, [r7, #4]
 80125f0:	605a      	str	r2, [r3, #4]
}
 80125f2:	bf00      	nop
 80125f4:	3714      	adds	r7, #20
 80125f6:	46bd      	mov	sp, r7
 80125f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fc:	4770      	bx	lr

080125fe <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80125fe:	b480      	push	{r7}
 8012600:	b0bb      	sub	sp, #236	@ 0xec
 8012602:	af00      	add	r7, sp, #0
 8012604:	6078      	str	r0, [r7, #4]
 8012606:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	685b      	ldr	r3, [r3, #4]
 801260c:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	685b      	ldr	r3, [r3, #4]
 8012612:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	881b      	ldrh	r3, [r3, #0]
 8012618:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	885b      	ldrh	r3, [r3, #2]
 801261e:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 8012620:	f04f 0300 	mov.w	r3, #0
 8012624:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8012628:	f04f 0300 	mov.w	r3, #0
 801262c:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 801262e:	2300      	movs	r3, #0
 8012630:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 8012634:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 801263a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801263c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 8012640:	e03b      	b.n	80126ba <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 8012642:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012644:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8012648:	1ad3      	subs	r3, r2, r3
 801264a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 801264e:	e00c      	b.n	801266a <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 8012650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012654:	1d1a      	adds	r2, r3, #4
 8012656:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 801265a:	f04f 0200 	mov.w	r2, #0
 801265e:	601a      	str	r2, [r3, #0]
        j--;
 8012660:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012664:	3b01      	subs	r3, #1
 8012666:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 801266a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801266e:	2b00      	cmp	r3, #0
 8012670:	d1ee      	bne.n	8012650 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 8012672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012676:	1d1a      	adds	r2, r3, #4
 8012678:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 801267c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8012680:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 8012682:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8012686:	3b01      	subs	r3, #1
 8012688:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 801268c:	e00c      	b.n	80126a8 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 801268e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012692:	1d1a      	adds	r2, r3, #4
 8012694:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8012698:	f04f 0200 	mov.w	r2, #0
 801269c:	601a      	str	r2, [r3, #0]
        j--;
 801269e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80126a2:	3b01      	subs	r3, #1
 80126a4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 80126a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d1ee      	bne.n	801268e <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 80126b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80126b4:	3b01      	subs	r3, #1
 80126b6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 80126ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d1bf      	bne.n	8012642 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 80126c2:	2300      	movs	r3, #0
 80126c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80126c8:	e2c7      	b.n	8012c5a <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 80126ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80126ce:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	685a      	ldr	r2, [r3, #4]
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	885b      	ldrh	r3, [r3, #2]
 80126d8:	3301      	adds	r3, #1
 80126da:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 80126de:	fb01 f303 	mul.w	r3, r1, r3
 80126e2:	009b      	lsls	r3, r3, #2
 80126e4:	4413      	add	r3, r2
 80126e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 80126ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 80126f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80126f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80126fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012700:	3301      	adds	r3, #1
 8012702:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012706:	e02c      	b.n	8012762 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	685a      	ldr	r2, [r3, #4]
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	885b      	ldrh	r3, [r3, #2]
 8012710:	4619      	mov	r1, r3
 8012712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012716:	fb03 f101 	mul.w	r1, r3, r1
 801271a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801271e:	440b      	add	r3, r1
 8012720:	009b      	lsls	r3, r3, #2
 8012722:	4413      	add	r3, r2
 8012724:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 8012728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 8012730:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8012734:	eeb0 7ae7 	vabs.f32	s14, s15
 8012738:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801273c:	eef0 7ae7 	vabs.f32	s15, s15
 8012740:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012748:	dd06      	ble.n	8012758 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 801274a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801274e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 8012752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012754:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8012758:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801275c:	3301      	adds	r3, #1
 801275e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012762:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012766:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012768:	429a      	cmp	r2, r3
 801276a:	d3cd      	bcc.n	8012708 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 801276c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012770:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012778:	f000 809b 	beq.w	80128b2 <arm_mat_inverse_f32+0x2b4>
 801277c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012780:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012784:	429a      	cmp	r2, r3
 8012786:	f000 8094 	beq.w	80128b2 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	685b      	ldr	r3, [r3, #4]
 801278e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	685b      	ldr	r3, [r3, #4]
 8012796:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	885b      	ldrh	r3, [r3, #2]
 801279e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80127a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80127a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80127a6:	1ad3      	subs	r3, r2, r3
 80127a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80127aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80127ae:	fb03 f202 	mul.w	r2, r3, r2
 80127b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80127b6:	4413      	add	r3, r2
 80127b8:	009b      	lsls	r3, r3, #2
 80127ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80127be:	4413      	add	r3, r2
 80127c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80127c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80127c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80127ca:	fb03 f202 	mul.w	r2, r3, r2
 80127ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80127d2:	4413      	add	r3, r2
 80127d4:	009b      	lsls	r3, r3, #2
 80127d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80127da:	4413      	add	r3, r2
 80127dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80127e0:	2300      	movs	r3, #0
 80127e2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80127e6:	e018      	b.n	801281a <arm_mat_inverse_f32+0x21c>
 80127e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80127f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80127f4:	1d1a      	adds	r2, r3, #4
 80127f6:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 80127fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80127fe:	6812      	ldr	r2, [r2, #0]
 8012800:	601a      	str	r2, [r3, #0]
 8012802:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8012806:	1d1a      	adds	r2, r3, #4
 8012808:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 801280c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801280e:	601a      	str	r2, [r3, #0]
 8012810:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8012814:	3301      	adds	r3, #1
 8012816:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801281a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801281e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012820:	429a      	cmp	r2, r3
 8012822:	dbe1      	blt.n	80127e8 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 8012824:	683b      	ldr	r3, [r7, #0]
 8012826:	685b      	ldr	r3, [r3, #4]
 8012828:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	885b      	ldrh	r3, [r3, #2]
 8012838:	647b      	str	r3, [r7, #68]	@ 0x44
 801283a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801283c:	643b      	str	r3, [r7, #64]	@ 0x40
 801283e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012840:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012842:	fb02 f303 	mul.w	r3, r2, r3
 8012846:	009b      	lsls	r3, r3, #2
 8012848:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801284c:	4413      	add	r3, r2
 801284e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8012852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012854:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012858:	fb02 f303 	mul.w	r3, r2, r3
 801285c:	009b      	lsls	r3, r3, #2
 801285e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012862:	4413      	add	r3, r2
 8012864:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012868:	2300      	movs	r3, #0
 801286a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801286e:	e018      	b.n	80128a2 <arm_mat_inverse_f32+0x2a4>
 8012870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012878:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801287c:	1d1a      	adds	r2, r3, #4
 801287e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8012882:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012886:	6812      	ldr	r2, [r2, #0]
 8012888:	601a      	str	r2, [r3, #0]
 801288a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801288e:	1d1a      	adds	r2, r3, #4
 8012890:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8012894:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012896:	601a      	str	r2, [r3, #0]
 8012898:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801289c:	3301      	adds	r3, #1
 801289e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80128a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80128a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80128a8:	429a      	cmp	r2, r3
 80128aa:	dbe1      	blt.n	8012870 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 80128ac:	2301      	movs	r3, #1
 80128ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 80128b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80128b6:	2b01      	cmp	r3, #1
 80128b8:	d009      	beq.n	80128ce <arm_mat_inverse_f32+0x2d0>
 80128ba:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80128be:	eef5 7a40 	vcmp.f32	s15, #0.0
 80128c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128c6:	d102      	bne.n	80128ce <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 80128c8:	f06f 0304 	mvn.w	r3, #4
 80128cc:	e208      	b.n	8012ce0 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 80128ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80128d2:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 80128d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80128da:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	685b      	ldr	r3, [r3, #4]
 80128e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	885b      	ldrh	r3, [r3, #2]
 80128ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80128ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80128ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80128f2:	1ad3      	subs	r3, r2, r3
 80128f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80128f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80128fa:	fb03 f202 	mul.w	r2, r3, r2
 80128fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012902:	4413      	add	r3, r2
 8012904:	009b      	lsls	r3, r3, #2
 8012906:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 801290a:	4413      	add	r3, r2
 801290c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8012910:	2300      	movs	r3, #0
 8012912:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8012916:	e011      	b.n	801293c <arm_mat_inverse_f32+0x33e>
 8012918:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801291c:	1d1a      	adds	r2, r3, #4
 801291e:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8012922:	ed93 7a00 	vldr	s14, [r3]
 8012926:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801292a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801292e:	edc3 7a00 	vstr	s15, [r3]
 8012932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8012936:	3301      	adds	r3, #1
 8012938:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801293c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8012940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012942:	429a      	cmp	r2, r3
 8012944:	dbe8      	blt.n	8012918 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8012946:	683b      	ldr	r3, [r7, #0]
 8012948:	685b      	ldr	r3, [r3, #4]
 801294a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	885b      	ldrh	r3, [r3, #2]
 8012952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012956:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801295a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801295c:	fb02 f303 	mul.w	r3, r2, r3
 8012960:	009b      	lsls	r3, r3, #2
 8012962:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8012966:	4413      	add	r3, r2
 8012968:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801296c:	2300      	movs	r3, #0
 801296e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012972:	e011      	b.n	8012998 <arm_mat_inverse_f32+0x39a>
 8012974:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012978:	1d1a      	adds	r2, r3, #4
 801297a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 801297e:	ed93 7a00 	vldr	s14, [r3]
 8012982:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012986:	ee67 7a27 	vmul.f32	s15, s14, s15
 801298a:	edc3 7a00 	vstr	s15, [r3]
 801298e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8012992:	3301      	adds	r3, #1
 8012994:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012998:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 801299c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801299e:	429a      	cmp	r2, r3
 80129a0:	dbe8      	blt.n	8012974 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 80129a2:	2300      	movs	r3, #0
 80129a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 80129a8:	e0ae      	b.n	8012b08 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	685a      	ldr	r2, [r3, #4]
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	885b      	ldrh	r3, [r3, #2]
 80129b2:	4619      	mov	r1, r3
 80129b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80129b8:	fb03 f101 	mul.w	r1, r3, r1
 80129bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80129c0:	440b      	add	r3, r1
 80129c2:	009b      	lsls	r3, r3, #2
 80129c4:	4413      	add	r3, r2
 80129c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 80129ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	685b      	ldr	r3, [r3, #4]
 80129d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	685b      	ldr	r3, [r3, #4]
 80129e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	885b      	ldrh	r3, [r3, #2]
 80129e8:	617b      	str	r3, [r7, #20]
 80129ea:	697a      	ldr	r2, [r7, #20]
 80129ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80129f0:	1ad3      	subs	r3, r2, r3
 80129f2:	613b      	str	r3, [r7, #16]
 80129f4:	697b      	ldr	r3, [r7, #20]
 80129f6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80129fa:	fb03 f202 	mul.w	r2, r3, r2
 80129fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012a02:	4413      	add	r3, r2
 8012a04:	009b      	lsls	r3, r3, #2
 8012a06:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8012a0a:	4413      	add	r3, r2
 8012a0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012a14:	fb03 f202 	mul.w	r2, r3, r2
 8012a18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012a1c:	4413      	add	r3, r2
 8012a1e:	009b      	lsls	r3, r3, #2
 8012a20:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8012a24:	4413      	add	r3, r2
 8012a26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012a30:	e01a      	b.n	8012a68 <arm_mat_inverse_f32+0x46a>
 8012a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012a36:	1d1a      	adds	r2, r3, #4
 8012a38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8012a3c:	ed93 7a00 	vldr	s14, [r3]
 8012a40:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012a44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012a4c:	1d1a      	adds	r2, r3, #4
 8012a4e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8012a52:	ed93 7a00 	vldr	s14, [r3]
 8012a56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a5a:	edc3 7a00 	vstr	s15, [r3]
 8012a5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012a62:	3301      	adds	r3, #1
 8012a64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012a68:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	dbdf      	blt.n	8012a32 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	685b      	ldr	r3, [r3, #4]
 8012a76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012a7a:	683b      	ldr	r3, [r7, #0]
 8012a7c:	685b      	ldr	r3, [r3, #4]
 8012a7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012a82:	683b      	ldr	r3, [r7, #0]
 8012a84:	885b      	ldrh	r3, [r3, #2]
 8012a86:	60fb      	str	r3, [r7, #12]
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	60bb      	str	r3, [r7, #8]
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012a92:	fb02 f303 	mul.w	r3, r2, r3
 8012a96:	009b      	lsls	r3, r3, #2
 8012a98:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012a9c:	4413      	add	r3, r2
 8012a9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012aa6:	fb02 f303 	mul.w	r3, r2, r3
 8012aaa:	009b      	lsls	r3, r3, #2
 8012aac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8012ab0:	4413      	add	r3, r2
 8012ab2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012abc:	e01a      	b.n	8012af4 <arm_mat_inverse_f32+0x4f6>
 8012abe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8012ac2:	1d1a      	adds	r2, r3, #4
 8012ac4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012ac8:	ed93 7a00 	vldr	s14, [r3]
 8012acc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012ad8:	1d1a      	adds	r2, r3, #4
 8012ada:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8012ade:	ed93 7a00 	vldr	s14, [r3]
 8012ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012ae6:	edc3 7a00 	vstr	s15, [r3]
 8012aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8012aee:	3301      	adds	r3, #1
 8012af0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012af4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	dbdf      	blt.n	8012abe <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 8012afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012b02:	3301      	adds	r3, #1
 8012b04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012b08:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012b0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b0e:	429a      	cmp	r2, r3
 8012b10:	f4ff af4b 	bcc.w	80129aa <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8012b14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b16:	3301      	adds	r3, #1
 8012b18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012b1c:	e092      	b.n	8012c44 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	685a      	ldr	r2, [r3, #4]
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	885b      	ldrh	r3, [r3, #2]
 8012b26:	4619      	mov	r1, r3
 8012b28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012b2c:	fb03 f101 	mul.w	r1, r3, r1
 8012b30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012b34:	440b      	add	r3, r1
 8012b36:	009b      	lsls	r3, r3, #2
 8012b38:	4413      	add	r3, r2
 8012b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8012b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	685b      	ldr	r3, [r3, #4]
 8012b4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	677b      	str	r3, [r7, #116]	@ 0x74
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	885b      	ldrh	r3, [r3, #2]
 8012b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012b60:	1ad3      	subs	r3, r2, r3
 8012b62:	623b      	str	r3, [r7, #32]
 8012b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b66:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012b6a:	fb03 f202 	mul.w	r2, r3, r2
 8012b6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012b72:	4413      	add	r3, r2
 8012b74:	009b      	lsls	r3, r3, #2
 8012b76:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8012b78:	4413      	add	r3, r2
 8012b7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b7e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012b80:	fb03 f202 	mul.w	r2, r3, r2
 8012b84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012b88:	4413      	add	r3, r2
 8012b8a:	009b      	lsls	r3, r3, #2
 8012b8c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8012b8e:	4413      	add	r3, r2
 8012b90:	677b      	str	r3, [r7, #116]	@ 0x74
 8012b92:	2300      	movs	r3, #0
 8012b94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012b96:	e014      	b.n	8012bc2 <arm_mat_inverse_f32+0x5c4>
 8012b98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012b9a:	1d1a      	adds	r2, r3, #4
 8012b9c:	677a      	str	r2, [r7, #116]	@ 0x74
 8012b9e:	ed93 7a00 	vldr	s14, [r3]
 8012ba2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012baa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012bac:	1d1a      	adds	r2, r3, #4
 8012bae:	67ba      	str	r2, [r7, #120]	@ 0x78
 8012bb0:	ed93 7a00 	vldr	s14, [r3]
 8012bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012bb8:	edc3 7a00 	vstr	s15, [r3]
 8012bbc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012bbe:	3301      	adds	r3, #1
 8012bc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012bc2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012bc4:	6a3b      	ldr	r3, [r7, #32]
 8012bc6:	429a      	cmp	r2, r3
 8012bc8:	dbe6      	blt.n	8012b98 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8012bca:	683b      	ldr	r3, [r7, #0]
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012bd0:	683b      	ldr	r3, [r7, #0]
 8012bd2:	685b      	ldr	r3, [r3, #4]
 8012bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012bd6:	683b      	ldr	r3, [r7, #0]
 8012bd8:	885b      	ldrh	r3, [r3, #2]
 8012bda:	61fb      	str	r3, [r7, #28]
 8012bdc:	69fb      	ldr	r3, [r7, #28]
 8012bde:	61bb      	str	r3, [r7, #24]
 8012be0:	69fb      	ldr	r3, [r7, #28]
 8012be2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012be6:	fb02 f303 	mul.w	r3, r2, r3
 8012bea:	009b      	lsls	r3, r3, #2
 8012bec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012bee:	4413      	add	r3, r2
 8012bf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012bf2:	69fb      	ldr	r3, [r7, #28]
 8012bf4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012bf6:	fb02 f303 	mul.w	r3, r2, r3
 8012bfa:	009b      	lsls	r3, r3, #2
 8012bfc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012bfe:	4413      	add	r3, r2
 8012c00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012c02:	2300      	movs	r3, #0
 8012c04:	673b      	str	r3, [r7, #112]	@ 0x70
 8012c06:	e014      	b.n	8012c32 <arm_mat_inverse_f32+0x634>
 8012c08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012c0a:	1d1a      	adds	r2, r3, #4
 8012c0c:	66ba      	str	r2, [r7, #104]	@ 0x68
 8012c0e:	ed93 7a00 	vldr	s14, [r3]
 8012c12:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012c1c:	1d1a      	adds	r2, r3, #4
 8012c1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8012c20:	ed93 7a00 	vldr	s14, [r3]
 8012c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012c28:	edc3 7a00 	vstr	s15, [r3]
 8012c2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012c2e:	3301      	adds	r3, #1
 8012c30:	673b      	str	r3, [r7, #112]	@ 0x70
 8012c32:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8012c34:	69bb      	ldr	r3, [r7, #24]
 8012c36:	429a      	cmp	r2, r3
 8012c38:	dbe6      	blt.n	8012c08 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 8012c3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012c3e:	3301      	adds	r3, #1
 8012c40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012c44:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012c48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012c4a:	429a      	cmp	r2, r3
 8012c4c:	f4ff af67 	bcc.w	8012b1e <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 8012c50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012c54:	3301      	adds	r3, #1
 8012c56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012c5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8012c5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012c60:	429a      	cmp	r2, r3
 8012c62:	f4ff ad32 	bcc.w	80126ca <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012c66:	2300      	movs	r3, #0
 8012c68:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8012c6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012c70:	2b01      	cmp	r3, #1
 8012c72:	d033      	beq.n	8012cdc <arm_mat_inverse_f32+0x6de>
 8012c74:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012c78:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c80:	d12c      	bne.n	8012cdc <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	685b      	ldr	r3, [r3, #4]
 8012c86:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 8012c88:	2300      	movs	r3, #0
 8012c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012c8e:	e010      	b.n	8012cb2 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 8012c90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012c94:	009b      	lsls	r3, r3, #2
 8012c96:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012c98:	4413      	add	r3, r2
 8012c9a:	edd3 7a00 	vldr	s15, [r3]
 8012c9e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ca6:	d10d      	bne.n	8012cc4 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8012ca8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012cac:	3301      	adds	r3, #1
 8012cae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8012cb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012cb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012cb6:	fb02 f303 	mul.w	r3, r2, r3
 8012cba:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8012cbe:	429a      	cmp	r2, r3
 8012cc0:	d3e6      	bcc.n	8012c90 <arm_mat_inverse_f32+0x692>
 8012cc2:	e000      	b.n	8012cc6 <arm_mat_inverse_f32+0x6c8>
            break;
 8012cc4:	bf00      	nop
      }

      if (i == numRows * numCols)
 8012cc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012cc8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012cca:	fb02 f303 	mul.w	r3, r2, r3
 8012cce:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8012cd2:	429a      	cmp	r2, r3
 8012cd4:	d102      	bne.n	8012cdc <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8012cd6:	23fb      	movs	r3, #251	@ 0xfb
 8012cd8:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 8012cdc:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	37ec      	adds	r7, #236	@ 0xec
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cea:	4770      	bx	lr

08012cec <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012cec:	b480      	push	{r7}
 8012cee:	b093      	sub	sp, #76	@ 0x4c
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	60f8      	str	r0, [r7, #12]
 8012cf4:	60b9      	str	r1, [r7, #8]
 8012cf6:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	685b      	ldr	r3, [r3, #4]
 8012d08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	685b      	ldr	r3, [r3, #4]
 8012d0e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	685b      	ldr	r3, [r3, #4]
 8012d14:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	881b      	ldrh	r3, [r3, #0]
 8012d1a:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 8012d1c:	68bb      	ldr	r3, [r7, #8]
 8012d1e:	885b      	ldrh	r3, [r3, #2]
 8012d20:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	885b      	ldrh	r3, [r3, #2]
 8012d26:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 8012d28:	2300      	movs	r3, #0
 8012d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012d2c:	8b7b      	ldrh	r3, [r7, #26]
 8012d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 8012d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d32:	009b      	lsls	r3, r3, #2
 8012d34:	69fa      	ldr	r2, [r7, #28]
 8012d36:	4413      	add	r3, r2
 8012d38:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 8012d3a:	8b3b      	ldrh	r3, [r7, #24]
 8012d3c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	685b      	ldr	r3, [r3, #4]
 8012d42:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8012d44:	f04f 0300 	mov.w	r3, #0
 8012d48:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8012d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d4c:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 8012d4e:	8afb      	ldrh	r3, [r7, #22]
 8012d50:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 8012d52:	e017      	b.n	8012d84 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8012d54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d56:	1d1a      	adds	r2, r3, #4
 8012d58:	647a      	str	r2, [r7, #68]	@ 0x44
 8012d5a:	ed93 7a00 	vldr	s14, [r3]
 8012d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d60:	edd3 7a00 	vldr	s15, [r3]
 8012d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d68:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8012d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d70:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 8012d74:	8b3b      	ldrh	r3, [r7, #24]
 8012d76:	009b      	lsls	r3, r3, #2
 8012d78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012d7a:	4413      	add	r3, r2
 8012d7c:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 8012d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d80:	3b01      	subs	r3, #1
 8012d82:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8012d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d1e4      	bne.n	8012d54 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8012d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d8c:	1d1a      	adds	r2, r3, #4
 8012d8e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8012d90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012d92:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8012d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d96:	3b01      	subs	r3, #1
 8012d98:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8012d9a:	8b3a      	ldrh	r2, [r7, #24]
 8012d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d9e:	1ad3      	subs	r3, r2, r3
 8012da0:	009b      	lsls	r3, r3, #2
 8012da2:	6a3a      	ldr	r2, [r7, #32]
 8012da4:	4413      	add	r3, r2
 8012da6:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8012da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d1ca      	bne.n	8012d44 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 8012dae:	8b3b      	ldrh	r3, [r7, #24]
 8012db0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012db2:	4413      	add	r3, r2
 8012db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 8012db6:	8afb      	ldrh	r3, [r7, #22]
 8012db8:	009b      	lsls	r3, r3, #2
 8012dba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012dbc:	4413      	add	r3, r2
 8012dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 8012dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dc2:	3b01      	subs	r3, #1
 8012dc4:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 8012dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d1b1      	bne.n	8012d30 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 8012dd0:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	374c      	adds	r7, #76	@ 0x4c
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dde:	4770      	bx	lr

08012de0 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8012de0:	b480      	push	{r7}
 8012de2:	b08b      	sub	sp, #44	@ 0x2c
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	60f8      	str	r0, [r7, #12]
 8012de8:	ed87 0a02 	vstr	s0, [r7, #8]
 8012dec:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	685b      	ldr	r3, [r3, #4]
 8012df2:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	685b      	ldr	r3, [r3, #4]
 8012df8:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	881b      	ldrh	r3, [r3, #0]
 8012dfe:	461a      	mov	r2, r3
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	885b      	ldrh	r3, [r3, #2]
 8012e04:	fb02 f303 	mul.w	r3, r2, r3
 8012e08:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012e0a:	69bb      	ldr	r3, [r7, #24]
 8012e0c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8012e0e:	e010      	b.n	8012e32 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8012e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e12:	1d1a      	adds	r2, r3, #4
 8012e14:	627a      	str	r2, [r7, #36]	@ 0x24
 8012e16:	ed93 7a00 	vldr	s14, [r3]
 8012e1a:	6a3b      	ldr	r3, [r7, #32]
 8012e1c:	1d1a      	adds	r2, r3, #4
 8012e1e:	623a      	str	r2, [r7, #32]
 8012e20:	edd7 7a02 	vldr	s15, [r7, #8]
 8012e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012e28:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8012e2c:	69fb      	ldr	r3, [r7, #28]
 8012e2e:	3b01      	subs	r3, #1
 8012e30:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8012e32:	69fb      	ldr	r3, [r7, #28]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d1eb      	bne.n	8012e10 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012e38:	2300      	movs	r3, #0
 8012e3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8012e3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012e40:	4618      	mov	r0, r3
 8012e42:	372c      	adds	r7, #44	@ 0x2c
 8012e44:	46bd      	mov	sp, r7
 8012e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4a:	4770      	bx	lr

08012e4c <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012e4c:	b480      	push	{r7}
 8012e4e:	b08b      	sub	sp, #44	@ 0x2c
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	60f8      	str	r0, [r7, #12]
 8012e54:	60b9      	str	r1, [r7, #8]
 8012e56:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	685b      	ldr	r3, [r3, #4]
 8012e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	685b      	ldr	r3, [r3, #4]
 8012e62:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	685b      	ldr	r3, [r3, #4]
 8012e68:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	881b      	ldrh	r3, [r3, #0]
 8012e6e:	461a      	mov	r2, r3
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	885b      	ldrh	r3, [r3, #2]
 8012e74:	fb02 f303 	mul.w	r3, r2, r3
 8012e78:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012e7a:	697b      	ldr	r3, [r7, #20]
 8012e7c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8012e7e:	e013      	b.n	8012ea8 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8012e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e82:	1d1a      	adds	r2, r3, #4
 8012e84:	627a      	str	r2, [r7, #36]	@ 0x24
 8012e86:	ed93 7a00 	vldr	s14, [r3]
 8012e8a:	6a3b      	ldr	r3, [r7, #32]
 8012e8c:	1d1a      	adds	r2, r3, #4
 8012e8e:	623a      	str	r2, [r7, #32]
 8012e90:	edd3 7a00 	vldr	s15, [r3]
 8012e94:	69fb      	ldr	r3, [r7, #28]
 8012e96:	1d1a      	adds	r2, r3, #4
 8012e98:	61fa      	str	r2, [r7, #28]
 8012e9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012e9e:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8012ea2:	69bb      	ldr	r3, [r7, #24]
 8012ea4:	3b01      	subs	r3, #1
 8012ea6:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8012ea8:	69bb      	ldr	r3, [r7, #24]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d1e8      	bne.n	8012e80 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012eae:	2300      	movs	r3, #0
 8012eb0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8012eb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	372c      	adds	r7, #44	@ 0x2c
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec0:	4770      	bx	lr

08012ec2 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8012ec2:	b480      	push	{r7}
 8012ec4:	b08b      	sub	sp, #44	@ 0x2c
 8012ec6:	af00      	add	r7, sp, #0
 8012ec8:	6078      	str	r0, [r7, #4]
 8012eca:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	685b      	ldr	r3, [r3, #4]
 8012ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	685b      	ldr	r3, [r3, #4]
 8012ed6:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	881b      	ldrh	r3, [r3, #0]
 8012edc:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	885b      	ldrh	r3, [r3, #2]
 8012ee2:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8012ee4:	89fb      	ldrh	r3, [r7, #14]
 8012ee6:	61bb      	str	r3, [r7, #24]
 8012ee8:	2300      	movs	r3, #0
 8012eea:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8012eec:	697b      	ldr	r3, [r7, #20]
 8012eee:	009b      	lsls	r3, r3, #2
 8012ef0:	693a      	ldr	r2, [r7, #16]
 8012ef2:	4413      	add	r3, r2
 8012ef4:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8012ef6:	89bb      	ldrh	r3, [r7, #12]
 8012ef8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8012efa:	e00d      	b.n	8012f18 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8012efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012efe:	1d1a      	adds	r2, r3, #4
 8012f00:	627a      	str	r2, [r7, #36]	@ 0x24
 8012f02:	681a      	ldr	r2, [r3, #0]
 8012f04:	6a3b      	ldr	r3, [r7, #32]
 8012f06:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8012f08:	89fb      	ldrh	r3, [r7, #14]
 8012f0a:	009b      	lsls	r3, r3, #2
 8012f0c:	6a3a      	ldr	r2, [r7, #32]
 8012f0e:	4413      	add	r3, r2
 8012f10:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8012f12:	69fb      	ldr	r3, [r7, #28]
 8012f14:	3b01      	subs	r3, #1
 8012f16:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8012f18:	69fb      	ldr	r3, [r7, #28]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d1ee      	bne.n	8012efc <arm_mat_trans_f32+0x3a>
      }

      i++;
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	3301      	adds	r3, #1
 8012f22:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8012f24:	69bb      	ldr	r3, [r7, #24]
 8012f26:	3b01      	subs	r3, #1
 8012f28:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8012f2a:	69bb      	ldr	r3, [r7, #24]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d1dd      	bne.n	8012eec <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012f30:	2300      	movs	r3, #0
 8012f32:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8012f34:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	372c      	adds	r7, #44	@ 0x2c
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f42:	4770      	bx	lr

08012f44 <malloc>:
 8012f44:	4b02      	ldr	r3, [pc, #8]	@ (8012f50 <malloc+0xc>)
 8012f46:	4601      	mov	r1, r0
 8012f48:	6818      	ldr	r0, [r3, #0]
 8012f4a:	f000 b825 	b.w	8012f98 <_malloc_r>
 8012f4e:	bf00      	nop
 8012f50:	200005c8 	.word	0x200005c8

08012f54 <sbrk_aligned>:
 8012f54:	b570      	push	{r4, r5, r6, lr}
 8012f56:	4e0f      	ldr	r6, [pc, #60]	@ (8012f94 <sbrk_aligned+0x40>)
 8012f58:	460c      	mov	r4, r1
 8012f5a:	6831      	ldr	r1, [r6, #0]
 8012f5c:	4605      	mov	r5, r0
 8012f5e:	b911      	cbnz	r1, 8012f66 <sbrk_aligned+0x12>
 8012f60:	f000 f8ae 	bl	80130c0 <_sbrk_r>
 8012f64:	6030      	str	r0, [r6, #0]
 8012f66:	4621      	mov	r1, r4
 8012f68:	4628      	mov	r0, r5
 8012f6a:	f000 f8a9 	bl	80130c0 <_sbrk_r>
 8012f6e:	1c43      	adds	r3, r0, #1
 8012f70:	d103      	bne.n	8012f7a <sbrk_aligned+0x26>
 8012f72:	f04f 34ff 	mov.w	r4, #4294967295
 8012f76:	4620      	mov	r0, r4
 8012f78:	bd70      	pop	{r4, r5, r6, pc}
 8012f7a:	1cc4      	adds	r4, r0, #3
 8012f7c:	f024 0403 	bic.w	r4, r4, #3
 8012f80:	42a0      	cmp	r0, r4
 8012f82:	d0f8      	beq.n	8012f76 <sbrk_aligned+0x22>
 8012f84:	1a21      	subs	r1, r4, r0
 8012f86:	4628      	mov	r0, r5
 8012f88:	f000 f89a 	bl	80130c0 <_sbrk_r>
 8012f8c:	3001      	adds	r0, #1
 8012f8e:	d1f2      	bne.n	8012f76 <sbrk_aligned+0x22>
 8012f90:	e7ef      	b.n	8012f72 <sbrk_aligned+0x1e>
 8012f92:	bf00      	nop
 8012f94:	20002724 	.word	0x20002724

08012f98 <_malloc_r>:
 8012f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f9c:	1ccd      	adds	r5, r1, #3
 8012f9e:	f025 0503 	bic.w	r5, r5, #3
 8012fa2:	3508      	adds	r5, #8
 8012fa4:	2d0c      	cmp	r5, #12
 8012fa6:	bf38      	it	cc
 8012fa8:	250c      	movcc	r5, #12
 8012faa:	2d00      	cmp	r5, #0
 8012fac:	4606      	mov	r6, r0
 8012fae:	db01      	blt.n	8012fb4 <_malloc_r+0x1c>
 8012fb0:	42a9      	cmp	r1, r5
 8012fb2:	d904      	bls.n	8012fbe <_malloc_r+0x26>
 8012fb4:	230c      	movs	r3, #12
 8012fb6:	6033      	str	r3, [r6, #0]
 8012fb8:	2000      	movs	r0, #0
 8012fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013094 <_malloc_r+0xfc>
 8012fc2:	f000 f869 	bl	8013098 <__malloc_lock>
 8012fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8012fca:	461c      	mov	r4, r3
 8012fcc:	bb44      	cbnz	r4, 8013020 <_malloc_r+0x88>
 8012fce:	4629      	mov	r1, r5
 8012fd0:	4630      	mov	r0, r6
 8012fd2:	f7ff ffbf 	bl	8012f54 <sbrk_aligned>
 8012fd6:	1c43      	adds	r3, r0, #1
 8012fd8:	4604      	mov	r4, r0
 8012fda:	d158      	bne.n	801308e <_malloc_r+0xf6>
 8012fdc:	f8d8 4000 	ldr.w	r4, [r8]
 8012fe0:	4627      	mov	r7, r4
 8012fe2:	2f00      	cmp	r7, #0
 8012fe4:	d143      	bne.n	801306e <_malloc_r+0xd6>
 8012fe6:	2c00      	cmp	r4, #0
 8012fe8:	d04b      	beq.n	8013082 <_malloc_r+0xea>
 8012fea:	6823      	ldr	r3, [r4, #0]
 8012fec:	4639      	mov	r1, r7
 8012fee:	4630      	mov	r0, r6
 8012ff0:	eb04 0903 	add.w	r9, r4, r3
 8012ff4:	f000 f864 	bl	80130c0 <_sbrk_r>
 8012ff8:	4581      	cmp	r9, r0
 8012ffa:	d142      	bne.n	8013082 <_malloc_r+0xea>
 8012ffc:	6821      	ldr	r1, [r4, #0]
 8012ffe:	1a6d      	subs	r5, r5, r1
 8013000:	4629      	mov	r1, r5
 8013002:	4630      	mov	r0, r6
 8013004:	f7ff ffa6 	bl	8012f54 <sbrk_aligned>
 8013008:	3001      	adds	r0, #1
 801300a:	d03a      	beq.n	8013082 <_malloc_r+0xea>
 801300c:	6823      	ldr	r3, [r4, #0]
 801300e:	442b      	add	r3, r5
 8013010:	6023      	str	r3, [r4, #0]
 8013012:	f8d8 3000 	ldr.w	r3, [r8]
 8013016:	685a      	ldr	r2, [r3, #4]
 8013018:	bb62      	cbnz	r2, 8013074 <_malloc_r+0xdc>
 801301a:	f8c8 7000 	str.w	r7, [r8]
 801301e:	e00f      	b.n	8013040 <_malloc_r+0xa8>
 8013020:	6822      	ldr	r2, [r4, #0]
 8013022:	1b52      	subs	r2, r2, r5
 8013024:	d420      	bmi.n	8013068 <_malloc_r+0xd0>
 8013026:	2a0b      	cmp	r2, #11
 8013028:	d917      	bls.n	801305a <_malloc_r+0xc2>
 801302a:	1961      	adds	r1, r4, r5
 801302c:	42a3      	cmp	r3, r4
 801302e:	6025      	str	r5, [r4, #0]
 8013030:	bf18      	it	ne
 8013032:	6059      	strne	r1, [r3, #4]
 8013034:	6863      	ldr	r3, [r4, #4]
 8013036:	bf08      	it	eq
 8013038:	f8c8 1000 	streq.w	r1, [r8]
 801303c:	5162      	str	r2, [r4, r5]
 801303e:	604b      	str	r3, [r1, #4]
 8013040:	4630      	mov	r0, r6
 8013042:	f000 f82f 	bl	80130a4 <__malloc_unlock>
 8013046:	f104 000b 	add.w	r0, r4, #11
 801304a:	1d23      	adds	r3, r4, #4
 801304c:	f020 0007 	bic.w	r0, r0, #7
 8013050:	1ac2      	subs	r2, r0, r3
 8013052:	bf1c      	itt	ne
 8013054:	1a1b      	subne	r3, r3, r0
 8013056:	50a3      	strne	r3, [r4, r2]
 8013058:	e7af      	b.n	8012fba <_malloc_r+0x22>
 801305a:	6862      	ldr	r2, [r4, #4]
 801305c:	42a3      	cmp	r3, r4
 801305e:	bf0c      	ite	eq
 8013060:	f8c8 2000 	streq.w	r2, [r8]
 8013064:	605a      	strne	r2, [r3, #4]
 8013066:	e7eb      	b.n	8013040 <_malloc_r+0xa8>
 8013068:	4623      	mov	r3, r4
 801306a:	6864      	ldr	r4, [r4, #4]
 801306c:	e7ae      	b.n	8012fcc <_malloc_r+0x34>
 801306e:	463c      	mov	r4, r7
 8013070:	687f      	ldr	r7, [r7, #4]
 8013072:	e7b6      	b.n	8012fe2 <_malloc_r+0x4a>
 8013074:	461a      	mov	r2, r3
 8013076:	685b      	ldr	r3, [r3, #4]
 8013078:	42a3      	cmp	r3, r4
 801307a:	d1fb      	bne.n	8013074 <_malloc_r+0xdc>
 801307c:	2300      	movs	r3, #0
 801307e:	6053      	str	r3, [r2, #4]
 8013080:	e7de      	b.n	8013040 <_malloc_r+0xa8>
 8013082:	230c      	movs	r3, #12
 8013084:	6033      	str	r3, [r6, #0]
 8013086:	4630      	mov	r0, r6
 8013088:	f000 f80c 	bl	80130a4 <__malloc_unlock>
 801308c:	e794      	b.n	8012fb8 <_malloc_r+0x20>
 801308e:	6005      	str	r5, [r0, #0]
 8013090:	e7d6      	b.n	8013040 <_malloc_r+0xa8>
 8013092:	bf00      	nop
 8013094:	20002728 	.word	0x20002728

08013098 <__malloc_lock>:
 8013098:	4801      	ldr	r0, [pc, #4]	@ (80130a0 <__malloc_lock+0x8>)
 801309a:	f000 b84b 	b.w	8013134 <__retarget_lock_acquire_recursive>
 801309e:	bf00      	nop
 80130a0:	20002868 	.word	0x20002868

080130a4 <__malloc_unlock>:
 80130a4:	4801      	ldr	r0, [pc, #4]	@ (80130ac <__malloc_unlock+0x8>)
 80130a6:	f000 b846 	b.w	8013136 <__retarget_lock_release_recursive>
 80130aa:	bf00      	nop
 80130ac:	20002868 	.word	0x20002868

080130b0 <memset>:
 80130b0:	4402      	add	r2, r0
 80130b2:	4603      	mov	r3, r0
 80130b4:	4293      	cmp	r3, r2
 80130b6:	d100      	bne.n	80130ba <memset+0xa>
 80130b8:	4770      	bx	lr
 80130ba:	f803 1b01 	strb.w	r1, [r3], #1
 80130be:	e7f9      	b.n	80130b4 <memset+0x4>

080130c0 <_sbrk_r>:
 80130c0:	b538      	push	{r3, r4, r5, lr}
 80130c2:	4d06      	ldr	r5, [pc, #24]	@ (80130dc <_sbrk_r+0x1c>)
 80130c4:	2300      	movs	r3, #0
 80130c6:	4604      	mov	r4, r0
 80130c8:	4608      	mov	r0, r1
 80130ca:	602b      	str	r3, [r5, #0]
 80130cc:	f7f7 f846 	bl	800a15c <_sbrk>
 80130d0:	1c43      	adds	r3, r0, #1
 80130d2:	d102      	bne.n	80130da <_sbrk_r+0x1a>
 80130d4:	682b      	ldr	r3, [r5, #0]
 80130d6:	b103      	cbz	r3, 80130da <_sbrk_r+0x1a>
 80130d8:	6023      	str	r3, [r4, #0]
 80130da:	bd38      	pop	{r3, r4, r5, pc}
 80130dc:	20002864 	.word	0x20002864

080130e0 <__errno>:
 80130e0:	4b01      	ldr	r3, [pc, #4]	@ (80130e8 <__errno+0x8>)
 80130e2:	6818      	ldr	r0, [r3, #0]
 80130e4:	4770      	bx	lr
 80130e6:	bf00      	nop
 80130e8:	200005c8 	.word	0x200005c8

080130ec <__libc_init_array>:
 80130ec:	b570      	push	{r4, r5, r6, lr}
 80130ee:	4d0d      	ldr	r5, [pc, #52]	@ (8013124 <__libc_init_array+0x38>)
 80130f0:	4c0d      	ldr	r4, [pc, #52]	@ (8013128 <__libc_init_array+0x3c>)
 80130f2:	1b64      	subs	r4, r4, r5
 80130f4:	10a4      	asrs	r4, r4, #2
 80130f6:	2600      	movs	r6, #0
 80130f8:	42a6      	cmp	r6, r4
 80130fa:	d109      	bne.n	8013110 <__libc_init_array+0x24>
 80130fc:	4d0b      	ldr	r5, [pc, #44]	@ (801312c <__libc_init_array+0x40>)
 80130fe:	4c0c      	ldr	r4, [pc, #48]	@ (8013130 <__libc_init_array+0x44>)
 8013100:	f001 ff32 	bl	8014f68 <_init>
 8013104:	1b64      	subs	r4, r4, r5
 8013106:	10a4      	asrs	r4, r4, #2
 8013108:	2600      	movs	r6, #0
 801310a:	42a6      	cmp	r6, r4
 801310c:	d105      	bne.n	801311a <__libc_init_array+0x2e>
 801310e:	bd70      	pop	{r4, r5, r6, pc}
 8013110:	f855 3b04 	ldr.w	r3, [r5], #4
 8013114:	4798      	blx	r3
 8013116:	3601      	adds	r6, #1
 8013118:	e7ee      	b.n	80130f8 <__libc_init_array+0xc>
 801311a:	f855 3b04 	ldr.w	r3, [r5], #4
 801311e:	4798      	blx	r3
 8013120:	3601      	adds	r6, #1
 8013122:	e7f2      	b.n	801310a <__libc_init_array+0x1e>
 8013124:	080155d8 	.word	0x080155d8
 8013128:	080155d8 	.word	0x080155d8
 801312c:	080155d8 	.word	0x080155d8
 8013130:	080155dc 	.word	0x080155dc

08013134 <__retarget_lock_acquire_recursive>:
 8013134:	4770      	bx	lr

08013136 <__retarget_lock_release_recursive>:
 8013136:	4770      	bx	lr

08013138 <memcpy>:
 8013138:	440a      	add	r2, r1
 801313a:	4291      	cmp	r1, r2
 801313c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013140:	d100      	bne.n	8013144 <memcpy+0xc>
 8013142:	4770      	bx	lr
 8013144:	b510      	push	{r4, lr}
 8013146:	f811 4b01 	ldrb.w	r4, [r1], #1
 801314a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801314e:	4291      	cmp	r1, r2
 8013150:	d1f9      	bne.n	8013146 <memcpy+0xe>
 8013152:	bd10      	pop	{r4, pc}
 8013154:	0000      	movs	r0, r0
	...

08013158 <cos>:
 8013158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801315a:	ec53 2b10 	vmov	r2, r3, d0
 801315e:	4826      	ldr	r0, [pc, #152]	@ (80131f8 <cos+0xa0>)
 8013160:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013164:	4281      	cmp	r1, r0
 8013166:	d806      	bhi.n	8013176 <cos+0x1e>
 8013168:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80131f0 <cos+0x98>
 801316c:	b005      	add	sp, #20
 801316e:	f85d eb04 	ldr.w	lr, [sp], #4
 8013172:	f000 b9bd 	b.w	80134f0 <__kernel_cos>
 8013176:	4821      	ldr	r0, [pc, #132]	@ (80131fc <cos+0xa4>)
 8013178:	4281      	cmp	r1, r0
 801317a:	d908      	bls.n	801318e <cos+0x36>
 801317c:	4610      	mov	r0, r2
 801317e:	4619      	mov	r1, r3
 8013180:	f7ed f84e 	bl	8000220 <__aeabi_dsub>
 8013184:	ec41 0b10 	vmov	d0, r0, r1
 8013188:	b005      	add	sp, #20
 801318a:	f85d fb04 	ldr.w	pc, [sp], #4
 801318e:	4668      	mov	r0, sp
 8013190:	f000 fb32 	bl	80137f8 <__ieee754_rem_pio2>
 8013194:	f000 0003 	and.w	r0, r0, #3
 8013198:	2801      	cmp	r0, #1
 801319a:	d00b      	beq.n	80131b4 <cos+0x5c>
 801319c:	2802      	cmp	r0, #2
 801319e:	d015      	beq.n	80131cc <cos+0x74>
 80131a0:	b9d8      	cbnz	r0, 80131da <cos+0x82>
 80131a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80131a6:	ed9d 0b00 	vldr	d0, [sp]
 80131aa:	f000 f9a1 	bl	80134f0 <__kernel_cos>
 80131ae:	ec51 0b10 	vmov	r0, r1, d0
 80131b2:	e7e7      	b.n	8013184 <cos+0x2c>
 80131b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80131b8:	ed9d 0b00 	vldr	d0, [sp]
 80131bc:	f000 fa60 	bl	8013680 <__kernel_sin>
 80131c0:	ec53 2b10 	vmov	r2, r3, d0
 80131c4:	4610      	mov	r0, r2
 80131c6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80131ca:	e7db      	b.n	8013184 <cos+0x2c>
 80131cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80131d0:	ed9d 0b00 	vldr	d0, [sp]
 80131d4:	f000 f98c 	bl	80134f0 <__kernel_cos>
 80131d8:	e7f2      	b.n	80131c0 <cos+0x68>
 80131da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80131de:	ed9d 0b00 	vldr	d0, [sp]
 80131e2:	2001      	movs	r0, #1
 80131e4:	f000 fa4c 	bl	8013680 <__kernel_sin>
 80131e8:	e7e1      	b.n	80131ae <cos+0x56>
 80131ea:	bf00      	nop
 80131ec:	f3af 8000 	nop.w
	...
 80131f8:	3fe921fb 	.word	0x3fe921fb
 80131fc:	7fefffff 	.word	0x7fefffff

08013200 <sin>:
 8013200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013202:	ec53 2b10 	vmov	r2, r3, d0
 8013206:	4826      	ldr	r0, [pc, #152]	@ (80132a0 <sin+0xa0>)
 8013208:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801320c:	4281      	cmp	r1, r0
 801320e:	d807      	bhi.n	8013220 <sin+0x20>
 8013210:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8013298 <sin+0x98>
 8013214:	2000      	movs	r0, #0
 8013216:	b005      	add	sp, #20
 8013218:	f85d eb04 	ldr.w	lr, [sp], #4
 801321c:	f000 ba30 	b.w	8013680 <__kernel_sin>
 8013220:	4820      	ldr	r0, [pc, #128]	@ (80132a4 <sin+0xa4>)
 8013222:	4281      	cmp	r1, r0
 8013224:	d908      	bls.n	8013238 <sin+0x38>
 8013226:	4610      	mov	r0, r2
 8013228:	4619      	mov	r1, r3
 801322a:	f7ec fff9 	bl	8000220 <__aeabi_dsub>
 801322e:	ec41 0b10 	vmov	d0, r0, r1
 8013232:	b005      	add	sp, #20
 8013234:	f85d fb04 	ldr.w	pc, [sp], #4
 8013238:	4668      	mov	r0, sp
 801323a:	f000 fadd 	bl	80137f8 <__ieee754_rem_pio2>
 801323e:	f000 0003 	and.w	r0, r0, #3
 8013242:	2801      	cmp	r0, #1
 8013244:	d00c      	beq.n	8013260 <sin+0x60>
 8013246:	2802      	cmp	r0, #2
 8013248:	d011      	beq.n	801326e <sin+0x6e>
 801324a:	b9e8      	cbnz	r0, 8013288 <sin+0x88>
 801324c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013250:	ed9d 0b00 	vldr	d0, [sp]
 8013254:	2001      	movs	r0, #1
 8013256:	f000 fa13 	bl	8013680 <__kernel_sin>
 801325a:	ec51 0b10 	vmov	r0, r1, d0
 801325e:	e7e6      	b.n	801322e <sin+0x2e>
 8013260:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013264:	ed9d 0b00 	vldr	d0, [sp]
 8013268:	f000 f942 	bl	80134f0 <__kernel_cos>
 801326c:	e7f5      	b.n	801325a <sin+0x5a>
 801326e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013272:	ed9d 0b00 	vldr	d0, [sp]
 8013276:	2001      	movs	r0, #1
 8013278:	f000 fa02 	bl	8013680 <__kernel_sin>
 801327c:	ec53 2b10 	vmov	r2, r3, d0
 8013280:	4610      	mov	r0, r2
 8013282:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8013286:	e7d2      	b.n	801322e <sin+0x2e>
 8013288:	ed9d 1b02 	vldr	d1, [sp, #8]
 801328c:	ed9d 0b00 	vldr	d0, [sp]
 8013290:	f000 f92e 	bl	80134f0 <__kernel_cos>
 8013294:	e7f2      	b.n	801327c <sin+0x7c>
 8013296:	bf00      	nop
	...
 80132a0:	3fe921fb 	.word	0x3fe921fb
 80132a4:	7fefffff 	.word	0x7fefffff

080132a8 <fmodf>:
 80132a8:	b508      	push	{r3, lr}
 80132aa:	ed2d 8b02 	vpush	{d8}
 80132ae:	eef0 8a40 	vmov.f32	s17, s0
 80132b2:	eeb0 8a60 	vmov.f32	s16, s1
 80132b6:	f000 fd43 	bl	8013d40 <__ieee754_fmodf>
 80132ba:	eef4 8a48 	vcmp.f32	s17, s16
 80132be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132c2:	d60c      	bvs.n	80132de <fmodf+0x36>
 80132c4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80132e4 <fmodf+0x3c>
 80132c8:	eeb4 8a68 	vcmp.f32	s16, s17
 80132cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132d0:	d105      	bne.n	80132de <fmodf+0x36>
 80132d2:	f7ff ff05 	bl	80130e0 <__errno>
 80132d6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80132da:	2321      	movs	r3, #33	@ 0x21
 80132dc:	6003      	str	r3, [r0, #0]
 80132de:	ecbd 8b02 	vpop	{d8}
 80132e2:	bd08      	pop	{r3, pc}
 80132e4:	00000000 	.word	0x00000000

080132e8 <sqrtf>:
 80132e8:	b508      	push	{r3, lr}
 80132ea:	ed2d 8b02 	vpush	{d8}
 80132ee:	eeb0 8a40 	vmov.f32	s16, s0
 80132f2:	f000 f8f7 	bl	80134e4 <__ieee754_sqrtf>
 80132f6:	eeb4 8a48 	vcmp.f32	s16, s16
 80132fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132fe:	d60c      	bvs.n	801331a <sqrtf+0x32>
 8013300:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8013320 <sqrtf+0x38>
 8013304:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801330c:	d505      	bpl.n	801331a <sqrtf+0x32>
 801330e:	f7ff fee7 	bl	80130e0 <__errno>
 8013312:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8013316:	2321      	movs	r3, #33	@ 0x21
 8013318:	6003      	str	r3, [r0, #0]
 801331a:	ecbd 8b02 	vpop	{d8}
 801331e:	bd08      	pop	{r3, pc}
 8013320:	00000000 	.word	0x00000000

08013324 <cosf>:
 8013324:	ee10 3a10 	vmov	r3, s0
 8013328:	b507      	push	{r0, r1, r2, lr}
 801332a:	4a1e      	ldr	r2, [pc, #120]	@ (80133a4 <cosf+0x80>)
 801332c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013330:	4293      	cmp	r3, r2
 8013332:	d806      	bhi.n	8013342 <cosf+0x1e>
 8013334:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80133a8 <cosf+0x84>
 8013338:	b003      	add	sp, #12
 801333a:	f85d eb04 	ldr.w	lr, [sp], #4
 801333e:	f000 bc5f 	b.w	8013c00 <__kernel_cosf>
 8013342:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8013346:	d304      	bcc.n	8013352 <cosf+0x2e>
 8013348:	ee30 0a40 	vsub.f32	s0, s0, s0
 801334c:	b003      	add	sp, #12
 801334e:	f85d fb04 	ldr.w	pc, [sp], #4
 8013352:	4668      	mov	r0, sp
 8013354:	f000 fd76 	bl	8013e44 <__ieee754_rem_pio2f>
 8013358:	f000 0003 	and.w	r0, r0, #3
 801335c:	2801      	cmp	r0, #1
 801335e:	d009      	beq.n	8013374 <cosf+0x50>
 8013360:	2802      	cmp	r0, #2
 8013362:	d010      	beq.n	8013386 <cosf+0x62>
 8013364:	b9b0      	cbnz	r0, 8013394 <cosf+0x70>
 8013366:	eddd 0a01 	vldr	s1, [sp, #4]
 801336a:	ed9d 0a00 	vldr	s0, [sp]
 801336e:	f000 fc47 	bl	8013c00 <__kernel_cosf>
 8013372:	e7eb      	b.n	801334c <cosf+0x28>
 8013374:	eddd 0a01 	vldr	s1, [sp, #4]
 8013378:	ed9d 0a00 	vldr	s0, [sp]
 801337c:	f000 fc98 	bl	8013cb0 <__kernel_sinf>
 8013380:	eeb1 0a40 	vneg.f32	s0, s0
 8013384:	e7e2      	b.n	801334c <cosf+0x28>
 8013386:	eddd 0a01 	vldr	s1, [sp, #4]
 801338a:	ed9d 0a00 	vldr	s0, [sp]
 801338e:	f000 fc37 	bl	8013c00 <__kernel_cosf>
 8013392:	e7f5      	b.n	8013380 <cosf+0x5c>
 8013394:	eddd 0a01 	vldr	s1, [sp, #4]
 8013398:	ed9d 0a00 	vldr	s0, [sp]
 801339c:	2001      	movs	r0, #1
 801339e:	f000 fc87 	bl	8013cb0 <__kernel_sinf>
 80133a2:	e7d3      	b.n	801334c <cosf+0x28>
 80133a4:	3f490fd8 	.word	0x3f490fd8
 80133a8:	00000000 	.word	0x00000000

080133ac <sinf>:
 80133ac:	ee10 3a10 	vmov	r3, s0
 80133b0:	b507      	push	{r0, r1, r2, lr}
 80133b2:	4a1f      	ldr	r2, [pc, #124]	@ (8013430 <sinf+0x84>)
 80133b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80133b8:	4293      	cmp	r3, r2
 80133ba:	d807      	bhi.n	80133cc <sinf+0x20>
 80133bc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8013434 <sinf+0x88>
 80133c0:	2000      	movs	r0, #0
 80133c2:	b003      	add	sp, #12
 80133c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80133c8:	f000 bc72 	b.w	8013cb0 <__kernel_sinf>
 80133cc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80133d0:	d304      	bcc.n	80133dc <sinf+0x30>
 80133d2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80133d6:	b003      	add	sp, #12
 80133d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80133dc:	4668      	mov	r0, sp
 80133de:	f000 fd31 	bl	8013e44 <__ieee754_rem_pio2f>
 80133e2:	f000 0003 	and.w	r0, r0, #3
 80133e6:	2801      	cmp	r0, #1
 80133e8:	d00a      	beq.n	8013400 <sinf+0x54>
 80133ea:	2802      	cmp	r0, #2
 80133ec:	d00f      	beq.n	801340e <sinf+0x62>
 80133ee:	b9c0      	cbnz	r0, 8013422 <sinf+0x76>
 80133f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80133f4:	ed9d 0a00 	vldr	s0, [sp]
 80133f8:	2001      	movs	r0, #1
 80133fa:	f000 fc59 	bl	8013cb0 <__kernel_sinf>
 80133fe:	e7ea      	b.n	80133d6 <sinf+0x2a>
 8013400:	eddd 0a01 	vldr	s1, [sp, #4]
 8013404:	ed9d 0a00 	vldr	s0, [sp]
 8013408:	f000 fbfa 	bl	8013c00 <__kernel_cosf>
 801340c:	e7e3      	b.n	80133d6 <sinf+0x2a>
 801340e:	eddd 0a01 	vldr	s1, [sp, #4]
 8013412:	ed9d 0a00 	vldr	s0, [sp]
 8013416:	2001      	movs	r0, #1
 8013418:	f000 fc4a 	bl	8013cb0 <__kernel_sinf>
 801341c:	eeb1 0a40 	vneg.f32	s0, s0
 8013420:	e7d9      	b.n	80133d6 <sinf+0x2a>
 8013422:	eddd 0a01 	vldr	s1, [sp, #4]
 8013426:	ed9d 0a00 	vldr	s0, [sp]
 801342a:	f000 fbe9 	bl	8013c00 <__kernel_cosf>
 801342e:	e7f5      	b.n	801341c <sinf+0x70>
 8013430:	3f490fd8 	.word	0x3f490fd8
 8013434:	00000000 	.word	0x00000000

08013438 <fmaxf>:
 8013438:	b508      	push	{r3, lr}
 801343a:	ed2d 8b02 	vpush	{d8}
 801343e:	eeb0 8a40 	vmov.f32	s16, s0
 8013442:	eef0 8a60 	vmov.f32	s17, s1
 8013446:	f000 f831 	bl	80134ac <__fpclassifyf>
 801344a:	b930      	cbnz	r0, 801345a <fmaxf+0x22>
 801344c:	eeb0 8a68 	vmov.f32	s16, s17
 8013450:	eeb0 0a48 	vmov.f32	s0, s16
 8013454:	ecbd 8b02 	vpop	{d8}
 8013458:	bd08      	pop	{r3, pc}
 801345a:	eeb0 0a68 	vmov.f32	s0, s17
 801345e:	f000 f825 	bl	80134ac <__fpclassifyf>
 8013462:	2800      	cmp	r0, #0
 8013464:	d0f4      	beq.n	8013450 <fmaxf+0x18>
 8013466:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801346a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801346e:	dded      	ble.n	801344c <fmaxf+0x14>
 8013470:	e7ee      	b.n	8013450 <fmaxf+0x18>

08013472 <fminf>:
 8013472:	b508      	push	{r3, lr}
 8013474:	ed2d 8b02 	vpush	{d8}
 8013478:	eeb0 8a40 	vmov.f32	s16, s0
 801347c:	eef0 8a60 	vmov.f32	s17, s1
 8013480:	f000 f814 	bl	80134ac <__fpclassifyf>
 8013484:	b930      	cbnz	r0, 8013494 <fminf+0x22>
 8013486:	eeb0 8a68 	vmov.f32	s16, s17
 801348a:	eeb0 0a48 	vmov.f32	s0, s16
 801348e:	ecbd 8b02 	vpop	{d8}
 8013492:	bd08      	pop	{r3, pc}
 8013494:	eeb0 0a68 	vmov.f32	s0, s17
 8013498:	f000 f808 	bl	80134ac <__fpclassifyf>
 801349c:	2800      	cmp	r0, #0
 801349e:	d0f4      	beq.n	801348a <fminf+0x18>
 80134a0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80134a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134a8:	d5ed      	bpl.n	8013486 <fminf+0x14>
 80134aa:	e7ee      	b.n	801348a <fminf+0x18>

080134ac <__fpclassifyf>:
 80134ac:	ee10 3a10 	vmov	r3, s0
 80134b0:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80134b4:	d00d      	beq.n	80134d2 <__fpclassifyf+0x26>
 80134b6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80134ba:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80134be:	d30a      	bcc.n	80134d6 <__fpclassifyf+0x2a>
 80134c0:	4b07      	ldr	r3, [pc, #28]	@ (80134e0 <__fpclassifyf+0x34>)
 80134c2:	1e42      	subs	r2, r0, #1
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d908      	bls.n	80134da <__fpclassifyf+0x2e>
 80134c8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80134cc:	4258      	negs	r0, r3
 80134ce:	4158      	adcs	r0, r3
 80134d0:	4770      	bx	lr
 80134d2:	2002      	movs	r0, #2
 80134d4:	4770      	bx	lr
 80134d6:	2004      	movs	r0, #4
 80134d8:	4770      	bx	lr
 80134da:	2003      	movs	r0, #3
 80134dc:	4770      	bx	lr
 80134de:	bf00      	nop
 80134e0:	007ffffe 	.word	0x007ffffe

080134e4 <__ieee754_sqrtf>:
 80134e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80134e8:	4770      	bx	lr
 80134ea:	0000      	movs	r0, r0
 80134ec:	0000      	movs	r0, r0
	...

080134f0 <__kernel_cos>:
 80134f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134f4:	ec57 6b10 	vmov	r6, r7, d0
 80134f8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80134fc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8013500:	ed8d 1b00 	vstr	d1, [sp]
 8013504:	d206      	bcs.n	8013514 <__kernel_cos+0x24>
 8013506:	4630      	mov	r0, r6
 8013508:	4639      	mov	r1, r7
 801350a:	f7ed fadb 	bl	8000ac4 <__aeabi_d2iz>
 801350e:	2800      	cmp	r0, #0
 8013510:	f000 8088 	beq.w	8013624 <__kernel_cos+0x134>
 8013514:	4632      	mov	r2, r6
 8013516:	463b      	mov	r3, r7
 8013518:	4630      	mov	r0, r6
 801351a:	4639      	mov	r1, r7
 801351c:	f7ed f838 	bl	8000590 <__aeabi_dmul>
 8013520:	4b51      	ldr	r3, [pc, #324]	@ (8013668 <__kernel_cos+0x178>)
 8013522:	2200      	movs	r2, #0
 8013524:	4604      	mov	r4, r0
 8013526:	460d      	mov	r5, r1
 8013528:	f7ed f832 	bl	8000590 <__aeabi_dmul>
 801352c:	a340      	add	r3, pc, #256	@ (adr r3, 8013630 <__kernel_cos+0x140>)
 801352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013532:	4682      	mov	sl, r0
 8013534:	468b      	mov	fp, r1
 8013536:	4620      	mov	r0, r4
 8013538:	4629      	mov	r1, r5
 801353a:	f7ed f829 	bl	8000590 <__aeabi_dmul>
 801353e:	a33e      	add	r3, pc, #248	@ (adr r3, 8013638 <__kernel_cos+0x148>)
 8013540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013544:	f7ec fe6e 	bl	8000224 <__adddf3>
 8013548:	4622      	mov	r2, r4
 801354a:	462b      	mov	r3, r5
 801354c:	f7ed f820 	bl	8000590 <__aeabi_dmul>
 8013550:	a33b      	add	r3, pc, #236	@ (adr r3, 8013640 <__kernel_cos+0x150>)
 8013552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013556:	f7ec fe63 	bl	8000220 <__aeabi_dsub>
 801355a:	4622      	mov	r2, r4
 801355c:	462b      	mov	r3, r5
 801355e:	f7ed f817 	bl	8000590 <__aeabi_dmul>
 8013562:	a339      	add	r3, pc, #228	@ (adr r3, 8013648 <__kernel_cos+0x158>)
 8013564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013568:	f7ec fe5c 	bl	8000224 <__adddf3>
 801356c:	4622      	mov	r2, r4
 801356e:	462b      	mov	r3, r5
 8013570:	f7ed f80e 	bl	8000590 <__aeabi_dmul>
 8013574:	a336      	add	r3, pc, #216	@ (adr r3, 8013650 <__kernel_cos+0x160>)
 8013576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801357a:	f7ec fe51 	bl	8000220 <__aeabi_dsub>
 801357e:	4622      	mov	r2, r4
 8013580:	462b      	mov	r3, r5
 8013582:	f7ed f805 	bl	8000590 <__aeabi_dmul>
 8013586:	a334      	add	r3, pc, #208	@ (adr r3, 8013658 <__kernel_cos+0x168>)
 8013588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801358c:	f7ec fe4a 	bl	8000224 <__adddf3>
 8013590:	4622      	mov	r2, r4
 8013592:	462b      	mov	r3, r5
 8013594:	f7ec fffc 	bl	8000590 <__aeabi_dmul>
 8013598:	4622      	mov	r2, r4
 801359a:	462b      	mov	r3, r5
 801359c:	f7ec fff8 	bl	8000590 <__aeabi_dmul>
 80135a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80135a4:	4604      	mov	r4, r0
 80135a6:	460d      	mov	r5, r1
 80135a8:	4630      	mov	r0, r6
 80135aa:	4639      	mov	r1, r7
 80135ac:	f7ec fff0 	bl	8000590 <__aeabi_dmul>
 80135b0:	460b      	mov	r3, r1
 80135b2:	4602      	mov	r2, r0
 80135b4:	4629      	mov	r1, r5
 80135b6:	4620      	mov	r0, r4
 80135b8:	f7ec fe32 	bl	8000220 <__aeabi_dsub>
 80135bc:	4b2b      	ldr	r3, [pc, #172]	@ (801366c <__kernel_cos+0x17c>)
 80135be:	4598      	cmp	r8, r3
 80135c0:	4606      	mov	r6, r0
 80135c2:	460f      	mov	r7, r1
 80135c4:	d810      	bhi.n	80135e8 <__kernel_cos+0xf8>
 80135c6:	4602      	mov	r2, r0
 80135c8:	460b      	mov	r3, r1
 80135ca:	4650      	mov	r0, sl
 80135cc:	4659      	mov	r1, fp
 80135ce:	f7ec fe27 	bl	8000220 <__aeabi_dsub>
 80135d2:	460b      	mov	r3, r1
 80135d4:	4926      	ldr	r1, [pc, #152]	@ (8013670 <__kernel_cos+0x180>)
 80135d6:	4602      	mov	r2, r0
 80135d8:	2000      	movs	r0, #0
 80135da:	f7ec fe21 	bl	8000220 <__aeabi_dsub>
 80135de:	ec41 0b10 	vmov	d0, r0, r1
 80135e2:	b003      	add	sp, #12
 80135e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135e8:	4b22      	ldr	r3, [pc, #136]	@ (8013674 <__kernel_cos+0x184>)
 80135ea:	4921      	ldr	r1, [pc, #132]	@ (8013670 <__kernel_cos+0x180>)
 80135ec:	4598      	cmp	r8, r3
 80135ee:	bf8c      	ite	hi
 80135f0:	4d21      	ldrhi	r5, [pc, #132]	@ (8013678 <__kernel_cos+0x188>)
 80135f2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80135f6:	2400      	movs	r4, #0
 80135f8:	4622      	mov	r2, r4
 80135fa:	462b      	mov	r3, r5
 80135fc:	2000      	movs	r0, #0
 80135fe:	f7ec fe0f 	bl	8000220 <__aeabi_dsub>
 8013602:	4622      	mov	r2, r4
 8013604:	4680      	mov	r8, r0
 8013606:	4689      	mov	r9, r1
 8013608:	462b      	mov	r3, r5
 801360a:	4650      	mov	r0, sl
 801360c:	4659      	mov	r1, fp
 801360e:	f7ec fe07 	bl	8000220 <__aeabi_dsub>
 8013612:	4632      	mov	r2, r6
 8013614:	463b      	mov	r3, r7
 8013616:	f7ec fe03 	bl	8000220 <__aeabi_dsub>
 801361a:	4602      	mov	r2, r0
 801361c:	460b      	mov	r3, r1
 801361e:	4640      	mov	r0, r8
 8013620:	4649      	mov	r1, r9
 8013622:	e7da      	b.n	80135da <__kernel_cos+0xea>
 8013624:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8013660 <__kernel_cos+0x170>
 8013628:	e7db      	b.n	80135e2 <__kernel_cos+0xf2>
 801362a:	bf00      	nop
 801362c:	f3af 8000 	nop.w
 8013630:	be8838d4 	.word	0xbe8838d4
 8013634:	bda8fae9 	.word	0xbda8fae9
 8013638:	bdb4b1c4 	.word	0xbdb4b1c4
 801363c:	3e21ee9e 	.word	0x3e21ee9e
 8013640:	809c52ad 	.word	0x809c52ad
 8013644:	3e927e4f 	.word	0x3e927e4f
 8013648:	19cb1590 	.word	0x19cb1590
 801364c:	3efa01a0 	.word	0x3efa01a0
 8013650:	16c15177 	.word	0x16c15177
 8013654:	3f56c16c 	.word	0x3f56c16c
 8013658:	5555554c 	.word	0x5555554c
 801365c:	3fa55555 	.word	0x3fa55555
 8013660:	00000000 	.word	0x00000000
 8013664:	3ff00000 	.word	0x3ff00000
 8013668:	3fe00000 	.word	0x3fe00000
 801366c:	3fd33332 	.word	0x3fd33332
 8013670:	3ff00000 	.word	0x3ff00000
 8013674:	3fe90000 	.word	0x3fe90000
 8013678:	3fd20000 	.word	0x3fd20000
 801367c:	00000000 	.word	0x00000000

08013680 <__kernel_sin>:
 8013680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013684:	ec55 4b10 	vmov	r4, r5, d0
 8013688:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801368c:	b085      	sub	sp, #20
 801368e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8013692:	ed8d 1b02 	vstr	d1, [sp, #8]
 8013696:	4680      	mov	r8, r0
 8013698:	d205      	bcs.n	80136a6 <__kernel_sin+0x26>
 801369a:	4620      	mov	r0, r4
 801369c:	4629      	mov	r1, r5
 801369e:	f7ed fa11 	bl	8000ac4 <__aeabi_d2iz>
 80136a2:	2800      	cmp	r0, #0
 80136a4:	d052      	beq.n	801374c <__kernel_sin+0xcc>
 80136a6:	4622      	mov	r2, r4
 80136a8:	462b      	mov	r3, r5
 80136aa:	4620      	mov	r0, r4
 80136ac:	4629      	mov	r1, r5
 80136ae:	f7ec ff6f 	bl	8000590 <__aeabi_dmul>
 80136b2:	4682      	mov	sl, r0
 80136b4:	468b      	mov	fp, r1
 80136b6:	4602      	mov	r2, r0
 80136b8:	460b      	mov	r3, r1
 80136ba:	4620      	mov	r0, r4
 80136bc:	4629      	mov	r1, r5
 80136be:	f7ec ff67 	bl	8000590 <__aeabi_dmul>
 80136c2:	a342      	add	r3, pc, #264	@ (adr r3, 80137cc <__kernel_sin+0x14c>)
 80136c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136c8:	e9cd 0100 	strd	r0, r1, [sp]
 80136cc:	4650      	mov	r0, sl
 80136ce:	4659      	mov	r1, fp
 80136d0:	f7ec ff5e 	bl	8000590 <__aeabi_dmul>
 80136d4:	a33f      	add	r3, pc, #252	@ (adr r3, 80137d4 <__kernel_sin+0x154>)
 80136d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136da:	f7ec fda1 	bl	8000220 <__aeabi_dsub>
 80136de:	4652      	mov	r2, sl
 80136e0:	465b      	mov	r3, fp
 80136e2:	f7ec ff55 	bl	8000590 <__aeabi_dmul>
 80136e6:	a33d      	add	r3, pc, #244	@ (adr r3, 80137dc <__kernel_sin+0x15c>)
 80136e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ec:	f7ec fd9a 	bl	8000224 <__adddf3>
 80136f0:	4652      	mov	r2, sl
 80136f2:	465b      	mov	r3, fp
 80136f4:	f7ec ff4c 	bl	8000590 <__aeabi_dmul>
 80136f8:	a33a      	add	r3, pc, #232	@ (adr r3, 80137e4 <__kernel_sin+0x164>)
 80136fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136fe:	f7ec fd8f 	bl	8000220 <__aeabi_dsub>
 8013702:	4652      	mov	r2, sl
 8013704:	465b      	mov	r3, fp
 8013706:	f7ec ff43 	bl	8000590 <__aeabi_dmul>
 801370a:	a338      	add	r3, pc, #224	@ (adr r3, 80137ec <__kernel_sin+0x16c>)
 801370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013710:	f7ec fd88 	bl	8000224 <__adddf3>
 8013714:	4606      	mov	r6, r0
 8013716:	460f      	mov	r7, r1
 8013718:	f1b8 0f00 	cmp.w	r8, #0
 801371c:	d11b      	bne.n	8013756 <__kernel_sin+0xd6>
 801371e:	4602      	mov	r2, r0
 8013720:	460b      	mov	r3, r1
 8013722:	4650      	mov	r0, sl
 8013724:	4659      	mov	r1, fp
 8013726:	f7ec ff33 	bl	8000590 <__aeabi_dmul>
 801372a:	a325      	add	r3, pc, #148	@ (adr r3, 80137c0 <__kernel_sin+0x140>)
 801372c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013730:	f7ec fd76 	bl	8000220 <__aeabi_dsub>
 8013734:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013738:	f7ec ff2a 	bl	8000590 <__aeabi_dmul>
 801373c:	4602      	mov	r2, r0
 801373e:	460b      	mov	r3, r1
 8013740:	4620      	mov	r0, r4
 8013742:	4629      	mov	r1, r5
 8013744:	f7ec fd6e 	bl	8000224 <__adddf3>
 8013748:	4604      	mov	r4, r0
 801374a:	460d      	mov	r5, r1
 801374c:	ec45 4b10 	vmov	d0, r4, r5
 8013750:	b005      	add	sp, #20
 8013752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801375a:	4b1b      	ldr	r3, [pc, #108]	@ (80137c8 <__kernel_sin+0x148>)
 801375c:	2200      	movs	r2, #0
 801375e:	f7ec ff17 	bl	8000590 <__aeabi_dmul>
 8013762:	4632      	mov	r2, r6
 8013764:	4680      	mov	r8, r0
 8013766:	4689      	mov	r9, r1
 8013768:	463b      	mov	r3, r7
 801376a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801376e:	f7ec ff0f 	bl	8000590 <__aeabi_dmul>
 8013772:	4602      	mov	r2, r0
 8013774:	460b      	mov	r3, r1
 8013776:	4640      	mov	r0, r8
 8013778:	4649      	mov	r1, r9
 801377a:	f7ec fd51 	bl	8000220 <__aeabi_dsub>
 801377e:	4652      	mov	r2, sl
 8013780:	465b      	mov	r3, fp
 8013782:	f7ec ff05 	bl	8000590 <__aeabi_dmul>
 8013786:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801378a:	f7ec fd49 	bl	8000220 <__aeabi_dsub>
 801378e:	a30c      	add	r3, pc, #48	@ (adr r3, 80137c0 <__kernel_sin+0x140>)
 8013790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013794:	4606      	mov	r6, r0
 8013796:	460f      	mov	r7, r1
 8013798:	e9dd 0100 	ldrd	r0, r1, [sp]
 801379c:	f7ec fef8 	bl	8000590 <__aeabi_dmul>
 80137a0:	4602      	mov	r2, r0
 80137a2:	460b      	mov	r3, r1
 80137a4:	4630      	mov	r0, r6
 80137a6:	4639      	mov	r1, r7
 80137a8:	f7ec fd3c 	bl	8000224 <__adddf3>
 80137ac:	4602      	mov	r2, r0
 80137ae:	460b      	mov	r3, r1
 80137b0:	4620      	mov	r0, r4
 80137b2:	4629      	mov	r1, r5
 80137b4:	f7ec fd34 	bl	8000220 <__aeabi_dsub>
 80137b8:	e7c6      	b.n	8013748 <__kernel_sin+0xc8>
 80137ba:	bf00      	nop
 80137bc:	f3af 8000 	nop.w
 80137c0:	55555549 	.word	0x55555549
 80137c4:	3fc55555 	.word	0x3fc55555
 80137c8:	3fe00000 	.word	0x3fe00000
 80137cc:	5acfd57c 	.word	0x5acfd57c
 80137d0:	3de5d93a 	.word	0x3de5d93a
 80137d4:	8a2b9ceb 	.word	0x8a2b9ceb
 80137d8:	3e5ae5e6 	.word	0x3e5ae5e6
 80137dc:	57b1fe7d 	.word	0x57b1fe7d
 80137e0:	3ec71de3 	.word	0x3ec71de3
 80137e4:	19c161d5 	.word	0x19c161d5
 80137e8:	3f2a01a0 	.word	0x3f2a01a0
 80137ec:	1110f8a6 	.word	0x1110f8a6
 80137f0:	3f811111 	.word	0x3f811111
 80137f4:	00000000 	.word	0x00000000

080137f8 <__ieee754_rem_pio2>:
 80137f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137fc:	ec57 6b10 	vmov	r6, r7, d0
 8013800:	4bc5      	ldr	r3, [pc, #788]	@ (8013b18 <__ieee754_rem_pio2+0x320>)
 8013802:	b08d      	sub	sp, #52	@ 0x34
 8013804:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8013808:	4598      	cmp	r8, r3
 801380a:	4604      	mov	r4, r0
 801380c:	9704      	str	r7, [sp, #16]
 801380e:	d807      	bhi.n	8013820 <__ieee754_rem_pio2+0x28>
 8013810:	2200      	movs	r2, #0
 8013812:	2300      	movs	r3, #0
 8013814:	ed80 0b00 	vstr	d0, [r0]
 8013818:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801381c:	2500      	movs	r5, #0
 801381e:	e028      	b.n	8013872 <__ieee754_rem_pio2+0x7a>
 8013820:	4bbe      	ldr	r3, [pc, #760]	@ (8013b1c <__ieee754_rem_pio2+0x324>)
 8013822:	4598      	cmp	r8, r3
 8013824:	d878      	bhi.n	8013918 <__ieee754_rem_pio2+0x120>
 8013826:	9b04      	ldr	r3, [sp, #16]
 8013828:	4dbd      	ldr	r5, [pc, #756]	@ (8013b20 <__ieee754_rem_pio2+0x328>)
 801382a:	2b00      	cmp	r3, #0
 801382c:	4630      	mov	r0, r6
 801382e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8013ae0 <__ieee754_rem_pio2+0x2e8>)
 8013830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013834:	4639      	mov	r1, r7
 8013836:	dd38      	ble.n	80138aa <__ieee754_rem_pio2+0xb2>
 8013838:	f7ec fcf2 	bl	8000220 <__aeabi_dsub>
 801383c:	45a8      	cmp	r8, r5
 801383e:	4606      	mov	r6, r0
 8013840:	460f      	mov	r7, r1
 8013842:	d01a      	beq.n	801387a <__ieee754_rem_pio2+0x82>
 8013844:	a3a8      	add	r3, pc, #672	@ (adr r3, 8013ae8 <__ieee754_rem_pio2+0x2f0>)
 8013846:	e9d3 2300 	ldrd	r2, r3, [r3]
 801384a:	f7ec fce9 	bl	8000220 <__aeabi_dsub>
 801384e:	4602      	mov	r2, r0
 8013850:	460b      	mov	r3, r1
 8013852:	4680      	mov	r8, r0
 8013854:	4689      	mov	r9, r1
 8013856:	4630      	mov	r0, r6
 8013858:	4639      	mov	r1, r7
 801385a:	f7ec fce1 	bl	8000220 <__aeabi_dsub>
 801385e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8013ae8 <__ieee754_rem_pio2+0x2f0>)
 8013860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013864:	f7ec fcdc 	bl	8000220 <__aeabi_dsub>
 8013868:	e9c4 8900 	strd	r8, r9, [r4]
 801386c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013870:	2501      	movs	r5, #1
 8013872:	4628      	mov	r0, r5
 8013874:	b00d      	add	sp, #52	@ 0x34
 8013876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801387a:	a39d      	add	r3, pc, #628	@ (adr r3, 8013af0 <__ieee754_rem_pio2+0x2f8>)
 801387c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013880:	f7ec fcce 	bl	8000220 <__aeabi_dsub>
 8013884:	a39c      	add	r3, pc, #624	@ (adr r3, 8013af8 <__ieee754_rem_pio2+0x300>)
 8013886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801388a:	4606      	mov	r6, r0
 801388c:	460f      	mov	r7, r1
 801388e:	f7ec fcc7 	bl	8000220 <__aeabi_dsub>
 8013892:	4602      	mov	r2, r0
 8013894:	460b      	mov	r3, r1
 8013896:	4680      	mov	r8, r0
 8013898:	4689      	mov	r9, r1
 801389a:	4630      	mov	r0, r6
 801389c:	4639      	mov	r1, r7
 801389e:	f7ec fcbf 	bl	8000220 <__aeabi_dsub>
 80138a2:	a395      	add	r3, pc, #596	@ (adr r3, 8013af8 <__ieee754_rem_pio2+0x300>)
 80138a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138a8:	e7dc      	b.n	8013864 <__ieee754_rem_pio2+0x6c>
 80138aa:	f7ec fcbb 	bl	8000224 <__adddf3>
 80138ae:	45a8      	cmp	r8, r5
 80138b0:	4606      	mov	r6, r0
 80138b2:	460f      	mov	r7, r1
 80138b4:	d018      	beq.n	80138e8 <__ieee754_rem_pio2+0xf0>
 80138b6:	a38c      	add	r3, pc, #560	@ (adr r3, 8013ae8 <__ieee754_rem_pio2+0x2f0>)
 80138b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138bc:	f7ec fcb2 	bl	8000224 <__adddf3>
 80138c0:	4602      	mov	r2, r0
 80138c2:	460b      	mov	r3, r1
 80138c4:	4680      	mov	r8, r0
 80138c6:	4689      	mov	r9, r1
 80138c8:	4630      	mov	r0, r6
 80138ca:	4639      	mov	r1, r7
 80138cc:	f7ec fca8 	bl	8000220 <__aeabi_dsub>
 80138d0:	a385      	add	r3, pc, #532	@ (adr r3, 8013ae8 <__ieee754_rem_pio2+0x2f0>)
 80138d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138d6:	f7ec fca5 	bl	8000224 <__adddf3>
 80138da:	f04f 35ff 	mov.w	r5, #4294967295
 80138de:	e9c4 8900 	strd	r8, r9, [r4]
 80138e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80138e6:	e7c4      	b.n	8013872 <__ieee754_rem_pio2+0x7a>
 80138e8:	a381      	add	r3, pc, #516	@ (adr r3, 8013af0 <__ieee754_rem_pio2+0x2f8>)
 80138ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138ee:	f7ec fc99 	bl	8000224 <__adddf3>
 80138f2:	a381      	add	r3, pc, #516	@ (adr r3, 8013af8 <__ieee754_rem_pio2+0x300>)
 80138f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138f8:	4606      	mov	r6, r0
 80138fa:	460f      	mov	r7, r1
 80138fc:	f7ec fc92 	bl	8000224 <__adddf3>
 8013900:	4602      	mov	r2, r0
 8013902:	460b      	mov	r3, r1
 8013904:	4680      	mov	r8, r0
 8013906:	4689      	mov	r9, r1
 8013908:	4630      	mov	r0, r6
 801390a:	4639      	mov	r1, r7
 801390c:	f7ec fc88 	bl	8000220 <__aeabi_dsub>
 8013910:	a379      	add	r3, pc, #484	@ (adr r3, 8013af8 <__ieee754_rem_pio2+0x300>)
 8013912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013916:	e7de      	b.n	80138d6 <__ieee754_rem_pio2+0xde>
 8013918:	4b82      	ldr	r3, [pc, #520]	@ (8013b24 <__ieee754_rem_pio2+0x32c>)
 801391a:	4598      	cmp	r8, r3
 801391c:	f200 80d1 	bhi.w	8013ac2 <__ieee754_rem_pio2+0x2ca>
 8013920:	f000 f966 	bl	8013bf0 <fabs>
 8013924:	ec57 6b10 	vmov	r6, r7, d0
 8013928:	a375      	add	r3, pc, #468	@ (adr r3, 8013b00 <__ieee754_rem_pio2+0x308>)
 801392a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801392e:	4630      	mov	r0, r6
 8013930:	4639      	mov	r1, r7
 8013932:	f7ec fe2d 	bl	8000590 <__aeabi_dmul>
 8013936:	4b7c      	ldr	r3, [pc, #496]	@ (8013b28 <__ieee754_rem_pio2+0x330>)
 8013938:	2200      	movs	r2, #0
 801393a:	f7ec fc73 	bl	8000224 <__adddf3>
 801393e:	f7ed f8c1 	bl	8000ac4 <__aeabi_d2iz>
 8013942:	4605      	mov	r5, r0
 8013944:	f7ec fdba 	bl	80004bc <__aeabi_i2d>
 8013948:	4602      	mov	r2, r0
 801394a:	460b      	mov	r3, r1
 801394c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013950:	a363      	add	r3, pc, #396	@ (adr r3, 8013ae0 <__ieee754_rem_pio2+0x2e8>)
 8013952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013956:	f7ec fe1b 	bl	8000590 <__aeabi_dmul>
 801395a:	4602      	mov	r2, r0
 801395c:	460b      	mov	r3, r1
 801395e:	4630      	mov	r0, r6
 8013960:	4639      	mov	r1, r7
 8013962:	f7ec fc5d 	bl	8000220 <__aeabi_dsub>
 8013966:	a360      	add	r3, pc, #384	@ (adr r3, 8013ae8 <__ieee754_rem_pio2+0x2f0>)
 8013968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801396c:	4682      	mov	sl, r0
 801396e:	468b      	mov	fp, r1
 8013970:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013974:	f7ec fe0c 	bl	8000590 <__aeabi_dmul>
 8013978:	2d1f      	cmp	r5, #31
 801397a:	4606      	mov	r6, r0
 801397c:	460f      	mov	r7, r1
 801397e:	dc0c      	bgt.n	801399a <__ieee754_rem_pio2+0x1a2>
 8013980:	4b6a      	ldr	r3, [pc, #424]	@ (8013b2c <__ieee754_rem_pio2+0x334>)
 8013982:	1e6a      	subs	r2, r5, #1
 8013984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013988:	4543      	cmp	r3, r8
 801398a:	d006      	beq.n	801399a <__ieee754_rem_pio2+0x1a2>
 801398c:	4632      	mov	r2, r6
 801398e:	463b      	mov	r3, r7
 8013990:	4650      	mov	r0, sl
 8013992:	4659      	mov	r1, fp
 8013994:	f7ec fc44 	bl	8000220 <__aeabi_dsub>
 8013998:	e00e      	b.n	80139b8 <__ieee754_rem_pio2+0x1c0>
 801399a:	463b      	mov	r3, r7
 801399c:	4632      	mov	r2, r6
 801399e:	4650      	mov	r0, sl
 80139a0:	4659      	mov	r1, fp
 80139a2:	f7ec fc3d 	bl	8000220 <__aeabi_dsub>
 80139a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80139aa:	9305      	str	r3, [sp, #20]
 80139ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80139b0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80139b4:	2b10      	cmp	r3, #16
 80139b6:	dc02      	bgt.n	80139be <__ieee754_rem_pio2+0x1c6>
 80139b8:	e9c4 0100 	strd	r0, r1, [r4]
 80139bc:	e039      	b.n	8013a32 <__ieee754_rem_pio2+0x23a>
 80139be:	a34c      	add	r3, pc, #304	@ (adr r3, 8013af0 <__ieee754_rem_pio2+0x2f8>)
 80139c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139c8:	f7ec fde2 	bl	8000590 <__aeabi_dmul>
 80139cc:	4606      	mov	r6, r0
 80139ce:	460f      	mov	r7, r1
 80139d0:	4602      	mov	r2, r0
 80139d2:	460b      	mov	r3, r1
 80139d4:	4650      	mov	r0, sl
 80139d6:	4659      	mov	r1, fp
 80139d8:	f7ec fc22 	bl	8000220 <__aeabi_dsub>
 80139dc:	4602      	mov	r2, r0
 80139de:	460b      	mov	r3, r1
 80139e0:	4680      	mov	r8, r0
 80139e2:	4689      	mov	r9, r1
 80139e4:	4650      	mov	r0, sl
 80139e6:	4659      	mov	r1, fp
 80139e8:	f7ec fc1a 	bl	8000220 <__aeabi_dsub>
 80139ec:	4632      	mov	r2, r6
 80139ee:	463b      	mov	r3, r7
 80139f0:	f7ec fc16 	bl	8000220 <__aeabi_dsub>
 80139f4:	a340      	add	r3, pc, #256	@ (adr r3, 8013af8 <__ieee754_rem_pio2+0x300>)
 80139f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139fa:	4606      	mov	r6, r0
 80139fc:	460f      	mov	r7, r1
 80139fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a02:	f7ec fdc5 	bl	8000590 <__aeabi_dmul>
 8013a06:	4632      	mov	r2, r6
 8013a08:	463b      	mov	r3, r7
 8013a0a:	f7ec fc09 	bl	8000220 <__aeabi_dsub>
 8013a0e:	4602      	mov	r2, r0
 8013a10:	460b      	mov	r3, r1
 8013a12:	4606      	mov	r6, r0
 8013a14:	460f      	mov	r7, r1
 8013a16:	4640      	mov	r0, r8
 8013a18:	4649      	mov	r1, r9
 8013a1a:	f7ec fc01 	bl	8000220 <__aeabi_dsub>
 8013a1e:	9a05      	ldr	r2, [sp, #20]
 8013a20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013a24:	1ad3      	subs	r3, r2, r3
 8013a26:	2b31      	cmp	r3, #49	@ 0x31
 8013a28:	dc20      	bgt.n	8013a6c <__ieee754_rem_pio2+0x274>
 8013a2a:	e9c4 0100 	strd	r0, r1, [r4]
 8013a2e:	46c2      	mov	sl, r8
 8013a30:	46cb      	mov	fp, r9
 8013a32:	e9d4 8900 	ldrd	r8, r9, [r4]
 8013a36:	4650      	mov	r0, sl
 8013a38:	4642      	mov	r2, r8
 8013a3a:	464b      	mov	r3, r9
 8013a3c:	4659      	mov	r1, fp
 8013a3e:	f7ec fbef 	bl	8000220 <__aeabi_dsub>
 8013a42:	463b      	mov	r3, r7
 8013a44:	4632      	mov	r2, r6
 8013a46:	f7ec fbeb 	bl	8000220 <__aeabi_dsub>
 8013a4a:	9b04      	ldr	r3, [sp, #16]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013a52:	f6bf af0e 	bge.w	8013872 <__ieee754_rem_pio2+0x7a>
 8013a56:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8013a5a:	6063      	str	r3, [r4, #4]
 8013a5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013a60:	f8c4 8000 	str.w	r8, [r4]
 8013a64:	60a0      	str	r0, [r4, #8]
 8013a66:	60e3      	str	r3, [r4, #12]
 8013a68:	426d      	negs	r5, r5
 8013a6a:	e702      	b.n	8013872 <__ieee754_rem_pio2+0x7a>
 8013a6c:	a326      	add	r3, pc, #152	@ (adr r3, 8013b08 <__ieee754_rem_pio2+0x310>)
 8013a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013a76:	f7ec fd8b 	bl	8000590 <__aeabi_dmul>
 8013a7a:	4606      	mov	r6, r0
 8013a7c:	460f      	mov	r7, r1
 8013a7e:	4602      	mov	r2, r0
 8013a80:	460b      	mov	r3, r1
 8013a82:	4640      	mov	r0, r8
 8013a84:	4649      	mov	r1, r9
 8013a86:	f7ec fbcb 	bl	8000220 <__aeabi_dsub>
 8013a8a:	4602      	mov	r2, r0
 8013a8c:	460b      	mov	r3, r1
 8013a8e:	4682      	mov	sl, r0
 8013a90:	468b      	mov	fp, r1
 8013a92:	4640      	mov	r0, r8
 8013a94:	4649      	mov	r1, r9
 8013a96:	f7ec fbc3 	bl	8000220 <__aeabi_dsub>
 8013a9a:	4632      	mov	r2, r6
 8013a9c:	463b      	mov	r3, r7
 8013a9e:	f7ec fbbf 	bl	8000220 <__aeabi_dsub>
 8013aa2:	a31b      	add	r3, pc, #108	@ (adr r3, 8013b10 <__ieee754_rem_pio2+0x318>)
 8013aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aa8:	4606      	mov	r6, r0
 8013aaa:	460f      	mov	r7, r1
 8013aac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ab0:	f7ec fd6e 	bl	8000590 <__aeabi_dmul>
 8013ab4:	4632      	mov	r2, r6
 8013ab6:	463b      	mov	r3, r7
 8013ab8:	f7ec fbb2 	bl	8000220 <__aeabi_dsub>
 8013abc:	4606      	mov	r6, r0
 8013abe:	460f      	mov	r7, r1
 8013ac0:	e764      	b.n	801398c <__ieee754_rem_pio2+0x194>
 8013ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8013b30 <__ieee754_rem_pio2+0x338>)
 8013ac4:	4598      	cmp	r8, r3
 8013ac6:	d935      	bls.n	8013b34 <__ieee754_rem_pio2+0x33c>
 8013ac8:	4632      	mov	r2, r6
 8013aca:	463b      	mov	r3, r7
 8013acc:	4630      	mov	r0, r6
 8013ace:	4639      	mov	r1, r7
 8013ad0:	f7ec fba6 	bl	8000220 <__aeabi_dsub>
 8013ad4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013ad8:	e9c4 0100 	strd	r0, r1, [r4]
 8013adc:	e69e      	b.n	801381c <__ieee754_rem_pio2+0x24>
 8013ade:	bf00      	nop
 8013ae0:	54400000 	.word	0x54400000
 8013ae4:	3ff921fb 	.word	0x3ff921fb
 8013ae8:	1a626331 	.word	0x1a626331
 8013aec:	3dd0b461 	.word	0x3dd0b461
 8013af0:	1a600000 	.word	0x1a600000
 8013af4:	3dd0b461 	.word	0x3dd0b461
 8013af8:	2e037073 	.word	0x2e037073
 8013afc:	3ba3198a 	.word	0x3ba3198a
 8013b00:	6dc9c883 	.word	0x6dc9c883
 8013b04:	3fe45f30 	.word	0x3fe45f30
 8013b08:	2e000000 	.word	0x2e000000
 8013b0c:	3ba3198a 	.word	0x3ba3198a
 8013b10:	252049c1 	.word	0x252049c1
 8013b14:	397b839a 	.word	0x397b839a
 8013b18:	3fe921fb 	.word	0x3fe921fb
 8013b1c:	4002d97b 	.word	0x4002d97b
 8013b20:	3ff921fb 	.word	0x3ff921fb
 8013b24:	413921fb 	.word	0x413921fb
 8013b28:	3fe00000 	.word	0x3fe00000
 8013b2c:	08015020 	.word	0x08015020
 8013b30:	7fefffff 	.word	0x7fefffff
 8013b34:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013b38:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8013b3c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013b40:	4630      	mov	r0, r6
 8013b42:	460f      	mov	r7, r1
 8013b44:	f7ec ffbe 	bl	8000ac4 <__aeabi_d2iz>
 8013b48:	f7ec fcb8 	bl	80004bc <__aeabi_i2d>
 8013b4c:	4602      	mov	r2, r0
 8013b4e:	460b      	mov	r3, r1
 8013b50:	4630      	mov	r0, r6
 8013b52:	4639      	mov	r1, r7
 8013b54:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013b58:	f7ec fb62 	bl	8000220 <__aeabi_dsub>
 8013b5c:	4b22      	ldr	r3, [pc, #136]	@ (8013be8 <__ieee754_rem_pio2+0x3f0>)
 8013b5e:	2200      	movs	r2, #0
 8013b60:	f7ec fd16 	bl	8000590 <__aeabi_dmul>
 8013b64:	460f      	mov	r7, r1
 8013b66:	4606      	mov	r6, r0
 8013b68:	f7ec ffac 	bl	8000ac4 <__aeabi_d2iz>
 8013b6c:	f7ec fca6 	bl	80004bc <__aeabi_i2d>
 8013b70:	4602      	mov	r2, r0
 8013b72:	460b      	mov	r3, r1
 8013b74:	4630      	mov	r0, r6
 8013b76:	4639      	mov	r1, r7
 8013b78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013b7c:	f7ec fb50 	bl	8000220 <__aeabi_dsub>
 8013b80:	4b19      	ldr	r3, [pc, #100]	@ (8013be8 <__ieee754_rem_pio2+0x3f0>)
 8013b82:	2200      	movs	r2, #0
 8013b84:	f7ec fd04 	bl	8000590 <__aeabi_dmul>
 8013b88:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8013b8c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8013b90:	f04f 0803 	mov.w	r8, #3
 8013b94:	2600      	movs	r6, #0
 8013b96:	2700      	movs	r7, #0
 8013b98:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013b9c:	4632      	mov	r2, r6
 8013b9e:	463b      	mov	r3, r7
 8013ba0:	46c2      	mov	sl, r8
 8013ba2:	f108 38ff 	add.w	r8, r8, #4294967295
 8013ba6:	f7ec ff5b 	bl	8000a60 <__aeabi_dcmpeq>
 8013baa:	2800      	cmp	r0, #0
 8013bac:	d1f4      	bne.n	8013b98 <__ieee754_rem_pio2+0x3a0>
 8013bae:	4b0f      	ldr	r3, [pc, #60]	@ (8013bec <__ieee754_rem_pio2+0x3f4>)
 8013bb0:	9301      	str	r3, [sp, #4]
 8013bb2:	2302      	movs	r3, #2
 8013bb4:	9300      	str	r3, [sp, #0]
 8013bb6:	462a      	mov	r2, r5
 8013bb8:	4653      	mov	r3, sl
 8013bba:	4621      	mov	r1, r4
 8013bbc:	a806      	add	r0, sp, #24
 8013bbe:	f000 fb5b 	bl	8014278 <__kernel_rem_pio2>
 8013bc2:	9b04      	ldr	r3, [sp, #16]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	4605      	mov	r5, r0
 8013bc8:	f6bf ae53 	bge.w	8013872 <__ieee754_rem_pio2+0x7a>
 8013bcc:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013bd0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013bd4:	e9c4 2300 	strd	r2, r3, [r4]
 8013bd8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8013bdc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013be0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8013be4:	e740      	b.n	8013a68 <__ieee754_rem_pio2+0x270>
 8013be6:	bf00      	nop
 8013be8:	41700000 	.word	0x41700000
 8013bec:	080150a0 	.word	0x080150a0

08013bf0 <fabs>:
 8013bf0:	ec51 0b10 	vmov	r0, r1, d0
 8013bf4:	4602      	mov	r2, r0
 8013bf6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8013bfa:	ec43 2b10 	vmov	d0, r2, r3
 8013bfe:	4770      	bx	lr

08013c00 <__kernel_cosf>:
 8013c00:	ee10 3a10 	vmov	r3, s0
 8013c04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013c08:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013c0c:	eef0 6a40 	vmov.f32	s13, s0
 8013c10:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013c14:	d204      	bcs.n	8013c20 <__kernel_cosf+0x20>
 8013c16:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8013c1a:	ee17 2a90 	vmov	r2, s15
 8013c1e:	b342      	cbz	r2, 8013c72 <__kernel_cosf+0x72>
 8013c20:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013c24:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8013c90 <__kernel_cosf+0x90>
 8013c28:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8013c94 <__kernel_cosf+0x94>
 8013c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8013c98 <__kernel_cosf+0x98>)
 8013c2e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013c32:	4293      	cmp	r3, r2
 8013c34:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013c9c <__kernel_cosf+0x9c>
 8013c38:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013c3c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8013ca0 <__kernel_cosf+0xa0>
 8013c40:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013c44:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8013ca4 <__kernel_cosf+0xa4>
 8013c48:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013c4c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8013ca8 <__kernel_cosf+0xa8>
 8013c50:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013c54:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8013c58:	ee26 6a07 	vmul.f32	s12, s12, s14
 8013c5c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013c60:	eee7 0a06 	vfma.f32	s1, s14, s12
 8013c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013c68:	d804      	bhi.n	8013c74 <__kernel_cosf+0x74>
 8013c6a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013c6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013c72:	4770      	bx	lr
 8013c74:	4a0d      	ldr	r2, [pc, #52]	@ (8013cac <__kernel_cosf+0xac>)
 8013c76:	4293      	cmp	r3, r2
 8013c78:	bf9a      	itte	ls
 8013c7a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8013c7e:	ee07 3a10 	vmovls	s14, r3
 8013c82:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8013c86:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013c8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c8e:	e7ec      	b.n	8013c6a <__kernel_cosf+0x6a>
 8013c90:	ad47d74e 	.word	0xad47d74e
 8013c94:	310f74f6 	.word	0x310f74f6
 8013c98:	3e999999 	.word	0x3e999999
 8013c9c:	b493f27c 	.word	0xb493f27c
 8013ca0:	37d00d01 	.word	0x37d00d01
 8013ca4:	bab60b61 	.word	0xbab60b61
 8013ca8:	3d2aaaab 	.word	0x3d2aaaab
 8013cac:	3f480000 	.word	0x3f480000

08013cb0 <__kernel_sinf>:
 8013cb0:	ee10 3a10 	vmov	r3, s0
 8013cb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013cb8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013cbc:	d204      	bcs.n	8013cc8 <__kernel_sinf+0x18>
 8013cbe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013cc2:	ee17 3a90 	vmov	r3, s15
 8013cc6:	b35b      	cbz	r3, 8013d20 <__kernel_sinf+0x70>
 8013cc8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013ccc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8013d24 <__kernel_sinf+0x74>
 8013cd0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8013d28 <__kernel_sinf+0x78>
 8013cd4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013cd8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8013d2c <__kernel_sinf+0x7c>
 8013cdc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013ce0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8013d30 <__kernel_sinf+0x80>
 8013ce4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013ce8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8013d34 <__kernel_sinf+0x84>
 8013cec:	ee60 6a07 	vmul.f32	s13, s0, s14
 8013cf0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013cf4:	b930      	cbnz	r0, 8013d04 <__kernel_sinf+0x54>
 8013cf6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8013d38 <__kernel_sinf+0x88>
 8013cfa:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013cfe:	eea6 0a26 	vfma.f32	s0, s12, s13
 8013d02:	4770      	bx	lr
 8013d04:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8013d08:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8013d0c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8013d10:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8013d14:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8013d3c <__kernel_sinf+0x8c>
 8013d18:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8013d1c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013d20:	4770      	bx	lr
 8013d22:	bf00      	nop
 8013d24:	2f2ec9d3 	.word	0x2f2ec9d3
 8013d28:	b2d72f34 	.word	0xb2d72f34
 8013d2c:	3638ef1b 	.word	0x3638ef1b
 8013d30:	b9500d01 	.word	0xb9500d01
 8013d34:	3c088889 	.word	0x3c088889
 8013d38:	be2aaaab 	.word	0xbe2aaaab
 8013d3c:	3e2aaaab 	.word	0x3e2aaaab

08013d40 <__ieee754_fmodf>:
 8013d40:	b570      	push	{r4, r5, r6, lr}
 8013d42:	ee10 6a90 	vmov	r6, s1
 8013d46:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013d4a:	1e5a      	subs	r2, r3, #1
 8013d4c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013d50:	d206      	bcs.n	8013d60 <__ieee754_fmodf+0x20>
 8013d52:	ee10 4a10 	vmov	r4, s0
 8013d56:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 8013d5a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013d5e:	d304      	bcc.n	8013d6a <__ieee754_fmodf+0x2a>
 8013d60:	ee60 0a20 	vmul.f32	s1, s0, s1
 8013d64:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8013d68:	bd70      	pop	{r4, r5, r6, pc}
 8013d6a:	4299      	cmp	r1, r3
 8013d6c:	dbfc      	blt.n	8013d68 <__ieee754_fmodf+0x28>
 8013d6e:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 8013d72:	d105      	bne.n	8013d80 <__ieee754_fmodf+0x40>
 8013d74:	4b32      	ldr	r3, [pc, #200]	@ (8013e40 <__ieee754_fmodf+0x100>)
 8013d76:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8013d7a:	ed93 0a00 	vldr	s0, [r3]
 8013d7e:	e7f3      	b.n	8013d68 <__ieee754_fmodf+0x28>
 8013d80:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8013d84:	d146      	bne.n	8013e14 <__ieee754_fmodf+0xd4>
 8013d86:	020a      	lsls	r2, r1, #8
 8013d88:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8013d8c:	2a00      	cmp	r2, #0
 8013d8e:	dc3e      	bgt.n	8013e0e <__ieee754_fmodf+0xce>
 8013d90:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8013d94:	bf01      	itttt	eq
 8013d96:	021a      	lsleq	r2, r3, #8
 8013d98:	fab2 f282 	clzeq	r2, r2
 8013d9c:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8013da0:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 8013da4:	bf16      	itet	ne
 8013da6:	15da      	asrne	r2, r3, #23
 8013da8:	3282      	addeq	r2, #130	@ 0x82
 8013daa:	3a7f      	subne	r2, #127	@ 0x7f
 8013dac:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8013db0:	bfbb      	ittet	lt
 8013db2:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8013db6:	1a24      	sublt	r4, r4, r0
 8013db8:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8013dbc:	40a1      	lsllt	r1, r4
 8013dbe:	bfa8      	it	ge
 8013dc0:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 8013dc4:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8013dc8:	bfb5      	itete	lt
 8013dca:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8013dce:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 8013dd2:	1aa4      	sublt	r4, r4, r2
 8013dd4:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8013dd8:	bfb8      	it	lt
 8013dda:	fa03 f404 	lsllt.w	r4, r3, r4
 8013dde:	1a80      	subs	r0, r0, r2
 8013de0:	1b0b      	subs	r3, r1, r4
 8013de2:	b9d0      	cbnz	r0, 8013e1a <__ieee754_fmodf+0xda>
 8013de4:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8013de8:	bf28      	it	cs
 8013dea:	460b      	movcs	r3, r1
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d0c1      	beq.n	8013d74 <__ieee754_fmodf+0x34>
 8013df0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8013df4:	db19      	blt.n	8013e2a <__ieee754_fmodf+0xea>
 8013df6:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8013dfa:	db19      	blt.n	8013e30 <__ieee754_fmodf+0xf0>
 8013dfc:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8013e00:	327f      	adds	r2, #127	@ 0x7f
 8013e02:	432b      	orrs	r3, r5
 8013e04:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8013e08:	ee00 3a10 	vmov	s0, r3
 8013e0c:	e7ac      	b.n	8013d68 <__ieee754_fmodf+0x28>
 8013e0e:	3801      	subs	r0, #1
 8013e10:	0052      	lsls	r2, r2, #1
 8013e12:	e7bb      	b.n	8013d8c <__ieee754_fmodf+0x4c>
 8013e14:	15c8      	asrs	r0, r1, #23
 8013e16:	387f      	subs	r0, #127	@ 0x7f
 8013e18:	e7ba      	b.n	8013d90 <__ieee754_fmodf+0x50>
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	da02      	bge.n	8013e24 <__ieee754_fmodf+0xe4>
 8013e1e:	0049      	lsls	r1, r1, #1
 8013e20:	3801      	subs	r0, #1
 8013e22:	e7dd      	b.n	8013de0 <__ieee754_fmodf+0xa0>
 8013e24:	d0a6      	beq.n	8013d74 <__ieee754_fmodf+0x34>
 8013e26:	0059      	lsls	r1, r3, #1
 8013e28:	e7fa      	b.n	8013e20 <__ieee754_fmodf+0xe0>
 8013e2a:	005b      	lsls	r3, r3, #1
 8013e2c:	3a01      	subs	r2, #1
 8013e2e:	e7df      	b.n	8013df0 <__ieee754_fmodf+0xb0>
 8013e30:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 8013e34:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8013e38:	3282      	adds	r2, #130	@ 0x82
 8013e3a:	4113      	asrs	r3, r2
 8013e3c:	432b      	orrs	r3, r5
 8013e3e:	e7e3      	b.n	8013e08 <__ieee754_fmodf+0xc8>
 8013e40:	080151a8 	.word	0x080151a8

08013e44 <__ieee754_rem_pio2f>:
 8013e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e46:	ee10 6a10 	vmov	r6, s0
 8013e4a:	4b88      	ldr	r3, [pc, #544]	@ (801406c <__ieee754_rem_pio2f+0x228>)
 8013e4c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8013e50:	429d      	cmp	r5, r3
 8013e52:	b087      	sub	sp, #28
 8013e54:	4604      	mov	r4, r0
 8013e56:	d805      	bhi.n	8013e64 <__ieee754_rem_pio2f+0x20>
 8013e58:	2300      	movs	r3, #0
 8013e5a:	ed80 0a00 	vstr	s0, [r0]
 8013e5e:	6043      	str	r3, [r0, #4]
 8013e60:	2000      	movs	r0, #0
 8013e62:	e022      	b.n	8013eaa <__ieee754_rem_pio2f+0x66>
 8013e64:	4b82      	ldr	r3, [pc, #520]	@ (8014070 <__ieee754_rem_pio2f+0x22c>)
 8013e66:	429d      	cmp	r5, r3
 8013e68:	d83a      	bhi.n	8013ee0 <__ieee754_rem_pio2f+0x9c>
 8013e6a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013e6e:	2e00      	cmp	r6, #0
 8013e70:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8014074 <__ieee754_rem_pio2f+0x230>
 8013e74:	4a80      	ldr	r2, [pc, #512]	@ (8014078 <__ieee754_rem_pio2f+0x234>)
 8013e76:	f023 030f 	bic.w	r3, r3, #15
 8013e7a:	dd18      	ble.n	8013eae <__ieee754_rem_pio2f+0x6a>
 8013e7c:	4293      	cmp	r3, r2
 8013e7e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8013e82:	bf09      	itett	eq
 8013e84:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801407c <__ieee754_rem_pio2f+0x238>
 8013e88:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8014080 <__ieee754_rem_pio2f+0x23c>
 8013e8c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8014084 <__ieee754_rem_pio2f+0x240>
 8013e90:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013e94:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8013e98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013e9c:	ed80 7a00 	vstr	s14, [r0]
 8013ea0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013ea4:	edc0 7a01 	vstr	s15, [r0, #4]
 8013ea8:	2001      	movs	r0, #1
 8013eaa:	b007      	add	sp, #28
 8013eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013eae:	4293      	cmp	r3, r2
 8013eb0:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013eb4:	bf09      	itett	eq
 8013eb6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801407c <__ieee754_rem_pio2f+0x238>
 8013eba:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8014080 <__ieee754_rem_pio2f+0x23c>
 8013ebe:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8014084 <__ieee754_rem_pio2f+0x240>
 8013ec2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013ec6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013eca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ece:	ed80 7a00 	vstr	s14, [r0]
 8013ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013ed6:	edc0 7a01 	vstr	s15, [r0, #4]
 8013eda:	f04f 30ff 	mov.w	r0, #4294967295
 8013ede:	e7e4      	b.n	8013eaa <__ieee754_rem_pio2f+0x66>
 8013ee0:	4b69      	ldr	r3, [pc, #420]	@ (8014088 <__ieee754_rem_pio2f+0x244>)
 8013ee2:	429d      	cmp	r5, r3
 8013ee4:	d873      	bhi.n	8013fce <__ieee754_rem_pio2f+0x18a>
 8013ee6:	f000 f8dd 	bl	80140a4 <fabsf>
 8013eea:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801408c <__ieee754_rem_pio2f+0x248>
 8013eee:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013ef2:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013ef6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013efe:	ee17 0a90 	vmov	r0, s15
 8013f02:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8014074 <__ieee754_rem_pio2f+0x230>
 8013f06:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013f0a:	281f      	cmp	r0, #31
 8013f0c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8014080 <__ieee754_rem_pio2f+0x23c>
 8013f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013f14:	eeb1 6a47 	vneg.f32	s12, s14
 8013f18:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013f1c:	ee16 1a90 	vmov	r1, s13
 8013f20:	dc09      	bgt.n	8013f36 <__ieee754_rem_pio2f+0xf2>
 8013f22:	4a5b      	ldr	r2, [pc, #364]	@ (8014090 <__ieee754_rem_pio2f+0x24c>)
 8013f24:	1e47      	subs	r7, r0, #1
 8013f26:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013f2a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8013f2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8013f32:	4293      	cmp	r3, r2
 8013f34:	d107      	bne.n	8013f46 <__ieee754_rem_pio2f+0x102>
 8013f36:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8013f3a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8013f3e:	2a08      	cmp	r2, #8
 8013f40:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8013f44:	dc14      	bgt.n	8013f70 <__ieee754_rem_pio2f+0x12c>
 8013f46:	6021      	str	r1, [r4, #0]
 8013f48:	ed94 7a00 	vldr	s14, [r4]
 8013f4c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013f50:	2e00      	cmp	r6, #0
 8013f52:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013f56:	ed84 0a01 	vstr	s0, [r4, #4]
 8013f5a:	daa6      	bge.n	8013eaa <__ieee754_rem_pio2f+0x66>
 8013f5c:	eeb1 7a47 	vneg.f32	s14, s14
 8013f60:	eeb1 0a40 	vneg.f32	s0, s0
 8013f64:	ed84 7a00 	vstr	s14, [r4]
 8013f68:	ed84 0a01 	vstr	s0, [r4, #4]
 8013f6c:	4240      	negs	r0, r0
 8013f6e:	e79c      	b.n	8013eaa <__ieee754_rem_pio2f+0x66>
 8013f70:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801407c <__ieee754_rem_pio2f+0x238>
 8013f74:	eef0 6a40 	vmov.f32	s13, s0
 8013f78:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013f7c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8013f80:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013f84:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8014084 <__ieee754_rem_pio2f+0x240>
 8013f88:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013f8c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013f90:	ee15 2a90 	vmov	r2, s11
 8013f94:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013f98:	1a5b      	subs	r3, r3, r1
 8013f9a:	2b19      	cmp	r3, #25
 8013f9c:	dc04      	bgt.n	8013fa8 <__ieee754_rem_pio2f+0x164>
 8013f9e:	edc4 5a00 	vstr	s11, [r4]
 8013fa2:	eeb0 0a66 	vmov.f32	s0, s13
 8013fa6:	e7cf      	b.n	8013f48 <__ieee754_rem_pio2f+0x104>
 8013fa8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8014094 <__ieee754_rem_pio2f+0x250>
 8013fac:	eeb0 0a66 	vmov.f32	s0, s13
 8013fb0:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013fb4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013fb8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8014098 <__ieee754_rem_pio2f+0x254>
 8013fbc:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013fc0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013fc4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013fc8:	ed84 7a00 	vstr	s14, [r4]
 8013fcc:	e7bc      	b.n	8013f48 <__ieee754_rem_pio2f+0x104>
 8013fce:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8013fd2:	d306      	bcc.n	8013fe2 <__ieee754_rem_pio2f+0x19e>
 8013fd4:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013fd8:	edc0 7a01 	vstr	s15, [r0, #4]
 8013fdc:	edc0 7a00 	vstr	s15, [r0]
 8013fe0:	e73e      	b.n	8013e60 <__ieee754_rem_pio2f+0x1c>
 8013fe2:	15ea      	asrs	r2, r5, #23
 8013fe4:	3a86      	subs	r2, #134	@ 0x86
 8013fe6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013fea:	ee07 3a90 	vmov	s15, r3
 8013fee:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013ff2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801409c <__ieee754_rem_pio2f+0x258>
 8013ff6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013ffa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ffe:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014002:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014006:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801400a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801400e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014012:	ed8d 7a04 	vstr	s14, [sp, #16]
 8014016:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801401a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801401e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014022:	edcd 7a05 	vstr	s15, [sp, #20]
 8014026:	d11e      	bne.n	8014066 <__ieee754_rem_pio2f+0x222>
 8014028:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801402c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014030:	bf0c      	ite	eq
 8014032:	2301      	moveq	r3, #1
 8014034:	2302      	movne	r3, #2
 8014036:	491a      	ldr	r1, [pc, #104]	@ (80140a0 <__ieee754_rem_pio2f+0x25c>)
 8014038:	9101      	str	r1, [sp, #4]
 801403a:	2102      	movs	r1, #2
 801403c:	9100      	str	r1, [sp, #0]
 801403e:	a803      	add	r0, sp, #12
 8014040:	4621      	mov	r1, r4
 8014042:	f000 fc69 	bl	8014918 <__kernel_rem_pio2f>
 8014046:	2e00      	cmp	r6, #0
 8014048:	f6bf af2f 	bge.w	8013eaa <__ieee754_rem_pio2f+0x66>
 801404c:	edd4 7a00 	vldr	s15, [r4]
 8014050:	eef1 7a67 	vneg.f32	s15, s15
 8014054:	edc4 7a00 	vstr	s15, [r4]
 8014058:	edd4 7a01 	vldr	s15, [r4, #4]
 801405c:	eef1 7a67 	vneg.f32	s15, s15
 8014060:	edc4 7a01 	vstr	s15, [r4, #4]
 8014064:	e782      	b.n	8013f6c <__ieee754_rem_pio2f+0x128>
 8014066:	2303      	movs	r3, #3
 8014068:	e7e5      	b.n	8014036 <__ieee754_rem_pio2f+0x1f2>
 801406a:	bf00      	nop
 801406c:	3f490fd8 	.word	0x3f490fd8
 8014070:	4016cbe3 	.word	0x4016cbe3
 8014074:	3fc90f80 	.word	0x3fc90f80
 8014078:	3fc90fd0 	.word	0x3fc90fd0
 801407c:	37354400 	.word	0x37354400
 8014080:	37354443 	.word	0x37354443
 8014084:	2e85a308 	.word	0x2e85a308
 8014088:	43490f80 	.word	0x43490f80
 801408c:	3f22f984 	.word	0x3f22f984
 8014090:	080151b0 	.word	0x080151b0
 8014094:	2e85a300 	.word	0x2e85a300
 8014098:	248d3132 	.word	0x248d3132
 801409c:	43800000 	.word	0x43800000
 80140a0:	08015230 	.word	0x08015230

080140a4 <fabsf>:
 80140a4:	ee10 3a10 	vmov	r3, s0
 80140a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80140ac:	ee00 3a10 	vmov	s0, r3
 80140b0:	4770      	bx	lr
 80140b2:	0000      	movs	r0, r0
 80140b4:	0000      	movs	r0, r0
	...

080140b8 <scalbn>:
 80140b8:	b570      	push	{r4, r5, r6, lr}
 80140ba:	ec55 4b10 	vmov	r4, r5, d0
 80140be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80140c2:	4606      	mov	r6, r0
 80140c4:	462b      	mov	r3, r5
 80140c6:	b991      	cbnz	r1, 80140ee <scalbn+0x36>
 80140c8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80140cc:	4323      	orrs	r3, r4
 80140ce:	d03b      	beq.n	8014148 <scalbn+0x90>
 80140d0:	4b33      	ldr	r3, [pc, #204]	@ (80141a0 <scalbn+0xe8>)
 80140d2:	4620      	mov	r0, r4
 80140d4:	4629      	mov	r1, r5
 80140d6:	2200      	movs	r2, #0
 80140d8:	f7ec fa5a 	bl	8000590 <__aeabi_dmul>
 80140dc:	4b31      	ldr	r3, [pc, #196]	@ (80141a4 <scalbn+0xec>)
 80140de:	429e      	cmp	r6, r3
 80140e0:	4604      	mov	r4, r0
 80140e2:	460d      	mov	r5, r1
 80140e4:	da0f      	bge.n	8014106 <scalbn+0x4e>
 80140e6:	a326      	add	r3, pc, #152	@ (adr r3, 8014180 <scalbn+0xc8>)
 80140e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ec:	e01e      	b.n	801412c <scalbn+0x74>
 80140ee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80140f2:	4291      	cmp	r1, r2
 80140f4:	d10b      	bne.n	801410e <scalbn+0x56>
 80140f6:	4622      	mov	r2, r4
 80140f8:	4620      	mov	r0, r4
 80140fa:	4629      	mov	r1, r5
 80140fc:	f7ec f892 	bl	8000224 <__adddf3>
 8014100:	4604      	mov	r4, r0
 8014102:	460d      	mov	r5, r1
 8014104:	e020      	b.n	8014148 <scalbn+0x90>
 8014106:	460b      	mov	r3, r1
 8014108:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801410c:	3936      	subs	r1, #54	@ 0x36
 801410e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8014112:	4296      	cmp	r6, r2
 8014114:	dd0d      	ble.n	8014132 <scalbn+0x7a>
 8014116:	2d00      	cmp	r5, #0
 8014118:	a11b      	add	r1, pc, #108	@ (adr r1, 8014188 <scalbn+0xd0>)
 801411a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801411e:	da02      	bge.n	8014126 <scalbn+0x6e>
 8014120:	a11b      	add	r1, pc, #108	@ (adr r1, 8014190 <scalbn+0xd8>)
 8014122:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014126:	a318      	add	r3, pc, #96	@ (adr r3, 8014188 <scalbn+0xd0>)
 8014128:	e9d3 2300 	ldrd	r2, r3, [r3]
 801412c:	f7ec fa30 	bl	8000590 <__aeabi_dmul>
 8014130:	e7e6      	b.n	8014100 <scalbn+0x48>
 8014132:	1872      	adds	r2, r6, r1
 8014134:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8014138:	428a      	cmp	r2, r1
 801413a:	dcec      	bgt.n	8014116 <scalbn+0x5e>
 801413c:	2a00      	cmp	r2, #0
 801413e:	dd06      	ble.n	801414e <scalbn+0x96>
 8014140:	f36f 531e 	bfc	r3, #20, #11
 8014144:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014148:	ec45 4b10 	vmov	d0, r4, r5
 801414c:	bd70      	pop	{r4, r5, r6, pc}
 801414e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8014152:	da08      	bge.n	8014166 <scalbn+0xae>
 8014154:	2d00      	cmp	r5, #0
 8014156:	a10a      	add	r1, pc, #40	@ (adr r1, 8014180 <scalbn+0xc8>)
 8014158:	e9d1 0100 	ldrd	r0, r1, [r1]
 801415c:	dac3      	bge.n	80140e6 <scalbn+0x2e>
 801415e:	a10e      	add	r1, pc, #56	@ (adr r1, 8014198 <scalbn+0xe0>)
 8014160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014164:	e7bf      	b.n	80140e6 <scalbn+0x2e>
 8014166:	3236      	adds	r2, #54	@ 0x36
 8014168:	f36f 531e 	bfc	r3, #20, #11
 801416c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014170:	4620      	mov	r0, r4
 8014172:	4b0d      	ldr	r3, [pc, #52]	@ (80141a8 <scalbn+0xf0>)
 8014174:	4629      	mov	r1, r5
 8014176:	2200      	movs	r2, #0
 8014178:	e7d8      	b.n	801412c <scalbn+0x74>
 801417a:	bf00      	nop
 801417c:	f3af 8000 	nop.w
 8014180:	c2f8f359 	.word	0xc2f8f359
 8014184:	01a56e1f 	.word	0x01a56e1f
 8014188:	8800759c 	.word	0x8800759c
 801418c:	7e37e43c 	.word	0x7e37e43c
 8014190:	8800759c 	.word	0x8800759c
 8014194:	fe37e43c 	.word	0xfe37e43c
 8014198:	c2f8f359 	.word	0xc2f8f359
 801419c:	81a56e1f 	.word	0x81a56e1f
 80141a0:	43500000 	.word	0x43500000
 80141a4:	ffff3cb0 	.word	0xffff3cb0
 80141a8:	3c900000 	.word	0x3c900000

080141ac <scalbnf>:
 80141ac:	ee10 3a10 	vmov	r3, s0
 80141b0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80141b4:	d02b      	beq.n	801420e <scalbnf+0x62>
 80141b6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80141ba:	d302      	bcc.n	80141c2 <scalbnf+0x16>
 80141bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80141c0:	4770      	bx	lr
 80141c2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80141c6:	d123      	bne.n	8014210 <scalbnf+0x64>
 80141c8:	4b24      	ldr	r3, [pc, #144]	@ (801425c <scalbnf+0xb0>)
 80141ca:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8014260 <scalbnf+0xb4>
 80141ce:	4298      	cmp	r0, r3
 80141d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80141d4:	db17      	blt.n	8014206 <scalbnf+0x5a>
 80141d6:	ee10 3a10 	vmov	r3, s0
 80141da:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80141de:	3a19      	subs	r2, #25
 80141e0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80141e4:	4288      	cmp	r0, r1
 80141e6:	dd15      	ble.n	8014214 <scalbnf+0x68>
 80141e8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8014264 <scalbnf+0xb8>
 80141ec:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8014268 <scalbnf+0xbc>
 80141f0:	ee10 3a10 	vmov	r3, s0
 80141f4:	eeb0 7a67 	vmov.f32	s14, s15
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	bfb8      	it	lt
 80141fc:	eef0 7a66 	vmovlt.f32	s15, s13
 8014200:	ee27 0a87 	vmul.f32	s0, s15, s14
 8014204:	4770      	bx	lr
 8014206:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801426c <scalbnf+0xc0>
 801420a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801420e:	4770      	bx	lr
 8014210:	0dd2      	lsrs	r2, r2, #23
 8014212:	e7e5      	b.n	80141e0 <scalbnf+0x34>
 8014214:	4410      	add	r0, r2
 8014216:	28fe      	cmp	r0, #254	@ 0xfe
 8014218:	dce6      	bgt.n	80141e8 <scalbnf+0x3c>
 801421a:	2800      	cmp	r0, #0
 801421c:	dd06      	ble.n	801422c <scalbnf+0x80>
 801421e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8014222:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014226:	ee00 3a10 	vmov	s0, r3
 801422a:	4770      	bx	lr
 801422c:	f110 0f16 	cmn.w	r0, #22
 8014230:	da09      	bge.n	8014246 <scalbnf+0x9a>
 8014232:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801426c <scalbnf+0xc0>
 8014236:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8014270 <scalbnf+0xc4>
 801423a:	ee10 3a10 	vmov	r3, s0
 801423e:	eeb0 7a67 	vmov.f32	s14, s15
 8014242:	2b00      	cmp	r3, #0
 8014244:	e7d9      	b.n	80141fa <scalbnf+0x4e>
 8014246:	3019      	adds	r0, #25
 8014248:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801424c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014250:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8014274 <scalbnf+0xc8>
 8014254:	ee07 3a90 	vmov	s15, r3
 8014258:	e7d7      	b.n	801420a <scalbnf+0x5e>
 801425a:	bf00      	nop
 801425c:	ffff3cb0 	.word	0xffff3cb0
 8014260:	4c000000 	.word	0x4c000000
 8014264:	7149f2ca 	.word	0x7149f2ca
 8014268:	f149f2ca 	.word	0xf149f2ca
 801426c:	0da24260 	.word	0x0da24260
 8014270:	8da24260 	.word	0x8da24260
 8014274:	33000000 	.word	0x33000000

08014278 <__kernel_rem_pio2>:
 8014278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801427c:	ed2d 8b02 	vpush	{d8}
 8014280:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8014284:	f112 0f14 	cmn.w	r2, #20
 8014288:	9306      	str	r3, [sp, #24]
 801428a:	9104      	str	r1, [sp, #16]
 801428c:	4bc2      	ldr	r3, [pc, #776]	@ (8014598 <__kernel_rem_pio2+0x320>)
 801428e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8014290:	9008      	str	r0, [sp, #32]
 8014292:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014296:	9300      	str	r3, [sp, #0]
 8014298:	9b06      	ldr	r3, [sp, #24]
 801429a:	f103 33ff 	add.w	r3, r3, #4294967295
 801429e:	bfa8      	it	ge
 80142a0:	1ed4      	subge	r4, r2, #3
 80142a2:	9305      	str	r3, [sp, #20]
 80142a4:	bfb2      	itee	lt
 80142a6:	2400      	movlt	r4, #0
 80142a8:	2318      	movge	r3, #24
 80142aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80142ae:	f06f 0317 	mvn.w	r3, #23
 80142b2:	fb04 3303 	mla	r3, r4, r3, r3
 80142b6:	eb03 0b02 	add.w	fp, r3, r2
 80142ba:	9b00      	ldr	r3, [sp, #0]
 80142bc:	9a05      	ldr	r2, [sp, #20]
 80142be:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8014588 <__kernel_rem_pio2+0x310>
 80142c2:	eb03 0802 	add.w	r8, r3, r2
 80142c6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80142c8:	1aa7      	subs	r7, r4, r2
 80142ca:	ae20      	add	r6, sp, #128	@ 0x80
 80142cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80142d0:	2500      	movs	r5, #0
 80142d2:	4545      	cmp	r5, r8
 80142d4:	dd12      	ble.n	80142fc <__kernel_rem_pio2+0x84>
 80142d6:	9b06      	ldr	r3, [sp, #24]
 80142d8:	aa20      	add	r2, sp, #128	@ 0x80
 80142da:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80142de:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80142e2:	2700      	movs	r7, #0
 80142e4:	9b00      	ldr	r3, [sp, #0]
 80142e6:	429f      	cmp	r7, r3
 80142e8:	dc2e      	bgt.n	8014348 <__kernel_rem_pio2+0xd0>
 80142ea:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8014588 <__kernel_rem_pio2+0x310>
 80142ee:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80142f2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80142f6:	46a8      	mov	r8, r5
 80142f8:	2600      	movs	r6, #0
 80142fa:	e01b      	b.n	8014334 <__kernel_rem_pio2+0xbc>
 80142fc:	42ef      	cmn	r7, r5
 80142fe:	d407      	bmi.n	8014310 <__kernel_rem_pio2+0x98>
 8014300:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014304:	f7ec f8da 	bl	80004bc <__aeabi_i2d>
 8014308:	e8e6 0102 	strd	r0, r1, [r6], #8
 801430c:	3501      	adds	r5, #1
 801430e:	e7e0      	b.n	80142d2 <__kernel_rem_pio2+0x5a>
 8014310:	ec51 0b18 	vmov	r0, r1, d8
 8014314:	e7f8      	b.n	8014308 <__kernel_rem_pio2+0x90>
 8014316:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 801431a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801431e:	f7ec f937 	bl	8000590 <__aeabi_dmul>
 8014322:	4602      	mov	r2, r0
 8014324:	460b      	mov	r3, r1
 8014326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801432a:	f7eb ff7b 	bl	8000224 <__adddf3>
 801432e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014332:	3601      	adds	r6, #1
 8014334:	9b05      	ldr	r3, [sp, #20]
 8014336:	429e      	cmp	r6, r3
 8014338:	dded      	ble.n	8014316 <__kernel_rem_pio2+0x9e>
 801433a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801433e:	3701      	adds	r7, #1
 8014340:	ecaa 7b02 	vstmia	sl!, {d7}
 8014344:	3508      	adds	r5, #8
 8014346:	e7cd      	b.n	80142e4 <__kernel_rem_pio2+0x6c>
 8014348:	9b00      	ldr	r3, [sp, #0]
 801434a:	f8dd 8000 	ldr.w	r8, [sp]
 801434e:	aa0c      	add	r2, sp, #48	@ 0x30
 8014350:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014354:	930a      	str	r3, [sp, #40]	@ 0x28
 8014356:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8014358:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801435c:	9309      	str	r3, [sp, #36]	@ 0x24
 801435e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8014362:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014364:	ab98      	add	r3, sp, #608	@ 0x260
 8014366:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801436a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801436e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014372:	ac0c      	add	r4, sp, #48	@ 0x30
 8014374:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014376:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801437a:	46a1      	mov	r9, r4
 801437c:	46c2      	mov	sl, r8
 801437e:	f1ba 0f00 	cmp.w	sl, #0
 8014382:	dc77      	bgt.n	8014474 <__kernel_rem_pio2+0x1fc>
 8014384:	4658      	mov	r0, fp
 8014386:	ed9d 0b02 	vldr	d0, [sp, #8]
 801438a:	f7ff fe95 	bl	80140b8 <scalbn>
 801438e:	ec57 6b10 	vmov	r6, r7, d0
 8014392:	2200      	movs	r2, #0
 8014394:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8014398:	4630      	mov	r0, r6
 801439a:	4639      	mov	r1, r7
 801439c:	f7ec f8f8 	bl	8000590 <__aeabi_dmul>
 80143a0:	ec41 0b10 	vmov	d0, r0, r1
 80143a4:	f000 fd20 	bl	8014de8 <floor>
 80143a8:	4b7c      	ldr	r3, [pc, #496]	@ (801459c <__kernel_rem_pio2+0x324>)
 80143aa:	ec51 0b10 	vmov	r0, r1, d0
 80143ae:	2200      	movs	r2, #0
 80143b0:	f7ec f8ee 	bl	8000590 <__aeabi_dmul>
 80143b4:	4602      	mov	r2, r0
 80143b6:	460b      	mov	r3, r1
 80143b8:	4630      	mov	r0, r6
 80143ba:	4639      	mov	r1, r7
 80143bc:	f7eb ff30 	bl	8000220 <__aeabi_dsub>
 80143c0:	460f      	mov	r7, r1
 80143c2:	4606      	mov	r6, r0
 80143c4:	f7ec fb7e 	bl	8000ac4 <__aeabi_d2iz>
 80143c8:	9002      	str	r0, [sp, #8]
 80143ca:	f7ec f877 	bl	80004bc <__aeabi_i2d>
 80143ce:	4602      	mov	r2, r0
 80143d0:	460b      	mov	r3, r1
 80143d2:	4630      	mov	r0, r6
 80143d4:	4639      	mov	r1, r7
 80143d6:	f7eb ff23 	bl	8000220 <__aeabi_dsub>
 80143da:	f1bb 0f00 	cmp.w	fp, #0
 80143de:	4606      	mov	r6, r0
 80143e0:	460f      	mov	r7, r1
 80143e2:	dd6c      	ble.n	80144be <__kernel_rem_pio2+0x246>
 80143e4:	f108 31ff 	add.w	r1, r8, #4294967295
 80143e8:	ab0c      	add	r3, sp, #48	@ 0x30
 80143ea:	9d02      	ldr	r5, [sp, #8]
 80143ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80143f0:	f1cb 0018 	rsb	r0, fp, #24
 80143f4:	fa43 f200 	asr.w	r2, r3, r0
 80143f8:	4415      	add	r5, r2
 80143fa:	4082      	lsls	r2, r0
 80143fc:	1a9b      	subs	r3, r3, r2
 80143fe:	aa0c      	add	r2, sp, #48	@ 0x30
 8014400:	9502      	str	r5, [sp, #8]
 8014402:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8014406:	f1cb 0217 	rsb	r2, fp, #23
 801440a:	fa43 f902 	asr.w	r9, r3, r2
 801440e:	f1b9 0f00 	cmp.w	r9, #0
 8014412:	dd64      	ble.n	80144de <__kernel_rem_pio2+0x266>
 8014414:	9b02      	ldr	r3, [sp, #8]
 8014416:	2200      	movs	r2, #0
 8014418:	3301      	adds	r3, #1
 801441a:	9302      	str	r3, [sp, #8]
 801441c:	4615      	mov	r5, r2
 801441e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8014422:	4590      	cmp	r8, r2
 8014424:	f300 80a1 	bgt.w	801456a <__kernel_rem_pio2+0x2f2>
 8014428:	f1bb 0f00 	cmp.w	fp, #0
 801442c:	dd07      	ble.n	801443e <__kernel_rem_pio2+0x1c6>
 801442e:	f1bb 0f01 	cmp.w	fp, #1
 8014432:	f000 80c1 	beq.w	80145b8 <__kernel_rem_pio2+0x340>
 8014436:	f1bb 0f02 	cmp.w	fp, #2
 801443a:	f000 80c8 	beq.w	80145ce <__kernel_rem_pio2+0x356>
 801443e:	f1b9 0f02 	cmp.w	r9, #2
 8014442:	d14c      	bne.n	80144de <__kernel_rem_pio2+0x266>
 8014444:	4632      	mov	r2, r6
 8014446:	463b      	mov	r3, r7
 8014448:	4955      	ldr	r1, [pc, #340]	@ (80145a0 <__kernel_rem_pio2+0x328>)
 801444a:	2000      	movs	r0, #0
 801444c:	f7eb fee8 	bl	8000220 <__aeabi_dsub>
 8014450:	4606      	mov	r6, r0
 8014452:	460f      	mov	r7, r1
 8014454:	2d00      	cmp	r5, #0
 8014456:	d042      	beq.n	80144de <__kernel_rem_pio2+0x266>
 8014458:	4658      	mov	r0, fp
 801445a:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8014590 <__kernel_rem_pio2+0x318>
 801445e:	f7ff fe2b 	bl	80140b8 <scalbn>
 8014462:	4630      	mov	r0, r6
 8014464:	4639      	mov	r1, r7
 8014466:	ec53 2b10 	vmov	r2, r3, d0
 801446a:	f7eb fed9 	bl	8000220 <__aeabi_dsub>
 801446e:	4606      	mov	r6, r0
 8014470:	460f      	mov	r7, r1
 8014472:	e034      	b.n	80144de <__kernel_rem_pio2+0x266>
 8014474:	4b4b      	ldr	r3, [pc, #300]	@ (80145a4 <__kernel_rem_pio2+0x32c>)
 8014476:	2200      	movs	r2, #0
 8014478:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801447c:	f7ec f888 	bl	8000590 <__aeabi_dmul>
 8014480:	f7ec fb20 	bl	8000ac4 <__aeabi_d2iz>
 8014484:	f7ec f81a 	bl	80004bc <__aeabi_i2d>
 8014488:	4b47      	ldr	r3, [pc, #284]	@ (80145a8 <__kernel_rem_pio2+0x330>)
 801448a:	2200      	movs	r2, #0
 801448c:	4606      	mov	r6, r0
 801448e:	460f      	mov	r7, r1
 8014490:	f7ec f87e 	bl	8000590 <__aeabi_dmul>
 8014494:	4602      	mov	r2, r0
 8014496:	460b      	mov	r3, r1
 8014498:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801449c:	f7eb fec0 	bl	8000220 <__aeabi_dsub>
 80144a0:	f7ec fb10 	bl	8000ac4 <__aeabi_d2iz>
 80144a4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80144a8:	f849 0b04 	str.w	r0, [r9], #4
 80144ac:	4639      	mov	r1, r7
 80144ae:	4630      	mov	r0, r6
 80144b0:	f7eb feb8 	bl	8000224 <__adddf3>
 80144b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80144b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144bc:	e75f      	b.n	801437e <__kernel_rem_pio2+0x106>
 80144be:	d107      	bne.n	80144d0 <__kernel_rem_pio2+0x258>
 80144c0:	f108 33ff 	add.w	r3, r8, #4294967295
 80144c4:	aa0c      	add	r2, sp, #48	@ 0x30
 80144c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144ca:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80144ce:	e79e      	b.n	801440e <__kernel_rem_pio2+0x196>
 80144d0:	4b36      	ldr	r3, [pc, #216]	@ (80145ac <__kernel_rem_pio2+0x334>)
 80144d2:	2200      	movs	r2, #0
 80144d4:	f7ec fae2 	bl	8000a9c <__aeabi_dcmpge>
 80144d8:	2800      	cmp	r0, #0
 80144da:	d143      	bne.n	8014564 <__kernel_rem_pio2+0x2ec>
 80144dc:	4681      	mov	r9, r0
 80144de:	2200      	movs	r2, #0
 80144e0:	2300      	movs	r3, #0
 80144e2:	4630      	mov	r0, r6
 80144e4:	4639      	mov	r1, r7
 80144e6:	f7ec fabb 	bl	8000a60 <__aeabi_dcmpeq>
 80144ea:	2800      	cmp	r0, #0
 80144ec:	f000 80c1 	beq.w	8014672 <__kernel_rem_pio2+0x3fa>
 80144f0:	f108 33ff 	add.w	r3, r8, #4294967295
 80144f4:	2200      	movs	r2, #0
 80144f6:	9900      	ldr	r1, [sp, #0]
 80144f8:	428b      	cmp	r3, r1
 80144fa:	da70      	bge.n	80145de <__kernel_rem_pio2+0x366>
 80144fc:	2a00      	cmp	r2, #0
 80144fe:	f000 808b 	beq.w	8014618 <__kernel_rem_pio2+0x3a0>
 8014502:	f108 38ff 	add.w	r8, r8, #4294967295
 8014506:	ab0c      	add	r3, sp, #48	@ 0x30
 8014508:	f1ab 0b18 	sub.w	fp, fp, #24
 801450c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d0f6      	beq.n	8014502 <__kernel_rem_pio2+0x28a>
 8014514:	4658      	mov	r0, fp
 8014516:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8014590 <__kernel_rem_pio2+0x318>
 801451a:	f7ff fdcd 	bl	80140b8 <scalbn>
 801451e:	f108 0301 	add.w	r3, r8, #1
 8014522:	00da      	lsls	r2, r3, #3
 8014524:	9205      	str	r2, [sp, #20]
 8014526:	ec55 4b10 	vmov	r4, r5, d0
 801452a:	aa70      	add	r2, sp, #448	@ 0x1c0
 801452c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80145a4 <__kernel_rem_pio2+0x32c>
 8014530:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8014534:	4646      	mov	r6, r8
 8014536:	f04f 0a00 	mov.w	sl, #0
 801453a:	2e00      	cmp	r6, #0
 801453c:	f280 80d1 	bge.w	80146e2 <__kernel_rem_pio2+0x46a>
 8014540:	4644      	mov	r4, r8
 8014542:	2c00      	cmp	r4, #0
 8014544:	f2c0 80ff 	blt.w	8014746 <__kernel_rem_pio2+0x4ce>
 8014548:	4b19      	ldr	r3, [pc, #100]	@ (80145b0 <__kernel_rem_pio2+0x338>)
 801454a:	461f      	mov	r7, r3
 801454c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801454e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014552:	9306      	str	r3, [sp, #24]
 8014554:	f04f 0a00 	mov.w	sl, #0
 8014558:	f04f 0b00 	mov.w	fp, #0
 801455c:	2600      	movs	r6, #0
 801455e:	eba8 0504 	sub.w	r5, r8, r4
 8014562:	e0e4      	b.n	801472e <__kernel_rem_pio2+0x4b6>
 8014564:	f04f 0902 	mov.w	r9, #2
 8014568:	e754      	b.n	8014414 <__kernel_rem_pio2+0x19c>
 801456a:	f854 3b04 	ldr.w	r3, [r4], #4
 801456e:	bb0d      	cbnz	r5, 80145b4 <__kernel_rem_pio2+0x33c>
 8014570:	b123      	cbz	r3, 801457c <__kernel_rem_pio2+0x304>
 8014572:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8014576:	f844 3c04 	str.w	r3, [r4, #-4]
 801457a:	2301      	movs	r3, #1
 801457c:	3201      	adds	r2, #1
 801457e:	461d      	mov	r5, r3
 8014580:	e74f      	b.n	8014422 <__kernel_rem_pio2+0x1aa>
 8014582:	bf00      	nop
 8014584:	f3af 8000 	nop.w
	...
 8014594:	3ff00000 	.word	0x3ff00000
 8014598:	08015588 	.word	0x08015588
 801459c:	40200000 	.word	0x40200000
 80145a0:	3ff00000 	.word	0x3ff00000
 80145a4:	3e700000 	.word	0x3e700000
 80145a8:	41700000 	.word	0x41700000
 80145ac:	3fe00000 	.word	0x3fe00000
 80145b0:	08015548 	.word	0x08015548
 80145b4:	1acb      	subs	r3, r1, r3
 80145b6:	e7de      	b.n	8014576 <__kernel_rem_pio2+0x2fe>
 80145b8:	f108 32ff 	add.w	r2, r8, #4294967295
 80145bc:	ab0c      	add	r3, sp, #48	@ 0x30
 80145be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145c2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80145c6:	a90c      	add	r1, sp, #48	@ 0x30
 80145c8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80145cc:	e737      	b.n	801443e <__kernel_rem_pio2+0x1c6>
 80145ce:	f108 32ff 	add.w	r2, r8, #4294967295
 80145d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80145d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80145dc:	e7f3      	b.n	80145c6 <__kernel_rem_pio2+0x34e>
 80145de:	a90c      	add	r1, sp, #48	@ 0x30
 80145e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80145e4:	3b01      	subs	r3, #1
 80145e6:	430a      	orrs	r2, r1
 80145e8:	e785      	b.n	80144f6 <__kernel_rem_pio2+0x27e>
 80145ea:	3401      	adds	r4, #1
 80145ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80145f0:	2a00      	cmp	r2, #0
 80145f2:	d0fa      	beq.n	80145ea <__kernel_rem_pio2+0x372>
 80145f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80145f6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80145fa:	eb0d 0503 	add.w	r5, sp, r3
 80145fe:	9b06      	ldr	r3, [sp, #24]
 8014600:	aa20      	add	r2, sp, #128	@ 0x80
 8014602:	4443      	add	r3, r8
 8014604:	f108 0701 	add.w	r7, r8, #1
 8014608:	3d98      	subs	r5, #152	@ 0x98
 801460a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 801460e:	4444      	add	r4, r8
 8014610:	42bc      	cmp	r4, r7
 8014612:	da04      	bge.n	801461e <__kernel_rem_pio2+0x3a6>
 8014614:	46a0      	mov	r8, r4
 8014616:	e6a2      	b.n	801435e <__kernel_rem_pio2+0xe6>
 8014618:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801461a:	2401      	movs	r4, #1
 801461c:	e7e6      	b.n	80145ec <__kernel_rem_pio2+0x374>
 801461e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014620:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014624:	f7eb ff4a 	bl	80004bc <__aeabi_i2d>
 8014628:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 80148e8 <__kernel_rem_pio2+0x670>
 801462c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014630:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014634:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014638:	46b2      	mov	sl, r6
 801463a:	f04f 0800 	mov.w	r8, #0
 801463e:	9b05      	ldr	r3, [sp, #20]
 8014640:	4598      	cmp	r8, r3
 8014642:	dd05      	ble.n	8014650 <__kernel_rem_pio2+0x3d8>
 8014644:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014648:	3701      	adds	r7, #1
 801464a:	eca5 7b02 	vstmia	r5!, {d7}
 801464e:	e7df      	b.n	8014610 <__kernel_rem_pio2+0x398>
 8014650:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8014654:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014658:	f7eb ff9a 	bl	8000590 <__aeabi_dmul>
 801465c:	4602      	mov	r2, r0
 801465e:	460b      	mov	r3, r1
 8014660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014664:	f7eb fdde 	bl	8000224 <__adddf3>
 8014668:	f108 0801 	add.w	r8, r8, #1
 801466c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014670:	e7e5      	b.n	801463e <__kernel_rem_pio2+0x3c6>
 8014672:	f1cb 0000 	rsb	r0, fp, #0
 8014676:	ec47 6b10 	vmov	d0, r6, r7
 801467a:	f7ff fd1d 	bl	80140b8 <scalbn>
 801467e:	ec55 4b10 	vmov	r4, r5, d0
 8014682:	4b9b      	ldr	r3, [pc, #620]	@ (80148f0 <__kernel_rem_pio2+0x678>)
 8014684:	2200      	movs	r2, #0
 8014686:	4620      	mov	r0, r4
 8014688:	4629      	mov	r1, r5
 801468a:	f7ec fa07 	bl	8000a9c <__aeabi_dcmpge>
 801468e:	b300      	cbz	r0, 80146d2 <__kernel_rem_pio2+0x45a>
 8014690:	4b98      	ldr	r3, [pc, #608]	@ (80148f4 <__kernel_rem_pio2+0x67c>)
 8014692:	2200      	movs	r2, #0
 8014694:	4620      	mov	r0, r4
 8014696:	4629      	mov	r1, r5
 8014698:	f7eb ff7a 	bl	8000590 <__aeabi_dmul>
 801469c:	f7ec fa12 	bl	8000ac4 <__aeabi_d2iz>
 80146a0:	4606      	mov	r6, r0
 80146a2:	f7eb ff0b 	bl	80004bc <__aeabi_i2d>
 80146a6:	4b92      	ldr	r3, [pc, #584]	@ (80148f0 <__kernel_rem_pio2+0x678>)
 80146a8:	2200      	movs	r2, #0
 80146aa:	f7eb ff71 	bl	8000590 <__aeabi_dmul>
 80146ae:	460b      	mov	r3, r1
 80146b0:	4602      	mov	r2, r0
 80146b2:	4629      	mov	r1, r5
 80146b4:	4620      	mov	r0, r4
 80146b6:	f7eb fdb3 	bl	8000220 <__aeabi_dsub>
 80146ba:	f7ec fa03 	bl	8000ac4 <__aeabi_d2iz>
 80146be:	ab0c      	add	r3, sp, #48	@ 0x30
 80146c0:	f10b 0b18 	add.w	fp, fp, #24
 80146c4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80146c8:	f108 0801 	add.w	r8, r8, #1
 80146cc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80146d0:	e720      	b.n	8014514 <__kernel_rem_pio2+0x29c>
 80146d2:	4620      	mov	r0, r4
 80146d4:	4629      	mov	r1, r5
 80146d6:	f7ec f9f5 	bl	8000ac4 <__aeabi_d2iz>
 80146da:	ab0c      	add	r3, sp, #48	@ 0x30
 80146dc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80146e0:	e718      	b.n	8014514 <__kernel_rem_pio2+0x29c>
 80146e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80146e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80146e8:	f7eb fee8 	bl	80004bc <__aeabi_i2d>
 80146ec:	4622      	mov	r2, r4
 80146ee:	462b      	mov	r3, r5
 80146f0:	f7eb ff4e 	bl	8000590 <__aeabi_dmul>
 80146f4:	4652      	mov	r2, sl
 80146f6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80146fa:	465b      	mov	r3, fp
 80146fc:	4620      	mov	r0, r4
 80146fe:	4629      	mov	r1, r5
 8014700:	f7eb ff46 	bl	8000590 <__aeabi_dmul>
 8014704:	3e01      	subs	r6, #1
 8014706:	4604      	mov	r4, r0
 8014708:	460d      	mov	r5, r1
 801470a:	e716      	b.n	801453a <__kernel_rem_pio2+0x2c2>
 801470c:	9906      	ldr	r1, [sp, #24]
 801470e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8014712:	9106      	str	r1, [sp, #24]
 8014714:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8014718:	f7eb ff3a 	bl	8000590 <__aeabi_dmul>
 801471c:	4602      	mov	r2, r0
 801471e:	460b      	mov	r3, r1
 8014720:	4650      	mov	r0, sl
 8014722:	4659      	mov	r1, fp
 8014724:	f7eb fd7e 	bl	8000224 <__adddf3>
 8014728:	3601      	adds	r6, #1
 801472a:	4682      	mov	sl, r0
 801472c:	468b      	mov	fp, r1
 801472e:	9b00      	ldr	r3, [sp, #0]
 8014730:	429e      	cmp	r6, r3
 8014732:	dc01      	bgt.n	8014738 <__kernel_rem_pio2+0x4c0>
 8014734:	42ae      	cmp	r6, r5
 8014736:	dde9      	ble.n	801470c <__kernel_rem_pio2+0x494>
 8014738:	ab48      	add	r3, sp, #288	@ 0x120
 801473a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801473e:	e9c5 ab00 	strd	sl, fp, [r5]
 8014742:	3c01      	subs	r4, #1
 8014744:	e6fd      	b.n	8014542 <__kernel_rem_pio2+0x2ca>
 8014746:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014748:	2b02      	cmp	r3, #2
 801474a:	dc0b      	bgt.n	8014764 <__kernel_rem_pio2+0x4ec>
 801474c:	2b00      	cmp	r3, #0
 801474e:	dc35      	bgt.n	80147bc <__kernel_rem_pio2+0x544>
 8014750:	d059      	beq.n	8014806 <__kernel_rem_pio2+0x58e>
 8014752:	9b02      	ldr	r3, [sp, #8]
 8014754:	f003 0007 	and.w	r0, r3, #7
 8014758:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801475c:	ecbd 8b02 	vpop	{d8}
 8014760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014764:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014766:	2b03      	cmp	r3, #3
 8014768:	d1f3      	bne.n	8014752 <__kernel_rem_pio2+0x4da>
 801476a:	9b05      	ldr	r3, [sp, #20]
 801476c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014770:	eb0d 0403 	add.w	r4, sp, r3
 8014774:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8014778:	4625      	mov	r5, r4
 801477a:	46c2      	mov	sl, r8
 801477c:	f1ba 0f00 	cmp.w	sl, #0
 8014780:	dc69      	bgt.n	8014856 <__kernel_rem_pio2+0x5de>
 8014782:	4645      	mov	r5, r8
 8014784:	2d01      	cmp	r5, #1
 8014786:	f300 8087 	bgt.w	8014898 <__kernel_rem_pio2+0x620>
 801478a:	9c05      	ldr	r4, [sp, #20]
 801478c:	ab48      	add	r3, sp, #288	@ 0x120
 801478e:	441c      	add	r4, r3
 8014790:	2000      	movs	r0, #0
 8014792:	2100      	movs	r1, #0
 8014794:	f1b8 0f01 	cmp.w	r8, #1
 8014798:	f300 809c 	bgt.w	80148d4 <__kernel_rem_pio2+0x65c>
 801479c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80147a0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80147a4:	f1b9 0f00 	cmp.w	r9, #0
 80147a8:	f040 80a6 	bne.w	80148f8 <__kernel_rem_pio2+0x680>
 80147ac:	9b04      	ldr	r3, [sp, #16]
 80147ae:	e9c3 5600 	strd	r5, r6, [r3]
 80147b2:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80147b6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80147ba:	e7ca      	b.n	8014752 <__kernel_rem_pio2+0x4da>
 80147bc:	9d05      	ldr	r5, [sp, #20]
 80147be:	ab48      	add	r3, sp, #288	@ 0x120
 80147c0:	441d      	add	r5, r3
 80147c2:	4644      	mov	r4, r8
 80147c4:	2000      	movs	r0, #0
 80147c6:	2100      	movs	r1, #0
 80147c8:	2c00      	cmp	r4, #0
 80147ca:	da35      	bge.n	8014838 <__kernel_rem_pio2+0x5c0>
 80147cc:	f1b9 0f00 	cmp.w	r9, #0
 80147d0:	d038      	beq.n	8014844 <__kernel_rem_pio2+0x5cc>
 80147d2:	4602      	mov	r2, r0
 80147d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80147d8:	9c04      	ldr	r4, [sp, #16]
 80147da:	e9c4 2300 	strd	r2, r3, [r4]
 80147de:	4602      	mov	r2, r0
 80147e0:	460b      	mov	r3, r1
 80147e2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80147e6:	f7eb fd1b 	bl	8000220 <__aeabi_dsub>
 80147ea:	ad4a      	add	r5, sp, #296	@ 0x128
 80147ec:	2401      	movs	r4, #1
 80147ee:	45a0      	cmp	r8, r4
 80147f0:	da2b      	bge.n	801484a <__kernel_rem_pio2+0x5d2>
 80147f2:	f1b9 0f00 	cmp.w	r9, #0
 80147f6:	d002      	beq.n	80147fe <__kernel_rem_pio2+0x586>
 80147f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80147fc:	4619      	mov	r1, r3
 80147fe:	9b04      	ldr	r3, [sp, #16]
 8014800:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014804:	e7a5      	b.n	8014752 <__kernel_rem_pio2+0x4da>
 8014806:	9c05      	ldr	r4, [sp, #20]
 8014808:	ab48      	add	r3, sp, #288	@ 0x120
 801480a:	441c      	add	r4, r3
 801480c:	2000      	movs	r0, #0
 801480e:	2100      	movs	r1, #0
 8014810:	f1b8 0f00 	cmp.w	r8, #0
 8014814:	da09      	bge.n	801482a <__kernel_rem_pio2+0x5b2>
 8014816:	f1b9 0f00 	cmp.w	r9, #0
 801481a:	d002      	beq.n	8014822 <__kernel_rem_pio2+0x5aa>
 801481c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014820:	4619      	mov	r1, r3
 8014822:	9b04      	ldr	r3, [sp, #16]
 8014824:	e9c3 0100 	strd	r0, r1, [r3]
 8014828:	e793      	b.n	8014752 <__kernel_rem_pio2+0x4da>
 801482a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801482e:	f7eb fcf9 	bl	8000224 <__adddf3>
 8014832:	f108 38ff 	add.w	r8, r8, #4294967295
 8014836:	e7eb      	b.n	8014810 <__kernel_rem_pio2+0x598>
 8014838:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801483c:	f7eb fcf2 	bl	8000224 <__adddf3>
 8014840:	3c01      	subs	r4, #1
 8014842:	e7c1      	b.n	80147c8 <__kernel_rem_pio2+0x550>
 8014844:	4602      	mov	r2, r0
 8014846:	460b      	mov	r3, r1
 8014848:	e7c6      	b.n	80147d8 <__kernel_rem_pio2+0x560>
 801484a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801484e:	f7eb fce9 	bl	8000224 <__adddf3>
 8014852:	3401      	adds	r4, #1
 8014854:	e7cb      	b.n	80147ee <__kernel_rem_pio2+0x576>
 8014856:	ed35 7b02 	vldmdb	r5!, {d7}
 801485a:	ed8d 7b00 	vstr	d7, [sp]
 801485e:	ed95 7b02 	vldr	d7, [r5, #8]
 8014862:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014866:	ec53 2b17 	vmov	r2, r3, d7
 801486a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801486e:	f7eb fcd9 	bl	8000224 <__adddf3>
 8014872:	4602      	mov	r2, r0
 8014874:	460b      	mov	r3, r1
 8014876:	4606      	mov	r6, r0
 8014878:	460f      	mov	r7, r1
 801487a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801487e:	f7eb fccf 	bl	8000220 <__aeabi_dsub>
 8014882:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014886:	f7eb fccd 	bl	8000224 <__adddf3>
 801488a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801488e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8014892:	e9c5 6700 	strd	r6, r7, [r5]
 8014896:	e771      	b.n	801477c <__kernel_rem_pio2+0x504>
 8014898:	ed34 7b02 	vldmdb	r4!, {d7}
 801489c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80148a0:	ec51 0b17 	vmov	r0, r1, d7
 80148a4:	4652      	mov	r2, sl
 80148a6:	465b      	mov	r3, fp
 80148a8:	ed8d 7b00 	vstr	d7, [sp]
 80148ac:	f7eb fcba 	bl	8000224 <__adddf3>
 80148b0:	4602      	mov	r2, r0
 80148b2:	460b      	mov	r3, r1
 80148b4:	4606      	mov	r6, r0
 80148b6:	460f      	mov	r7, r1
 80148b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148bc:	f7eb fcb0 	bl	8000220 <__aeabi_dsub>
 80148c0:	4652      	mov	r2, sl
 80148c2:	465b      	mov	r3, fp
 80148c4:	f7eb fcae 	bl	8000224 <__adddf3>
 80148c8:	3d01      	subs	r5, #1
 80148ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80148ce:	e9c4 6700 	strd	r6, r7, [r4]
 80148d2:	e757      	b.n	8014784 <__kernel_rem_pio2+0x50c>
 80148d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80148d8:	f7eb fca4 	bl	8000224 <__adddf3>
 80148dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80148e0:	e758      	b.n	8014794 <__kernel_rem_pio2+0x51c>
 80148e2:	bf00      	nop
 80148e4:	f3af 8000 	nop.w
	...
 80148f0:	41700000 	.word	0x41700000
 80148f4:	3e700000 	.word	0x3e700000
 80148f8:	9b04      	ldr	r3, [sp, #16]
 80148fa:	9a04      	ldr	r2, [sp, #16]
 80148fc:	601d      	str	r5, [r3, #0]
 80148fe:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8014902:	605c      	str	r4, [r3, #4]
 8014904:	609f      	str	r7, [r3, #8]
 8014906:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 801490a:	60d3      	str	r3, [r2, #12]
 801490c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014910:	6110      	str	r0, [r2, #16]
 8014912:	6153      	str	r3, [r2, #20]
 8014914:	e71d      	b.n	8014752 <__kernel_rem_pio2+0x4da>
 8014916:	bf00      	nop

08014918 <__kernel_rem_pio2f>:
 8014918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801491c:	ed2d 8b04 	vpush	{d8-d9}
 8014920:	b0d9      	sub	sp, #356	@ 0x164
 8014922:	4690      	mov	r8, r2
 8014924:	9001      	str	r0, [sp, #4]
 8014926:	4ab6      	ldr	r2, [pc, #728]	@ (8014c00 <__kernel_rem_pio2f+0x2e8>)
 8014928:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801492a:	f118 0f04 	cmn.w	r8, #4
 801492e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8014932:	460f      	mov	r7, r1
 8014934:	f103 3bff 	add.w	fp, r3, #4294967295
 8014938:	db26      	blt.n	8014988 <__kernel_rem_pio2f+0x70>
 801493a:	f1b8 0203 	subs.w	r2, r8, #3
 801493e:	bf48      	it	mi
 8014940:	f108 0204 	addmi.w	r2, r8, #4
 8014944:	10d2      	asrs	r2, r2, #3
 8014946:	1c55      	adds	r5, r2, #1
 8014948:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801494a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8014c10 <__kernel_rem_pio2f+0x2f8>
 801494e:	00e8      	lsls	r0, r5, #3
 8014950:	eba2 060b 	sub.w	r6, r2, fp
 8014954:	9002      	str	r0, [sp, #8]
 8014956:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801495a:	eb0a 0c0b 	add.w	ip, sl, fp
 801495e:	ac1c      	add	r4, sp, #112	@ 0x70
 8014960:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8014964:	2000      	movs	r0, #0
 8014966:	4560      	cmp	r0, ip
 8014968:	dd10      	ble.n	801498c <__kernel_rem_pio2f+0x74>
 801496a:	a91c      	add	r1, sp, #112	@ 0x70
 801496c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8014970:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8014974:	2600      	movs	r6, #0
 8014976:	4556      	cmp	r6, sl
 8014978:	dc24      	bgt.n	80149c4 <__kernel_rem_pio2f+0xac>
 801497a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801497e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8014c10 <__kernel_rem_pio2f+0x2f8>
 8014982:	4684      	mov	ip, r0
 8014984:	2400      	movs	r4, #0
 8014986:	e016      	b.n	80149b6 <__kernel_rem_pio2f+0x9e>
 8014988:	2200      	movs	r2, #0
 801498a:	e7dc      	b.n	8014946 <__kernel_rem_pio2f+0x2e>
 801498c:	42c6      	cmn	r6, r0
 801498e:	bf5d      	ittte	pl
 8014990:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8014994:	ee07 1a90 	vmovpl	s15, r1
 8014998:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801499c:	eef0 7a47 	vmovmi.f32	s15, s14
 80149a0:	ece4 7a01 	vstmia	r4!, {s15}
 80149a4:	3001      	adds	r0, #1
 80149a6:	e7de      	b.n	8014966 <__kernel_rem_pio2f+0x4e>
 80149a8:	ecfe 6a01 	vldmia	lr!, {s13}
 80149ac:	ed3c 7a01 	vldmdb	ip!, {s14}
 80149b0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80149b4:	3401      	adds	r4, #1
 80149b6:	455c      	cmp	r4, fp
 80149b8:	ddf6      	ble.n	80149a8 <__kernel_rem_pio2f+0x90>
 80149ba:	ece9 7a01 	vstmia	r9!, {s15}
 80149be:	3601      	adds	r6, #1
 80149c0:	3004      	adds	r0, #4
 80149c2:	e7d8      	b.n	8014976 <__kernel_rem_pio2f+0x5e>
 80149c4:	a908      	add	r1, sp, #32
 80149c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80149ca:	9104      	str	r1, [sp, #16]
 80149cc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80149ce:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8014c0c <__kernel_rem_pio2f+0x2f4>
 80149d2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8014c08 <__kernel_rem_pio2f+0x2f0>
 80149d6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80149da:	9203      	str	r2, [sp, #12]
 80149dc:	4654      	mov	r4, sl
 80149de:	00a2      	lsls	r2, r4, #2
 80149e0:	9205      	str	r2, [sp, #20]
 80149e2:	aa58      	add	r2, sp, #352	@ 0x160
 80149e4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80149e8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80149ec:	a944      	add	r1, sp, #272	@ 0x110
 80149ee:	aa08      	add	r2, sp, #32
 80149f0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80149f4:	4694      	mov	ip, r2
 80149f6:	4626      	mov	r6, r4
 80149f8:	2e00      	cmp	r6, #0
 80149fa:	dc4c      	bgt.n	8014a96 <__kernel_rem_pio2f+0x17e>
 80149fc:	4628      	mov	r0, r5
 80149fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014a02:	f7ff fbd3 	bl	80141ac <scalbnf>
 8014a06:	eeb0 8a40 	vmov.f32	s16, s0
 8014a0a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8014a0e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8014a12:	f000 fa65 	bl	8014ee0 <floorf>
 8014a16:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8014a1a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8014a1e:	2d00      	cmp	r5, #0
 8014a20:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014a24:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8014a28:	ee17 9a90 	vmov	r9, s15
 8014a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a30:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014a34:	dd41      	ble.n	8014aba <__kernel_rem_pio2f+0x1a2>
 8014a36:	f104 3cff 	add.w	ip, r4, #4294967295
 8014a3a:	a908      	add	r1, sp, #32
 8014a3c:	f1c5 0e08 	rsb	lr, r5, #8
 8014a40:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8014a44:	fa46 f00e 	asr.w	r0, r6, lr
 8014a48:	4481      	add	r9, r0
 8014a4a:	fa00 f00e 	lsl.w	r0, r0, lr
 8014a4e:	1a36      	subs	r6, r6, r0
 8014a50:	f1c5 0007 	rsb	r0, r5, #7
 8014a54:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8014a58:	4106      	asrs	r6, r0
 8014a5a:	2e00      	cmp	r6, #0
 8014a5c:	dd3c      	ble.n	8014ad8 <__kernel_rem_pio2f+0x1c0>
 8014a5e:	f04f 0e00 	mov.w	lr, #0
 8014a62:	f109 0901 	add.w	r9, r9, #1
 8014a66:	4670      	mov	r0, lr
 8014a68:	4574      	cmp	r4, lr
 8014a6a:	dc68      	bgt.n	8014b3e <__kernel_rem_pio2f+0x226>
 8014a6c:	2d00      	cmp	r5, #0
 8014a6e:	dd03      	ble.n	8014a78 <__kernel_rem_pio2f+0x160>
 8014a70:	2d01      	cmp	r5, #1
 8014a72:	d074      	beq.n	8014b5e <__kernel_rem_pio2f+0x246>
 8014a74:	2d02      	cmp	r5, #2
 8014a76:	d07d      	beq.n	8014b74 <__kernel_rem_pio2f+0x25c>
 8014a78:	2e02      	cmp	r6, #2
 8014a7a:	d12d      	bne.n	8014ad8 <__kernel_rem_pio2f+0x1c0>
 8014a7c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014a80:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014a84:	b340      	cbz	r0, 8014ad8 <__kernel_rem_pio2f+0x1c0>
 8014a86:	4628      	mov	r0, r5
 8014a88:	9306      	str	r3, [sp, #24]
 8014a8a:	f7ff fb8f 	bl	80141ac <scalbnf>
 8014a8e:	9b06      	ldr	r3, [sp, #24]
 8014a90:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014a94:	e020      	b.n	8014ad8 <__kernel_rem_pio2f+0x1c0>
 8014a96:	ee60 7a28 	vmul.f32	s15, s0, s17
 8014a9a:	3e01      	subs	r6, #1
 8014a9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014aa0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014aa4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8014aa8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014aac:	ecac 0a01 	vstmia	ip!, {s0}
 8014ab0:	ed30 0a01 	vldmdb	r0!, {s0}
 8014ab4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014ab8:	e79e      	b.n	80149f8 <__kernel_rem_pio2f+0xe0>
 8014aba:	d105      	bne.n	8014ac8 <__kernel_rem_pio2f+0x1b0>
 8014abc:	1e60      	subs	r0, r4, #1
 8014abe:	a908      	add	r1, sp, #32
 8014ac0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8014ac4:	11f6      	asrs	r6, r6, #7
 8014ac6:	e7c8      	b.n	8014a5a <__kernel_rem_pio2f+0x142>
 8014ac8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014acc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ad4:	da31      	bge.n	8014b3a <__kernel_rem_pio2f+0x222>
 8014ad6:	2600      	movs	r6, #0
 8014ad8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ae0:	f040 8098 	bne.w	8014c14 <__kernel_rem_pio2f+0x2fc>
 8014ae4:	1e60      	subs	r0, r4, #1
 8014ae6:	2200      	movs	r2, #0
 8014ae8:	4550      	cmp	r0, sl
 8014aea:	da4b      	bge.n	8014b84 <__kernel_rem_pio2f+0x26c>
 8014aec:	2a00      	cmp	r2, #0
 8014aee:	d065      	beq.n	8014bbc <__kernel_rem_pio2f+0x2a4>
 8014af0:	3c01      	subs	r4, #1
 8014af2:	ab08      	add	r3, sp, #32
 8014af4:	3d08      	subs	r5, #8
 8014af6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d0f8      	beq.n	8014af0 <__kernel_rem_pio2f+0x1d8>
 8014afe:	4628      	mov	r0, r5
 8014b00:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014b04:	f7ff fb52 	bl	80141ac <scalbnf>
 8014b08:	1c63      	adds	r3, r4, #1
 8014b0a:	aa44      	add	r2, sp, #272	@ 0x110
 8014b0c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8014c0c <__kernel_rem_pio2f+0x2f4>
 8014b10:	0099      	lsls	r1, r3, #2
 8014b12:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014b16:	4623      	mov	r3, r4
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	f280 80a9 	bge.w	8014c70 <__kernel_rem_pio2f+0x358>
 8014b1e:	4623      	mov	r3, r4
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	f2c0 80c7 	blt.w	8014cb4 <__kernel_rem_pio2f+0x39c>
 8014b26:	aa44      	add	r2, sp, #272	@ 0x110
 8014b28:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8014b2c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8014c04 <__kernel_rem_pio2f+0x2ec>
 8014b30:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8014c10 <__kernel_rem_pio2f+0x2f8>
 8014b34:	2000      	movs	r0, #0
 8014b36:	1ae2      	subs	r2, r4, r3
 8014b38:	e0b1      	b.n	8014c9e <__kernel_rem_pio2f+0x386>
 8014b3a:	2602      	movs	r6, #2
 8014b3c:	e78f      	b.n	8014a5e <__kernel_rem_pio2f+0x146>
 8014b3e:	f852 1b04 	ldr.w	r1, [r2], #4
 8014b42:	b948      	cbnz	r0, 8014b58 <__kernel_rem_pio2f+0x240>
 8014b44:	b121      	cbz	r1, 8014b50 <__kernel_rem_pio2f+0x238>
 8014b46:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8014b4a:	f842 1c04 	str.w	r1, [r2, #-4]
 8014b4e:	2101      	movs	r1, #1
 8014b50:	f10e 0e01 	add.w	lr, lr, #1
 8014b54:	4608      	mov	r0, r1
 8014b56:	e787      	b.n	8014a68 <__kernel_rem_pio2f+0x150>
 8014b58:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8014b5c:	e7f5      	b.n	8014b4a <__kernel_rem_pio2f+0x232>
 8014b5e:	f104 3cff 	add.w	ip, r4, #4294967295
 8014b62:	aa08      	add	r2, sp, #32
 8014b64:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8014b68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8014b6c:	a908      	add	r1, sp, #32
 8014b6e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8014b72:	e781      	b.n	8014a78 <__kernel_rem_pio2f+0x160>
 8014b74:	f104 3cff 	add.w	ip, r4, #4294967295
 8014b78:	aa08      	add	r2, sp, #32
 8014b7a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8014b7e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8014b82:	e7f3      	b.n	8014b6c <__kernel_rem_pio2f+0x254>
 8014b84:	a908      	add	r1, sp, #32
 8014b86:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014b8a:	3801      	subs	r0, #1
 8014b8c:	430a      	orrs	r2, r1
 8014b8e:	e7ab      	b.n	8014ae8 <__kernel_rem_pio2f+0x1d0>
 8014b90:	3201      	adds	r2, #1
 8014b92:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8014b96:	2e00      	cmp	r6, #0
 8014b98:	d0fa      	beq.n	8014b90 <__kernel_rem_pio2f+0x278>
 8014b9a:	9905      	ldr	r1, [sp, #20]
 8014b9c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8014ba0:	eb0d 0001 	add.w	r0, sp, r1
 8014ba4:	18e6      	adds	r6, r4, r3
 8014ba6:	a91c      	add	r1, sp, #112	@ 0x70
 8014ba8:	f104 0c01 	add.w	ip, r4, #1
 8014bac:	384c      	subs	r0, #76	@ 0x4c
 8014bae:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8014bb2:	4422      	add	r2, r4
 8014bb4:	4562      	cmp	r2, ip
 8014bb6:	da04      	bge.n	8014bc2 <__kernel_rem_pio2f+0x2aa>
 8014bb8:	4614      	mov	r4, r2
 8014bba:	e710      	b.n	80149de <__kernel_rem_pio2f+0xc6>
 8014bbc:	9804      	ldr	r0, [sp, #16]
 8014bbe:	2201      	movs	r2, #1
 8014bc0:	e7e7      	b.n	8014b92 <__kernel_rem_pio2f+0x27a>
 8014bc2:	9903      	ldr	r1, [sp, #12]
 8014bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8014bc8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8014bcc:	9105      	str	r1, [sp, #20]
 8014bce:	ee07 1a90 	vmov	s15, r1
 8014bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014bd6:	2400      	movs	r4, #0
 8014bd8:	ece6 7a01 	vstmia	r6!, {s15}
 8014bdc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8014c10 <__kernel_rem_pio2f+0x2f8>
 8014be0:	46b1      	mov	r9, r6
 8014be2:	455c      	cmp	r4, fp
 8014be4:	dd04      	ble.n	8014bf0 <__kernel_rem_pio2f+0x2d8>
 8014be6:	ece0 7a01 	vstmia	r0!, {s15}
 8014bea:	f10c 0c01 	add.w	ip, ip, #1
 8014bee:	e7e1      	b.n	8014bb4 <__kernel_rem_pio2f+0x29c>
 8014bf0:	ecfe 6a01 	vldmia	lr!, {s13}
 8014bf4:	ed39 7a01 	vldmdb	r9!, {s14}
 8014bf8:	3401      	adds	r4, #1
 8014bfa:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014bfe:	e7f0      	b.n	8014be2 <__kernel_rem_pio2f+0x2ca>
 8014c00:	080155c4 	.word	0x080155c4
 8014c04:	08015598 	.word	0x08015598
 8014c08:	43800000 	.word	0x43800000
 8014c0c:	3b800000 	.word	0x3b800000
 8014c10:	00000000 	.word	0x00000000
 8014c14:	9b02      	ldr	r3, [sp, #8]
 8014c16:	eeb0 0a48 	vmov.f32	s0, s16
 8014c1a:	eba3 0008 	sub.w	r0, r3, r8
 8014c1e:	f7ff fac5 	bl	80141ac <scalbnf>
 8014c22:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8014c08 <__kernel_rem_pio2f+0x2f0>
 8014c26:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c2e:	db19      	blt.n	8014c64 <__kernel_rem_pio2f+0x34c>
 8014c30:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8014c0c <__kernel_rem_pio2f+0x2f4>
 8014c34:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014c38:	aa08      	add	r2, sp, #32
 8014c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c3e:	3508      	adds	r5, #8
 8014c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c44:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014c48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c4c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014c50:	ee10 3a10 	vmov	r3, s0
 8014c54:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014c58:	ee17 3a90 	vmov	r3, s15
 8014c5c:	3401      	adds	r4, #1
 8014c5e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014c62:	e74c      	b.n	8014afe <__kernel_rem_pio2f+0x1e6>
 8014c64:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014c68:	aa08      	add	r2, sp, #32
 8014c6a:	ee10 3a10 	vmov	r3, s0
 8014c6e:	e7f6      	b.n	8014c5e <__kernel_rem_pio2f+0x346>
 8014c70:	a808      	add	r0, sp, #32
 8014c72:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8014c76:	9001      	str	r0, [sp, #4]
 8014c78:	ee07 0a90 	vmov	s15, r0
 8014c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c80:	3b01      	subs	r3, #1
 8014c82:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014c86:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014c8a:	ed62 7a01 	vstmdb	r2!, {s15}
 8014c8e:	e743      	b.n	8014b18 <__kernel_rem_pio2f+0x200>
 8014c90:	ecfc 6a01 	vldmia	ip!, {s13}
 8014c94:	ecb5 7a01 	vldmia	r5!, {s14}
 8014c98:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014c9c:	3001      	adds	r0, #1
 8014c9e:	4550      	cmp	r0, sl
 8014ca0:	dc01      	bgt.n	8014ca6 <__kernel_rem_pio2f+0x38e>
 8014ca2:	4290      	cmp	r0, r2
 8014ca4:	ddf4      	ble.n	8014c90 <__kernel_rem_pio2f+0x378>
 8014ca6:	a858      	add	r0, sp, #352	@ 0x160
 8014ca8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8014cac:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8014cb0:	3b01      	subs	r3, #1
 8014cb2:	e735      	b.n	8014b20 <__kernel_rem_pio2f+0x208>
 8014cb4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8014cb6:	2b02      	cmp	r3, #2
 8014cb8:	dc09      	bgt.n	8014cce <__kernel_rem_pio2f+0x3b6>
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	dc27      	bgt.n	8014d0e <__kernel_rem_pio2f+0x3f6>
 8014cbe:	d040      	beq.n	8014d42 <__kernel_rem_pio2f+0x42a>
 8014cc0:	f009 0007 	and.w	r0, r9, #7
 8014cc4:	b059      	add	sp, #356	@ 0x164
 8014cc6:	ecbd 8b04 	vpop	{d8-d9}
 8014cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cce:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8014cd0:	2b03      	cmp	r3, #3
 8014cd2:	d1f5      	bne.n	8014cc0 <__kernel_rem_pio2f+0x3a8>
 8014cd4:	aa30      	add	r2, sp, #192	@ 0xc0
 8014cd6:	1f0b      	subs	r3, r1, #4
 8014cd8:	4413      	add	r3, r2
 8014cda:	461a      	mov	r2, r3
 8014cdc:	4620      	mov	r0, r4
 8014cde:	2800      	cmp	r0, #0
 8014ce0:	dc50      	bgt.n	8014d84 <__kernel_rem_pio2f+0x46c>
 8014ce2:	4622      	mov	r2, r4
 8014ce4:	2a01      	cmp	r2, #1
 8014ce6:	dc5d      	bgt.n	8014da4 <__kernel_rem_pio2f+0x48c>
 8014ce8:	ab30      	add	r3, sp, #192	@ 0xc0
 8014cea:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8014c10 <__kernel_rem_pio2f+0x2f8>
 8014cee:	440b      	add	r3, r1
 8014cf0:	2c01      	cmp	r4, #1
 8014cf2:	dc67      	bgt.n	8014dc4 <__kernel_rem_pio2f+0x4ac>
 8014cf4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8014cf8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8014cfc:	2e00      	cmp	r6, #0
 8014cfe:	d167      	bne.n	8014dd0 <__kernel_rem_pio2f+0x4b8>
 8014d00:	edc7 6a00 	vstr	s13, [r7]
 8014d04:	ed87 7a01 	vstr	s14, [r7, #4]
 8014d08:	edc7 7a02 	vstr	s15, [r7, #8]
 8014d0c:	e7d8      	b.n	8014cc0 <__kernel_rem_pio2f+0x3a8>
 8014d0e:	ab30      	add	r3, sp, #192	@ 0xc0
 8014d10:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8014c10 <__kernel_rem_pio2f+0x2f8>
 8014d14:	440b      	add	r3, r1
 8014d16:	4622      	mov	r2, r4
 8014d18:	2a00      	cmp	r2, #0
 8014d1a:	da24      	bge.n	8014d66 <__kernel_rem_pio2f+0x44e>
 8014d1c:	b34e      	cbz	r6, 8014d72 <__kernel_rem_pio2f+0x45a>
 8014d1e:	eef1 7a47 	vneg.f32	s15, s14
 8014d22:	edc7 7a00 	vstr	s15, [r7]
 8014d26:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8014d2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d2e:	aa31      	add	r2, sp, #196	@ 0xc4
 8014d30:	2301      	movs	r3, #1
 8014d32:	429c      	cmp	r4, r3
 8014d34:	da20      	bge.n	8014d78 <__kernel_rem_pio2f+0x460>
 8014d36:	b10e      	cbz	r6, 8014d3c <__kernel_rem_pio2f+0x424>
 8014d38:	eef1 7a67 	vneg.f32	s15, s15
 8014d3c:	edc7 7a01 	vstr	s15, [r7, #4]
 8014d40:	e7be      	b.n	8014cc0 <__kernel_rem_pio2f+0x3a8>
 8014d42:	ab30      	add	r3, sp, #192	@ 0xc0
 8014d44:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8014c10 <__kernel_rem_pio2f+0x2f8>
 8014d48:	440b      	add	r3, r1
 8014d4a:	2c00      	cmp	r4, #0
 8014d4c:	da05      	bge.n	8014d5a <__kernel_rem_pio2f+0x442>
 8014d4e:	b10e      	cbz	r6, 8014d54 <__kernel_rem_pio2f+0x43c>
 8014d50:	eef1 7a67 	vneg.f32	s15, s15
 8014d54:	edc7 7a00 	vstr	s15, [r7]
 8014d58:	e7b2      	b.n	8014cc0 <__kernel_rem_pio2f+0x3a8>
 8014d5a:	ed33 7a01 	vldmdb	r3!, {s14}
 8014d5e:	3c01      	subs	r4, #1
 8014d60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d64:	e7f1      	b.n	8014d4a <__kernel_rem_pio2f+0x432>
 8014d66:	ed73 7a01 	vldmdb	r3!, {s15}
 8014d6a:	3a01      	subs	r2, #1
 8014d6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014d70:	e7d2      	b.n	8014d18 <__kernel_rem_pio2f+0x400>
 8014d72:	eef0 7a47 	vmov.f32	s15, s14
 8014d76:	e7d4      	b.n	8014d22 <__kernel_rem_pio2f+0x40a>
 8014d78:	ecb2 7a01 	vldmia	r2!, {s14}
 8014d7c:	3301      	adds	r3, #1
 8014d7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014d82:	e7d6      	b.n	8014d32 <__kernel_rem_pio2f+0x41a>
 8014d84:	ed72 7a01 	vldmdb	r2!, {s15}
 8014d88:	edd2 6a01 	vldr	s13, [r2, #4]
 8014d8c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014d90:	3801      	subs	r0, #1
 8014d92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d96:	ed82 7a00 	vstr	s14, [r2]
 8014d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014d9e:	edc2 7a01 	vstr	s15, [r2, #4]
 8014da2:	e79c      	b.n	8014cde <__kernel_rem_pio2f+0x3c6>
 8014da4:	ed73 7a01 	vldmdb	r3!, {s15}
 8014da8:	edd3 6a01 	vldr	s13, [r3, #4]
 8014dac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014db0:	3a01      	subs	r2, #1
 8014db2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014db6:	ed83 7a00 	vstr	s14, [r3]
 8014dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014dbe:	edc3 7a01 	vstr	s15, [r3, #4]
 8014dc2:	e78f      	b.n	8014ce4 <__kernel_rem_pio2f+0x3cc>
 8014dc4:	ed33 7a01 	vldmdb	r3!, {s14}
 8014dc8:	3c01      	subs	r4, #1
 8014dca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014dce:	e78f      	b.n	8014cf0 <__kernel_rem_pio2f+0x3d8>
 8014dd0:	eef1 6a66 	vneg.f32	s13, s13
 8014dd4:	eeb1 7a47 	vneg.f32	s14, s14
 8014dd8:	edc7 6a00 	vstr	s13, [r7]
 8014ddc:	ed87 7a01 	vstr	s14, [r7, #4]
 8014de0:	eef1 7a67 	vneg.f32	s15, s15
 8014de4:	e790      	b.n	8014d08 <__kernel_rem_pio2f+0x3f0>
 8014de6:	bf00      	nop

08014de8 <floor>:
 8014de8:	ec51 0b10 	vmov	r0, r1, d0
 8014dec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014df4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8014df8:	2e13      	cmp	r6, #19
 8014dfa:	460c      	mov	r4, r1
 8014dfc:	4605      	mov	r5, r0
 8014dfe:	4680      	mov	r8, r0
 8014e00:	dc34      	bgt.n	8014e6c <floor+0x84>
 8014e02:	2e00      	cmp	r6, #0
 8014e04:	da17      	bge.n	8014e36 <floor+0x4e>
 8014e06:	a332      	add	r3, pc, #200	@ (adr r3, 8014ed0 <floor+0xe8>)
 8014e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e0c:	f7eb fa0a 	bl	8000224 <__adddf3>
 8014e10:	2200      	movs	r2, #0
 8014e12:	2300      	movs	r3, #0
 8014e14:	f7eb fe4c 	bl	8000ab0 <__aeabi_dcmpgt>
 8014e18:	b150      	cbz	r0, 8014e30 <floor+0x48>
 8014e1a:	2c00      	cmp	r4, #0
 8014e1c:	da55      	bge.n	8014eca <floor+0xe2>
 8014e1e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8014e22:	432c      	orrs	r4, r5
 8014e24:	2500      	movs	r5, #0
 8014e26:	42ac      	cmp	r4, r5
 8014e28:	4c2b      	ldr	r4, [pc, #172]	@ (8014ed8 <floor+0xf0>)
 8014e2a:	bf08      	it	eq
 8014e2c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8014e30:	4621      	mov	r1, r4
 8014e32:	4628      	mov	r0, r5
 8014e34:	e023      	b.n	8014e7e <floor+0x96>
 8014e36:	4f29      	ldr	r7, [pc, #164]	@ (8014edc <floor+0xf4>)
 8014e38:	4137      	asrs	r7, r6
 8014e3a:	ea01 0307 	and.w	r3, r1, r7
 8014e3e:	4303      	orrs	r3, r0
 8014e40:	d01d      	beq.n	8014e7e <floor+0x96>
 8014e42:	a323      	add	r3, pc, #140	@ (adr r3, 8014ed0 <floor+0xe8>)
 8014e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e48:	f7eb f9ec 	bl	8000224 <__adddf3>
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	2300      	movs	r3, #0
 8014e50:	f7eb fe2e 	bl	8000ab0 <__aeabi_dcmpgt>
 8014e54:	2800      	cmp	r0, #0
 8014e56:	d0eb      	beq.n	8014e30 <floor+0x48>
 8014e58:	2c00      	cmp	r4, #0
 8014e5a:	bfbe      	ittt	lt
 8014e5c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8014e60:	4133      	asrlt	r3, r6
 8014e62:	18e4      	addlt	r4, r4, r3
 8014e64:	ea24 0407 	bic.w	r4, r4, r7
 8014e68:	2500      	movs	r5, #0
 8014e6a:	e7e1      	b.n	8014e30 <floor+0x48>
 8014e6c:	2e33      	cmp	r6, #51	@ 0x33
 8014e6e:	dd0a      	ble.n	8014e86 <floor+0x9e>
 8014e70:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8014e74:	d103      	bne.n	8014e7e <floor+0x96>
 8014e76:	4602      	mov	r2, r0
 8014e78:	460b      	mov	r3, r1
 8014e7a:	f7eb f9d3 	bl	8000224 <__adddf3>
 8014e7e:	ec41 0b10 	vmov	d0, r0, r1
 8014e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e86:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8014e8a:	f04f 37ff 	mov.w	r7, #4294967295
 8014e8e:	40df      	lsrs	r7, r3
 8014e90:	4207      	tst	r7, r0
 8014e92:	d0f4      	beq.n	8014e7e <floor+0x96>
 8014e94:	a30e      	add	r3, pc, #56	@ (adr r3, 8014ed0 <floor+0xe8>)
 8014e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e9a:	f7eb f9c3 	bl	8000224 <__adddf3>
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	f7eb fe05 	bl	8000ab0 <__aeabi_dcmpgt>
 8014ea6:	2800      	cmp	r0, #0
 8014ea8:	d0c2      	beq.n	8014e30 <floor+0x48>
 8014eaa:	2c00      	cmp	r4, #0
 8014eac:	da0a      	bge.n	8014ec4 <floor+0xdc>
 8014eae:	2e14      	cmp	r6, #20
 8014eb0:	d101      	bne.n	8014eb6 <floor+0xce>
 8014eb2:	3401      	adds	r4, #1
 8014eb4:	e006      	b.n	8014ec4 <floor+0xdc>
 8014eb6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8014eba:	2301      	movs	r3, #1
 8014ebc:	40b3      	lsls	r3, r6
 8014ebe:	441d      	add	r5, r3
 8014ec0:	4545      	cmp	r5, r8
 8014ec2:	d3f6      	bcc.n	8014eb2 <floor+0xca>
 8014ec4:	ea25 0507 	bic.w	r5, r5, r7
 8014ec8:	e7b2      	b.n	8014e30 <floor+0x48>
 8014eca:	2500      	movs	r5, #0
 8014ecc:	462c      	mov	r4, r5
 8014ece:	e7af      	b.n	8014e30 <floor+0x48>
 8014ed0:	8800759c 	.word	0x8800759c
 8014ed4:	7e37e43c 	.word	0x7e37e43c
 8014ed8:	bff00000 	.word	0xbff00000
 8014edc:	000fffff 	.word	0x000fffff

08014ee0 <floorf>:
 8014ee0:	ee10 3a10 	vmov	r3, s0
 8014ee4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014ee8:	3a7f      	subs	r2, #127	@ 0x7f
 8014eea:	2a16      	cmp	r2, #22
 8014eec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014ef0:	dc2b      	bgt.n	8014f4a <floorf+0x6a>
 8014ef2:	2a00      	cmp	r2, #0
 8014ef4:	da12      	bge.n	8014f1c <floorf+0x3c>
 8014ef6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014f5c <floorf+0x7c>
 8014efa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014efe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f06:	dd06      	ble.n	8014f16 <floorf+0x36>
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	da24      	bge.n	8014f56 <floorf+0x76>
 8014f0c:	2900      	cmp	r1, #0
 8014f0e:	4b14      	ldr	r3, [pc, #80]	@ (8014f60 <floorf+0x80>)
 8014f10:	bf08      	it	eq
 8014f12:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8014f16:	ee00 3a10 	vmov	s0, r3
 8014f1a:	4770      	bx	lr
 8014f1c:	4911      	ldr	r1, [pc, #68]	@ (8014f64 <floorf+0x84>)
 8014f1e:	4111      	asrs	r1, r2
 8014f20:	420b      	tst	r3, r1
 8014f22:	d0fa      	beq.n	8014f1a <floorf+0x3a>
 8014f24:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8014f5c <floorf+0x7c>
 8014f28:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014f2c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f34:	ddef      	ble.n	8014f16 <floorf+0x36>
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	bfbe      	ittt	lt
 8014f3a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8014f3e:	fa40 f202 	asrlt.w	r2, r0, r2
 8014f42:	189b      	addlt	r3, r3, r2
 8014f44:	ea23 0301 	bic.w	r3, r3, r1
 8014f48:	e7e5      	b.n	8014f16 <floorf+0x36>
 8014f4a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8014f4e:	d3e4      	bcc.n	8014f1a <floorf+0x3a>
 8014f50:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014f54:	4770      	bx	lr
 8014f56:	2300      	movs	r3, #0
 8014f58:	e7dd      	b.n	8014f16 <floorf+0x36>
 8014f5a:	bf00      	nop
 8014f5c:	7149f2ca 	.word	0x7149f2ca
 8014f60:	bf800000 	.word	0xbf800000
 8014f64:	007fffff 	.word	0x007fffff

08014f68 <_init>:
 8014f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f6a:	bf00      	nop
 8014f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f6e:	bc08      	pop	{r3}
 8014f70:	469e      	mov	lr, r3
 8014f72:	4770      	bx	lr

08014f74 <_fini>:
 8014f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f76:	bf00      	nop
 8014f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f7a:	bc08      	pop	{r3}
 8014f7c:	469e      	mov	lr, r3
 8014f7e:	4770      	bx	lr
